
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a6  00800100  00003b00  00003b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008003a6  008003a6  00003e3a  2**0
                  ALLOC
  3 .stab         0000cf30  00000000  00000000  00003e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002eb9  00000000  00000000  00010d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00013c25  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_20>
      54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_28>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	63 0c       	add	r6, r3
      8e:	69 0c       	add	r6, r9
      90:	72 0c       	add	r7, r2
      92:	7d 0c       	add	r7, r13
      94:	88 0c       	add	r8, r8
      96:	95 0c       	add	r9, r5
      98:	9d 0c       	add	r9, r13
      9a:	a5 0c       	add	r10, r5
      9c:	ad 0c       	add	r10, r13
      9e:	0c 0d       	add	r16, r12
      a0:	0f 0d       	add	r16, r15
      a2:	12 0d       	add	r17, r2
      a4:	15 0d       	add	r17, r5
      a6:	18 0d       	add	r17, r8
      a8:	1b 0d       	add	r17, r11
      aa:	1e 0d       	add	r17, r14
      ac:	21 0d       	add	r18, r1
      ae:	24 0d       	add	r18, r4
      b0:	27 0d       	add	r18, r7
      b2:	2a 0d       	add	r18, r10
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 05       	cpc	r19, r15
      e2:	a8 4c       	sbci	r26, 0xC8	; 200
      e4:	cd b2       	in	r12, 0x1d	; 29
      e6:	d4 4e       	sbci	r29, 0xE4	; 228
      e8:	b9 38       	cpi	r27, 0x89	; 137
      ea:	36 a9       	ldd	r19, Z+54	; 0x36
      ec:	02 0c       	add	r0, r2
      ee:	50 b9       	out	0x00, r21	; 0
      f0:	91 86       	std	Z+9, r9	; 0x09
      f2:	88 08       	sbc	r8, r8
      f4:	3c a6       	std	Y+44, r3	; 0x2c
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	2a be       	out	0x3a, r2	; 58
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 08       	sbc	r3, r15
     100:	00 00       	nop
     102:	00 be       	out	0x30, r0	; 48
     104:	92 24       	eor	r9, r2
     106:	49 12       	cpse	r4, r25
     108:	3e ab       	std	Y+54, r19	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	cd cc       	rjmp	.-1638   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     110:	cc 4c       	sbci	r28, 0xCC	; 204
     112:	3e 00       	.word	0x003e	; ????
     114:	00 00       	nop
     116:	80 be       	out	0x30, r8	; 48
     118:	ab aa       	std	Y+51, r10	; 0x33
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	00 bf       	out	0x30, r16	; 48
     122:	00 00       	nop
     124:	00 80       	ld	r0, Z
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	08 41       	sbci	r16, 0x18	; 24
     12e:	78 d3       	rcall	.+1776   	; 0x820 <string_write+0x14>
     130:	bb 43       	sbci	r27, 0x3B	; 59
     132:	87 d1       	rcall	.+782    	; 0x442 <lcd_init+0xe>
     134:	13 3d       	cpi	r17, 0xD3	; 211
     136:	19 0e       	add	r1, r25
     138:	3c c3       	rjmp	.+1656   	; 0x7b2 <char_write+0xe>
     13a:	bd 42       	sbci	r27, 0x2D	; 45
     13c:	82 ad       	ldd	r24, Z+58	; 0x3a
     13e:	2b 3e       	cpi	r18, 0xEB	; 235
     140:	68 ec       	ldi	r22, 0xC8	; 200
     142:	82 76       	andi	r24, 0x62	; 98
     144:	be d9       	rcall	.-3204   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     146:	8f e1       	ldi	r24, 0x1F	; 31
     148:	a9 3e       	cpi	r26, 0xE9	; 233
     14a:	4c 80       	ldd	r4, Y+4	; 0x04
     14c:	ef ff       	.word	0xffef	; ????
     14e:	be 01       	movw	r22, r28
     150:	c4 ff       	sbrs	r28, 4
     152:	7f 3f       	cpi	r23, 0xFF	; 255
     154:	00 00       	nop
     156:	00 00       	nop
     158:	00 07       	cpc	r16, r16
     15a:	63 42       	sbci	r22, 0x23	; 35
     15c:	36 b7       	in	r19, 0x36	; 54
     15e:	9b d8       	rcall	.-3786   	; 0xfffff296 <__eeprom_end+0xff7ef296>
     160:	a7 1a       	sub	r10, r23
     162:	39 68       	ori	r19, 0x89	; 137
     164:	56 18       	sub	r5, r6
     166:	ae ba       	out	0x1e, r10	; 30
     168:	ab 55       	subi	r26, 0x5B	; 91
     16a:	8c 1d       	adc	r24, r12
     16c:	3c b7       	in	r19, 0x3c	; 60
     16e:	cc 57       	subi	r28, 0x7C	; 124
     170:	63 bd       	out	0x23, r22	; 35
     172:	6d ed       	ldi	r22, 0xDD	; 221
     174:	fd 75       	andi	r31, 0x5D	; 93
     176:	3e f6       	brtc	.-114    	; 0x106 <__SREG__+0xc7>
     178:	17 72       	andi	r17, 0x27	; 39
     17a:	31 bf       	out	0x31, r19	; 49
     17c:	00 00       	nop
     17e:	00 80       	ld	r0, Z
     180:	3f 4e       	sbci	r19, 0xEF	; 239

00000181 <pstr_nan>:
     181:	4e 41 4e                                            NAN

00000184 <pstr_inity>:
     184:	49 4e 49 54 59                                      INITY

00000189 <pstr_inf>:
     189:	49 4e 46                                            INF

0000018c <pwr_m10>:
     18c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     19c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a4 <pwr_p10>:
     1a4:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b4:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e4       	ldi	r29, 0x40	; 64
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e0 e0       	ldi	r30, 0x00	; 0
     1d0:	fb e3       	ldi	r31, 0x3B	; 59
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a6 3a       	cpi	r26, 0xA6	; 166
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	13 e0       	ldi	r17, 0x03	; 3
     1e4:	a6 ea       	ldi	r26, 0xA6	; 166
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a2 3b       	cpi	r26, 0xB2	; 178
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <main>
     1f6:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <__vector_28>:
    return 0; //should never get here.
}


//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	0b b6       	in	r0, 0x3b	; 59
     20a:	0f 92       	push	r0
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	4f 93       	push	r20
     212:	5f 93       	push	r21
     214:	6f 93       	push	r22
     216:	7f 93       	push	r23
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    device->serial_history[2] = device->serial_history[1];
     224:	80 91 aa 03 	lds	r24, 0x03AA
     228:	90 91 ab 03 	lds	r25, 0x03AB
     22c:	fc 01       	movw	r30, r24
     22e:	e1 57       	subi	r30, 0x71	; 113
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	20 81       	ld	r18, Z
     234:	dc 01       	movw	r26, r24
     236:	a0 57       	subi	r26, 0x70	; 112
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	2c 93       	st	X, r18
    device->serial_history[1] = device->serial_history[0];
     23c:	dc 01       	movw	r26, r24
     23e:	a2 57       	subi	r26, 0x72	; 114
     240:	bf 4f       	sbci	r27, 0xFF	; 255
     242:	2c 91       	ld	r18, X
     244:	20 83       	st	Z, r18

    //Read most recent value out of the UART buffer
    device->serial_history[0] = UDR1;
     246:	20 91 ce 00 	lds	r18, 0x00CE
     24a:	2c 93       	st	X, r18

    //if a serial update is in progress, write to the receive buffer
    if (device->op_mode==MD_UPDATE)
     24c:	fc 01       	movw	r30, r24
     24e:	20 85       	ldd	r18, Z+8	; 0x08
     250:	31 85       	ldd	r19, Z+9	; 0x09
     252:	21 30       	cpi	r18, 0x01	; 1
     254:	31 05       	cpc	r19, r1
     256:	61 f4       	brne	.+24     	; 0x270 <__vector_28+0x72>
    {
        device->rxBuffer[device->rxWritePos] = device->serial_history[0];
     258:	e3 57       	subi	r30, 0x73	; 115
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	30 81       	ld	r19, Z
     25e:	2c 91       	ld	r18, X
     260:	dc 01       	movw	r26, r24
     262:	a3 0f       	add	r26, r19
     264:	b1 1d       	adc	r27, r1
     266:	1c 96       	adiw	r26, 0x0c	; 12
     268:	2c 93       	st	X, r18
        device->rxWritePos++;
     26a:	20 81       	ld	r18, Z
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	20 83       	st	Z, r18
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart(device)){
     270:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <detectSerialStart>
     274:	e0 91 aa 03 	lds	r30, 0x03AA
     278:	f0 91 ab 03 	lds	r31, 0x03AB
     27c:	89 2b       	or	r24, r25
     27e:	21 f0       	breq	.+8      	; 0x288 <__vector_28+0x8a>
        device->op_mode = MD_UPDATE;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	91 87       	std	Z+9, r25	; 0x09
     286:	80 87       	std	Z+8, r24	; 0x08
    }

    //make the receive buffer loop
    if(device->rxWritePos >= RX_BUFFER_SIZE)
     288:	e3 57       	subi	r30, 0x73	; 115
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	80 81       	ld	r24, Z
     28e:	87 fd       	sbrc	r24, 7
    {
        device->rxWritePos = 0;
     290:	10 82       	st	Z, r1
    }
}
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	bf 91       	pop	r27
     298:	af 91       	pop	r26
     29a:	9f 91       	pop	r25
     29c:	8f 91       	pop	r24
     29e:	7f 91       	pop	r23
     2a0:	6f 91       	pop	r22
     2a2:	5f 91       	pop	r21
     2a4:	4f 91       	pop	r20
     2a6:	3f 91       	pop	r19
     2a8:	2f 91       	pop	r18
     2aa:	0f 90       	pop	r0
     2ac:	0b be       	out	0x3b, r0	; 59
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <__vector_20>:

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	0b b6       	in	r0, 0x3b	; 59
     2c4:	0f 92       	push	r0
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
    int i;

    //prevent buffer overflow
    if (device->gps_rxCount > 80)
     2de:	80 91 aa 03 	lds	r24, 0x03AA
     2e2:	90 91 ab 03 	lds	r25, 0x03AB
     2e6:	fc 01       	movw	r30, r24
     2e8:	ef 56       	subi	r30, 0x6F	; 111
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
     2ec:	20 81       	ld	r18, Z
     2ee:	31 81       	ldd	r19, Z+1	; 0x01
     2f0:	21 35       	cpi	r18, 0x51	; 81
     2f2:	31 05       	cpc	r19, r1
     2f4:	7c f0       	brlt	.+30     	; 0x314 <__vector_20+0x5c>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
    {
        for (i=0; i<80; i++)
            device->gps_rxBuffer[i]='\0';
     2fa:	dc 01       	movw	r26, r24
     2fc:	a2 0f       	add	r26, r18
     2fe:	b3 1f       	adc	r27, r19
     300:	ad 56       	subi	r26, 0x6D	; 109
     302:	bf 4f       	sbci	r27, 0xFF	; 255
     304:	1c 92       	st	X, r1
    int i;

    //prevent buffer overflow
    if (device->gps_rxCount > 80)
    {
        for (i=0; i<80; i++)
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	20 35       	cpi	r18, 0x50	; 80
     30c:	31 05       	cpc	r19, r1
     30e:	a9 f7       	brne	.-22     	; 0x2fa <__vector_20+0x42>
            device->gps_rxBuffer[i]='\0';

        device->gps_rxCount = 0; 
     310:	11 82       	std	Z+1, r1	; 0x01
     312:	10 82       	st	Z, r1
    }

    //Read value out of the UART buffer
    device->gps_rxBuffer[device->gps_rxCount] = UDR0;
     314:	20 81       	ld	r18, Z
     316:	31 81       	ldd	r19, Z+1	; 0x01
     318:	40 91 c6 00 	lds	r20, 0x00C6
     31c:	28 0f       	add	r18, r24
     31e:	39 1f       	adc	r19, r25
     320:	d9 01       	movw	r26, r18
     322:	ad 56       	subi	r26, 0x6D	; 109
     324:	bf 4f       	sbci	r27, 0xFF	; 255
     326:	4c 93       	st	X, r20

    device->gps_rxCount ++;
     328:	20 81       	ld	r18, Z
     32a:	31 81       	ldd	r19, Z+1	; 0x01
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	3f 4f       	sbci	r19, 0xFF	; 255
     330:	31 83       	std	Z+1, r19	; 0x01
     332:	20 83       	st	Z, r18

    //start new if receive $
    if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
     334:	a0 81       	ld	r26, Z
     336:	b1 81       	ldd	r27, Z+1	; 0x01
     338:	a8 0f       	add	r26, r24
     33a:	b9 1f       	adc	r27, r25
     33c:	ae 56       	subi	r26, 0x6E	; 110
     33e:	bf 4f       	sbci	r27, 0xFF	; 255
     340:	2c 91       	ld	r18, X
     342:	24 32       	cpi	r18, 0x24	; 36
     344:	b1 f4       	brne	.+44     	; 0x372 <__vector_20+0xba>
     346:	21 e0       	ldi	r18, 0x01	; 1
     348:	30 e0       	ldi	r19, 0x00	; 0
    {
        for (i=1; i<80; i++)
            device->gps_rxBuffer[i]='\0'; 
     34a:	dc 01       	movw	r26, r24
     34c:	a2 0f       	add	r26, r18
     34e:	b3 1f       	adc	r27, r19
     350:	ad 56       	subi	r26, 0x6D	; 109
     352:	bf 4f       	sbci	r27, 0xFF	; 255
     354:	1c 92       	st	X, r1
    device->gps_rxCount ++;

    //start new if receive $
    if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
    {
        for (i=1; i<80; i++)
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	20 35       	cpi	r18, 0x50	; 80
     35c:	31 05       	cpc	r19, r1
     35e:	a9 f7       	brne	.-22     	; 0x34a <__vector_20+0x92>
            device->gps_rxBuffer[i]='\0'; 

        device->gps_rxBuffer[0] = '$';
     360:	24 e2       	ldi	r18, 0x24	; 36
     362:	dc 01       	movw	r26, r24
     364:	ad 56       	subi	r26, 0x6D	; 109
     366:	bf 4f       	sbci	r27, 0xFF	; 255
     368:	2c 93       	st	X, r18
        device->gps_rxCount = 1; 
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	31 83       	std	Z+1, r19	; 0x01
     370:	20 83       	st	Z, r18
    }

    //carriage return ----> parse the string and update the raw_gps_data fields
    if ((device->gps_rxBuffer[device->gps_rxCount-1]=='\r')) {
     372:	01 90       	ld	r0, Z+
     374:	f0 81       	ld	r31, Z
     376:	e0 2d       	mov	r30, r0
     378:	e8 0f       	add	r30, r24
     37a:	f9 1f       	adc	r31, r25
     37c:	ee 56       	subi	r30, 0x6E	; 110
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	20 81       	ld	r18, Z
     382:	2d 30       	cpi	r18, 0x0D	; 13
     384:	d9 f5       	brne	.+118    	; 0x3fc <__vector_20+0x144>
        if (tag_check(device->gps_rxBuffer))
     386:	8d 56       	subi	r24, 0x6D	; 109
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	0e 94 03 05 	call	0xa06	; 0xa06 <tag_check>
     38e:	89 2b       	or	r24, r25
     390:	a9 f1       	breq	.+106    	; 0x3fc <__vector_20+0x144>
        {
            disable_gps();
     392:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <disable_gps>
            
            //strip off the rxBuffer carriage return and replace with ,
            device->gps_rxBuffer[device->gps_rxCount-1] = ',';
     396:	80 91 aa 03 	lds	r24, 0x03AA
     39a:	90 91 ab 03 	lds	r25, 0x03AB
     39e:	fc 01       	movw	r30, r24
     3a0:	ef 56       	subi	r30, 0x6F	; 111
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	01 90       	ld	r0, Z+
     3a6:	f0 81       	ld	r31, Z
     3a8:	e0 2d       	mov	r30, r0
     3aa:	e8 0f       	add	r30, r24
     3ac:	f9 1f       	adc	r31, r25
     3ae:	ee 56       	subi	r30, 0x6E	; 110
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	2c e2       	ldi	r18, 0x2C	; 44
     3b4:	20 83       	st	Z, r18

            //update the application raw_gps_data fields
            parse_nmea(device->gps_rxBuffer, device->raw_gps_data);
     3b6:	bc 01       	movw	r22, r24
     3b8:	6d 51       	subi	r22, 0x1D	; 29
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255
     3bc:	8d 56       	subi	r24, 0x6D	; 109
     3be:	9f 4f       	sbci	r25, 0xFF	; 255
     3c0:	0e 94 57 05 	call	0xaae	; 0xaae <parse_nmea>

            //signal for a gps_data update
            device->gps_update_trigger = 1;
     3c4:	20 91 aa 03 	lds	r18, 0x03AA
     3c8:	30 91 ab 03 	lds	r19, 0x03AB
     3cc:	f9 01       	movw	r30, r18
     3ce:	e3 50       	subi	r30, 0x03	; 3
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	91 83       	std	Z+1, r25	; 0x01
     3d8:	80 83       	st	Z, r24

            //clear the rxBuffer
            for (i=0; i<80; i++)
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
                device->gps_rxBuffer[i]='\0';
     3de:	f9 01       	movw	r30, r18
     3e0:	e8 0f       	add	r30, r24
     3e2:	f9 1f       	adc	r31, r25
     3e4:	ed 56       	subi	r30, 0x6D	; 109
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	10 82       	st	Z, r1

            //signal for a gps_data update
            device->gps_update_trigger = 1;

            //clear the rxBuffer
            for (i=0; i<80; i++)
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	80 35       	cpi	r24, 0x50	; 80
     3ee:	91 05       	cpc	r25, r1
     3f0:	b1 f7       	brne	.-20     	; 0x3de <__vector_20+0x126>
                device->gps_rxBuffer[i]='\0';
            device->gps_rxCount = 0;
     3f2:	f9 01       	movw	r30, r18
     3f4:	ef 56       	subi	r30, 0x6F	; 111
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	11 82       	std	Z+1, r1	; 0x01
     3fa:	10 82       	st	Z, r1
        }
    }
     3fc:	ff 91       	pop	r31
     3fe:	ef 91       	pop	r30
     400:	bf 91       	pop	r27
     402:	af 91       	pop	r26
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	7f 91       	pop	r23
     40a:	6f 91       	pop	r22
     40c:	5f 91       	pop	r21
     40e:	4f 91       	pop	r20
     410:	3f 91       	pop	r19
     412:	2f 91       	pop	r18
     414:	0f 90       	pop	r0
     416:	0b be       	out	0x3b, r0	; 59
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     422:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     424:	81 ee       	ldi	r24, 0xE1	; 225
     426:	94 e0       	ldi	r25, 0x04	; 4
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <datarw+0x6>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <datarw+0xc>
     42e:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     430:	12 98       	cbi	0x02, 2	; 2
     432:	08 95       	ret

00000434 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     434:	10 92 a7 03 	sts	0x03A7, r1
     438:	10 92 a6 03 	sts	0x03A6, r1
    line_num = 1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	90 93 01 01 	sts	0x0101, r25
     444:	80 93 00 01 	sts	0x0100, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     448:	81 b1       	in	r24, 0x01	; 1
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	81 b9       	out	0x01, r24	; 1
     44e:	87 e8       	ldi	r24, 0x87	; 135
     450:	93 e1       	ldi	r25, 0x13	; 19
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <lcd_init+0x1e>
     456:	00 c0       	rjmp	.+0      	; 0x458 <lcd_init+0x24>
     458:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     45a:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     45c:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     45e:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     460:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     462:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     464:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     466:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     468:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     46c:	81 ee       	ldi	r24, 0xE1	; 225
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <lcd_init+0x3c>
     474:	00 c0       	rjmp	.+0      	; 0x476 <lcd_init+0x42>
     476:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     478:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     47c:	89 ef       	ldi	r24, 0xF9	; 249
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <lcd_init+0x4c>
     484:	00 c0       	rjmp	.+0      	; 0x486 <lcd_init+0x52>
     486:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     488:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     48c:	89 ef       	ldi	r24, 0xF9	; 249
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x5c>
     494:	00 c0       	rjmp	.+0      	; 0x496 <lcd_init+0x62>
     496:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     498:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     49a:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     49c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     49e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4a0:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     4a4:	89 ef       	ldi	r24, 0xF9	; 249
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <lcd_init+0x74>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <lcd_init+0x7a>
     4ae:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     4b0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     4b2:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     4b4:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4b6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4b8:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     4bc:	89 ef       	ldi	r24, 0xF9	; 249
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <lcd_init+0x8c>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <lcd_init+0x92>
     4c6:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     4c8:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     4ca:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     4cc:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4ce:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4d0:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     4d4:	89 ef       	ldi	r24, 0xF9	; 249
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <lcd_init+0xa4>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <lcd_init+0xaa>
     4de:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     4e0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     4e2:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     4e4:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4e6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4e8:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     4ec:	89 ef       	ldi	r24, 0xF9	; 249
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <lcd_init+0xbc>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <lcd_init+0xc2>
     4f6:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     4f8:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     4fa:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     4fc:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4fe:	13 98       	cbi	0x02, 3	; 2
    datarw();
     500:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     504:	89 ef       	ldi	r24, 0xF9	; 249
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <lcd_init+0xd4>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <lcd_init+0xda>
     50e:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     510:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     512:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     514:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     516:	13 98       	cbi	0x02, 3	; 2
    datarw();
     518:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     51c:	89 ef       	ldi	r24, 0xF9	; 249
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <lcd_init+0xec>
     524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_init+0xf2>
     526:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     528:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     52a:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     52c:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     52e:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     530:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     534:	89 ef       	ldi	r24, 0xF9	; 249
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <lcd_init+0x104>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <lcd_init+0x10a>
     53e:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     540:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     542:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     544:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     546:	13 98       	cbi	0x02, 3	; 2
    datarw();
     548:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     54c:	89 ef       	ldi	r24, 0xF9	; 249
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd_init+0x11c>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd_init+0x122>
     556:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     558:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     55a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     55c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     55e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     560:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     564:	89 ef       	ldi	r24, 0xF9	; 249
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init+0x134>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <lcd_init+0x13a>
     56e:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     570:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     572:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     574:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     576:	13 98       	cbi	0x02, 3	; 2
    datarw();
     578:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     57c:	89 ef       	ldi	r24, 0xF9	; 249
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x14c>
     584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_init+0x152>
     586:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     588:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     58a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     58c:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     58e:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     590:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     594:	89 ef       	ldi	r24, 0xF9	; 249
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <lcd_init+0x164>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <lcd_init+0x16a>
     59e:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	08 95       	ret

000005a6 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	11 f4       	brne	.+4      	; 0x5ae <letterwrite+0x8>
     5aa:	16 9a       	sbi	0x02, 6	; 2
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     5ae:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     5b0:	61 30       	cpi	r22, 0x01	; 1
     5b2:	71 05       	cpc	r23, r1
     5b4:	11 f4       	brne	.+4      	; 0x5ba <letterwrite+0x14>
     5b6:	15 9a       	sbi	0x02, 5	; 2
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     5ba:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     5bc:	41 30       	cpi	r20, 0x01	; 1
     5be:	51 05       	cpc	r21, r1
     5c0:	11 f4       	brne	.+4      	; 0x5c6 <letterwrite+0x20>
     5c2:	14 9a       	sbi	0x02, 4	; 2
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     5c6:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     5c8:	21 30       	cpi	r18, 0x01	; 1
     5ca:	31 05       	cpc	r19, r1
     5cc:	11 f4       	brne	.+4      	; 0x5d2 <letterwrite+0x2c>
     5ce:	13 9a       	sbi	0x02, 3	; 2
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     5d2:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     5d4:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
     5d8:	89 ef       	ldi	r24, 0xF9	; 249
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <letterwrite+0x36>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <letterwrite+0x3c>
     5e2:	00 00       	nop
     5e4:	08 95       	ret

000005e6 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     5ec:	81 b1       	in	r24, 0x01	; 1
     5ee:	87 78       	andi	r24, 0x87	; 135
     5f0:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     5f2:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     5f4:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     5f6:	12 9a       	sbi	0x02, 2	; 2
     5f8:	81 ee       	ldi	r24, 0xE1	; 225
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <instruction_read+0x16>
     600:	00 c0       	rjmp	.+0      	; 0x602 <instruction_read+0x1c>
     602:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     604:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     606:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     608:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     60a:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     60c:	12 98       	cbi	0x02, 2	; 2
     60e:	e9 ef       	ldi	r30, 0xF9	; 249
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <instruction_read+0x2c>
     616:	00 c0       	rjmp	.+0      	; 0x618 <instruction_read+0x32>
     618:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     61a:	12 9a       	sbi	0x02, 2	; 2
     61c:	e1 ee       	ldi	r30, 0xE1	; 225
     61e:	f4 e0       	ldi	r31, 0x04	; 4
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <instruction_read+0x3a>
     624:	00 c0       	rjmp	.+0      	; 0x626 <instruction_read+0x40>
     626:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     628:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     62a:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     62c:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     62e:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     630:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	26 e0       	ldi	r18, 0x06	; 6
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	2a 95       	dec	r18
     63c:	e1 f7       	brne	.-8      	; 0x636 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     63e:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     640:	d0 e0       	ldi	r29, 0x00	; 0
     642:	35 e0       	ldi	r19, 0x05	; 5
     644:	cc 0f       	add	r28, r28
     646:	dd 1f       	adc	r29, r29
     648:	3a 95       	dec	r19
     64a:	e1 f7       	brne	.-8      	; 0x644 <instruction_read+0x5e>
     64c:	8c 2b       	or	r24, r28
     64e:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     650:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     652:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     654:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	54 e0       	ldi	r21, 0x04	; 4
     65a:	aa 0f       	add	r26, r26
     65c:	bb 1f       	adc	r27, r27
     65e:	5a 95       	dec	r21
     660:	e1 f7       	brne	.-8      	; 0x65a <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     662:	8a 2b       	or	r24, r26
     664:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     666:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	73 e0       	ldi	r23, 0x03	; 3
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	7a 95       	dec	r23
     672:	e1 f7       	brne	.-8      	; 0x66c <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     674:	8e 2b       	or	r24, r30
     676:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     678:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	66 0f       	add	r22, r22
     67e:	77 1f       	adc	r23, r23
     680:	66 0f       	add	r22, r22
     682:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     684:	86 2b       	or	r24, r22
     686:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     688:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     68a:	51 b1       	in	r21, 0x01	; 1
     68c:	58 67       	ori	r21, 0x78	; 120
     68e:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     690:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     692:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     694:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	44 0f       	add	r20, r20
     69a:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     69c:	84 2b       	or	r24, r20
     69e:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     6a0:	16 fb       	bst	r17, 6
     6a2:	22 27       	eor	r18, r18
     6a4:	20 f9       	bld	r18, 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     6a8:	36 95       	lsr	r19
     6aa:	32 2f       	mov	r19, r18
     6ac:	22 27       	eor	r18, r18
     6ae:	37 95       	ror	r19
     6b0:	27 95       	ror	r18
}
     6b2:	82 2b       	or	r24, r18
     6b4:	93 2b       	or	r25, r19
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	08 95       	ret

000006be <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     6be:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <instruction_read>
     6c2:	8f 77       	andi	r24, 0x7F	; 127
     6c4:	99 27       	eor	r25, r25
    return address+1;
}
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	08 95       	ret

000006ca <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     6ca:	89 2b       	or	r24, r25
     6cc:	11 f4       	brne	.+4      	; 0x6d2 <write_db74+0x8>
     6ce:	16 98       	cbi	0x02, 6	; 2
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <write_db74+0xa>
    else PORTA |= _BV(DB7);
     6d2:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     6d4:	67 2b       	or	r22, r23
     6d6:	11 f4       	brne	.+4      	; 0x6dc <write_db74+0x12>
     6d8:	15 98       	cbi	0x02, 5	; 2
     6da:	01 c0       	rjmp	.+2      	; 0x6de <write_db74+0x14>
    else PORTA |= _BV(DB6);
     6dc:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     6de:	45 2b       	or	r20, r21
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <write_db74+0x1c>
     6e2:	14 98       	cbi	0x02, 4	; 2
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     6e6:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     6e8:	23 2b       	or	r18, r19
     6ea:	11 f4       	brne	.+4      	; 0x6f0 <write_db74+0x26>
     6ec:	13 98       	cbi	0x02, 3	; 2
     6ee:	08 95       	ret
    else PORTA |= _BV(DB4);
     6f0:	13 9a       	sbi	0x02, 3	; 2
     6f2:	08 95       	ret

000006f4 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     6fa:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     6fc:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     6fe:	28 2f       	mov	r18, r24
     700:	22 95       	swap	r18
     702:	21 70       	andi	r18, 0x01	; 1
     704:	85 fb       	bst	r24, 5
     706:	44 27       	eor	r20, r20
     708:	40 f9       	bld	r20, 0
     70a:	86 fb       	bst	r24, 6
     70c:	66 27       	eor	r22, r22
     70e:	60 f9       	bld	r22, 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_db74>
    datarw();
     71e:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     722:	9e 01       	movw	r18, r28
     724:	21 70       	andi	r18, 0x01	; 1
     726:	33 27       	eor	r19, r19
     728:	4c 2f       	mov	r20, r28
     72a:	46 95       	lsr	r20
     72c:	41 70       	andi	r20, 0x01	; 1
     72e:	c2 fb       	bst	r28, 2
     730:	66 27       	eor	r22, r22
     732:	60 f9       	bld	r22, 0
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	c3 fb       	bst	r28, 3
     73a:	88 27       	eor	r24, r24
     73c:	80 f9       	bld	r24, 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_db74>
    datarw();
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     748:	0c 94 11 02 	jmp	0x422	; 0x422 <datarw>

0000074c <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     74c:	cf 93       	push	r28
     74e:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     750:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     752:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     754:	84 fb       	bst	r24, 4
     756:	22 27       	eor	r18, r18
     758:	20 f9       	bld	r18, 0
     75a:	85 fb       	bst	r24, 5
     75c:	44 27       	eor	r20, r20
     75e:	40 f9       	bld	r20, 0
     760:	86 fb       	bst	r24, 6
     762:	66 27       	eor	r22, r22
     764:	60 f9       	bld	r22, 0
     766:	88 1f       	adc	r24, r24
     768:	88 27       	eor	r24, r24
     76a:	88 1f       	adc	r24, r24
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_db74>
    datarw();
     778:	0e 94 11 02 	call	0x422	; 0x422 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     77c:	2c 2f       	mov	r18, r28
     77e:	21 70       	andi	r18, 0x01	; 1
     780:	c1 fb       	bst	r28, 1
     782:	44 27       	eor	r20, r20
     784:	40 f9       	bld	r20, 0
     786:	c2 fb       	bst	r28, 2
     788:	66 27       	eor	r22, r22
     78a:	60 f9       	bld	r22, 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	c3 fb       	bst	r28, 3
     794:	88 27       	eor	r24, r24
     796:	80 f9       	bld	r24, 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 65 03 	call	0x6ca	; 0x6ca <write_db74>
    datarw();
}
     79e:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     7a0:	0c 94 11 02 	jmp	0x422	; 0x422 <datarw>

000007a4 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     7a4:	cf 93       	push	r28
     7a6:	c8 2f       	mov	r28, r24
    chars_written++;
     7a8:	20 91 a6 03 	lds	r18, 0x03A6
     7ac:	30 91 a7 03 	lds	r19, 0x03A7
     7b0:	2f 5f       	subi	r18, 0xFF	; 255
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	30 93 a7 03 	sts	0x03A7, r19
     7b8:	20 93 a6 03 	sts	0x03A6, r18

    if ((chars_written==17)||(mychar=='\n'))
     7bc:	21 31       	cpi	r18, 0x11	; 17
     7be:	31 05       	cpc	r19, r1
     7c0:	31 f0       	breq	.+12     	; 0x7ce <char_write+0x2a>
     7c2:	8a 30       	cpi	r24, 0x0A	; 10
     7c4:	21 f0       	breq	.+8      	; 0x7ce <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     7c6:	8c 2f       	mov	r24, r28
    
}
     7c8:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     7ca:	0c 94 a6 03 	jmp	0x74c	; 0x74c <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     7ce:	20 91 00 01 	lds	r18, 0x0100
     7d2:	30 91 01 01 	lds	r19, 0x0101
     7d6:	21 30       	cpi	r18, 0x01	; 1
     7d8:	31 05       	cpc	r19, r1
     7da:	79 f4       	brne	.+30     	; 0x7fa <char_write+0x56>
        {
            set_ddram_address(0x40);
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <set_ddram_address>
            line_num = 2;
     7e4:	22 e0       	ldi	r18, 0x02	; 2
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	30 93 01 01 	sts	0x0101, r19
     7ec:	20 93 00 01 	sts	0x0100, r18
            chars_written = 0;
     7f0:	10 92 a7 03 	sts	0x03A7, r1
     7f4:	10 92 a6 03 	sts	0x03A6, r1
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <char_write+0x60>
        }
        else if (line_num==2)
     7fa:	22 30       	cpi	r18, 0x02	; 2
     7fc:	31 05       	cpc	r19, r1
     7fe:	11 f4       	brne	.+4      	; 0x804 <char_write+0x60>
        {
            lcd_init();
     800:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
        }
    }

    if (mychar!='\n')
     804:	ca 30       	cpi	r28, 0x0A	; 10
     806:	f9 f6       	brne	.-66     	; 0x7c6 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
     816:	0e 94 5f 03 	call	0x6be	; 0x6be <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     81a:	8e 01       	movw	r16, r28
     81c:	fe 01       	movw	r30, r28
     81e:	01 90       	ld	r0, Z+
     820:	00 20       	and	r0, r0
     822:	e9 f7       	brne	.-6      	; 0x81e <string_write+0x12>
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	ec 1b       	sub	r30, r28
     828:	fd 0b       	sbc	r31, r29
     82a:	c8 01       	movw	r24, r16
     82c:	8c 1b       	sub	r24, r28
     82e:	9d 0b       	sbc	r25, r29
     830:	8e 17       	cp	r24, r30
     832:	9f 07       	cpc	r25, r31
     834:	40 f4       	brcc	.+16     	; 0x846 <string_write+0x3a>
        char_write(mystring[i]);
     836:	f8 01       	movw	r30, r16
     838:	81 91       	ld	r24, Z+
     83a:	8f 01       	movw	r16, r30
     83c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
        get_current_address();
     840:	0e 94 5f 03 	call	0x6be	; 0x6be <get_current_address>
     844:	eb cf       	rjmp	.-42     	; 0x81c <string_write+0x10>
    }
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	08 95       	ret

00000850 <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	18 2f       	mov	r17, r24
     85a:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     85c:	cb 01       	movw	r24, r22
     85e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <malloc>
     862:	ec 01       	movw	r28, r24
    if (temp==NULL)
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	51 f4       	brne	.+20     	; 0x87c <string_write_int+0x2c>
    {
            lcd_init();
     868:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
            string_write("bad malloc");
     86c:	8f e0       	ldi	r24, 0x0F	; 15
     86e:	91 e0       	ldi	r25, 0x01	; 1
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    if (temp==NULL)
    {
            lcd_init();
            string_write("bad malloc");
     878:	0c 94 06 04 	jmp	0x80c	; 0x80c <string_write>
            return;
    }
    sprintf(temp,"%d",num);
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	81 e8       	ldi	r24, 0x81	; 129
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	df 93       	push	r29
     88a:	cf 93       	push	r28
     88c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <sprintf>
    string_write(temp);
     890:	ce 01       	movw	r24, r28
     892:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    free(temp);
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	ce 01       	movw	r24, r28
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
            string_write("bad malloc");
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     8ac:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <free>

000008b0 <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <string_write_float+0x12>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <string_write_float+0x14>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     8ca:	ae 01       	movw	r20, r28
     8cc:	4f 5f       	subi	r20, 0xFF	; 255
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <modf>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     8d8:	69 81       	ldd	r22, Y+1	; 0x01
     8da:	7a 81       	ldd	r23, Y+2	; 0x02
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	9c 81       	ldd	r25, Y+4	; 0x04
     8e0:	0e 94 b8 13 	call	0x2770	; 0x2770 <__fixsfsi>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	64 e0       	ldi	r22, 0x04	; 4
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
     8f0:	8a eb       	ldi	r24, 0xBA	; 186
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     8f8:	b8 01       	movw	r22, r16
     8fa:	88 27       	eor	r24, r24
     8fc:	77 fd       	sbrc	r23, 7
     8fe:	80 95       	com	r24
     900:	98 2f       	mov	r25, r24
     902:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e2       	ldi	r24, 0x20	; 32
     910:	91 e4       	ldi	r25, 0x41	; 65
     912:	0e 94 38 16 	call	0x2c70	; 0x2c70 <pow>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	c7 01       	movw	r24, r14
     91c:	b6 01       	movw	r22, r12
     91e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
     922:	0e 94 84 16 	call	0x2d08	; 0x2d08 <round>
     926:	0e 94 b8 13 	call	0x2770	; 0x2770 <__fixsfsi>
     92a:	7b 01       	movw	r14, r22
     92c:	77 ff       	sbrs	r23, 7
     92e:	04 c0       	rjmp	.+8      	; 0x938 <string_write_float+0x88>
     930:	ee 24       	eor	r14, r14
     932:	ff 24       	eor	r15, r15
     934:	e6 1a       	sub	r14, r22
     936:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     938:	e1 14       	cp	r14, r1
     93a:	f1 04       	cpc	r15, r1
     93c:	a1 f0       	breq	.+40     	; 0x966 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     93e:	b7 01       	movw	r22, r14
     940:	88 27       	eor	r24, r24
     942:	77 fd       	sbrc	r23, 7
     944:	80 95       	com	r24
     946:	98 2f       	mov	r25, r24
     948:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
     94c:	0e 94 57 15 	call	0x2aae	; 0x2aae <log10>
     950:	0e 94 26 14 	call	0x284c	; 0x284c <floor>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e8       	ldi	r20, 0x80	; 128
     95a:	5f e3       	ldi	r21, 0x3F	; 63
     95c:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
     960:	0e 94 b8 13 	call	0x2770	; 0x2770 <__fixsfsi>
     964:	02 c0       	rjmp	.+4      	; 0x96a <string_write_float+0xba>
    } else {
        digits = 0;
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     96a:	c1 2c       	mov	r12, r1
     96c:	d1 2c       	mov	r13, r1
     96e:	06 1b       	sub	r16, r22
     970:	17 0b       	sbc	r17, r23
     972:	c0 16       	cp	r12, r16
     974:	d1 06       	cpc	r13, r17
     976:	44 f4       	brge	.+16     	; 0x988 <string_write_float+0xd8>
    {
        string_write("0");
     978:	84 e8       	ldi	r24, 0x84	; 132
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	c8 1a       	sub	r12, r24
     984:	d8 0a       	sbc	r13, r24
     986:	f5 cf       	rjmp	.-22     	; 0x972 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     988:	64 e0       	ldi	r22, 0x04	; 4
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	c7 01       	movw	r24, r14
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     9a6:	0c 94 28 04 	jmp	0x850	; 0x850 <string_write_int>

000009aa <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	8c 01       	movw	r16, r24
     9bc:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
     9be:	0e 94 5f 03 	call	0x6be	; 0x6be <get_current_address>
     9c2:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     9c4:	c0 e0       	ldi	r28, 0x00	; 0
     9c6:	d0 e0       	ldi	r29, 0x00	; 0
     9c8:	cc 15       	cp	r28, r12
     9ca:	dd 05       	cpc	r29, r13
     9cc:	9c f4       	brge	.+38     	; 0x9f4 <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
     9ce:	f8 01       	movw	r30, r16
     9d0:	01 90       	ld	r0, Z+
     9d2:	00 20       	and	r0, r0
     9d4:	e9 f7       	brne	.-6      	; 0x9d0 <string_write_numchars+0x26>
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	e0 1b       	sub	r30, r16
     9da:	f1 0b       	sbc	r31, r17
     9dc:	ce 17       	cp	r28, r30
     9de:	df 07       	cpc	r29, r31
     9e0:	48 f4       	brcc	.+18     	; 0x9f4 <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
     9e2:	f7 01       	movw	r30, r14
     9e4:	81 91       	ld	r24, Z+
     9e6:	7f 01       	movw	r14, r30
     9e8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
        get_current_address();
     9ec:	0e 94 5f 03 	call	0x6be	; 0x6be <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ea cf       	rjmp	.-44     	; 0x9c8 <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <tag_check+0x6>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <tag_check+0x8>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <tag_check+0xa>
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
     a14:	26 e0       	ldi	r18, 0x06	; 6
     a16:	e8 e0       	ldi	r30, 0x08	; 8
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	de 01       	movw	r26, r28
     a1c:	11 96       	adiw	r26, 0x01	; 1
     a1e:	01 90       	ld	r0, Z+
     a20:	0d 92       	st	X+, r0
     a22:	2a 95       	dec	r18
     a24:	e1 f7       	brne	.-8      	; 0xa1e <tag_check+0x18>
     a26:	fe 01       	movw	r30, r28
     a28:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	dc 01       	movw	r26, r24
     a30:	a2 0f       	add	r26, r18
     a32:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
     a34:	4c 91       	ld	r20, X
     a36:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	26 30       	cpi	r18, 0x06	; 6
     a3e:	31 05       	cpc	r19, r1
     a40:	b1 f7       	brne	.-20     	; 0xa2e <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
     a42:	66 e8       	ldi	r22, 0x86	; 134
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 38 1a 	call	0x3470	; 0x3470 <strcmp>
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	89 2b       	or	r24, r25
     a54:	11 f0       	breq	.+4      	; 0xa5a <tag_check+0x54>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
     a5a:	c9 01       	movw	r24, r18
     a5c:	26 96       	adiw	r28, 0x06	; 6
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
     a72:	00 97       	sbiw	r24, 0x00	; 0
     a74:	21 f0       	breq	.+8      	; 0xa7e <strtok_single+0x10>
    src = in_str;
     a76:	90 93 a9 03 	sts	0x03A9, r25
     a7a:	80 93 a8 03 	sts	0x03A8, r24

  if (src == NULL)
     a7e:	c0 91 a8 03 	lds	r28, 0x03A8
     a82:	d0 91 a9 03 	lds	r29, 0x03A9
     a86:	20 97       	sbiw	r28, 0x00	; 0
     a88:	69 f0       	breq	.+26     	; 0xaa4 <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <strpbrk>
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	41 f0       	breq	.+16     	; 0xaa4 <strtok_single+0x36>
    *p  = 0;
     a94:	fc 01       	movw	r30, r24
     a96:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
     a98:	f0 93 a9 03 	sts	0x03A9, r31
     a9c:	e0 93 a8 03 	sts	0x03A8, r30
     aa0:	ce 01       	movw	r24, r28
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <parse_nmea>:

#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile char *in_sent, char * volatile *raw_gps_data){
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	8b 01       	movw	r16, r22

	int i = 0, j=0;
	char* token;

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
     ab8:	6d e8       	ldi	r22, 0x8D	; 141
     aba:	71 e0       	ldi	r23, 0x01	; 1
     abc:	0e 94 37 05 	call	0xa6e	; 0xa6e <strtok_single>
     ac0:	ec 01       	movw	r28, r24
	strcpy(raw_gps_data[0], token);
     ac2:	d8 01       	movw	r26, r16
     ac4:	8d 91       	ld	r24, X+
     ac6:	9c 91       	ld	r25, X
     ac8:	be 01       	movw	r22, r28
     aca:	0e 94 41 1a 	call	0x3482	; 0x3482 <strcpy>

	//null out the rest of the raw_gps_data field
	for (j=strlen(token); j<16; j++)
     ace:	fe 01       	movw	r30, r28
     ad0:	01 90       	ld	r0, Z+
     ad2:	00 20       	and	r0, r0
     ad4:	e9 f7       	brne	.-6      	; 0xad0 <parse_nmea+0x22>
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	ec 1b       	sub	r30, r28
     ada:	fd 0b       	sbc	r31, r29
     adc:	e0 31       	cpi	r30, 0x10	; 16
     ade:	f1 05       	cpc	r31, r1
     ae0:	4c f4       	brge	.+18     	; 0xaf4 <parse_nmea+0x46>
	{
		raw_gps_data[0][j] = '\0';
     ae2:	d8 01       	movw	r26, r16
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	8e 0f       	add	r24, r30
     aea:	9f 1f       	adc	r25, r31
     aec:	dc 01       	movw	r26, r24
     aee:	1c 92       	st	X, r1
	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
	strcpy(raw_gps_data[0], token);

	//null out the rest of the raw_gps_data field
	for (j=strlen(token); j<16; j++)
     af0:	31 96       	adiw	r30, 0x01	; 1
     af2:	f4 cf       	rjmp	.-24     	; 0xadc <parse_nmea+0x2e>
     af4:	0e 5f       	subi	r16, 0xFE	; 254
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		raw_gps_data[0][j] = '\0';
	}

	//copy over the rest of the tokens
	while(token) 
     af8:	cd 2b       	or	r28, r29
     afa:	01 f1       	breq	.+64     	; 0xb3c <parse_nmea+0x8e>
	{
		i++;
		token = strtok_single(NULL, ",");
     afc:	6d e8       	ldi	r22, 0x8D	; 141
     afe:	71 e0       	ldi	r23, 0x01	; 1
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 37 05 	call	0xa6e	; 0xa6e <strtok_single>
     b08:	ec 01       	movw	r28, r24
		strcpy(raw_gps_data[i], token);
     b0a:	f8 01       	movw	r30, r16
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	be 01       	movw	r22, r28
     b12:	0e 94 41 1a 	call	0x3482	; 0x3482 <strcpy>
		//null out the rest of the raw_gps_data field
		for (j=strlen(token); j<16; j++)
     b16:	fe 01       	movw	r30, r28
     b18:	01 90       	ld	r0, Z+
     b1a:	00 20       	and	r0, r0
     b1c:	e9 f7       	brne	.-6      	; 0xb18 <parse_nmea+0x6a>
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	ec 1b       	sub	r30, r28
     b22:	fd 0b       	sbc	r31, r29
     b24:	e0 31       	cpi	r30, 0x10	; 16
     b26:	f1 05       	cpc	r31, r1
     b28:	2c f7       	brge	.-54     	; 0xaf4 <parse_nmea+0x46>
		{
			raw_gps_data[i][j] = '\0';
     b2a:	d8 01       	movw	r26, r16
     b2c:	8d 91       	ld	r24, X+
     b2e:	9c 91       	ld	r25, X
     b30:	8e 0f       	add	r24, r30
     b32:	9f 1f       	adc	r25, r31
     b34:	dc 01       	movw	r26, r24
     b36:	1c 92       	st	X, r1
	{
		i++;
		token = strtok_single(NULL, ",");
		strcpy(raw_gps_data[i], token);
		//null out the rest of the raw_gps_data field
		for (j=strlen(token); j<16; j++)
     b38:	31 96       	adiw	r30, 0x01	; 1
     b3a:	f4 cf       	rjmp	.-24     	; 0xb24 <parse_nmea+0x76>
			raw_gps_data[i][j] = '\0';
		}
	}

	return 0;
}
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
     b4a:	fc 01       	movw	r30, r24
     b4c:	9f 01       	movw	r18, r30
     b4e:	28 1b       	sub	r18, r24
     b50:	39 0b       	sbc	r19, r25
     b52:	26 17       	cp	r18, r22
     b54:	37 07       	cpc	r19, r23
     b56:	14 f4       	brge	.+4      	; 0xb5c <wipe_chars+0x12>
	{
		str[i] = '\0';
     b58:	11 92       	st	Z+, r1
     b5a:	f8 cf       	rjmp	.-16     	; 0xb4c <wipe_chars+0x2>
	}
}
     b5c:	08 95       	ret

00000b5e <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	27 97       	sbiw	r28, 0x07	; 7
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	5c 01       	movw	r10, r24
     b82:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
     b84:	fc 01       	movw	r30, r24
     b86:	80 81       	ld	r24, Z
     b88:	99 27       	eor	r25, r25
     b8a:	87 fd       	sbrc	r24, 7
     b8c:	90 95       	com	r25
     b8e:	c0 97       	sbiw	r24, 0x30	; 48
     b90:	2a e0       	ldi	r18, 0x0A	; 10
     b92:	28 9f       	mul	r18, r24
     b94:	b0 01       	movw	r22, r0
     b96:	29 9f       	mul	r18, r25
     b98:	70 0d       	add	r23, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
     b9e:	99 27       	eor	r25, r25
     ba0:	87 fd       	sbrc	r24, 7
     ba2:	90 95       	com	r25
     ba4:	c0 97       	sbiw	r24, 0x30	; 48
     ba6:	68 0f       	add	r22, r24
     ba8:	79 1f       	adc	r23, r25
     baa:	88 27       	eor	r24, r24
     bac:	77 fd       	sbrc	r23, 7
     bae:	80 95       	com	r24
     bb0:	98 2f       	mov	r25, r24
     bb2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
     bb6:	6b 01       	movw	r12, r22
     bb8:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
     bba:	b5 01       	movw	r22, r10
     bbc:	6e 5f       	subi	r22, 0xFE	; 254
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	47 e0       	ldi	r20, 0x07	; 7
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 48 1a 	call	0x3490	; 0x3490 <strncpy>

	float minutes = strtod(temp,NULL);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	0e 94 9b 18 	call	0x3136	; 0x3136 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e7       	ldi	r20, 0x70	; 112
     bde:	52 e4       	ldi	r21, 0x42	; 66
     be0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
     be4:	9b 01       	movw	r18, r22
     be6:	ac 01       	movw	r20, r24
     be8:	c7 01       	movw	r24, r14
     bea:	b6 01       	movw	r22, r12
     bec:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
     bf0:	13 35       	cpi	r17, 0x53	; 83
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <lat2dec+0x98>
		result *= -1;
     bf4:	90 58       	subi	r25, 0x80	; 128

	return result;

}
     bf6:	27 96       	adiw	r28, 0x07	; 7
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	08 95       	ret

00000c16 <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
     c16:	af 92       	push	r10
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	27 97       	sbiw	r28, 0x07	; 7
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	5c 01       	movw	r10, r24
     c3a:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	99 27       	eor	r25, r25
     c42:	87 fd       	sbrc	r24, 7
     c44:	90 95       	com	r25
     c46:	c0 97       	sbiw	r24, 0x30	; 48
     c48:	24 e6       	ldi	r18, 0x64	; 100
     c4a:	28 9f       	mul	r18, r24
     c4c:	b0 01       	movw	r22, r0
     c4e:	29 9f       	mul	r18, r25
     c50:	70 0d       	add	r23, r0
     c52:	11 24       	eor	r1, r1
     c54:	81 81       	ldd	r24, Z+1	; 0x01
     c56:	99 27       	eor	r25, r25
     c58:	87 fd       	sbrc	r24, 7
     c5a:	90 95       	com	r25
     c5c:	c0 97       	sbiw	r24, 0x30	; 48
     c5e:	4a e0       	ldi	r20, 0x0A	; 10
     c60:	48 9f       	mul	r20, r24
     c62:	90 01       	movw	r18, r0
     c64:	49 9f       	mul	r20, r25
     c66:	30 0d       	add	r19, r0
     c68:	11 24       	eor	r1, r1
     c6a:	62 0f       	add	r22, r18
     c6c:	73 1f       	adc	r23, r19
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	99 27       	eor	r25, r25
     c72:	87 fd       	sbrc	r24, 7
     c74:	90 95       	com	r25
     c76:	c0 97       	sbiw	r24, 0x30	; 48
     c78:	68 0f       	add	r22, r24
     c7a:	79 1f       	adc	r23, r25
     c7c:	88 27       	eor	r24, r24
     c7e:	77 fd       	sbrc	r23, 7
     c80:	80 95       	com	r24
     c82:	98 2f       	mov	r25, r24
     c84:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__floatsisf>
     c88:	6b 01       	movw	r12, r22
     c8a:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
     c8c:	b5 01       	movw	r22, r10
     c8e:	6d 5f       	subi	r22, 0xFD	; 253
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	47 e0       	ldi	r20, 0x07	; 7
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 48 1a 	call	0x3490	; 0x3490 <strncpy>

	float minutes = strtod(temp,NULL);
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 9b 18 	call	0x3136	; 0x3136 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e7       	ldi	r20, 0x70	; 112
     cb0:	52 e4       	ldi	r21, 0x42	; 66
     cb2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c7 01       	movw	r24, r14
     cbc:	b6 01       	movw	r22, r12
     cbe:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
     cc2:	17 35       	cpi	r17, 0x57	; 87
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <lon2dec+0xb2>
		result *= -1;
     cc6:	90 58       	subi	r25, 0x80	; 128

	return result;
}
     cc8:	27 96       	adiw	r28, 0x07	; 7
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	cf 90       	pop	r12
     ce2:	bf 90       	pop	r11
     ce4:	af 90       	pop	r10
     ce6:	08 95       	ret

00000ce8 <update_user_gps_data>:

//use the raw gps_data fields to populate the GPS_DATA struct
void update_user_gps_data(char * volatile *raw_gps_data, GPS_DATA *gps_data)
{
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	8c 01       	movw	r16, r24
     cfa:	eb 01       	movw	r28, r22
	float temp;
	wipe_chars(gps_data->msg_type,8);
     cfc:	68 e0       	ldi	r22, 0x08	; 8
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wipe_chars>
	strcpy(gps_data->msg_type,raw_gps_data[0]);
     d06:	d8 01       	movw	r26, r16
     d08:	6d 91       	ld	r22, X+
     d0a:	7c 91       	ld	r23, X
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 41 1a 	call	0x3482	; 0x3482 <strcpy>

	wipe_chars(gps_data->utc_time,8);
     d12:	68 e0       	ldi	r22, 0x08	; 8
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	08 96       	adiw	r24, 0x08	; 8
     d1a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wipe_chars>
	gps_data->utc_time[0] = raw_gps_data[1][0];
     d1e:	d8 01       	movw	r26, r16
     d20:	12 96       	adiw	r26, 0x02	; 2
     d22:	ed 91       	ld	r30, X+
     d24:	fc 91       	ld	r31, X
     d26:	13 97       	sbiw	r26, 0x03	; 3
     d28:	80 81       	ld	r24, Z
     d2a:	88 87       	std	Y+8, r24	; 0x08
	gps_data->utc_time[1] = raw_gps_data[1][1];
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	ed 91       	ld	r30, X+
     d30:	fc 91       	ld	r31, X
     d32:	13 97       	sbiw	r26, 0x03	; 3
     d34:	81 81       	ldd	r24, Z+1	; 0x01
     d36:	89 87       	std	Y+9, r24	; 0x09
	gps_data->utc_time[2] = ':';
     d38:	8a e3       	ldi	r24, 0x3A	; 58
     d3a:	8a 87       	std	Y+10, r24	; 0x0a
	gps_data->utc_time[3] = raw_gps_data[1][2];
     d3c:	12 96       	adiw	r26, 0x02	; 2
     d3e:	ed 91       	ld	r30, X+
     d40:	fc 91       	ld	r31, X
     d42:	13 97       	sbiw	r26, 0x03	; 3
     d44:	92 81       	ldd	r25, Z+2	; 0x02
     d46:	9b 87       	std	Y+11, r25	; 0x0b
	gps_data->utc_time[4] = raw_gps_data[1][3];
     d48:	12 96       	adiw	r26, 0x02	; 2
     d4a:	ed 91       	ld	r30, X+
     d4c:	fc 91       	ld	r31, X
     d4e:	13 97       	sbiw	r26, 0x03	; 3
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	9c 87       	std	Y+12, r25	; 0x0c
	gps_data->utc_time[5] = ':';
     d54:	8d 87       	std	Y+13, r24	; 0x0d
	gps_data->utc_time[6] = raw_gps_data[1][4];
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	ed 91       	ld	r30, X+
     d5a:	fc 91       	ld	r31, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	84 81       	ldd	r24, Z+4	; 0x04
     d60:	8e 87       	std	Y+14, r24	; 0x0e
	gps_data->utc_time[7] = raw_gps_data[1][5];
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	13 97       	sbiw	r26, 0x03	; 3
     d6a:	85 81       	ldd	r24, Z+5	; 0x05
     d6c:	8f 87       	std	Y+15, r24	; 0x0f

	gps_data->nrw = raw_gps_data[2][0];
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	ed 91       	ld	r30, X+
     d72:	fc 91       	ld	r31, X
     d74:	15 97       	sbiw	r26, 0x05	; 5
     d76:	80 81       	ld	r24, Z
     d78:	88 8b       	std	Y+16, r24	; 0x10

	gps_data->lat = 0;
     d7a:	19 8a       	std	Y+17, r1	; 0x11
     d7c:	1a 8a       	std	Y+18, r1	; 0x12
     d7e:	1b 8a       	std	Y+19, r1	; 0x13
     d80:	1c 8a       	std	Y+20, r1	; 0x14
	temp = lat2dec(raw_gps_data[3], raw_gps_data[4][0]);
     d82:	18 96       	adiw	r26, 0x08	; 8
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	19 97       	sbiw	r26, 0x09	; 9
     d8a:	16 96       	adiw	r26, 0x06	; 6
     d8c:	8d 91       	ld	r24, X+
     d8e:	9c 91       	ld	r25, X
     d90:	17 97       	sbiw	r26, 0x07	; 7
     d92:	60 81       	ld	r22, Z
     d94:	0e 94 af 05 	call	0xb5e	; 0xb5e <lat2dec>
     d98:	6b 01       	movw	r12, r22
     d9a:	7c 01       	movw	r14, r24

	//handle invalid latitudes
	if ((temp >= -90)&&(temp <= 90))
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	44 eb       	ldi	r20, 0xB4	; 180
     da2:	52 ec       	ldi	r21, 0xC2	; 194
     da4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__gesf2>
     da8:	87 fd       	sbrc	r24, 7
     daa:	0e c0       	rjmp	.+28     	; 0xdc8 <update_user_gps_data+0xe0>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	44 eb       	ldi	r20, 0xB4	; 180
     db2:	52 e4       	ldi	r21, 0x42	; 66
     db4:	c7 01       	movw	r24, r14
     db6:	b6 01       	movw	r22, r12
     db8:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	24 f0       	brlt	.+8      	; 0xdc8 <update_user_gps_data+0xe0>
		gps_data->lat = temp;
     dc0:	c9 8a       	std	Y+17, r12	; 0x11
     dc2:	da 8a       	std	Y+18, r13	; 0x12
     dc4:	eb 8a       	std	Y+19, r14	; 0x13
     dc6:	fc 8a       	std	Y+20, r15	; 0x14

	gps_data->lon = 0;
     dc8:	1d 8a       	std	Y+21, r1	; 0x15
     dca:	1e 8a       	std	Y+22, r1	; 0x16
     dcc:	1f 8a       	std	Y+23, r1	; 0x17
     dce:	18 8e       	std	Y+24, r1	; 0x18
	temp = lon2dec(raw_gps_data[5], raw_gps_data[6][0]);
     dd0:	d8 01       	movw	r26, r16
     dd2:	1c 96       	adiw	r26, 0x0c	; 12
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	1d 97       	sbiw	r26, 0x0d	; 13
     dda:	1a 96       	adiw	r26, 0x0a	; 10
     ddc:	8d 91       	ld	r24, X+
     dde:	9c 91       	ld	r25, X
     de0:	1b 97       	sbiw	r26, 0x0b	; 11
     de2:	60 81       	ld	r22, Z
     de4:	0e 94 0b 06 	call	0xc16	; 0xc16 <lon2dec>
     de8:	6b 01       	movw	r12, r22
     dea:	7c 01       	movw	r14, r24

	//handle invalid longitudes
	if ((temp >= -180)&&(temp <= 180))
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	44 e3       	ldi	r20, 0x34	; 52
     df2:	53 ec       	ldi	r21, 0xC3	; 195
     df4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__gesf2>
     df8:	87 fd       	sbrc	r24, 7
     dfa:	0e c0       	rjmp	.+28     	; 0xe18 <update_user_gps_data+0x130>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	44 e3       	ldi	r20, 0x34	; 52
     e02:	53 e4       	ldi	r21, 0x43	; 67
     e04:	c7 01       	movw	r24, r14
     e06:	b6 01       	movw	r22, r12
     e08:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	24 f0       	brlt	.+8      	; 0xe18 <update_user_gps_data+0x130>
		gps_data->lon = temp;
     e10:	cd 8a       	std	Y+21, r12	; 0x15
     e12:	de 8a       	std	Y+22, r13	; 0x16
     e14:	ef 8a       	std	Y+23, r14	; 0x17
     e16:	f8 8e       	std	Y+24, r15	; 0x18

	gps_data->speed = 0;
     e18:	19 8e       	std	Y+25, r1	; 0x19
     e1a:	1a 8e       	std	Y+26, r1	; 0x1a
     e1c:	1b 8e       	std	Y+27, r1	; 0x1b
     e1e:	1c 8e       	std	Y+28, r1	; 0x1c
	gps_data->speed = (float)strtod(raw_gps_data[7],NULL);
     e20:	f8 01       	movw	r30, r16
     e22:	86 85       	ldd	r24, Z+14	; 0x0e
     e24:	97 85       	ldd	r25, Z+15	; 0x0f
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	0e 94 9b 18 	call	0x3136	; 0x3136 <strtod>
     e2e:	69 8f       	std	Y+25, r22	; 0x19
     e30:	7a 8f       	std	Y+26, r23	; 0x1a
     e32:	8b 8f       	std	Y+27, r24	; 0x1b
     e34:	9c 8f       	std	Y+28, r25	; 0x1c

	gps_data->course = 0;
     e36:	1d 8e       	std	Y+29, r1	; 0x1d
     e38:	1e 8e       	std	Y+30, r1	; 0x1e
     e3a:	1f 8e       	std	Y+31, r1	; 0x1f
     e3c:	18 a2       	std	Y+32, r1	; 0x20
	gps_data->course = (float)strtod(raw_gps_data[8],NULL);
     e3e:	d8 01       	movw	r26, r16
     e40:	50 96       	adiw	r26, 0x10	; 16
     e42:	8d 91       	ld	r24, X+
     e44:	9c 91       	ld	r25, X
     e46:	51 97       	sbiw	r26, 0x11	; 17
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0e 94 9b 18 	call	0x3136	; 0x3136 <strtod>
     e50:	6d 8f       	std	Y+29, r22	; 0x1d
     e52:	7e 8f       	std	Y+30, r23	; 0x1e
     e54:	8f 8f       	std	Y+31, r24	; 0x1f
     e56:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(gps_data->date,8);
     e58:	68 e0       	ldi	r22, 0x08	; 8
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	ce 01       	movw	r24, r28
     e5e:	81 96       	adiw	r24, 0x21	; 33
     e60:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wipe_chars>
	gps_data->date[0] = raw_gps_data[9][2];
     e64:	d8 01       	movw	r26, r16
     e66:	52 96       	adiw	r26, 0x12	; 18
     e68:	ed 91       	ld	r30, X+
     e6a:	fc 91       	ld	r31, X
     e6c:	53 97       	sbiw	r26, 0x13	; 19
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	89 a3       	std	Y+33, r24	; 0x21
	gps_data->date[1] = raw_gps_data[9][3];
     e72:	52 96       	adiw	r26, 0x12	; 18
     e74:	ed 91       	ld	r30, X+
     e76:	fc 91       	ld	r31, X
     e78:	53 97       	sbiw	r26, 0x13	; 19
     e7a:	83 81       	ldd	r24, Z+3	; 0x03
     e7c:	8a a3       	std	Y+34, r24	; 0x22
	gps_data->date[2] = '/';
     e7e:	8f e2       	ldi	r24, 0x2F	; 47
     e80:	8b a3       	std	Y+35, r24	; 0x23
	gps_data->date[3] = raw_gps_data[9][0];
     e82:	52 96       	adiw	r26, 0x12	; 18
     e84:	ed 91       	ld	r30, X+
     e86:	fc 91       	ld	r31, X
     e88:	53 97       	sbiw	r26, 0x13	; 19
     e8a:	90 81       	ld	r25, Z
     e8c:	9c a3       	std	Y+36, r25	; 0x24
	gps_data->date[4] = raw_gps_data[9][1];
     e8e:	52 96       	adiw	r26, 0x12	; 18
     e90:	ed 91       	ld	r30, X+
     e92:	fc 91       	ld	r31, X
     e94:	53 97       	sbiw	r26, 0x13	; 19
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	9d a3       	std	Y+37, r25	; 0x25
	gps_data->date[5] = '/';
     e9a:	8e a3       	std	Y+38, r24	; 0x26
	gps_data->date[6] = raw_gps_data[9][4];
     e9c:	52 96       	adiw	r26, 0x12	; 18
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	53 97       	sbiw	r26, 0x13	; 19
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	8f a3       	std	Y+39, r24	; 0x27
	gps_data->date[7] = raw_gps_data[9][5];
     ea8:	52 96       	adiw	r26, 0x12	; 18
     eaa:	ed 91       	ld	r30, X+
     eac:	fc 91       	ld	r31, X
     eae:	53 97       	sbiw	r26, 0x13	; 19
     eb0:	85 81       	ldd	r24, Z+5	; 0x05
     eb2:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(gps_data->mag_var,8);
     eb4:	7e 01       	movw	r14, r28
     eb6:	b9 e2       	ldi	r27, 0x29	; 41
     eb8:	eb 0e       	add	r14, r27
     eba:	f1 1c       	adc	r15, r1
     ebc:	68 e0       	ldi	r22, 0x08	; 8
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	c7 01       	movw	r24, r14
     ec2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wipe_chars>
	strcpy(gps_data->mag_var,raw_gps_data[10]);
     ec6:	f8 01       	movw	r30, r16
     ec8:	64 89       	ldd	r22, Z+20	; 0x14
     eca:	75 89       	ldd	r23, Z+21	; 0x15
     ecc:	c7 01       	movw	r24, r14
     ece:	0e 94 41 1a 	call	0x3482	; 0x3482 <strcpy>

	gps_data->mode = raw_gps_data[12][0];
     ed2:	d8 01       	movw	r26, r16
     ed4:	58 96       	adiw	r26, 0x18	; 24
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	59 97       	sbiw	r26, 0x19	; 25
     edc:	80 81       	ld	r24, Z
     ede:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(gps_data->checksum,3);
     ee0:	63 e0       	ldi	r22, 0x03	; 3
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	c2 96       	adiw	r24, 0x32	; 50
     ee8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <wipe_chars>
	gps_data->checksum[0] = raw_gps_data[12][1];
     eec:	d8 01       	movw	r26, r16
     eee:	58 96       	adiw	r26, 0x18	; 24
     ef0:	ed 91       	ld	r30, X+
     ef2:	fc 91       	ld	r31, X
     ef4:	59 97       	sbiw	r26, 0x19	; 25
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	8a ab       	std	Y+50, r24	; 0x32
	gps_data->checksum[1] = raw_gps_data[12][2];
     efa:	58 96       	adiw	r26, 0x18	; 24
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	59 97       	sbiw	r26, 0x19	; 25
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	8b ab       	std	Y+51, r24	; 0x33
	gps_data->checksum[2] = raw_gps_data[12][3];
     f06:	58 96       	adiw	r26, 0x18	; 24
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	59 97       	sbiw	r26, 0x19	; 25
     f0e:	83 81       	ldd	r24, Z+3	; 0x03
     f10:	8c ab       	std	Y+52, r24	; 0x34
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	08 95       	ret

00000f24 <earth_distance>:
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
     f24:	4f 92       	push	r4
     f26:	5f 92       	push	r5
     f28:	6f 92       	push	r6
     f2a:	7f 92       	push	r7
     f2c:	8f 92       	push	r8
     f2e:	9f 92       	push	r9
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	60 97       	sbiw	r28, 0x10	; 16
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	2b 01       	movw	r4, r22
     f56:	3c 01       	movw	r6, r24
     f58:	29 87       	std	Y+9, r18	; 0x09
     f5a:	3a 87       	std	Y+10, r19	; 0x0a
     f5c:	4b 87       	std	Y+11, r20	; 0x0b
     f5e:	5c 87       	std	Y+12, r21	; 0x0c
     f60:	e9 82       	std	Y+1, r14	; 0x01
     f62:	fa 82       	std	Y+2, r15	; 0x02
     f64:	0b 83       	std	Y+3, r16	; 0x03
     f66:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
     f68:	9b 01       	movw	r18, r22
     f6a:	ac 01       	movw	r20, r24
     f6c:	c8 01       	movw	r24, r16
     f6e:	b7 01       	movw	r22, r14
     f70:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     f74:	2b ed       	ldi	r18, 0xDB	; 219
     f76:	3f e0       	ldi	r19, 0x0F	; 15
     f78:	49 e4       	ldi	r20, 0x49	; 73
     f7a:	50 e4       	ldi	r21, 0x40	; 64
     f7c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	44 e3       	ldi	r20, 0x34	; 52
     f86:	53 e4       	ldi	r21, 0x43	; 67
     f88:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	5f e3       	ldi	r21, 0x3F	; 63
     f94:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
     f98:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <sin>
     f9c:	6d 83       	std	Y+5, r22	; 0x05
     f9e:	7e 83       	std	Y+6, r23	; 0x06
     fa0:	8f 83       	std	Y+7, r24	; 0x07
     fa2:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     fa4:	2b ed       	ldi	r18, 0xDB	; 219
     fa6:	3f e0       	ldi	r19, 0x0F	; 15
     fa8:	49 e4       	ldi	r20, 0x49	; 73
     faa:	50 e4       	ldi	r21, 0x40	; 64
     fac:	c3 01       	movw	r24, r6
     fae:	b2 01       	movw	r22, r4
     fb0:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	44 e3       	ldi	r20, 0x34	; 52
     fba:	53 e4       	ldi	r21, 0x43	; 67
     fbc:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     fc0:	0e 94 4d 13 	call	0x269a	; 0x269a <cos>
     fc4:	2b 01       	movw	r4, r22
     fc6:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     fc8:	2b ed       	ldi	r18, 0xDB	; 219
     fca:	3f e0       	ldi	r19, 0x0F	; 15
     fcc:	49 e4       	ldi	r20, 0x49	; 73
     fce:	50 e4       	ldi	r21, 0x40	; 64
     fd0:	c8 01       	movw	r24, r16
     fd2:	b7 01       	movw	r22, r14
     fd4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	44 e3       	ldi	r20, 0x34	; 52
     fde:	53 e4       	ldi	r21, 0x43	; 67
     fe0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     fe4:	0e 94 4d 13 	call	0x269a	; 0x269a <cos>
     fe8:	69 83       	std	Y+1, r22	; 0x01
     fea:	7a 83       	std	Y+2, r23	; 0x02
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
     ff0:	29 85       	ldd	r18, Y+9	; 0x09
     ff2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ff4:	4b 85       	ldd	r20, Y+11	; 0x0b
     ff6:	5c 85       	ldd	r21, Y+12	; 0x0c
     ff8:	c6 01       	movw	r24, r12
     ffa:	b5 01       	movw	r22, r10
     ffc:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1000:	2b ed       	ldi	r18, 0xDB	; 219
    1002:	3f e0       	ldi	r19, 0x0F	; 15
    1004:	49 e4       	ldi	r20, 0x49	; 73
    1006:	50 e4       	ldi	r21, 0x40	; 64
    1008:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	44 e3       	ldi	r20, 0x34	; 52
    1012:	53 e4       	ldi	r21, 0x43	; 67
    1014:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    1024:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <sin>
    1028:	4b 01       	movw	r8, r22
    102a:	5c 01       	movw	r10, r24
    102c:	2d 81       	ldd	r18, Y+5	; 0x05
    102e:	3e 81       	ldd	r19, Y+6	; 0x06
    1030:	4f 81       	ldd	r20, Y+7	; 0x07
    1032:	58 85       	ldd	r21, Y+8	; 0x08
    1034:	ca 01       	movw	r24, r20
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    103c:	6b 01       	movw	r12, r22
    103e:	7c 01       	movw	r14, r24
    1040:	29 81       	ldd	r18, Y+1	; 0x01
    1042:	3a 81       	ldd	r19, Y+2	; 0x02
    1044:	4b 81       	ldd	r20, Y+3	; 0x03
    1046:	5c 81       	ldd	r21, Y+4	; 0x04
    1048:	c3 01       	movw	r24, r6
    104a:	b2 01       	movw	r22, r4
    104c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    1050:	a5 01       	movw	r20, r10
    1052:	94 01       	movw	r18, r8
    1054:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    1058:	a5 01       	movw	r20, r10
    105a:	94 01       	movw	r18, r8
    105c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	c7 01       	movw	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    106c:	6b 01       	movw	r12, r22
    106e:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
    1070:	9b 01       	movw	r18, r22
    1072:	ac 01       	movw	r20, r24
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	9f e3       	ldi	r25, 0x3F	; 63
    107c:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
    1080:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <sqrt>
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	c7 01       	movw	r24, r14
    108a:	b6 01       	movw	r22, r12
    108c:	2d 87       	std	Y+13, r18	; 0x0d
    108e:	3e 87       	std	Y+14, r19	; 0x0e
    1090:	4f 87       	std	Y+15, r20	; 0x0f
    1092:	58 8b       	std	Y+16, r21	; 0x10
    1094:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <sqrt>
    1098:	2d 85       	ldd	r18, Y+13	; 0x0d
    109a:	3e 85       	ldd	r19, Y+14	; 0x0e
    109c:	4f 85       	ldd	r20, Y+15	; 0x0f
    109e:	58 89       	ldd	r21, Y+16	; 0x10
    10a0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <atan2>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    double distance = R*c;
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	38 e1       	ldi	r19, 0x18	; 24
    10b0:	47 ec       	ldi	r20, 0xC7	; 199
    10b2:	55 e4       	ldi	r21, 0x45	; 69
    10b4:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>

    return (float)distance;
}
    10b8:	60 96       	adiw	r28, 0x10	; 16
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	7f 90       	pop	r7
    10de:	6f 90       	pop	r6
    10e0:	5f 90       	pop	r5
    10e2:	4f 90       	pop	r4
    10e4:	08 95       	ret

000010e6 <get_nearest_station>:

//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(STATION *all_stations, int num_stations, float lat, float lon)
{
    10e6:	2f 92       	push	r2
    10e8:	3f 92       	push	r3
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	2c 97       	sbiw	r28, 0x0c	; 12
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	7e 83       	std	Y+6, r23	; 0x06
    111c:	6d 83       	std	Y+5, r22	; 0x05
    111e:	29 01       	movw	r4, r18
    1120:	3a 01       	movw	r6, r20
    1122:	ef 82       	std	Y+7, r14	; 0x07
    1124:	f8 86       	std	Y+8, r15	; 0x08
    1126:	09 87       	std	Y+9, r16	; 0x09
    1128:	1a 87       	std	Y+10, r17	; 0x0a
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    112e:	1c 86       	std	Y+12, r1	; 0x0c
    1130:	1b 86       	std	Y+11, r1	; 0x0b

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(STATION *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    int station_index = -1, i;
    1132:	2f ef       	ldi	r18, 0xFF	; 255
    1134:	2b 83       	std	Y+3, r18	; 0x03
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	3c 83       	std	Y+4, r19	; 0x04
//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(STATION *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    113a:	21 2c       	mov	r2, r1
    113c:	31 2c       	mov	r3, r1
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	88 2e       	mov	r8, r24
    1142:	9f eb       	ldi	r25, 0xBF	; 191
    1144:	99 2e       	mov	r9, r25
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1146:	8b 85       	ldd	r24, Y+11	; 0x0b
    1148:	9c 85       	ldd	r25, Y+12	; 0x0c
    114a:	ed 81       	ldd	r30, Y+5	; 0x05
    114c:	fe 81       	ldd	r31, Y+6	; 0x06
    114e:	8e 17       	cp	r24, r30
    1150:	9f 07       	cpc	r25, r31
    1152:	f4 f5       	brge	.+124    	; 0x11d0 <get_nearest_station+0xea>
    {
        float temp = earth_distance(lat, lon, all_stations[i].lat, all_stations[i].lon);
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	a0 88       	ldd	r10, Z+16	; 0x10
    115a:	b1 88       	ldd	r11, Z+17	; 0x11
    115c:	c2 88       	ldd	r12, Z+18	; 0x12
    115e:	d3 88       	ldd	r13, Z+19	; 0x13
    1160:	e4 84       	ldd	r14, Z+12	; 0x0c
    1162:	f5 84       	ldd	r15, Z+13	; 0x0d
    1164:	06 85       	ldd	r16, Z+14	; 0x0e
    1166:	17 85       	ldd	r17, Z+15	; 0x0f
    1168:	2f 81       	ldd	r18, Y+7	; 0x07
    116a:	38 85       	ldd	r19, Y+8	; 0x08
    116c:	49 85       	ldd	r20, Y+9	; 0x09
    116e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1170:	c3 01       	movw	r24, r6
    1172:	b2 01       	movw	r22, r4
    1174:	0e 94 92 07 	call	0xf24	; 0xf24 <earth_distance>
    1178:	7b 01       	movw	r14, r22
    117a:	8c 01       	movw	r16, r24
        if ((temp < min_dist)||(min_dist==-1))
    117c:	91 01       	movw	r18, r2
    117e:	a4 01       	movw	r20, r8
    1180:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    1184:	87 fd       	sbrc	r24, 7
    1186:	0d c0       	rjmp	.+26     	; 0x11a2 <get_nearest_station+0xbc>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	5f eb       	ldi	r21, 0xBF	; 191
    1190:	b1 01       	movw	r22, r2
    1192:	c4 01       	movw	r24, r8
    1194:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    1198:	88 23       	and	r24, r24
    119a:	41 f0       	breq	.+16     	; 0x11ac <get_nearest_station+0xc6>
    119c:	71 01       	movw	r14, r2
    119e:	84 01       	movw	r16, r8
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <get_nearest_station+0xce>
    11a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    11a4:	fb 83       	std	Y+3, r31	; 0x03
    11a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <get_nearest_station+0xce>
    11ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    11ae:	3b 83       	std	Y+3, r19	; 0x03
    11b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b2:	8c 83       	std	Y+4, r24	; 0x04
{
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    11b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    11b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    11b8:	31 96       	adiw	r30, 0x01	; 1
    11ba:	fc 87       	std	Y+12, r31	; 0x0c
    11bc:	eb 87       	std	Y+11, r30	; 0x0b
    11be:	29 81       	ldd	r18, Y+1	; 0x01
    11c0:	3a 81       	ldd	r19, Y+2	; 0x02
    11c2:	24 5e       	subi	r18, 0xE4	; 228
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	3a 83       	std	Y+2, r19	; 0x02
    11c8:	29 83       	std	Y+1, r18	; 0x01
    11ca:	17 01       	movw	r2, r14
    11cc:	48 01       	movw	r8, r16
    11ce:	bb cf       	rjmp	.-138    	; 0x1146 <get_nearest_station+0x60>
            min_dist = temp;
        }
    }

    return station_index;
}
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	2c 96       	adiw	r28, 0x0c	; 12
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	7f 90       	pop	r7
    11fa:	6f 90       	pop	r6
    11fc:	5f 90       	pop	r5
    11fe:	4f 90       	pop	r4
    1200:	3f 90       	pop	r3
    1202:	2f 90       	pop	r2
    1204:	08 95       	ret

00001206 <my_distance_to_station>:

//find the distance from the user to a particular station
float my_distance_to_station(GPS_DATA * gps_data, STATION *all_stations, int station_index)
{
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	cf 92       	push	r12
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
    1216:	ec e1       	ldi	r30, 0x1C	; 28
    1218:	e4 9f       	mul	r30, r20
    121a:	90 01       	movw	r18, r0
    121c:	e5 9f       	mul	r30, r21
    121e:	30 0d       	add	r19, r0
    1220:	11 24       	eor	r1, r1
    1222:	62 0f       	add	r22, r18
    1224:	73 1f       	adc	r23, r19
    1226:	fb 01       	movw	r30, r22
    1228:	a0 88       	ldd	r10, Z+16	; 0x10
    122a:	b1 88       	ldd	r11, Z+17	; 0x11
    122c:	c2 88       	ldd	r12, Z+18	; 0x12
    122e:	d3 88       	ldd	r13, Z+19	; 0x13
    1230:	e4 84       	ldd	r14, Z+12	; 0x0c
    1232:	f5 84       	ldd	r15, Z+13	; 0x0d
    1234:	06 85       	ldd	r16, Z+14	; 0x0e
    1236:	17 85       	ldd	r17, Z+15	; 0x0f
    1238:	fc 01       	movw	r30, r24
    123a:	25 89       	ldd	r18, Z+21	; 0x15
    123c:	36 89       	ldd	r19, Z+22	; 0x16
    123e:	47 89       	ldd	r20, Z+23	; 0x17
    1240:	50 8d       	ldd	r21, Z+24	; 0x18
    1242:	61 89       	ldd	r22, Z+17	; 0x11
    1244:	72 89       	ldd	r23, Z+18	; 0x12
    1246:	83 89       	ldd	r24, Z+19	; 0x13
    1248:	94 89       	ldd	r25, Z+20	; 0x14
    124a:	0e 94 92 07 	call	0xf24	; 0xf24 <earth_distance>
}
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	df 90       	pop	r13
    1258:	cf 90       	pop	r12
    125a:	bf 90       	pop	r11
    125c:	af 90       	pop	r10
    125e:	08 95       	ret

00001260 <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1260:	2b ed       	ldi	r18, 0xDB	; 219
    1262:	3f e0       	ldi	r19, 0x0F	; 15
    1264:	49 e4       	ldi	r20, 0x49	; 73
    1266:	50 e4       	ldi	r21, 0x40	; 64
    1268:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	44 e3       	ldi	r20, 0x34	; 52
    1272:	53 e4       	ldi	r21, 0x43	; 67
    1274:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__divsf3>
}
    1278:	08 95       	ret

0000127a <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
{
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ec 01       	movw	r28, r24
    1280:	fc 01       	movw	r30, r24
    int i;
    for (i=0; i<4; i++)
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (gps_data->msg_type[i]=='\0')
    1286:	21 91       	ld	r18, Z+
    1288:	22 23       	and	r18, r18
    128a:	69 f1       	breq	.+90     	; 0x12e6 <gps_locked+0x6c>

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
{
    int i;
    for (i=0; i<4; i++)
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	91 05       	cpc	r25, r1
    1292:	c9 f7       	brne	.-14     	; 0x1286 <gps_locked+0xc>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	fe 01       	movw	r30, r28
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
            return 0;
    }

    for (i=0; i<4; i++)
    {
        if (gps_data->utc_time[i]=='\0')
    129e:	20 85       	ldd	r18, Z+8	; 0x08
    12a0:	22 23       	and	r18, r18
    12a2:	09 f1       	breq	.+66     	; 0x12e6 <gps_locked+0x6c>
    {
        if (gps_data->msg_type[i]=='\0')
            return 0;
    }

    for (i=0; i<4; i++)
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	91 05       	cpc	r25, r1
    12aa:	b1 f7       	brne	.-20     	; 0x1298 <gps_locked+0x1e>
    {
        if (gps_data->utc_time[i]=='\0')
            return 0;
    }

    if ((gps_data->lat==0)||(gps_data->lon==0))
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	69 89       	ldd	r22, Y+17	; 0x11
    12b4:	7a 89       	ldd	r23, Y+18	; 0x12
    12b6:	8b 89       	ldd	r24, Y+19	; 0x13
    12b8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ba:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    12be:	88 23       	and	r24, r24
    12c0:	91 f0       	breq	.+36     	; 0x12e6 <gps_locked+0x6c>
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ca:	7e 89       	ldd	r23, Y+22	; 0x16
    12cc:	8f 89       	ldd	r24, Y+23	; 0x17
    12ce:	98 8d       	ldd	r25, Y+24	; 0x18
    12d0:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	39 f0       	breq	.+14     	; 0x12e6 <gps_locked+0x6c>
        return 0;

    if (gps_data->checksum[0] != '*')
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	2a a9       	ldd	r18, Y+50	; 0x32
    12de:	2a 32       	cpi	r18, 0x2A	; 42
    12e0:	21 f0       	breq	.+8      	; 0x12ea <gps_locked+0x70>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <gps_locked+0x70>
{
    int i;
    for (i=0; i<4; i++)
    {
        if (gps_data->msg_type[i]=='\0')
            return 0;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    if (gps_data->checksum[0] != '*')
        return 0;

    return 1;

    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <my_eeprom_read_int>:
//---- Database Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    12f0:	0e 94 9f 1c 	call	0x393e	; 0x393e <__eerd_byte_m1284p>
    return (temp_num);
}
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	08 95       	ret

000012f8 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    12f8:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__eerd_byte_m1284p>

000012fc <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    12fc:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__eerd_dword_m1284p>

00001300 <my_eeprom_read_string>:
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    1300:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__eerd_block_m1284p>

00001304 <database_load>:
}

//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	8c 01       	movw	r16, r24
//---- Database Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 9f 1c 	call	0x393e	; 0x393e <__eerd_byte_m1284p>
    131e:	90 e0       	ldi	r25, 0x00	; 0
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
        fm_stations->num_stations = 0;
    1320:	f8 01       	movw	r30, r16
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	91 05       	cpc	r25, r1
    1326:	19 f0       	breq	.+6      	; 0x132e <database_load+0x2a>
//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);
    1328:	93 83       	std	Z+3, r25	; 0x03
    132a:	82 83       	std	Z+2, r24	; 0x02
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <database_load+0x2e>

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
        fm_stations->num_stations = 0;
    132e:	13 82       	std	Z+3, r1	; 0x03
    1330:	12 82       	std	Z+2, r1	; 0x02
    1332:	ff e9       	ldi	r31, 0x9F	; 159
    1334:	26 e8       	ldi	r18, 0x86	; 134
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	f1 50       	subi	r31, 0x01	; 1
    133a:	20 40       	sbci	r18, 0x00	; 0
    133c:	40 40       	sbci	r20, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <database_load+0x34>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <database_load+0x3e>
    1342:	00 00       	nop

    _delay_ms(500);
    lcd_init();
    1344:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("importing ");
    1348:	8f e8       	ldi	r24, 0x8F	; 143
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    string_write_int(fm_stations->num_stations,3);
    1350:	63 e0       	ldi	r22, 0x03	; 3
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	f8 01       	movw	r30, r16
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
    string_write("\nstations...");
    135e:	8a e9       	ldi	r24, 0x9A	; 154
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>

    //allocate memory for all the station structures
    fm_stations->all_stations = (STATION *)malloc(fm_stations->num_stations*sizeof(STATION));
    1366:	f8 01       	movw	r30, r16
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	2c e1       	ldi	r18, 0x1C	; 28
    136e:	ac 01       	movw	r20, r24
    1370:	24 9f       	mul	r18, r20
    1372:	c0 01       	movw	r24, r0
    1374:	25 9f       	mul	r18, r21
    1376:	90 0d       	add	r25, r0
    1378:	11 24       	eor	r1, r1
    137a:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <malloc>
    137e:	f8 01       	movw	r30, r16
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    if (fm_stations->all_stations == NULL)
    1384:	89 2b       	or	r24, r25
    1386:	29 f0       	breq	.+10     	; 0x1392 <database_load+0x8e>
    1388:	c0 e0       	ldi	r28, 0x00	; 0
    138a:	d0 e0       	ldi	r29, 0x00	; 0
    138c:	c1 2c       	mov	r12, r1
    138e:	d1 2c       	mov	r13, r1
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <database_load+0xa0>
    {
            lcd_init();
    1392:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
            string_write("bad malloc");
    1396:	8f e0       	ldi	r24, 0x0F	; 15
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
            //database failed to load
            return 0;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	4c c0       	rjmp	.+152    	; 0x143c <database_load+0x138>
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    13a4:	f8 01       	movw	r30, r16
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	c8 16       	cp	r12, r24
    13ac:	d9 06       	cpc	r13, r25
    13ae:	0c f0       	brlt	.+2      	; 0x13b2 <database_load+0xae>
    13b0:	43 c0       	rjmp	.+134    	; 0x1438 <database_load+0x134>
    13b2:	be 01       	movw	r22, r28
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    13be:	48 e0       	ldi	r20, 0x08	; 8
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	8c 0f       	add	r24, r28
    13c4:	9d 1f       	adc	r25, r29
    13c6:	0e 94 8f 1c 	call	0x391e	; 0x391e <__eerd_block_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    13ca:	f8 01       	movw	r30, r16
    13cc:	e0 80       	ld	r14, Z
    13ce:	f1 80       	ldd	r15, Z+1	; 0x01
    13d0:	ec 0e       	add	r14, r28
    13d2:	fd 1e       	adc	r15, r29
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    13d4:	ce 01       	movw	r24, r28
    13d6:	09 96       	adiw	r24, 0x09	; 9
    13d8:	0e 94 a7 1c 	call	0x394e	; 0x394e <__eerd_dword_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    13dc:	f7 01       	movw	r30, r14
    13de:	60 87       	std	Z+8, r22	; 0x08
    13e0:	71 87       	std	Z+9, r23	; 0x09
    13e2:	82 87       	std	Z+10, r24	; 0x0a
    13e4:	93 87       	std	Z+11, r25	; 0x0b
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    13e6:	ce 01       	movw	r24, r28
    13e8:	0d 96       	adiw	r24, 0x0d	; 13
    13ea:	0e 94 a7 1c 	call	0x394e	; 0x394e <__eerd_dword_m1284p>
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
    13ee:	f7 01       	movw	r30, r14
    13f0:	64 87       	std	Z+12, r22	; 0x0c
    13f2:	75 87       	std	Z+13, r23	; 0x0d
    13f4:	86 87       	std	Z+14, r24	; 0x0e
    13f6:	97 87       	std	Z+15, r25	; 0x0f
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    13f8:	ce 01       	movw	r24, r28
    13fa:	41 96       	adiw	r24, 0x11	; 17
    13fc:	0e 94 a7 1c 	call	0x394e	; 0x394e <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
    1400:	f7 01       	movw	r30, r14
    1402:	60 8b       	std	Z+16, r22	; 0x10
    1404:	71 8b       	std	Z+17, r23	; 0x11
    1406:	82 8b       	std	Z+18, r24	; 0x12
    1408:	93 8b       	std	Z+19, r25	; 0x13
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    140a:	ce 01       	movw	r24, r28
    140c:	45 96       	adiw	r24, 0x15	; 21
    140e:	0e 94 a7 1c 	call	0x394e	; 0x394e <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
    1412:	f7 01       	movw	r30, r14
    1414:	64 8b       	std	Z+20, r22	; 0x14
    1416:	75 8b       	std	Z+21, r23	; 0x15
    1418:	86 8b       	std	Z+22, r24	; 0x16
    141a:	97 8b       	std	Z+23, r25	; 0x17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    141c:	ce 01       	movw	r24, r28
    141e:	49 96       	adiw	r24, 0x19	; 25
    1420:	0e 94 a7 1c 	call	0x394e	; 0x394e <__eerd_dword_m1284p>
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    1424:	f7 01       	movw	r30, r14
    1426:	60 8f       	std	Z+24, r22	; 0x18
    1428:	71 8f       	std	Z+25, r23	; 0x19
    142a:	82 8f       	std	Z+26, r24	; 0x1a
    142c:	93 8f       	std	Z+27, r25	; 0x1b
            //database failed to load
            return 0;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    142e:	ff ef       	ldi	r31, 0xFF	; 255
    1430:	cf 1a       	sub	r12, r31
    1432:	df 0a       	sbc	r13, r31
    1434:	6c 96       	adiw	r28, 0x1c	; 28
    1436:	b6 cf       	rjmp	.-148    	; 0x13a4 <database_load+0xa0>
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }

    //database loaded successfully
    return 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	08 95       	ret

0000144e <database_free>:

//free the FM Stations database from program memory
int database_free(DATABASE *fm_stations)
{
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ec 01       	movw	r28, r24

    free(fm_stations->all_stations);
    1454:	88 81       	ld	r24, Y
    1456:	99 81       	ldd	r25, Y+1	; 0x01
    1458:	0e 94 0c 18 	call	0x3018	; 0x3018 <free>
    fm_stations->all_stations = NULL;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	18 82       	st	Y, r1

    free(fm_stations);
    1460:	ce 01       	movw	r24, r28
    1462:	0e 94 0c 18 	call	0x3018	; 0x3018 <free>
    return 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
    1470:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
    1474:	8c e0       	ldi	r24, 0x0C	; 12
    1476:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
    147a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
    147e:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    1482:	e9 ec       	ldi	r30, 0xC9	; 201
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	88 6d       	ori	r24, 0xD8	; 216
    148a:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    148c:	e1 ec       	ldi	r30, 0xC1	; 193
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	88 6d       	ori	r24, 0xD8	; 216
    1494:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
    1496:	e8 ec       	ldi	r30, 0xC8	; 200
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	82 60       	ori	r24, 0x02	; 2
    149e:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
    14a0:	e0 ec       	ldi	r30, 0xC0	; 192
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
    14aa:	ea ec       	ldi	r30, 0xCA	; 202
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8e 60       	ori	r24, 0x0E	; 14
    14b2:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    14b4:	e2 ec       	ldi	r30, 0xC2	; 194
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	86 60       	ori	r24, 0x06	; 6
    14bc:	80 83       	st	Z, r24
    14be:	08 95       	ret

000014c0 <prepare_device>:

}

//set up GPIO, initialize interrupts, serial comm, and LCD
int prepare_device(volatile DEV_STATE *device)
{
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    int i;
    DDRB = 0xFF;
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	84 b9       	out	0x04, r24	; 4
    cli();
    14cc:	f8 94       	cli
    //Init usart
    InitUSART();
    14ce:	0e 94 38 0a 	call	0x1470	; 0x1470 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
    14d2:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
    14d4:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    14d8:	2f e3       	ldi	r18, 0x3F	; 63
    14da:	8d e0       	ldi	r24, 0x0D	; 13
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	21 50       	subi	r18, 0x01	; 1
    14e0:	80 40       	sbci	r24, 0x00	; 0
    14e2:	90 40       	sbci	r25, 0x00	; 0
    14e4:	e1 f7       	brne	.-8      	; 0x14de <prepare_device+0x1e>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <prepare_device+0x28>
    14e8:	00 00       	nop
    _delay_ms(1000);

    //allocate memory for the device state structure
    device = (volatile DEV_STATE *)malloc(sizeof(DEV_STATE));
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <malloc>
    14f2:	ec 01       	movw	r28, r24
    if (device == NULL)
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	49 f4       	brne	.+18     	; 0x150a <prepare_device+0x4a>
    {
        lcd_init();
    14f8:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
        string_write("bad malloc");
    14fc:	8f e0       	ldi	r24, 0x0F	; 15
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
        return 0;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	5e c0       	rjmp	.+188    	; 0x15c6 <prepare_device+0x106>
    }

    //choose starting DEV_STATE params
    device->serial_timer = 0;
    150a:	18 82       	st	Y, r1
    150c:	19 82       	std	Y+1, r1	; 0x01
    150e:	1a 82       	std	Y+2, r1	; 0x02
    1510:	1b 82       	std	Y+3, r1	; 0x03
    device->updating = 0;
    1512:	1d 82       	std	Y+5, r1	; 0x05
    1514:	1c 82       	std	Y+4, r1	; 0x04
    device->eeprom_index = 0;
    1516:	1f 82       	std	Y+7, r1	; 0x07
    1518:	1e 82       	std	Y+6, r1	; 0x06
    device->op_mode = MD_NORMAL;
    151a:	19 86       	std	Y+9, r1	; 0x09
    151c:	18 86       	std	Y+8, r1	; 0x08
    device->serialStartChar = '^';
    151e:	8e e5       	ldi	r24, 0x5E	; 94
    1520:	8a 87       	std	Y+10, r24	; 0x0a
    device->serialEndChar = '$';
    1522:	84 e2       	ldi	r24, 0x24	; 36
    1524:	8b 87       	std	Y+11, r24	; 0x0b

    device->rxReadPos = 0;
    1526:	fe 01       	movw	r30, r28
    1528:	e4 57       	subi	r30, 0x74	; 116
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	10 82       	st	Z, r1
    device->rxWritePos = 0;
    152e:	fe 01       	movw	r30, r28
    1530:	e3 57       	subi	r30, 0x73	; 115
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	10 82       	st	Z, r1
    device->gps_update_trigger = 0;
    1536:	fe 01       	movw	r30, r28
    1538:	e3 50       	subi	r30, 0x03	; 3
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	11 82       	std	Z+1, r1	; 0x01
    153e:	10 82       	st	Z, r1

    for (i=0; i<3; i++)
        device->serial_history[i] = '\0';
    1540:	fe 01       	movw	r30, r28
    1542:	e2 57       	subi	r30, 0x72	; 114
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	10 82       	st	Z, r1
    1548:	fe 01       	movw	r30, r28
    154a:	e1 57       	subi	r30, 0x71	; 113
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	10 82       	st	Z, r1
    1550:	fe 01       	movw	r30, r28
    1552:	e0 57       	subi	r30, 0x70	; 112
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	10 82       	st	Z, r1

    device->gps_rxCount = 0;
    1558:	fe 01       	movw	r30, r28
    155a:	ef 56       	subi	r30, 0x6F	; 111
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	11 82       	std	Z+1, r1	; 0x01
    1560:	10 82       	st	Z, r1

    for (i=0; i<RX_BUFFER_SIZE; i++)
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';
    1566:	fe 01       	movw	r30, r28
    1568:	e8 0f       	add	r30, r24
    156a:	f9 1f       	adc	r31, r25
    156c:	14 86       	std	Z+12, r1	; 0x0c
    for (i=0; i<3; i++)
        device->serial_history[i] = '\0';

    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	80 38       	cpi	r24, 0x80	; 128
    1572:	91 05       	cpc	r25, r1
    1574:	c1 f7       	brne	.-16     	; 0x1566 <prepare_device+0xa6>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';

    for (i=0; i<80; i++)
        device->gps_rxBuffer[i] = '\0';
    157a:	fe 01       	movw	r30, r28
    157c:	e8 0f       	add	r30, r24
    157e:	f9 1f       	adc	r31, r25
    1580:	ed 56       	subi	r30, 0x6D	; 109
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	10 82       	st	Z, r1
    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
        device->rxBuffer[i] = '\0';

    for (i=0; i<80; i++)
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	80 35       	cpi	r24, 0x50	; 80
    158a:	91 05       	cpc	r25, r1
    158c:	b1 f7       	brne	.-20     	; 0x157a <prepare_device+0xba>
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	10 e0       	ldi	r17, 0x00	; 0
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<13; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(16*sizeof(char));
    1592:	80 e1       	ldi	r24, 0x10	; 16
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <malloc>
    159a:	98 01       	movw	r18, r16
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	2c 0f       	add	r18, r28
    15a2:	3d 1f       	adc	r19, r29
    15a4:	f9 01       	movw	r30, r18
    15a6:	ed 51       	subi	r30, 0x1D	; 29
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
        if (device->raw_gps_data[i] == NULL)
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	89 2b       	or	r24, r25
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <prepare_device+0xf8>
    15b6:	a0 cf       	rjmp	.-192    	; 0x14f8 <prepare_device+0x38>

    for (i=0; i<80; i++)
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<13; i++)
    15b8:	0f 5f       	subi	r16, 0xFF	; 255
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	0d 30       	cpi	r16, 0x0D	; 13
    15be:	11 05       	cpc	r17, r1
    15c0:	41 f7       	brne	.-48     	; 0x1592 <prepare_device+0xd2>
            string_write("bad malloc");
            return 0;
        }
    }

    return 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	08 95       	ret

000015d0 <disable_gps>:

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
    15d0:	e1 ec       	ldi	r30, 0xC1	; 193
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	87 72       	andi	r24, 0x27	; 39
    15d8:	80 83       	st	Z, r24
    15da:	08 95       	ret

000015dc <enable_gps>:
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    15dc:	e1 ec       	ldi	r30, 0xC1	; 193
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 6d       	ori	r24, 0xD8	; 216
    15e4:	80 83       	st	Z, r24
    15e6:	08 95       	ret

000015e8 <detectSerialStart>:

//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(volatile DEV_STATE *device)
{
    15e8:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialStartChar)&&(device->serial_history[1]==device->serialStartChar)&&(device->serial_history[2]==device->serialStartChar))
    15ea:	dc 01       	movw	r26, r24
    15ec:	a2 57       	subi	r26, 0x72	; 114
    15ee:	bf 4f       	sbci	r27, 0xFF	; 255
    15f0:	9c 91       	ld	r25, X
    15f2:	82 85       	ldd	r24, Z+10	; 0x0a
    15f4:	98 13       	cpse	r25, r24
    15f6:	12 c0       	rjmp	.+36     	; 0x161c <detectSerialStart+0x34>
    15f8:	df 01       	movw	r26, r30
    15fa:	a1 57       	subi	r26, 0x71	; 113
    15fc:	bf 4f       	sbci	r27, 0xFF	; 255
    15fe:	9c 91       	ld	r25, X
    1600:	82 85       	ldd	r24, Z+10	; 0x0a
    1602:	98 13       	cpse	r25, r24
    1604:	0b c0       	rjmp	.+22     	; 0x161c <detectSerialStart+0x34>
    1606:	df 01       	movw	r26, r30
    1608:	a0 57       	subi	r26, 0x70	; 112
    160a:	bf 4f       	sbci	r27, 0xFF	; 255
    160c:	3c 91       	ld	r19, X
    160e:	22 85       	ldd	r18, Z+10	; 0x0a
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	32 17       	cp	r19, r18
    1616:	21 f0       	breq	.+8      	; 0x1620 <detectSerialStart+0x38>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	08 95       	ret
        return 1;
    else
        return 0;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
}
    1620:	08 95       	ret

00001622 <detectSerialEnd>:

//catch the serial update end sequence
int detectSerialEnd(volatile DEV_STATE *device)
{
    1622:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialEndChar)&&(device->serial_history[1]==device->serialEndChar)&&(device->serial_history[2]==device->serialEndChar))
    1624:	dc 01       	movw	r26, r24
    1626:	a2 57       	subi	r26, 0x72	; 114
    1628:	bf 4f       	sbci	r27, 0xFF	; 255
    162a:	9c 91       	ld	r25, X
    162c:	83 85       	ldd	r24, Z+11	; 0x0b
    162e:	98 13       	cpse	r25, r24
    1630:	12 c0       	rjmp	.+36     	; 0x1656 <detectSerialEnd+0x34>
    1632:	df 01       	movw	r26, r30
    1634:	a1 57       	subi	r26, 0x71	; 113
    1636:	bf 4f       	sbci	r27, 0xFF	; 255
    1638:	9c 91       	ld	r25, X
    163a:	83 85       	ldd	r24, Z+11	; 0x0b
    163c:	98 13       	cpse	r25, r24
    163e:	0b c0       	rjmp	.+22     	; 0x1656 <detectSerialEnd+0x34>
    1640:	df 01       	movw	r26, r30
    1642:	a0 57       	subi	r26, 0x70	; 112
    1644:	bf 4f       	sbci	r27, 0xFF	; 255
    1646:	3c 91       	ld	r19, X
    1648:	23 85       	ldd	r18, Z+11	; 0x0b
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	32 17       	cp	r19, r18
    1650:	21 f0       	breq	.+8      	; 0x165a <detectSerialEnd+0x38>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	08 95       	ret
        return 1;
    else
        return 0;
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
}
    165a:	08 95       	ret

0000165c <getChar>:
//read a char from the serial update buffer
char getChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    
    ret = device->rxBuffer[device->rxReadPos];
    165c:	fc 01       	movw	r30, r24
    165e:	e4 57       	subi	r30, 0x74	; 116
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	20 81       	ld	r18, Z
    1664:	dc 01       	movw	r26, r24
    1666:	a2 0f       	add	r26, r18
    1668:	b1 1d       	adc	r27, r1
    166a:	1c 96       	adiw	r26, 0x0c	; 12
    166c:	8c 91       	ld	r24, X
     
    device->rxReadPos++;
    166e:	90 81       	ld	r25, Z
    1670:	9f 5f       	subi	r25, 0xFF	; 255
    1672:	90 83       	st	Z, r25
     
    if(device->rxReadPos >= RX_BUFFER_SIZE)
    1674:	90 81       	ld	r25, Z
    1676:	97 fd       	sbrc	r25, 7
    {
        device->rxReadPos = 0;
    1678:	10 82       	st	Z, r1
    }
    
    return ret;
}
    167a:	08 95       	ret

0000167c <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
     
    if(device->rxReadPos != device->rxWritePos)
    167c:	fc 01       	movw	r30, r24
    167e:	e4 57       	subi	r30, 0x74	; 116
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	30 81       	ld	r19, Z
    1684:	dc 01       	movw	r26, r24
    1686:	a3 57       	subi	r26, 0x73	; 115
    1688:	bf 4f       	sbci	r27, 0xFF	; 255
    168a:	2c 91       	ld	r18, X
    168c:	32 17       	cp	r19, r18
    168e:	31 f0       	breq	.+12     	; 0x169c <peekChar+0x20>
    {
        ret = device->rxBuffer[device->rxReadPos];
    1690:	20 81       	ld	r18, Z
    1692:	fc 01       	movw	r30, r24
    1694:	e2 0f       	add	r30, r18
    1696:	f1 1d       	adc	r31, r1
    1698:	84 85       	ldd	r24, Z+12	; 0x0c
    169a:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    169c:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = device->rxBuffer[device->rxReadPos];
    }
     
    return ret;
}
    169e:	08 95       	ret

000016a0 <terminate_serial>:

//terminate the serial update with a certain status
int terminate_serial(volatile DEV_STATE *device, DATABASE *fm_stations, int flag)
{
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	fc 01       	movw	r30, r24
    16aa:	8b 01       	movw	r16, r22
    16ac:	ea 01       	movw	r28, r20
    device->op_mode = MD_NORMAL;
    16ae:	11 86       	std	Z+9, r1	; 0x09
    16b0:	10 86       	std	Z+8, r1	; 0x08
    device->updating = 0;
    16b2:	15 82       	std	Z+5, r1	; 0x05
    16b4:	14 82       	std	Z+4, r1	; 0x04
    device->serial_timer = 0;
    16b6:	10 82       	st	Z, r1
    16b8:	11 82       	std	Z+1, r1	; 0x01
    16ba:	12 82       	std	Z+2, r1	; 0x02
    16bc:	13 82       	std	Z+3, r1	; 0x03

    //import the new database
    lcd_init();
    16be:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>

    if (flag==FL_SUCCESS)
    16c2:	20 97       	sbiw	r28, 0x00	; 0
    16c4:	19 f4       	brne	.+6      	; 0x16cc <terminate_serial+0x2c>
        string_write("reading\ndatabase ...");
    16c6:	87 ea       	ldi	r24, 0xA7	; 167
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <terminate_serial+0x30>
    else
        string_write("ERROR:\ntimeout ...");
    16cc:	8c eb       	ldi	r24, 0xBC	; 188
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>

    database_load(fm_stations);
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 82 09 	call	0x1304	; 0x1304 <database_load>
    16da:	2f e3       	ldi	r18, 0x3F	; 63
    16dc:	8d e0       	ldi	r24, 0x0D	; 13
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	21 50       	subi	r18, 0x01	; 1
    16e2:	80 40       	sbci	r24, 0x00	; 0
    16e4:	90 40       	sbci	r25, 0x00	; 0
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <terminate_serial+0x40>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <terminate_serial+0x4a>
    16ea:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
    16ec:	21 97       	sbiw	r28, 0x01	; 1
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <terminate_serial+0x58>
        string_write("\nupdate failed\n");
    16f0:	8f ec       	ldi	r24, 0xCF	; 207
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    16f8:	2f e9       	ldi	r18, 0x9F	; 159
    16fa:	86 e8       	ldi	r24, 0x86	; 134
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	80 40       	sbci	r24, 0x00	; 0
    1702:	90 40       	sbci	r25, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <terminate_serial+0x5e>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <terminate_serial+0x68>
    1708:	00 00       	nop

    _delay_ms(500);
    return 1;
}
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <print_eeprom_contents>:



//print the EEPROM contents for an address range
void print_eeprom_contents(volatile DEV_STATE *device, DATABASE *fm_stations, int start_addr, int end_addr)
{
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	7c 01       	movw	r14, r24
    1726:	8a 01       	movw	r16, r20
    1728:	e9 01       	movw	r28, r18
    int i=0;
    char one_byte;

    if (end_addr == -1)
    172a:	2f 3f       	cpi	r18, 0xFF	; 255
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	38 07       	cpc	r19, r24
    1730:	51 f4       	brne	.+20     	; 0x1746 <print_eeprom_contents+0x2e>
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;
    1732:	fb 01       	movw	r30, r22
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	2c e1       	ldi	r18, 0x1C	; 28
    173a:	28 9f       	mul	r18, r24
    173c:	e0 01       	movw	r28, r0
    173e:	29 9f       	mul	r18, r25
    1740:	d0 0d       	add	r29, r0
    1742:	11 24       	eor	r1, r1
    1744:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
    1746:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
    174a:	0c 17       	cp	r16, r28
    174c:	1d 07       	cpc	r17, r29
    174e:	b4 f4       	brge	.+44     	; 0x177c <print_eeprom_contents+0x64>
    {
        if (device->op_mode==MD_UPDATE) return;
    1750:	f7 01       	movw	r30, r14
    1752:	80 85       	ldd	r24, Z+8	; 0x08
    1754:	91 85       	ldd	r25, Z+9	; 0x09
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	89 f0       	breq	.+34     	; 0x177c <print_eeprom_contents+0x64>
        one_byte = my_eeprom_read_char(i);
    175a:	c8 01       	movw	r24, r16
    175c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <my_eeprom_read_char>
        if (one_byte == '\0')
    1760:	81 11       	cpse	r24, r1
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <print_eeprom_contents+0x4e>
            one_byte = '?';
    1764:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    1766:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    176a:	87 ea       	ldi	r24, 0xA7	; 167
    176c:	91 e6       	ldi	r25, 0x61	; 97
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <print_eeprom_contents+0x56>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <print_eeprom_contents+0x5c>
    1774:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
    1776:	0f 5f       	subi	r16, 0xFF	; 255
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	e7 cf       	rjmp	.-50     	; 0x174a <print_eeprom_contents+0x32>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	08 95       	ret

0000178a <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	7c 01       	movw	r14, r24
    179a:	8b 01       	movw	r16, r22
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*fm_stations->num_stations; i++)
    179c:	c0 e0       	ldi	r28, 0x00	; 0
    179e:	d0 e0       	ldi	r29, 0x00	; 0
    17a0:	5c e1       	ldi	r21, 0x1C	; 28
    17a2:	d5 2e       	mov	r13, r21
    17a4:	f8 01       	movw	r30, r16
    17a6:	22 81       	ldd	r18, Z+2	; 0x02
    17a8:	33 81       	ldd	r19, Z+3	; 0x03
    17aa:	d2 9e       	mul	r13, r18
    17ac:	c0 01       	movw	r24, r0
    17ae:	d3 9e       	mul	r13, r19
    17b0:	90 0d       	add	r25, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	c8 17       	cp	r28, r24
    17b6:	d9 07       	cpc	r29, r25
    17b8:	ac f4       	brge	.+42     	; 0x17e4 <print_eeprom_station_contents+0x5a>
    {
        if (device->op_mode==MD_UPDATE) return;
    17ba:	f7 01       	movw	r30, r14
    17bc:	80 85       	ldd	r24, Z+8	; 0x08
    17be:	91 85       	ldd	r25, Z+9	; 0x09
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	81 f0       	breq	.+32     	; 0x17e4 <print_eeprom_station_contents+0x5a>
        one_byte = my_eeprom_read_char(start+i);
    17c4:	21 96       	adiw	r28, 0x01	; 1
    17c6:	ce 01       	movw	r24, r28
    17c8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <my_eeprom_read_char>
        if (one_byte == '\0')
    17cc:	81 11       	cpse	r24, r1
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <print_eeprom_station_contents+0x48>
            one_byte = '?';
    17d0:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    17d2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    17d6:	87 ea       	ldi	r24, 0xA7	; 167
    17d8:	91 e6       	ldi	r25, 0x61	; 97
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <print_eeprom_station_contents+0x50>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <print_eeprom_station_contents+0x56>
    17e0:	00 00       	nop
    17e2:	e0 cf       	rjmp	.-64     	; 0x17a4 <print_eeprom_station_contents+0x1a>
        _delay_ms(100);
    }
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	08 95       	ret

000017f4 <wait_for_update>:
        _delay_ms(250);   
    }
}

void wait_for_update(volatile DEV_STATE *device)
{
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	ec 01       	movw	r28, r24
    lcd_init();
    17fa:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("update required\n...feed me...");
    17fe:	8f ed       	ldi	r24, 0xDF	; 223
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    while (1)
    {
        if (device->op_mode==MD_UPDATE) return;
    1806:	88 85       	ldd	r24, Y+8	; 0x08
    1808:	99 85       	ldd	r25, Y+9	; 0x09
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	e1 f7       	brne	.-8      	; 0x1806 <wait_for_update+0x12>
    }
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <print_gps_data>:
    _delay_ms(2000);
}

//print the formatted data stored in the GPS_DATA struct to the screen
void print_gps_data(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    1814:	6f 92       	push	r6
    1816:	7f 92       	push	r7
    1818:	8f 92       	push	r8
    181a:	9f 92       	push	r9
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	7c 01       	movw	r14, r24
    1832:	eb 01       	movw	r28, r22
    if (device->op_mode==MD_UPDATE) return;
    1834:	fc 01       	movw	r30, r24
    1836:	80 85       	ldd	r24, Z+8	; 0x08
    1838:	91 85       	ldd	r25, Z+9	; 0x09
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	09 f4       	brne	.+2      	; 0x1840 <print_gps_data+0x2c>
    183e:	aa c0       	rjmp	.+340    	; 0x1994 <print_gps_data+0x180>
    lcd_init();
    1840:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("Latest\nGPS Data:");
    1844:	8d ef       	ldi	r24, 0xFD	; 253
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    184c:	ff e3       	ldi	r31, 0x3F	; 63
    184e:	2d e0       	ldi	r18, 0x0D	; 13
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	f1 50       	subi	r31, 0x01	; 1
    1854:	20 40       	sbci	r18, 0x00	; 0
    1856:	80 40       	sbci	r24, 0x00	; 0
    1858:	e1 f7       	brne	.-8      	; 0x1852 <print_gps_data+0x3e>
    185a:	00 c0       	rjmp	.+0      	; 0x185c <print_gps_data+0x48>
    185c:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    185e:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
    1862:	00 e0       	ldi	r16, 0x00	; 0
    1864:	10 e0       	ldi	r17, 0x00	; 0
                string_write_numchars(gps_data->msg_type,8);
            break;

            case 1:
                string_write("Time: ");
                string_write_numchars(gps_data->utc_time,8);
    1866:	3e 01       	movw	r6, r28
    1868:	98 e0       	ldi	r25, 0x08	; 8
    186a:	69 0e       	add	r6, r25
    186c:	71 1c       	adc	r7, r1
                char_write(gps_data->mode);
            break;

            case 10:
                string_write("Checksum: ");
                string_write_numchars(gps_data->checksum,3);
    186e:	6e 01       	movw	r12, r28
    1870:	e2 e3       	ldi	r30, 0x32	; 50
    1872:	ce 0e       	add	r12, r30
    1874:	d1 1c       	adc	r13, r1
                string_write_numchars(gps_data->date,8);
            break;

            case 8:
                string_write("MagVar: ");
                string_write_numchars(gps_data->mag_var,8);
    1876:	5e 01       	movw	r10, r28
    1878:	f9 e2       	ldi	r31, 0x29	; 41
    187a:	af 0e       	add	r10, r31
    187c:	b1 1c       	adc	r11, r1
                string_write_float(gps_data->course,3);
            break;

            case 7:
                string_write("Date: ");
                string_write_numchars(gps_data->date,8);
    187e:	4e 01       	movw	r8, r28
    1880:	21 e2       	ldi	r18, 0x21	; 33
    1882:	82 0e       	add	r8, r18
    1884:	91 1c       	adc	r9, r1
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    {

        if (i>0)
    1886:	01 15       	cp	r16, r1
    1888:	11 05       	cpc	r17, r1
    188a:	69 f0       	breq	.+26     	; 0x18a6 <print_gps_data+0x92>
            string_write("\n");
    188c:	88 e4       	ldi	r24, 0x48	; 72
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>

        switch (i)
    1894:	f8 01       	movw	r30, r16
    1896:	32 97       	sbiw	r30, 0x02	; 2
    1898:	e9 30       	cpi	r30, 0x09	; 9
    189a:	f1 05       	cpc	r31, r1
    189c:	60 f4       	brcc	.+24     	; 0x18b6 <print_gps_data+0xa2>
    189e:	ea 5b       	subi	r30, 0xBA	; 186
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
    18a6:	8e e0       	ldi	r24, 0x0E	; 14
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_numchars(gps_data->msg_type,8);
    18ae:	68 e0       	ldi	r22, 0x08	; 8
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	ce 01       	movw	r24, r28
    18b4:	59 c0       	rjmp	.+178    	; 0x1968 <print_gps_data+0x154>
            break;

            case 1:
                string_write("Time: ");
    18b6:	88 e1       	ldi	r24, 0x18	; 24
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_numchars(gps_data->utc_time,8);
    18be:	68 e0       	ldi	r22, 0x08	; 8
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	c3 01       	movw	r24, r6
    18c4:	51 c0       	rjmp	.+162    	; 0x1968 <print_gps_data+0x154>
            break;

            case 2:
                string_write("NRW: ");
    18c6:	8f e1       	ldi	r24, 0x1F	; 31
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                char_write(gps_data->nrw);
    18ce:	88 89       	ldd	r24, Y+16	; 0x10
    18d0:	41 c0       	rjmp	.+130    	; 0x1954 <print_gps_data+0x140>
            break;

            case 3:
                string_write("Lat: ");
    18d2:	85 e2       	ldi	r24, 0x25	; 37
    18d4:	92 e0       	ldi	r25, 0x02	; 2
    18d6:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_float(gps_data->lat,4);
    18da:	69 89       	ldd	r22, Y+17	; 0x11
    18dc:	7a 89       	ldd	r23, Y+18	; 0x12
    18de:	8b 89       	ldd	r24, Y+19	; 0x13
    18e0:	9c 89       	ldd	r25, Y+20	; 0x14
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <print_gps_data+0xe0>
            break;

            case 4:
                string_write("Lon: ");
    18e4:	8b e2       	ldi	r24, 0x2B	; 43
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_float(gps_data->lon,4);
    18ec:	6d 89       	ldd	r22, Y+21	; 0x15
    18ee:	7e 89       	ldd	r23, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	44 e0       	ldi	r20, 0x04	; 4
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	15 c0       	rjmp	.+42     	; 0x1924 <print_gps_data+0x110>
            break;

            case 5:
                string_write("Speed: ");
    18fa:	81 e3       	ldi	r24, 0x31	; 49
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_float(gps_data->speed,1);
    1902:	69 8d       	ldd	r22, Y+25	; 0x19
    1904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	0a c0       	rjmp	.+20     	; 0x1924 <print_gps_data+0x110>
            break;

            case 6:
                string_write("Course: ");
    1910:	89 e3       	ldi	r24, 0x39	; 57
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_float(gps_data->course,3);
    1918:	6d 8d       	ldd	r22, Y+29	; 0x1d
    191a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    191c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    191e:	98 a1       	ldd	r25, Y+32	; 0x20
    1920:	43 e0       	ldi	r20, 0x03	; 3
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1928:	21 c0       	rjmp	.+66     	; 0x196c <print_gps_data+0x158>
            break;

            case 7:
                string_write("Date: ");
    192a:	82 e4       	ldi	r24, 0x42	; 66
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_numchars(gps_data->date,8);
    1932:	68 e0       	ldi	r22, 0x08	; 8
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	c4 01       	movw	r24, r8
    1938:	17 c0       	rjmp	.+46     	; 0x1968 <print_gps_data+0x154>
            break;

            case 8:
                string_write("MagVar: ");
    193a:	89 e4       	ldi	r24, 0x49	; 73
    193c:	92 e0       	ldi	r25, 0x02	; 2
    193e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_numchars(gps_data->mag_var,8);
    1942:	68 e0       	ldi	r22, 0x08	; 8
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	c5 01       	movw	r24, r10
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <print_gps_data+0x154>
            break;

            case 9:
                string_write("Mode: ");
    194a:	82 e5       	ldi	r24, 0x52	; 82
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                char_write(gps_data->mode);
    1952:	89 a9       	ldd	r24, Y+49	; 0x31
    1954:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    1958:	09 c0       	rjmp	.+18     	; 0x196c <print_gps_data+0x158>
            break;

            case 10:
                string_write("Checksum: ");
    195a:	89 e5       	ldi	r24, 0x59	; 89
    195c:	92 e0       	ldi	r25, 0x02	; 2
    195e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
                string_write_numchars(gps_data->checksum,3);
    1962:	63 e0       	ldi	r22, 0x03	; 3
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	c6 01       	movw	r24, r12
    1968:	0e 94 d5 04 	call	0x9aa	; 0x9aa <string_write_numchars>
    196c:	8f e3       	ldi	r24, 0x3F	; 63
    196e:	9d e0       	ldi	r25, 0x0D	; 13
    1970:	e3 e0       	ldi	r30, 0x03	; 3
    1972:	81 50       	subi	r24, 0x01	; 1
    1974:	90 40       	sbci	r25, 0x00	; 0
    1976:	e0 40       	sbci	r30, 0x00	; 0
    1978:	e1 f7       	brne	.-8      	; 0x1972 <print_gps_data+0x15e>
    197a:	00 c0       	rjmp	.+0      	; 0x197c <print_gps_data+0x168>
    197c:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (device->op_mode==MD_UPDATE) return;
    197e:	f7 01       	movw	r30, r14
    1980:	80 85       	ldd	r24, Z+8	; 0x08
    1982:	91 85       	ldd	r25, Z+9	; 0x09
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	31 f0       	breq	.+12     	; 0x1994 <print_gps_data+0x180>
    lcd_init();
    string_write("Latest\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    1988:	0f 5f       	subi	r16, 0xFF	; 255
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	0b 30       	cpi	r16, 0x0B	; 11
    198e:	11 05       	cpc	r17, r1
    1990:	09 f0       	breq	.+2      	; 0x1994 <print_gps_data+0x180>
    1992:	79 cf       	rjmp	.-270    	; 0x1886 <print_gps_data+0x72>
        }

        _delay_ms(1000);
        if (device->op_mode==MD_UPDATE) return;
    }
}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	9f 90       	pop	r9
    19aa:	8f 90       	pop	r8
    19ac:	7f 90       	pop	r7
    19ae:	6f 90       	pop	r6
    19b0:	08 95       	ret

000019b2 <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(volatile DEV_STATE *device)
{
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	8c 01       	movw	r16, r24
    if (device->op_mode==MD_UPDATE) return;
    19bc:	fc 01       	movw	r30, r24
    19be:	80 85       	ldd	r24, Z+8	; 0x08
    19c0:	91 85       	ldd	r25, Z+9	; 0x09
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <print_raw_gps_data+0x16>
    19c6:	6d c0       	rjmp	.+218    	; 0x1aa2 <print_raw_gps_data+0xf0>
    lcd_init();
    19c8:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("Raw\nGPS Data");
    19cc:	84 e6       	ldi	r24, 0x64	; 100
    19ce:	92 e0       	ldi	r25, 0x02	; 2
    19d0:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    19d4:	ff e3       	ldi	r31, 0x3F	; 63
    19d6:	2d e0       	ldi	r18, 0x0D	; 13
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	f1 50       	subi	r31, 0x01	; 1
    19dc:	20 40       	sbci	r18, 0x00	; 0
    19de:	80 40       	sbci	r24, 0x00	; 0
    19e0:	e1 f7       	brne	.-8      	; 0x19da <print_raw_gps_data+0x28>
    19e2:	00 c0       	rjmp	.+0      	; 0x19e4 <print_raw_gps_data+0x32>
    19e4:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    19e6:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    int i=0;
    for (i=0; i<13; i++)
    19ea:	c0 e0       	ldi	r28, 0x00	; 0
    19ec:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
    19ee:	20 97       	sbiw	r28, 0x00	; 0
    19f0:	69 f0       	breq	.+26     	; 0x1a0c <print_raw_gps_data+0x5a>
            string_write("\n");
    19f2:	88 e4       	ldi	r24, 0x48	; 72
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>

        switch (i)
    19fa:	fe 01       	movw	r30, r28
    19fc:	32 97       	sbiw	r30, 0x02	; 2
    19fe:	eb 30       	cpi	r30, 0x0B	; 11
    1a00:	f1 05       	cpc	r31, r1
    1a02:	38 f4       	brcc	.+14     	; 0x1a12 <print_raw_gps_data+0x60>
    1a04:	e1 5b       	subi	r30, 0xB1	; 177
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__tablejump2__>
        {
            case 0:
                string_write("Message");
    1a0c:	81 e7       	ldi	r24, 0x71	; 113
    1a0e:	92 e0       	ldi	r25, 0x02	; 2
    1a10:	23 c0       	rjmp	.+70     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 1:
                string_write("Time");
    1a12:	89 e7       	ldi	r24, 0x79	; 121
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	20 c0       	rjmp	.+64     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 2:
                string_write("NRW");
    1a18:	8e e7       	ldi	r24, 0x7E	; 126
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	1d c0       	rjmp	.+58     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 3:
                string_write("Lat");
    1a1e:	82 e8       	ldi	r24, 0x82	; 130
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	1a c0       	rjmp	.+52     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 4:
                string_write("N/S");
    1a24:	86 e8       	ldi	r24, 0x86	; 134
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	17 c0       	rjmp	.+46     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 5:
                string_write("Lon");
    1a2a:	8a e8       	ldi	r24, 0x8A	; 138
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 6:
                string_write("E/W");
    1a30:	8e e8       	ldi	r24, 0x8E	; 142
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	11 c0       	rjmp	.+34     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 7:
                string_write("Speed");
    1a36:	82 e9       	ldi	r24, 0x92	; 146
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e c0       	rjmp	.+28     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 8:
                string_write("Course");
    1a3c:	88 e9       	ldi	r24, 0x98	; 152
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 9:
                string_write("Date");
    1a42:	8f e9       	ldi	r24, 0x9F	; 159
    1a44:	92 e0       	ldi	r25, 0x02	; 2
    1a46:	08 c0       	rjmp	.+16     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 10:
                string_write("MagVar");
    1a48:	84 ea       	ldi	r24, 0xA4	; 164
    1a4a:	92 e0       	ldi	r25, 0x02	; 2
    1a4c:	05 c0       	rjmp	.+10     	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 11:
                string_write("Mode");
    1a4e:	8b ea       	ldi	r24, 0xAB	; 171
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <print_raw_gps_data+0xa6>
            break;

            case 12:
                string_write("Checksum");
    1a54:	80 eb       	ldi	r24, 0xB0	; 176
    1a56:	92 e0       	ldi	r25, 0x02	; 2
    1a58:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
            break;
        }

        string_write(": ");
    1a5c:	83 ea       	ldi	r24, 0xA3	; 163
    1a5e:	93 e0       	ldi	r25, 0x03	; 3
    1a60:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
        string_write(device->raw_gps_data[i]);
    1a64:	ce 01       	movw	r24, r28
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	80 0f       	add	r24, r16
    1a6c:	91 1f       	adc	r25, r17
    1a6e:	fc 01       	movw	r30, r24
    1a70:	ed 51       	subi	r30, 0x1D	; 29
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1a7c:	9f e9       	ldi	r25, 0x9F	; 159
    1a7e:	e6 e8       	ldi	r30, 0x86	; 134
    1a80:	f1 e0       	ldi	r31, 0x01	; 1
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	e0 40       	sbci	r30, 0x00	; 0
    1a86:	f0 40       	sbci	r31, 0x00	; 0
    1a88:	e1 f7       	brne	.-8      	; 0x1a82 <print_raw_gps_data+0xd0>
    1a8a:	00 c0       	rjmp	.+0      	; 0x1a8c <print_raw_gps_data+0xda>
    1a8c:	00 00       	nop

        _delay_ms(500);
        if (device->op_mode==MD_UPDATE) return;
    1a8e:	f8 01       	movw	r30, r16
    1a90:	80 85       	ldd	r24, Z+8	; 0x08
    1a92:	91 85       	ldd	r25, Z+9	; 0x09
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	29 f0       	breq	.+10     	; 0x1aa2 <print_raw_gps_data+0xf0>
    lcd_init();
    string_write("Raw\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
    1a98:	21 96       	adiw	r28, 0x01	; 1
    1a9a:	cd 30       	cpi	r28, 0x0D	; 13
    1a9c:	d1 05       	cpc	r29, r1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <print_raw_gps_data+0xf0>
    1aa0:	a6 cf       	rjmp	.-180    	; 0x19ee <print_raw_gps_data+0x3c>
        string_write(device->raw_gps_data[i]);

        _delay_ms(500);
        if (device->op_mode==MD_UPDATE) return;
    }
}
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(volatile DEV_STATE *device)
{
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	8c 01       	movw	r16, r24
    int i;
    lcd_init();
    1ab6:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("wiping\nmemory...");
    1aba:	89 eb       	ldi	r24, 0xB9	; 185
    1abc:	92 e0       	ldi	r25, 0x02	; 2
    1abe:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    1ac2:	c0 e0       	ldi	r28, 0x00	; 0
    1ac4:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (device->op_mode==MD_UPDATE) return;
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 85       	ldd	r24, Z+8	; 0x08
    1aca:	91 85       	ldd	r25, Z+9	; 0x09
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <wipe_eeprom+0x36>
        eeprom_write_byte((uint8_t *)i,255);
    1ad0:	6f ef       	ldi	r22, 0xFF	; 255
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	0e 94 ad 1c 	call	0x395a	; 0x395a <__eewr_byte_m1284p>
void wipe_eeprom(volatile DEV_STATE *device)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    1ad8:	21 96       	adiw	r28, 0x01	; 1
    1ada:	c1 3f       	cpi	r28, 0xF1	; 241
    1adc:	fa e0       	ldi	r31, 0x0A	; 10
    1ade:	df 07       	cpc	r29, r31
    1ae0:	91 f7       	brne	.-28     	; 0x1ac6 <wipe_eeprom+0x1a>
    {
        if (device->op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	8c 01       	movw	r16, r24
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    1afa:	8c e1       	ldi	r24, 0x1C	; 28
    1afc:	86 9f       	mul	r24, r22
    1afe:	70 01       	movw	r14, r0
    1b00:	87 9f       	mul	r24, r23
    1b02:	f0 0c       	add	r15, r0
    1b04:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    1b06:	c0 e0       	ldi	r28, 0x00	; 0
    1b08:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    1b0a:	d8 01       	movw	r26, r16
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	ee 0d       	add	r30, r14
    1b12:	ff 1d       	adc	r31, r15
    1b14:	ec 0f       	add	r30, r28
    1b16:	fd 1f       	adc	r31, r29
    1b18:	80 81       	ld	r24, Z
    1b1a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    1b1e:	21 96       	adiw	r28, 0x01	; 1
    1b20:	c8 30       	cpi	r28, 0x08	; 8
    1b22:	d1 05       	cpc	r29, r1
    1b24:	91 f7       	brne	.-28     	; 0x1b0a <print_callsign+0x1e>
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    }
}
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
    1b32:	08 95       	ret

00001b34 <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	7c 01       	movw	r14, r24
    1b46:	8b 01       	movw	r16, r22
    if (device->op_mode==MD_UPDATE) return;
    1b48:	fc 01       	movw	r30, r24
    1b4a:	80 85       	ldd	r24, Z+8	; 0x08
    1b4c:	91 85       	ldd	r25, Z+9	; 0x09
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <print_all_callsigns+0x20>
    1b52:	4b c0       	rjmp	.+150    	; 0x1bea <print_all_callsigns+0xb6>
    int i;
    lcd_init();
    1b54:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    1b58:	63 e0       	ldi	r22, 0x03	; 3
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
    string_write(" known\nstations");
    1b66:	8a ec       	ldi	r24, 0xCA	; 202
    1b68:	92 e0       	ldi	r25, 0x02	; 2
    1b6a:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1b6e:	ff e7       	ldi	r31, 0x7F	; 127
    1b70:	2a e1       	ldi	r18, 0x1A	; 26
    1b72:	86 e0       	ldi	r24, 0x06	; 6
    1b74:	f1 50       	subi	r31, 0x01	; 1
    1b76:	20 40       	sbci	r18, 0x00	; 0
    1b78:	80 40       	sbci	r24, 0x00	; 0
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <print_all_callsigns+0x40>
    1b7c:	00 c0       	rjmp	.+0      	; 0x1b7e <print_all_callsigns+0x4a>
    1b7e:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1b80:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("\n");
    1b84:	88 e4       	ldi	r24, 0x48	; 72
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>

    for (i=0; i<fm_stations->num_stations; i++)
    1b8c:	c0 e0       	ldi	r28, 0x00	; 0
    1b8e:	d0 e0       	ldi	r29, 0x00	; 0
    1b90:	f8 01       	movw	r30, r16
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	c8 17       	cp	r28, r24
    1b98:	d9 07       	cpc	r29, r25
    1b9a:	3c f5       	brge	.+78     	; 0x1bea <print_all_callsigns+0xb6>
    {
        if (device->op_mode==MD_UPDATE) return;
    1b9c:	f7 01       	movw	r30, r14
    1b9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ba0:	91 85       	ldd	r25, Z+9	; 0x09
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	11 f1       	breq	.+68     	; 0x1bea <print_all_callsigns+0xb6>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(fm_stations, i);
    1ba6:	88 e4       	ldi	r24, 0x48	; 72
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1bae:	6e 01       	movw	r12, r28
    1bb0:	ff ef       	ldi	r31, 0xFF	; 255
    1bb2:	cf 1a       	sub	r12, r31
    1bb4:	df 0a       	sbc	r13, r31
    1bb6:	63 e0       	ldi	r22, 0x03	; 3
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	c6 01       	movw	r24, r12
    1bbc:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
    1bc0:	83 ea       	ldi	r24, 0xA3	; 163
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1bc8:	be 01       	movw	r22, r28
    1bca:	c8 01       	movw	r24, r16
    1bcc:	0e 94 76 0d 	call	0x1aec	; 0x1aec <print_callsign>

        if (device->op_mode==MD_UPDATE) return;
    1bd0:	f7 01       	movw	r30, r14
    1bd2:	80 85       	ldd	r24, Z+8	; 0x08
    1bd4:	91 85       	ldd	r25, Z+9	; 0x09
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	41 f0       	breq	.+16     	; 0x1bea <print_all_callsigns+0xb6>
    1bda:	83 e2       	ldi	r24, 0x23	; 35
    1bdc:	94 ef       	ldi	r25, 0xF4	; 244
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <print_all_callsigns+0xaa>
    1be2:	00 c0       	rjmp	.+0      	; 0x1be4 <print_all_callsigns+0xb0>
    1be4:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    string_write("\n");

    for (i=0; i<fm_stations->num_stations; i++)
    1be6:	e6 01       	movw	r28, r12
    1be8:	d3 cf       	rjmp	.-90     	; 0x1b90 <print_all_callsigns+0x5c>

        if (device->op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	08 95       	ret

00001bfc <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(volatile DEV_STATE *device, DATABASE *fm_stations, int index)
{
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	ec 01       	movw	r28, r24
    1c0e:	8b 01       	movw	r16, r22
    1c10:	6a 01       	movw	r12, r20
    string_write_int(index+1,3); string_write(": "); print_callsign(fm_stations, index); _delay_ms(250); string_write("\n"); 
    1c12:	63 e0       	ldi	r22, 0x03	; 3
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	ca 01       	movw	r24, r20
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
    1c1e:	83 ea       	ldi	r24, 0xA3	; 163
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1c26:	b6 01       	movw	r22, r12
    1c28:	c8 01       	movw	r24, r16
    1c2a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <print_callsign>
    1c2e:	83 e2       	ldi	r24, 0x23	; 35
    1c30:	94 ef       	ldi	r25, 0xF4	; 244
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <print_station+0x36>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <print_station+0x3c>
    1c38:	00 00       	nop
    1c3a:	88 e4       	ldi	r24, 0x48	; 72
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE)
    1c42:	88 85       	ldd	r24, Y+8	; 0x08
    1c44:	99 85       	ldd	r25, Y+9	; 0x09
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <print_station+0x50>
    1c4a:	a1 c0       	rjmp	.+322    	; 0x1d8e <print_station+0x192>
        return;
    string_write("freq: "); string_write_float(fm_stations->all_stations[index].freq,1); _delay_ms(250); string_write("\n");
    1c4c:	8a ed       	ldi	r24, 0xDA	; 218
    1c4e:	92 e0       	ldi	r25, 0x02	; 2
    1c50:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1c54:	8c e1       	ldi	r24, 0x1C	; 28
    1c56:	8c 9d       	mul	r24, r12
    1c58:	70 01       	movw	r14, r0
    1c5a:	8d 9d       	mul	r24, r13
    1c5c:	f0 0c       	add	r15, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	d8 01       	movw	r26, r16
    1c62:	ed 91       	ld	r30, X+
    1c64:	fc 91       	ld	r31, X
    1c66:	ee 0d       	add	r30, r14
    1c68:	ff 1d       	adc	r31, r15
    1c6a:	60 85       	ldd	r22, Z+8	; 0x08
    1c6c:	71 85       	ldd	r23, Z+9	; 0x09
    1c6e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c70:	93 85       	ldd	r25, Z+11	; 0x0b
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1c7a:	83 e2       	ldi	r24, 0x23	; 35
    1c7c:	94 ef       	ldi	r25, 0xF4	; 244
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <print_station+0x82>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <print_station+0x88>
    1c84:	00 00       	nop
    1c86:	88 e4       	ldi	r24, 0x48	; 72
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE)
    1c8e:	88 85       	ldd	r24, Y+8	; 0x08
    1c90:	99 85       	ldd	r25, Y+9	; 0x09
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <print_station+0x9c>
    1c96:	7b c0       	rjmp	.+246    	; 0x1d8e <print_station+0x192>
        return;
    string_write("lat: "); string_write_float(fm_stations->all_stations[index].lat,4); _delay_ms(250); string_write("\n");
    1c98:	81 ee       	ldi	r24, 0xE1	; 225
    1c9a:	92 e0       	ldi	r25, 0x02	; 2
    1c9c:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1ca0:	d8 01       	movw	r26, r16
    1ca2:	ed 91       	ld	r30, X+
    1ca4:	fc 91       	ld	r31, X
    1ca6:	ee 0d       	add	r30, r14
    1ca8:	ff 1d       	adc	r31, r15
    1caa:	64 85       	ldd	r22, Z+12	; 0x0c
    1cac:	75 85       	ldd	r23, Z+13	; 0x0d
    1cae:	86 85       	ldd	r24, Z+14	; 0x0e
    1cb0:	97 85       	ldd	r25, Z+15	; 0x0f
    1cb2:	44 e0       	ldi	r20, 0x04	; 4
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1cba:	83 e2       	ldi	r24, 0x23	; 35
    1cbc:	94 ef       	ldi	r25, 0xF4	; 244
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <print_station+0xc2>
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <print_station+0xc8>
    1cc4:	00 00       	nop
    1cc6:	88 e4       	ldi	r24, 0x48	; 72
    1cc8:	91 e0       	ldi	r25, 0x01	; 1
    1cca:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE)
    1cce:	88 85       	ldd	r24, Y+8	; 0x08
    1cd0:	99 85       	ldd	r25, Y+9	; 0x09
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <print_station+0xdc>
    1cd6:	5b c0       	rjmp	.+182    	; 0x1d8e <print_station+0x192>
        return;
    string_write("lon: "); string_write_float(fm_stations->all_stations[index].lon,4); _delay_ms(250); string_write("\n");
    1cd8:	87 ee       	ldi	r24, 0xE7	; 231
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1ce0:	d8 01       	movw	r26, r16
    1ce2:	ed 91       	ld	r30, X+
    1ce4:	fc 91       	ld	r31, X
    1ce6:	ee 0d       	add	r30, r14
    1ce8:	ff 1d       	adc	r31, r15
    1cea:	60 89       	ldd	r22, Z+16	; 0x10
    1cec:	71 89       	ldd	r23, Z+17	; 0x11
    1cee:	82 89       	ldd	r24, Z+18	; 0x12
    1cf0:	93 89       	ldd	r25, Z+19	; 0x13
    1cf2:	44 e0       	ldi	r20, 0x04	; 4
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1cfa:	83 e2       	ldi	r24, 0x23	; 35
    1cfc:	94 ef       	ldi	r25, 0xF4	; 244
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <print_station+0x102>
    1d02:	00 c0       	rjmp	.+0      	; 0x1d04 <print_station+0x108>
    1d04:	00 00       	nop
    1d06:	88 e4       	ldi	r24, 0x48	; 72
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE)
    1d0e:	88 85       	ldd	r24, Y+8	; 0x08
    1d10:	99 85       	ldd	r25, Y+9	; 0x09
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	e1 f1       	breq	.+120    	; 0x1d8e <print_station+0x192>
        return;
    string_write("erp: "); string_write_float(fm_stations->all_stations[index].erp,1); _delay_ms(250); string_write("\n");
    1d16:	8d ee       	ldi	r24, 0xED	; 237
    1d18:	92 e0       	ldi	r25, 0x02	; 2
    1d1a:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1d1e:	d8 01       	movw	r26, r16
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	ee 0d       	add	r30, r14
    1d26:	ff 1d       	adc	r31, r15
    1d28:	64 89       	ldd	r22, Z+20	; 0x14
    1d2a:	75 89       	ldd	r23, Z+21	; 0x15
    1d2c:	86 89       	ldd	r24, Z+22	; 0x16
    1d2e:	97 89       	ldd	r25, Z+23	; 0x17
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1d38:	83 e2       	ldi	r24, 0x23	; 35
    1d3a:	94 ef       	ldi	r25, 0xF4	; 244
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <print_station+0x140>
    1d40:	00 c0       	rjmp	.+0      	; 0x1d42 <print_station+0x146>
    1d42:	00 00       	nop
    1d44:	88 e4       	ldi	r24, 0x48	; 72
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE)
    1d4c:	88 85       	ldd	r24, Y+8	; 0x08
    1d4e:	99 85       	ldd	r25, Y+9	; 0x09
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	e9 f0       	breq	.+58     	; 0x1d8e <print_station+0x192>
        return;
    string_write("haat: "); string_write_float(fm_stations->all_stations[index].haat,0); _delay_ms(250); string_write("\n");
    1d54:	83 ef       	ldi	r24, 0xF3	; 243
    1d56:	92 e0       	ldi	r25, 0x02	; 2
    1d58:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1d5c:	d8 01       	movw	r26, r16
    1d5e:	ed 91       	ld	r30, X+
    1d60:	fc 91       	ld	r31, X
    1d62:	ee 0d       	add	r30, r14
    1d64:	ff 1d       	adc	r31, r15
    1d66:	60 8d       	ldd	r22, Z+24	; 0x18
    1d68:	71 8d       	ldd	r23, Z+25	; 0x19
    1d6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d6c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1d76:	83 e2       	ldi	r24, 0x23	; 35
    1d78:	94 ef       	ldi	r25, 0xF4	; 244
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <print_station+0x17e>
    1d7e:	00 c0       	rjmp	.+0      	; 0x1d80 <print_station+0x184>
    1d80:	00 00       	nop
    1d82:	88 e4       	ldi	r24, 0x48	; 72
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE)
    1d8a:	88 85       	ldd	r24, Y+8	; 0x08
    1d8c:	99 85       	ldd	r25, Y+9	; 0x09
        return;
}
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	08 95       	ret

00001da0 <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ec 01       	movw	r28, r24
    1dae:	7b 01       	movw	r14, r22
    if (device->op_mode==MD_UPDATE) return;
    1db0:	88 85       	ldd	r24, Y+8	; 0x08
    1db2:	99 85       	ldd	r25, Y+9	; 0x09
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	b1 f1       	breq	.+108    	; 0x1e24 <print_all_known_stations+0x84>
    int i;
    lcd_init();
    1db8:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    1dbc:	63 e0       	ldi	r22, 0x03	; 3
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
    string_write(" known\nstations");
    1dca:	8a ec       	ldi	r24, 0xCA	; 202
    1dcc:	92 e0       	ldi	r25, 0x02	; 2
    1dce:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1dd2:	ff e7       	ldi	r31, 0x7F	; 127
    1dd4:	2a e1       	ldi	r18, 0x1A	; 26
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	f1 50       	subi	r31, 0x01	; 1
    1dda:	20 40       	sbci	r18, 0x00	; 0
    1ddc:	80 40       	sbci	r24, 0x00	; 0
    1dde:	e1 f7       	brne	.-8      	; 0x1dd8 <print_all_known_stations+0x38>
    1de0:	00 c0       	rjmp	.+0      	; 0x1de2 <print_all_known_stations+0x42>
    1de2:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    1de4:	00 e0       	ldi	r16, 0x00	; 0
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	f7 01       	movw	r30, r14
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	08 17       	cp	r16, r24
    1df0:	19 07       	cpc	r17, r25
    1df2:	c4 f4       	brge	.+48     	; 0x1e24 <print_all_known_stations+0x84>
    {
        if (device->op_mode==MD_UPDATE) return;
    1df4:	88 85       	ldd	r24, Y+8	; 0x08
    1df6:	99 85       	ldd	r25, Y+9	; 0x09
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	a1 f0       	breq	.+40     	; 0x1e24 <print_all_known_stations+0x84>

        lcd_init();
    1dfc:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
        print_station(device, fm_stations, i);
    1e00:	a8 01       	movw	r20, r16
    1e02:	b7 01       	movw	r22, r14
    1e04:	ce 01       	movw	r24, r28
    1e06:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <print_station>

        if (device->op_mode==MD_UPDATE) return;
    1e0a:	88 85       	ldd	r24, Y+8	; 0x08
    1e0c:	99 85       	ldd	r25, Y+9	; 0x09
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	49 f0       	breq	.+18     	; 0x1e24 <print_all_known_stations+0x84>
    1e12:	ef e4       	ldi	r30, 0x4F	; 79
    1e14:	f3 ec       	ldi	r31, 0xC3	; 195
    1e16:	31 97       	sbiw	r30, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <print_all_known_stations+0x76>
    1e1a:	00 c0       	rjmp	.+0      	; 0x1e1c <print_all_known_stations+0x7c>
    1e1c:	00 00       	nop
    string_write_int(fm_stations->num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    1e1e:	0f 5f       	subi	r16, 0xFF	; 255
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	e2 cf       	rjmp	.-60     	; 0x1de8 <print_all_known_stations+0x48>

        if (device->op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	08 95       	ret

00001e32 <show_nearest_station>:
        if (device->op_mode==MD_UPDATE) return;
    }
}

void show_nearest_station(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
{
    1e32:	af 92       	push	r10
    1e34:	bf 92       	push	r11
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	6c 01       	movw	r12, r24
    1e48:	eb 01       	movw	r28, r22
    1e4a:	5a 01       	movw	r10, r20
    if (device->op_mode==MD_UPDATE) return;
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	80 85       	ldd	r24, Z+8	; 0x08
    1e50:	91 85       	ldd	r25, Z+9	; 0x09
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <show_nearest_station+0x26>
    1e56:	5d c0       	rjmp	.+186    	; 0x1f12 <show_nearest_station+0xe0>
    lcd_init();
    1e58:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("Finding Nearest\nStation...");
    1e5c:	8a ef       	ldi	r24, 0xFA	; 250
    1e5e:	92 e0       	ldi	r25, 0x02	; 2
    1e60:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1e64:	ff e7       	ldi	r31, 0x7F	; 127
    1e66:	2a e1       	ldi	r18, 0x1A	; 26
    1e68:	86 e0       	ldi	r24, 0x06	; 6
    1e6a:	f1 50       	subi	r31, 0x01	; 1
    1e6c:	20 40       	sbci	r18, 0x00	; 0
    1e6e:	80 40       	sbci	r24, 0x00	; 0
    1e70:	e1 f7       	brne	.-8      	; 0x1e6a <show_nearest_station+0x38>
    1e72:	00 c0       	rjmp	.+0      	; 0x1e74 <show_nearest_station+0x42>
    1e74:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1e76:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    fm_stations->nearest_station = get_nearest_station(fm_stations->all_stations, fm_stations->num_stations, gps_data->lat, gps_data->lon);
    1e7a:	f5 01       	movw	r30, r10
    1e7c:	e5 88       	ldd	r14, Z+21	; 0x15
    1e7e:	f6 88       	ldd	r15, Z+22	; 0x16
    1e80:	07 89       	ldd	r16, Z+23	; 0x17
    1e82:	10 8d       	ldd	r17, Z+24	; 0x18
    1e84:	21 89       	ldd	r18, Z+17	; 0x11
    1e86:	32 89       	ldd	r19, Z+18	; 0x12
    1e88:	43 89       	ldd	r20, Z+19	; 0x13
    1e8a:	54 89       	ldd	r21, Z+20	; 0x14
    1e8c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e8e:	7b 81       	ldd	r23, Y+3	; 0x03
    1e90:	88 81       	ld	r24, Y
    1e92:	99 81       	ldd	r25, Y+1	; 0x01
    1e94:	0e 94 73 08 	call	0x10e6	; 0x10e6 <get_nearest_station>
    1e98:	9d 83       	std	Y+5, r25	; 0x05
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    print_callsign(fm_stations, fm_stations->nearest_station); string_write("\n");
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <print_callsign>
    1ea4:	88 e4       	ldi	r24, 0x48	; 72
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_station),1); string_write(" km");
    1eac:	4c 81       	ldd	r20, Y+4	; 0x04
    1eae:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb0:	68 81       	ld	r22, Y
    1eb2:	79 81       	ldd	r23, Y+1	; 0x01
    1eb4:	c5 01       	movw	r24, r10
    1eb6:	0e 94 03 09 	call	0x1206	; 0x1206 <my_distance_to_station>
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1ec2:	85 e1       	ldi	r24, 0x15	; 21
    1ec4:	93 e0       	ldi	r25, 0x03	; 3
    1ec6:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    if (device->op_mode==MD_UPDATE) return;
    1eca:	f6 01       	movw	r30, r12
    1ecc:	80 85       	ldd	r24, Z+8	; 0x08
    1ece:	91 85       	ldd	r25, Z+9	; 0x09
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f9 f0       	breq	.+62     	; 0x1f12 <show_nearest_station+0xe0>
    1ed4:	ff ef       	ldi	r31, 0xFF	; 255
    1ed6:	24 e3       	ldi	r18, 0x34	; 52
    1ed8:	8c e0       	ldi	r24, 0x0C	; 12
    1eda:	f1 50       	subi	r31, 0x01	; 1
    1edc:	20 40       	sbci	r18, 0x00	; 0
    1ede:	80 40       	sbci	r24, 0x00	; 0
    1ee0:	e1 f7       	brne	.-8      	; 0x1eda <show_nearest_station+0xa8>
    1ee2:	00 c0       	rjmp	.+0      	; 0x1ee4 <show_nearest_station+0xb2>
    1ee4:	00 00       	nop
    _delay_ms(4000);

    if (device->op_mode==MD_UPDATE) return;
    1ee6:	f6 01       	movw	r30, r12
    1ee8:	80 85       	ldd	r24, Z+8	; 0x08
    1eea:	91 85       	ldd	r25, Z+9	; 0x09
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	89 f0       	breq	.+34     	; 0x1f12 <show_nearest_station+0xe0>
    lcd_init();    
    1ef0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    print_station(device, fm_stations, fm_stations->nearest_station);
    1ef4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ef6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ef8:	be 01       	movw	r22, r28
    1efa:	c6 01       	movw	r24, r12
    1efc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <print_station>
    1f00:	ff e7       	ldi	r31, 0x7F	; 127
    1f02:	2a e1       	ldi	r18, 0x1A	; 26
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	f1 50       	subi	r31, 0x01	; 1
    1f08:	20 40       	sbci	r18, 0x00	; 0
    1f0a:	80 40       	sbci	r24, 0x00	; 0
    1f0c:	e1 f7       	brne	.-8      	; 0x1f06 <show_nearest_station+0xd4>
    1f0e:	00 c0       	rjmp	.+0      	; 0x1f10 <show_nearest_station+0xde>
    1f10:	00 00       	nop
    _delay_ms(2000);
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	08 95       	ret

00001f28 <test_earth_distance>:
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    }
}

void test_earth_distance(void)
{
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    lcd_init();
    1f38:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("Calculating\nEarth Distances");
    1f3c:	89 e1       	ldi	r24, 0x19	; 25
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1f44:	2f e7       	ldi	r18, 0x7F	; 127
    1f46:	8a e1       	ldi	r24, 0x1A	; 26
    1f48:	96 e0       	ldi	r25, 0x06	; 6
    1f4a:	21 50       	subi	r18, 0x01	; 1
    1f4c:	80 40       	sbci	r24, 0x00	; 0
    1f4e:	90 40       	sbci	r25, 0x00	; 0
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <test_earth_distance+0x22>
    1f52:	00 c0       	rjmp	.+0      	; 0x1f54 <test_earth_distance+0x2c>
    1f54:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1f56:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("Denver -> NYC:\n");
    1f5a:	85 e3       	ldi	r24, 0x35	; 53
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
    1f5e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    1f62:	a1 2c       	mov	r10, r1
    1f64:	b1 2c       	mov	r11, r1
    1f66:	70 ed       	ldi	r23, 0xD0	; 208
    1f68:	c7 2e       	mov	r12, r23
    1f6a:	72 ec       	ldi	r23, 0xC2	; 194
    1f6c:	d7 2e       	mov	r13, r23
    1f6e:	e1 2c       	mov	r14, r1
    1f70:	f1 2c       	mov	r15, r1
    1f72:	0c e1       	ldi	r16, 0x1C	; 28
    1f74:	12 e4       	ldi	r17, 0x42	; 66
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	44 e9       	ldi	r20, 0x94	; 148
    1f7c:	52 ec       	ldi	r21, 0xC2	; 194
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e2       	ldi	r24, 0x20	; 32
    1f84:	92 e4       	ldi	r25, 0x42	; 66
    1f86:	0e 94 92 07 	call	0xf24	; 0xf24 <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1f92:	85 e1       	ldi	r24, 0x15	; 21
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1f9a:	2f e1       	ldi	r18, 0x1F	; 31
    1f9c:	81 ea       	ldi	r24, 0xA1	; 161
    1f9e:	97 e0       	ldi	r25, 0x07	; 7
    1fa0:	21 50       	subi	r18, 0x01	; 1
    1fa2:	80 40       	sbci	r24, 0x00	; 0
    1fa4:	90 40       	sbci	r25, 0x00	; 0
    1fa6:	e1 f7       	brne	.-8      	; 0x1fa0 <test_earth_distance+0x78>
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <test_earth_distance+0x82>
    1faa:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    1fac:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("North KC -> KC:\n");
    1fb0:	85 e4       	ldi	r24, 0x45	; 69
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    1fb8:	f5 e3       	ldi	r31, 0x35	; 53
    1fba:	af 2e       	mov	r10, r31
    1fbc:	fe e1       	ldi	r31, 0x1E	; 30
    1fbe:	bf 2e       	mov	r11, r31
    1fc0:	fd eb       	ldi	r31, 0xBD	; 189
    1fc2:	cf 2e       	mov	r12, r31
    1fc4:	f2 ec       	ldi	r31, 0xC2	; 194
    1fc6:	df 2e       	mov	r13, r31
    1fc8:	12 e3       	ldi	r17, 0x32	; 50
    1fca:	e1 2e       	mov	r14, r17
    1fcc:	15 e5       	ldi	r17, 0x55	; 85
    1fce:	f1 2e       	mov	r15, r17
    1fd0:	0c e1       	ldi	r16, 0x1C	; 28
    1fd2:	12 e4       	ldi	r17, 0x42	; 66
    1fd4:	22 e4       	ldi	r18, 0x42	; 66
    1fd6:	30 e2       	ldi	r19, 0x20	; 32
    1fd8:	4d eb       	ldi	r20, 0xBD	; 189
    1fda:	52 ec       	ldi	r21, 0xC2	; 194
    1fdc:	65 e2       	ldi	r22, 0x25	; 37
    1fde:	76 e8       	ldi	r23, 0x86	; 134
    1fe0:	8c e1       	ldi	r24, 0x1C	; 28
    1fe2:	92 e4       	ldi	r25, 0x42	; 66
    1fe4:	0e 94 92 07 	call	0xf24	; 0xf24 <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    1ff0:	85 e1       	ldi	r24, 0x15	; 21
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    1ff8:	2f e1       	ldi	r18, 0x1F	; 31
    1ffa:	81 ea       	ldi	r24, 0xA1	; 161
    1ffc:	97 e0       	ldi	r25, 0x07	; 7
    1ffe:	21 50       	subi	r18, 0x01	; 1
    2000:	80 40       	sbci	r24, 0x00	; 0
    2002:	90 40       	sbci	r25, 0x00	; 0
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <test_earth_distance+0xd6>
    2006:	00 c0       	rjmp	.+0      	; 0x2008 <test_earth_distance+0xe0>
    2008:	00 00       	nop
    _delay_ms(2500);

    //just for reference, UMaine coords are: 44.900 -68.667
}
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	df 90       	pop	r13
    2014:	cf 90       	pop	r12
    2016:	bf 90       	pop	r11
    2018:	af 90       	pop	r10
    201a:	08 95       	ret

0000201c <wait_for_gps_lock>:

void wait_for_gps_lock(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
    2026:	8b 01       	movw	r16, r22
    lcd_init();
    2028:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    string_write("Waiting For\nGPS Lock...");
    202c:	86 e5       	ldi	r24, 0x56	; 86
    202e:	93 e0       	ldi	r25, 0x03	; 3
    2030:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2034:	2f e3       	ldi	r18, 0x3F	; 63
    2036:	8d e0       	ldi	r24, 0x0D	; 13
    2038:	93 e0       	ldi	r25, 0x03	; 3
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	90 40       	sbci	r25, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <wait_for_gps_lock+0x1e>
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <wait_for_gps_lock+0x28>
    2044:	00 00       	nop
    _delay_ms(1000);
    while (!(gps_locked(gps_data)))
    2046:	c8 01       	movw	r24, r16
    2048:	0e 94 3d 09 	call	0x127a	; 0x127a <gps_locked>
    204c:	89 2b       	or	r24, r25
    204e:	79 f4       	brne	.+30     	; 0x206e <wait_for_gps_lock+0x52>
    {
        lcd_init();
    2050:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
        print_gps_data(device, gps_data);
    2054:	b8 01       	movw	r22, r16
    2056:	ce 01       	movw	r24, r28
    2058:	0e 94 0a 0c 	call	0x1814	; 0x1814 <print_gps_data>
        if (device->op_mode==MD_UPDATE) return;
    205c:	88 85       	ldd	r24, Y+8	; 0x08
    205e:	99 85       	ldd	r25, Y+9	; 0x09
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	79 f0       	breq	.+30     	; 0x2082 <wait_for_gps_lock+0x66>
    2064:	83 e2       	ldi	r24, 0x23	; 35
    2066:	94 ef       	ldi	r25, 0xF4	; 244
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <wait_for_gps_lock+0x4c>
    206c:	ea cf       	rjmp	.-44     	; 0x2042 <wait_for_gps_lock+0x26>
        _delay_ms(250);
    }
    lcd_init();
    206e:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    print_gps_data(device, gps_data);
    2072:	b8 01       	movw	r22, r16
    2074:	ce 01       	movw	r24, r28
}
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
        print_gps_data(device, gps_data);
        if (device->op_mode==MD_UPDATE) return;
        _delay_ms(250);
    }
    lcd_init();
    print_gps_data(device, gps_data);
    207e:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <print_gps_data>
}
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	08 95       	ret

0000208c <check_database_integrity>:
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	8c 01       	movw	r16, r24
    209a:	dc 01       	movw	r26, r24
    209c:	12 96       	adiw	r26, 0x02	; 2
    209e:	6d 91       	ld	r22, X+
    20a0:	7c 91       	ld	r23, X
    20a2:	13 97       	sbiw	r26, 0x03	; 3
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	c0 e0       	ldi	r28, 0x00	; 0
    20aa:	d0 e0       	ldi	r29, 0x00	; 0
    20ac:	c6 17       	cp	r28, r22
    20ae:	d7 07       	cpc	r29, r23
    20b0:	0c f0       	brlt	.+2      	; 0x20b4 <check_database_integrity+0x28>
    20b2:	72 c0       	rjmp	.+228    	; 0x2198 <check_database_integrity+0x10c>
    20b4:	f8 01       	movw	r30, r16
    20b6:	20 81       	ld	r18, Z
    20b8:	31 81       	ldd	r19, Z+1	; 0x01
    20ba:	28 0f       	add	r18, r24
    20bc:	39 1f       	adc	r19, r25
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	79 01       	movw	r14, r18
    20c4:	2f 5f       	subi	r18, 0xFF	; 255
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	d7 01       	movw	r26, r14
    20ca:	ec 91       	ld	r30, X
    20cc:	e0 52       	subi	r30, 0x20	; 32
    20ce:	ef 35       	cpi	r30, 0x5F	; 95
    20d0:	08 f4       	brcc	.+2      	; 0x20d4 <check_database_integrity+0x48>
    20d2:	59 c0       	rjmp	.+178    	; 0x2186 <check_database_integrity+0xfa>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	f8 01       	movw	r30, r16
    20da:	97 83       	std	Z+7, r25	; 0x07
    20dc:	86 83       	std	Z+6, r24	; 0x06
    20de:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    20e2:	8e e6       	ldi	r24, 0x6E	; 110
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    20e6:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    20ea:	ff e7       	ldi	r31, 0x7F	; 127
    20ec:	2a e1       	ldi	r18, 0x1A	; 26
    20ee:	86 e0       	ldi	r24, 0x06	; 6
    20f0:	f1 50       	subi	r31, 0x01	; 1
    20f2:	20 40       	sbci	r18, 0x00	; 0
    20f4:	80 40       	sbci	r24, 0x00	; 0
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <check_database_integrity+0x64>
    20f8:	00 c0       	rjmp	.+0      	; 0x20fa <check_database_integrity+0x6e>
    20fa:	00 00       	nop
    20fc:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    2100:	82 e8       	ldi	r24, 0x82	; 130
    2102:	93 e0       	ldi	r25, 0x03	; 3
    2104:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2108:	9f e9       	ldi	r25, 0x9F	; 159
    210a:	a6 e8       	ldi	r26, 0x86	; 134
    210c:	b1 e0       	ldi	r27, 0x01	; 1
    210e:	91 50       	subi	r25, 0x01	; 1
    2110:	a0 40       	sbci	r26, 0x00	; 0
    2112:	b0 40       	sbci	r27, 0x00	; 0
    2114:	e1 f7       	brne	.-8      	; 0x210e <check_database_integrity+0x82>
    2116:	00 c0       	rjmp	.+0      	; 0x2118 <check_database_integrity+0x8c>
    2118:	00 00       	nop
    211a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    211e:	88 e9       	ldi	r24, 0x98	; 152
    2120:	93 e0       	ldi	r25, 0x03	; 3
    2122:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	0e 94 28 04 	call	0x850	; 0x850 <string_write_int>
    2132:	82 ea       	ldi	r24, 0xA2	; 162
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    213a:	87 e2       	ldi	r24, 0x27	; 39
    213c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    2140:	f7 01       	movw	r30, r14
    2142:	80 81       	ld	r24, Z
    2144:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    2148:	87 e2       	ldi	r24, 0x27	; 39
    214a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    214e:	8a e0       	ldi	r24, 0x0A	; 10
    2150:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <char_write>
    2154:	ff e7       	ldi	r31, 0x7F	; 127
    2156:	2a e1       	ldi	r18, 0x1A	; 26
    2158:	86 e0       	ldi	r24, 0x06	; 6
    215a:	f1 50       	subi	r31, 0x01	; 1
    215c:	20 40       	sbci	r18, 0x00	; 0
    215e:	80 40       	sbci	r24, 0x00	; 0
    2160:	e1 f7       	brne	.-8      	; 0x215a <check_database_integrity+0xce>
    2162:	00 c0       	rjmp	.+0      	; 0x2164 <check_database_integrity+0xd8>
    2164:	00 00       	nop
    2166:	be 01       	movw	r22, r28
    2168:	c8 01       	movw	r24, r16
    216a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <print_callsign>
    216e:	9f ef       	ldi	r25, 0xFF	; 255
    2170:	a4 e3       	ldi	r26, 0x34	; 52
    2172:	bc e0       	ldi	r27, 0x0C	; 12
    2174:	91 50       	subi	r25, 0x01	; 1
    2176:	a0 40       	sbci	r26, 0x00	; 0
    2178:	b0 40       	sbci	r27, 0x00	; 0
    217a:	e1 f7       	brne	.-8      	; 0x2174 <check_database_integrity+0xe8>
    217c:	00 c0       	rjmp	.+0      	; 0x217e <check_database_integrity+0xf2>
    217e:	00 00       	nop
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0b c0       	rjmp	.+22     	; 0x219c <check_database_integrity+0x110>
    2186:	4f 5f       	subi	r20, 0xFF	; 255
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	48 30       	cpi	r20, 0x08	; 8
    218c:	51 05       	cpc	r21, r1
    218e:	09 f0       	breq	.+2      	; 0x2192 <check_database_integrity+0x106>
    2190:	98 cf       	rjmp	.-208    	; 0x20c2 <check_database_integrity+0x36>
    2192:	21 96       	adiw	r28, 0x01	; 1
    2194:	4c 96       	adiw	r24, 0x1c	; 28
    2196:	8a cf       	rjmp	.-236    	; 0x20ac <check_database_integrity+0x20>
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	08 95       	ret

000021aa <main>:
    21aa:	af 92       	push	r10
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	1f 92       	push	r1
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	80 91 aa 03 	lds	r24, 0x03AA
    21c8:	90 91 ab 03 	lds	r25, 0x03AB
    21cc:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <prepare_device>
    21d0:	89 2b       	or	r24, r25
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <main+0x2c>
    21d4:	89 c1       	rjmp	.+786    	; 0x24e8 <main+0x33e>
    21d6:	85 e3       	ldi	r24, 0x35	; 53
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <malloc>
    21de:	7c 01       	movw	r14, r24
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	39 f4       	brne	.+14     	; 0x21f2 <main+0x48>
    21e4:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    21e8:	8f e0       	ldi	r24, 0x0F	; 15
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    21f0:	7b c1       	rjmp	.+758    	; 0x24e8 <main+0x33e>
    21f2:	88 e0       	ldi	r24, 0x08	; 8
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <malloc>
    21fa:	5c 01       	movw	r10, r24
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	91 f3       	breq	.-28     	; 0x21e4 <main+0x3a>
    2200:	8a e1       	ldi	r24, 0x1A	; 26
    2202:	91 e0       	ldi	r25, 0x01	; 1
    2204:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2208:	c5 01       	movw	r24, r10
    220a:	0e 94 82 09 	call	0x1304	; 0x1304 <database_load>
    220e:	2f e3       	ldi	r18, 0x3F	; 63
    2210:	8d e0       	ldi	r24, 0x0D	; 13
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	21 50       	subi	r18, 0x01	; 1
    2216:	80 40       	sbci	r24, 0x00	; 0
    2218:	90 40       	sbci	r25, 0x00	; 0
    221a:	e1 f7       	brne	.-8      	; 0x2214 <main+0x6a>
    221c:	00 c0       	rjmp	.+0      	; 0x221e <main+0x74>
    221e:	00 00       	nop
    2220:	82 e0       	ldi	r24, 0x02	; 2
    2222:	c8 2e       	mov	r12, r24
    2224:	d1 2c       	mov	r13, r1
    2226:	80 91 aa 03 	lds	r24, 0x03AA
    222a:	90 91 ab 03 	lds	r25, 0x03AB
    222e:	dc 01       	movw	r26, r24
    2230:	18 96       	adiw	r26, 0x08	; 8
    2232:	0d 91       	ld	r16, X+
    2234:	1c 91       	ld	r17, X
    2236:	19 97       	sbiw	r26, 0x09	; 9
    2238:	01 30       	cpi	r16, 0x01	; 1
    223a:	11 05       	cpc	r17, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <main+0x96>
    223e:	a4 c0       	rjmp	.+328    	; 0x2388 <main+0x1de>
    2240:	02 30       	cpi	r16, 0x02	; 2
    2242:	11 05       	cpc	r17, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <main+0x9e>
    2246:	9d c0       	rjmp	.+314    	; 0x2382 <main+0x1d8>
    2248:	01 2b       	or	r16, r17
    224a:	89 f7       	brne	.-30     	; 0x222e <main+0x84>
    224c:	f5 01       	movw	r30, r10
    224e:	22 81       	ldd	r18, Z+2	; 0x02
    2250:	33 81       	ldd	r19, Z+3	; 0x03
    2252:	12 16       	cp	r1, r18
    2254:	13 06       	cpc	r1, r19
    2256:	2c f0       	brlt	.+10     	; 0x2262 <main+0xb8>
    2258:	19 96       	adiw	r26, 0x09	; 9
    225a:	dc 92       	st	X, r13
    225c:	ce 92       	st	-X, r12
    225e:	18 97       	sbiw	r26, 0x08	; 8
    2260:	e2 cf       	rjmp	.-60     	; 0x2226 <main+0x7c>
    2262:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <enable_gps>
    2266:	b5 01       	movw	r22, r10
    2268:	80 91 aa 03 	lds	r24, 0x03AA
    226c:	90 91 ab 03 	lds	r25, 0x03AB
    2270:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <print_all_callsigns>
    2274:	80 91 aa 03 	lds	r24, 0x03AA
    2278:	90 91 ab 03 	lds	r25, 0x03AB
    227c:	fc 01       	movw	r30, r24
    227e:	e3 50       	subi	r30, 0x03	; 3
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	20 81       	ld	r18, Z
    2284:	31 81       	ldd	r19, Z+1	; 0x01
    2286:	23 2b       	or	r18, r19
    2288:	69 f0       	breq	.+26     	; 0x22a4 <main+0xfa>
    228a:	b7 01       	movw	r22, r14
    228c:	8d 51       	subi	r24, 0x1D	; 29
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	0e 94 74 06 	call	0xce8	; 0xce8 <update_user_gps_data>
    2294:	e0 91 aa 03 	lds	r30, 0x03AA
    2298:	f0 91 ab 03 	lds	r31, 0x03AB
    229c:	e3 50       	subi	r30, 0x03	; 3
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	11 82       	std	Z+1, r1	; 0x01
    22a2:	10 82       	st	Z, r1
    22a4:	c7 01       	movw	r24, r14
    22a6:	0e 94 3d 09 	call	0x127a	; 0x127a <gps_locked>
    22aa:	89 2b       	or	r24, r25
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <main+0x106>
    22ae:	4e c0       	rjmp	.+156    	; 0x234c <main+0x1a2>
    22b0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    22b4:	8e e2       	ldi	r24, 0x2E	; 46
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    22bc:	ff e9       	ldi	r31, 0x9F	; 159
    22be:	26 e8       	ldi	r18, 0x86	; 134
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	f1 50       	subi	r31, 0x01	; 1
    22c4:	20 40       	sbci	r18, 0x00	; 0
    22c6:	80 40       	sbci	r24, 0x00	; 0
    22c8:	e1 f7       	brne	.-8      	; 0x22c2 <main+0x118>
    22ca:	00 c0       	rjmp	.+0      	; 0x22cc <main+0x122>
    22cc:	00 00       	nop
    22ce:	d7 01       	movw	r26, r14
    22d0:	51 96       	adiw	r26, 0x11	; 17
    22d2:	6d 91       	ld	r22, X+
    22d4:	7d 91       	ld	r23, X+
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	54 97       	sbiw	r26, 0x14	; 20
    22dc:	43 e0       	ldi	r20, 0x03	; 3
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    22e4:	e3 e2       	ldi	r30, 0x23	; 35
    22e6:	f4 ef       	ldi	r31, 0xF4	; 244
    22e8:	31 97       	sbiw	r30, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <main+0x13e>
    22ec:	00 c0       	rjmp	.+0      	; 0x22ee <main+0x144>
    22ee:	00 00       	nop
    22f0:	88 e3       	ldi	r24, 0x38	; 56
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    22f8:	83 e2       	ldi	r24, 0x23	; 35
    22fa:	94 ef       	ldi	r25, 0xF4	; 244
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <main+0x152>
    2300:	00 c0       	rjmp	.+0      	; 0x2302 <main+0x158>
    2302:	00 00       	nop
    2304:	d7 01       	movw	r26, r14
    2306:	55 96       	adiw	r26, 0x15	; 21
    2308:	6d 91       	ld	r22, X+
    230a:	7d 91       	ld	r23, X+
    230c:	8d 91       	ld	r24, X+
    230e:	9c 91       	ld	r25, X
    2310:	58 97       	sbiw	r26, 0x18	; 24
    2312:	43 e0       	ldi	r20, 0x03	; 3
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	0e 94 58 04 	call	0x8b0	; 0x8b0 <string_write_float>
    231a:	bf eb       	ldi	r27, 0xBF	; 191
    231c:	e7 e2       	ldi	r30, 0x27	; 39
    231e:	f9 e0       	ldi	r31, 0x09	; 9
    2320:	b1 50       	subi	r27, 0x01	; 1
    2322:	e0 40       	sbci	r30, 0x00	; 0
    2324:	f0 40       	sbci	r31, 0x00	; 0
    2326:	e1 f7       	brne	.-8      	; 0x2320 <main+0x176>
    2328:	00 c0       	rjmp	.+0      	; 0x232a <main+0x180>
    232a:	00 00       	nop
    232c:	a7 01       	movw	r20, r14
    232e:	b5 01       	movw	r22, r10
    2330:	80 91 aa 03 	lds	r24, 0x03AA
    2334:	90 91 ab 03 	lds	r25, 0x03AB
    2338:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <show_nearest_station>
    233c:	b7 01       	movw	r22, r14
    233e:	80 91 aa 03 	lds	r24, 0x03AA
    2342:	90 91 ab 03 	lds	r25, 0x03AB
    2346:	0e 94 0a 0c 	call	0x1814	; 0x1814 <print_gps_data>
    234a:	13 c0       	rjmp	.+38     	; 0x2372 <main+0x1c8>
    234c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    2350:	8b e3       	ldi	r24, 0x3B	; 59
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2358:	8a e4       	ldi	r24, 0x4A	; 74
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2360:	2f e7       	ldi	r18, 0x7F	; 127
    2362:	8a e1       	ldi	r24, 0x1A	; 26
    2364:	96 e0       	ldi	r25, 0x06	; 6
    2366:	21 50       	subi	r18, 0x01	; 1
    2368:	80 40       	sbci	r24, 0x00	; 0
    236a:	90 40       	sbci	r25, 0x00	; 0
    236c:	e1 f7       	brne	.-8      	; 0x2366 <main+0x1bc>
    236e:	00 c0       	rjmp	.+0      	; 0x2370 <main+0x1c6>
    2370:	00 00       	nop
    2372:	b5 01       	movw	r22, r10
    2374:	80 91 aa 03 	lds	r24, 0x03AA
    2378:	90 91 ab 03 	lds	r25, 0x03AB
    237c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <print_all_known_stations>
    2380:	52 cf       	rjmp	.-348    	; 0x2226 <main+0x7c>
    2382:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <wait_for_update>
    2386:	4f cf       	rjmp	.-354    	; 0x2226 <main+0x7c>
    2388:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <disable_gps>
    238c:	e0 91 aa 03 	lds	r30, 0x03AA
    2390:	f0 91 ab 03 	lds	r31, 0x03AB
    2394:	84 81       	ldd	r24, Z+4	; 0x04
    2396:	95 81       	ldd	r25, Z+5	; 0x05
    2398:	89 2b       	or	r24, r25
    239a:	b1 f4       	brne	.+44     	; 0x23c8 <main+0x21e>
    239c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    23a0:	88 e5       	ldi	r24, 0x58	; 88
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    23a8:	e0 91 aa 03 	lds	r30, 0x03AA
    23ac:	f0 91 ab 03 	lds	r31, 0x03AB
    23b0:	15 83       	std	Z+5, r17	; 0x05
    23b2:	04 83       	std	Z+4, r16	; 0x04
    23b4:	d5 01       	movw	r26, r10
    23b6:	17 96       	adiw	r26, 0x07	; 7
    23b8:	1c 92       	st	X, r1
    23ba:	1e 92       	st	-X, r1
    23bc:	16 97       	sbiw	r26, 0x06	; 6
    23be:	17 82       	std	Z+7, r1	; 0x07
    23c0:	16 82       	std	Z+6, r1	; 0x06
    23c2:	c5 01       	movw	r24, r10
    23c4:	0e 94 27 0a 	call	0x144e	; 0x144e <database_free>
    23c8:	00 91 aa 03 	lds	r16, 0x03AA
    23cc:	10 91 ab 03 	lds	r17, 0x03AB
    23d0:	f8 01       	movw	r30, r16
    23d2:	e4 57       	subi	r30, 0x74	; 116
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	90 81       	ld	r25, Z
    23d8:	f8 01       	movw	r30, r16
    23da:	e3 57       	subi	r30, 0x73	; 115
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	98 17       	cp	r25, r24
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <main+0x23c>
    23e4:	46 c0       	rjmp	.+140    	; 0x2472 <main+0x2c8>
    23e6:	f8 01       	movw	r30, r16
    23e8:	10 82       	st	Z, r1
    23ea:	11 82       	std	Z+1, r1	; 0x01
    23ec:	12 82       	std	Z+2, r1	; 0x02
    23ee:	13 82       	std	Z+3, r1	; 0x03
    23f0:	c8 01       	movw	r24, r16
    23f2:	0e 94 2e 0b 	call	0x165c	; 0x165c <getChar>
    23f6:	68 2f       	mov	r22, r24
    23f8:	80 91 aa 03 	lds	r24, 0x03AA
    23fc:	90 91 ab 03 	lds	r25, 0x03AB
    2400:	69 83       	std	Y+1, r22	; 0x01
    2402:	0e 94 11 0b 	call	0x1622	; 0x1622 <detectSerialEnd>
    2406:	e0 91 aa 03 	lds	r30, 0x03AA
    240a:	f0 91 ab 03 	lds	r31, 0x03AB
    240e:	69 81       	ldd	r22, Y+1	; 0x01
    2410:	89 2b       	or	r24, r25
    2412:	09 f1       	breq	.+66     	; 0x2456 <main+0x2ac>
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	b5 01       	movw	r22, r10
    241a:	cf 01       	movw	r24, r30
    241c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <terminate_serial>
    2420:	c5 01       	movw	r24, r10
    2422:	0e 94 46 10 	call	0x208c	; 0x208c <check_database_integrity>
    2426:	d5 01       	movw	r26, r10
    2428:	16 96       	adiw	r26, 0x06	; 6
    242a:	8d 91       	ld	r24, X+
    242c:	9c 91       	ld	r25, X
    242e:	17 97       	sbiw	r26, 0x07	; 7
    2430:	89 2b       	or	r24, r25
    2432:	09 f0       	breq	.+2      	; 0x2436 <main+0x28c>
    2434:	4c c0       	rjmp	.+152    	; 0x24ce <main+0x324>
    2436:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_init>
    243a:	81 e7       	ldi	r24, 0x71	; 113
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	0e 94 06 04 	call	0x80c	; 0x80c <string_write>
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	ed e0       	ldi	r30, 0x0D	; 13
    2446:	f3 e0       	ldi	r31, 0x03	; 3
    2448:	b1 50       	subi	r27, 0x01	; 1
    244a:	e0 40       	sbci	r30, 0x00	; 0
    244c:	f0 40       	sbci	r31, 0x00	; 0
    244e:	e1 f7       	brne	.-8      	; 0x2448 <main+0x29e>
    2450:	00 c0       	rjmp	.+0      	; 0x2452 <main+0x2a8>
    2452:	00 00       	nop
    2454:	e8 ce       	rjmp	.-560    	; 0x2226 <main+0x7c>
    2456:	86 81       	ldd	r24, Z+6	; 0x06
    2458:	97 81       	ldd	r25, Z+7	; 0x07
    245a:	0e 94 ad 1c 	call	0x395a	; 0x395a <__eewr_byte_m1284p>
    245e:	e0 91 aa 03 	lds	r30, 0x03AA
    2462:	f0 91 ab 03 	lds	r31, 0x03AB
    2466:	86 81       	ldd	r24, Z+6	; 0x06
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	97 83       	std	Z+7, r25	; 0x07
    246e:	86 83       	std	Z+6, r24	; 0x06
    2470:	da ce       	rjmp	.-588    	; 0x2226 <main+0x7c>
    2472:	d8 01       	movw	r26, r16
    2474:	6d 91       	ld	r22, X+
    2476:	7d 91       	ld	r23, X+
    2478:	8d 91       	ld	r24, X+
    247a:	9c 91       	ld	r25, X
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    2488:	f8 01       	movw	r30, r16
    248a:	60 83       	st	Z, r22
    248c:	71 83       	std	Z+1, r23	; 0x01
    248e:	82 83       	std	Z+2, r24	; 0x02
    2490:	93 83       	std	Z+3, r25	; 0x03
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e5       	ldi	r19, 0x50	; 80
    249e:	43 e4       	ldi	r20, 0x43	; 67
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__gesf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	0c f0       	brlt	.+2      	; 0x24ac <main+0x302>
    24aa:	bd ce       	rjmp	.-646    	; 0x2226 <main+0x7c>
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	b5 01       	movw	r22, r10
    24b2:	c8 01       	movw	r24, r16
    24b4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <terminate_serial>
    24b8:	20 e2       	ldi	r18, 0x20	; 32
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	b5 01       	movw	r22, r10
    24c2:	80 91 aa 03 	lds	r24, 0x03AA
    24c6:	90 91 ab 03 	lds	r25, 0x03AB
    24ca:	0e 94 8c 0b 	call	0x1718	; 0x1718 <print_eeprom_contents>
    24ce:	80 91 aa 03 	lds	r24, 0x03AA
    24d2:	90 91 ab 03 	lds	r25, 0x03AB
    24d6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <wipe_eeprom>
    24da:	e0 91 aa 03 	lds	r30, 0x03AA
    24de:	f0 91 ab 03 	lds	r31, 0x03AB
    24e2:	d1 86       	std	Z+9, r13	; 0x09
    24e4:	c0 86       	std	Z+8, r12	; 0x08
    24e6:	9f ce       	rjmp	.-706    	; 0x2226 <main+0x7c>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0f 90       	pop	r0
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	df 90       	pop	r13
    24fc:	cf 90       	pop	r12
    24fe:	bf 90       	pop	r11
    2500:	af 90       	pop	r10
    2502:	08 95       	ret

00002504 <__subsf3>:
    2504:	50 58       	subi	r21, 0x80	; 128

00002506 <__addsf3>:
    2506:	bb 27       	eor	r27, r27
    2508:	aa 27       	eor	r26, r26
    250a:	0e d0       	rcall	.+28     	; 0x2528 <__addsf3x>
    250c:	63 c2       	rjmp	.+1222   	; 0x29d4 <__fp_round>
    250e:	2c d2       	rcall	.+1112   	; 0x2968 <__fp_pscA>
    2510:	30 f0       	brcs	.+12     	; 0x251e <__addsf3+0x18>
    2512:	31 d2       	rcall	.+1122   	; 0x2976 <__fp_pscB>
    2514:	20 f0       	brcs	.+8      	; 0x251e <__addsf3+0x18>
    2516:	31 f4       	brne	.+12     	; 0x2524 <__addsf3+0x1e>
    2518:	9f 3f       	cpi	r25, 0xFF	; 255
    251a:	11 f4       	brne	.+4      	; 0x2520 <__addsf3+0x1a>
    251c:	1e f4       	brtc	.+6      	; 0x2524 <__addsf3+0x1e>
    251e:	fc c1       	rjmp	.+1016   	; 0x2918 <__fp_nan>
    2520:	0e f4       	brtc	.+2      	; 0x2524 <__addsf3+0x1e>
    2522:	e0 95       	com	r30
    2524:	e7 fb       	bst	r30, 7
    2526:	c9 c1       	rjmp	.+914    	; 0x28ba <__fp_inf>

00002528 <__addsf3x>:
    2528:	e9 2f       	mov	r30, r25
    252a:	76 d2       	rcall	.+1260   	; 0x2a18 <__fp_split3>
    252c:	80 f3       	brcs	.-32     	; 0x250e <__addsf3+0x8>
    252e:	ba 17       	cp	r27, r26
    2530:	62 07       	cpc	r22, r18
    2532:	73 07       	cpc	r23, r19
    2534:	84 07       	cpc	r24, r20
    2536:	95 07       	cpc	r25, r21
    2538:	18 f0       	brcs	.+6      	; 0x2540 <__addsf3x+0x18>
    253a:	71 f4       	brne	.+28     	; 0x2558 <__addsf3x+0x30>
    253c:	9e f5       	brtc	.+102    	; 0x25a4 <__addsf3x+0x7c>
    253e:	a5 c2       	rjmp	.+1354   	; 0x2a8a <__fp_zero>
    2540:	0e f4       	brtc	.+2      	; 0x2544 <__addsf3x+0x1c>
    2542:	e0 95       	com	r30
    2544:	0b 2e       	mov	r0, r27
    2546:	ba 2f       	mov	r27, r26
    2548:	a0 2d       	mov	r26, r0
    254a:	0b 01       	movw	r0, r22
    254c:	b9 01       	movw	r22, r18
    254e:	90 01       	movw	r18, r0
    2550:	0c 01       	movw	r0, r24
    2552:	ca 01       	movw	r24, r20
    2554:	a0 01       	movw	r20, r0
    2556:	11 24       	eor	r1, r1
    2558:	ff 27       	eor	r31, r31
    255a:	59 1b       	sub	r21, r25
    255c:	99 f0       	breq	.+38     	; 0x2584 <__addsf3x+0x5c>
    255e:	59 3f       	cpi	r21, 0xF9	; 249
    2560:	50 f4       	brcc	.+20     	; 0x2576 <__addsf3x+0x4e>
    2562:	50 3e       	cpi	r21, 0xE0	; 224
    2564:	68 f1       	brcs	.+90     	; 0x25c0 <__addsf3x+0x98>
    2566:	1a 16       	cp	r1, r26
    2568:	f0 40       	sbci	r31, 0x00	; 0
    256a:	a2 2f       	mov	r26, r18
    256c:	23 2f       	mov	r18, r19
    256e:	34 2f       	mov	r19, r20
    2570:	44 27       	eor	r20, r20
    2572:	58 5f       	subi	r21, 0xF8	; 248
    2574:	f3 cf       	rjmp	.-26     	; 0x255c <__addsf3x+0x34>
    2576:	46 95       	lsr	r20
    2578:	37 95       	ror	r19
    257a:	27 95       	ror	r18
    257c:	a7 95       	ror	r26
    257e:	f0 40       	sbci	r31, 0x00	; 0
    2580:	53 95       	inc	r21
    2582:	c9 f7       	brne	.-14     	; 0x2576 <__addsf3x+0x4e>
    2584:	7e f4       	brtc	.+30     	; 0x25a4 <__addsf3x+0x7c>
    2586:	1f 16       	cp	r1, r31
    2588:	ba 0b       	sbc	r27, r26
    258a:	62 0b       	sbc	r22, r18
    258c:	73 0b       	sbc	r23, r19
    258e:	84 0b       	sbc	r24, r20
    2590:	ba f0       	brmi	.+46     	; 0x25c0 <__addsf3x+0x98>
    2592:	91 50       	subi	r25, 0x01	; 1
    2594:	a1 f0       	breq	.+40     	; 0x25be <__addsf3x+0x96>
    2596:	ff 0f       	add	r31, r31
    2598:	bb 1f       	adc	r27, r27
    259a:	66 1f       	adc	r22, r22
    259c:	77 1f       	adc	r23, r23
    259e:	88 1f       	adc	r24, r24
    25a0:	c2 f7       	brpl	.-16     	; 0x2592 <__addsf3x+0x6a>
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <__addsf3x+0x98>
    25a4:	ba 0f       	add	r27, r26
    25a6:	62 1f       	adc	r22, r18
    25a8:	73 1f       	adc	r23, r19
    25aa:	84 1f       	adc	r24, r20
    25ac:	48 f4       	brcc	.+18     	; 0x25c0 <__addsf3x+0x98>
    25ae:	87 95       	ror	r24
    25b0:	77 95       	ror	r23
    25b2:	67 95       	ror	r22
    25b4:	b7 95       	ror	r27
    25b6:	f7 95       	ror	r31
    25b8:	9e 3f       	cpi	r25, 0xFE	; 254
    25ba:	08 f0       	brcs	.+2      	; 0x25be <__addsf3x+0x96>
    25bc:	b3 cf       	rjmp	.-154    	; 0x2524 <__addsf3+0x1e>
    25be:	93 95       	inc	r25
    25c0:	88 0f       	add	r24, r24
    25c2:	08 f0       	brcs	.+2      	; 0x25c6 <__addsf3x+0x9e>
    25c4:	99 27       	eor	r25, r25
    25c6:	ee 0f       	add	r30, r30
    25c8:	97 95       	ror	r25
    25ca:	87 95       	ror	r24
    25cc:	08 95       	ret
    25ce:	cc d1       	rcall	.+920    	; 0x2968 <__fp_pscA>
    25d0:	58 f0       	brcs	.+22     	; 0x25e8 <__addsf3x+0xc0>
    25d2:	80 e8       	ldi	r24, 0x80	; 128
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	09 f4       	brne	.+2      	; 0x25da <__addsf3x+0xb2>
    25d8:	9e ef       	ldi	r25, 0xFE	; 254
    25da:	cd d1       	rcall	.+922    	; 0x2976 <__fp_pscB>
    25dc:	28 f0       	brcs	.+10     	; 0x25e8 <__addsf3x+0xc0>
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	51 e0       	ldi	r21, 0x01	; 1
    25e2:	59 f4       	brne	.+22     	; 0x25fa <atan2+0xe>
    25e4:	5e ef       	ldi	r21, 0xFE	; 254
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <atan2+0xe>
    25e8:	97 c1       	rjmp	.+814    	; 0x2918 <__fp_nan>
    25ea:	4f c2       	rjmp	.+1182   	; 0x2a8a <__fp_zero>

000025ec <atan2>:
    25ec:	e9 2f       	mov	r30, r25
    25ee:	e0 78       	andi	r30, 0x80	; 128
    25f0:	13 d2       	rcall	.+1062   	; 0x2a18 <__fp_split3>
    25f2:	68 f3       	brcs	.-38     	; 0x25ce <__addsf3x+0xa6>
    25f4:	09 2e       	mov	r0, r25
    25f6:	05 2a       	or	r0, r21
    25f8:	c1 f3       	breq	.-16     	; 0x25ea <__addsf3x+0xc2>
    25fa:	26 17       	cp	r18, r22
    25fc:	37 07       	cpc	r19, r23
    25fe:	48 07       	cpc	r20, r24
    2600:	59 07       	cpc	r21, r25
    2602:	38 f0       	brcs	.+14     	; 0x2612 <atan2+0x26>
    2604:	0e 2e       	mov	r0, r30
    2606:	07 f8       	bld	r0, 7
    2608:	e0 25       	eor	r30, r0
    260a:	69 f0       	breq	.+26     	; 0x2626 <atan2+0x3a>
    260c:	e0 25       	eor	r30, r0
    260e:	e0 64       	ori	r30, 0x40	; 64
    2610:	0a c0       	rjmp	.+20     	; 0x2626 <atan2+0x3a>
    2612:	ef 63       	ori	r30, 0x3F	; 63
    2614:	07 f8       	bld	r0, 7
    2616:	00 94       	com	r0
    2618:	07 fa       	bst	r0, 7
    261a:	db 01       	movw	r26, r22
    261c:	b9 01       	movw	r22, r18
    261e:	9d 01       	movw	r18, r26
    2620:	dc 01       	movw	r26, r24
    2622:	ca 01       	movw	r24, r20
    2624:	ad 01       	movw	r20, r26
    2626:	ef 93       	push	r30
    2628:	4a d0       	rcall	.+148    	; 0x26be <__divsf3_pse>
    262a:	d4 d1       	rcall	.+936    	; 0x29d4 <__fp_round>
    262c:	0a d0       	rcall	.+20     	; 0x2642 <atan>
    262e:	5f 91       	pop	r21
    2630:	55 23       	and	r21, r21
    2632:	31 f0       	breq	.+12     	; 0x2640 <atan2+0x54>
    2634:	2b ed       	ldi	r18, 0xDB	; 219
    2636:	3f e0       	ldi	r19, 0x0F	; 15
    2638:	49 e4       	ldi	r20, 0x49	; 73
    263a:	50 fd       	sbrc	r21, 0
    263c:	49 ec       	ldi	r20, 0xC9	; 201
    263e:	63 cf       	rjmp	.-314    	; 0x2506 <__addsf3>
    2640:	08 95       	ret

00002642 <atan>:
    2642:	df 93       	push	r29
    2644:	dd 27       	eor	r29, r29
    2646:	b9 2f       	mov	r27, r25
    2648:	bf 77       	andi	r27, 0x7F	; 127
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	16 16       	cp	r1, r22
    2650:	17 06       	cpc	r1, r23
    2652:	48 07       	cpc	r20, r24
    2654:	5b 07       	cpc	r21, r27
    2656:	10 f4       	brcc	.+4      	; 0x265c <atan+0x1a>
    2658:	d9 2f       	mov	r29, r25
    265a:	22 d2       	rcall	.+1092   	; 0x2aa0 <inverse>
    265c:	9f 93       	push	r25
    265e:	8f 93       	push	r24
    2660:	7f 93       	push	r23
    2662:	6f 93       	push	r22
    2664:	b9 d3       	rcall	.+1906   	; 0x2dd8 <square>
    2666:	e4 eb       	ldi	r30, 0xB4	; 180
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	59 d1       	rcall	.+690    	; 0x291e <__fp_powser>
    266c:	b3 d1       	rcall	.+870    	; 0x29d4 <__fp_round>
    266e:	2f 91       	pop	r18
    2670:	3f 91       	pop	r19
    2672:	4f 91       	pop	r20
    2674:	5f 91       	pop	r21
    2676:	a5 d2       	rcall	.+1354   	; 0x2bc2 <__mulsf3x>
    2678:	dd 23       	and	r29, r29
    267a:	49 f0       	breq	.+18     	; 0x268e <atan+0x4c>
    267c:	90 58       	subi	r25, 0x80	; 128
    267e:	a2 ea       	ldi	r26, 0xA2	; 162
    2680:	2a ed       	ldi	r18, 0xDA	; 218
    2682:	3f e0       	ldi	r19, 0x0F	; 15
    2684:	49 ec       	ldi	r20, 0xC9	; 201
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	d0 78       	andi	r29, 0x80	; 128
    268a:	5d 27       	eor	r21, r29
    268c:	4d df       	rcall	.-358    	; 0x2528 <__addsf3x>
    268e:	df 91       	pop	r29
    2690:	a1 c1       	rjmp	.+834    	; 0x29d4 <__fp_round>

00002692 <__cmpsf2>:
    2692:	ef d0       	rcall	.+478    	; 0x2872 <__fp_cmp>
    2694:	08 f4       	brcc	.+2      	; 0x2698 <__cmpsf2+0x6>
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	08 95       	ret

0000269a <cos>:
    269a:	75 d1       	rcall	.+746    	; 0x2986 <__fp_rempio2>
    269c:	e3 95       	inc	r30
    269e:	ab c1       	rjmp	.+854    	; 0x29f6 <__fp_sinus>

000026a0 <__divsf3>:
    26a0:	0c d0       	rcall	.+24     	; 0x26ba <__divsf3x>
    26a2:	98 c1       	rjmp	.+816    	; 0x29d4 <__fp_round>
    26a4:	68 d1       	rcall	.+720    	; 0x2976 <__fp_pscB>
    26a6:	40 f0       	brcs	.+16     	; 0x26b8 <__divsf3+0x18>
    26a8:	5f d1       	rcall	.+702    	; 0x2968 <__fp_pscA>
    26aa:	30 f0       	brcs	.+12     	; 0x26b8 <__divsf3+0x18>
    26ac:	21 f4       	brne	.+8      	; 0x26b6 <__divsf3+0x16>
    26ae:	5f 3f       	cpi	r21, 0xFF	; 255
    26b0:	19 f0       	breq	.+6      	; 0x26b8 <__divsf3+0x18>
    26b2:	03 c1       	rjmp	.+518    	; 0x28ba <__fp_inf>
    26b4:	51 11       	cpse	r21, r1
    26b6:	ea c1       	rjmp	.+980    	; 0x2a8c <__fp_szero>
    26b8:	2f c1       	rjmp	.+606    	; 0x2918 <__fp_nan>

000026ba <__divsf3x>:
    26ba:	ae d1       	rcall	.+860    	; 0x2a18 <__fp_split3>
    26bc:	98 f3       	brcs	.-26     	; 0x26a4 <__divsf3+0x4>

000026be <__divsf3_pse>:
    26be:	99 23       	and	r25, r25
    26c0:	c9 f3       	breq	.-14     	; 0x26b4 <__divsf3+0x14>
    26c2:	55 23       	and	r21, r21
    26c4:	b1 f3       	breq	.-20     	; 0x26b2 <__divsf3+0x12>
    26c6:	95 1b       	sub	r25, r21
    26c8:	55 0b       	sbc	r21, r21
    26ca:	bb 27       	eor	r27, r27
    26cc:	aa 27       	eor	r26, r26
    26ce:	62 17       	cp	r22, r18
    26d0:	73 07       	cpc	r23, r19
    26d2:	84 07       	cpc	r24, r20
    26d4:	38 f0       	brcs	.+14     	; 0x26e4 <__divsf3_pse+0x26>
    26d6:	9f 5f       	subi	r25, 0xFF	; 255
    26d8:	5f 4f       	sbci	r21, 0xFF	; 255
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	44 1f       	adc	r20, r20
    26e0:	aa 1f       	adc	r26, r26
    26e2:	a9 f3       	breq	.-22     	; 0x26ce <__divsf3_pse+0x10>
    26e4:	33 d0       	rcall	.+102    	; 0x274c <__divsf3_pse+0x8e>
    26e6:	0e 2e       	mov	r0, r30
    26e8:	3a f0       	brmi	.+14     	; 0x26f8 <__divsf3_pse+0x3a>
    26ea:	e0 e8       	ldi	r30, 0x80	; 128
    26ec:	30 d0       	rcall	.+96     	; 0x274e <__divsf3_pse+0x90>
    26ee:	91 50       	subi	r25, 0x01	; 1
    26f0:	50 40       	sbci	r21, 0x00	; 0
    26f2:	e6 95       	lsr	r30
    26f4:	00 1c       	adc	r0, r0
    26f6:	ca f7       	brpl	.-14     	; 0x26ea <__divsf3_pse+0x2c>
    26f8:	29 d0       	rcall	.+82     	; 0x274c <__divsf3_pse+0x8e>
    26fa:	fe 2f       	mov	r31, r30
    26fc:	27 d0       	rcall	.+78     	; 0x274c <__divsf3_pse+0x8e>
    26fe:	66 0f       	add	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	88 1f       	adc	r24, r24
    2704:	bb 1f       	adc	r27, r27
    2706:	26 17       	cp	r18, r22
    2708:	37 07       	cpc	r19, r23
    270a:	48 07       	cpc	r20, r24
    270c:	ab 07       	cpc	r26, r27
    270e:	b0 e8       	ldi	r27, 0x80	; 128
    2710:	09 f0       	breq	.+2      	; 0x2714 <__divsf3_pse+0x56>
    2712:	bb 0b       	sbc	r27, r27
    2714:	80 2d       	mov	r24, r0
    2716:	bf 01       	movw	r22, r30
    2718:	ff 27       	eor	r31, r31
    271a:	93 58       	subi	r25, 0x83	; 131
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	2a f0       	brmi	.+10     	; 0x272a <__divsf3_pse+0x6c>
    2720:	9e 3f       	cpi	r25, 0xFE	; 254
    2722:	51 05       	cpc	r21, r1
    2724:	68 f0       	brcs	.+26     	; 0x2740 <__divsf3_pse+0x82>
    2726:	c9 c0       	rjmp	.+402    	; 0x28ba <__fp_inf>
    2728:	b1 c1       	rjmp	.+866    	; 0x2a8c <__fp_szero>
    272a:	5f 3f       	cpi	r21, 0xFF	; 255
    272c:	ec f3       	brlt	.-6      	; 0x2728 <__divsf3_pse+0x6a>
    272e:	98 3e       	cpi	r25, 0xE8	; 232
    2730:	dc f3       	brlt	.-10     	; 0x2728 <__divsf3_pse+0x6a>
    2732:	86 95       	lsr	r24
    2734:	77 95       	ror	r23
    2736:	67 95       	ror	r22
    2738:	b7 95       	ror	r27
    273a:	f7 95       	ror	r31
    273c:	9f 5f       	subi	r25, 0xFF	; 255
    273e:	c9 f7       	brne	.-14     	; 0x2732 <__divsf3_pse+0x74>
    2740:	88 0f       	add	r24, r24
    2742:	91 1d       	adc	r25, r1
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	97 f9       	bld	r25, 7
    274a:	08 95       	ret
    274c:	e1 e0       	ldi	r30, 0x01	; 1
    274e:	66 0f       	add	r22, r22
    2750:	77 1f       	adc	r23, r23
    2752:	88 1f       	adc	r24, r24
    2754:	bb 1f       	adc	r27, r27
    2756:	62 17       	cp	r22, r18
    2758:	73 07       	cpc	r23, r19
    275a:	84 07       	cpc	r24, r20
    275c:	ba 07       	cpc	r27, r26
    275e:	20 f0       	brcs	.+8      	; 0x2768 <__divsf3_pse+0xaa>
    2760:	62 1b       	sub	r22, r18
    2762:	73 0b       	sbc	r23, r19
    2764:	84 0b       	sbc	r24, r20
    2766:	ba 0b       	sbc	r27, r26
    2768:	ee 1f       	adc	r30, r30
    276a:	88 f7       	brcc	.-30     	; 0x274e <__divsf3_pse+0x90>
    276c:	e0 95       	com	r30
    276e:	08 95       	ret

00002770 <__fixsfsi>:
    2770:	04 d0       	rcall	.+8      	; 0x277a <__fixunssfsi>
    2772:	68 94       	set
    2774:	b1 11       	cpse	r27, r1
    2776:	8a c1       	rjmp	.+788    	; 0x2a8c <__fp_szero>
    2778:	08 95       	ret

0000277a <__fixunssfsi>:
    277a:	56 d1       	rcall	.+684    	; 0x2a28 <__fp_splitA>
    277c:	88 f0       	brcs	.+34     	; 0x27a0 <__fixunssfsi+0x26>
    277e:	9f 57       	subi	r25, 0x7F	; 127
    2780:	90 f0       	brcs	.+36     	; 0x27a6 <__fixunssfsi+0x2c>
    2782:	b9 2f       	mov	r27, r25
    2784:	99 27       	eor	r25, r25
    2786:	b7 51       	subi	r27, 0x17	; 23
    2788:	a0 f0       	brcs	.+40     	; 0x27b2 <__fixunssfsi+0x38>
    278a:	d1 f0       	breq	.+52     	; 0x27c0 <__fixunssfsi+0x46>
    278c:	66 0f       	add	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	88 1f       	adc	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	1a f0       	brmi	.+6      	; 0x279c <__fixunssfsi+0x22>
    2796:	ba 95       	dec	r27
    2798:	c9 f7       	brne	.-14     	; 0x278c <__fixunssfsi+0x12>
    279a:	12 c0       	rjmp	.+36     	; 0x27c0 <__fixunssfsi+0x46>
    279c:	b1 30       	cpi	r27, 0x01	; 1
    279e:	81 f0       	breq	.+32     	; 0x27c0 <__fixunssfsi+0x46>
    27a0:	74 d1       	rcall	.+744    	; 0x2a8a <__fp_zero>
    27a2:	b1 e0       	ldi	r27, 0x01	; 1
    27a4:	08 95       	ret
    27a6:	71 c1       	rjmp	.+738    	; 0x2a8a <__fp_zero>
    27a8:	67 2f       	mov	r22, r23
    27aa:	78 2f       	mov	r23, r24
    27ac:	88 27       	eor	r24, r24
    27ae:	b8 5f       	subi	r27, 0xF8	; 248
    27b0:	39 f0       	breq	.+14     	; 0x27c0 <__fixunssfsi+0x46>
    27b2:	b9 3f       	cpi	r27, 0xF9	; 249
    27b4:	cc f3       	brlt	.-14     	; 0x27a8 <__fixunssfsi+0x2e>
    27b6:	86 95       	lsr	r24
    27b8:	77 95       	ror	r23
    27ba:	67 95       	ror	r22
    27bc:	b3 95       	inc	r27
    27be:	d9 f7       	brne	.-10     	; 0x27b6 <__fixunssfsi+0x3c>
    27c0:	3e f4       	brtc	.+14     	; 0x27d0 <__fixunssfsi+0x56>
    27c2:	90 95       	com	r25
    27c4:	80 95       	com	r24
    27c6:	70 95       	com	r23
    27c8:	61 95       	neg	r22
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	8f 4f       	sbci	r24, 0xFF	; 255
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	08 95       	ret

000027d2 <__floatunsisf>:
    27d2:	e8 94       	clt
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <__floatsisf+0x12>

000027d6 <__floatsisf>:
    27d6:	97 fb       	bst	r25, 7
    27d8:	3e f4       	brtc	.+14     	; 0x27e8 <__floatsisf+0x12>
    27da:	90 95       	com	r25
    27dc:	80 95       	com	r24
    27de:	70 95       	com	r23
    27e0:	61 95       	neg	r22
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	8f 4f       	sbci	r24, 0xFF	; 255
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	99 23       	and	r25, r25
    27ea:	a9 f0       	breq	.+42     	; 0x2816 <__floatsisf+0x40>
    27ec:	f9 2f       	mov	r31, r25
    27ee:	96 e9       	ldi	r25, 0x96	; 150
    27f0:	bb 27       	eor	r27, r27
    27f2:	93 95       	inc	r25
    27f4:	f6 95       	lsr	r31
    27f6:	87 95       	ror	r24
    27f8:	77 95       	ror	r23
    27fa:	67 95       	ror	r22
    27fc:	b7 95       	ror	r27
    27fe:	f1 11       	cpse	r31, r1
    2800:	f8 cf       	rjmp	.-16     	; 0x27f2 <__floatsisf+0x1c>
    2802:	fa f4       	brpl	.+62     	; 0x2842 <__floatsisf+0x6c>
    2804:	bb 0f       	add	r27, r27
    2806:	11 f4       	brne	.+4      	; 0x280c <__floatsisf+0x36>
    2808:	60 ff       	sbrs	r22, 0
    280a:	1b c0       	rjmp	.+54     	; 0x2842 <__floatsisf+0x6c>
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	16 c0       	rjmp	.+44     	; 0x2842 <__floatsisf+0x6c>
    2816:	88 23       	and	r24, r24
    2818:	11 f0       	breq	.+4      	; 0x281e <__floatsisf+0x48>
    281a:	96 e9       	ldi	r25, 0x96	; 150
    281c:	11 c0       	rjmp	.+34     	; 0x2840 <__floatsisf+0x6a>
    281e:	77 23       	and	r23, r23
    2820:	21 f0       	breq	.+8      	; 0x282a <__floatsisf+0x54>
    2822:	9e e8       	ldi	r25, 0x8E	; 142
    2824:	87 2f       	mov	r24, r23
    2826:	76 2f       	mov	r23, r22
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <__floatsisf+0x5e>
    282a:	66 23       	and	r22, r22
    282c:	71 f0       	breq	.+28     	; 0x284a <__floatsisf+0x74>
    282e:	96 e8       	ldi	r25, 0x86	; 134
    2830:	86 2f       	mov	r24, r22
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	2a f0       	brmi	.+10     	; 0x2842 <__floatsisf+0x6c>
    2838:	9a 95       	dec	r25
    283a:	66 0f       	add	r22, r22
    283c:	77 1f       	adc	r23, r23
    283e:	88 1f       	adc	r24, r24
    2840:	da f7       	brpl	.-10     	; 0x2838 <__floatsisf+0x62>
    2842:	88 0f       	add	r24, r24
    2844:	96 95       	lsr	r25
    2846:	87 95       	ror	r24
    2848:	97 f9       	bld	r25, 7
    284a:	08 95       	ret

0000284c <floor>:
    284c:	07 d1       	rcall	.+526    	; 0x2a5c <__fp_trunc>
    284e:	80 f0       	brcs	.+32     	; 0x2870 <floor+0x24>
    2850:	9f 37       	cpi	r25, 0x7F	; 127
    2852:	40 f4       	brcc	.+16     	; 0x2864 <floor+0x18>
    2854:	91 11       	cpse	r25, r1
    2856:	0e f0       	brts	.+2      	; 0x285a <floor+0xe>
    2858:	19 c1       	rjmp	.+562    	; 0x2a8c <__fp_szero>
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 e8       	ldi	r24, 0x80	; 128
    2860:	9f eb       	ldi	r25, 0xBF	; 191
    2862:	08 95       	ret
    2864:	26 f4       	brtc	.+8      	; 0x286e <floor+0x22>
    2866:	1b 16       	cp	r1, r27
    2868:	61 1d       	adc	r22, r1
    286a:	71 1d       	adc	r23, r1
    286c:	81 1d       	adc	r24, r1
    286e:	2b c0       	rjmp	.+86     	; 0x28c6 <__fp_mintl>
    2870:	45 c0       	rjmp	.+138    	; 0x28fc <__fp_mpack>

00002872 <__fp_cmp>:
    2872:	99 0f       	add	r25, r25
    2874:	00 08       	sbc	r0, r0
    2876:	55 0f       	add	r21, r21
    2878:	aa 0b       	sbc	r26, r26
    287a:	e0 e8       	ldi	r30, 0x80	; 128
    287c:	fe ef       	ldi	r31, 0xFE	; 254
    287e:	16 16       	cp	r1, r22
    2880:	17 06       	cpc	r1, r23
    2882:	e8 07       	cpc	r30, r24
    2884:	f9 07       	cpc	r31, r25
    2886:	c0 f0       	brcs	.+48     	; 0x28b8 <__fp_cmp+0x46>
    2888:	12 16       	cp	r1, r18
    288a:	13 06       	cpc	r1, r19
    288c:	e4 07       	cpc	r30, r20
    288e:	f5 07       	cpc	r31, r21
    2890:	98 f0       	brcs	.+38     	; 0x28b8 <__fp_cmp+0x46>
    2892:	62 1b       	sub	r22, r18
    2894:	73 0b       	sbc	r23, r19
    2896:	84 0b       	sbc	r24, r20
    2898:	95 0b       	sbc	r25, r21
    289a:	39 f4       	brne	.+14     	; 0x28aa <__fp_cmp+0x38>
    289c:	0a 26       	eor	r0, r26
    289e:	61 f0       	breq	.+24     	; 0x28b8 <__fp_cmp+0x46>
    28a0:	23 2b       	or	r18, r19
    28a2:	24 2b       	or	r18, r20
    28a4:	25 2b       	or	r18, r21
    28a6:	21 f4       	brne	.+8      	; 0x28b0 <__fp_cmp+0x3e>
    28a8:	08 95       	ret
    28aa:	0a 26       	eor	r0, r26
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <__fp_cmp+0x3e>
    28ae:	a1 40       	sbci	r26, 0x01	; 1
    28b0:	a6 95       	lsr	r26
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	81 1d       	adc	r24, r1
    28b6:	81 1d       	adc	r24, r1
    28b8:	08 95       	ret

000028ba <__fp_inf>:
    28ba:	97 f9       	bld	r25, 7
    28bc:	9f 67       	ori	r25, 0x7F	; 127
    28be:	80 e8       	ldi	r24, 0x80	; 128
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	08 95       	ret

000028c6 <__fp_mintl>:
    28c6:	88 23       	and	r24, r24
    28c8:	71 f4       	brne	.+28     	; 0x28e6 <__fp_mintl+0x20>
    28ca:	77 23       	and	r23, r23
    28cc:	21 f0       	breq	.+8      	; 0x28d6 <__fp_mintl+0x10>
    28ce:	98 50       	subi	r25, 0x08	; 8
    28d0:	87 2b       	or	r24, r23
    28d2:	76 2f       	mov	r23, r22
    28d4:	07 c0       	rjmp	.+14     	; 0x28e4 <__fp_mintl+0x1e>
    28d6:	66 23       	and	r22, r22
    28d8:	11 f4       	brne	.+4      	; 0x28de <__fp_mintl+0x18>
    28da:	99 27       	eor	r25, r25
    28dc:	0d c0       	rjmp	.+26     	; 0x28f8 <__fp_mintl+0x32>
    28de:	90 51       	subi	r25, 0x10	; 16
    28e0:	86 2b       	or	r24, r22
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	2a f0       	brmi	.+10     	; 0x28f2 <__fp_mintl+0x2c>
    28e8:	9a 95       	dec	r25
    28ea:	66 0f       	add	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	88 1f       	adc	r24, r24
    28f0:	da f7       	brpl	.-10     	; 0x28e8 <__fp_mintl+0x22>
    28f2:	88 0f       	add	r24, r24
    28f4:	96 95       	lsr	r25
    28f6:	87 95       	ror	r24
    28f8:	97 f9       	bld	r25, 7
    28fa:	08 95       	ret

000028fc <__fp_mpack>:
    28fc:	9f 3f       	cpi	r25, 0xFF	; 255
    28fe:	31 f0       	breq	.+12     	; 0x290c <__fp_mpack_finite+0xc>

00002900 <__fp_mpack_finite>:
    2900:	91 50       	subi	r25, 0x01	; 1
    2902:	20 f4       	brcc	.+8      	; 0x290c <__fp_mpack_finite+0xc>
    2904:	87 95       	ror	r24
    2906:	77 95       	ror	r23
    2908:	67 95       	ror	r22
    290a:	b7 95       	ror	r27
    290c:	88 0f       	add	r24, r24
    290e:	91 1d       	adc	r25, r1
    2910:	96 95       	lsr	r25
    2912:	87 95       	ror	r24
    2914:	97 f9       	bld	r25, 7
    2916:	08 95       	ret

00002918 <__fp_nan>:
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	80 ec       	ldi	r24, 0xC0	; 192
    291c:	08 95       	ret

0000291e <__fp_powser>:
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	1f 93       	push	r17
    2924:	0f 93       	push	r16
    2926:	ff 92       	push	r15
    2928:	ef 92       	push	r14
    292a:	df 92       	push	r13
    292c:	7b 01       	movw	r14, r22
    292e:	8c 01       	movw	r16, r24
    2930:	68 94       	set
    2932:	05 c0       	rjmp	.+10     	; 0x293e <__fp_powser+0x20>
    2934:	da 2e       	mov	r13, r26
    2936:	ef 01       	movw	r28, r30
    2938:	44 d1       	rcall	.+648    	; 0x2bc2 <__mulsf3x>
    293a:	fe 01       	movw	r30, r28
    293c:	e8 94       	clt
    293e:	a5 91       	lpm	r26, Z+
    2940:	25 91       	lpm	r18, Z+
    2942:	35 91       	lpm	r19, Z+
    2944:	45 91       	lpm	r20, Z+
    2946:	55 91       	lpm	r21, Z+
    2948:	ae f3       	brts	.-22     	; 0x2934 <__fp_powser+0x16>
    294a:	ef 01       	movw	r28, r30
    294c:	ed dd       	rcall	.-1062   	; 0x2528 <__addsf3x>
    294e:	fe 01       	movw	r30, r28
    2950:	97 01       	movw	r18, r14
    2952:	a8 01       	movw	r20, r16
    2954:	da 94       	dec	r13
    2956:	79 f7       	brne	.-34     	; 0x2936 <__fp_powser+0x18>
    2958:	df 90       	pop	r13
    295a:	ef 90       	pop	r14
    295c:	ff 90       	pop	r15
    295e:	0f 91       	pop	r16
    2960:	1f 91       	pop	r17
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <__fp_pscA>:
    2968:	00 24       	eor	r0, r0
    296a:	0a 94       	dec	r0
    296c:	16 16       	cp	r1, r22
    296e:	17 06       	cpc	r1, r23
    2970:	18 06       	cpc	r1, r24
    2972:	09 06       	cpc	r0, r25
    2974:	08 95       	ret

00002976 <__fp_pscB>:
    2976:	00 24       	eor	r0, r0
    2978:	0a 94       	dec	r0
    297a:	12 16       	cp	r1, r18
    297c:	13 06       	cpc	r1, r19
    297e:	14 06       	cpc	r1, r20
    2980:	05 06       	cpc	r0, r21
    2982:	08 95       	ret
    2984:	c9 cf       	rjmp	.-110    	; 0x2918 <__fp_nan>

00002986 <__fp_rempio2>:
    2986:	50 d0       	rcall	.+160    	; 0x2a28 <__fp_splitA>
    2988:	e8 f3       	brcs	.-6      	; 0x2984 <__fp_pscB+0xe>
    298a:	e8 94       	clt
    298c:	e0 e0       	ldi	r30, 0x00	; 0
    298e:	bb 27       	eor	r27, r27
    2990:	9f 57       	subi	r25, 0x7F	; 127
    2992:	f0 f0       	brcs	.+60     	; 0x29d0 <__fp_rempio2+0x4a>
    2994:	2a ed       	ldi	r18, 0xDA	; 218
    2996:	3f e0       	ldi	r19, 0x0F	; 15
    2998:	49 ec       	ldi	r20, 0xC9	; 201
    299a:	06 c0       	rjmp	.+12     	; 0x29a8 <__fp_rempio2+0x22>
    299c:	ee 0f       	add	r30, r30
    299e:	bb 0f       	add	r27, r27
    29a0:	66 1f       	adc	r22, r22
    29a2:	77 1f       	adc	r23, r23
    29a4:	88 1f       	adc	r24, r24
    29a6:	28 f0       	brcs	.+10     	; 0x29b2 <__fp_rempio2+0x2c>
    29a8:	b2 3a       	cpi	r27, 0xA2	; 162
    29aa:	62 07       	cpc	r22, r18
    29ac:	73 07       	cpc	r23, r19
    29ae:	84 07       	cpc	r24, r20
    29b0:	28 f0       	brcs	.+10     	; 0x29bc <__fp_rempio2+0x36>
    29b2:	b2 5a       	subi	r27, 0xA2	; 162
    29b4:	62 0b       	sbc	r22, r18
    29b6:	73 0b       	sbc	r23, r19
    29b8:	84 0b       	sbc	r24, r20
    29ba:	e3 95       	inc	r30
    29bc:	9a 95       	dec	r25
    29be:	72 f7       	brpl	.-36     	; 0x299c <__fp_rempio2+0x16>
    29c0:	80 38       	cpi	r24, 0x80	; 128
    29c2:	30 f4       	brcc	.+12     	; 0x29d0 <__fp_rempio2+0x4a>
    29c4:	9a 95       	dec	r25
    29c6:	bb 0f       	add	r27, r27
    29c8:	66 1f       	adc	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	d2 f7       	brpl	.-12     	; 0x29c4 <__fp_rempio2+0x3e>
    29d0:	90 48       	sbci	r25, 0x80	; 128
    29d2:	96 cf       	rjmp	.-212    	; 0x2900 <__fp_mpack_finite>

000029d4 <__fp_round>:
    29d4:	09 2e       	mov	r0, r25
    29d6:	03 94       	inc	r0
    29d8:	00 0c       	add	r0, r0
    29da:	11 f4       	brne	.+4      	; 0x29e0 <__fp_round+0xc>
    29dc:	88 23       	and	r24, r24
    29de:	52 f0       	brmi	.+20     	; 0x29f4 <__fp_round+0x20>
    29e0:	bb 0f       	add	r27, r27
    29e2:	40 f4       	brcc	.+16     	; 0x29f4 <__fp_round+0x20>
    29e4:	bf 2b       	or	r27, r31
    29e6:	11 f4       	brne	.+4      	; 0x29ec <__fp_round+0x18>
    29e8:	60 ff       	sbrs	r22, 0
    29ea:	04 c0       	rjmp	.+8      	; 0x29f4 <__fp_round+0x20>
    29ec:	6f 5f       	subi	r22, 0xFF	; 255
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	8f 4f       	sbci	r24, 0xFF	; 255
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	08 95       	ret

000029f6 <__fp_sinus>:
    29f6:	ef 93       	push	r30
    29f8:	e0 ff       	sbrs	r30, 0
    29fa:	06 c0       	rjmp	.+12     	; 0x2a08 <__fp_sinus+0x12>
    29fc:	a2 ea       	ldi	r26, 0xA2	; 162
    29fe:	2a ed       	ldi	r18, 0xDA	; 218
    2a00:	3f e0       	ldi	r19, 0x0F	; 15
    2a02:	49 ec       	ldi	r20, 0xC9	; 201
    2a04:	5f eb       	ldi	r21, 0xBF	; 191
    2a06:	90 dd       	rcall	.-1248   	; 0x2528 <__addsf3x>
    2a08:	e5 df       	rcall	.-54     	; 0x29d4 <__fp_round>
    2a0a:	0f 90       	pop	r0
    2a0c:	03 94       	inc	r0
    2a0e:	01 fc       	sbrc	r0, 1
    2a10:	90 58       	subi	r25, 0x80	; 128
    2a12:	e1 ee       	ldi	r30, 0xE1	; 225
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	1b c2       	rjmp	.+1078   	; 0x2e4e <__fp_powsodd>

00002a18 <__fp_split3>:
    2a18:	57 fd       	sbrc	r21, 7
    2a1a:	90 58       	subi	r25, 0x80	; 128
    2a1c:	44 0f       	add	r20, r20
    2a1e:	55 1f       	adc	r21, r21
    2a20:	59 f0       	breq	.+22     	; 0x2a38 <__fp_splitA+0x10>
    2a22:	5f 3f       	cpi	r21, 0xFF	; 255
    2a24:	71 f0       	breq	.+28     	; 0x2a42 <__fp_splitA+0x1a>
    2a26:	47 95       	ror	r20

00002a28 <__fp_splitA>:
    2a28:	88 0f       	add	r24, r24
    2a2a:	97 fb       	bst	r25, 7
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	61 f0       	breq	.+24     	; 0x2a48 <__fp_splitA+0x20>
    2a30:	9f 3f       	cpi	r25, 0xFF	; 255
    2a32:	79 f0       	breq	.+30     	; 0x2a52 <__fp_splitA+0x2a>
    2a34:	87 95       	ror	r24
    2a36:	08 95       	ret
    2a38:	12 16       	cp	r1, r18
    2a3a:	13 06       	cpc	r1, r19
    2a3c:	14 06       	cpc	r1, r20
    2a3e:	55 1f       	adc	r21, r21
    2a40:	f2 cf       	rjmp	.-28     	; 0x2a26 <__fp_split3+0xe>
    2a42:	46 95       	lsr	r20
    2a44:	f1 df       	rcall	.-30     	; 0x2a28 <__fp_splitA>
    2a46:	08 c0       	rjmp	.+16     	; 0x2a58 <__fp_splitA+0x30>
    2a48:	16 16       	cp	r1, r22
    2a4a:	17 06       	cpc	r1, r23
    2a4c:	18 06       	cpc	r1, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	f1 cf       	rjmp	.-30     	; 0x2a34 <__fp_splitA+0xc>
    2a52:	86 95       	lsr	r24
    2a54:	71 05       	cpc	r23, r1
    2a56:	61 05       	cpc	r22, r1
    2a58:	08 94       	sec
    2a5a:	08 95       	ret

00002a5c <__fp_trunc>:
    2a5c:	e5 df       	rcall	.-54     	; 0x2a28 <__fp_splitA>
    2a5e:	a0 f0       	brcs	.+40     	; 0x2a88 <__fp_trunc+0x2c>
    2a60:	be e7       	ldi	r27, 0x7E	; 126
    2a62:	b9 17       	cp	r27, r25
    2a64:	88 f4       	brcc	.+34     	; 0x2a88 <__fp_trunc+0x2c>
    2a66:	bb 27       	eor	r27, r27
    2a68:	9f 38       	cpi	r25, 0x8F	; 143
    2a6a:	60 f4       	brcc	.+24     	; 0x2a84 <__fp_trunc+0x28>
    2a6c:	16 16       	cp	r1, r22
    2a6e:	b1 1d       	adc	r27, r1
    2a70:	67 2f       	mov	r22, r23
    2a72:	78 2f       	mov	r23, r24
    2a74:	88 27       	eor	r24, r24
    2a76:	98 5f       	subi	r25, 0xF8	; 248
    2a78:	f7 cf       	rjmp	.-18     	; 0x2a68 <__fp_trunc+0xc>
    2a7a:	86 95       	lsr	r24
    2a7c:	77 95       	ror	r23
    2a7e:	67 95       	ror	r22
    2a80:	b1 1d       	adc	r27, r1
    2a82:	93 95       	inc	r25
    2a84:	96 39       	cpi	r25, 0x96	; 150
    2a86:	c8 f3       	brcs	.-14     	; 0x2a7a <__fp_trunc+0x1e>
    2a88:	08 95       	ret

00002a8a <__fp_zero>:
    2a8a:	e8 94       	clt

00002a8c <__fp_szero>:
    2a8c:	bb 27       	eor	r27, r27
    2a8e:	66 27       	eor	r22, r22
    2a90:	77 27       	eor	r23, r23
    2a92:	cb 01       	movw	r24, r22
    2a94:	97 f9       	bld	r25, 7
    2a96:	08 95       	ret

00002a98 <__gesf2>:
    2a98:	ec de       	rcall	.-552    	; 0x2872 <__fp_cmp>
    2a9a:	08 f4       	brcc	.+2      	; 0x2a9e <__gesf2+0x6>
    2a9c:	8f ef       	ldi	r24, 0xFF	; 255
    2a9e:	08 95       	ret

00002aa0 <inverse>:
    2aa0:	9b 01       	movw	r18, r22
    2aa2:	ac 01       	movw	r20, r24
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	80 e8       	ldi	r24, 0x80	; 128
    2aaa:	9f e3       	ldi	r25, 0x3F	; 63
    2aac:	f9 cd       	rjmp	.-1038   	; 0x26a0 <__divsf3>

00002aae <log10>:
    2aae:	0a d0       	rcall	.+20     	; 0x2ac4 <log>
    2ab0:	29 ed       	ldi	r18, 0xD9	; 217
    2ab2:	3b e5       	ldi	r19, 0x5B	; 91
    2ab4:	4e ed       	ldi	r20, 0xDE	; 222
    2ab6:	5e e3       	ldi	r21, 0x3E	; 62
    2ab8:	78 c0       	rjmp	.+240    	; 0x2baa <__mulsf3>
    2aba:	0e f0       	brts	.+2      	; 0x2abe <log10+0x10>
    2abc:	1f cf       	rjmp	.-450    	; 0x28fc <__fp_mpack>
    2abe:	2c cf       	rjmp	.-424    	; 0x2918 <__fp_nan>
    2ac0:	68 94       	set
    2ac2:	fb ce       	rjmp	.-522    	; 0x28ba <__fp_inf>

00002ac4 <log>:
    2ac4:	b1 df       	rcall	.-158    	; 0x2a28 <__fp_splitA>
    2ac6:	c8 f3       	brcs	.-14     	; 0x2aba <log10+0xc>
    2ac8:	99 23       	and	r25, r25
    2aca:	d1 f3       	breq	.-12     	; 0x2ac0 <log10+0x12>
    2acc:	c6 f3       	brts	.-16     	; 0x2abe <log10+0x10>
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	1f 93       	push	r17
    2ad4:	0f 93       	push	r16
    2ad6:	ff 92       	push	r15
    2ad8:	c9 2f       	mov	r28, r25
    2ada:	dd 27       	eor	r29, r29
    2adc:	88 23       	and	r24, r24
    2ade:	2a f0       	brmi	.+10     	; 0x2aea <log+0x26>
    2ae0:	21 97       	sbiw	r28, 0x01	; 1
    2ae2:	66 0f       	add	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	88 1f       	adc	r24, r24
    2ae8:	da f7       	brpl	.-10     	; 0x2ae0 <log+0x1c>
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f eb       	ldi	r21, 0xBF	; 191
    2af2:	9f e3       	ldi	r25, 0x3F	; 63
    2af4:	88 39       	cpi	r24, 0x98	; 152
    2af6:	20 f0       	brcs	.+8      	; 0x2b00 <log+0x3c>
    2af8:	80 3e       	cpi	r24, 0xE0	; 224
    2afa:	30 f0       	brcs	.+12     	; 0x2b08 <log+0x44>
    2afc:	21 96       	adiw	r28, 0x01	; 1
    2afe:	8f 77       	andi	r24, 0x7F	; 127
    2b00:	02 dd       	rcall	.-1532   	; 0x2506 <__addsf3>
    2b02:	ef ef       	ldi	r30, 0xFF	; 255
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <log+0x4a>
    2b08:	fe dc       	rcall	.-1540   	; 0x2506 <__addsf3>
    2b0a:	ec e2       	ldi	r30, 0x2C	; 44
    2b0c:	f1 e0       	ldi	r31, 0x01	; 1
    2b0e:	07 df       	rcall	.-498    	; 0x291e <__fp_powser>
    2b10:	8b 01       	movw	r16, r22
    2b12:	be 01       	movw	r22, r28
    2b14:	ec 01       	movw	r28, r24
    2b16:	fb 2e       	mov	r15, r27
    2b18:	6f 57       	subi	r22, 0x7F	; 127
    2b1a:	71 09       	sbc	r23, r1
    2b1c:	75 95       	asr	r23
    2b1e:	77 1f       	adc	r23, r23
    2b20:	88 0b       	sbc	r24, r24
    2b22:	99 0b       	sbc	r25, r25
    2b24:	58 de       	rcall	.-848    	; 0x27d6 <__floatsisf>
    2b26:	28 e1       	ldi	r18, 0x18	; 24
    2b28:	32 e7       	ldi	r19, 0x72	; 114
    2b2a:	41 e3       	ldi	r20, 0x31	; 49
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	49 d0       	rcall	.+146    	; 0x2bc2 <__mulsf3x>
    2b30:	af 2d       	mov	r26, r15
    2b32:	98 01       	movw	r18, r16
    2b34:	ae 01       	movw	r20, r28
    2b36:	ff 90       	pop	r15
    2b38:	0f 91       	pop	r16
    2b3a:	1f 91       	pop	r17
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	f3 dc       	rcall	.-1562   	; 0x2528 <__addsf3x>
    2b42:	48 cf       	rjmp	.-368    	; 0x29d4 <__fp_round>

00002b44 <modf>:
    2b44:	fa 01       	movw	r30, r20
    2b46:	dc 01       	movw	r26, r24
    2b48:	aa 0f       	add	r26, r26
    2b4a:	bb 1f       	adc	r27, r27
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	ac 01       	movw	r20, r24
    2b50:	bf 57       	subi	r27, 0x7F	; 127
    2b52:	28 f4       	brcc	.+10     	; 0x2b5e <modf+0x1a>
    2b54:	22 27       	eor	r18, r18
    2b56:	33 27       	eor	r19, r19
    2b58:	44 27       	eor	r20, r20
    2b5a:	50 78       	andi	r21, 0x80	; 128
    2b5c:	1f c0       	rjmp	.+62     	; 0x2b9c <modf+0x58>
    2b5e:	b7 51       	subi	r27, 0x17	; 23
    2b60:	88 f4       	brcc	.+34     	; 0x2b84 <modf+0x40>
    2b62:	ab 2f       	mov	r26, r27
    2b64:	00 24       	eor	r0, r0
    2b66:	46 95       	lsr	r20
    2b68:	37 95       	ror	r19
    2b6a:	27 95       	ror	r18
    2b6c:	01 1c       	adc	r0, r1
    2b6e:	a3 95       	inc	r26
    2b70:	d2 f3       	brmi	.-12     	; 0x2b66 <modf+0x22>
    2b72:	00 20       	and	r0, r0
    2b74:	69 f0       	breq	.+26     	; 0x2b90 <modf+0x4c>
    2b76:	22 0f       	add	r18, r18
    2b78:	33 1f       	adc	r19, r19
    2b7a:	44 1f       	adc	r20, r20
    2b7c:	b3 95       	inc	r27
    2b7e:	da f3       	brmi	.-10     	; 0x2b76 <modf+0x32>
    2b80:	0d d0       	rcall	.+26     	; 0x2b9c <modf+0x58>
    2b82:	c0 cc       	rjmp	.-1664   	; 0x2504 <__subsf3>
    2b84:	61 30       	cpi	r22, 0x01	; 1
    2b86:	71 05       	cpc	r23, r1
    2b88:	a0 e8       	ldi	r26, 0x80	; 128
    2b8a:	8a 07       	cpc	r24, r26
    2b8c:	b9 46       	sbci	r27, 0x69	; 105
    2b8e:	30 f4       	brcc	.+12     	; 0x2b9c <modf+0x58>
    2b90:	9b 01       	movw	r18, r22
    2b92:	ac 01       	movw	r20, r24
    2b94:	66 27       	eor	r22, r22
    2b96:	77 27       	eor	r23, r23
    2b98:	88 27       	eor	r24, r24
    2b9a:	90 78       	andi	r25, 0x80	; 128
    2b9c:	30 96       	adiw	r30, 0x00	; 0
    2b9e:	21 f0       	breq	.+8      	; 0x2ba8 <modf+0x64>
    2ba0:	20 83       	st	Z, r18
    2ba2:	31 83       	std	Z+1, r19	; 0x01
    2ba4:	42 83       	std	Z+2, r20	; 0x02
    2ba6:	53 83       	std	Z+3, r21	; 0x03
    2ba8:	08 95       	ret

00002baa <__mulsf3>:
    2baa:	0b d0       	rcall	.+22     	; 0x2bc2 <__mulsf3x>
    2bac:	13 cf       	rjmp	.-474    	; 0x29d4 <__fp_round>
    2bae:	dc de       	rcall	.-584    	; 0x2968 <__fp_pscA>
    2bb0:	28 f0       	brcs	.+10     	; 0x2bbc <__mulsf3+0x12>
    2bb2:	e1 de       	rcall	.-574    	; 0x2976 <__fp_pscB>
    2bb4:	18 f0       	brcs	.+6      	; 0x2bbc <__mulsf3+0x12>
    2bb6:	95 23       	and	r25, r21
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <__mulsf3+0x12>
    2bba:	7f ce       	rjmp	.-770    	; 0x28ba <__fp_inf>
    2bbc:	ad ce       	rjmp	.-678    	; 0x2918 <__fp_nan>
    2bbe:	11 24       	eor	r1, r1
    2bc0:	65 cf       	rjmp	.-310    	; 0x2a8c <__fp_szero>

00002bc2 <__mulsf3x>:
    2bc2:	2a df       	rcall	.-428    	; 0x2a18 <__fp_split3>
    2bc4:	a0 f3       	brcs	.-24     	; 0x2bae <__mulsf3+0x4>

00002bc6 <__mulsf3_pse>:
    2bc6:	95 9f       	mul	r25, r21
    2bc8:	d1 f3       	breq	.-12     	; 0x2bbe <__mulsf3+0x14>
    2bca:	95 0f       	add	r25, r21
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	55 1f       	adc	r21, r21
    2bd0:	62 9f       	mul	r22, r18
    2bd2:	f0 01       	movw	r30, r0
    2bd4:	72 9f       	mul	r23, r18
    2bd6:	bb 27       	eor	r27, r27
    2bd8:	f0 0d       	add	r31, r0
    2bda:	b1 1d       	adc	r27, r1
    2bdc:	63 9f       	mul	r22, r19
    2bde:	aa 27       	eor	r26, r26
    2be0:	f0 0d       	add	r31, r0
    2be2:	b1 1d       	adc	r27, r1
    2be4:	aa 1f       	adc	r26, r26
    2be6:	64 9f       	mul	r22, r20
    2be8:	66 27       	eor	r22, r22
    2bea:	b0 0d       	add	r27, r0
    2bec:	a1 1d       	adc	r26, r1
    2bee:	66 1f       	adc	r22, r22
    2bf0:	82 9f       	mul	r24, r18
    2bf2:	22 27       	eor	r18, r18
    2bf4:	b0 0d       	add	r27, r0
    2bf6:	a1 1d       	adc	r26, r1
    2bf8:	62 1f       	adc	r22, r18
    2bfa:	73 9f       	mul	r23, r19
    2bfc:	b0 0d       	add	r27, r0
    2bfe:	a1 1d       	adc	r26, r1
    2c00:	62 1f       	adc	r22, r18
    2c02:	83 9f       	mul	r24, r19
    2c04:	a0 0d       	add	r26, r0
    2c06:	61 1d       	adc	r22, r1
    2c08:	22 1f       	adc	r18, r18
    2c0a:	74 9f       	mul	r23, r20
    2c0c:	33 27       	eor	r19, r19
    2c0e:	a0 0d       	add	r26, r0
    2c10:	61 1d       	adc	r22, r1
    2c12:	23 1f       	adc	r18, r19
    2c14:	84 9f       	mul	r24, r20
    2c16:	60 0d       	add	r22, r0
    2c18:	21 1d       	adc	r18, r1
    2c1a:	82 2f       	mov	r24, r18
    2c1c:	76 2f       	mov	r23, r22
    2c1e:	6a 2f       	mov	r22, r26
    2c20:	11 24       	eor	r1, r1
    2c22:	9f 57       	subi	r25, 0x7F	; 127
    2c24:	50 40       	sbci	r21, 0x00	; 0
    2c26:	8a f0       	brmi	.+34     	; 0x2c4a <__mulsf3_pse+0x84>
    2c28:	e1 f0       	breq	.+56     	; 0x2c62 <__mulsf3_pse+0x9c>
    2c2a:	88 23       	and	r24, r24
    2c2c:	4a f0       	brmi	.+18     	; 0x2c40 <__mulsf3_pse+0x7a>
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	bb 1f       	adc	r27, r27
    2c34:	66 1f       	adc	r22, r22
    2c36:	77 1f       	adc	r23, r23
    2c38:	88 1f       	adc	r24, r24
    2c3a:	91 50       	subi	r25, 0x01	; 1
    2c3c:	50 40       	sbci	r21, 0x00	; 0
    2c3e:	a9 f7       	brne	.-22     	; 0x2c2a <__mulsf3_pse+0x64>
    2c40:	9e 3f       	cpi	r25, 0xFE	; 254
    2c42:	51 05       	cpc	r21, r1
    2c44:	70 f0       	brcs	.+28     	; 0x2c62 <__mulsf3_pse+0x9c>
    2c46:	39 ce       	rjmp	.-910    	; 0x28ba <__fp_inf>
    2c48:	21 cf       	rjmp	.-446    	; 0x2a8c <__fp_szero>
    2c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c4c:	ec f3       	brlt	.-6      	; 0x2c48 <__mulsf3_pse+0x82>
    2c4e:	98 3e       	cpi	r25, 0xE8	; 232
    2c50:	dc f3       	brlt	.-10     	; 0x2c48 <__mulsf3_pse+0x82>
    2c52:	86 95       	lsr	r24
    2c54:	77 95       	ror	r23
    2c56:	67 95       	ror	r22
    2c58:	b7 95       	ror	r27
    2c5a:	f7 95       	ror	r31
    2c5c:	e7 95       	ror	r30
    2c5e:	9f 5f       	subi	r25, 0xFF	; 255
    2c60:	c1 f7       	brne	.-16     	; 0x2c52 <__mulsf3_pse+0x8c>
    2c62:	fe 2b       	or	r31, r30
    2c64:	88 0f       	add	r24, r24
    2c66:	91 1d       	adc	r25, r1
    2c68:	96 95       	lsr	r25
    2c6a:	87 95       	ror	r24
    2c6c:	97 f9       	bld	r25, 7
    2c6e:	08 95       	ret

00002c70 <pow>:
    2c70:	fa 01       	movw	r30, r20
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	30 96       	adiw	r30, 0x00	; 0
    2c78:	21 05       	cpc	r18, r1
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	99 f1       	breq	.+102    	; 0x2ce4 <pow+0x74>
    2c7e:	61 15       	cp	r22, r1
    2c80:	71 05       	cpc	r23, r1
    2c82:	61 f4       	brne	.+24     	; 0x2c9c <pow+0x2c>
    2c84:	80 38       	cpi	r24, 0x80	; 128
    2c86:	bf e3       	ldi	r27, 0x3F	; 63
    2c88:	9b 07       	cpc	r25, r27
    2c8a:	49 f1       	breq	.+82     	; 0x2cde <pow+0x6e>
    2c8c:	68 94       	set
    2c8e:	90 38       	cpi	r25, 0x80	; 128
    2c90:	81 05       	cpc	r24, r1
    2c92:	61 f0       	breq	.+24     	; 0x2cac <pow+0x3c>
    2c94:	80 38       	cpi	r24, 0x80	; 128
    2c96:	bf ef       	ldi	r27, 0xFF	; 255
    2c98:	9b 07       	cpc	r25, r27
    2c9a:	41 f0       	breq	.+16     	; 0x2cac <pow+0x3c>
    2c9c:	99 23       	and	r25, r25
    2c9e:	42 f5       	brpl	.+80     	; 0x2cf0 <pow+0x80>
    2ca0:	ff 3f       	cpi	r31, 0xFF	; 255
    2ca2:	e1 05       	cpc	r30, r1
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	21 05       	cpc	r18, r1
    2ca8:	11 f1       	breq	.+68     	; 0x2cee <pow+0x7e>
    2caa:	e8 94       	clt
    2cac:	08 94       	sec
    2cae:	e7 95       	ror	r30
    2cb0:	d9 01       	movw	r26, r18
    2cb2:	aa 23       	and	r26, r26
    2cb4:	29 f4       	brne	.+10     	; 0x2cc0 <pow+0x50>
    2cb6:	ab 2f       	mov	r26, r27
    2cb8:	be 2f       	mov	r27, r30
    2cba:	f8 5f       	subi	r31, 0xF8	; 248
    2cbc:	d0 f3       	brcs	.-12     	; 0x2cb2 <pow+0x42>
    2cbe:	10 c0       	rjmp	.+32     	; 0x2ce0 <pow+0x70>
    2cc0:	ff 5f       	subi	r31, 0xFF	; 255
    2cc2:	70 f4       	brcc	.+28     	; 0x2ce0 <pow+0x70>
    2cc4:	a6 95       	lsr	r26
    2cc6:	e0 f7       	brcc	.-8      	; 0x2cc0 <pow+0x50>
    2cc8:	f7 39       	cpi	r31, 0x97	; 151
    2cca:	50 f0       	brcs	.+20     	; 0x2ce0 <pow+0x70>
    2ccc:	19 f0       	breq	.+6      	; 0x2cd4 <pow+0x64>
    2cce:	ff 3a       	cpi	r31, 0xAF	; 175
    2cd0:	38 f4       	brcc	.+14     	; 0x2ce0 <pow+0x70>
    2cd2:	9f 77       	andi	r25, 0x7F	; 127
    2cd4:	9f 93       	push	r25
    2cd6:	0c d0       	rcall	.+24     	; 0x2cf0 <pow+0x80>
    2cd8:	0f 90       	pop	r0
    2cda:	07 fc       	sbrc	r0, 7
    2cdc:	90 58       	subi	r25, 0x80	; 128
    2cde:	08 95       	ret
    2ce0:	3e f0       	brts	.+14     	; 0x2cf0 <pow+0x80>
    2ce2:	1a ce       	rjmp	.-972    	; 0x2918 <__fp_nan>
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	80 e8       	ldi	r24, 0x80	; 128
    2cea:	9f e3       	ldi	r25, 0x3F	; 63
    2cec:	08 95       	ret
    2cee:	4f e7       	ldi	r20, 0x7F	; 127
    2cf0:	9f 77       	andi	r25, 0x7F	; 127
    2cf2:	5f 93       	push	r21
    2cf4:	4f 93       	push	r20
    2cf6:	3f 93       	push	r19
    2cf8:	2f 93       	push	r18
    2cfa:	e4 de       	rcall	.-568    	; 0x2ac4 <log>
    2cfc:	2f 91       	pop	r18
    2cfe:	3f 91       	pop	r19
    2d00:	4f 91       	pop	r20
    2d02:	5f 91       	pop	r21
    2d04:	52 df       	rcall	.-348    	; 0x2baa <__mulsf3>
    2d06:	70 c0       	rjmp	.+224    	; 0x2de8 <exp>

00002d08 <round>:
    2d08:	8f de       	rcall	.-738    	; 0x2a28 <__fp_splitA>
    2d0a:	e0 f0       	brcs	.+56     	; 0x2d44 <round+0x3c>
    2d0c:	9e 37       	cpi	r25, 0x7E	; 126
    2d0e:	d8 f0       	brcs	.+54     	; 0x2d46 <round+0x3e>
    2d10:	96 39       	cpi	r25, 0x96	; 150
    2d12:	b8 f4       	brcc	.+46     	; 0x2d42 <round+0x3a>
    2d14:	9e 38       	cpi	r25, 0x8E	; 142
    2d16:	48 f4       	brcc	.+18     	; 0x2d2a <round+0x22>
    2d18:	67 2f       	mov	r22, r23
    2d1a:	78 2f       	mov	r23, r24
    2d1c:	88 27       	eor	r24, r24
    2d1e:	98 5f       	subi	r25, 0xF8	; 248
    2d20:	f9 cf       	rjmp	.-14     	; 0x2d14 <round+0xc>
    2d22:	86 95       	lsr	r24
    2d24:	77 95       	ror	r23
    2d26:	67 95       	ror	r22
    2d28:	93 95       	inc	r25
    2d2a:	95 39       	cpi	r25, 0x95	; 149
    2d2c:	d0 f3       	brcs	.-12     	; 0x2d22 <round+0x1a>
    2d2e:	b6 2f       	mov	r27, r22
    2d30:	b1 70       	andi	r27, 0x01	; 1
    2d32:	6b 0f       	add	r22, r27
    2d34:	71 1d       	adc	r23, r1
    2d36:	81 1d       	adc	r24, r1
    2d38:	20 f4       	brcc	.+8      	; 0x2d42 <round+0x3a>
    2d3a:	87 95       	ror	r24
    2d3c:	77 95       	ror	r23
    2d3e:	67 95       	ror	r22
    2d40:	93 95       	inc	r25
    2d42:	c1 cd       	rjmp	.-1150   	; 0x28c6 <__fp_mintl>
    2d44:	db cd       	rjmp	.-1098   	; 0x28fc <__fp_mpack>
    2d46:	a2 ce       	rjmp	.-700    	; 0x2a8c <__fp_szero>

00002d48 <sin>:
    2d48:	9f 93       	push	r25
    2d4a:	1d de       	rcall	.-966    	; 0x2986 <__fp_rempio2>
    2d4c:	0f 90       	pop	r0
    2d4e:	07 fc       	sbrc	r0, 7
    2d50:	ee 5f       	subi	r30, 0xFE	; 254
    2d52:	51 ce       	rjmp	.-862    	; 0x29f6 <__fp_sinus>
    2d54:	11 f4       	brne	.+4      	; 0x2d5a <sin+0x12>
    2d56:	0e f4       	brtc	.+2      	; 0x2d5a <sin+0x12>
    2d58:	df cd       	rjmp	.-1090   	; 0x2918 <__fp_nan>
    2d5a:	d0 cd       	rjmp	.-1120   	; 0x28fc <__fp_mpack>

00002d5c <sqrt>:
    2d5c:	65 de       	rcall	.-822    	; 0x2a28 <__fp_splitA>
    2d5e:	d0 f3       	brcs	.-12     	; 0x2d54 <sin+0xc>
    2d60:	99 23       	and	r25, r25
    2d62:	d9 f3       	breq	.-10     	; 0x2d5a <sin+0x12>
    2d64:	ce f3       	brts	.-14     	; 0x2d58 <sin+0x10>
    2d66:	9f 57       	subi	r25, 0x7F	; 127
    2d68:	55 0b       	sbc	r21, r21
    2d6a:	87 ff       	sbrs	r24, 7
    2d6c:	69 d0       	rcall	.+210    	; 0x2e40 <__fp_norm2>
    2d6e:	00 24       	eor	r0, r0
    2d70:	a0 e6       	ldi	r26, 0x60	; 96
    2d72:	40 ea       	ldi	r20, 0xA0	; 160
    2d74:	90 01       	movw	r18, r0
    2d76:	80 58       	subi	r24, 0x80	; 128
    2d78:	56 95       	lsr	r21
    2d7a:	97 95       	ror	r25
    2d7c:	28 f4       	brcc	.+10     	; 0x2d88 <sqrt+0x2c>
    2d7e:	80 5c       	subi	r24, 0xC0	; 192
    2d80:	66 0f       	add	r22, r22
    2d82:	77 1f       	adc	r23, r23
    2d84:	88 1f       	adc	r24, r24
    2d86:	20 f0       	brcs	.+8      	; 0x2d90 <sqrt+0x34>
    2d88:	26 17       	cp	r18, r22
    2d8a:	37 07       	cpc	r19, r23
    2d8c:	48 07       	cpc	r20, r24
    2d8e:	30 f4       	brcc	.+12     	; 0x2d9c <sqrt+0x40>
    2d90:	62 1b       	sub	r22, r18
    2d92:	73 0b       	sbc	r23, r19
    2d94:	84 0b       	sbc	r24, r20
    2d96:	20 29       	or	r18, r0
    2d98:	31 29       	or	r19, r1
    2d9a:	4a 2b       	or	r20, r26
    2d9c:	a6 95       	lsr	r26
    2d9e:	17 94       	ror	r1
    2da0:	07 94       	ror	r0
    2da2:	20 25       	eor	r18, r0
    2da4:	31 25       	eor	r19, r1
    2da6:	4a 27       	eor	r20, r26
    2da8:	58 f7       	brcc	.-42     	; 0x2d80 <sqrt+0x24>
    2daa:	66 0f       	add	r22, r22
    2dac:	77 1f       	adc	r23, r23
    2dae:	88 1f       	adc	r24, r24
    2db0:	20 f0       	brcs	.+8      	; 0x2dba <sqrt+0x5e>
    2db2:	26 17       	cp	r18, r22
    2db4:	37 07       	cpc	r19, r23
    2db6:	48 07       	cpc	r20, r24
    2db8:	30 f4       	brcc	.+12     	; 0x2dc6 <sqrt+0x6a>
    2dba:	62 0b       	sbc	r22, r18
    2dbc:	73 0b       	sbc	r23, r19
    2dbe:	84 0b       	sbc	r24, r20
    2dc0:	20 0d       	add	r18, r0
    2dc2:	31 1d       	adc	r19, r1
    2dc4:	41 1d       	adc	r20, r1
    2dc6:	a0 95       	com	r26
    2dc8:	81 f7       	brne	.-32     	; 0x2daa <sqrt+0x4e>
    2dca:	b9 01       	movw	r22, r18
    2dcc:	84 2f       	mov	r24, r20
    2dce:	91 58       	subi	r25, 0x81	; 129
    2dd0:	88 0f       	add	r24, r24
    2dd2:	96 95       	lsr	r25
    2dd4:	87 95       	ror	r24
    2dd6:	08 95       	ret

00002dd8 <square>:
    2dd8:	9b 01       	movw	r18, r22
    2dda:	ac 01       	movw	r20, r24
    2ddc:	e6 ce       	rjmp	.-564    	; 0x2baa <__mulsf3>
    2dde:	19 f4       	brne	.+6      	; 0x2de6 <square+0xe>
    2de0:	0e f0       	brts	.+2      	; 0x2de4 <square+0xc>
    2de2:	6b cd       	rjmp	.-1322   	; 0x28ba <__fp_inf>
    2de4:	52 ce       	rjmp	.-860    	; 0x2a8a <__fp_zero>
    2de6:	98 cd       	rjmp	.-1232   	; 0x2918 <__fp_nan>

00002de8 <exp>:
    2de8:	1f de       	rcall	.-962    	; 0x2a28 <__fp_splitA>
    2dea:	c8 f3       	brcs	.-14     	; 0x2dde <square+0x6>
    2dec:	96 38       	cpi	r25, 0x86	; 134
    2dee:	c0 f7       	brcc	.-16     	; 0x2de0 <square+0x8>
    2df0:	07 f8       	bld	r0, 7
    2df2:	0f 92       	push	r0
    2df4:	e8 94       	clt
    2df6:	2b e3       	ldi	r18, 0x3B	; 59
    2df8:	3a ea       	ldi	r19, 0xAA	; 170
    2dfa:	48 eb       	ldi	r20, 0xB8	; 184
    2dfc:	5f e7       	ldi	r21, 0x7F	; 127
    2dfe:	e3 de       	rcall	.-570    	; 0x2bc6 <__mulsf3_pse>
    2e00:	0f 92       	push	r0
    2e02:	0f 92       	push	r0
    2e04:	0f 92       	push	r0
    2e06:	4d b7       	in	r20, 0x3d	; 61
    2e08:	5e b7       	in	r21, 0x3e	; 62
    2e0a:	0f 92       	push	r0
    2e0c:	9b de       	rcall	.-714    	; 0x2b44 <modf>
    2e0e:	e9 e5       	ldi	r30, 0x59	; 89
    2e10:	f1 e0       	ldi	r31, 0x01	; 1
    2e12:	85 dd       	rcall	.-1270   	; 0x291e <__fp_powser>
    2e14:	4f 91       	pop	r20
    2e16:	5f 91       	pop	r21
    2e18:	ef 91       	pop	r30
    2e1a:	ff 91       	pop	r31
    2e1c:	e5 95       	asr	r30
    2e1e:	ee 1f       	adc	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	49 f0       	breq	.+18     	; 0x2e36 <exp+0x4e>
    2e24:	fe 57       	subi	r31, 0x7E	; 126
    2e26:	e0 68       	ori	r30, 0x80	; 128
    2e28:	44 27       	eor	r20, r20
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	44 1f       	adc	r20, r20
    2e2e:	fa 95       	dec	r31
    2e30:	e1 f7       	brne	.-8      	; 0x2e2a <exp+0x42>
    2e32:	41 95       	neg	r20
    2e34:	55 0b       	sbc	r21, r21
    2e36:	1e d0       	rcall	.+60     	; 0x2e74 <ldexp>
    2e38:	0f 90       	pop	r0
    2e3a:	07 fe       	sbrs	r0, 7
    2e3c:	31 ce       	rjmp	.-926    	; 0x2aa0 <inverse>
    2e3e:	08 95       	ret

00002e40 <__fp_norm2>:
    2e40:	91 50       	subi	r25, 0x01	; 1
    2e42:	50 40       	sbci	r21, 0x00	; 0
    2e44:	66 0f       	add	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	88 1f       	adc	r24, r24
    2e4a:	d2 f7       	brpl	.-12     	; 0x2e40 <__fp_norm2>
    2e4c:	08 95       	ret

00002e4e <__fp_powsodd>:
    2e4e:	9f 93       	push	r25
    2e50:	8f 93       	push	r24
    2e52:	7f 93       	push	r23
    2e54:	6f 93       	push	r22
    2e56:	ff 93       	push	r31
    2e58:	ef 93       	push	r30
    2e5a:	9b 01       	movw	r18, r22
    2e5c:	ac 01       	movw	r20, r24
    2e5e:	a5 de       	rcall	.-694    	; 0x2baa <__mulsf3>
    2e60:	ef 91       	pop	r30
    2e62:	ff 91       	pop	r31
    2e64:	5c dd       	rcall	.-1352   	; 0x291e <__fp_powser>
    2e66:	2f 91       	pop	r18
    2e68:	3f 91       	pop	r19
    2e6a:	4f 91       	pop	r20
    2e6c:	5f 91       	pop	r21
    2e6e:	9d ce       	rjmp	.-710    	; 0x2baa <__mulsf3>
    2e70:	24 cd       	rjmp	.-1464   	; 0x28ba <__fp_inf>
    2e72:	44 cd       	rjmp	.-1400   	; 0x28fc <__fp_mpack>

00002e74 <ldexp>:
    2e74:	d9 dd       	rcall	.-1102   	; 0x2a28 <__fp_splitA>
    2e76:	e8 f3       	brcs	.-6      	; 0x2e72 <__fp_powsodd+0x24>
    2e78:	99 23       	and	r25, r25
    2e7a:	d9 f3       	breq	.-10     	; 0x2e72 <__fp_powsodd+0x24>
    2e7c:	94 0f       	add	r25, r20
    2e7e:	51 1d       	adc	r21, r1
    2e80:	bb f3       	brvs	.-18     	; 0x2e70 <__fp_powsodd+0x22>
    2e82:	91 50       	subi	r25, 0x01	; 1
    2e84:	50 40       	sbci	r21, 0x00	; 0
    2e86:	94 f0       	brlt	.+36     	; 0x2eac <ldexp+0x38>
    2e88:	59 f0       	breq	.+22     	; 0x2ea0 <ldexp+0x2c>
    2e8a:	88 23       	and	r24, r24
    2e8c:	32 f0       	brmi	.+12     	; 0x2e9a <ldexp+0x26>
    2e8e:	66 0f       	add	r22, r22
    2e90:	77 1f       	adc	r23, r23
    2e92:	88 1f       	adc	r24, r24
    2e94:	91 50       	subi	r25, 0x01	; 1
    2e96:	50 40       	sbci	r21, 0x00	; 0
    2e98:	c1 f7       	brne	.-16     	; 0x2e8a <ldexp+0x16>
    2e9a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e9c:	51 05       	cpc	r21, r1
    2e9e:	44 f7       	brge	.-48     	; 0x2e70 <__fp_powsodd+0x22>
    2ea0:	88 0f       	add	r24, r24
    2ea2:	91 1d       	adc	r25, r1
    2ea4:	96 95       	lsr	r25
    2ea6:	87 95       	ror	r24
    2ea8:	97 f9       	bld	r25, 7
    2eaa:	08 95       	ret
    2eac:	5f 3f       	cpi	r21, 0xFF	; 255
    2eae:	ac f0       	brlt	.+42     	; 0x2eda <ldexp+0x66>
    2eb0:	98 3e       	cpi	r25, 0xE8	; 232
    2eb2:	9c f0       	brlt	.+38     	; 0x2eda <ldexp+0x66>
    2eb4:	bb 27       	eor	r27, r27
    2eb6:	86 95       	lsr	r24
    2eb8:	77 95       	ror	r23
    2eba:	67 95       	ror	r22
    2ebc:	b7 95       	ror	r27
    2ebe:	08 f4       	brcc	.+2      	; 0x2ec2 <ldexp+0x4e>
    2ec0:	b1 60       	ori	r27, 0x01	; 1
    2ec2:	93 95       	inc	r25
    2ec4:	c1 f7       	brne	.-16     	; 0x2eb6 <ldexp+0x42>
    2ec6:	bb 0f       	add	r27, r27
    2ec8:	58 f7       	brcc	.-42     	; 0x2ea0 <ldexp+0x2c>
    2eca:	11 f4       	brne	.+4      	; 0x2ed0 <ldexp+0x5c>
    2ecc:	60 ff       	sbrs	r22, 0
    2ece:	e8 cf       	rjmp	.-48     	; 0x2ea0 <ldexp+0x2c>
    2ed0:	6f 5f       	subi	r22, 0xFF	; 255
    2ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed8:	e3 cf       	rjmp	.-58     	; 0x2ea0 <ldexp+0x2c>
    2eda:	d8 cd       	rjmp	.-1104   	; 0x2a8c <__fp_szero>

00002edc <__tablejump2__>:
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31

00002ee0 <__tablejump__>:
    2ee0:	05 90       	lpm	r0, Z+
    2ee2:	f4 91       	lpm	r31, Z
    2ee4:	e0 2d       	mov	r30, r0
    2ee6:	09 94       	ijmp

00002ee8 <malloc>:
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	91 05       	cpc	r25, r1
    2ef0:	10 f4       	brcc	.+4      	; 0x2ef6 <malloc+0xe>
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	e0 91 ae 03 	lds	r30, 0x03AE
    2efa:	f0 91 af 03 	lds	r31, 0x03AF
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	a0 e0       	ldi	r26, 0x00	; 0
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	30 97       	sbiw	r30, 0x00	; 0
    2f08:	39 f1       	breq	.+78     	; 0x2f58 <malloc+0x70>
    2f0a:	40 81       	ld	r20, Z
    2f0c:	51 81       	ldd	r21, Z+1	; 0x01
    2f0e:	48 17       	cp	r20, r24
    2f10:	59 07       	cpc	r21, r25
    2f12:	b8 f0       	brcs	.+46     	; 0x2f42 <malloc+0x5a>
    2f14:	48 17       	cp	r20, r24
    2f16:	59 07       	cpc	r21, r25
    2f18:	71 f4       	brne	.+28     	; 0x2f36 <malloc+0x4e>
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	10 97       	sbiw	r26, 0x00	; 0
    2f20:	29 f0       	breq	.+10     	; 0x2f2c <malloc+0x44>
    2f22:	13 96       	adiw	r26, 0x03	; 3
    2f24:	9c 93       	st	X, r25
    2f26:	8e 93       	st	-X, r24
    2f28:	12 97       	sbiw	r26, 0x02	; 2
    2f2a:	2c c0       	rjmp	.+88     	; 0x2f84 <malloc+0x9c>
    2f2c:	90 93 af 03 	sts	0x03AF, r25
    2f30:	80 93 ae 03 	sts	0x03AE, r24
    2f34:	27 c0       	rjmp	.+78     	; 0x2f84 <malloc+0x9c>
    2f36:	21 15       	cp	r18, r1
    2f38:	31 05       	cpc	r19, r1
    2f3a:	31 f0       	breq	.+12     	; 0x2f48 <malloc+0x60>
    2f3c:	42 17       	cp	r20, r18
    2f3e:	53 07       	cpc	r21, r19
    2f40:	18 f0       	brcs	.+6      	; 0x2f48 <malloc+0x60>
    2f42:	a9 01       	movw	r20, r18
    2f44:	db 01       	movw	r26, r22
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <malloc+0x62>
    2f48:	ef 01       	movw	r28, r30
    2f4a:	9a 01       	movw	r18, r20
    2f4c:	bd 01       	movw	r22, r26
    2f4e:	df 01       	movw	r26, r30
    2f50:	02 80       	ldd	r0, Z+2	; 0x02
    2f52:	f3 81       	ldd	r31, Z+3	; 0x03
    2f54:	e0 2d       	mov	r30, r0
    2f56:	d7 cf       	rjmp	.-82     	; 0x2f06 <malloc+0x1e>
    2f58:	21 15       	cp	r18, r1
    2f5a:	31 05       	cpc	r19, r1
    2f5c:	f9 f0       	breq	.+62     	; 0x2f9c <malloc+0xb4>
    2f5e:	28 1b       	sub	r18, r24
    2f60:	39 0b       	sbc	r19, r25
    2f62:	24 30       	cpi	r18, 0x04	; 4
    2f64:	31 05       	cpc	r19, r1
    2f66:	80 f4       	brcc	.+32     	; 0x2f88 <malloc+0xa0>
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6c:	61 15       	cp	r22, r1
    2f6e:	71 05       	cpc	r23, r1
    2f70:	21 f0       	breq	.+8      	; 0x2f7a <malloc+0x92>
    2f72:	fb 01       	movw	r30, r22
    2f74:	93 83       	std	Z+3, r25	; 0x03
    2f76:	82 83       	std	Z+2, r24	; 0x02
    2f78:	04 c0       	rjmp	.+8      	; 0x2f82 <malloc+0x9a>
    2f7a:	90 93 af 03 	sts	0x03AF, r25
    2f7e:	80 93 ae 03 	sts	0x03AE, r24
    2f82:	fe 01       	movw	r30, r28
    2f84:	32 96       	adiw	r30, 0x02	; 2
    2f86:	44 c0       	rjmp	.+136    	; 0x3010 <malloc+0x128>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e2 0f       	add	r30, r18
    2f8c:	f3 1f       	adc	r31, r19
    2f8e:	81 93       	st	Z+, r24
    2f90:	91 93       	st	Z+, r25
    2f92:	22 50       	subi	r18, 0x02	; 2
    2f94:	31 09       	sbc	r19, r1
    2f96:	39 83       	std	Y+1, r19	; 0x01
    2f98:	28 83       	st	Y, r18
    2f9a:	3a c0       	rjmp	.+116    	; 0x3010 <malloc+0x128>
    2f9c:	20 91 ac 03 	lds	r18, 0x03AC
    2fa0:	30 91 ad 03 	lds	r19, 0x03AD
    2fa4:	23 2b       	or	r18, r19
    2fa6:	41 f4       	brne	.+16     	; 0x2fb8 <malloc+0xd0>
    2fa8:	20 91 04 01 	lds	r18, 0x0104
    2fac:	30 91 05 01 	lds	r19, 0x0105
    2fb0:	30 93 ad 03 	sts	0x03AD, r19
    2fb4:	20 93 ac 03 	sts	0x03AC, r18
    2fb8:	20 91 02 01 	lds	r18, 0x0102
    2fbc:	30 91 03 01 	lds	r19, 0x0103
    2fc0:	21 15       	cp	r18, r1
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	41 f4       	brne	.+16     	; 0x2fd6 <malloc+0xee>
    2fc6:	2d b7       	in	r18, 0x3d	; 61
    2fc8:	3e b7       	in	r19, 0x3e	; 62
    2fca:	40 91 06 01 	lds	r20, 0x0106
    2fce:	50 91 07 01 	lds	r21, 0x0107
    2fd2:	24 1b       	sub	r18, r20
    2fd4:	35 0b       	sbc	r19, r21
    2fd6:	e0 91 ac 03 	lds	r30, 0x03AC
    2fda:	f0 91 ad 03 	lds	r31, 0x03AD
    2fde:	e2 17       	cp	r30, r18
    2fe0:	f3 07       	cpc	r31, r19
    2fe2:	a0 f4       	brcc	.+40     	; 0x300c <malloc+0x124>
    2fe4:	2e 1b       	sub	r18, r30
    2fe6:	3f 0b       	sbc	r19, r31
    2fe8:	28 17       	cp	r18, r24
    2fea:	39 07       	cpc	r19, r25
    2fec:	78 f0       	brcs	.+30     	; 0x300c <malloc+0x124>
    2fee:	ac 01       	movw	r20, r24
    2ff0:	4e 5f       	subi	r20, 0xFE	; 254
    2ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff4:	24 17       	cp	r18, r20
    2ff6:	35 07       	cpc	r19, r21
    2ff8:	48 f0       	brcs	.+18     	; 0x300c <malloc+0x124>
    2ffa:	4e 0f       	add	r20, r30
    2ffc:	5f 1f       	adc	r21, r31
    2ffe:	50 93 ad 03 	sts	0x03AD, r21
    3002:	40 93 ac 03 	sts	0x03AC, r20
    3006:	81 93       	st	Z+, r24
    3008:	91 93       	st	Z+, r25
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <malloc+0x128>
    300c:	e0 e0       	ldi	r30, 0x00	; 0
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	cf 01       	movw	r24, r30
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	08 95       	ret

00003018 <free>:
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	09 f4       	brne	.+2      	; 0x3022 <free+0xa>
    3020:	87 c0       	rjmp	.+270    	; 0x3130 <free+0x118>
    3022:	fc 01       	movw	r30, r24
    3024:	32 97       	sbiw	r30, 0x02	; 2
    3026:	13 82       	std	Z+3, r1	; 0x03
    3028:	12 82       	std	Z+2, r1	; 0x02
    302a:	c0 91 ae 03 	lds	r28, 0x03AE
    302e:	d0 91 af 03 	lds	r29, 0x03AF
    3032:	20 97       	sbiw	r28, 0x00	; 0
    3034:	81 f4       	brne	.+32     	; 0x3056 <free+0x3e>
    3036:	20 81       	ld	r18, Z
    3038:	31 81       	ldd	r19, Z+1	; 0x01
    303a:	28 0f       	add	r18, r24
    303c:	39 1f       	adc	r19, r25
    303e:	80 91 ac 03 	lds	r24, 0x03AC
    3042:	90 91 ad 03 	lds	r25, 0x03AD
    3046:	82 17       	cp	r24, r18
    3048:	93 07       	cpc	r25, r19
    304a:	79 f5       	brne	.+94     	; 0x30aa <free+0x92>
    304c:	f0 93 ad 03 	sts	0x03AD, r31
    3050:	e0 93 ac 03 	sts	0x03AC, r30
    3054:	6d c0       	rjmp	.+218    	; 0x3130 <free+0x118>
    3056:	de 01       	movw	r26, r28
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	ae 17       	cp	r26, r30
    305e:	bf 07       	cpc	r27, r31
    3060:	50 f4       	brcc	.+20     	; 0x3076 <free+0x5e>
    3062:	12 96       	adiw	r26, 0x02	; 2
    3064:	4d 91       	ld	r20, X+
    3066:	5c 91       	ld	r21, X
    3068:	13 97       	sbiw	r26, 0x03	; 3
    306a:	9d 01       	movw	r18, r26
    306c:	41 15       	cp	r20, r1
    306e:	51 05       	cpc	r21, r1
    3070:	09 f1       	breq	.+66     	; 0x30b4 <free+0x9c>
    3072:	da 01       	movw	r26, r20
    3074:	f3 cf       	rjmp	.-26     	; 0x305c <free+0x44>
    3076:	b3 83       	std	Z+3, r27	; 0x03
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	40 81       	ld	r20, Z
    307c:	51 81       	ldd	r21, Z+1	; 0x01
    307e:	84 0f       	add	r24, r20
    3080:	95 1f       	adc	r25, r21
    3082:	8a 17       	cp	r24, r26
    3084:	9b 07       	cpc	r25, r27
    3086:	71 f4       	brne	.+28     	; 0x30a4 <free+0x8c>
    3088:	8d 91       	ld	r24, X+
    308a:	9c 91       	ld	r25, X
    308c:	11 97       	sbiw	r26, 0x01	; 1
    308e:	84 0f       	add	r24, r20
    3090:	95 1f       	adc	r25, r21
    3092:	02 96       	adiw	r24, 0x02	; 2
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    3098:	12 96       	adiw	r26, 0x02	; 2
    309a:	8d 91       	ld	r24, X+
    309c:	9c 91       	ld	r25, X
    309e:	13 97       	sbiw	r26, 0x03	; 3
    30a0:	93 83       	std	Z+3, r25	; 0x03
    30a2:	82 83       	std	Z+2, r24	; 0x02
    30a4:	21 15       	cp	r18, r1
    30a6:	31 05       	cpc	r19, r1
    30a8:	29 f4       	brne	.+10     	; 0x30b4 <free+0x9c>
    30aa:	f0 93 af 03 	sts	0x03AF, r31
    30ae:	e0 93 ae 03 	sts	0x03AE, r30
    30b2:	3e c0       	rjmp	.+124    	; 0x3130 <free+0x118>
    30b4:	d9 01       	movw	r26, r18
    30b6:	13 96       	adiw	r26, 0x03	; 3
    30b8:	fc 93       	st	X, r31
    30ba:	ee 93       	st	-X, r30
    30bc:	12 97       	sbiw	r26, 0x02	; 2
    30be:	4d 91       	ld	r20, X+
    30c0:	5d 91       	ld	r21, X+
    30c2:	a4 0f       	add	r26, r20
    30c4:	b5 1f       	adc	r27, r21
    30c6:	ea 17       	cp	r30, r26
    30c8:	fb 07       	cpc	r31, r27
    30ca:	79 f4       	brne	.+30     	; 0x30ea <free+0xd2>
    30cc:	80 81       	ld	r24, Z
    30ce:	91 81       	ldd	r25, Z+1	; 0x01
    30d0:	84 0f       	add	r24, r20
    30d2:	95 1f       	adc	r25, r21
    30d4:	02 96       	adiw	r24, 0x02	; 2
    30d6:	d9 01       	movw	r26, r18
    30d8:	11 96       	adiw	r26, 0x01	; 1
    30da:	9c 93       	st	X, r25
    30dc:	8e 93       	st	-X, r24
    30de:	82 81       	ldd	r24, Z+2	; 0x02
    30e0:	93 81       	ldd	r25, Z+3	; 0x03
    30e2:	13 96       	adiw	r26, 0x03	; 3
    30e4:	9c 93       	st	X, r25
    30e6:	8e 93       	st	-X, r24
    30e8:	12 97       	sbiw	r26, 0x02	; 2
    30ea:	e0 e0       	ldi	r30, 0x00	; 0
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	19 f0       	breq	.+6      	; 0x30fc <free+0xe4>
    30f6:	fe 01       	movw	r30, r28
    30f8:	ec 01       	movw	r28, r24
    30fa:	f9 cf       	rjmp	.-14     	; 0x30ee <free+0xd6>
    30fc:	ce 01       	movw	r24, r28
    30fe:	02 96       	adiw	r24, 0x02	; 2
    3100:	28 81       	ld	r18, Y
    3102:	39 81       	ldd	r19, Y+1	; 0x01
    3104:	82 0f       	add	r24, r18
    3106:	93 1f       	adc	r25, r19
    3108:	20 91 ac 03 	lds	r18, 0x03AC
    310c:	30 91 ad 03 	lds	r19, 0x03AD
    3110:	28 17       	cp	r18, r24
    3112:	39 07       	cpc	r19, r25
    3114:	69 f4       	brne	.+26     	; 0x3130 <free+0x118>
    3116:	30 97       	sbiw	r30, 0x00	; 0
    3118:	29 f4       	brne	.+10     	; 0x3124 <free+0x10c>
    311a:	10 92 af 03 	sts	0x03AF, r1
    311e:	10 92 ae 03 	sts	0x03AE, r1
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <free+0x110>
    3124:	13 82       	std	Z+3, r1	; 0x03
    3126:	12 82       	std	Z+2, r1	; 0x02
    3128:	d0 93 ad 03 	sts	0x03AD, r29
    312c:	c0 93 ac 03 	sts	0x03AC, r28
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	08 95       	ret

00003136 <strtod>:
    3136:	4f 92       	push	r4
    3138:	5f 92       	push	r5
    313a:	6f 92       	push	r6
    313c:	7f 92       	push	r7
    313e:	8f 92       	push	r8
    3140:	9f 92       	push	r9
    3142:	af 92       	push	r10
    3144:	bf 92       	push	r11
    3146:	cf 92       	push	r12
    3148:	df 92       	push	r13
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	8b 01       	movw	r16, r22
    3158:	61 15       	cp	r22, r1
    315a:	71 05       	cpc	r23, r1
    315c:	21 f0       	breq	.+8      	; 0x3166 <strtod+0x30>
    315e:	db 01       	movw	r26, r22
    3160:	8c 93       	st	X, r24
    3162:	11 96       	adiw	r26, 0x01	; 1
    3164:	9c 93       	st	X, r25
    3166:	ec 01       	movw	r28, r24
    3168:	5e 01       	movw	r10, r28
    316a:	bf ef       	ldi	r27, 0xFF	; 255
    316c:	ab 1a       	sub	r10, r27
    316e:	bb 0a       	sbc	r11, r27
    3170:	75 01       	movw	r14, r10
    3172:	c8 80       	ld	r12, Y
    3174:	8c 2d       	mov	r24, r12
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 18 1a 	call	0x3430	; 0x3430 <isspace>
    317c:	89 2b       	or	r24, r25
    317e:	11 f0       	breq	.+4      	; 0x3184 <strtod+0x4e>
    3180:	e5 01       	movw	r28, r10
    3182:	f2 cf       	rjmp	.-28     	; 0x3168 <strtod+0x32>
    3184:	ed e2       	ldi	r30, 0x2D	; 45
    3186:	ce 12       	cpse	r12, r30
    3188:	08 c0       	rjmp	.+16     	; 0x319a <strtod+0x64>
    318a:	7e 01       	movw	r14, r28
    318c:	f2 e0       	ldi	r31, 0x02	; 2
    318e:	ef 0e       	add	r14, r31
    3190:	f1 1c       	adc	r15, r1
    3192:	c9 80       	ldd	r12, Y+1	; 0x01
    3194:	dd 24       	eor	r13, r13
    3196:	d3 94       	inc	r13
    3198:	09 c0       	rjmp	.+18     	; 0x31ac <strtod+0x76>
    319a:	2b e2       	ldi	r18, 0x2B	; 43
    319c:	c2 12       	cpse	r12, r18
    319e:	05 c0       	rjmp	.+10     	; 0x31aa <strtod+0x74>
    31a0:	7e 01       	movw	r14, r28
    31a2:	42 e0       	ldi	r20, 0x02	; 2
    31a4:	e4 0e       	add	r14, r20
    31a6:	f1 1c       	adc	r15, r1
    31a8:	c9 80       	ldd	r12, Y+1	; 0x01
    31aa:	d1 2c       	mov	r13, r1
    31ac:	e7 01       	movw	r28, r14
    31ae:	21 97       	sbiw	r28, 0x01	; 1
    31b0:	43 e0       	ldi	r20, 0x03	; 3
    31b2:	50 e0       	ldi	r21, 0x00	; 0
    31b4:	69 e8       	ldi	r22, 0x89	; 137
    31b6:	71 e0       	ldi	r23, 0x01	; 1
    31b8:	ce 01       	movw	r24, r28
    31ba:	0e 94 20 1a 	call	0x3440	; 0x3440 <strncasecmp_P>
    31be:	89 2b       	or	r24, r25
    31c0:	d1 f4       	brne	.+52     	; 0x31f6 <strtod+0xc0>
    31c2:	e7 01       	movw	r28, r14
    31c4:	22 96       	adiw	r28, 0x02	; 2
    31c6:	45 e0       	ldi	r20, 0x05	; 5
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	64 e8       	ldi	r22, 0x84	; 132
    31cc:	71 e0       	ldi	r23, 0x01	; 1
    31ce:	ce 01       	movw	r24, r28
    31d0:	0e 94 20 1a 	call	0x3440	; 0x3440 <strncasecmp_P>
    31d4:	89 2b       	or	r24, r25
    31d6:	11 f4       	brne	.+4      	; 0x31dc <strtod+0xa6>
    31d8:	e7 01       	movw	r28, r14
    31da:	27 96       	adiw	r28, 0x07	; 7
    31dc:	01 15       	cp	r16, r1
    31de:	11 05       	cpc	r17, r1
    31e0:	19 f0       	breq	.+6      	; 0x31e8 <strtod+0xb2>
    31e2:	d8 01       	movw	r26, r16
    31e4:	cd 93       	st	X+, r28
    31e6:	dc 93       	st	X, r29
    31e8:	d1 10       	cpse	r13, r1
    31ea:	08 c1       	rjmp	.+528    	; 0x33fc <strtod+0x2c6>
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	80 e8       	ldi	r24, 0x80	; 128
    31f2:	9f e7       	ldi	r25, 0x7F	; 127
    31f4:	0c c1       	rjmp	.+536    	; 0x340e <strtod+0x2d8>
    31f6:	43 e0       	ldi	r20, 0x03	; 3
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	61 e8       	ldi	r22, 0x81	; 129
    31fc:	71 e0       	ldi	r23, 0x01	; 1
    31fe:	ce 01       	movw	r24, r28
    3200:	0e 94 20 1a 	call	0x3440	; 0x3440 <strncasecmp_P>
    3204:	89 2b       	or	r24, r25
    3206:	59 f4       	brne	.+22     	; 0x321e <strtod+0xe8>
    3208:	01 15       	cp	r16, r1
    320a:	11 05       	cpc	r17, r1
    320c:	09 f4       	brne	.+2      	; 0x3210 <strtod+0xda>
    320e:	fb c0       	rjmp	.+502    	; 0x3406 <strtod+0x2d0>
    3210:	b2 e0       	ldi	r27, 0x02	; 2
    3212:	eb 0e       	add	r14, r27
    3214:	f1 1c       	adc	r15, r1
    3216:	f8 01       	movw	r30, r16
    3218:	f1 82       	std	Z+1, r15	; 0x01
    321a:	e0 82       	st	Z, r14
    321c:	f4 c0       	rjmp	.+488    	; 0x3406 <strtod+0x2d0>
    321e:	f7 01       	movw	r30, r14
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	cb 01       	movw	r24, r22
    3226:	c0 e0       	ldi	r28, 0x00	; 0
    3228:	d0 e0       	ldi	r29, 0x00	; 0
    322a:	7f 01       	movw	r14, r30
    322c:	a0 ed       	ldi	r26, 0xD0	; 208
    322e:	aa 2e       	mov	r10, r26
    3230:	ac 0c       	add	r10, r12
    3232:	29 e0       	ldi	r18, 0x09	; 9
    3234:	2a 15       	cp	r18, r10
    3236:	30 f1       	brcs	.+76     	; 0x3284 <strtod+0x14e>
    3238:	4d 2d       	mov	r20, r13
    323a:	42 60       	ori	r20, 0x02	; 2
    323c:	b4 2e       	mov	r11, r20
    323e:	2d 2d       	mov	r18, r13
    3240:	28 70       	andi	r18, 0x08	; 8
    3242:	d2 fe       	sbrs	r13, 2
    3244:	04 c0       	rjmp	.+8      	; 0x324e <strtod+0x118>
    3246:	21 11       	cpse	r18, r1
    3248:	25 c0       	rjmp	.+74     	; 0x3294 <strtod+0x15e>
    324a:	21 96       	adiw	r28, 0x01	; 1
    324c:	23 c0       	rjmp	.+70     	; 0x3294 <strtod+0x15e>
    324e:	21 11       	cpse	r18, r1
    3250:	21 97       	sbiw	r28, 0x01	; 1
    3252:	a5 e0       	ldi	r26, 0x05	; 5
    3254:	b0 e0       	ldi	r27, 0x00	; 0
    3256:	9b 01       	movw	r18, r22
    3258:	ac 01       	movw	r20, r24
    325a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <__muluhisi3>
    325e:	66 0f       	add	r22, r22
    3260:	77 1f       	adc	r23, r23
    3262:	88 1f       	adc	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	6a 0d       	add	r22, r10
    3268:	71 1d       	adc	r23, r1
    326a:	81 1d       	adc	r24, r1
    326c:	91 1d       	adc	r25, r1
    326e:	68 39       	cpi	r22, 0x98	; 152
    3270:	a9 e9       	ldi	r26, 0x99	; 153
    3272:	7a 07       	cpc	r23, r26
    3274:	8a 07       	cpc	r24, r26
    3276:	a9 e1       	ldi	r26, 0x19	; 25
    3278:	9a 07       	cpc	r25, r26
    327a:	60 f0       	brcs	.+24     	; 0x3294 <strtod+0x15e>
    327c:	bd 2d       	mov	r27, r13
    327e:	b6 60       	ori	r27, 0x06	; 6
    3280:	bb 2e       	mov	r11, r27
    3282:	08 c0       	rjmp	.+16     	; 0x3294 <strtod+0x15e>
    3284:	2e ef       	ldi	r18, 0xFE	; 254
    3286:	a2 12       	cpse	r10, r18
    3288:	0a c0       	rjmp	.+20     	; 0x329e <strtod+0x168>
    328a:	d3 fc       	sbrc	r13, 3
    328c:	50 c0       	rjmp	.+160    	; 0x332e <strtod+0x1f8>
    328e:	4d 2d       	mov	r20, r13
    3290:	48 60       	ori	r20, 0x08	; 8
    3292:	b4 2e       	mov	r11, r20
    3294:	31 96       	adiw	r30, 0x01	; 1
    3296:	d7 01       	movw	r26, r14
    3298:	cc 90       	ld	r12, X
    329a:	db 2c       	mov	r13, r11
    329c:	c6 cf       	rjmp	.-116    	; 0x322a <strtod+0xf4>
    329e:	2c 2d       	mov	r18, r12
    32a0:	2f 7d       	andi	r18, 0xDF	; 223
    32a2:	25 34       	cpi	r18, 0x45	; 69
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <strtod+0x172>
    32a6:	43 c0       	rjmp	.+134    	; 0x332e <strtod+0x1f8>
    32a8:	a0 81       	ld	r26, Z
    32aa:	ad 32       	cpi	r26, 0x2D	; 45
    32ac:	41 f4       	brne	.+16     	; 0x32be <strtod+0x188>
    32ae:	bd 2d       	mov	r27, r13
    32b0:	b0 61       	ori	r27, 0x10	; 16
    32b2:	db 2e       	mov	r13, r27
    32b4:	7f 01       	movw	r14, r30
    32b6:	22 e0       	ldi	r18, 0x02	; 2
    32b8:	e2 0e       	add	r14, r18
    32ba:	f1 1c       	adc	r15, r1
    32bc:	0c c0       	rjmp	.+24     	; 0x32d6 <strtod+0x1a0>
    32be:	7f 01       	movw	r14, r30
    32c0:	ab 32       	cpi	r26, 0x2B	; 43
    32c2:	31 f0       	breq	.+12     	; 0x32d0 <strtod+0x19a>
    32c4:	4f ef       	ldi	r20, 0xFF	; 255
    32c6:	e4 1a       	sub	r14, r20
    32c8:	f4 0a       	sbc	r15, r20
    32ca:	21 e0       	ldi	r18, 0x01	; 1
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	06 c0       	rjmp	.+12     	; 0x32dc <strtod+0x1a6>
    32d0:	a2 e0       	ldi	r26, 0x02	; 2
    32d2:	ea 0e       	add	r14, r26
    32d4:	f1 1c       	adc	r15, r1
    32d6:	a1 81       	ldd	r26, Z+1	; 0x01
    32d8:	22 e0       	ldi	r18, 0x02	; 2
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	a0 53       	subi	r26, 0x30	; 48
    32de:	aa 30       	cpi	r26, 0x0A	; 10
    32e0:	18 f0       	brcs	.+6      	; 0x32e8 <strtod+0x1b2>
    32e2:	e2 1a       	sub	r14, r18
    32e4:	f3 0a       	sbc	r15, r19
    32e6:	23 c0       	rjmp	.+70     	; 0x332e <strtod+0x1f8>
    32e8:	f7 01       	movw	r30, r14
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	20 38       	cpi	r18, 0x80	; 128
    32f0:	bc e0       	ldi	r27, 0x0C	; 12
    32f2:	3b 07       	cpc	r19, r27
    32f4:	5c f4       	brge	.+22     	; 0x330c <strtod+0x1d6>
    32f6:	a9 01       	movw	r20, r18
    32f8:	44 0f       	add	r20, r20
    32fa:	55 1f       	adc	r21, r21
    32fc:	44 0f       	add	r20, r20
    32fe:	55 1f       	adc	r21, r21
    3300:	24 0f       	add	r18, r20
    3302:	35 1f       	adc	r19, r21
    3304:	22 0f       	add	r18, r18
    3306:	33 1f       	adc	r19, r19
    3308:	2a 0f       	add	r18, r26
    330a:	31 1d       	adc	r19, r1
    330c:	af 01       	movw	r20, r30
    330e:	4f 5f       	subi	r20, 0xFF	; 255
    3310:	5f 4f       	sbci	r21, 0xFF	; 255
    3312:	7a 01       	movw	r14, r20
    3314:	a0 81       	ld	r26, Z
    3316:	a0 53       	subi	r26, 0x30	; 48
    3318:	aa 30       	cpi	r26, 0x0A	; 10
    331a:	10 f4       	brcc	.+4      	; 0x3320 <strtod+0x1ea>
    331c:	fa 01       	movw	r30, r20
    331e:	e7 cf       	rjmp	.-50     	; 0x32ee <strtod+0x1b8>
    3320:	d4 fe       	sbrs	r13, 4
    3322:	03 c0       	rjmp	.+6      	; 0x332a <strtod+0x1f4>
    3324:	31 95       	neg	r19
    3326:	21 95       	neg	r18
    3328:	31 09       	sbc	r19, r1
    332a:	c2 0f       	add	r28, r18
    332c:	d3 1f       	adc	r29, r19
    332e:	d1 fe       	sbrs	r13, 1
    3330:	09 c0       	rjmp	.+18     	; 0x3344 <strtod+0x20e>
    3332:	01 15       	cp	r16, r1
    3334:	11 05       	cpc	r17, r1
    3336:	31 f0       	breq	.+12     	; 0x3344 <strtod+0x20e>
    3338:	e1 e0       	ldi	r30, 0x01	; 1
    333a:	ee 1a       	sub	r14, r30
    333c:	f1 08       	sbc	r15, r1
    333e:	d8 01       	movw	r26, r16
    3340:	ed 92       	st	X+, r14
    3342:	fc 92       	st	X, r15
    3344:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
    3348:	2d 2d       	mov	r18, r13
    334a:	23 70       	andi	r18, 0x03	; 3
    334c:	23 30       	cpi	r18, 0x03	; 3
    334e:	19 f0       	breq	.+6      	; 0x3356 <strtod+0x220>
    3350:	6b 01       	movw	r12, r22
    3352:	7c 01       	movw	r14, r24
    3354:	06 c0       	rjmp	.+12     	; 0x3362 <strtod+0x22c>
    3356:	6b 01       	movw	r12, r22
    3358:	7c 01       	movw	r14, r24
    335a:	f7 fa       	bst	r15, 7
    335c:	f0 94       	com	r15
    335e:	f7 f8       	bld	r15, 7
    3360:	f0 94       	com	r15
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	a9 01       	movw	r20, r18
    3368:	c7 01       	movw	r24, r14
    336a:	b6 01       	movw	r22, r12
    336c:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    3370:	88 23       	and	r24, r24
    3372:	09 f4       	brne	.+2      	; 0x3376 <strtod+0x240>
    3374:	40 c0       	rjmp	.+128    	; 0x33f6 <strtod+0x2c0>
    3376:	d7 ff       	sbrs	r29, 7
    3378:	06 c0       	rjmp	.+12     	; 0x3386 <strtod+0x250>
    337a:	d1 95       	neg	r29
    337c:	c1 95       	neg	r28
    337e:	d1 09       	sbc	r29, r1
    3380:	00 ea       	ldi	r16, 0xA0	; 160
    3382:	11 e0       	ldi	r17, 0x01	; 1
    3384:	02 c0       	rjmp	.+4      	; 0x338a <strtod+0x254>
    3386:	08 eb       	ldi	r16, 0xB8	; 184
    3388:	11 e0       	ldi	r17, 0x01	; 1
    338a:	48 01       	movw	r8, r16
    338c:	b8 e1       	ldi	r27, 0x18	; 24
    338e:	8b 1a       	sub	r8, r27
    3390:	91 08       	sbc	r9, r1
    3392:	90 e2       	ldi	r25, 0x20	; 32
    3394:	a9 2e       	mov	r10, r25
    3396:	b1 2c       	mov	r11, r1
    3398:	f8 01       	movw	r30, r16
    339a:	45 90       	lpm	r4, Z+
    339c:	55 90       	lpm	r5, Z+
    339e:	65 90       	lpm	r6, Z+
    33a0:	74 90       	lpm	r7, Z
    33a2:	ca 15       	cp	r28, r10
    33a4:	db 05       	cpc	r29, r11
    33a6:	5c f0       	brlt	.+22     	; 0x33be <strtod+0x288>
    33a8:	a3 01       	movw	r20, r6
    33aa:	92 01       	movw	r18, r4
    33ac:	c7 01       	movw	r24, r14
    33ae:	b6 01       	movw	r22, r12
    33b0:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__mulsf3>
    33b4:	6b 01       	movw	r12, r22
    33b6:	7c 01       	movw	r14, r24
    33b8:	ca 19       	sub	r28, r10
    33ba:	db 09       	sbc	r29, r11
    33bc:	f2 cf       	rjmp	.-28     	; 0x33a2 <strtod+0x26c>
    33be:	04 50       	subi	r16, 0x04	; 4
    33c0:	11 09       	sbc	r17, r1
    33c2:	b5 94       	asr	r11
    33c4:	a7 94       	ror	r10
    33c6:	08 15       	cp	r16, r8
    33c8:	19 05       	cpc	r17, r9
    33ca:	31 f7       	brne	.-52     	; 0x3398 <strtod+0x262>
    33cc:	8e 2d       	mov	r24, r14
    33ce:	88 0f       	add	r24, r24
    33d0:	8f 2d       	mov	r24, r15
    33d2:	88 1f       	adc	r24, r24
    33d4:	8f 3f       	cpi	r24, 0xFF	; 255
    33d6:	49 f0       	breq	.+18     	; 0x33ea <strtod+0x2b4>
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	a9 01       	movw	r20, r18
    33de:	c7 01       	movw	r24, r14
    33e0:	b6 01       	movw	r22, r12
    33e2:	0e 94 49 13 	call	0x2692	; 0x2692 <__cmpsf2>
    33e6:	81 11       	cpse	r24, r1
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <strtod+0x2c0>
    33ea:	82 e2       	ldi	r24, 0x22	; 34
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	90 93 b1 03 	sts	0x03B1, r25
    33f2:	80 93 b0 03 	sts	0x03B0, r24
    33f6:	c7 01       	movw	r24, r14
    33f8:	b6 01       	movw	r22, r12
    33fa:	09 c0       	rjmp	.+18     	; 0x340e <strtod+0x2d8>
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	80 e8       	ldi	r24, 0x80	; 128
    3402:	9f ef       	ldi	r25, 0xFF	; 255
    3404:	04 c0       	rjmp	.+8      	; 0x340e <strtod+0x2d8>
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	80 ec       	ldi	r24, 0xC0	; 192
    340c:	9f e7       	ldi	r25, 0x7F	; 127
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	bf 90       	pop	r11
    3420:	af 90       	pop	r10
    3422:	9f 90       	pop	r9
    3424:	8f 90       	pop	r8
    3426:	7f 90       	pop	r7
    3428:	6f 90       	pop	r6
    342a:	5f 90       	pop	r5
    342c:	4f 90       	pop	r4
    342e:	08 95       	ret

00003430 <isspace>:
    3430:	91 11       	cpse	r25, r1
    3432:	a1 c2       	rjmp	.+1346   	; 0x3976 <__ctype_isfalse>
    3434:	80 32       	cpi	r24, 0x20	; 32
    3436:	19 f0       	breq	.+6      	; 0x343e <isspace+0xe>
    3438:	89 50       	subi	r24, 0x09	; 9
    343a:	85 50       	subi	r24, 0x05	; 5
    343c:	d0 f7       	brcc	.-12     	; 0x3432 <isspace+0x2>
    343e:	08 95       	ret

00003440 <strncasecmp_P>:
    3440:	fb 01       	movw	r30, r22
    3442:	dc 01       	movw	r26, r24
    3444:	41 50       	subi	r20, 0x01	; 1
    3446:	50 40       	sbci	r21, 0x00	; 0
    3448:	88 f0       	brcs	.+34     	; 0x346c <strncasecmp_P+0x2c>
    344a:	8d 91       	ld	r24, X+
    344c:	81 34       	cpi	r24, 0x41	; 65
    344e:	1c f0       	brlt	.+6      	; 0x3456 <strncasecmp_P+0x16>
    3450:	8b 35       	cpi	r24, 0x5B	; 91
    3452:	0c f4       	brge	.+2      	; 0x3456 <strncasecmp_P+0x16>
    3454:	80 5e       	subi	r24, 0xE0	; 224
    3456:	65 91       	lpm	r22, Z+
    3458:	61 34       	cpi	r22, 0x41	; 65
    345a:	1c f0       	brlt	.+6      	; 0x3462 <strncasecmp_P+0x22>
    345c:	6b 35       	cpi	r22, 0x5B	; 91
    345e:	0c f4       	brge	.+2      	; 0x3462 <strncasecmp_P+0x22>
    3460:	60 5e       	subi	r22, 0xE0	; 224
    3462:	86 1b       	sub	r24, r22
    3464:	61 11       	cpse	r22, r1
    3466:	71 f3       	breq	.-36     	; 0x3444 <strncasecmp_P+0x4>
    3468:	99 0b       	sbc	r25, r25
    346a:	08 95       	ret
    346c:	88 1b       	sub	r24, r24
    346e:	fc cf       	rjmp	.-8      	; 0x3468 <strncasecmp_P+0x28>

00003470 <strcmp>:
    3470:	fb 01       	movw	r30, r22
    3472:	dc 01       	movw	r26, r24
    3474:	8d 91       	ld	r24, X+
    3476:	01 90       	ld	r0, Z+
    3478:	80 19       	sub	r24, r0
    347a:	01 10       	cpse	r0, r1
    347c:	d9 f3       	breq	.-10     	; 0x3474 <strcmp+0x4>
    347e:	99 0b       	sbc	r25, r25
    3480:	08 95       	ret

00003482 <strcpy>:
    3482:	fb 01       	movw	r30, r22
    3484:	dc 01       	movw	r26, r24
    3486:	01 90       	ld	r0, Z+
    3488:	0d 92       	st	X+, r0
    348a:	00 20       	and	r0, r0
    348c:	e1 f7       	brne	.-8      	; 0x3486 <strcpy+0x4>
    348e:	08 95       	ret

00003490 <strncpy>:
    3490:	fb 01       	movw	r30, r22
    3492:	dc 01       	movw	r26, r24
    3494:	41 50       	subi	r20, 0x01	; 1
    3496:	50 40       	sbci	r21, 0x00	; 0
    3498:	48 f0       	brcs	.+18     	; 0x34ac <strncpy+0x1c>
    349a:	01 90       	ld	r0, Z+
    349c:	0d 92       	st	X+, r0
    349e:	00 20       	and	r0, r0
    34a0:	c9 f7       	brne	.-14     	; 0x3494 <strncpy+0x4>
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <strncpy+0x16>
    34a4:	1d 92       	st	X+, r1
    34a6:	41 50       	subi	r20, 0x01	; 1
    34a8:	50 40       	sbci	r21, 0x00	; 0
    34aa:	e0 f7       	brcc	.-8      	; 0x34a4 <strncpy+0x14>
    34ac:	08 95       	ret

000034ae <strpbrk>:
    34ae:	dc 01       	movw	r26, r24
    34b0:	99 27       	eor	r25, r25
    34b2:	8d 91       	ld	r24, X+
    34b4:	88 23       	and	r24, r24
    34b6:	41 f0       	breq	.+16     	; 0x34c8 <strpbrk+0x1a>
    34b8:	fb 01       	movw	r30, r22
    34ba:	01 90       	ld	r0, Z+
    34bc:	08 16       	cp	r0, r24
    34be:	01 10       	cpse	r0, r1
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <strpbrk+0xc>
    34c2:	b9 f7       	brne	.-18     	; 0x34b2 <strpbrk+0x4>
    34c4:	11 97       	sbiw	r26, 0x01	; 1
    34c6:	cd 01       	movw	r24, r26
    34c8:	08 95       	ret

000034ca <sprintf>:
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	2e 97       	sbiw	r28, 0x0e	; 14
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	0d 89       	ldd	r16, Y+21	; 0x15
    34e4:	1e 89       	ldd	r17, Y+22	; 0x16
    34e6:	86 e0       	ldi	r24, 0x06	; 6
    34e8:	8c 83       	std	Y+4, r24	; 0x04
    34ea:	1a 83       	std	Y+2, r17	; 0x02
    34ec:	09 83       	std	Y+1, r16	; 0x01
    34ee:	8f ef       	ldi	r24, 0xFF	; 255
    34f0:	9f e7       	ldi	r25, 0x7F	; 127
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 83       	std	Y+5, r24	; 0x05
    34f6:	ae 01       	movw	r20, r28
    34f8:	47 5e       	subi	r20, 0xE7	; 231
    34fa:	5f 4f       	sbci	r21, 0xFF	; 255
    34fc:	6f 89       	ldd	r22, Y+23	; 0x17
    34fe:	78 8d       	ldd	r23, Y+24	; 0x18
    3500:	ce 01       	movw	r24, r28
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	0e 94 94 1a 	call	0x3528	; 0x3528 <vfprintf>
    3508:	ef 81       	ldd	r30, Y+7	; 0x07
    350a:	f8 85       	ldd	r31, Y+8	; 0x08
    350c:	e0 0f       	add	r30, r16
    350e:	f1 1f       	adc	r31, r17
    3510:	10 82       	st	Z, r1
    3512:	2e 96       	adiw	r28, 0x0e	; 14
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	08 95       	ret

00003528 <vfprintf>:
    3528:	2f 92       	push	r2
    352a:	3f 92       	push	r3
    352c:	4f 92       	push	r4
    352e:	5f 92       	push	r5
    3530:	6f 92       	push	r6
    3532:	7f 92       	push	r7
    3534:	8f 92       	push	r8
    3536:	9f 92       	push	r9
    3538:	af 92       	push	r10
    353a:	bf 92       	push	r11
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	2c 97       	sbiw	r28, 0x0c	; 12
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	7c 01       	movw	r14, r24
    355e:	6b 01       	movw	r12, r22
    3560:	8a 01       	movw	r16, r20
    3562:	fc 01       	movw	r30, r24
    3564:	17 82       	std	Z+7, r1	; 0x07
    3566:	16 82       	std	Z+6, r1	; 0x06
    3568:	83 81       	ldd	r24, Z+3	; 0x03
    356a:	81 ff       	sbrs	r24, 1
    356c:	bd c1       	rjmp	.+890    	; 0x38e8 <vfprintf+0x3c0>
    356e:	ce 01       	movw	r24, r28
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	4c 01       	movw	r8, r24
    3574:	f7 01       	movw	r30, r14
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	f6 01       	movw	r30, r12
    357a:	93 fd       	sbrc	r25, 3
    357c:	85 91       	lpm	r24, Z+
    357e:	93 ff       	sbrs	r25, 3
    3580:	81 91       	ld	r24, Z+
    3582:	6f 01       	movw	r12, r30
    3584:	88 23       	and	r24, r24
    3586:	09 f4       	brne	.+2      	; 0x358a <vfprintf+0x62>
    3588:	ab c1       	rjmp	.+854    	; 0x38e0 <vfprintf+0x3b8>
    358a:	85 32       	cpi	r24, 0x25	; 37
    358c:	39 f4       	brne	.+14     	; 0x359c <vfprintf+0x74>
    358e:	93 fd       	sbrc	r25, 3
    3590:	85 91       	lpm	r24, Z+
    3592:	93 ff       	sbrs	r25, 3
    3594:	81 91       	ld	r24, Z+
    3596:	6f 01       	movw	r12, r30
    3598:	85 32       	cpi	r24, 0x25	; 37
    359a:	29 f4       	brne	.+10     	; 0x35a6 <vfprintf+0x7e>
    359c:	b7 01       	movw	r22, r14
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    35a4:	e7 cf       	rjmp	.-50     	; 0x3574 <vfprintf+0x4c>
    35a6:	51 2c       	mov	r5, r1
    35a8:	31 2c       	mov	r3, r1
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	20 32       	cpi	r18, 0x20	; 32
    35ae:	a0 f4       	brcc	.+40     	; 0x35d8 <vfprintf+0xb0>
    35b0:	8b 32       	cpi	r24, 0x2B	; 43
    35b2:	69 f0       	breq	.+26     	; 0x35ce <vfprintf+0xa6>
    35b4:	30 f4       	brcc	.+12     	; 0x35c2 <vfprintf+0x9a>
    35b6:	80 32       	cpi	r24, 0x20	; 32
    35b8:	59 f0       	breq	.+22     	; 0x35d0 <vfprintf+0xa8>
    35ba:	83 32       	cpi	r24, 0x23	; 35
    35bc:	69 f4       	brne	.+26     	; 0x35d8 <vfprintf+0xb0>
    35be:	20 61       	ori	r18, 0x10	; 16
    35c0:	2c c0       	rjmp	.+88     	; 0x361a <vfprintf+0xf2>
    35c2:	8d 32       	cpi	r24, 0x2D	; 45
    35c4:	39 f0       	breq	.+14     	; 0x35d4 <vfprintf+0xac>
    35c6:	80 33       	cpi	r24, 0x30	; 48
    35c8:	39 f4       	brne	.+14     	; 0x35d8 <vfprintf+0xb0>
    35ca:	21 60       	ori	r18, 0x01	; 1
    35cc:	26 c0       	rjmp	.+76     	; 0x361a <vfprintf+0xf2>
    35ce:	22 60       	ori	r18, 0x02	; 2
    35d0:	24 60       	ori	r18, 0x04	; 4
    35d2:	23 c0       	rjmp	.+70     	; 0x361a <vfprintf+0xf2>
    35d4:	28 60       	ori	r18, 0x08	; 8
    35d6:	21 c0       	rjmp	.+66     	; 0x361a <vfprintf+0xf2>
    35d8:	27 fd       	sbrc	r18, 7
    35da:	27 c0       	rjmp	.+78     	; 0x362a <vfprintf+0x102>
    35dc:	30 ed       	ldi	r19, 0xD0	; 208
    35de:	38 0f       	add	r19, r24
    35e0:	3a 30       	cpi	r19, 0x0A	; 10
    35e2:	78 f4       	brcc	.+30     	; 0x3602 <vfprintf+0xda>
    35e4:	26 ff       	sbrs	r18, 6
    35e6:	06 c0       	rjmp	.+12     	; 0x35f4 <vfprintf+0xcc>
    35e8:	fa e0       	ldi	r31, 0x0A	; 10
    35ea:	5f 9e       	mul	r5, r31
    35ec:	30 0d       	add	r19, r0
    35ee:	11 24       	eor	r1, r1
    35f0:	53 2e       	mov	r5, r19
    35f2:	13 c0       	rjmp	.+38     	; 0x361a <vfprintf+0xf2>
    35f4:	8a e0       	ldi	r24, 0x0A	; 10
    35f6:	38 9e       	mul	r3, r24
    35f8:	30 0d       	add	r19, r0
    35fa:	11 24       	eor	r1, r1
    35fc:	33 2e       	mov	r3, r19
    35fe:	20 62       	ori	r18, 0x20	; 32
    3600:	0c c0       	rjmp	.+24     	; 0x361a <vfprintf+0xf2>
    3602:	8e 32       	cpi	r24, 0x2E	; 46
    3604:	21 f4       	brne	.+8      	; 0x360e <vfprintf+0xe6>
    3606:	26 fd       	sbrc	r18, 6
    3608:	6b c1       	rjmp	.+726    	; 0x38e0 <vfprintf+0x3b8>
    360a:	20 64       	ori	r18, 0x40	; 64
    360c:	06 c0       	rjmp	.+12     	; 0x361a <vfprintf+0xf2>
    360e:	8c 36       	cpi	r24, 0x6C	; 108
    3610:	11 f4       	brne	.+4      	; 0x3616 <vfprintf+0xee>
    3612:	20 68       	ori	r18, 0x80	; 128
    3614:	02 c0       	rjmp	.+4      	; 0x361a <vfprintf+0xf2>
    3616:	88 36       	cpi	r24, 0x68	; 104
    3618:	41 f4       	brne	.+16     	; 0x362a <vfprintf+0x102>
    361a:	f6 01       	movw	r30, r12
    361c:	93 fd       	sbrc	r25, 3
    361e:	85 91       	lpm	r24, Z+
    3620:	93 ff       	sbrs	r25, 3
    3622:	81 91       	ld	r24, Z+
    3624:	6f 01       	movw	r12, r30
    3626:	81 11       	cpse	r24, r1
    3628:	c1 cf       	rjmp	.-126    	; 0x35ac <vfprintf+0x84>
    362a:	98 2f       	mov	r25, r24
    362c:	9f 7d       	andi	r25, 0xDF	; 223
    362e:	95 54       	subi	r25, 0x45	; 69
    3630:	93 30       	cpi	r25, 0x03	; 3
    3632:	28 f4       	brcc	.+10     	; 0x363e <vfprintf+0x116>
    3634:	0c 5f       	subi	r16, 0xFC	; 252
    3636:	1f 4f       	sbci	r17, 0xFF	; 255
    3638:	ff e3       	ldi	r31, 0x3F	; 63
    363a:	f9 83       	std	Y+1, r31	; 0x01
    363c:	0d c0       	rjmp	.+26     	; 0x3658 <vfprintf+0x130>
    363e:	83 36       	cpi	r24, 0x63	; 99
    3640:	31 f0       	breq	.+12     	; 0x364e <vfprintf+0x126>
    3642:	83 37       	cpi	r24, 0x73	; 115
    3644:	71 f0       	breq	.+28     	; 0x3662 <vfprintf+0x13a>
    3646:	83 35       	cpi	r24, 0x53	; 83
    3648:	09 f0       	breq	.+2      	; 0x364c <vfprintf+0x124>
    364a:	5b c0       	rjmp	.+182    	; 0x3702 <vfprintf+0x1da>
    364c:	22 c0       	rjmp	.+68     	; 0x3692 <vfprintf+0x16a>
    364e:	f8 01       	movw	r30, r16
    3650:	80 81       	ld	r24, Z
    3652:	89 83       	std	Y+1, r24	; 0x01
    3654:	0e 5f       	subi	r16, 0xFE	; 254
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	44 24       	eor	r4, r4
    365a:	43 94       	inc	r4
    365c:	51 2c       	mov	r5, r1
    365e:	54 01       	movw	r10, r8
    3660:	15 c0       	rjmp	.+42     	; 0x368c <vfprintf+0x164>
    3662:	38 01       	movw	r6, r16
    3664:	f2 e0       	ldi	r31, 0x02	; 2
    3666:	6f 0e       	add	r6, r31
    3668:	71 1c       	adc	r7, r1
    366a:	f8 01       	movw	r30, r16
    366c:	a0 80       	ld	r10, Z
    366e:	b1 80       	ldd	r11, Z+1	; 0x01
    3670:	26 ff       	sbrs	r18, 6
    3672:	03 c0       	rjmp	.+6      	; 0x367a <vfprintf+0x152>
    3674:	65 2d       	mov	r22, r5
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	02 c0       	rjmp	.+4      	; 0x367e <vfprintf+0x156>
    367a:	6f ef       	ldi	r22, 0xFF	; 255
    367c:	7f ef       	ldi	r23, 0xFF	; 255
    367e:	c5 01       	movw	r24, r10
    3680:	2c 87       	std	Y+12, r18	; 0x0c
    3682:	0e 94 c9 1c 	call	0x3992	; 0x3992 <strnlen>
    3686:	2c 01       	movw	r4, r24
    3688:	83 01       	movw	r16, r6
    368a:	2c 85       	ldd	r18, Y+12	; 0x0c
    368c:	2f 77       	andi	r18, 0x7F	; 127
    368e:	22 2e       	mov	r2, r18
    3690:	17 c0       	rjmp	.+46     	; 0x36c0 <vfprintf+0x198>
    3692:	38 01       	movw	r6, r16
    3694:	f2 e0       	ldi	r31, 0x02	; 2
    3696:	6f 0e       	add	r6, r31
    3698:	71 1c       	adc	r7, r1
    369a:	f8 01       	movw	r30, r16
    369c:	a0 80       	ld	r10, Z
    369e:	b1 80       	ldd	r11, Z+1	; 0x01
    36a0:	26 ff       	sbrs	r18, 6
    36a2:	03 c0       	rjmp	.+6      	; 0x36aa <vfprintf+0x182>
    36a4:	65 2d       	mov	r22, r5
    36a6:	70 e0       	ldi	r23, 0x00	; 0
    36a8:	02 c0       	rjmp	.+4      	; 0x36ae <vfprintf+0x186>
    36aa:	6f ef       	ldi	r22, 0xFF	; 255
    36ac:	7f ef       	ldi	r23, 0xFF	; 255
    36ae:	c5 01       	movw	r24, r10
    36b0:	2c 87       	std	Y+12, r18	; 0x0c
    36b2:	0e 94 be 1c 	call	0x397c	; 0x397c <strnlen_P>
    36b6:	2c 01       	movw	r4, r24
    36b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    36ba:	20 68       	ori	r18, 0x80	; 128
    36bc:	22 2e       	mov	r2, r18
    36be:	83 01       	movw	r16, r6
    36c0:	23 fc       	sbrc	r2, 3
    36c2:	1b c0       	rjmp	.+54     	; 0x36fa <vfprintf+0x1d2>
    36c4:	83 2d       	mov	r24, r3
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	48 16       	cp	r4, r24
    36ca:	59 06       	cpc	r5, r25
    36cc:	b0 f4       	brcc	.+44     	; 0x36fa <vfprintf+0x1d2>
    36ce:	b7 01       	movw	r22, r14
    36d0:	80 e2       	ldi	r24, 0x20	; 32
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    36d8:	3a 94       	dec	r3
    36da:	f4 cf       	rjmp	.-24     	; 0x36c4 <vfprintf+0x19c>
    36dc:	f5 01       	movw	r30, r10
    36de:	27 fc       	sbrc	r2, 7
    36e0:	85 91       	lpm	r24, Z+
    36e2:	27 fe       	sbrs	r2, 7
    36e4:	81 91       	ld	r24, Z+
    36e6:	5f 01       	movw	r10, r30
    36e8:	b7 01       	movw	r22, r14
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    36f0:	31 10       	cpse	r3, r1
    36f2:	3a 94       	dec	r3
    36f4:	f1 e0       	ldi	r31, 0x01	; 1
    36f6:	4f 1a       	sub	r4, r31
    36f8:	51 08       	sbc	r5, r1
    36fa:	41 14       	cp	r4, r1
    36fc:	51 04       	cpc	r5, r1
    36fe:	71 f7       	brne	.-36     	; 0x36dc <vfprintf+0x1b4>
    3700:	e5 c0       	rjmp	.+458    	; 0x38cc <vfprintf+0x3a4>
    3702:	84 36       	cpi	r24, 0x64	; 100
    3704:	11 f0       	breq	.+4      	; 0x370a <vfprintf+0x1e2>
    3706:	89 36       	cpi	r24, 0x69	; 105
    3708:	39 f5       	brne	.+78     	; 0x3758 <vfprintf+0x230>
    370a:	f8 01       	movw	r30, r16
    370c:	27 ff       	sbrs	r18, 7
    370e:	07 c0       	rjmp	.+14     	; 0x371e <vfprintf+0x1f6>
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	0c 5f       	subi	r16, 0xFC	; 252
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
    371c:	08 c0       	rjmp	.+16     	; 0x372e <vfprintf+0x206>
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	88 27       	eor	r24, r24
    3724:	77 fd       	sbrc	r23, 7
    3726:	80 95       	com	r24
    3728:	98 2f       	mov	r25, r24
    372a:	0e 5f       	subi	r16, 0xFE	; 254
    372c:	1f 4f       	sbci	r17, 0xFF	; 255
    372e:	2f 76       	andi	r18, 0x6F	; 111
    3730:	b2 2e       	mov	r11, r18
    3732:	97 ff       	sbrs	r25, 7
    3734:	09 c0       	rjmp	.+18     	; 0x3748 <vfprintf+0x220>
    3736:	90 95       	com	r25
    3738:	80 95       	com	r24
    373a:	70 95       	com	r23
    373c:	61 95       	neg	r22
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	8f 4f       	sbci	r24, 0xFF	; 255
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	20 68       	ori	r18, 0x80	; 128
    3746:	b2 2e       	mov	r11, r18
    3748:	2a e0       	ldi	r18, 0x0A	; 10
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	a4 01       	movw	r20, r8
    374e:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__ultoa_invert>
    3752:	a8 2e       	mov	r10, r24
    3754:	a8 18       	sub	r10, r8
    3756:	44 c0       	rjmp	.+136    	; 0x37e0 <vfprintf+0x2b8>
    3758:	85 37       	cpi	r24, 0x75	; 117
    375a:	29 f4       	brne	.+10     	; 0x3766 <vfprintf+0x23e>
    375c:	2f 7e       	andi	r18, 0xEF	; 239
    375e:	b2 2e       	mov	r11, r18
    3760:	2a e0       	ldi	r18, 0x0A	; 10
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	25 c0       	rjmp	.+74     	; 0x37b0 <vfprintf+0x288>
    3766:	f2 2f       	mov	r31, r18
    3768:	f9 7f       	andi	r31, 0xF9	; 249
    376a:	bf 2e       	mov	r11, r31
    376c:	8f 36       	cpi	r24, 0x6F	; 111
    376e:	c1 f0       	breq	.+48     	; 0x37a0 <vfprintf+0x278>
    3770:	18 f4       	brcc	.+6      	; 0x3778 <vfprintf+0x250>
    3772:	88 35       	cpi	r24, 0x58	; 88
    3774:	79 f0       	breq	.+30     	; 0x3794 <vfprintf+0x26c>
    3776:	b4 c0       	rjmp	.+360    	; 0x38e0 <vfprintf+0x3b8>
    3778:	80 37       	cpi	r24, 0x70	; 112
    377a:	19 f0       	breq	.+6      	; 0x3782 <vfprintf+0x25a>
    377c:	88 37       	cpi	r24, 0x78	; 120
    377e:	21 f0       	breq	.+8      	; 0x3788 <vfprintf+0x260>
    3780:	af c0       	rjmp	.+350    	; 0x38e0 <vfprintf+0x3b8>
    3782:	2f 2f       	mov	r18, r31
    3784:	20 61       	ori	r18, 0x10	; 16
    3786:	b2 2e       	mov	r11, r18
    3788:	b4 fe       	sbrs	r11, 4
    378a:	0d c0       	rjmp	.+26     	; 0x37a6 <vfprintf+0x27e>
    378c:	8b 2d       	mov	r24, r11
    378e:	84 60       	ori	r24, 0x04	; 4
    3790:	b8 2e       	mov	r11, r24
    3792:	09 c0       	rjmp	.+18     	; 0x37a6 <vfprintf+0x27e>
    3794:	24 ff       	sbrs	r18, 4
    3796:	0a c0       	rjmp	.+20     	; 0x37ac <vfprintf+0x284>
    3798:	9f 2f       	mov	r25, r31
    379a:	96 60       	ori	r25, 0x06	; 6
    379c:	b9 2e       	mov	r11, r25
    379e:	06 c0       	rjmp	.+12     	; 0x37ac <vfprintf+0x284>
    37a0:	28 e0       	ldi	r18, 0x08	; 8
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <vfprintf+0x288>
    37a6:	20 e1       	ldi	r18, 0x10	; 16
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <vfprintf+0x288>
    37ac:	20 e1       	ldi	r18, 0x10	; 16
    37ae:	32 e0       	ldi	r19, 0x02	; 2
    37b0:	f8 01       	movw	r30, r16
    37b2:	b7 fe       	sbrs	r11, 7
    37b4:	07 c0       	rjmp	.+14     	; 0x37c4 <vfprintf+0x29c>
    37b6:	60 81       	ld	r22, Z
    37b8:	71 81       	ldd	r23, Z+1	; 0x01
    37ba:	82 81       	ldd	r24, Z+2	; 0x02
    37bc:	93 81       	ldd	r25, Z+3	; 0x03
    37be:	0c 5f       	subi	r16, 0xFC	; 252
    37c0:	1f 4f       	sbci	r17, 0xFF	; 255
    37c2:	06 c0       	rjmp	.+12     	; 0x37d0 <vfprintf+0x2a8>
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0e 5f       	subi	r16, 0xFE	; 254
    37ce:	1f 4f       	sbci	r17, 0xFF	; 255
    37d0:	a4 01       	movw	r20, r8
    37d2:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__ultoa_invert>
    37d6:	a8 2e       	mov	r10, r24
    37d8:	a8 18       	sub	r10, r8
    37da:	fb 2d       	mov	r31, r11
    37dc:	ff 77       	andi	r31, 0x7F	; 127
    37de:	bf 2e       	mov	r11, r31
    37e0:	b6 fe       	sbrs	r11, 6
    37e2:	0b c0       	rjmp	.+22     	; 0x37fa <vfprintf+0x2d2>
    37e4:	2b 2d       	mov	r18, r11
    37e6:	2e 7f       	andi	r18, 0xFE	; 254
    37e8:	a5 14       	cp	r10, r5
    37ea:	50 f4       	brcc	.+20     	; 0x3800 <vfprintf+0x2d8>
    37ec:	b4 fe       	sbrs	r11, 4
    37ee:	0a c0       	rjmp	.+20     	; 0x3804 <vfprintf+0x2dc>
    37f0:	b2 fc       	sbrc	r11, 2
    37f2:	08 c0       	rjmp	.+16     	; 0x3804 <vfprintf+0x2dc>
    37f4:	2b 2d       	mov	r18, r11
    37f6:	2e 7e       	andi	r18, 0xEE	; 238
    37f8:	05 c0       	rjmp	.+10     	; 0x3804 <vfprintf+0x2dc>
    37fa:	7a 2c       	mov	r7, r10
    37fc:	2b 2d       	mov	r18, r11
    37fe:	03 c0       	rjmp	.+6      	; 0x3806 <vfprintf+0x2de>
    3800:	7a 2c       	mov	r7, r10
    3802:	01 c0       	rjmp	.+2      	; 0x3806 <vfprintf+0x2de>
    3804:	75 2c       	mov	r7, r5
    3806:	24 ff       	sbrs	r18, 4
    3808:	0d c0       	rjmp	.+26     	; 0x3824 <vfprintf+0x2fc>
    380a:	fe 01       	movw	r30, r28
    380c:	ea 0d       	add	r30, r10
    380e:	f1 1d       	adc	r31, r1
    3810:	80 81       	ld	r24, Z
    3812:	80 33       	cpi	r24, 0x30	; 48
    3814:	11 f4       	brne	.+4      	; 0x381a <vfprintf+0x2f2>
    3816:	29 7e       	andi	r18, 0xE9	; 233
    3818:	09 c0       	rjmp	.+18     	; 0x382c <vfprintf+0x304>
    381a:	22 ff       	sbrs	r18, 2
    381c:	06 c0       	rjmp	.+12     	; 0x382a <vfprintf+0x302>
    381e:	73 94       	inc	r7
    3820:	73 94       	inc	r7
    3822:	04 c0       	rjmp	.+8      	; 0x382c <vfprintf+0x304>
    3824:	82 2f       	mov	r24, r18
    3826:	86 78       	andi	r24, 0x86	; 134
    3828:	09 f0       	breq	.+2      	; 0x382c <vfprintf+0x304>
    382a:	73 94       	inc	r7
    382c:	23 fd       	sbrc	r18, 3
    382e:	13 c0       	rjmp	.+38     	; 0x3856 <vfprintf+0x32e>
    3830:	20 ff       	sbrs	r18, 0
    3832:	06 c0       	rjmp	.+12     	; 0x3840 <vfprintf+0x318>
    3834:	5a 2c       	mov	r5, r10
    3836:	73 14       	cp	r7, r3
    3838:	18 f4       	brcc	.+6      	; 0x3840 <vfprintf+0x318>
    383a:	53 0c       	add	r5, r3
    383c:	57 18       	sub	r5, r7
    383e:	73 2c       	mov	r7, r3
    3840:	73 14       	cp	r7, r3
    3842:	68 f4       	brcc	.+26     	; 0x385e <vfprintf+0x336>
    3844:	b7 01       	movw	r22, r14
    3846:	80 e2       	ldi	r24, 0x20	; 32
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	2c 87       	std	Y+12, r18	; 0x0c
    384c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    3850:	73 94       	inc	r7
    3852:	2c 85       	ldd	r18, Y+12	; 0x0c
    3854:	f5 cf       	rjmp	.-22     	; 0x3840 <vfprintf+0x318>
    3856:	73 14       	cp	r7, r3
    3858:	10 f4       	brcc	.+4      	; 0x385e <vfprintf+0x336>
    385a:	37 18       	sub	r3, r7
    385c:	01 c0       	rjmp	.+2      	; 0x3860 <vfprintf+0x338>
    385e:	31 2c       	mov	r3, r1
    3860:	24 ff       	sbrs	r18, 4
    3862:	12 c0       	rjmp	.+36     	; 0x3888 <vfprintf+0x360>
    3864:	b7 01       	movw	r22, r14
    3866:	80 e3       	ldi	r24, 0x30	; 48
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	2c 87       	std	Y+12, r18	; 0x0c
    386c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    3870:	2c 85       	ldd	r18, Y+12	; 0x0c
    3872:	22 ff       	sbrs	r18, 2
    3874:	17 c0       	rjmp	.+46     	; 0x38a4 <vfprintf+0x37c>
    3876:	21 ff       	sbrs	r18, 1
    3878:	03 c0       	rjmp	.+6      	; 0x3880 <vfprintf+0x358>
    387a:	88 e5       	ldi	r24, 0x58	; 88
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <vfprintf+0x35c>
    3880:	88 e7       	ldi	r24, 0x78	; 120
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	b7 01       	movw	r22, r14
    3886:	0c c0       	rjmp	.+24     	; 0x38a0 <vfprintf+0x378>
    3888:	82 2f       	mov	r24, r18
    388a:	86 78       	andi	r24, 0x86	; 134
    388c:	59 f0       	breq	.+22     	; 0x38a4 <vfprintf+0x37c>
    388e:	21 fd       	sbrc	r18, 1
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <vfprintf+0x36e>
    3892:	80 e2       	ldi	r24, 0x20	; 32
    3894:	01 c0       	rjmp	.+2      	; 0x3898 <vfprintf+0x370>
    3896:	8b e2       	ldi	r24, 0x2B	; 43
    3898:	27 fd       	sbrc	r18, 7
    389a:	8d e2       	ldi	r24, 0x2D	; 45
    389c:	b7 01       	movw	r22, r14
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    38a4:	a5 14       	cp	r10, r5
    38a6:	38 f4       	brcc	.+14     	; 0x38b6 <vfprintf+0x38e>
    38a8:	b7 01       	movw	r22, r14
    38aa:	80 e3       	ldi	r24, 0x30	; 48
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    38b2:	5a 94       	dec	r5
    38b4:	f7 cf       	rjmp	.-18     	; 0x38a4 <vfprintf+0x37c>
    38b6:	aa 94       	dec	r10
    38b8:	f4 01       	movw	r30, r8
    38ba:	ea 0d       	add	r30, r10
    38bc:	f1 1d       	adc	r31, r1
    38be:	80 81       	ld	r24, Z
    38c0:	b7 01       	movw	r22, r14
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    38c8:	a1 10       	cpse	r10, r1
    38ca:	f5 cf       	rjmp	.-22     	; 0x38b6 <vfprintf+0x38e>
    38cc:	33 20       	and	r3, r3
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <vfprintf+0x3aa>
    38d0:	51 ce       	rjmp	.-862    	; 0x3574 <vfprintf+0x4c>
    38d2:	b7 01       	movw	r22, r14
    38d4:	80 e2       	ldi	r24, 0x20	; 32
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <fputc>
    38dc:	3a 94       	dec	r3
    38de:	f6 cf       	rjmp	.-20     	; 0x38cc <vfprintf+0x3a4>
    38e0:	f7 01       	movw	r30, r14
    38e2:	86 81       	ldd	r24, Z+6	; 0x06
    38e4:	97 81       	ldd	r25, Z+7	; 0x07
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <vfprintf+0x3c4>
    38e8:	8f ef       	ldi	r24, 0xFF	; 255
    38ea:	9f ef       	ldi	r25, 0xFF	; 255
    38ec:	2c 96       	adiw	r28, 0x0c	; 12
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	de bf       	out	0x3e, r29	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	1f 91       	pop	r17
    38fe:	0f 91       	pop	r16
    3900:	ff 90       	pop	r15
    3902:	ef 90       	pop	r14
    3904:	df 90       	pop	r13
    3906:	cf 90       	pop	r12
    3908:	bf 90       	pop	r11
    390a:	af 90       	pop	r10
    390c:	9f 90       	pop	r9
    390e:	8f 90       	pop	r8
    3910:	7f 90       	pop	r7
    3912:	6f 90       	pop	r6
    3914:	5f 90       	pop	r5
    3916:	4f 90       	pop	r4
    3918:	3f 90       	pop	r3
    391a:	2f 90       	pop	r2
    391c:	08 95       	ret

0000391e <__eerd_block_m1284p>:
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22

00003922 <__eerd_blraw_m1284p>:
    3922:	fc 01       	movw	r30, r24
    3924:	f9 99       	sbic	0x1f, 1	; 31
    3926:	fe cf       	rjmp	.-4      	; 0x3924 <__eerd_blraw_m1284p+0x2>
    3928:	06 c0       	rjmp	.+12     	; 0x3936 <__eerd_blraw_m1284p+0x14>
    392a:	f2 bd       	out	0x22, r31	; 34
    392c:	e1 bd       	out	0x21, r30	; 33
    392e:	f8 9a       	sbi	0x1f, 0	; 31
    3930:	31 96       	adiw	r30, 0x01	; 1
    3932:	00 b4       	in	r0, 0x20	; 32
    3934:	0d 92       	st	X+, r0
    3936:	41 50       	subi	r20, 0x01	; 1
    3938:	50 40       	sbci	r21, 0x00	; 0
    393a:	b8 f7       	brcc	.-18     	; 0x392a <__eerd_blraw_m1284p+0x8>
    393c:	08 95       	ret

0000393e <__eerd_byte_m1284p>:
    393e:	f9 99       	sbic	0x1f, 1	; 31
    3940:	fe cf       	rjmp	.-4      	; 0x393e <__eerd_byte_m1284p>
    3942:	92 bd       	out	0x22, r25	; 34
    3944:	81 bd       	out	0x21, r24	; 33
    3946:	f8 9a       	sbi	0x1f, 0	; 31
    3948:	99 27       	eor	r25, r25
    394a:	80 b5       	in	r24, 0x20	; 32
    394c:	08 95       	ret

0000394e <__eerd_dword_m1284p>:
    394e:	a6 e1       	ldi	r26, 0x16	; 22
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	44 e0       	ldi	r20, 0x04	; 4
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__eerd_blraw_m1284p>

0000395a <__eewr_byte_m1284p>:
    395a:	26 2f       	mov	r18, r22

0000395c <__eewr_r18_m1284p>:
    395c:	f9 99       	sbic	0x1f, 1	; 31
    395e:	fe cf       	rjmp	.-4      	; 0x395c <__eewr_r18_m1284p>
    3960:	1f ba       	out	0x1f, r1	; 31
    3962:	92 bd       	out	0x22, r25	; 34
    3964:	81 bd       	out	0x21, r24	; 33
    3966:	20 bd       	out	0x20, r18	; 32
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	fa 9a       	sbi	0x1f, 2	; 31
    396e:	f9 9a       	sbi	0x1f, 1	; 31
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	01 96       	adiw	r24, 0x01	; 1
    3974:	08 95       	ret

00003976 <__ctype_isfalse>:
    3976:	99 27       	eor	r25, r25
    3978:	88 27       	eor	r24, r24

0000397a <__ctype_istrue>:
    397a:	08 95       	ret

0000397c <strnlen_P>:
    397c:	fc 01       	movw	r30, r24
    397e:	05 90       	lpm	r0, Z+
    3980:	61 50       	subi	r22, 0x01	; 1
    3982:	70 40       	sbci	r23, 0x00	; 0
    3984:	01 10       	cpse	r0, r1
    3986:	d8 f7       	brcc	.-10     	; 0x397e <strnlen_P+0x2>
    3988:	80 95       	com	r24
    398a:	90 95       	com	r25
    398c:	8e 0f       	add	r24, r30
    398e:	9f 1f       	adc	r25, r31
    3990:	08 95       	ret

00003992 <strnlen>:
    3992:	fc 01       	movw	r30, r24
    3994:	61 50       	subi	r22, 0x01	; 1
    3996:	70 40       	sbci	r23, 0x00	; 0
    3998:	01 90       	ld	r0, Z+
    399a:	01 10       	cpse	r0, r1
    399c:	d8 f7       	brcc	.-10     	; 0x3994 <strnlen+0x2>
    399e:	80 95       	com	r24
    39a0:	90 95       	com	r25
    39a2:	8e 0f       	add	r24, r30
    39a4:	9f 1f       	adc	r25, r31
    39a6:	08 95       	ret

000039a8 <fputc>:
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	18 2f       	mov	r17, r24
    39b2:	09 2f       	mov	r16, r25
    39b4:	eb 01       	movw	r28, r22
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
    39b8:	81 fd       	sbrc	r24, 1
    39ba:	03 c0       	rjmp	.+6      	; 0x39c2 <fputc+0x1a>
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	9f ef       	ldi	r25, 0xFF	; 255
    39c0:	20 c0       	rjmp	.+64     	; 0x3a02 <fputc+0x5a>
    39c2:	82 ff       	sbrs	r24, 2
    39c4:	10 c0       	rjmp	.+32     	; 0x39e6 <fputc+0x3e>
    39c6:	4e 81       	ldd	r20, Y+6	; 0x06
    39c8:	5f 81       	ldd	r21, Y+7	; 0x07
    39ca:	2c 81       	ldd	r18, Y+4	; 0x04
    39cc:	3d 81       	ldd	r19, Y+5	; 0x05
    39ce:	42 17       	cp	r20, r18
    39d0:	53 07       	cpc	r21, r19
    39d2:	7c f4       	brge	.+30     	; 0x39f2 <fputc+0x4a>
    39d4:	e8 81       	ld	r30, Y
    39d6:	f9 81       	ldd	r31, Y+1	; 0x01
    39d8:	9f 01       	movw	r18, r30
    39da:	2f 5f       	subi	r18, 0xFF	; 255
    39dc:	3f 4f       	sbci	r19, 0xFF	; 255
    39de:	39 83       	std	Y+1, r19	; 0x01
    39e0:	28 83       	st	Y, r18
    39e2:	10 83       	st	Z, r17
    39e4:	06 c0       	rjmp	.+12     	; 0x39f2 <fputc+0x4a>
    39e6:	e8 85       	ldd	r30, Y+8	; 0x08
    39e8:	f9 85       	ldd	r31, Y+9	; 0x09
    39ea:	81 2f       	mov	r24, r17
    39ec:	09 95       	icall
    39ee:	89 2b       	or	r24, r25
    39f0:	29 f7       	brne	.-54     	; 0x39bc <fputc+0x14>
    39f2:	2e 81       	ldd	r18, Y+6	; 0x06
    39f4:	3f 81       	ldd	r19, Y+7	; 0x07
    39f6:	2f 5f       	subi	r18, 0xFF	; 255
    39f8:	3f 4f       	sbci	r19, 0xFF	; 255
    39fa:	3f 83       	std	Y+7, r19	; 0x07
    39fc:	2e 83       	std	Y+6, r18	; 0x06
    39fe:	81 2f       	mov	r24, r17
    3a00:	90 2f       	mov	r25, r16
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	08 95       	ret

00003a0c <__ultoa_invert>:
    3a0c:	fa 01       	movw	r30, r20
    3a0e:	aa 27       	eor	r26, r26
    3a10:	28 30       	cpi	r18, 0x08	; 8
    3a12:	51 f1       	breq	.+84     	; 0x3a68 <__ultoa_invert+0x5c>
    3a14:	20 31       	cpi	r18, 0x10	; 16
    3a16:	81 f1       	breq	.+96     	; 0x3a78 <__ultoa_invert+0x6c>
    3a18:	e8 94       	clt
    3a1a:	6f 93       	push	r22
    3a1c:	6e 7f       	andi	r22, 0xFE	; 254
    3a1e:	6e 5f       	subi	r22, 0xFE	; 254
    3a20:	7f 4f       	sbci	r23, 0xFF	; 255
    3a22:	8f 4f       	sbci	r24, 0xFF	; 255
    3a24:	9f 4f       	sbci	r25, 0xFF	; 255
    3a26:	af 4f       	sbci	r26, 0xFF	; 255
    3a28:	b1 e0       	ldi	r27, 0x01	; 1
    3a2a:	3e d0       	rcall	.+124    	; 0x3aa8 <__ultoa_invert+0x9c>
    3a2c:	b4 e0       	ldi	r27, 0x04	; 4
    3a2e:	3c d0       	rcall	.+120    	; 0x3aa8 <__ultoa_invert+0x9c>
    3a30:	67 0f       	add	r22, r23
    3a32:	78 1f       	adc	r23, r24
    3a34:	89 1f       	adc	r24, r25
    3a36:	9a 1f       	adc	r25, r26
    3a38:	a1 1d       	adc	r26, r1
    3a3a:	68 0f       	add	r22, r24
    3a3c:	79 1f       	adc	r23, r25
    3a3e:	8a 1f       	adc	r24, r26
    3a40:	91 1d       	adc	r25, r1
    3a42:	a1 1d       	adc	r26, r1
    3a44:	6a 0f       	add	r22, r26
    3a46:	71 1d       	adc	r23, r1
    3a48:	81 1d       	adc	r24, r1
    3a4a:	91 1d       	adc	r25, r1
    3a4c:	a1 1d       	adc	r26, r1
    3a4e:	20 d0       	rcall	.+64     	; 0x3a90 <__ultoa_invert+0x84>
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <__ultoa_invert+0x48>
    3a52:	68 94       	set
    3a54:	3f 91       	pop	r19
    3a56:	2a e0       	ldi	r18, 0x0A	; 10
    3a58:	26 9f       	mul	r18, r22
    3a5a:	11 24       	eor	r1, r1
    3a5c:	30 19       	sub	r19, r0
    3a5e:	30 5d       	subi	r19, 0xD0	; 208
    3a60:	31 93       	st	Z+, r19
    3a62:	de f6       	brtc	.-74     	; 0x3a1a <__ultoa_invert+0xe>
    3a64:	cf 01       	movw	r24, r30
    3a66:	08 95       	ret
    3a68:	46 2f       	mov	r20, r22
    3a6a:	47 70       	andi	r20, 0x07	; 7
    3a6c:	40 5d       	subi	r20, 0xD0	; 208
    3a6e:	41 93       	st	Z+, r20
    3a70:	b3 e0       	ldi	r27, 0x03	; 3
    3a72:	0f d0       	rcall	.+30     	; 0x3a92 <__ultoa_invert+0x86>
    3a74:	c9 f7       	brne	.-14     	; 0x3a68 <__ultoa_invert+0x5c>
    3a76:	f6 cf       	rjmp	.-20     	; 0x3a64 <__ultoa_invert+0x58>
    3a78:	46 2f       	mov	r20, r22
    3a7a:	4f 70       	andi	r20, 0x0F	; 15
    3a7c:	40 5d       	subi	r20, 0xD0	; 208
    3a7e:	4a 33       	cpi	r20, 0x3A	; 58
    3a80:	18 f0       	brcs	.+6      	; 0x3a88 <__ultoa_invert+0x7c>
    3a82:	49 5d       	subi	r20, 0xD9	; 217
    3a84:	31 fd       	sbrc	r19, 1
    3a86:	40 52       	subi	r20, 0x20	; 32
    3a88:	41 93       	st	Z+, r20
    3a8a:	02 d0       	rcall	.+4      	; 0x3a90 <__ultoa_invert+0x84>
    3a8c:	a9 f7       	brne	.-22     	; 0x3a78 <__ultoa_invert+0x6c>
    3a8e:	ea cf       	rjmp	.-44     	; 0x3a64 <__ultoa_invert+0x58>
    3a90:	b4 e0       	ldi	r27, 0x04	; 4
    3a92:	a6 95       	lsr	r26
    3a94:	97 95       	ror	r25
    3a96:	87 95       	ror	r24
    3a98:	77 95       	ror	r23
    3a9a:	67 95       	ror	r22
    3a9c:	ba 95       	dec	r27
    3a9e:	c9 f7       	brne	.-14     	; 0x3a92 <__ultoa_invert+0x86>
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	61 05       	cpc	r22, r1
    3aa4:	71 05       	cpc	r23, r1
    3aa6:	08 95       	ret
    3aa8:	9b 01       	movw	r18, r22
    3aaa:	ac 01       	movw	r20, r24
    3aac:	0a 2e       	mov	r0, r26
    3aae:	06 94       	lsr	r0
    3ab0:	57 95       	ror	r21
    3ab2:	47 95       	ror	r20
    3ab4:	37 95       	ror	r19
    3ab6:	27 95       	ror	r18
    3ab8:	ba 95       	dec	r27
    3aba:	c9 f7       	brne	.-14     	; 0x3aae <__ultoa_invert+0xa2>
    3abc:	62 0f       	add	r22, r18
    3abe:	73 1f       	adc	r23, r19
    3ac0:	84 1f       	adc	r24, r20
    3ac2:	95 1f       	adc	r25, r21
    3ac4:	a0 1d       	adc	r26, r0
    3ac6:	08 95       	ret

00003ac8 <__muluhisi3>:
    3ac8:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__umulhisi3>
    3acc:	a5 9f       	mul	r26, r21
    3ace:	90 0d       	add	r25, r0
    3ad0:	b4 9f       	mul	r27, r20
    3ad2:	90 0d       	add	r25, r0
    3ad4:	a4 9f       	mul	r26, r20
    3ad6:	80 0d       	add	r24, r0
    3ad8:	91 1d       	adc	r25, r1
    3ada:	11 24       	eor	r1, r1
    3adc:	08 95       	ret

00003ade <__umulhisi3>:
    3ade:	a2 9f       	mul	r26, r18
    3ae0:	b0 01       	movw	r22, r0
    3ae2:	b3 9f       	mul	r27, r19
    3ae4:	c0 01       	movw	r24, r0
    3ae6:	a3 9f       	mul	r26, r19
    3ae8:	70 0d       	add	r23, r0
    3aea:	81 1d       	adc	r24, r1
    3aec:	11 24       	eor	r1, r1
    3aee:	91 1d       	adc	r25, r1
    3af0:	b2 9f       	mul	r27, r18
    3af2:	70 0d       	add	r23, r0
    3af4:	81 1d       	adc	r24, r1
    3af6:	11 24       	eor	r1, r1
    3af8:	91 1d       	adc	r25, r1
    3afa:	08 95       	ret

00003afc <_exit>:
    3afc:	f8 94       	cli

00003afe <__stop_program>:
    3afe:	ff cf       	rjmp	.-2      	; 0x3afe <__stop_program>
