
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000278  00800100  00003712  000037a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800378  00800378  00003a1e  2**0
                  ALLOC
  3 .stab         0000c5c4  00000000  00000000  00003a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c87  00000000  00000000  0000ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012c6b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_20>
      54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_28>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	2b 06       	cpc	r2, r27
      8e:	35 06       	cpc	r3, r21
      90:	42 06       	cpc	r4, r18
      92:	51 06       	cpc	r5, r17
      94:	60 06       	cpc	r6, r16
      96:	71 06       	cpc	r7, r17
      98:	7d 06       	cpc	r7, r29
      9a:	89 06       	cpc	r8, r25
      9c:	95 06       	cpc	r9, r21
      9e:	ee 06       	cpc	r14, r30
      a0:	f1 06       	cpc	r15, r17
      a2:	f4 06       	cpc	r15, r20
      a4:	f7 06       	cpc	r15, r23
      a6:	fa 06       	cpc	r15, r26
      a8:	fd 06       	cpc	r15, r29
      aa:	00 07       	cpc	r16, r16
      ac:	03 07       	cpc	r16, r19
      ae:	06 07       	cpc	r16, r22
      b0:	09 07       	cpc	r16, r25
      b2:	0c 07       	cpc	r16, r28
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 05       	cpc	r19, r15
      e2:	a8 4c       	sbci	r26, 0xC8	; 200
      e4:	cd b2       	in	r12, 0x1d	; 29
      e6:	d4 4e       	sbci	r29, 0xE4	; 228
      e8:	b9 38       	cpi	r27, 0x89	; 137
      ea:	36 a9       	ldd	r19, Z+54	; 0x36
      ec:	02 0c       	add	r0, r2
      ee:	50 b9       	out	0x00, r21	; 0
      f0:	91 86       	std	Z+9, r9	; 0x09
      f2:	88 08       	sbc	r8, r8
      f4:	3c a6       	std	Y+44, r3	; 0x2c
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	2a be       	out	0x3a, r2	; 58
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 08       	sbc	r3, r15
     100:	00 00       	nop
     102:	00 be       	out	0x30, r0	; 48
     104:	92 24       	eor	r9, r2
     106:	49 12       	cpse	r4, r25
     108:	3e ab       	std	Y+54, r19	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	cd cc       	rjmp	.-1638   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     110:	cc 4c       	sbci	r28, 0xCC	; 204
     112:	3e 00       	.word	0x003e	; ????
     114:	00 00       	nop
     116:	80 be       	out	0x30, r8	; 48
     118:	ab aa       	std	Y+51, r10	; 0x33
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	00 bf       	out	0x30, r16	; 48
     122:	00 00       	nop
     124:	00 80       	ld	r0, Z
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	08 41       	sbci	r16, 0x18	; 24
     12e:	78 d3       	rcall	.+1776   	; 0x820 <earth_distance+0x122>
     130:	bb 43       	sbci	r27, 0x3B	; 59
     132:	87 d1       	rcall	.+782    	; 0x442 <database_load+0x76>
     134:	13 3d       	cpi	r17, 0xD3	; 211
     136:	19 0e       	add	r1, r25
     138:	3c c3       	rjmp	.+1656   	; 0x7b2 <earth_distance+0xb4>
     13a:	bd 42       	sbci	r27, 0x2D	; 45
     13c:	82 ad       	ldd	r24, Z+58	; 0x3a
     13e:	2b 3e       	cpi	r18, 0xEB	; 235
     140:	68 ec       	ldi	r22, 0xC8	; 200
     142:	82 76       	andi	r24, 0x62	; 98
     144:	be d9       	rcall	.-3204   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     146:	8f e1       	ldi	r24, 0x1F	; 31
     148:	a9 3e       	cpi	r26, 0xE9	; 233
     14a:	4c 80       	ldd	r4, Y+4	; 0x04
     14c:	ef ff       	.word	0xffef	; ????
     14e:	be 01       	movw	r22, r28
     150:	c4 ff       	sbrs	r28, 4
     152:	7f 3f       	cpi	r23, 0xFF	; 255
     154:	00 00       	nop
     156:	00 00       	nop
     158:	00 07       	cpc	r16, r16
     15a:	63 42       	sbci	r22, 0x23	; 35
     15c:	36 b7       	in	r19, 0x36	; 54
     15e:	9b d8       	rcall	.-3786   	; 0xfffff296 <__eeprom_end+0xff7ef296>
     160:	a7 1a       	sub	r10, r23
     162:	39 68       	ori	r19, 0x89	; 137
     164:	56 18       	sub	r5, r6
     166:	ae ba       	out	0x1e, r10	; 30
     168:	ab 55       	subi	r26, 0x5B	; 91
     16a:	8c 1d       	adc	r24, r12
     16c:	3c b7       	in	r19, 0x3c	; 60
     16e:	cc 57       	subi	r28, 0x7C	; 124
     170:	63 bd       	out	0x23, r22	; 35
     172:	6d ed       	ldi	r22, 0xDD	; 221
     174:	fd 75       	andi	r31, 0x5D	; 93
     176:	3e f6       	brtc	.-114    	; 0x106 <__SREG__+0xc7>
     178:	17 72       	andi	r17, 0x27	; 39
     17a:	31 bf       	out	0x31, r19	; 49
     17c:	00 00       	nop
     17e:	00 80       	ld	r0, Z
     180:	3f 4e       	sbci	r19, 0xEF	; 239

00000181 <pstr_nan>:
     181:	4e 41 4e                                            NAN

00000184 <pstr_inity>:
     184:	49 4e 49 54 59                                      INITY

00000189 <pstr_inf>:
     189:	49 4e 46                                            INF

0000018c <pwr_m10>:
     18c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     19c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a4 <pwr_p10>:
     1a4:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b4:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e4       	ldi	r29, 0x40	; 64
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e2 e1       	ldi	r30, 0x12	; 18
     1d0:	f7 e3       	ldi	r31, 0x37	; 55
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a8 37       	cpi	r26, 0x78	; 120
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	14 e0       	ldi	r17, 0x04	; 4
     1e4:	a8 e7       	ldi	r26, 0x78	; 120
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a5 38       	cpi	r26, 0x85	; 133
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <main>
     1f6:	0c 94 87 1b 	jmp	0x370e	; 0x370e <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     1fe:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
     208:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
     20c:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     210:	e9 ec       	ldi	r30, 0xC9	; 201
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	88 6d       	ori	r24, 0xD8	; 216
     218:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     21a:	e1 ec       	ldi	r30, 0xC1	; 193
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 6d       	ori	r24, 0xD8	; 216
     222:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     224:	e8 ec       	ldi	r30, 0xC8	; 200
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
     22e:	e0 ec       	ldi	r30, 0xC0	; 192
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	82 60       	ori	r24, 0x02	; 2
     236:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     238:	ea ec       	ldi	r30, 0xCA	; 202
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8e 60       	ori	r24, 0x0E	; 14
     240:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     242:	e2 ec       	ldi	r30, 0xC2	; 194
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	86 60       	ori	r24, 0x06	; 6
     24a:	80 83       	st	Z, r24
     24c:	08 95       	ret

0000024e <disable_gps>:

}

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	87 72       	andi	r24, 0x27	; 39
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <__vector_20>:
        rxWritePos = 0;
    }
}

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	0b b6       	in	r0, 0x3b	; 59
     266:	0f 92       	push	r0
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
     280:	80 91 d0 03 	lds	r24, 0x03D0
     284:	90 91 d1 03 	lds	r25, 0x03D1
     288:	81 35       	cpi	r24, 0x51	; 81
     28a:	91 05       	cpc	r25, r1
     28c:	74 f0       	brlt	.+28     	; 0x2aa <__vector_20+0x50>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=0; i<80; i++)
            gps_rxBuffer[i]='\0';
     292:	fc 01       	movw	r30, r24
     294:	e0 58       	subi	r30, 0x80	; 128
     296:	fc 4f       	sbci	r31, 0xFC	; 252
     298:	10 82       	st	Z, r1
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
    {
        for (i=0; i<80; i++)
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	80 35       	cpi	r24, 0x50	; 80
     29e:	91 05       	cpc	r25, r1
     2a0:	c1 f7       	brne	.-16     	; 0x292 <__vector_20+0x38>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 0; 
     2a2:	10 92 d1 03 	sts	0x03D1, r1
     2a6:	10 92 d0 03 	sts	0x03D0, r1
    }

    //Read value out of the UART buffer
    gps_rxBuffer[gps_rxCount] = UDR0;
     2aa:	e0 91 d0 03 	lds	r30, 0x03D0
     2ae:	f0 91 d1 03 	lds	r31, 0x03D1
     2b2:	80 91 c6 00 	lds	r24, 0x00C6
     2b6:	e0 58       	subi	r30, 0x80	; 128
     2b8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ba:	80 83       	st	Z, r24

    gps_rxCount ++;
     2bc:	80 91 d0 03 	lds	r24, 0x03D0
     2c0:	90 91 d1 03 	lds	r25, 0x03D1
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 d1 03 	sts	0x03D1, r25
     2ca:	80 93 d0 03 	sts	0x03D0, r24

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
     2ce:	e0 91 d0 03 	lds	r30, 0x03D0
     2d2:	f0 91 d1 03 	lds	r31, 0x03D1
     2d6:	e1 58       	subi	r30, 0x81	; 129
     2d8:	fc 4f       	sbci	r31, 0xFC	; 252
     2da:	80 81       	ld	r24, Z
     2dc:	84 32       	cpi	r24, 0x24	; 36
     2de:	99 f4       	brne	.+38     	; 0x306 <__vector_20+0xac>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=1; i<80; i++)
            gps_rxBuffer[i]='\0'; 
     2e4:	fc 01       	movw	r30, r24
     2e6:	e0 58       	subi	r30, 0x80	; 128
     2e8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ea:	10 82       	st	Z, r1
    gps_rxCount ++;

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
    {
        for (i=1; i<80; i++)
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	80 35       	cpi	r24, 0x50	; 80
     2f0:	91 05       	cpc	r25, r1
     2f2:	c1 f7       	brne	.-16     	; 0x2e4 <__vector_20+0x8a>
            gps_rxBuffer[i]='\0'; 

        gps_rxBuffer[0] = '$';
     2f4:	84 e2       	ldi	r24, 0x24	; 36
     2f6:	80 93 80 03 	sts	0x0380, r24
        gps_rxCount = 1; 
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 d1 03 	sts	0x03D1, r25
     302:	80 93 d0 03 	sts	0x03D0, r24
    }

    //carriage return ----> parse the string and update the gps_data fields
    if ((gps_rxBuffer[gps_rxCount-1]=='\r')) {
     306:	e0 91 d0 03 	lds	r30, 0x03D0
     30a:	f0 91 d1 03 	lds	r31, 0x03D1
     30e:	e1 58       	subi	r30, 0x81	; 129
     310:	fc 4f       	sbci	r31, 0xFC	; 252
     312:	80 81       	ld	r24, Z
     314:	8d 30       	cpi	r24, 0x0D	; 13
     316:	79 f5       	brne	.+94     	; 0x376 <__vector_20+0x11c>
        if (tag_check(gps_rxBuffer))
     318:	80 e8       	ldi	r24, 0x80	; 128
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <tag_check>
     320:	89 2b       	or	r24, r25
     322:	49 f1       	breq	.+82     	; 0x376 <__vector_20+0x11c>
        {
            //disable gps interrupts
            disable_gps();
     324:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>

            //strip off the rxBuffer carriage return
            gps_rxBuffer[strlen((char *)gps_rxBuffer)-1] = '\0';
     328:	e0 e8       	ldi	r30, 0x80	; 128
     32a:	f3 e0       	ldi	r31, 0x03	; 3
     32c:	01 90       	ld	r0, Z+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <__vector_20+0xd2>
     332:	32 97       	sbiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1

            //update the application gps_data fields
            parse_nmea(strcat((char *)gps_rxBuffer, ","), gps_data);
     336:	63 e1       	ldi	r22, 0x13	; 19
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	80 e8       	ldi	r24, 0x80	; 128
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 36 18 	call	0x306c	; 0x306c <strcat>
     342:	65 e6       	ldi	r22, 0x65	; 101
     344:	74 e0       	ldi	r23, 0x04	; 4
     346:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <parse_nmea>

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);
     34a:	60 91 e3 03 	lds	r22, 0x03E3
     34e:	70 91 e4 03 	lds	r23, 0x03E4
     352:	85 e6       	ldi	r24, 0x65	; 101
     354:	94 e0       	ldi	r25, 0x04	; 4
     356:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <update_user_gps_data>

            //clear the rxBuffer
            for (i=0; i<80; i++)
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
                gps_rxBuffer[i]='\0';
     35e:	fc 01       	movw	r30, r24
     360:	e0 58       	subi	r30, 0x80	; 128
     362:	fc 4f       	sbci	r31, 0xFC	; 252
     364:	10 82       	st	Z, r1

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);

            //clear the rxBuffer
            for (i=0; i<80; i++)
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	80 35       	cpi	r24, 0x50	; 80
     36a:	91 05       	cpc	r25, r1
     36c:	c1 f7       	brne	.-16     	; 0x35e <__vector_20+0x104>
                gps_rxBuffer[i]='\0';
            gps_rxCount = 0;
     36e:	10 92 d1 03 	sts	0x03D1, r1
     372:	10 92 d0 03 	sts	0x03D0, r1
        }
    }
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0b be       	out	0x3b, r0	; 59
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <enable_gps>:
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     39c:	e1 ec       	ldi	r30, 0xC1	; 193
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	88 6d       	ori	r24, 0xD8	; 216
     3a4:	80 83       	st	Z, r24
     3a6:	08 95       	ret

000003a8 <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	84 b9       	out	0x04, r24	; 4
    cli();
     3ac:	f8 94       	cli
    //Init usart
    InitUSART();
     3ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     3b2:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     3b4:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	2f e3       	ldi	r18, 0x3F	; 63
     3ba:	8d e0       	ldi	r24, 0x0D	; 13
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <prepare_device+0x16>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <prepare_device+0x20>
     3c8:	00 00       	nop
     3ca:	08 95       	ret

000003cc <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <my_eeprom_read_int>

    if (num_stations==255)
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	91 05       	cpc	r25, r1
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <database_load+0x24>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3e6:	90 93 dc 03 	sts	0x03DC, r25
     3ea:	80 93 db 03 	sts	0x03DB, r24
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <database_load+0x2c>

    if (num_stations==255)
        num_stations = 0;
     3f0:	10 92 dc 03 	sts	0x03DC, r1
     3f4:	10 92 db 03 	sts	0x03DB, r1
     3f8:	2f e9       	ldi	r18, 0x9F	; 159
     3fa:	46 e8       	ldi	r20, 0x86	; 134
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	21 50       	subi	r18, 0x01	; 1
     400:	40 40       	sbci	r20, 0x00	; 0
     402:	50 40       	sbci	r21, 0x00	; 0
     404:	e1 f7       	brne	.-8      	; 0x3fe <database_load+0x32>
     406:	00 c0       	rjmp	.+0      	; 0x408 <database_load+0x3c>
     408:	00 00       	nop

    _delay_ms(500);
    lcd_init();
     40a:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("importing ");
     40e:	85 e1       	ldi	r24, 0x15	; 21
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    string_write_int(num_stations,3);
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 91 db 03 	lds	r24, 0x03DB
     41e:	90 91 dc 03 	lds	r25, 0x03DC
     422:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
    string_write("\nstations...");
     426:	80 e2       	ldi	r24, 0x20	; 32
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     42e:	80 91 db 03 	lds	r24, 0x03DB
     432:	90 91 dc 03 	lds	r25, 0x03DC
     436:	2c e1       	ldi	r18, 0x1C	; 28
     438:	fc 01       	movw	r30, r24
     43a:	2e 9f       	mul	r18, r30
     43c:	c0 01       	movw	r24, r0
     43e:	2f 9f       	mul	r18, r31
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <malloc>
     448:	90 93 e2 03 	sts	0x03E2, r25
     44c:	80 93 e1 03 	sts	0x03E1, r24

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	80 91 db 03 	lds	r24, 0x03DB
     45c:	90 91 dc 03 	lds	r25, 0x03DC
     460:	08 17       	cp	r16, r24
     462:	19 07       	cpc	r17, r25
     464:	0c f0       	brlt	.+2      	; 0x468 <database_load+0x9c>
     466:	5c c0       	rjmp	.+184    	; 0x520 <database_load+0x154>
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     46e:	80 91 e1 03 	lds	r24, 0x03E1
     472:	90 91 e2 03 	lds	r25, 0x03E2
     476:	48 e0       	ldi	r20, 0x08	; 8
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	8c 0f       	add	r24, r28
     47c:	9d 1f       	adc	r25, r29
     47e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <my_eeprom_read_string>
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     482:	e0 90 e1 03 	lds	r14, 0x03E1
     486:	f0 90 e2 03 	lds	r15, 0x03E2
     48a:	ec 0e       	add	r14, r28
     48c:	fd 1e       	adc	r15, r29
     48e:	ce 01       	movw	r24, r28
     490:	09 96       	adiw	r24, 0x09	; 9
     492:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <my_eeprom_read_float>
     496:	f7 01       	movw	r30, r14
     498:	60 87       	std	Z+8, r22	; 0x08
     49a:	71 87       	std	Z+9, r23	; 0x09
     49c:	82 87       	std	Z+10, r24	; 0x0a
     49e:	93 87       	std	Z+11, r25	; 0x0b
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     4a0:	e0 90 e1 03 	lds	r14, 0x03E1
     4a4:	f0 90 e2 03 	lds	r15, 0x03E2
     4a8:	ec 0e       	add	r14, r28
     4aa:	fd 1e       	adc	r15, r29
     4ac:	ce 01       	movw	r24, r28
     4ae:	0d 96       	adiw	r24, 0x0d	; 13
     4b0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <my_eeprom_read_float>
     4b4:	f7 01       	movw	r30, r14
     4b6:	64 87       	std	Z+12, r22	; 0x0c
     4b8:	75 87       	std	Z+13, r23	; 0x0d
     4ba:	86 87       	std	Z+14, r24	; 0x0e
     4bc:	97 87       	std	Z+15, r25	; 0x0f
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     4be:	e0 90 e1 03 	lds	r14, 0x03E1
     4c2:	f0 90 e2 03 	lds	r15, 0x03E2
     4c6:	ec 0e       	add	r14, r28
     4c8:	fd 1e       	adc	r15, r29
     4ca:	ce 01       	movw	r24, r28
     4cc:	41 96       	adiw	r24, 0x11	; 17
     4ce:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <my_eeprom_read_float>
     4d2:	f7 01       	movw	r30, r14
     4d4:	60 8b       	std	Z+16, r22	; 0x10
     4d6:	71 8b       	std	Z+17, r23	; 0x11
     4d8:	82 8b       	std	Z+18, r24	; 0x12
     4da:	93 8b       	std	Z+19, r25	; 0x13
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     4dc:	e0 90 e1 03 	lds	r14, 0x03E1
     4e0:	f0 90 e2 03 	lds	r15, 0x03E2
     4e4:	ec 0e       	add	r14, r28
     4e6:	fd 1e       	adc	r15, r29
     4e8:	ce 01       	movw	r24, r28
     4ea:	45 96       	adiw	r24, 0x15	; 21
     4ec:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <my_eeprom_read_float>
     4f0:	f7 01       	movw	r30, r14
     4f2:	64 8b       	std	Z+20, r22	; 0x14
     4f4:	75 8b       	std	Z+21, r23	; 0x15
     4f6:	86 8b       	std	Z+22, r24	; 0x16
     4f8:	97 8b       	std	Z+23, r25	; 0x17
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     4fa:	e0 90 e1 03 	lds	r14, 0x03E1
     4fe:	f0 90 e2 03 	lds	r15, 0x03E2
     502:	ec 0e       	add	r14, r28
     504:	fd 1e       	adc	r15, r29
     506:	ce 01       	movw	r24, r28
     508:	49 96       	adiw	r24, 0x19	; 25
     50a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <my_eeprom_read_float>
     50e:	f7 01       	movw	r30, r14
     510:	60 8f       	std	Z+24, r22	; 0x18
     512:	71 8f       	std	Z+25, r23	; 0x19
     514:	82 8f       	std	Z+26, r24	; 0x1a
     516:	93 8f       	std	Z+27, r25	; 0x1b

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     518:	0f 5f       	subi	r16, 0xFF	; 255
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	6c 96       	adiw	r28, 0x1c	; 28
     51e:	9c cf       	rjmp	.-200    	; 0x458 <database_load+0x8c>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	08 95       	ret

0000052e <database_free>:

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     52e:	10 92 dc 03 	sts	0x03DC, r1
     532:	10 92 db 03 	sts	0x03DB, r1

    free(all_stations);
     536:	80 91 e1 03 	lds	r24, 0x03E1
     53a:	90 91 e2 03 	lds	r25, 0x03E2
     53e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <free>
    all_stations = NULL;
     542:	10 92 e2 03 	sts	0x03E2, r1
     546:	10 92 e1 03 	sts	0x03E1, r1
     54a:	08 95       	ret

0000054c <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     54c:	80 91 d6 03 	lds	r24, 0x03D6
     550:	90 91 01 01 	lds	r25, 0x0101
     554:	89 13       	cpse	r24, r25
     556:	0c c0       	rjmp	.+24     	; 0x570 <detectSerialStart+0x24>
     558:	20 91 d7 03 	lds	r18, 0x03D7
     55c:	28 13       	cpse	r18, r24
     55e:	08 c0       	rjmp	.+16     	; 0x570 <detectSerialStart+0x24>
     560:	30 91 d8 03 	lds	r19, 0x03D8
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	32 17       	cp	r19, r18
     56a:	21 f0       	breq	.+8      	; 0x574 <detectSerialStart+0x28>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret
        return 1;
    else
        return 0;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
}
     574:	08 95       	ret

00000576 <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	0b b6       	in	r0, 0x3b	; 59
     582:	0f 92       	push	r0
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     59c:	80 91 d7 03 	lds	r24, 0x03D7
     5a0:	80 93 d8 03 	sts	0x03D8, r24
    serial_history[1] = serial_history[0];
     5a4:	80 91 d6 03 	lds	r24, 0x03D6
     5a8:	80 93 d7 03 	sts	0x03D7, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     5ac:	80 91 ce 00 	lds	r24, 0x00CE
     5b0:	80 93 d6 03 	sts	0x03D6, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     5b4:	80 91 7e 03 	lds	r24, 0x037E
     5b8:	90 91 7f 03 	lds	r25, 0x037F
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	69 f4       	brne	.+26     	; 0x5da <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     5c0:	e0 91 d9 03 	lds	r30, 0x03D9
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 91 d6 03 	lds	r24, 0x03D6
     5ca:	eb 51       	subi	r30, 0x1B	; 27
     5cc:	fc 4f       	sbci	r31, 0xFC	; 252
     5ce:	80 83       	st	Z, r24
        rxWritePos++;
     5d0:	80 91 d9 03 	lds	r24, 0x03D9
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	80 93 d9 03 	sts	0x03D9, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     5da:	0e 94 a6 02 	call	0x54c	; 0x54c <detectSerialStart>
     5de:	89 2b       	or	r24, r25
     5e0:	31 f0       	breq	.+12     	; 0x5ee <__vector_28+0x78>
        op_mode = MD_UPDATE;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	90 93 7f 03 	sts	0x037F, r25
     5ea:	80 93 7e 03 	sts	0x037E, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     5ee:	80 91 d9 03 	lds	r24, 0x03D9
     5f2:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     5f4:	10 92 d9 03 	sts	0x03D9, r1
    }
}
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	7f 91       	pop	r23
     606:	6f 91       	pop	r22
     608:	5f 91       	pop	r21
     60a:	4f 91       	pop	r20
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0b be       	out	0x3b, r0	; 59
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     61e:	80 91 d6 03 	lds	r24, 0x03D6
     622:	90 91 00 01 	lds	r25, 0x0100
     626:	89 13       	cpse	r24, r25
     628:	0c c0       	rjmp	.+24     	; 0x642 <detectSerialEnd+0x24>
     62a:	20 91 d7 03 	lds	r18, 0x03D7
     62e:	28 13       	cpse	r18, r24
     630:	08 c0       	rjmp	.+16     	; 0x642 <detectSerialEnd+0x24>
     632:	30 91 d8 03 	lds	r19, 0x03D8
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	32 17       	cp	r19, r18
     63c:	21 f0       	breq	.+8      	; 0x646 <detectSerialEnd+0x28>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
        return 1;
    else
        return 0;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
}
     646:	08 95       	ret

00000648 <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     648:	e0 91 da 03 	lds	r30, 0x03DA
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	eb 51       	subi	r30, 0x1B	; 27
     650:	fc 4f       	sbci	r31, 0xFC	; 252
     652:	80 81       	ld	r24, Z
     
    rxReadPos++;
     654:	90 91 da 03 	lds	r25, 0x03DA
     658:	9f 5f       	subi	r25, 0xFF	; 255
     65a:	90 93 da 03 	sts	0x03DA, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     65e:	90 91 da 03 	lds	r25, 0x03DA
     662:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     664:	10 92 da 03 	sts	0x03DA, r1
    }
    
    return ret;
}
     668:	08 95       	ret

0000066a <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     66a:	90 91 da 03 	lds	r25, 0x03DA
     66e:	80 91 d9 03 	lds	r24, 0x03D9
     672:	98 17       	cp	r25, r24
     674:	39 f0       	breq	.+14     	; 0x684 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     676:	e0 91 da 03 	lds	r30, 0x03DA
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	eb 51       	subi	r30, 0x1B	; 27
     67e:	fc 4f       	sbci	r31, 0xFC	; 252
     680:	80 81       	ld	r24, Z
     682:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     684:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     686:	08 95       	ret

00000688 <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     68e:	10 92 7f 03 	sts	0x037F, r1
     692:	10 92 7e 03 	sts	0x037E, r1
    updating = 0;
     696:	10 92 7b 03 	sts	0x037B, r1
     69a:	10 92 7a 03 	sts	0x037A, r1
    serial_timer = 0;
     69e:	10 92 d2 03 	sts	0x03D2, r1
     6a2:	10 92 d3 03 	sts	0x03D3, r1
     6a6:	10 92 d4 03 	sts	0x03D4, r1
     6aa:	10 92 d5 03 	sts	0x03D5, r1

    //import the new database
    lcd_init();
     6ae:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>

    if (flag==FL_SUCCESS)
     6b2:	20 97       	sbiw	r28, 0x00	; 0
     6b4:	19 f4       	brne	.+6      	; 0x6bc <terminate_serial+0x34>
        string_write("reading\ndatabase ...");
     6b6:	8d e2       	ldi	r24, 0x2D	; 45
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     6bc:	82 e4       	ldi	r24, 0x42	; 66
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>

    database_load();
     6c4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <database_load>
     6c8:	2f e3       	ldi	r18, 0x3F	; 63
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <terminate_serial+0x46>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <terminate_serial+0x50>
     6d8:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
     6da:	21 97       	sbiw	r28, 0x01	; 1
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <terminate_serial+0x5e>
        string_write("\nupdate failed\n");
     6de:	85 e5       	ldi	r24, 0x55	; 85
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
     6e6:	2f e9       	ldi	r18, 0x9F	; 159
     6e8:	86 e8       	ldi	r24, 0x86	; 134
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <terminate_serial+0x64>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <terminate_serial+0x6e>
     6f6:	00 00       	nop

    _delay_ms(500);
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <earth_distance>:
    return earth_distance(user->lat, user->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	60 97       	sbiw	r28, 0x10	; 16
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	2b 01       	movw	r4, r22
     730:	3c 01       	movw	r6, r24
     732:	29 87       	std	Y+9, r18	; 0x09
     734:	3a 87       	std	Y+10, r19	; 0x0a
     736:	4b 87       	std	Y+11, r20	; 0x0b
     738:	5c 87       	std	Y+12, r21	; 0x0c
     73a:	e9 82       	std	Y+1, r14	; 0x01
     73c:	fa 82       	std	Y+2, r15	; 0x02
     73e:	0b 83       	std	Y+3, r16	; 0x03
     740:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	c8 01       	movw	r24, r16
     748:	b7 01       	movw	r22, r14
     74a:	0e 94 80 10 	call	0x2100	; 0x2100 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     74e:	2b ed       	ldi	r18, 0xDB	; 219
     750:	3f e0       	ldi	r19, 0x0F	; 15
     752:	49 e4       	ldi	r20, 0x49	; 73
     754:	50 e4       	ldi	r21, 0x40	; 64
     756:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	44 e3       	ldi	r20, 0x34	; 52
     760:	53 e4       	ldi	r21, 0x43	; 67
     762:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	5f e3       	ldi	r21, 0x3F	; 63
     76e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     772:	0e 94 a2 14 	call	0x2944	; 0x2944 <sin>
     776:	6d 83       	std	Y+5, r22	; 0x05
     778:	7e 83       	std	Y+6, r23	; 0x06
     77a:	8f 83       	std	Y+7, r24	; 0x07
     77c:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     77e:	2b ed       	ldi	r18, 0xDB	; 219
     780:	3f e0       	ldi	r19, 0x0F	; 15
     782:	49 e4       	ldi	r20, 0x49	; 73
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	c3 01       	movw	r24, r6
     788:	b2 01       	movw	r22, r4
     78a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	44 e3       	ldi	r20, 0x34	; 52
     794:	53 e4       	ldi	r21, 0x43	; 67
     796:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     79a:	0e 94 4b 11 	call	0x2296	; 0x2296 <cos>
     79e:	2b 01       	movw	r4, r22
     7a0:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     7a2:	2b ed       	ldi	r18, 0xDB	; 219
     7a4:	3f e0       	ldi	r19, 0x0F	; 15
     7a6:	49 e4       	ldi	r20, 0x49	; 73
     7a8:	50 e4       	ldi	r21, 0x40	; 64
     7aa:	c8 01       	movw	r24, r16
     7ac:	b7 01       	movw	r22, r14
     7ae:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	44 e3       	ldi	r20, 0x34	; 52
     7b8:	53 e4       	ldi	r21, 0x43	; 67
     7ba:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     7be:	0e 94 4b 11 	call	0x2296	; 0x2296 <cos>
     7c2:	69 83       	std	Y+1, r22	; 0x01
     7c4:	7a 83       	std	Y+2, r23	; 0x02
     7c6:	8b 83       	std	Y+3, r24	; 0x03
     7c8:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
     7ca:	29 85       	ldd	r18, Y+9	; 0x09
     7cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ce:	4b 85       	ldd	r20, Y+11	; 0x0b
     7d0:	5c 85       	ldd	r21, Y+12	; 0x0c
     7d2:	c6 01       	movw	r24, r12
     7d4:	b5 01       	movw	r22, r10
     7d6:	0e 94 80 10 	call	0x2100	; 0x2100 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     7da:	2b ed       	ldi	r18, 0xDB	; 219
     7dc:	3f e0       	ldi	r19, 0x0F	; 15
     7de:	49 e4       	ldi	r20, 0x49	; 73
     7e0:	50 e4       	ldi	r21, 0x40	; 64
     7e2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	44 e3       	ldi	r20, 0x34	; 52
     7ec:	53 e4       	ldi	r21, 0x43	; 67
     7ee:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	5f e3       	ldi	r21, 0x3F	; 63
     7fa:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     7fe:	0e 94 a2 14 	call	0x2944	; 0x2944 <sin>
     802:	4b 01       	movw	r8, r22
     804:	5c 01       	movw	r10, r24
     806:	2d 81       	ldd	r18, Y+5	; 0x05
     808:	3e 81       	ldd	r19, Y+6	; 0x06
     80a:	4f 81       	ldd	r20, Y+7	; 0x07
     80c:	58 85       	ldd	r21, Y+8	; 0x08
     80e:	ca 01       	movw	r24, r20
     810:	b9 01       	movw	r22, r18
     812:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     816:	6b 01       	movw	r12, r22
     818:	7c 01       	movw	r14, r24
     81a:	29 81       	ldd	r18, Y+1	; 0x01
     81c:	3a 81       	ldd	r19, Y+2	; 0x02
     81e:	4b 81       	ldd	r20, Y+3	; 0x03
     820:	5c 81       	ldd	r21, Y+4	; 0x04
     822:	c3 01       	movw	r24, r6
     824:	b2 01       	movw	r22, r4
     826:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     82a:	a5 01       	movw	r20, r10
     82c:	94 01       	movw	r18, r8
     82e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     832:	a5 01       	movw	r20, r10
     834:	94 01       	movw	r18, r8
     836:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     83a:	9b 01       	movw	r18, r22
     83c:	ac 01       	movw	r20, r24
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0e 94 81 10 	call	0x2102	; 0x2102 <__addsf3>
     846:	6b 01       	movw	r12, r22
     848:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	9f e3       	ldi	r25, 0x3F	; 63
     856:	0e 94 80 10 	call	0x2100	; 0x2100 <__subsf3>
     85a:	0e 94 ac 14 	call	0x2958	; 0x2958 <sqrt>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	c7 01       	movw	r24, r14
     864:	b6 01       	movw	r22, r12
     866:	2d 87       	std	Y+13, r18	; 0x0d
     868:	3e 87       	std	Y+14, r19	; 0x0e
     86a:	4f 87       	std	Y+15, r20	; 0x0f
     86c:	58 8b       	std	Y+16, r21	; 0x10
     86e:	0e 94 ac 14 	call	0x2958	; 0x2958 <sqrt>
     872:	2d 85       	ldd	r18, Y+13	; 0x0d
     874:	3e 85       	ldd	r19, Y+14	; 0x0e
     876:	4f 85       	ldd	r20, Y+15	; 0x0f
     878:	58 89       	ldd	r21, Y+16	; 0x10
     87a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <atan2>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	0e 94 81 10 	call	0x2102	; 0x2102 <__addsf3>
    double distance = R*c;
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	38 e1       	ldi	r19, 0x18	; 24
     88a:	47 ec       	ldi	r20, 0xC7	; 199
     88c:	55 e4       	ldi	r21, 0x45	; 69
     88e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>

    return (float)distance;
}
     892:	60 96       	adiw	r28, 0x10	; 16
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	08 95       	ret

000008c0 <get_nearest_station>:

//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(float lat, float lon)
{
     8c0:	2f 92       	push	r2
     8c2:	3f 92       	push	r3
     8c4:	4f 92       	push	r4
     8c6:	5f 92       	push	r5
     8c8:	6f 92       	push	r6
     8ca:	7f 92       	push	r7
     8cc:	8f 92       	push	r8
     8ce:	9f 92       	push	r9
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2c 97       	sbiw	r28, 0x0c	; 12
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	2b 01       	movw	r4, r22
     8f6:	3c 01       	movw	r6, r24
     8f8:	2f 83       	std	Y+7, r18	; 0x07
     8fa:	38 87       	std	Y+8, r19	; 0x08
     8fc:	49 87       	std	Y+9, r20	; 0x09
     8fe:	5a 87       	std	Y+10, r21	; 0x0a
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
     900:	20 91 db 03 	lds	r18, 0x03DB
     904:	30 91 dc 03 	lds	r19, 0x03DC
     908:	3e 83       	std	Y+6, r19	; 0x06
     90a:	2d 83       	std	Y+5, r18	; 0x05
     90c:	80 91 e1 03 	lds	r24, 0x03E1
     910:	90 91 e2 03 	lds	r25, 0x03E2
     914:	9a 83       	std	Y+2, r25	; 0x02
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	1c 86       	std	Y+12, r1	; 0x0c
     91a:	1b 86       	std	Y+11, r1	; 0x0b

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(float lat, float lon)
{
    float min_dist = -1;
    int station_index = -1, i;
     91c:	9f ef       	ldi	r25, 0xFF	; 255
     91e:	9b 83       	std	Y+3, r25	; 0x03
     920:	ef ef       	ldi	r30, 0xFF	; 255
     922:	ec 83       	std	Y+4, r30	; 0x04
//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(float lat, float lon)
{
    float min_dist = -1;
     924:	21 2c       	mov	r2, r1
     926:	31 2c       	mov	r3, r1
     928:	80 e8       	ldi	r24, 0x80	; 128
     92a:	88 2e       	mov	r8, r24
     92c:	9f eb       	ldi	r25, 0xBF	; 191
     92e:	99 2e       	mov	r9, r25
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
     930:	8b 85       	ldd	r24, Y+11	; 0x0b
     932:	9c 85       	ldd	r25, Y+12	; 0x0c
     934:	ed 81       	ldd	r30, Y+5	; 0x05
     936:	fe 81       	ldd	r31, Y+6	; 0x06
     938:	8e 17       	cp	r24, r30
     93a:	9f 07       	cpc	r25, r31
     93c:	f4 f5       	brge	.+124    	; 0x9ba <get_nearest_station+0xfa>
    {
        float temp = earth_distance(lat, lon, all_stations[i].lat, all_stations[i].lon);
     93e:	e9 81       	ldd	r30, Y+1	; 0x01
     940:	fa 81       	ldd	r31, Y+2	; 0x02
     942:	a0 88       	ldd	r10, Z+16	; 0x10
     944:	b1 88       	ldd	r11, Z+17	; 0x11
     946:	c2 88       	ldd	r12, Z+18	; 0x12
     948:	d3 88       	ldd	r13, Z+19	; 0x13
     94a:	e4 84       	ldd	r14, Z+12	; 0x0c
     94c:	f5 84       	ldd	r15, Z+13	; 0x0d
     94e:	06 85       	ldd	r16, Z+14	; 0x0e
     950:	17 85       	ldd	r17, Z+15	; 0x0f
     952:	2f 81       	ldd	r18, Y+7	; 0x07
     954:	38 85       	ldd	r19, Y+8	; 0x08
     956:	49 85       	ldd	r20, Y+9	; 0x09
     958:	5a 85       	ldd	r21, Y+10	; 0x0a
     95a:	c3 01       	movw	r24, r6
     95c:	b2 01       	movw	r22, r4
     95e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <earth_distance>
     962:	7b 01       	movw	r14, r22
     964:	8c 01       	movw	r16, r24
        if ((temp < min_dist)||(min_dist==-1))
     966:	91 01       	movw	r18, r2
     968:	a4 01       	movw	r20, r8
     96a:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     96e:	87 fd       	sbrc	r24, 7
     970:	0d c0       	rjmp	.+26     	; 0x98c <get_nearest_station+0xcc>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 e8       	ldi	r20, 0x80	; 128
     978:	5f eb       	ldi	r21, 0xBF	; 191
     97a:	b1 01       	movw	r22, r2
     97c:	c4 01       	movw	r24, r8
     97e:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	41 f0       	breq	.+16     	; 0x996 <get_nearest_station+0xd6>
     986:	71 01       	movw	r14, r2
     988:	84 01       	movw	r16, r8
     98a:	09 c0       	rjmp	.+18     	; 0x99e <get_nearest_station+0xde>
     98c:	fb 85       	ldd	r31, Y+11	; 0x0b
     98e:	fb 83       	std	Y+3, r31	; 0x03
     990:	2c 85       	ldd	r18, Y+12	; 0x0c
     992:	2c 83       	std	Y+4, r18	; 0x04
     994:	04 c0       	rjmp	.+8      	; 0x99e <get_nearest_station+0xde>
     996:	3b 85       	ldd	r19, Y+11	; 0x0b
     998:	3b 83       	std	Y+3, r19	; 0x03
     99a:	8c 85       	ldd	r24, Y+12	; 0x0c
     99c:	8c 83       	std	Y+4, r24	; 0x04
{
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
     99e:	eb 85       	ldd	r30, Y+11	; 0x0b
     9a0:	fc 85       	ldd	r31, Y+12	; 0x0c
     9a2:	31 96       	adiw	r30, 0x01	; 1
     9a4:	fc 87       	std	Y+12, r31	; 0x0c
     9a6:	eb 87       	std	Y+11, r30	; 0x0b
     9a8:	29 81       	ldd	r18, Y+1	; 0x01
     9aa:	3a 81       	ldd	r19, Y+2	; 0x02
     9ac:	24 5e       	subi	r18, 0xE4	; 228
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	3a 83       	std	Y+2, r19	; 0x02
     9b2:	29 83       	std	Y+1, r18	; 0x01
     9b4:	17 01       	movw	r2, r14
     9b6:	48 01       	movw	r8, r16
     9b8:	bb cf       	rjmp	.-138    	; 0x930 <get_nearest_station+0x70>
            min_dist = temp;
        }
    }

    return station_index;
}
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	2c 96       	adiw	r28, 0x0c	; 12
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	9f 90       	pop	r9
     9e0:	8f 90       	pop	r8
     9e2:	7f 90       	pop	r7
     9e4:	6f 90       	pop	r6
     9e6:	5f 90       	pop	r5
     9e8:	4f 90       	pop	r4
     9ea:	3f 90       	pop	r3
     9ec:	2f 90       	pop	r2
     9ee:	08 95       	ret

000009f0 <my_distance_to_station>:

//find the distance from the user to a particular station
float my_distance_to_station(int station_index)
{
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
    return earth_distance(user->lat, user->lon, all_stations[station_index].lat, all_stations[station_index].lon);
     a00:	2c e1       	ldi	r18, 0x1C	; 28
     a02:	ac 01       	movw	r20, r24
     a04:	24 9f       	mul	r18, r20
     a06:	c0 01       	movw	r24, r0
     a08:	25 9f       	mul	r18, r21
     a0a:	90 0d       	add	r25, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	e0 91 e1 03 	lds	r30, 0x03E1
     a12:	f0 91 e2 03 	lds	r31, 0x03E2
     a16:	e8 0f       	add	r30, r24
     a18:	f9 1f       	adc	r31, r25
     a1a:	a0 91 e3 03 	lds	r26, 0x03E3
     a1e:	b0 91 e4 03 	lds	r27, 0x03E4
     a22:	a0 88       	ldd	r10, Z+16	; 0x10
     a24:	b1 88       	ldd	r11, Z+17	; 0x11
     a26:	c2 88       	ldd	r12, Z+18	; 0x12
     a28:	d3 88       	ldd	r13, Z+19	; 0x13
     a2a:	e4 84       	ldd	r14, Z+12	; 0x0c
     a2c:	f5 84       	ldd	r15, Z+13	; 0x0d
     a2e:	06 85       	ldd	r16, Z+14	; 0x0e
     a30:	17 85       	ldd	r17, Z+15	; 0x0f
     a32:	55 96       	adiw	r26, 0x15	; 21
     a34:	2d 91       	ld	r18, X+
     a36:	3d 91       	ld	r19, X+
     a38:	4d 91       	ld	r20, X+
     a3a:	5c 91       	ld	r21, X
     a3c:	58 97       	sbiw	r26, 0x18	; 24
     a3e:	51 96       	adiw	r26, 0x11	; 17
     a40:	6d 91       	ld	r22, X+
     a42:	7d 91       	ld	r23, X+
     a44:	8d 91       	ld	r24, X+
     a46:	9c 91       	ld	r25, X
     a48:	54 97       	sbiw	r26, 0x14	; 20
     a4a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <earth_distance>
}
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	08 95       	ret

00000a60 <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     a60:	2b ed       	ldi	r18, 0xDB	; 219
     a62:	3f e0       	ldi	r19, 0x0F	; 15
     a64:	49 e4       	ldi	r20, 0x49	; 73
     a66:	50 e4       	ldi	r21, 0x40	; 64
     a68:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	44 e3       	ldi	r20, 0x34	; 52
     a72:	53 e4       	ldi	r21, 0x43	; 67
     a74:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
}
     a78:	08 95       	ret

00000a7a <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(void)
{
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
    int i;
    for (i=0; i<4; i++)
    {
        if (user->msg_type[i]=='\0')
     a7e:	c0 91 e3 03 	lds	r28, 0x03E3
     a82:	d0 91 e4 03 	lds	r29, 0x03E4
     a86:	fe 01       	movw	r30, r28
     a88:	ce 01       	movw	r24, r28
     a8a:	04 96       	adiw	r24, 0x04	; 4
     a8c:	21 91       	ld	r18, Z+
     a8e:	22 23       	and	r18, r18
     a90:	61 f1       	breq	.+88     	; 0xaea <gps_locked+0x70>

//make sure there is valid GPS data to work with
int gps_locked(void)
{
    int i;
    for (i=0; i<4; i++)
     a92:	e8 17       	cp	r30, r24
     a94:	f9 07       	cpc	r31, r25
     a96:	d1 f7       	brne	.-12     	; 0xa8c <gps_locked+0x12>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fe 01       	movw	r30, r28
     a9e:	e8 0f       	add	r30, r24
     aa0:	f9 1f       	adc	r31, r25
            return 0;
    }

    for (i=0; i<4; i++)
    {
        if (user->utc_time[i]=='\0')
     aa2:	20 85       	ldd	r18, Z+8	; 0x08
     aa4:	22 23       	and	r18, r18
     aa6:	09 f1       	breq	.+66     	; 0xaea <gps_locked+0x70>
    {
        if (user->msg_type[i]=='\0')
            return 0;
    }

    for (i=0; i<4; i++)
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	84 30       	cpi	r24, 0x04	; 4
     aac:	91 05       	cpc	r25, r1
     aae:	b1 f7       	brne	.-20     	; 0xa9c <gps_locked+0x22>
    {
        if (user->utc_time[i]=='\0')
            return 0;
    }

    if ((user->lat==0)||(user->lon==0))
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	a9 01       	movw	r20, r18
     ab6:	69 89       	ldd	r22, Y+17	; 0x11
     ab8:	7a 89       	ldd	r23, Y+18	; 0x12
     aba:	8b 89       	ldd	r24, Y+19	; 0x13
     abc:	9c 89       	ldd	r25, Y+20	; 0x14
     abe:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     ac2:	88 23       	and	r24, r24
     ac4:	91 f0       	breq	.+36     	; 0xaea <gps_locked+0x70>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	a9 01       	movw	r20, r18
     acc:	6d 89       	ldd	r22, Y+21	; 0x15
     ace:	7e 89       	ldd	r23, Y+22	; 0x16
     ad0:	8f 89       	ldd	r24, Y+23	; 0x17
     ad2:	98 8d       	ldd	r25, Y+24	; 0x18
     ad4:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     ad8:	88 23       	and	r24, r24
     ada:	39 f0       	breq	.+14     	; 0xaea <gps_locked+0x70>
        return 0;

    if (user->checksum[0] != '*')
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	2a a9       	ldd	r18, Y+50	; 0x32
     ae2:	2a 32       	cpi	r18, 0x2A	; 42
     ae4:	21 f0       	breq	.+8      	; 0xaee <gps_locked+0x74>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <gps_locked+0x74>
{
    int i;
    for (i=0; i<4; i++)
    {
        if (user->msg_type[i]=='\0')
            return 0;
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
    if (user->checksum[0] != '*')
        return 0;

    return 1;

}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	8c 01       	movw	r16, r24
     afe:	eb 01       	movw	r28, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     b00:	6f 3f       	cpi	r22, 0xFF	; 255
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	78 07       	cpc	r23, r24
     b06:	59 f4       	brne	.+22     	; 0xb1e <print_eeprom_contents+0x2a>
        end_addr = 1+num_stations*STATION_BLOCKSIZE;
     b08:	80 91 db 03 	lds	r24, 0x03DB
     b0c:	90 91 dc 03 	lds	r25, 0x03DC
     b10:	2c e1       	ldi	r18, 0x1C	; 28
     b12:	28 9f       	mul	r18, r24
     b14:	e0 01       	movw	r28, r0
     b16:	29 9f       	mul	r18, r25
     b18:	d0 0d       	add	r29, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
     b1e:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     b22:	0c 17       	cp	r16, r28
     b24:	1d 07       	cpc	r17, r29
     b26:	bc f4       	brge	.+46     	; 0xb56 <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     b28:	80 91 7e 03 	lds	r24, 0x037E
     b2c:	90 91 7f 03 	lds	r25, 0x037F
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	89 f0       	breq	.+34     	; 0xb56 <print_eeprom_contents+0x62>
        one_byte = my_eeprom_read_char(i);
     b34:	c8 01       	movw	r24, r16
     b36:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <my_eeprom_read_char>
        if (one_byte == '\0')
     b3a:	81 11       	cpse	r24, r1
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <print_eeprom_contents+0x4c>
            one_byte = '?';
     b3e:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     b40:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
     b44:	87 ea       	ldi	r24, 0xA7	; 167
     b46:	91 e6       	ldi	r25, 0x61	; 97
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <print_eeprom_contents+0x54>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <print_eeprom_contents+0x5a>
     b4e:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     b50:	0f 5f       	subi	r16, 0xFF	; 255
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	e6 cf       	rjmp	.-52     	; 0xb22 <print_eeprom_contents+0x2e>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     b66:	c0 e0       	ldi	r28, 0x00	; 0
     b68:	d0 e0       	ldi	r29, 0x00	; 0
     b6a:	1c e1       	ldi	r17, 0x1C	; 28
     b6c:	20 91 db 03 	lds	r18, 0x03DB
     b70:	30 91 dc 03 	lds	r19, 0x03DC
     b74:	12 9f       	mul	r17, r18
     b76:	c0 01       	movw	r24, r0
     b78:	13 9f       	mul	r17, r19
     b7a:	90 0d       	add	r25, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	c8 17       	cp	r28, r24
     b80:	d9 07       	cpc	r29, r25
     b82:	b4 f4       	brge	.+44     	; 0xbb0 <print_eeprom_station_contents+0x50>
    {
        if (op_mode==MD_UPDATE) return;
     b84:	80 91 7e 03 	lds	r24, 0x037E
     b88:	90 91 7f 03 	lds	r25, 0x037F
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	81 f0       	breq	.+32     	; 0xbb0 <print_eeprom_station_contents+0x50>
        one_byte = my_eeprom_read_char(start+i);
     b90:	21 96       	adiw	r28, 0x01	; 1
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <my_eeprom_read_char>
        if (one_byte == '\0')
     b98:	81 11       	cpse	r24, r1
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <print_eeprom_station_contents+0x3e>
            one_byte = '?';
     b9c:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     b9e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
     ba2:	87 ea       	ldi	r24, 0xA7	; 167
     ba4:	91 e6       	ldi	r25, 0x61	; 97
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <print_eeprom_station_contents+0x46>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <print_eeprom_station_contents+0x4c>
     bac:	00 00       	nop
     bae:	de cf       	rjmp	.-68     	; 0xb6c <print_eeprom_station_contents+0xc>
        _delay_ms(100);
    }
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	08 95       	ret

00000bb8 <wait_for_update>:
    }
}

void wait_for_update(void)
{
    lcd_init();
     bb8:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("update required\n...feed me...");
     bbc:	85 e6       	ldi	r24, 0x65	; 101
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     bc4:	80 91 7e 03 	lds	r24, 0x037E
     bc8:	90 91 7f 03 	lds	r25, 0x037F
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <wait_for_update+0xc>
    }
}
     bd0:	08 95       	ret

00000bd2 <print_gps_data>:
    _delay_ms(2000);
}

//print the formatted data stored in the UserData struct to the screen
void print_gps_data(void)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     bd6:	80 91 7e 03 	lds	r24, 0x037E
     bda:	90 91 7f 03 	lds	r25, 0x037F
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	09 f4       	brne	.+2      	; 0xbe4 <print_gps_data+0x12>
     be2:	c4 c0       	rjmp	.+392    	; 0xd6c <print_gps_data+0x19a>
    lcd_init();
     be4:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("Printing\nGPS Data");
     be8:	83 e8       	ldi	r24, 0x83	; 131
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
     bf0:	2f e3       	ldi	r18, 0x3F	; 63
     bf2:	8d e0       	ldi	r24, 0x0D	; 13
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	21 50       	subi	r18, 0x01	; 1
     bf8:	80 40       	sbci	r24, 0x00	; 0
     bfa:	90 40       	sbci	r25, 0x00	; 0
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <print_gps_data+0x24>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <print_gps_data+0x2e>
     c00:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     c02:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
     c06:	c0 e0       	ldi	r28, 0x00	; 0
     c08:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     c0a:	20 97       	sbiw	r28, 0x00	; 0
     c0c:	69 f0       	breq	.+26     	; 0xc28 <print_gps_data+0x56>
            string_write("\n");
     c0e:	89 e6       	ldi	r24, 0x69	; 105
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>

        switch (i)
     c16:	fe 01       	movw	r30, r28
     c18:	32 97       	sbiw	r30, 0x02	; 2
     c1a:	e9 30       	cpi	r30, 0x09	; 9
     c1c:	f1 05       	cpc	r31, r1
     c1e:	78 f4       	brcc	.+30     	; 0xc3e <print_gps_data+0x6c>
     c20:	ea 5b       	subi	r30, 0xBA	; 186
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
     c28:	85 e9       	ldi	r24, 0x95	; 149
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_numchars(user->msg_type,8);
     c30:	68 e0       	ldi	r22, 0x08	; 8
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 91 e3 03 	lds	r24, 0x03E3
     c38:	90 91 e4 03 	lds	r25, 0x03E4
     c3c:	81 c0       	rjmp	.+258    	; 0xd40 <print_gps_data+0x16e>
            break;

            case 1:
                string_write("Time: ");
     c3e:	8f e9       	ldi	r24, 0x9F	; 159
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_numchars(user->utc_time,8);
     c46:	80 91 e3 03 	lds	r24, 0x03E3
     c4a:	90 91 e4 03 	lds	r25, 0x03E4
     c4e:	68 e0       	ldi	r22, 0x08	; 8
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	08 96       	adiw	r24, 0x08	; 8
     c54:	75 c0       	rjmp	.+234    	; 0xd40 <print_gps_data+0x16e>
            break;

            case 2:
                string_write("NRW: ");
     c56:	86 ea       	ldi	r24, 0xA6	; 166
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                char_write(user->nrw);
     c5e:	e0 91 e3 03 	lds	r30, 0x03E3
     c62:	f0 91 e4 03 	lds	r31, 0x03E4
     c66:	80 89       	ldd	r24, Z+16	; 0x10
     c68:	5d c0       	rjmp	.+186    	; 0xd24 <print_gps_data+0x152>
            break;

            case 3:
                string_write("Lat: ");
     c6a:	8c ea       	ldi	r24, 0xAC	; 172
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_float(user->lat,4);
     c72:	e0 91 e3 03 	lds	r30, 0x03E3
     c76:	f0 91 e4 03 	lds	r31, 0x03E4
     c7a:	61 89       	ldd	r22, Z+17	; 0x11
     c7c:	72 89       	ldd	r23, Z+18	; 0x12
     c7e:	83 89       	ldd	r24, Z+19	; 0x13
     c80:	94 89       	ldd	r25, Z+20	; 0x14
     c82:	0c c0       	rjmp	.+24     	; 0xc9c <print_gps_data+0xca>
            break;

            case 4:
                string_write("Lon: ");
     c84:	82 eb       	ldi	r24, 0xB2	; 178
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_float(user->lon,4);
     c8c:	e0 91 e3 03 	lds	r30, 0x03E3
     c90:	f0 91 e4 03 	lds	r31, 0x03E4
     c94:	65 89       	ldd	r22, Z+21	; 0x15
     c96:	76 89       	ldd	r23, Z+22	; 0x16
     c98:	87 89       	ldd	r24, Z+23	; 0x17
     c9a:	90 8d       	ldd	r25, Z+24	; 0x18
     c9c:	44 e0       	ldi	r20, 0x04	; 4
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	1d c0       	rjmp	.+58     	; 0xcdc <print_gps_data+0x10a>
            break;

            case 5:
                string_write("Speed: ");
     ca2:	88 eb       	ldi	r24, 0xB8	; 184
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_float(user->speed,1);
     caa:	e0 91 e3 03 	lds	r30, 0x03E3
     cae:	f0 91 e4 03 	lds	r31, 0x03E4
     cb2:	61 8d       	ldd	r22, Z+25	; 0x19
     cb4:	72 8d       	ldd	r23, Z+26	; 0x1a
     cb6:	83 8d       	ldd	r24, Z+27	; 0x1b
     cb8:	94 8d       	ldd	r25, Z+28	; 0x1c
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <print_gps_data+0x10a>
            break;

            case 6:
                string_write("Course: ");
     cc0:	80 ec       	ldi	r24, 0xC0	; 192
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_float(user->course,3);
     cc8:	e0 91 e3 03 	lds	r30, 0x03E3
     ccc:	f0 91 e4 03 	lds	r31, 0x03E4
     cd0:	65 8d       	ldd	r22, Z+29	; 0x1d
     cd2:	76 8d       	ldd	r23, Z+30	; 0x1e
     cd4:	87 8d       	ldd	r24, Z+31	; 0x1f
     cd6:	90 a1       	ldd	r25, Z+32	; 0x20
     cd8:	43 e0       	ldi	r20, 0x03	; 3
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
            break;
     ce0:	31 c0       	rjmp	.+98     	; 0xd44 <print_gps_data+0x172>

            case 7:
                string_write("Date: ");
     ce2:	89 ec       	ldi	r24, 0xC9	; 201
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_numchars(user->date,8);
     cea:	80 91 e3 03 	lds	r24, 0x03E3
     cee:	90 91 e4 03 	lds	r25, 0x03E4
     cf2:	68 e0       	ldi	r22, 0x08	; 8
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	81 96       	adiw	r24, 0x21	; 33
     cf8:	23 c0       	rjmp	.+70     	; 0xd40 <print_gps_data+0x16e>
            break;

            case 8:
                string_write("MagVar: ");
     cfa:	80 ed       	ldi	r24, 0xD0	; 208
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_numchars(user->mag_var,8);
     d02:	80 91 e3 03 	lds	r24, 0x03E3
     d06:	90 91 e4 03 	lds	r25, 0x03E4
     d0a:	68 e0       	ldi	r22, 0x08	; 8
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	89 96       	adiw	r24, 0x29	; 41
     d10:	17 c0       	rjmp	.+46     	; 0xd40 <print_gps_data+0x16e>
            break;

            case 9:
                string_write("Mode: ");
     d12:	89 ed       	ldi	r24, 0xD9	; 217
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                char_write(user->mode);
     d1a:	e0 91 e3 03 	lds	r30, 0x03E3
     d1e:	f0 91 e4 03 	lds	r31, 0x03E4
     d22:	81 a9       	ldd	r24, Z+49	; 0x31
     d24:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
            break;
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <print_gps_data+0x172>

            case 10:
                string_write("Checksum: ");
     d2a:	80 ee       	ldi	r24, 0xE0	; 224
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_numchars(user->checksum,3);
     d32:	80 91 e3 03 	lds	r24, 0x03E3
     d36:	90 91 e4 03 	lds	r25, 0x03E4
     d3a:	63 e0       	ldi	r22, 0x03	; 3
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	c2 96       	adiw	r24, 0x32	; 50
     d40:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <string_write_numchars>
     d44:	2f e3       	ldi	r18, 0x3F	; 63
     d46:	8d e0       	ldi	r24, 0x0D	; 13
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	80 40       	sbci	r24, 0x00	; 0
     d4e:	90 40       	sbci	r25, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <print_gps_data+0x178>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <print_gps_data+0x182>
     d54:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
     d56:	80 91 7e 03 	lds	r24, 0x037E
     d5a:	90 91 7f 03 	lds	r25, 0x037F
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	29 f0       	breq	.+10     	; 0xd6c <print_gps_data+0x19a>
    lcd_init();
    string_write("Printing\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
     d62:	21 96       	adiw	r28, 0x01	; 1
     d64:	cb 30       	cpi	r28, 0x0B	; 11
     d66:	d1 05       	cpc	r29, r1
     d68:	09 f0       	breq	.+2      	; 0xd6c <print_gps_data+0x19a>
     d6a:	4f cf       	rjmp	.-354    	; 0xc0a <print_gps_data+0x38>
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
    }
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(void)
{
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     d7a:	80 91 7e 03 	lds	r24, 0x037E
     d7e:	90 91 7f 03 	lds	r25, 0x037F
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	09 f4       	brne	.+2      	; 0xd88 <print_raw_gps_data+0x16>
     d86:	6a c0       	rjmp	.+212    	; 0xe5c <print_raw_gps_data+0xea>
    lcd_init();
     d88:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("Printing Raw\nGPS Data");
     d8c:	8b ee       	ldi	r24, 0xEB	; 235
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
     d94:	2f e3       	ldi	r18, 0x3F	; 63
     d96:	8d e0       	ldi	r24, 0x0D	; 13
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	80 40       	sbci	r24, 0x00	; 0
     d9e:	90 40       	sbci	r25, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <print_raw_gps_data+0x28>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <print_raw_gps_data+0x32>
     da4:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     da6:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
     daa:	05 e6       	ldi	r16, 0x65	; 101
     dac:	14 e0       	ldi	r17, 0x04	; 4
    int i=0;
    for (i=0; i<13; i++)
     dae:	c0 e0       	ldi	r28, 0x00	; 0
     db0:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     db2:	20 97       	sbiw	r28, 0x00	; 0
     db4:	69 f0       	breq	.+26     	; 0xdd0 <print_raw_gps_data+0x5e>
            string_write("\n");
     db6:	89 e6       	ldi	r24, 0x69	; 105
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>

        switch (i)
     dbe:	fe 01       	movw	r30, r28
     dc0:	32 97       	sbiw	r30, 0x02	; 2
     dc2:	eb 30       	cpi	r30, 0x0B	; 11
     dc4:	f1 05       	cpc	r31, r1
     dc6:	38 f4       	brcc	.+14     	; 0xdd6 <print_raw_gps_data+0x64>
     dc8:	e1 5b       	subi	r30, 0xB1	; 177
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__tablejump2__>
        {
            case 0:
                string_write("Message");
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	23 c0       	rjmp	.+70     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 1:
                string_write("Time");
     dd6:	89 e0       	ldi	r24, 0x09	; 9
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	20 c0       	rjmp	.+64     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 2:
                string_write("NRW");
     ddc:	8e e0       	ldi	r24, 0x0E	; 14
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	1d c0       	rjmp	.+58     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 3:
                string_write("Lat");
     de2:	82 e1       	ldi	r24, 0x12	; 18
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	1a c0       	rjmp	.+52     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 4:
                string_write("N/S");
     de8:	86 e1       	ldi	r24, 0x16	; 22
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	17 c0       	rjmp	.+46     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 5:
                string_write("Lon");
     dee:	8a e1       	ldi	r24, 0x1A	; 26
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	14 c0       	rjmp	.+40     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 6:
                string_write("E/W");
     df4:	8e e1       	ldi	r24, 0x1E	; 30
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 7:
                string_write("Speed");
     dfa:	82 e2       	ldi	r24, 0x22	; 34
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 8:
                string_write("Course");
     e00:	88 e2       	ldi	r24, 0x28	; 40
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 9:
                string_write("Date");
     e06:	8f e2       	ldi	r24, 0x2F	; 47
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 10:
                string_write("MagVar");
     e0c:	84 e3       	ldi	r24, 0x34	; 52
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 11:
                string_write("Mode");
     e12:	8b e3       	ldi	r24, 0x3B	; 59
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <print_raw_gps_data+0xaa>
            break;

            case 12:
                string_write("Checksum");
     e18:	80 e4       	ldi	r24, 0x40	; 64
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
            break;
        }

        string_write(": ");
     e20:	8f e8       	ldi	r24, 0x8F	; 143
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
        string_write(gps_data[i]);
     e28:	f8 01       	movw	r30, r16
     e2a:	81 91       	ld	r24, Z+
     e2c:	91 91       	ld	r25, Z+
     e2e:	8f 01       	movw	r16, r30
     e30:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
     e34:	ff e9       	ldi	r31, 0x9F	; 159
     e36:	26 e8       	ldi	r18, 0x86	; 134
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	f1 50       	subi	r31, 0x01	; 1
     e3c:	20 40       	sbci	r18, 0x00	; 0
     e3e:	80 40       	sbci	r24, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <print_raw_gps_data+0xc8>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <print_raw_gps_data+0xd2>
     e44:	00 00       	nop

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
     e46:	80 91 7e 03 	lds	r24, 0x037E
     e4a:	90 91 7f 03 	lds	r25, 0x037F
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	29 f0       	breq	.+10     	; 0xe5c <print_raw_gps_data+0xea>
    lcd_init();
    string_write("Printing Raw\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
     e52:	21 96       	adiw	r28, 0x01	; 1
     e54:	cd 30       	cpi	r28, 0x0D	; 13
     e56:	d1 05       	cpc	r29, r1
     e58:	09 f0       	breq	.+2      	; 0xe5c <print_raw_gps_data+0xea>
     e5a:	ab cf       	rjmp	.-170    	; 0xdb2 <print_raw_gps_data+0x40>
        string_write(gps_data[i]);

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
    }
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(void)
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
    int i;
    lcd_init();
     e6a:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("wiping\nmemory...");
     e6e:	89 e4       	ldi	r24, 0x49	; 73
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     e76:	c0 e0       	ldi	r28, 0x00	; 0
     e78:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     e7a:	80 91 7e 03 	lds	r24, 0x037E
     e7e:	90 91 7f 03 	lds	r25, 0x037F
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	49 f0       	breq	.+18     	; 0xe98 <wipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     e86:	6f ef       	ldi	r22, 0xFF	; 255
     e88:	ce 01       	movw	r24, r28
     e8a:	0e 94 b6 1a 	call	0x356c	; 0x356c <__eewr_byte_m1284p>
void wipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     e8e:	21 96       	adiw	r28, 0x01	; 1
     e90:	c1 3f       	cpi	r28, 0xF1	; 241
     e92:	8a e0       	ldi	r24, 0x0A	; 10
     e94:	d8 07       	cpc	r29, r24
     e96:	89 f7       	brne	.-30     	; 0xe7a <wipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     ea6:	2c e1       	ldi	r18, 0x1C	; 28
     ea8:	28 9f       	mul	r18, r24
     eaa:	80 01       	movw	r16, r0
     eac:	29 9f       	mul	r18, r25
     eae:	10 0d       	add	r17, r0
     eb0:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     eb2:	c0 e0       	ldi	r28, 0x00	; 0
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     eb6:	e0 91 e1 03 	lds	r30, 0x03E1
     eba:	f0 91 e2 03 	lds	r31, 0x03E2
     ebe:	e0 0f       	add	r30, r16
     ec0:	f1 1f       	adc	r31, r17
     ec2:	ec 0f       	add	r30, r28
     ec4:	fd 1f       	adc	r31, r29
     ec6:	80 81       	ld	r24, Z
     ec8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     ecc:	21 96       	adiw	r28, 0x01	; 1
     ece:	c8 30       	cpi	r28, 0x08	; 8
     ed0:	d1 05       	cpc	r29, r1
     ed2:	89 f7       	brne	.-30     	; 0xeb6 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <check_database_integrity>:
    _delay_ms(500);
}

//check for database corruption
void check_database_integrity(void)
{
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     ee6:	60 91 db 03 	lds	r22, 0x03DB
     eea:	70 91 dc 03 	lds	r23, 0x03DC
     eee:	80 91 e1 03 	lds	r24, 0x03E1
     ef2:	90 91 e2 03 	lds	r25, 0x03E2
     ef6:	c0 e0       	ldi	r28, 0x00	; 0
     ef8:	d0 e0       	ldi	r29, 0x00	; 0
     efa:	c6 17       	cp	r28, r22
     efc:	d7 07       	cpc	r29, r23
     efe:	0c f0       	brlt	.+2      	; 0xf02 <check_database_integrity+0x24>
     f00:	6c c0       	rjmp	.+216    	; 0xfda <check_database_integrity+0xfc>
     f02:	ac 01       	movw	r20, r24
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if (((call[j] < 33)||(call[j] > 126))&&(call[j]!=' '))
     f08:	8a 01       	movw	r16, r20
     f0a:	4f 5f       	subi	r20, 0xFF	; 255
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	d8 01       	movw	r26, r16
     f10:	ec 91       	ld	r30, X
     f12:	e0 52       	subi	r30, 0x20	; 32
     f14:	ef 35       	cpi	r30, 0x5F	; 95
     f16:	08 f4       	brcc	.+2      	; 0xf1a <check_database_integrity+0x3c>
     f18:	57 c0       	rjmp	.+174    	; 0xfc8 <check_database_integrity+0xea>
            {
                database_corrupted = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 79 03 	sts	0x0379, r25
     f22:	80 93 78 03 	sts	0x0378, r24
                lcd_init();
     f26:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
                string_write("CORRUPTION\nDETECTED");
     f2a:	8a e5       	ldi	r24, 0x5A	; 90
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
     f32:	bf e7       	ldi	r27, 0x7F	; 127
     f34:	ea e1       	ldi	r30, 0x1A	; 26
     f36:	f6 e0       	ldi	r31, 0x06	; 6
     f38:	b1 50       	subi	r27, 0x01	; 1
     f3a:	e0 40       	sbci	r30, 0x00	; 0
     f3c:	f0 40       	sbci	r31, 0x00	; 0
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <check_database_integrity+0x5a>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <check_database_integrity+0x64>
     f42:	00 00       	nop
                _delay_ms(2000);
                lcd_init();
     f44:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
                string_write("tracing\ncorruption...");
     f48:	8e e6       	ldi	r24, 0x6E	; 110
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
     f50:	2f e9       	ldi	r18, 0x9F	; 159
     f52:	86 e8       	ldi	r24, 0x86	; 134
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	90 40       	sbci	r25, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <check_database_integrity+0x78>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <check_database_integrity+0x82>
     f60:	00 00       	nop
                _delay_ms(500);
                lcd_init();
     f62:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
                string_write("station #");
     f66:	84 e8       	ldi	r24, 0x84	; 132
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                string_write_int(i+1,3);
     f6e:	63 e0       	ldi	r22, 0x03	; 3
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
                string_write(" : ");
     f7a:	8e e8       	ldi	r24, 0x8E	; 142
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
                char_write('\'');
     f82:	87 e2       	ldi	r24, 0x27	; 39
     f84:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
                char_write(call[j]);
     f88:	d8 01       	movw	r26, r16
     f8a:	8c 91       	ld	r24, X
     f8c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
                char_write('\'');
     f90:	87 e2       	ldi	r24, 0x27	; 39
     f92:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
                char_write('\n');
     f96:	8a e0       	ldi	r24, 0x0A	; 10
     f98:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
     f9c:	bf e7       	ldi	r27, 0x7F	; 127
     f9e:	ea e1       	ldi	r30, 0x1A	; 26
     fa0:	f6 e0       	ldi	r31, 0x06	; 6
     fa2:	b1 50       	subi	r27, 0x01	; 1
     fa4:	e0 40       	sbci	r30, 0x00	; 0
     fa6:	f0 40       	sbci	r31, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <check_database_integrity+0xc4>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <check_database_integrity+0xce>
     fac:	00 00       	nop
                _delay_ms(2000);
                print_callsign(i);
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <print_callsign>
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	84 e3       	ldi	r24, 0x34	; 52
     fb8:	9c e0       	ldi	r25, 0x0C	; 12
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	80 40       	sbci	r24, 0x00	; 0
     fbe:	90 40       	sbci	r25, 0x00	; 0
     fc0:	e1 f7       	brne	.-8      	; 0xfba <check_database_integrity+0xdc>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <check_database_integrity+0xe6>
     fc4:	00 00       	nop
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <check_database_integrity+0xfc>
{
    int i, j;
    for (i=0; i<num_stations; i++)
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	28 30       	cpi	r18, 0x08	; 8
     fce:	31 05       	cpc	r19, r1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <check_database_integrity+0xf6>
     fd2:	9a cf       	rjmp	.-204    	; 0xf08 <check_database_integrity+0x2a>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     fd4:	21 96       	adiw	r28, 0x01	; 1
     fd6:	4c 96       	adiw	r24, 0x1c	; 28
     fd8:	90 cf       	rjmp	.-224    	; 0xefa <check_database_integrity+0x1c>
                _delay_ms(4000);
                return;
            }
        }
    }
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     fec:	80 91 7e 03 	lds	r24, 0x037E
     ff0:	90 91 7f 03 	lds	r25, 0x037F
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	09 f4       	brne	.+2      	; 0xffa <print_all_callsigns+0x16>
     ff8:	4d c0       	rjmp	.+154    	; 0x1094 <print_all_callsigns+0xb0>
    int i;
    lcd_init();
     ffa:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write_int(num_stations,3);
     ffe:	63 e0       	ldi	r22, 0x03	; 3
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 91 db 03 	lds	r24, 0x03DB
    1006:	90 91 dc 03 	lds	r25, 0x03DC
    100a:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
    string_write(" known\nstations");
    100e:	82 e9       	ldi	r24, 0x92	; 146
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1016:	2f e7       	ldi	r18, 0x7F	; 127
    1018:	8a e1       	ldi	r24, 0x1A	; 26
    101a:	96 e0       	ldi	r25, 0x06	; 6
    101c:	21 50       	subi	r18, 0x01	; 1
    101e:	80 40       	sbci	r24, 0x00	; 0
    1020:	90 40       	sbci	r25, 0x00	; 0
    1022:	e1 f7       	brne	.-8      	; 0x101c <print_all_callsigns+0x38>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <print_all_callsigns+0x42>
    1026:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1028:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("\n");
    102c:	89 e6       	ldi	r24, 0x69	; 105
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>

    for (i=0; i<num_stations; i++)
    1034:	c0 e0       	ldi	r28, 0x00	; 0
    1036:	d0 e0       	ldi	r29, 0x00	; 0
    1038:	80 91 db 03 	lds	r24, 0x03DB
    103c:	90 91 dc 03 	lds	r25, 0x03DC
    1040:	c8 17       	cp	r28, r24
    1042:	d9 07       	cpc	r29, r25
    1044:	3c f5       	brge	.+78     	; 0x1094 <print_all_callsigns+0xb0>
    {
        if (op_mode==MD_UPDATE) return;
    1046:	80 91 7e 03 	lds	r24, 0x037E
    104a:	90 91 7f 03 	lds	r25, 0x037F
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	09 f1       	breq	.+66     	; 0x1094 <print_all_callsigns+0xb0>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
    1052:	89 e6       	ldi	r24, 0x69	; 105
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    105a:	8e 01       	movw	r16, r28
    105c:	0f 5f       	subi	r16, 0xFF	; 255
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	63 e0       	ldi	r22, 0x03	; 3
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	c8 01       	movw	r24, r16
    1066:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
    106a:	8f e8       	ldi	r24, 0x8F	; 143
    106c:	92 e0       	ldi	r25, 0x02	; 2
    106e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 4f 07 	call	0xe9e	; 0xe9e <print_callsign>

        if (op_mode==MD_UPDATE) return;
    1078:	80 91 7e 03 	lds	r24, 0x037E
    107c:	90 91 7f 03 	lds	r25, 0x037F
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	41 f0       	breq	.+16     	; 0x1094 <print_all_callsigns+0xb0>
    1084:	83 e2       	ldi	r24, 0x23	; 35
    1086:	94 ef       	ldi	r25, 0xF4	; 244
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <print_all_callsigns+0xa4>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <print_all_callsigns+0xaa>
    108e:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    string_write("\n");

    for (i=0; i<num_stations; i++)
    1090:	e8 01       	movw	r28, r16
    1092:	d2 cf       	rjmp	.-92     	; 0x1038 <print_all_callsigns+0x54>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
    10a8:	63 e0       	ldi	r22, 0x03	; 3
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
    10b2:	8f e8       	ldi	r24, 0x8F	; 143
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    10ba:	c8 01       	movw	r24, r16
    10bc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <print_callsign>
    10c0:	83 e2       	ldi	r24, 0x23	; 35
    10c2:	94 ef       	ldi	r25, 0xF4	; 244
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <print_station+0x26>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <print_station+0x2c>
    10ca:	00 00       	nop
    10cc:	89 e6       	ldi	r24, 0x69	; 105
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    if (op_mode==MD_UPDATE)
    10d4:	80 91 7e 03 	lds	r24, 0x037E
    10d8:	90 91 7f 03 	lds	r25, 0x037F
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <print_station+0x44>
    10e0:	b1 c0       	rjmp	.+354    	; 0x1244 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
    10e2:	82 ea       	ldi	r24, 0xA2	; 162
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    10ea:	8c e1       	ldi	r24, 0x1C	; 28
    10ec:	80 9f       	mul	r24, r16
    10ee:	e0 01       	movw	r28, r0
    10f0:	81 9f       	mul	r24, r17
    10f2:	d0 0d       	add	r29, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	e0 91 e1 03 	lds	r30, 0x03E1
    10fa:	f0 91 e2 03 	lds	r31, 0x03E2
    10fe:	ec 0f       	add	r30, r28
    1100:	fd 1f       	adc	r31, r29
    1102:	60 85       	ldd	r22, Z+8	; 0x08
    1104:	71 85       	ldd	r23, Z+9	; 0x09
    1106:	82 85       	ldd	r24, Z+10	; 0x0a
    1108:	93 85       	ldd	r25, Z+11	; 0x0b
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    1112:	83 e2       	ldi	r24, 0x23	; 35
    1114:	94 ef       	ldi	r25, 0xF4	; 244
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <print_station+0x78>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <print_station+0x7e>
    111c:	00 00       	nop
    111e:	89 e6       	ldi	r24, 0x69	; 105
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    if (op_mode==MD_UPDATE)
    1126:	80 91 7e 03 	lds	r24, 0x037E
    112a:	90 91 7f 03 	lds	r25, 0x037F
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	09 f4       	brne	.+2      	; 0x1134 <print_station+0x96>
    1132:	88 c0       	rjmp	.+272    	; 0x1244 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
    1134:	89 ea       	ldi	r24, 0xA9	; 169
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    113c:	e0 91 e1 03 	lds	r30, 0x03E1
    1140:	f0 91 e2 03 	lds	r31, 0x03E2
    1144:	ec 0f       	add	r30, r28
    1146:	fd 1f       	adc	r31, r29
    1148:	64 85       	ldd	r22, Z+12	; 0x0c
    114a:	75 85       	ldd	r23, Z+13	; 0x0d
    114c:	86 85       	ldd	r24, Z+14	; 0x0e
    114e:	97 85       	ldd	r25, Z+15	; 0x0f
    1150:	44 e0       	ldi	r20, 0x04	; 4
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    1158:	83 e2       	ldi	r24, 0x23	; 35
    115a:	94 ef       	ldi	r25, 0xF4	; 244
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <print_station+0xbe>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <print_station+0xc4>
    1162:	00 00       	nop
    1164:	89 e6       	ldi	r24, 0x69	; 105
    1166:	93 e0       	ldi	r25, 0x03	; 3
    1168:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    if (op_mode==MD_UPDATE)
    116c:	80 91 7e 03 	lds	r24, 0x037E
    1170:	90 91 7f 03 	lds	r25, 0x037F
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	09 f4       	brne	.+2      	; 0x117a <print_station+0xdc>
    1178:	65 c0       	rjmp	.+202    	; 0x1244 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
    117a:	8f ea       	ldi	r24, 0xAF	; 175
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1182:	e0 91 e1 03 	lds	r30, 0x03E1
    1186:	f0 91 e2 03 	lds	r31, 0x03E2
    118a:	ec 0f       	add	r30, r28
    118c:	fd 1f       	adc	r31, r29
    118e:	60 89       	ldd	r22, Z+16	; 0x10
    1190:	71 89       	ldd	r23, Z+17	; 0x11
    1192:	82 89       	ldd	r24, Z+18	; 0x12
    1194:	93 89       	ldd	r25, Z+19	; 0x13
    1196:	44 e0       	ldi	r20, 0x04	; 4
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    119e:	83 e2       	ldi	r24, 0x23	; 35
    11a0:	94 ef       	ldi	r25, 0xF4	; 244
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <print_station+0x104>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <print_station+0x10a>
    11a8:	00 00       	nop
    11aa:	89 e6       	ldi	r24, 0x69	; 105
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    if (op_mode==MD_UPDATE)
    11b2:	80 91 7e 03 	lds	r24, 0x037E
    11b6:	90 91 7f 03 	lds	r25, 0x037F
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <print_station+0x122>
    11be:	42 c0       	rjmp	.+132    	; 0x1244 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
    11c0:	85 eb       	ldi	r24, 0xB5	; 181
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    11c8:	e0 91 e1 03 	lds	r30, 0x03E1
    11cc:	f0 91 e2 03 	lds	r31, 0x03E2
    11d0:	ec 0f       	add	r30, r28
    11d2:	fd 1f       	adc	r31, r29
    11d4:	64 89       	ldd	r22, Z+20	; 0x14
    11d6:	75 89       	ldd	r23, Z+21	; 0x15
    11d8:	86 89       	ldd	r24, Z+22	; 0x16
    11da:	97 89       	ldd	r25, Z+23	; 0x17
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    11e4:	83 e2       	ldi	r24, 0x23	; 35
    11e6:	94 ef       	ldi	r25, 0xF4	; 244
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <print_station+0x14a>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <print_station+0x150>
    11ee:	00 00       	nop
    11f0:	89 e6       	ldi	r24, 0x69	; 105
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    if (op_mode==MD_UPDATE)
    11f8:	80 91 7e 03 	lds	r24, 0x037E
    11fc:	90 91 7f 03 	lds	r25, 0x037F
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	01 f1       	breq	.+64     	; 0x1244 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
    1204:	8b eb       	ldi	r24, 0xBB	; 187
    1206:	92 e0       	ldi	r25, 0x02	; 2
    1208:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    120c:	e0 91 e1 03 	lds	r30, 0x03E1
    1210:	f0 91 e2 03 	lds	r31, 0x03E2
    1214:	ec 0f       	add	r30, r28
    1216:	fd 1f       	adc	r31, r29
    1218:	60 8d       	ldd	r22, Z+24	; 0x18
    121a:	71 8d       	ldd	r23, Z+25	; 0x19
    121c:	82 8d       	ldd	r24, Z+26	; 0x1a
    121e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    1228:	83 e2       	ldi	r24, 0x23	; 35
    122a:	94 ef       	ldi	r25, 0xF4	; 244
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <print_station+0x18e>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <print_station+0x194>
    1232:	00 00       	nop
    1234:	89 e6       	ldi	r24, 0x69	; 105
    1236:	93 e0       	ldi	r25, 0x03	; 3
    1238:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    if (op_mode==MD_UPDATE)
    123c:	80 91 7e 03 	lds	r24, 0x037E
    1240:	90 91 7f 03 	lds	r25, 0x037F
        return;
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
    1252:	80 91 7e 03 	lds	r24, 0x037E
    1256:	90 91 7f 03 	lds	r25, 0x037F
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	c9 f1       	breq	.+114    	; 0x12d0 <print_all_known_stations+0x82>
    int i;
    lcd_init();
    125e:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write_int(num_stations,3);
    1262:	63 e0       	ldi	r22, 0x03	; 3
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	80 91 db 03 	lds	r24, 0x03DB
    126a:	90 91 dc 03 	lds	r25, 0x03DC
    126e:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
    string_write(" known\nstations");
    1272:	82 e9       	ldi	r24, 0x92	; 146
    1274:	92 e0       	ldi	r25, 0x02	; 2
    1276:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    127a:	2f e7       	ldi	r18, 0x7F	; 127
    127c:	8a e1       	ldi	r24, 0x1A	; 26
    127e:	96 e0       	ldi	r25, 0x06	; 6
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	80 40       	sbci	r24, 0x00	; 0
    1284:	90 40       	sbci	r25, 0x00	; 0
    1286:	e1 f7       	brne	.-8      	; 0x1280 <print_all_known_stations+0x32>
    1288:	00 c0       	rjmp	.+0      	; 0x128a <print_all_known_stations+0x3c>
    128a:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
    128c:	c0 e0       	ldi	r28, 0x00	; 0
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	80 91 db 03 	lds	r24, 0x03DB
    1294:	90 91 dc 03 	lds	r25, 0x03DC
    1298:	c8 17       	cp	r28, r24
    129a:	d9 07       	cpc	r29, r25
    129c:	cc f4       	brge	.+50     	; 0x12d0 <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
    129e:	80 91 7e 03 	lds	r24, 0x037E
    12a2:	90 91 7f 03 	lds	r25, 0x037F
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	99 f0       	breq	.+38     	; 0x12d0 <print_all_known_stations+0x82>

        lcd_init();
    12aa:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
        print_station(i);
    12ae:	ce 01       	movw	r24, r28
    12b0:	0e 94 4f 08 	call	0x109e	; 0x109e <print_station>

        if (op_mode==MD_UPDATE) return;
    12b4:	80 91 7e 03 	lds	r24, 0x037E
    12b8:	90 91 7f 03 	lds	r25, 0x037F
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	41 f0       	breq	.+16     	; 0x12d0 <print_all_known_stations+0x82>
    12c0:	8f e4       	ldi	r24, 0x4F	; 79
    12c2:	93 ec       	ldi	r25, 0xC3	; 195
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <print_all_known_stations+0x76>
    12c8:	00 c0       	rjmp	.+0      	; 0x12ca <print_all_known_stations+0x7c>
    12ca:	00 00       	nop
    string_write_int(num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
    12cc:	21 96       	adiw	r28, 0x01	; 1
    12ce:	e0 cf       	rjmp	.-64     	; 0x1290 <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <show_nearest_station>:
    }
}

void show_nearest_station(void)
{
    lcd_init();
    12d6:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("Finding Nearest\nStation...");
    12da:	82 ec       	ldi	r24, 0xC2	; 194
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    12e2:	2f e7       	ldi	r18, 0x7F	; 127
    12e4:	8a e1       	ldi	r24, 0x1A	; 26
    12e6:	96 e0       	ldi	r25, 0x06	; 6
    12e8:	21 50       	subi	r18, 0x01	; 1
    12ea:	80 40       	sbci	r24, 0x00	; 0
    12ec:	90 40       	sbci	r25, 0x00	; 0
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <show_nearest_station+0x12>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <show_nearest_station+0x1c>
    12f2:	00 00       	nop
    _delay_ms(2000);

    nearest_station = get_nearest_station(user->lat, user->lon);
    12f4:	e0 91 e3 03 	lds	r30, 0x03E3
    12f8:	f0 91 e4 03 	lds	r31, 0x03E4
    12fc:	25 89       	ldd	r18, Z+21	; 0x15
    12fe:	36 89       	ldd	r19, Z+22	; 0x16
    1300:	47 89       	ldd	r20, Z+23	; 0x17
    1302:	50 8d       	ldd	r21, Z+24	; 0x18
    1304:	61 89       	ldd	r22, Z+17	; 0x11
    1306:	72 89       	ldd	r23, Z+18	; 0x12
    1308:	83 89       	ldd	r24, Z+19	; 0x13
    130a:	94 89       	ldd	r25, Z+20	; 0x14
    130c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_nearest_station>
    1310:	90 93 03 01 	sts	0x0103, r25
    1314:	80 93 02 01 	sts	0x0102, r24
    print_callsign(nearest_station); string_write("\n");
    1318:	0e 94 4f 07 	call	0xe9e	; 0xe9e <print_callsign>
    131c:	89 e6       	ldi	r24, 0x69	; 105
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    string_write_float(my_distance_to_station(nearest_station),1);
    1324:	80 91 02 01 	lds	r24, 0x0102
    1328:	90 91 03 01 	lds	r25, 0x0103
    132c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <my_distance_to_station>
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    1338:	2f e7       	ldi	r18, 0x7F	; 127
    133a:	8a e1       	ldi	r24, 0x1A	; 26
    133c:	96 e0       	ldi	r25, 0x06	; 6
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	80 40       	sbci	r24, 0x00	; 0
    1342:	90 40       	sbci	r25, 0x00	; 0
    1344:	e1 f7       	brne	.-8      	; 0x133e <show_nearest_station+0x68>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <show_nearest_station+0x72>
    1348:	00 00       	nop
    _delay_ms(2000);

    print_station(nearest_station);
    134a:	80 91 02 01 	lds	r24, 0x0102
    134e:	90 91 03 01 	lds	r25, 0x0103
    1352:	0e 94 4f 08 	call	0x109e	; 0x109e <print_station>
    1356:	2f e7       	ldi	r18, 0x7F	; 127
    1358:	8a e1       	ldi	r24, 0x1A	; 26
    135a:	96 e0       	ldi	r25, 0x06	; 6
    135c:	21 50       	subi	r18, 0x01	; 1
    135e:	80 40       	sbci	r24, 0x00	; 0
    1360:	90 40       	sbci	r25, 0x00	; 0
    1362:	e1 f7       	brne	.-8      	; 0x135c <show_nearest_station+0x86>
    1364:	00 c0       	rjmp	.+0      	; 0x1366 <show_nearest_station+0x90>
    1366:	00 00       	nop
    1368:	08 95       	ret

0000136a <test_earth_distance>:
        char_write(all_stations[station_index].callsign[i]);
    }
}

void test_earth_distance(void)
{
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    lcd_init();
    137a:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("Calculating\nEarth Distances");
    137e:	8a e2       	ldi	r24, 0x2A	; 42
    1380:	93 e0       	ldi	r25, 0x03	; 3
    1382:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1386:	2f e7       	ldi	r18, 0x7F	; 127
    1388:	8a e1       	ldi	r24, 0x1A	; 26
    138a:	96 e0       	ldi	r25, 0x06	; 6
    138c:	21 50       	subi	r18, 0x01	; 1
    138e:	80 40       	sbci	r24, 0x00	; 0
    1390:	90 40       	sbci	r25, 0x00	; 0
    1392:	e1 f7       	brne	.-8      	; 0x138c <test_earth_distance+0x22>
    1394:	00 c0       	rjmp	.+0      	; 0x1396 <test_earth_distance+0x2c>
    1396:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1398:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("Denver -> NYC:\n");
    139c:	86 e4       	ldi	r24, 0x46	; 70
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    13a4:	a1 2c       	mov	r10, r1
    13a6:	b1 2c       	mov	r11, r1
    13a8:	20 ed       	ldi	r18, 0xD0	; 208
    13aa:	c2 2e       	mov	r12, r18
    13ac:	22 ec       	ldi	r18, 0xC2	; 194
    13ae:	d2 2e       	mov	r13, r18
    13b0:	e1 2c       	mov	r14, r1
    13b2:	f1 2c       	mov	r15, r1
    13b4:	0c e1       	ldi	r16, 0x1C	; 28
    13b6:	12 e4       	ldi	r17, 0x42	; 66
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	44 e9       	ldi	r20, 0x94	; 148
    13be:	52 ec       	ldi	r21, 0xC2	; 194
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	92 e4       	ldi	r25, 0x42	; 66
    13c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    13d4:	86 e5       	ldi	r24, 0x56	; 86
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    13dc:	2f e1       	ldi	r18, 0x1F	; 31
    13de:	81 ea       	ldi	r24, 0xA1	; 161
    13e0:	97 e0       	ldi	r25, 0x07	; 7
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	80 40       	sbci	r24, 0x00	; 0
    13e6:	90 40       	sbci	r25, 0x00	; 0
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <test_earth_distance+0x78>
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <test_earth_distance+0x82>
    13ec:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    13ee:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    string_write("North KC -> KC:\n");
    13f2:	8a e5       	ldi	r24, 0x5A	; 90
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    13fa:	45 e3       	ldi	r20, 0x35	; 53
    13fc:	a4 2e       	mov	r10, r20
    13fe:	4e e1       	ldi	r20, 0x1E	; 30
    1400:	b4 2e       	mov	r11, r20
    1402:	4d eb       	ldi	r20, 0xBD	; 189
    1404:	c4 2e       	mov	r12, r20
    1406:	42 ec       	ldi	r20, 0xC2	; 194
    1408:	d4 2e       	mov	r13, r20
    140a:	12 e3       	ldi	r17, 0x32	; 50
    140c:	e1 2e       	mov	r14, r17
    140e:	15 e5       	ldi	r17, 0x55	; 85
    1410:	f1 2e       	mov	r15, r17
    1412:	0c e1       	ldi	r16, 0x1C	; 28
    1414:	12 e4       	ldi	r17, 0x42	; 66
    1416:	22 e4       	ldi	r18, 0x42	; 66
    1418:	30 e2       	ldi	r19, 0x20	; 32
    141a:	4d eb       	ldi	r20, 0xBD	; 189
    141c:	52 ec       	ldi	r21, 0xC2	; 194
    141e:	65 e2       	ldi	r22, 0x25	; 37
    1420:	76 e8       	ldi	r23, 0x86	; 134
    1422:	8c e1       	ldi	r24, 0x1C	; 28
    1424:	92 e4       	ldi	r25, 0x42	; 66
    1426:	0e 94 7f 03 	call	0x6fe	; 0x6fe <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	0e 94 6d 0c 	call	0x18da	; 0x18da <string_write_float>
    1432:	86 e5       	ldi	r24, 0x56	; 86
    1434:	93 e0       	ldi	r25, 0x03	; 3
    1436:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    143a:	2f e1       	ldi	r18, 0x1F	; 31
    143c:	81 ea       	ldi	r24, 0xA1	; 161
    143e:	97 e0       	ldi	r25, 0x07	; 7
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	80 40       	sbci	r24, 0x00	; 0
    1444:	90 40       	sbci	r25, 0x00	; 0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <test_earth_distance+0xd6>
    1448:	00 c0       	rjmp	.+0      	; 0x144a <test_earth_distance+0xe0>
    144a:	00 00       	nop
    _delay_ms(2500);

    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	08 95       	ret

0000145e <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
    145e:	12 9a       	sbi	0x02, 2	; 2
    1460:	81 ee       	ldi	r24, 0xE1	; 225
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <datarw+0x6>
    1468:	00 c0       	rjmp	.+0      	; 0x146a <datarw+0xc>
    146a:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
    146c:	12 98       	cbi	0x02, 2	; 2
    146e:	08 95       	ret

00001470 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
    1470:	10 92 de 03 	sts	0x03DE, r1
    1474:	10 92 dd 03 	sts	0x03DD, r1
    line_num = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	90 93 05 01 	sts	0x0105, r25
    1480:	80 93 04 01 	sts	0x0104, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
    1484:	81 b1       	in	r24, 0x01	; 1
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	81 b9       	out	0x01, r24	; 1
    148a:	87 e8       	ldi	r24, 0x87	; 135
    148c:	93 e1       	ldi	r25, 0x13	; 19
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <lcd_init+0x1e>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <lcd_init+0x24>
    1494:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
    1496:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
    1498:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
    149a:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
    149c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    149e:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    14a0:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    14a2:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    14a4:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    14a8:	81 ee       	ldi	r24, 0xE1	; 225
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <lcd_init+0x3c>
    14b0:	00 c0       	rjmp	.+0      	; 0x14b2 <lcd_init+0x42>
    14b2:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
    14b4:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    14b8:	89 ef       	ldi	r24, 0xF9	; 249
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <lcd_init+0x4c>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <lcd_init+0x52>
    14c2:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
    14c4:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    14c8:	89 ef       	ldi	r24, 0xF9	; 249
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <lcd_init+0x5c>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <lcd_init+0x62>
    14d2:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
    14d4:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    14d6:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    14d8:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    14da:	13 98       	cbi	0x02, 3	; 2
    datarw();
    14dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    14e0:	89 ef       	ldi	r24, 0xF9	; 249
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <lcd_init+0x74>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <lcd_init+0x7a>
    14ea:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
    14ec:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    14ee:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    14f0:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    14f2:	13 98       	cbi	0x02, 3	; 2
    datarw();
    14f4:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    14f8:	89 ef       	ldi	r24, 0xF9	; 249
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <lcd_init+0x8c>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <lcd_init+0x92>
    1502:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
    1504:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1506:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1508:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    150a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    150c:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1510:	89 ef       	ldi	r24, 0xF9	; 249
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <lcd_init+0xa4>
    1518:	00 c0       	rjmp	.+0      	; 0x151a <lcd_init+0xaa>
    151a:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
    151c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    151e:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1520:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1522:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1524:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1528:	89 ef       	ldi	r24, 0xF9	; 249
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <lcd_init+0xbc>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <lcd_init+0xc2>
    1532:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    1534:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
    1536:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
    1538:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    153a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    153c:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1540:	89 ef       	ldi	r24, 0xF9	; 249
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <lcd_init+0xd4>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <lcd_init+0xda>
    154a:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
    154c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    154e:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1550:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1552:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1554:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1558:	89 ef       	ldi	r24, 0xF9	; 249
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <lcd_init+0xec>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <lcd_init+0xf2>
    1562:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
    1564:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1566:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1568:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    156a:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    156c:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1570:	89 ef       	ldi	r24, 0xF9	; 249
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <lcd_init+0x104>
    1578:	00 c0       	rjmp	.+0      	; 0x157a <lcd_init+0x10a>
    157a:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
    157c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    157e:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1580:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1582:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1584:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1588:	89 ef       	ldi	r24, 0xF9	; 249
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <lcd_init+0x11c>
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <lcd_init+0x122>
    1592:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
    1594:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    1596:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1598:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
    159a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    159c:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    15a0:	89 ef       	ldi	r24, 0xF9	; 249
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <lcd_init+0x134>
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <lcd_init+0x13a>
    15aa:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
    15ac:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    15ae:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    15b0:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    15b2:	13 98       	cbi	0x02, 3	; 2
    datarw();
    15b4:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    15b8:	89 ef       	ldi	r24, 0xF9	; 249
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <lcd_init+0x14c>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <lcd_init+0x152>
    15c2:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    15c4:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    15c6:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    15c8:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    15ca:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    15cc:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    15d0:	89 ef       	ldi	r24, 0xF9	; 249
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <lcd_init+0x164>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <lcd_init+0x16a>
    15da:	00 00       	nop
    _delay_ms(1);

	return 0;
}
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	08 95       	ret

000015e2 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	11 f4       	brne	.+4      	; 0x15ea <letterwrite+0x8>
    15e6:	16 9a       	sbi	0x02, 6	; 2
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
    15ea:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
    15ec:	61 30       	cpi	r22, 0x01	; 1
    15ee:	71 05       	cpc	r23, r1
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <letterwrite+0x14>
    15f2:	15 9a       	sbi	0x02, 5	; 2
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
    15f6:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
    15f8:	41 30       	cpi	r20, 0x01	; 1
    15fa:	51 05       	cpc	r21, r1
    15fc:	11 f4       	brne	.+4      	; 0x1602 <letterwrite+0x20>
    15fe:	14 9a       	sbi	0x02, 4	; 2
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
    1602:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
    1604:	21 30       	cpi	r18, 0x01	; 1
    1606:	31 05       	cpc	r19, r1
    1608:	11 f4       	brne	.+4      	; 0x160e <letterwrite+0x2c>
    160a:	13 9a       	sbi	0x02, 3	; 2
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
    160e:	13 98       	cbi	0x02, 3	; 2
   	datarw();
    1610:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    1614:	89 ef       	ldi	r24, 0xF9	; 249
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <letterwrite+0x36>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <letterwrite+0x3c>
    161e:	00 00       	nop
    1620:	08 95       	ret

00001622 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
    1628:	81 b1       	in	r24, 0x01	; 1
    162a:	87 78       	andi	r24, 0x87	; 135
    162c:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
    162e:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
    1630:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    1632:	12 9a       	sbi	0x02, 2	; 2
    1634:	81 ee       	ldi	r24, 0xE1	; 225
    1636:	94 e0       	ldi	r25, 0x04	; 4
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <instruction_read+0x16>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <instruction_read+0x1c>
    163e:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    1640:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    1642:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
    1644:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
    1646:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
    1648:	12 98       	cbi	0x02, 2	; 2
    164a:	e9 ef       	ldi	r30, 0xF9	; 249
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	31 97       	sbiw	r30, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <instruction_read+0x2c>
    1652:	00 c0       	rjmp	.+0      	; 0x1654 <instruction_read+0x32>
    1654:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    1656:	12 9a       	sbi	0x02, 2	; 2
    1658:	e1 ee       	ldi	r30, 0xE1	; 225
    165a:	f4 e0       	ldi	r31, 0x04	; 4
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <instruction_read+0x3a>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <instruction_read+0x40>
    1662:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    1664:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
    1666:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
    1668:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
    166a:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    166c:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	26 e0       	ldi	r18, 0x06	; 6
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	2a 95       	dec	r18
    1678:	e1 f7       	brne	.-8      	; 0x1672 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
    167a:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
    167c:	d0 e0       	ldi	r29, 0x00	; 0
    167e:	35 e0       	ldi	r19, 0x05	; 5
    1680:	cc 0f       	add	r28, r28
    1682:	dd 1f       	adc	r29, r29
    1684:	3a 95       	dec	r19
    1686:	e1 f7       	brne	.-8      	; 0x1680 <instruction_read+0x5e>
    1688:	8c 2b       	or	r24, r28
    168a:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
    168c:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
    168e:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    1690:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	54 e0       	ldi	r21, 0x04	; 4
    1696:	aa 0f       	add	r26, r26
    1698:	bb 1f       	adc	r27, r27
    169a:	5a 95       	dec	r21
    169c:	e1 f7       	brne	.-8      	; 0x1696 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    169e:	8a 2b       	or	r24, r26
    16a0:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    16a2:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	73 e0       	ldi	r23, 0x03	; 3
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	7a 95       	dec	r23
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
    16b0:	8e 2b       	or	r24, r30
    16b2:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    16b4:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	66 0f       	add	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	66 0f       	add	r22, r22
    16be:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
    16c0:	86 2b       	or	r24, r22
    16c2:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
    16c4:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
    16c6:	51 b1       	in	r21, 0x01	; 1
    16c8:	58 67       	ori	r21, 0x78	; 120
    16ca:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    16cc:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    16ce:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    16d0:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	44 0f       	add	r20, r20
    16d6:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
    16d8:	84 2b       	or	r24, r20
    16da:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    16dc:	16 fb       	bst	r17, 6
    16de:	22 27       	eor	r18, r18
    16e0:	20 f9       	bld	r18, 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
    16e4:	36 95       	lsr	r19
    16e6:	32 2f       	mov	r19, r18
    16e8:	22 27       	eor	r18, r18
    16ea:	37 95       	ror	r19
    16ec:	27 95       	ror	r18
}
    16ee:	82 2b       	or	r24, r18
    16f0:	93 2b       	or	r25, r19
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	08 95       	ret

000016fa <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
    16fa:	0e 94 11 0b 	call	0x1622	; 0x1622 <instruction_read>
    16fe:	8f 77       	andi	r24, 0x7F	; 127
    1700:	99 27       	eor	r25, r25
    return address+1;
}
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	08 95       	ret

00001706 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
    1706:	89 2b       	or	r24, r25
    1708:	11 f4       	brne	.+4      	; 0x170e <write_db74+0x8>
    170a:	16 98       	cbi	0x02, 6	; 2
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <write_db74+0xa>
    else PORTA |= _BV(DB7);
    170e:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
    1710:	67 2b       	or	r22, r23
    1712:	11 f4       	brne	.+4      	; 0x1718 <write_db74+0x12>
    1714:	15 98       	cbi	0x02, 5	; 2
    1716:	01 c0       	rjmp	.+2      	; 0x171a <write_db74+0x14>
    else PORTA |= _BV(DB6);
    1718:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
    171a:	45 2b       	or	r20, r21
    171c:	11 f4       	brne	.+4      	; 0x1722 <write_db74+0x1c>
    171e:	14 98       	cbi	0x02, 4	; 2
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
    1722:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
    1724:	23 2b       	or	r18, r19
    1726:	11 f4       	brne	.+4      	; 0x172c <write_db74+0x26>
    1728:	13 98       	cbi	0x02, 3	; 2
    172a:	08 95       	ret
    else PORTA |= _BV(DB4);
    172c:	13 9a       	sbi	0x02, 3	; 2
    172e:	08 95       	ret

00001730 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
    1736:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1738:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    173a:	28 2f       	mov	r18, r24
    173c:	22 95       	swap	r18
    173e:	21 70       	andi	r18, 0x01	; 1
    1740:	85 fb       	bst	r24, 5
    1742:	44 27       	eor	r20, r20
    1744:	40 f9       	bld	r20, 0
    1746:	86 fb       	bst	r24, 6
    1748:	66 27       	eor	r22, r22
    174a:	60 f9       	bld	r22, 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 83 0b 	call	0x1706	; 0x1706 <write_db74>
    datarw();
    175a:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    175e:	9e 01       	movw	r18, r28
    1760:	21 70       	andi	r18, 0x01	; 1
    1762:	33 27       	eor	r19, r19
    1764:	4c 2f       	mov	r20, r28
    1766:	46 95       	lsr	r20
    1768:	41 70       	andi	r20, 0x01	; 1
    176a:	c2 fb       	bst	r28, 2
    176c:	66 27       	eor	r22, r22
    176e:	60 f9       	bld	r22, 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	c3 fb       	bst	r28, 3
    1776:	88 27       	eor	r24, r24
    1778:	80 f9       	bld	r24, 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 83 0b 	call	0x1706	; 0x1706 <write_db74>
    datarw();
}
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
    1784:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <datarw>

00001788 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
    1788:	cf 93       	push	r28
    178a:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
    178c:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    178e:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    1790:	84 fb       	bst	r24, 4
    1792:	22 27       	eor	r18, r18
    1794:	20 f9       	bld	r18, 0
    1796:	85 fb       	bst	r24, 5
    1798:	44 27       	eor	r20, r20
    179a:	40 f9       	bld	r20, 0
    179c:	86 fb       	bst	r24, 6
    179e:	66 27       	eor	r22, r22
    17a0:	60 f9       	bld	r22, 0
    17a2:	88 1f       	adc	r24, r24
    17a4:	88 27       	eor	r24, r24
    17a6:	88 1f       	adc	r24, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 83 0b 	call	0x1706	; 0x1706 <write_db74>
    datarw();
    17b4:	0e 94 2f 0a 	call	0x145e	; 0x145e <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    17b8:	2c 2f       	mov	r18, r28
    17ba:	21 70       	andi	r18, 0x01	; 1
    17bc:	c1 fb       	bst	r28, 1
    17be:	44 27       	eor	r20, r20
    17c0:	40 f9       	bld	r20, 0
    17c2:	c2 fb       	bst	r28, 2
    17c4:	66 27       	eor	r22, r22
    17c6:	60 f9       	bld	r22, 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	c3 fb       	bst	r28, 3
    17d0:	88 27       	eor	r24, r24
    17d2:	80 f9       	bld	r24, 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 83 0b 	call	0x1706	; 0x1706 <write_db74>
    datarw();
}
    17da:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
    17dc:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <datarw>

000017e0 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
    17e0:	cf 93       	push	r28
    17e2:	c8 2f       	mov	r28, r24
    chars_written++;
    17e4:	20 91 dd 03 	lds	r18, 0x03DD
    17e8:	30 91 de 03 	lds	r19, 0x03DE
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	30 93 de 03 	sts	0x03DE, r19
    17f4:	20 93 dd 03 	sts	0x03DD, r18

    if ((chars_written==17)||(mychar=='\n'))
    17f8:	21 31       	cpi	r18, 0x11	; 17
    17fa:	31 05       	cpc	r19, r1
    17fc:	31 f0       	breq	.+12     	; 0x180a <char_write+0x2a>
    17fe:	8a 30       	cpi	r24, 0x0A	; 10
    1800:	21 f0       	breq	.+8      	; 0x180a <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    1802:	8c 2f       	mov	r24, r28
    
}
    1804:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    1806:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
    180a:	20 91 04 01 	lds	r18, 0x0104
    180e:	30 91 05 01 	lds	r19, 0x0105
    1812:	21 30       	cpi	r18, 0x01	; 1
    1814:	31 05       	cpc	r19, r1
    1816:	79 f4       	brne	.+30     	; 0x1836 <char_write+0x56>
        {
            set_ddram_address(0x40);
    1818:	80 e4       	ldi	r24, 0x40	; 64
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 98 0b 	call	0x1730	; 0x1730 <set_ddram_address>
            line_num = 2;
    1820:	22 e0       	ldi	r18, 0x02	; 2
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	30 93 05 01 	sts	0x0105, r19
    1828:	20 93 04 01 	sts	0x0104, r18
            chars_written = 0;
    182c:	10 92 de 03 	sts	0x03DE, r1
    1830:	10 92 dd 03 	sts	0x03DD, r1
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <char_write+0x60>
        }
        else if (line_num==2)
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	11 f4       	brne	.+4      	; 0x1840 <char_write+0x60>
        {
            lcd_init();
    183c:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
        }
    }

    if (mychar!='\n')
    1840:	ca 30       	cpi	r28, 0x0A	; 10
    1842:	f9 f6       	brne	.-66     	; 0x1802 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
    1844:	cf 91       	pop	r28
    1846:	08 95       	ret

00001848 <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
    1852:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
    1856:	8e 01       	movw	r16, r28
    1858:	fe 01       	movw	r30, r28
    185a:	01 90       	ld	r0, Z+
    185c:	00 20       	and	r0, r0
    185e:	e9 f7       	brne	.-6      	; 0x185a <string_write+0x12>
    1860:	31 97       	sbiw	r30, 0x01	; 1
    1862:	ec 1b       	sub	r30, r28
    1864:	fd 0b       	sbc	r31, r29
    1866:	c8 01       	movw	r24, r16
    1868:	8c 1b       	sub	r24, r28
    186a:	9d 0b       	sbc	r25, r29
    186c:	8e 17       	cp	r24, r30
    186e:	9f 07       	cpc	r25, r31
    1870:	40 f4       	brcc	.+16     	; 0x1882 <string_write+0x3a>
        char_write(mystring[i]);
    1872:	f8 01       	movw	r30, r16
    1874:	81 91       	ld	r24, Z+
    1876:	8f 01       	movw	r16, r30
    1878:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
        get_current_address();
    187c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <get_current_address>
    1880:	eb cf       	rjmp	.-42     	; 0x1858 <string_write+0x10>
    }
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	18 2f       	mov	r17, r24
    1896:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
    1898:	cb 01       	movw	r24, r22
    189a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <malloc>
    189e:	d8 2f       	mov	r29, r24
    18a0:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	2b e6       	ldi	r18, 0x6B	; 107
    18a8:	33 e0       	ldi	r19, 0x03	; 3
    18aa:	3f 93       	push	r19
    18ac:	2f 93       	push	r18
    18ae:	9f 93       	push	r25
    18b0:	8f 93       	push	r24
    18b2:	0e 94 6e 18 	call	0x30dc	; 0x30dc <sprintf>
    string_write(temp);
    18b6:	8d 2f       	mov	r24, r29
    18b8:	9c 2f       	mov	r25, r28
    18ba:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    free(temp);
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	8d 2f       	mov	r24, r29
    18cc:	9c 2f       	mov	r25, r28
}
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
    18d6:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <free>

000018da <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <string_write_float+0x12>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <string_write_float+0x14>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
    18f4:	ae 01       	movw	r20, r28
    18f6:	4f 5f       	subi	r20, 0xFF	; 255
    18f8:	5f 4f       	sbci	r21, 0xFF	; 255
    18fa:	0e 94 a0 13 	call	0x2740	; 0x2740 <modf>
    18fe:	6b 01       	movw	r12, r22
    1900:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
    1902:	69 81       	ldd	r22, Y+1	; 0x01
    1904:	7a 81       	ldd	r23, Y+2	; 0x02
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	9c 81       	ldd	r25, Y+4	; 0x04
    190a:	0e 94 b6 11 	call	0x236c	; 0x236c <__fixsfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	64 e0       	ldi	r22, 0x04	; 4
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 46 0c 	call	0x188c	; 0x188c <string_write_int>
    191a:	80 e4       	ldi	r24, 0x40	; 64
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
    1922:	b8 01       	movw	r22, r16
    1924:	88 27       	eor	r24, r24
    1926:	77 fd       	sbrc	r23, 7
    1928:	80 95       	com	r24
    192a:	98 2f       	mov	r25, r24
    192c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatsisf>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	80 e2       	ldi	r24, 0x20	; 32
    193a:	91 e4       	ldi	r25, 0x41	; 65
    193c:	0e 94 36 14 	call	0x286c	; 0x286c <pow>
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	c7 01       	movw	r24, r14
    1946:	b6 01       	movw	r22, r12
    1948:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
    194c:	0e 94 82 14 	call	0x2904	; 0x2904 <round>
    1950:	0e 94 b6 11 	call	0x236c	; 0x236c <__fixsfsi>
    1954:	7b 01       	movw	r14, r22
    1956:	77 ff       	sbrs	r23, 7
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <string_write_float+0x88>
    195a:	ee 24       	eor	r14, r14
    195c:	ff 24       	eor	r15, r15
    195e:	e6 1a       	sub	r14, r22
    1960:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
    1962:	e1 14       	cp	r14, r1
    1964:	f1 04       	cpc	r15, r1
    1966:	a1 f0       	breq	.+40     	; 0x1990 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
    1968:	b7 01       	movw	r22, r14
    196a:	88 27       	eor	r24, r24
    196c:	77 fd       	sbrc	r23, 7
    196e:	80 95       	com	r24
    1970:	98 2f       	mov	r25, r24
    1972:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatsisf>
    1976:	0e 94 55 13 	call	0x26aa	; 0x26aa <log10>
    197a:	0e 94 24 12 	call	0x2448	; 0x2448 <floor>
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 81 10 	call	0x2102	; 0x2102 <__addsf3>
    198a:	0e 94 b6 11 	call	0x236c	; 0x236c <__fixsfsi>
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <string_write_float+0xba>
    } else {
        digits = 0;
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    1994:	c1 2c       	mov	r12, r1
    1996:	d1 2c       	mov	r13, r1
    1998:	06 1b       	sub	r16, r22
    199a:	17 0b       	sbc	r17, r23
    199c:	c0 16       	cp	r12, r16
    199e:	d1 06       	cpc	r13, r17
    19a0:	44 f4       	brge	.+16     	; 0x19b2 <string_write_float+0xd8>
    {
        string_write("0");
    19a2:	8e e6       	ldi	r24, 0x6E	; 110
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	c8 1a       	sub	r12, r24
    19ae:	d8 0a       	sbc	r13, r24
    19b0:	f5 cf       	rjmp	.-22     	; 0x199c <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
    19b2:	64 e0       	ldi	r22, 0x04	; 4
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	c7 01       	movw	r24, r14
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
    19d0:	0c 94 46 0c 	jmp	0x188c	; 0x188c <string_write_int>

000019d4 <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	8c 01       	movw	r16, r24
    19e6:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
    19e8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <get_current_address>
    19ec:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    19ee:	c0 e0       	ldi	r28, 0x00	; 0
    19f0:	d0 e0       	ldi	r29, 0x00	; 0
    19f2:	cc 15       	cp	r28, r12
    19f4:	dd 05       	cpc	r29, r13
    19f6:	9c f4       	brge	.+38     	; 0x1a1e <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
    19f8:	f8 01       	movw	r30, r16
    19fa:	01 90       	ld	r0, Z+
    19fc:	00 20       	and	r0, r0
    19fe:	e9 f7       	brne	.-6      	; 0x19fa <string_write_numchars+0x26>
    1a00:	31 97       	sbiw	r30, 0x01	; 1
    1a02:	e0 1b       	sub	r30, r16
    1a04:	f1 0b       	sbc	r31, r17
    1a06:	ce 17       	cp	r28, r30
    1a08:	df 07       	cpc	r29, r31
    1a0a:	48 f4       	brcc	.+18     	; 0x1a1e <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	81 91       	ld	r24, Z+
    1a10:	7f 01       	movw	r14, r30
    1a12:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <char_write>
        get_current_address();
    1a16:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    1a1a:	21 96       	adiw	r28, 0x01	; 1
    1a1c:	ea cf       	rjmp	.-44     	; 0x19f2 <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	08 95       	ret

00001a30 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <tag_check+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <tag_check+0x8>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <tag_check+0xa>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
    1a3e:	26 e0       	ldi	r18, 0x06	; 6
    1a40:	ec e0       	ldi	r30, 0x0C	; 12
    1a42:	f1 e0       	ldi	r31, 0x01	; 1
    1a44:	de 01       	movw	r26, r28
    1a46:	11 96       	adiw	r26, 0x01	; 1
    1a48:	01 90       	ld	r0, Z+
    1a4a:	0d 92       	st	X+, r0
    1a4c:	2a 95       	dec	r18
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <tag_check+0x18>
    1a50:	fe 01       	movw	r30, r28
    1a52:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	dc 01       	movw	r26, r24
    1a5a:	a2 0f       	add	r26, r18
    1a5c:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
    1a5e:	4c 91       	ld	r20, X
    1a60:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
    1a62:	2f 5f       	subi	r18, 0xFF	; 255
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
    1a66:	26 30       	cpi	r18, 0x06	; 6
    1a68:	31 05       	cpc	r19, r1
    1a6a:	b1 f7       	brne	.-20     	; 0x1a58 <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
    1a6c:	60 e7       	ldi	r22, 0x70	; 112
    1a6e:	73 e0       	ldi	r23, 0x03	; 3
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 41 18 	call	0x3082	; 0x3082 <strcmp>
    1a78:	21 e0       	ldi	r18, 0x01	; 1
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	89 2b       	or	r24, r25
    1a7e:	11 f0       	breq	.+4      	; 0x1a84 <tag_check+0x54>
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
    1a84:	c9 01       	movw	r24, r18
    1a86:	26 96       	adiw	r28, 0x06	; 6
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <strtok_single+0x10>
    src = in_str;
    1aa0:	90 93 e0 03 	sts	0x03E0, r25
    1aa4:	80 93 df 03 	sts	0x03DF, r24

  if (src == NULL)
    1aa8:	c0 91 df 03 	lds	r28, 0x03DF
    1aac:	d0 91 e0 03 	lds	r29, 0x03E0
    1ab0:	20 97       	sbiw	r28, 0x00	; 0
    1ab2:	69 f0       	breq	.+26     	; 0x1ace <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	0e 94 60 18 	call	0x30c0	; 0x30c0 <strpbrk>
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	41 f0       	breq	.+16     	; 0x1ace <strtok_single+0x36>
    *p  = 0;
    1abe:	fc 01       	movw	r30, r24
    1ac0:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
    1ac2:	f0 93 e0 03 	sts	0x03E0, r31
    1ac6:	e0 93 df 03 	sts	0x03DF, r30
    1aca:	ce 01       	movw	r24, r28
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <parse_nmea>:
#include <util/delay.h>
#include "gps.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the gps_data fields
int parse_nmea(char *in_sent, char *gps_data[13]){
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	8b 01       	movw	r16, r22

	int i = 0, j=0;
	char* token;

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
    1ae2:	63 e1       	ldi	r22, 0x13	; 19
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <strtok_single>
    1aea:	ec 01       	movw	r28, r24
	strcpy(gps_data[0], token);
    1aec:	bc 01       	movw	r22, r24
    1aee:	d8 01       	movw	r26, r16
    1af0:	8d 91       	ld	r24, X+
    1af2:	9c 91       	ld	r25, X
    1af4:	0e 94 4a 18 	call	0x3094	; 0x3094 <strcpy>

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    1af8:	fe 01       	movw	r30, r28
    1afa:	01 90       	ld	r0, Z+
    1afc:	00 20       	and	r0, r0
    1afe:	e9 f7       	brne	.-6      	; 0x1afa <parse_nmea+0x22>
    1b00:	31 97       	sbiw	r30, 0x01	; 1
    1b02:	ec 1b       	sub	r30, r28
    1b04:	fd 0b       	sbc	r31, r29
    1b06:	e0 31       	cpi	r30, 0x10	; 16
    1b08:	f1 05       	cpc	r31, r1
    1b0a:	5c f4       	brge	.+22     	; 0x1b22 <parse_nmea+0x4a>
	{
		gps_data[0][j] = '\0';
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	8d 91       	ld	r24, X+
    1b10:	9c 91       	ld	r25, X
    1b12:	8e 0f       	add	r24, r30
    1b14:	9f 1f       	adc	r25, r31
    1b16:	dc 01       	movw	r26, r24
    1b18:	1c 92       	st	X, r1
	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
	strcpy(gps_data[0], token);

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    1b1a:	31 96       	adiw	r30, 0x01	; 1
    1b1c:	f4 cf       	rjmp	.-24     	; 0x1b06 <parse_nmea+0x2e>
    1b1e:	0e 5f       	subi	r16, 0xFE	; 254
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		gps_data[0][j] = '\0';
	}

	//copy over the rest of the tokens
	while(token) 
    1b22:	cd 2b       	or	r28, r29
    1b24:	11 f1       	breq	.+68     	; 0x1b6a <parse_nmea+0x92>
	{
		i++;
		token = strtok_single(NULL, ",");
    1b26:	63 e1       	ldi	r22, 0x13	; 19
    1b28:	71 e0       	ldi	r23, 0x01	; 1
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <strtok_single>
    1b32:	ec 01       	movw	r28, r24
		strcpy(gps_data[i], token);
    1b34:	bc 01       	movw	r22, r24
    1b36:	f8 01       	movw	r30, r16
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	0e 94 4a 18 	call	0x3094	; 0x3094 <strcpy>
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    1b40:	fe 01       	movw	r30, r28
    1b42:	01 90       	ld	r0, Z+
    1b44:	00 20       	and	r0, r0
    1b46:	e9 f7       	brne	.-6      	; 0x1b42 <parse_nmea+0x6a>
    1b48:	31 97       	sbiw	r30, 0x01	; 1
    1b4a:	ec 1b       	sub	r30, r28
    1b4c:	fd 0b       	sbc	r31, r29
    1b4e:	e0 31       	cpi	r30, 0x10	; 16
    1b50:	f1 05       	cpc	r31, r1
    1b52:	2c f7       	brge	.-54     	; 0x1b1e <parse_nmea+0x46>
		{
			gps_data[i][j] = '\0';
    1b54:	d8 01       	movw	r26, r16
    1b56:	12 96       	adiw	r26, 0x02	; 2
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	13 97       	sbiw	r26, 0x03	; 3
    1b5e:	8e 0f       	add	r24, r30
    1b60:	9f 1f       	adc	r25, r31
    1b62:	dc 01       	movw	r26, r24
    1b64:	1c 92       	st	X, r1
	{
		i++;
		token = strtok_single(NULL, ",");
		strcpy(gps_data[i], token);
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    1b66:	31 96       	adiw	r30, 0x01	; 1
    1b68:	f2 cf       	rjmp	.-28     	; 0x1b4e <parse_nmea+0x76>
			gps_data[i][j] = '\0';
		}
	}

	return 0;
}
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	08 95       	ret

00001b78 <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
    1b78:	fc 01       	movw	r30, r24
    1b7a:	9f 01       	movw	r18, r30
    1b7c:	28 1b       	sub	r18, r24
    1b7e:	39 0b       	sbc	r19, r25
    1b80:	26 17       	cp	r18, r22
    1b82:	37 07       	cpc	r19, r23
    1b84:	14 f4       	brge	.+4      	; 0x1b8a <wipe_chars+0x12>
	{
		str[i] = '\0';
    1b86:	11 92       	st	Z+, r1
    1b88:	f8 cf       	rjmp	.-16     	; 0x1b7a <wipe_chars+0x2>
	}
}
    1b8a:	08 95       	ret

00001b8c <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	27 97       	sbiw	r28, 0x07	; 7
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	5c 01       	movw	r10, r24
    1bb0:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	80 81       	ld	r24, Z
    1bb6:	99 27       	eor	r25, r25
    1bb8:	87 fd       	sbrc	r24, 7
    1bba:	90 95       	com	r25
    1bbc:	c0 97       	sbiw	r24, 0x30	; 48
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	28 9f       	mul	r18, r24
    1bc2:	b0 01       	movw	r22, r0
    1bc4:	29 9f       	mul	r18, r25
    1bc6:	70 0d       	add	r23, r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	81 81       	ldd	r24, Z+1	; 0x01
    1bcc:	99 27       	eor	r25, r25
    1bce:	87 fd       	sbrc	r24, 7
    1bd0:	90 95       	com	r25
    1bd2:	c0 97       	sbiw	r24, 0x30	; 48
    1bd4:	68 0f       	add	r22, r24
    1bd6:	79 1f       	adc	r23, r25
    1bd8:	88 27       	eor	r24, r24
    1bda:	77 fd       	sbrc	r23, 7
    1bdc:	80 95       	com	r24
    1bde:	98 2f       	mov	r25, r24
    1be0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatsisf>
    1be4:	6b 01       	movw	r12, r22
    1be6:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
    1be8:	b5 01       	movw	r22, r10
    1bea:	6e 5f       	subi	r22, 0xFE	; 254
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	47 e0       	ldi	r20, 0x07	; 7
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	0e 94 51 18 	call	0x30a2	; 0x30a2 <strncpy>

	float minutes = strtod(temp,NULL);
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e7       	ldi	r20, 0x70	; 112
    1c0c:	52 e4       	ldi	r21, 0x42	; 66
    1c0e:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
    1c12:	9b 01       	movw	r18, r22
    1c14:	ac 01       	movw	r20, r24
    1c16:	c7 01       	movw	r24, r14
    1c18:	b6 01       	movw	r22, r12
    1c1a:	0e 94 81 10 	call	0x2102	; 0x2102 <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
    1c1e:	13 35       	cpi	r17, 0x53	; 83
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <lat2dec+0x98>
		result *= -1;
    1c22:	90 58       	subi	r25, 0x80	; 128

	return result;

}
    1c24:	27 96       	adiw	r28, 0x07	; 7
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	ff 90       	pop	r15
    1c38:	ef 90       	pop	r14
    1c3a:	df 90       	pop	r13
    1c3c:	cf 90       	pop	r12
    1c3e:	bf 90       	pop	r11
    1c40:	af 90       	pop	r10
    1c42:	08 95       	ret

00001c44 <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
    1c44:	af 92       	push	r10
    1c46:	bf 92       	push	r11
    1c48:	cf 92       	push	r12
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	27 97       	sbiw	r28, 0x07	; 7
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	5c 01       	movw	r10, r24
    1c68:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	80 81       	ld	r24, Z
    1c6e:	99 27       	eor	r25, r25
    1c70:	87 fd       	sbrc	r24, 7
    1c72:	90 95       	com	r25
    1c74:	c0 97       	sbiw	r24, 0x30	; 48
    1c76:	24 e6       	ldi	r18, 0x64	; 100
    1c78:	28 9f       	mul	r18, r24
    1c7a:	b0 01       	movw	r22, r0
    1c7c:	29 9f       	mul	r18, r25
    1c7e:	70 0d       	add	r23, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	81 81       	ldd	r24, Z+1	; 0x01
    1c84:	99 27       	eor	r25, r25
    1c86:	87 fd       	sbrc	r24, 7
    1c88:	90 95       	com	r25
    1c8a:	c0 97       	sbiw	r24, 0x30	; 48
    1c8c:	4a e0       	ldi	r20, 0x0A	; 10
    1c8e:	48 9f       	mul	r20, r24
    1c90:	90 01       	movw	r18, r0
    1c92:	49 9f       	mul	r20, r25
    1c94:	30 0d       	add	r19, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	62 0f       	add	r22, r18
    1c9a:	73 1f       	adc	r23, r19
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	99 27       	eor	r25, r25
    1ca0:	87 fd       	sbrc	r24, 7
    1ca2:	90 95       	com	r25
    1ca4:	c0 97       	sbiw	r24, 0x30	; 48
    1ca6:	68 0f       	add	r22, r24
    1ca8:	79 1f       	adc	r23, r25
    1caa:	88 27       	eor	r24, r24
    1cac:	77 fd       	sbrc	r23, 7
    1cae:	80 95       	com	r24
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__floatsisf>
    1cb6:	6b 01       	movw	r12, r22
    1cb8:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
    1cba:	b5 01       	movw	r22, r10
    1cbc:	6d 5f       	subi	r22, 0xFD	; 253
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	47 e0       	ldi	r20, 0x07	; 7
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	0e 94 51 18 	call	0x30a2	; 0x30a2 <strncpy>

	float minutes = strtod(temp,NULL);
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e7       	ldi	r20, 0x70	; 112
    1cde:	52 e4       	ldi	r21, 0x42	; 66
    1ce0:	0e 94 4e 11 	call	0x229c	; 0x229c <__divsf3>
    1ce4:	9b 01       	movw	r18, r22
    1ce6:	ac 01       	movw	r20, r24
    1ce8:	c7 01       	movw	r24, r14
    1cea:	b6 01       	movw	r22, r12
    1cec:	0e 94 81 10 	call	0x2102	; 0x2102 <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
    1cf0:	17 35       	cpi	r17, 0x57	; 87
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <lon2dec+0xb2>
		result *= -1;
    1cf4:	90 58       	subi	r25, 0x80	; 128

	return result;
}
    1cf6:	27 96       	adiw	r28, 0x07	; 7
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	08 95       	ret

00001d16 <update_user_gps_data>:

//use the raw gps_data fields to populate the UserData struct
void update_user_gps_data(char *gps_data[13], UserData *user)
{
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	8c 01       	movw	r16, r24
    1d24:	eb 01       	movw	r28, r22
	wipe_chars(user->msg_type,8);
    1d26:	68 e0       	ldi	r22, 0x08	; 8
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <wipe_chars>
	strcpy(user->msg_type,gps_data[0]);
    1d30:	d8 01       	movw	r26, r16
    1d32:	6d 91       	ld	r22, X+
    1d34:	7c 91       	ld	r23, X
    1d36:	ce 01       	movw	r24, r28
    1d38:	0e 94 4a 18 	call	0x3094	; 0x3094 <strcpy>

	wipe_chars(user->utc_time,8);
    1d3c:	68 e0       	ldi	r22, 0x08	; 8
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	ce 01       	movw	r24, r28
    1d42:	08 96       	adiw	r24, 0x08	; 8
    1d44:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <wipe_chars>
	user->utc_time[0] = gps_data[1][0];
    1d48:	d8 01       	movw	r26, r16
    1d4a:	12 96       	adiw	r26, 0x02	; 2
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	13 97       	sbiw	r26, 0x03	; 3
    1d52:	80 81       	ld	r24, Z
    1d54:	88 87       	std	Y+8, r24	; 0x08
	user->utc_time[1] = gps_data[1][1];
    1d56:	12 96       	adiw	r26, 0x02	; 2
    1d58:	ed 91       	ld	r30, X+
    1d5a:	fc 91       	ld	r31, X
    1d5c:	13 97       	sbiw	r26, 0x03	; 3
    1d5e:	81 81       	ldd	r24, Z+1	; 0x01
    1d60:	89 87       	std	Y+9, r24	; 0x09
	user->utc_time[2] = ':';
    1d62:	8a e3       	ldi	r24, 0x3A	; 58
    1d64:	8a 87       	std	Y+10, r24	; 0x0a
	user->utc_time[3] = gps_data[1][2];
    1d66:	12 96       	adiw	r26, 0x02	; 2
    1d68:	ed 91       	ld	r30, X+
    1d6a:	fc 91       	ld	r31, X
    1d6c:	13 97       	sbiw	r26, 0x03	; 3
    1d6e:	92 81       	ldd	r25, Z+2	; 0x02
    1d70:	9b 87       	std	Y+11, r25	; 0x0b
	user->utc_time[4] = gps_data[1][3];
    1d72:	12 96       	adiw	r26, 0x02	; 2
    1d74:	ed 91       	ld	r30, X+
    1d76:	fc 91       	ld	r31, X
    1d78:	13 97       	sbiw	r26, 0x03	; 3
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	9c 87       	std	Y+12, r25	; 0x0c
	user->utc_time[5] = ':';
    1d7e:	8d 87       	std	Y+13, r24	; 0x0d
	user->utc_time[6] = gps_data[1][4];
    1d80:	12 96       	adiw	r26, 0x02	; 2
    1d82:	ed 91       	ld	r30, X+
    1d84:	fc 91       	ld	r31, X
    1d86:	13 97       	sbiw	r26, 0x03	; 3
    1d88:	84 81       	ldd	r24, Z+4	; 0x04
    1d8a:	8e 87       	std	Y+14, r24	; 0x0e
	user->utc_time[7] = gps_data[1][5];
    1d8c:	12 96       	adiw	r26, 0x02	; 2
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	13 97       	sbiw	r26, 0x03	; 3
    1d94:	85 81       	ldd	r24, Z+5	; 0x05
    1d96:	8f 87       	std	Y+15, r24	; 0x0f

	user->nrw = gps_data[2][0];
    1d98:	14 96       	adiw	r26, 0x04	; 4
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	15 97       	sbiw	r26, 0x05	; 5
    1da0:	80 81       	ld	r24, Z
    1da2:	88 8b       	std	Y+16, r24	; 0x10

	user->lat = 0;
    1da4:	19 8a       	std	Y+17, r1	; 0x11
    1da6:	1a 8a       	std	Y+18, r1	; 0x12
    1da8:	1b 8a       	std	Y+19, r1	; 0x13
    1daa:	1c 8a       	std	Y+20, r1	; 0x14
	user->lat = lat2dec(gps_data[3], gps_data[4][0]);
    1dac:	18 96       	adiw	r26, 0x08	; 8
    1dae:	ed 91       	ld	r30, X+
    1db0:	fc 91       	ld	r31, X
    1db2:	19 97       	sbiw	r26, 0x09	; 9
    1db4:	60 81       	ld	r22, Z
    1db6:	16 96       	adiw	r26, 0x06	; 6
    1db8:	8d 91       	ld	r24, X+
    1dba:	9c 91       	ld	r25, X
    1dbc:	17 97       	sbiw	r26, 0x07	; 7
    1dbe:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <lat2dec>
    1dc2:	69 8b       	std	Y+17, r22	; 0x11
    1dc4:	7a 8b       	std	Y+18, r23	; 0x12
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	9c 8b       	std	Y+20, r25	; 0x14

	user->lon = 0;
    1dca:	1d 8a       	std	Y+21, r1	; 0x15
    1dcc:	1e 8a       	std	Y+22, r1	; 0x16
    1dce:	1f 8a       	std	Y+23, r1	; 0x17
    1dd0:	18 8e       	std	Y+24, r1	; 0x18
	user->lon = lon2dec(gps_data[5], gps_data[6][0]);
    1dd2:	d8 01       	movw	r26, r16
    1dd4:	1c 96       	adiw	r26, 0x0c	; 12
    1dd6:	ed 91       	ld	r30, X+
    1dd8:	fc 91       	ld	r31, X
    1dda:	1d 97       	sbiw	r26, 0x0d	; 13
    1ddc:	60 81       	ld	r22, Z
    1dde:	1a 96       	adiw	r26, 0x0a	; 10
    1de0:	8d 91       	ld	r24, X+
    1de2:	9c 91       	ld	r25, X
    1de4:	1b 97       	sbiw	r26, 0x0b	; 11
    1de6:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <lon2dec>
    1dea:	6d 8b       	std	Y+21, r22	; 0x15
    1dec:	7e 8b       	std	Y+22, r23	; 0x16
    1dee:	8f 8b       	std	Y+23, r24	; 0x17
    1df0:	98 8f       	std	Y+24, r25	; 0x18

	user->speed = 0;
    1df2:	19 8e       	std	Y+25, r1	; 0x19
    1df4:	1a 8e       	std	Y+26, r1	; 0x1a
    1df6:	1b 8e       	std	Y+27, r1	; 0x1b
    1df8:	1c 8e       	std	Y+28, r1	; 0x1c
	user->speed = (float)strtod(gps_data[7],NULL);
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	f8 01       	movw	r30, r16
    1e00:	86 85       	ldd	r24, Z+14	; 0x0e
    1e02:	97 85       	ldd	r25, Z+15	; 0x0f
    1e04:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strtod>
    1e08:	69 8f       	std	Y+25, r22	; 0x19
    1e0a:	7a 8f       	std	Y+26, r23	; 0x1a
    1e0c:	8b 8f       	std	Y+27, r24	; 0x1b
    1e0e:	9c 8f       	std	Y+28, r25	; 0x1c

	user->course = 0;
    1e10:	1d 8e       	std	Y+29, r1	; 0x1d
    1e12:	1e 8e       	std	Y+30, r1	; 0x1e
    1e14:	1f 8e       	std	Y+31, r1	; 0x1f
    1e16:	18 a2       	std	Y+32, r1	; 0x20
	user->course = (float)strtod(gps_data[8],NULL);
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	d8 01       	movw	r26, r16
    1e1e:	50 96       	adiw	r26, 0x10	; 16
    1e20:	8d 91       	ld	r24, X+
    1e22:	9c 91       	ld	r25, X
    1e24:	51 97       	sbiw	r26, 0x11	; 17
    1e26:	0e 94 99 16 	call	0x2d32	; 0x2d32 <strtod>
    1e2a:	6d 8f       	std	Y+29, r22	; 0x1d
    1e2c:	7e 8f       	std	Y+30, r23	; 0x1e
    1e2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e30:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(user->date,8);
    1e32:	68 e0       	ldi	r22, 0x08	; 8
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	ce 01       	movw	r24, r28
    1e38:	81 96       	adiw	r24, 0x21	; 33
    1e3a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <wipe_chars>
	user->date[0] = gps_data[9][2];
    1e3e:	d8 01       	movw	r26, r16
    1e40:	52 96       	adiw	r26, 0x12	; 18
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	53 97       	sbiw	r26, 0x13	; 19
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	89 a3       	std	Y+33, r24	; 0x21
	user->date[1] = gps_data[9][3];
    1e4c:	52 96       	adiw	r26, 0x12	; 18
    1e4e:	ed 91       	ld	r30, X+
    1e50:	fc 91       	ld	r31, X
    1e52:	53 97       	sbiw	r26, 0x13	; 19
    1e54:	83 81       	ldd	r24, Z+3	; 0x03
    1e56:	8a a3       	std	Y+34, r24	; 0x22
	user->date[2] = '/';
    1e58:	8f e2       	ldi	r24, 0x2F	; 47
    1e5a:	8b a3       	std	Y+35, r24	; 0x23
	user->date[3] = gps_data[9][0];
    1e5c:	52 96       	adiw	r26, 0x12	; 18
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	53 97       	sbiw	r26, 0x13	; 19
    1e64:	90 81       	ld	r25, Z
    1e66:	9c a3       	std	Y+36, r25	; 0x24
	user->date[4] = gps_data[9][1];
    1e68:	52 96       	adiw	r26, 0x12	; 18
    1e6a:	ed 91       	ld	r30, X+
    1e6c:	fc 91       	ld	r31, X
    1e6e:	53 97       	sbiw	r26, 0x13	; 19
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	9d a3       	std	Y+37, r25	; 0x25
	user->date[5] = '/';
    1e74:	8e a3       	std	Y+38, r24	; 0x26
	user->date[6] = gps_data[9][4];
    1e76:	52 96       	adiw	r26, 0x12	; 18
    1e78:	ed 91       	ld	r30, X+
    1e7a:	fc 91       	ld	r31, X
    1e7c:	53 97       	sbiw	r26, 0x13	; 19
    1e7e:	84 81       	ldd	r24, Z+4	; 0x04
    1e80:	8f a3       	std	Y+39, r24	; 0x27
	user->date[7] = gps_data[9][5];
    1e82:	52 96       	adiw	r26, 0x12	; 18
    1e84:	ed 91       	ld	r30, X+
    1e86:	fc 91       	ld	r31, X
    1e88:	53 97       	sbiw	r26, 0x13	; 19
    1e8a:	85 81       	ldd	r24, Z+5	; 0x05
    1e8c:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(user->mag_var,8);
    1e8e:	7e 01       	movw	r14, r28
    1e90:	b9 e2       	ldi	r27, 0x29	; 41
    1e92:	eb 0e       	add	r14, r27
    1e94:	f1 1c       	adc	r15, r1
    1e96:	68 e0       	ldi	r22, 0x08	; 8
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <wipe_chars>
	strcpy(user->mag_var,gps_data[10]);
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	64 89       	ldd	r22, Z+20	; 0x14
    1ea4:	75 89       	ldd	r23, Z+21	; 0x15
    1ea6:	c7 01       	movw	r24, r14
    1ea8:	0e 94 4a 18 	call	0x3094	; 0x3094 <strcpy>

	user->mode = gps_data[12][0];
    1eac:	d8 01       	movw	r26, r16
    1eae:	58 96       	adiw	r26, 0x18	; 24
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
    1eb4:	59 97       	sbiw	r26, 0x19	; 25
    1eb6:	80 81       	ld	r24, Z
    1eb8:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(user->checksum,3);
    1eba:	63 e0       	ldi	r22, 0x03	; 3
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	c2 96       	adiw	r24, 0x32	; 50
    1ec2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <wipe_chars>
	user->checksum[0] = gps_data[12][1];
    1ec6:	d8 01       	movw	r26, r16
    1ec8:	58 96       	adiw	r26, 0x18	; 24
    1eca:	ed 91       	ld	r30, X+
    1ecc:	fc 91       	ld	r31, X
    1ece:	59 97       	sbiw	r26, 0x19	; 25
    1ed0:	81 81       	ldd	r24, Z+1	; 0x01
    1ed2:	8a ab       	std	Y+50, r24	; 0x32
	user->checksum[1] = gps_data[12][2];
    1ed4:	58 96       	adiw	r26, 0x18	; 24
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	fc 91       	ld	r31, X
    1eda:	59 97       	sbiw	r26, 0x19	; 25
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	8b ab       	std	Y+51, r24	; 0x33
	user->checksum[2] = gps_data[12][3];
    1ee0:	58 96       	adiw	r26, 0x18	; 24
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	59 97       	sbiw	r26, 0x19	; 25
    1ee8:	83 81       	ldd	r24, Z+3	; 0x03
    1eea:	8c ab       	std	Y+52, r24	; 0x34
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	08 95       	ret

00001efa <my_eeprom_read_int>:
//---- EEPROM Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1efa:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__eerd_byte_m1284p>
    return (temp_num);
}
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	08 95       	ret

00001f02 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    1f02:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <__eerd_byte_m1284p>

00001f06 <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1f06:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <__eerd_dword_m1284p>

00001f0a <my_eeprom_read_string>:
    1f0a:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <__eerd_block_m1284p>

00001f0e <main>:
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	1f 92       	push	r1
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <prepare_device>
    1f1c:	05 e6       	ldi	r16, 0x65	; 101
    1f1e:	14 e0       	ldi	r17, 0x04	; 4
    1f20:	80 e1       	ldi	r24, 0x10	; 16
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <malloc>
    1f28:	f8 01       	movw	r30, r16
    1f2a:	81 93       	st	Z+, r24
    1f2c:	91 93       	st	Z+, r25
    1f2e:	8f 01       	movw	r16, r30
    1f30:	f4 e0       	ldi	r31, 0x04	; 4
    1f32:	0f 37       	cpi	r16, 0x7F	; 127
    1f34:	1f 07       	cpc	r17, r31
    1f36:	a1 f7       	brne	.-24     	; 0x1f20 <main+0x12>
    1f38:	85 e3       	ldi	r24, 0x35	; 53
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <malloc>
    1f40:	90 93 e4 03 	sts	0x03E4, r25
    1f44:	80 93 e3 03 	sts	0x03E3, r24
    1f48:	8d ed       	ldi	r24, 0xDD	; 221
    1f4a:	92 e0       	ldi	r25, 0x02	; 2
    1f4c:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1f50:	0e 94 e6 01 	call	0x3cc	; 0x3cc <database_load>
    1f54:	2f e3       	ldi	r18, 0x3F	; 63
    1f56:	8d e0       	ldi	r24, 0x0D	; 13
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	21 50       	subi	r18, 0x01	; 1
    1f5c:	80 40       	sbci	r24, 0x00	; 0
    1f5e:	90 40       	sbci	r25, 0x00	; 0
    1f60:	e1 f7       	brne	.-8      	; 0x1f5a <main+0x4c>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <main+0x56>
    1f64:	00 00       	nop
    1f66:	02 e0       	ldi	r16, 0x02	; 2
    1f68:	10 e0       	ldi	r17, 0x00	; 0
    1f6a:	e0 90 7e 03 	lds	r14, 0x037E
    1f6e:	f0 90 7f 03 	lds	r15, 0x037F
    1f72:	e1 e0       	ldi	r30, 0x01	; 1
    1f74:	ee 16       	cp	r14, r30
    1f76:	f1 04       	cpc	r15, r1
    1f78:	99 f1       	breq	.+102    	; 0x1fe0 <main+0xd2>
    1f7a:	f2 e0       	ldi	r31, 0x02	; 2
    1f7c:	ef 16       	cp	r14, r31
    1f7e:	f1 04       	cpc	r15, r1
    1f80:	61 f1       	breq	.+88     	; 0x1fda <main+0xcc>
    1f82:	ef 28       	or	r14, r15
    1f84:	91 f7       	brne	.-28     	; 0x1f6a <main+0x5c>
    1f86:	80 91 db 03 	lds	r24, 0x03DB
    1f8a:	90 91 dc 03 	lds	r25, 0x03DC
    1f8e:	18 16       	cp	r1, r24
    1f90:	19 06       	cpc	r1, r25
    1f92:	44 f0       	brlt	.+16     	; 0x1fa4 <main+0x96>
    1f94:	80 91 7e 03 	lds	r24, 0x037E
    1f98:	90 91 7f 03 	lds	r25, 0x037F
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <main+0x94>
    1fa0:	60 c0       	rjmp	.+192    	; 0x2062 <main+0x154>
    1fa2:	e3 cf       	rjmp	.-58     	; 0x1f6a <main+0x5c>
    1fa4:	0e 94 ce 01 	call	0x39c	; 0x39c <enable_gps>
    1fa8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <gps_locked>
    1fac:	89 2b       	or	r24, r25
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <main+0xa8>
    1fb0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <show_nearest_station>
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <main+0xc6>
    1fb6:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    1fba:	81 ef       	ldi	r24, 0xF1	; 241
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1fc2:	2f e3       	ldi	r18, 0x3F	; 63
    1fc4:	8d e0       	ldi	r24, 0x0D	; 13
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	21 50       	subi	r18, 0x01	; 1
    1fca:	80 40       	sbci	r24, 0x00	; 0
    1fcc:	90 40       	sbci	r25, 0x00	; 0
    1fce:	e1 f7       	brne	.-8      	; 0x1fc8 <main+0xba>
    1fd0:	00 c0       	rjmp	.+0      	; 0x1fd2 <main+0xc4>
    1fd2:	00 00       	nop
    1fd4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <print_gps_data>
    1fd8:	c8 cf       	rjmp	.-112    	; 0x1f6a <main+0x5c>
    1fda:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <wait_for_update>
    1fde:	c5 cf       	rjmp	.-118    	; 0x1f6a <main+0x5c>
    1fe0:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>
    1fe4:	80 91 7a 03 	lds	r24, 0x037A
    1fe8:	90 91 7b 03 	lds	r25, 0x037B
    1fec:	89 2b       	or	r24, r25
    1fee:	a1 f4       	brne	.+40     	; 0x2018 <main+0x10a>
    1ff0:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    1ffc:	f0 92 7b 03 	sts	0x037B, r15
    2000:	e0 92 7a 03 	sts	0x037A, r14
    2004:	10 92 79 03 	sts	0x0379, r1
    2008:	10 92 78 03 	sts	0x0378, r1
    200c:	10 92 7d 03 	sts	0x037D, r1
    2010:	10 92 7c 03 	sts	0x037C, r1
    2014:	0e 94 97 02 	call	0x52e	; 0x52e <database_free>
    2018:	90 91 da 03 	lds	r25, 0x03DA
    201c:	80 91 d9 03 	lds	r24, 0x03D9
    2020:	98 17       	cp	r25, r24
    2022:	09 f4       	brne	.+2      	; 0x2026 <main+0x118>
    2024:	43 c0       	rjmp	.+134    	; 0x20ac <main+0x19e>
    2026:	10 92 d2 03 	sts	0x03D2, r1
    202a:	10 92 d3 03 	sts	0x03D3, r1
    202e:	10 92 d4 03 	sts	0x03D4, r1
    2032:	10 92 d5 03 	sts	0x03D5, r1
    2036:	0e 94 24 03 	call	0x648	; 0x648 <getChar>
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	0e 94 0f 03 	call	0x61e	; 0x61e <detectSerialEnd>
    2040:	69 81       	ldd	r22, Y+1	; 0x01
    2042:	89 2b       	or	r24, r25
    2044:	19 f1       	breq	.+70     	; 0x208c <main+0x17e>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 44 03 	call	0x688	; 0x688 <terminate_serial>
    204e:	0e 94 6f 07 	call	0xede	; 0xede <check_database_integrity>
    2052:	80 91 78 03 	lds	r24, 0x0378
    2056:	90 91 79 03 	lds	r25, 0x0379
    205a:	89 2b       	or	r24, r25
    205c:	39 f0       	breq	.+14     	; 0x206c <main+0x15e>
    205e:	0e 94 33 07 	call	0xe66	; 0xe66 <wipe_eeprom>
    2062:	10 93 7f 03 	sts	0x037F, r17
    2066:	00 93 7e 03 	sts	0x037E, r16
    206a:	7f cf       	rjmp	.-258    	; 0x1f6a <main+0x5c>
    206c:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_init>
    2070:	8a e1       	ldi	r24, 0x1A	; 26
    2072:	93 e0       	ldi	r25, 0x03	; 3
    2074:	0e 94 24 0c 	call	0x1848	; 0x1848 <string_write>
    2078:	ef e3       	ldi	r30, 0x3F	; 63
    207a:	fd e0       	ldi	r31, 0x0D	; 13
    207c:	23 e0       	ldi	r18, 0x03	; 3
    207e:	e1 50       	subi	r30, 0x01	; 1
    2080:	f0 40       	sbci	r31, 0x00	; 0
    2082:	20 40       	sbci	r18, 0x00	; 0
    2084:	e1 f7       	brne	.-8      	; 0x207e <main+0x170>
    2086:	00 c0       	rjmp	.+0      	; 0x2088 <main+0x17a>
    2088:	00 00       	nop
    208a:	6f cf       	rjmp	.-290    	; 0x1f6a <main+0x5c>
    208c:	80 91 7c 03 	lds	r24, 0x037C
    2090:	90 91 7d 03 	lds	r25, 0x037D
    2094:	0e 94 b6 1a 	call	0x356c	; 0x356c <__eewr_byte_m1284p>
    2098:	80 91 7c 03 	lds	r24, 0x037C
    209c:	90 91 7d 03 	lds	r25, 0x037D
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	90 93 7d 03 	sts	0x037D, r25
    20a6:	80 93 7c 03 	sts	0x037C, r24
    20aa:	5f cf       	rjmp	.-322    	; 0x1f6a <main+0x5c>
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	60 91 d2 03 	lds	r22, 0x03D2
    20b8:	70 91 d3 03 	lds	r23, 0x03D3
    20bc:	80 91 d4 03 	lds	r24, 0x03D4
    20c0:	90 91 d5 03 	lds	r25, 0x03D5
    20c4:	0e 94 81 10 	call	0x2102	; 0x2102 <__addsf3>
    20c8:	60 93 d2 03 	sts	0x03D2, r22
    20cc:	70 93 d3 03 	sts	0x03D3, r23
    20d0:	80 93 d4 03 	sts	0x03D4, r24
    20d4:	90 93 d5 03 	sts	0x03D5, r25
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e5       	ldi	r19, 0x50	; 80
    20dc:	43 e4       	ldi	r20, 0x43	; 67
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 4a 13 	call	0x2694	; 0x2694 <__gesf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	0c f0       	brlt	.+2      	; 0x20ea <main+0x1dc>
    20e8:	40 cf       	rjmp	.-384    	; 0x1f6a <main+0x5c>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 44 03 	call	0x688	; 0x688 <terminate_serial>
    20f2:	60 e2       	ldi	r22, 0x20	; 32
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <print_eeprom_contents>
    20fe:	af cf       	rjmp	.-162    	; 0x205e <main+0x150>

00002100 <__subsf3>:
    2100:	50 58       	subi	r21, 0x80	; 128

00002102 <__addsf3>:
    2102:	bb 27       	eor	r27, r27
    2104:	aa 27       	eor	r26, r26
    2106:	0e d0       	rcall	.+28     	; 0x2124 <__addsf3x>
    2108:	63 c2       	rjmp	.+1222   	; 0x25d0 <__fp_round>
    210a:	2c d2       	rcall	.+1112   	; 0x2564 <__fp_pscA>
    210c:	30 f0       	brcs	.+12     	; 0x211a <__addsf3+0x18>
    210e:	31 d2       	rcall	.+1122   	; 0x2572 <__fp_pscB>
    2110:	20 f0       	brcs	.+8      	; 0x211a <__addsf3+0x18>
    2112:	31 f4       	brne	.+12     	; 0x2120 <__addsf3+0x1e>
    2114:	9f 3f       	cpi	r25, 0xFF	; 255
    2116:	11 f4       	brne	.+4      	; 0x211c <__addsf3+0x1a>
    2118:	1e f4       	brtc	.+6      	; 0x2120 <__addsf3+0x1e>
    211a:	fc c1       	rjmp	.+1016   	; 0x2514 <__fp_nan>
    211c:	0e f4       	brtc	.+2      	; 0x2120 <__addsf3+0x1e>
    211e:	e0 95       	com	r30
    2120:	e7 fb       	bst	r30, 7
    2122:	c9 c1       	rjmp	.+914    	; 0x24b6 <__fp_inf>

00002124 <__addsf3x>:
    2124:	e9 2f       	mov	r30, r25
    2126:	76 d2       	rcall	.+1260   	; 0x2614 <__fp_split3>
    2128:	80 f3       	brcs	.-32     	; 0x210a <__addsf3+0x8>
    212a:	ba 17       	cp	r27, r26
    212c:	62 07       	cpc	r22, r18
    212e:	73 07       	cpc	r23, r19
    2130:	84 07       	cpc	r24, r20
    2132:	95 07       	cpc	r25, r21
    2134:	18 f0       	brcs	.+6      	; 0x213c <__addsf3x+0x18>
    2136:	71 f4       	brne	.+28     	; 0x2154 <__addsf3x+0x30>
    2138:	9e f5       	brtc	.+102    	; 0x21a0 <__addsf3x+0x7c>
    213a:	a5 c2       	rjmp	.+1354   	; 0x2686 <__fp_zero>
    213c:	0e f4       	brtc	.+2      	; 0x2140 <__addsf3x+0x1c>
    213e:	e0 95       	com	r30
    2140:	0b 2e       	mov	r0, r27
    2142:	ba 2f       	mov	r27, r26
    2144:	a0 2d       	mov	r26, r0
    2146:	0b 01       	movw	r0, r22
    2148:	b9 01       	movw	r22, r18
    214a:	90 01       	movw	r18, r0
    214c:	0c 01       	movw	r0, r24
    214e:	ca 01       	movw	r24, r20
    2150:	a0 01       	movw	r20, r0
    2152:	11 24       	eor	r1, r1
    2154:	ff 27       	eor	r31, r31
    2156:	59 1b       	sub	r21, r25
    2158:	99 f0       	breq	.+38     	; 0x2180 <__addsf3x+0x5c>
    215a:	59 3f       	cpi	r21, 0xF9	; 249
    215c:	50 f4       	brcc	.+20     	; 0x2172 <__addsf3x+0x4e>
    215e:	50 3e       	cpi	r21, 0xE0	; 224
    2160:	68 f1       	brcs	.+90     	; 0x21bc <__addsf3x+0x98>
    2162:	1a 16       	cp	r1, r26
    2164:	f0 40       	sbci	r31, 0x00	; 0
    2166:	a2 2f       	mov	r26, r18
    2168:	23 2f       	mov	r18, r19
    216a:	34 2f       	mov	r19, r20
    216c:	44 27       	eor	r20, r20
    216e:	58 5f       	subi	r21, 0xF8	; 248
    2170:	f3 cf       	rjmp	.-26     	; 0x2158 <__addsf3x+0x34>
    2172:	46 95       	lsr	r20
    2174:	37 95       	ror	r19
    2176:	27 95       	ror	r18
    2178:	a7 95       	ror	r26
    217a:	f0 40       	sbci	r31, 0x00	; 0
    217c:	53 95       	inc	r21
    217e:	c9 f7       	brne	.-14     	; 0x2172 <__addsf3x+0x4e>
    2180:	7e f4       	brtc	.+30     	; 0x21a0 <__addsf3x+0x7c>
    2182:	1f 16       	cp	r1, r31
    2184:	ba 0b       	sbc	r27, r26
    2186:	62 0b       	sbc	r22, r18
    2188:	73 0b       	sbc	r23, r19
    218a:	84 0b       	sbc	r24, r20
    218c:	ba f0       	brmi	.+46     	; 0x21bc <__addsf3x+0x98>
    218e:	91 50       	subi	r25, 0x01	; 1
    2190:	a1 f0       	breq	.+40     	; 0x21ba <__addsf3x+0x96>
    2192:	ff 0f       	add	r31, r31
    2194:	bb 1f       	adc	r27, r27
    2196:	66 1f       	adc	r22, r22
    2198:	77 1f       	adc	r23, r23
    219a:	88 1f       	adc	r24, r24
    219c:	c2 f7       	brpl	.-16     	; 0x218e <__addsf3x+0x6a>
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <__addsf3x+0x98>
    21a0:	ba 0f       	add	r27, r26
    21a2:	62 1f       	adc	r22, r18
    21a4:	73 1f       	adc	r23, r19
    21a6:	84 1f       	adc	r24, r20
    21a8:	48 f4       	brcc	.+18     	; 0x21bc <__addsf3x+0x98>
    21aa:	87 95       	ror	r24
    21ac:	77 95       	ror	r23
    21ae:	67 95       	ror	r22
    21b0:	b7 95       	ror	r27
    21b2:	f7 95       	ror	r31
    21b4:	9e 3f       	cpi	r25, 0xFE	; 254
    21b6:	08 f0       	brcs	.+2      	; 0x21ba <__addsf3x+0x96>
    21b8:	b3 cf       	rjmp	.-154    	; 0x2120 <__addsf3+0x1e>
    21ba:	93 95       	inc	r25
    21bc:	88 0f       	add	r24, r24
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <__addsf3x+0x9e>
    21c0:	99 27       	eor	r25, r25
    21c2:	ee 0f       	add	r30, r30
    21c4:	97 95       	ror	r25
    21c6:	87 95       	ror	r24
    21c8:	08 95       	ret
    21ca:	cc d1       	rcall	.+920    	; 0x2564 <__fp_pscA>
    21cc:	58 f0       	brcs	.+22     	; 0x21e4 <__addsf3x+0xc0>
    21ce:	80 e8       	ldi	r24, 0x80	; 128
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <__addsf3x+0xb2>
    21d4:	9e ef       	ldi	r25, 0xFE	; 254
    21d6:	cd d1       	rcall	.+922    	; 0x2572 <__fp_pscB>
    21d8:	28 f0       	brcs	.+10     	; 0x21e4 <__addsf3x+0xc0>
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	51 e0       	ldi	r21, 0x01	; 1
    21de:	59 f4       	brne	.+22     	; 0x21f6 <atan2+0xe>
    21e0:	5e ef       	ldi	r21, 0xFE	; 254
    21e2:	09 c0       	rjmp	.+18     	; 0x21f6 <atan2+0xe>
    21e4:	97 c1       	rjmp	.+814    	; 0x2514 <__fp_nan>
    21e6:	4f c2       	rjmp	.+1182   	; 0x2686 <__fp_zero>

000021e8 <atan2>:
    21e8:	e9 2f       	mov	r30, r25
    21ea:	e0 78       	andi	r30, 0x80	; 128
    21ec:	13 d2       	rcall	.+1062   	; 0x2614 <__fp_split3>
    21ee:	68 f3       	brcs	.-38     	; 0x21ca <__addsf3x+0xa6>
    21f0:	09 2e       	mov	r0, r25
    21f2:	05 2a       	or	r0, r21
    21f4:	c1 f3       	breq	.-16     	; 0x21e6 <__addsf3x+0xc2>
    21f6:	26 17       	cp	r18, r22
    21f8:	37 07       	cpc	r19, r23
    21fa:	48 07       	cpc	r20, r24
    21fc:	59 07       	cpc	r21, r25
    21fe:	38 f0       	brcs	.+14     	; 0x220e <atan2+0x26>
    2200:	0e 2e       	mov	r0, r30
    2202:	07 f8       	bld	r0, 7
    2204:	e0 25       	eor	r30, r0
    2206:	69 f0       	breq	.+26     	; 0x2222 <atan2+0x3a>
    2208:	e0 25       	eor	r30, r0
    220a:	e0 64       	ori	r30, 0x40	; 64
    220c:	0a c0       	rjmp	.+20     	; 0x2222 <atan2+0x3a>
    220e:	ef 63       	ori	r30, 0x3F	; 63
    2210:	07 f8       	bld	r0, 7
    2212:	00 94       	com	r0
    2214:	07 fa       	bst	r0, 7
    2216:	db 01       	movw	r26, r22
    2218:	b9 01       	movw	r22, r18
    221a:	9d 01       	movw	r18, r26
    221c:	dc 01       	movw	r26, r24
    221e:	ca 01       	movw	r24, r20
    2220:	ad 01       	movw	r20, r26
    2222:	ef 93       	push	r30
    2224:	4a d0       	rcall	.+148    	; 0x22ba <__divsf3_pse>
    2226:	d4 d1       	rcall	.+936    	; 0x25d0 <__fp_round>
    2228:	0a d0       	rcall	.+20     	; 0x223e <atan>
    222a:	5f 91       	pop	r21
    222c:	55 23       	and	r21, r21
    222e:	31 f0       	breq	.+12     	; 0x223c <atan2+0x54>
    2230:	2b ed       	ldi	r18, 0xDB	; 219
    2232:	3f e0       	ldi	r19, 0x0F	; 15
    2234:	49 e4       	ldi	r20, 0x49	; 73
    2236:	50 fd       	sbrc	r21, 0
    2238:	49 ec       	ldi	r20, 0xC9	; 201
    223a:	63 cf       	rjmp	.-314    	; 0x2102 <__addsf3>
    223c:	08 95       	ret

0000223e <atan>:
    223e:	df 93       	push	r29
    2240:	dd 27       	eor	r29, r29
    2242:	b9 2f       	mov	r27, r25
    2244:	bf 77       	andi	r27, 0x7F	; 127
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	16 16       	cp	r1, r22
    224c:	17 06       	cpc	r1, r23
    224e:	48 07       	cpc	r20, r24
    2250:	5b 07       	cpc	r21, r27
    2252:	10 f4       	brcc	.+4      	; 0x2258 <atan+0x1a>
    2254:	d9 2f       	mov	r29, r25
    2256:	22 d2       	rcall	.+1092   	; 0x269c <inverse>
    2258:	9f 93       	push	r25
    225a:	8f 93       	push	r24
    225c:	7f 93       	push	r23
    225e:	6f 93       	push	r22
    2260:	b9 d3       	rcall	.+1906   	; 0x29d4 <square>
    2262:	e4 eb       	ldi	r30, 0xB4	; 180
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	59 d1       	rcall	.+690    	; 0x251a <__fp_powser>
    2268:	b3 d1       	rcall	.+870    	; 0x25d0 <__fp_round>
    226a:	2f 91       	pop	r18
    226c:	3f 91       	pop	r19
    226e:	4f 91       	pop	r20
    2270:	5f 91       	pop	r21
    2272:	a5 d2       	rcall	.+1354   	; 0x27be <__mulsf3x>
    2274:	dd 23       	and	r29, r29
    2276:	49 f0       	breq	.+18     	; 0x228a <atan+0x4c>
    2278:	90 58       	subi	r25, 0x80	; 128
    227a:	a2 ea       	ldi	r26, 0xA2	; 162
    227c:	2a ed       	ldi	r18, 0xDA	; 218
    227e:	3f e0       	ldi	r19, 0x0F	; 15
    2280:	49 ec       	ldi	r20, 0xC9	; 201
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	d0 78       	andi	r29, 0x80	; 128
    2286:	5d 27       	eor	r21, r29
    2288:	4d df       	rcall	.-358    	; 0x2124 <__addsf3x>
    228a:	df 91       	pop	r29
    228c:	a1 c1       	rjmp	.+834    	; 0x25d0 <__fp_round>

0000228e <__cmpsf2>:
    228e:	ef d0       	rcall	.+478    	; 0x246e <__fp_cmp>
    2290:	08 f4       	brcc	.+2      	; 0x2294 <__cmpsf2+0x6>
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	08 95       	ret

00002296 <cos>:
    2296:	75 d1       	rcall	.+746    	; 0x2582 <__fp_rempio2>
    2298:	e3 95       	inc	r30
    229a:	ab c1       	rjmp	.+854    	; 0x25f2 <__fp_sinus>

0000229c <__divsf3>:
    229c:	0c d0       	rcall	.+24     	; 0x22b6 <__divsf3x>
    229e:	98 c1       	rjmp	.+816    	; 0x25d0 <__fp_round>
    22a0:	68 d1       	rcall	.+720    	; 0x2572 <__fp_pscB>
    22a2:	40 f0       	brcs	.+16     	; 0x22b4 <__divsf3+0x18>
    22a4:	5f d1       	rcall	.+702    	; 0x2564 <__fp_pscA>
    22a6:	30 f0       	brcs	.+12     	; 0x22b4 <__divsf3+0x18>
    22a8:	21 f4       	brne	.+8      	; 0x22b2 <__divsf3+0x16>
    22aa:	5f 3f       	cpi	r21, 0xFF	; 255
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <__divsf3+0x18>
    22ae:	03 c1       	rjmp	.+518    	; 0x24b6 <__fp_inf>
    22b0:	51 11       	cpse	r21, r1
    22b2:	ea c1       	rjmp	.+980    	; 0x2688 <__fp_szero>
    22b4:	2f c1       	rjmp	.+606    	; 0x2514 <__fp_nan>

000022b6 <__divsf3x>:
    22b6:	ae d1       	rcall	.+860    	; 0x2614 <__fp_split3>
    22b8:	98 f3       	brcs	.-26     	; 0x22a0 <__divsf3+0x4>

000022ba <__divsf3_pse>:
    22ba:	99 23       	and	r25, r25
    22bc:	c9 f3       	breq	.-14     	; 0x22b0 <__divsf3+0x14>
    22be:	55 23       	and	r21, r21
    22c0:	b1 f3       	breq	.-20     	; 0x22ae <__divsf3+0x12>
    22c2:	95 1b       	sub	r25, r21
    22c4:	55 0b       	sbc	r21, r21
    22c6:	bb 27       	eor	r27, r27
    22c8:	aa 27       	eor	r26, r26
    22ca:	62 17       	cp	r22, r18
    22cc:	73 07       	cpc	r23, r19
    22ce:	84 07       	cpc	r24, r20
    22d0:	38 f0       	brcs	.+14     	; 0x22e0 <__divsf3_pse+0x26>
    22d2:	9f 5f       	subi	r25, 0xFF	; 255
    22d4:	5f 4f       	sbci	r21, 0xFF	; 255
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	44 1f       	adc	r20, r20
    22dc:	aa 1f       	adc	r26, r26
    22de:	a9 f3       	breq	.-22     	; 0x22ca <__divsf3_pse+0x10>
    22e0:	33 d0       	rcall	.+102    	; 0x2348 <__divsf3_pse+0x8e>
    22e2:	0e 2e       	mov	r0, r30
    22e4:	3a f0       	brmi	.+14     	; 0x22f4 <__divsf3_pse+0x3a>
    22e6:	e0 e8       	ldi	r30, 0x80	; 128
    22e8:	30 d0       	rcall	.+96     	; 0x234a <__divsf3_pse+0x90>
    22ea:	91 50       	subi	r25, 0x01	; 1
    22ec:	50 40       	sbci	r21, 0x00	; 0
    22ee:	e6 95       	lsr	r30
    22f0:	00 1c       	adc	r0, r0
    22f2:	ca f7       	brpl	.-14     	; 0x22e6 <__divsf3_pse+0x2c>
    22f4:	29 d0       	rcall	.+82     	; 0x2348 <__divsf3_pse+0x8e>
    22f6:	fe 2f       	mov	r31, r30
    22f8:	27 d0       	rcall	.+78     	; 0x2348 <__divsf3_pse+0x8e>
    22fa:	66 0f       	add	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	bb 1f       	adc	r27, r27
    2302:	26 17       	cp	r18, r22
    2304:	37 07       	cpc	r19, r23
    2306:	48 07       	cpc	r20, r24
    2308:	ab 07       	cpc	r26, r27
    230a:	b0 e8       	ldi	r27, 0x80	; 128
    230c:	09 f0       	breq	.+2      	; 0x2310 <__divsf3_pse+0x56>
    230e:	bb 0b       	sbc	r27, r27
    2310:	80 2d       	mov	r24, r0
    2312:	bf 01       	movw	r22, r30
    2314:	ff 27       	eor	r31, r31
    2316:	93 58       	subi	r25, 0x83	; 131
    2318:	5f 4f       	sbci	r21, 0xFF	; 255
    231a:	2a f0       	brmi	.+10     	; 0x2326 <__divsf3_pse+0x6c>
    231c:	9e 3f       	cpi	r25, 0xFE	; 254
    231e:	51 05       	cpc	r21, r1
    2320:	68 f0       	brcs	.+26     	; 0x233c <__divsf3_pse+0x82>
    2322:	c9 c0       	rjmp	.+402    	; 0x24b6 <__fp_inf>
    2324:	b1 c1       	rjmp	.+866    	; 0x2688 <__fp_szero>
    2326:	5f 3f       	cpi	r21, 0xFF	; 255
    2328:	ec f3       	brlt	.-6      	; 0x2324 <__divsf3_pse+0x6a>
    232a:	98 3e       	cpi	r25, 0xE8	; 232
    232c:	dc f3       	brlt	.-10     	; 0x2324 <__divsf3_pse+0x6a>
    232e:	86 95       	lsr	r24
    2330:	77 95       	ror	r23
    2332:	67 95       	ror	r22
    2334:	b7 95       	ror	r27
    2336:	f7 95       	ror	r31
    2338:	9f 5f       	subi	r25, 0xFF	; 255
    233a:	c9 f7       	brne	.-14     	; 0x232e <__divsf3_pse+0x74>
    233c:	88 0f       	add	r24, r24
    233e:	91 1d       	adc	r25, r1
    2340:	96 95       	lsr	r25
    2342:	87 95       	ror	r24
    2344:	97 f9       	bld	r25, 7
    2346:	08 95       	ret
    2348:	e1 e0       	ldi	r30, 0x01	; 1
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	bb 1f       	adc	r27, r27
    2352:	62 17       	cp	r22, r18
    2354:	73 07       	cpc	r23, r19
    2356:	84 07       	cpc	r24, r20
    2358:	ba 07       	cpc	r27, r26
    235a:	20 f0       	brcs	.+8      	; 0x2364 <__divsf3_pse+0xaa>
    235c:	62 1b       	sub	r22, r18
    235e:	73 0b       	sbc	r23, r19
    2360:	84 0b       	sbc	r24, r20
    2362:	ba 0b       	sbc	r27, r26
    2364:	ee 1f       	adc	r30, r30
    2366:	88 f7       	brcc	.-30     	; 0x234a <__divsf3_pse+0x90>
    2368:	e0 95       	com	r30
    236a:	08 95       	ret

0000236c <__fixsfsi>:
    236c:	04 d0       	rcall	.+8      	; 0x2376 <__fixunssfsi>
    236e:	68 94       	set
    2370:	b1 11       	cpse	r27, r1
    2372:	8a c1       	rjmp	.+788    	; 0x2688 <__fp_szero>
    2374:	08 95       	ret

00002376 <__fixunssfsi>:
    2376:	56 d1       	rcall	.+684    	; 0x2624 <__fp_splitA>
    2378:	88 f0       	brcs	.+34     	; 0x239c <__fixunssfsi+0x26>
    237a:	9f 57       	subi	r25, 0x7F	; 127
    237c:	90 f0       	brcs	.+36     	; 0x23a2 <__fixunssfsi+0x2c>
    237e:	b9 2f       	mov	r27, r25
    2380:	99 27       	eor	r25, r25
    2382:	b7 51       	subi	r27, 0x17	; 23
    2384:	a0 f0       	brcs	.+40     	; 0x23ae <__fixunssfsi+0x38>
    2386:	d1 f0       	breq	.+52     	; 0x23bc <__fixunssfsi+0x46>
    2388:	66 0f       	add	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	1a f0       	brmi	.+6      	; 0x2398 <__fixunssfsi+0x22>
    2392:	ba 95       	dec	r27
    2394:	c9 f7       	brne	.-14     	; 0x2388 <__fixunssfsi+0x12>
    2396:	12 c0       	rjmp	.+36     	; 0x23bc <__fixunssfsi+0x46>
    2398:	b1 30       	cpi	r27, 0x01	; 1
    239a:	81 f0       	breq	.+32     	; 0x23bc <__fixunssfsi+0x46>
    239c:	74 d1       	rcall	.+744    	; 0x2686 <__fp_zero>
    239e:	b1 e0       	ldi	r27, 0x01	; 1
    23a0:	08 95       	ret
    23a2:	71 c1       	rjmp	.+738    	; 0x2686 <__fp_zero>
    23a4:	67 2f       	mov	r22, r23
    23a6:	78 2f       	mov	r23, r24
    23a8:	88 27       	eor	r24, r24
    23aa:	b8 5f       	subi	r27, 0xF8	; 248
    23ac:	39 f0       	breq	.+14     	; 0x23bc <__fixunssfsi+0x46>
    23ae:	b9 3f       	cpi	r27, 0xF9	; 249
    23b0:	cc f3       	brlt	.-14     	; 0x23a4 <__fixunssfsi+0x2e>
    23b2:	86 95       	lsr	r24
    23b4:	77 95       	ror	r23
    23b6:	67 95       	ror	r22
    23b8:	b3 95       	inc	r27
    23ba:	d9 f7       	brne	.-10     	; 0x23b2 <__fixunssfsi+0x3c>
    23bc:	3e f4       	brtc	.+14     	; 0x23cc <__fixunssfsi+0x56>
    23be:	90 95       	com	r25
    23c0:	80 95       	com	r24
    23c2:	70 95       	com	r23
    23c4:	61 95       	neg	r22
    23c6:	7f 4f       	sbci	r23, 0xFF	; 255
    23c8:	8f 4f       	sbci	r24, 0xFF	; 255
    23ca:	9f 4f       	sbci	r25, 0xFF	; 255
    23cc:	08 95       	ret

000023ce <__floatunsisf>:
    23ce:	e8 94       	clt
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <__floatsisf+0x12>

000023d2 <__floatsisf>:
    23d2:	97 fb       	bst	r25, 7
    23d4:	3e f4       	brtc	.+14     	; 0x23e4 <__floatsisf+0x12>
    23d6:	90 95       	com	r25
    23d8:	80 95       	com	r24
    23da:	70 95       	com	r23
    23dc:	61 95       	neg	r22
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	8f 4f       	sbci	r24, 0xFF	; 255
    23e2:	9f 4f       	sbci	r25, 0xFF	; 255
    23e4:	99 23       	and	r25, r25
    23e6:	a9 f0       	breq	.+42     	; 0x2412 <__floatsisf+0x40>
    23e8:	f9 2f       	mov	r31, r25
    23ea:	96 e9       	ldi	r25, 0x96	; 150
    23ec:	bb 27       	eor	r27, r27
    23ee:	93 95       	inc	r25
    23f0:	f6 95       	lsr	r31
    23f2:	87 95       	ror	r24
    23f4:	77 95       	ror	r23
    23f6:	67 95       	ror	r22
    23f8:	b7 95       	ror	r27
    23fa:	f1 11       	cpse	r31, r1
    23fc:	f8 cf       	rjmp	.-16     	; 0x23ee <__floatsisf+0x1c>
    23fe:	fa f4       	brpl	.+62     	; 0x243e <__floatsisf+0x6c>
    2400:	bb 0f       	add	r27, r27
    2402:	11 f4       	brne	.+4      	; 0x2408 <__floatsisf+0x36>
    2404:	60 ff       	sbrs	r22, 0
    2406:	1b c0       	rjmp	.+54     	; 0x243e <__floatsisf+0x6c>
    2408:	6f 5f       	subi	r22, 0xFF	; 255
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	8f 4f       	sbci	r24, 0xFF	; 255
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	16 c0       	rjmp	.+44     	; 0x243e <__floatsisf+0x6c>
    2412:	88 23       	and	r24, r24
    2414:	11 f0       	breq	.+4      	; 0x241a <__floatsisf+0x48>
    2416:	96 e9       	ldi	r25, 0x96	; 150
    2418:	11 c0       	rjmp	.+34     	; 0x243c <__floatsisf+0x6a>
    241a:	77 23       	and	r23, r23
    241c:	21 f0       	breq	.+8      	; 0x2426 <__floatsisf+0x54>
    241e:	9e e8       	ldi	r25, 0x8E	; 142
    2420:	87 2f       	mov	r24, r23
    2422:	76 2f       	mov	r23, r22
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <__floatsisf+0x5e>
    2426:	66 23       	and	r22, r22
    2428:	71 f0       	breq	.+28     	; 0x2446 <__floatsisf+0x74>
    242a:	96 e8       	ldi	r25, 0x86	; 134
    242c:	86 2f       	mov	r24, r22
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	2a f0       	brmi	.+10     	; 0x243e <__floatsisf+0x6c>
    2434:	9a 95       	dec	r25
    2436:	66 0f       	add	r22, r22
    2438:	77 1f       	adc	r23, r23
    243a:	88 1f       	adc	r24, r24
    243c:	da f7       	brpl	.-10     	; 0x2434 <__floatsisf+0x62>
    243e:	88 0f       	add	r24, r24
    2440:	96 95       	lsr	r25
    2442:	87 95       	ror	r24
    2444:	97 f9       	bld	r25, 7
    2446:	08 95       	ret

00002448 <floor>:
    2448:	07 d1       	rcall	.+526    	; 0x2658 <__fp_trunc>
    244a:	80 f0       	brcs	.+32     	; 0x246c <floor+0x24>
    244c:	9f 37       	cpi	r25, 0x7F	; 127
    244e:	40 f4       	brcc	.+16     	; 0x2460 <floor+0x18>
    2450:	91 11       	cpse	r25, r1
    2452:	0e f0       	brts	.+2      	; 0x2456 <floor+0xe>
    2454:	19 c1       	rjmp	.+562    	; 0x2688 <__fp_szero>
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	80 e8       	ldi	r24, 0x80	; 128
    245c:	9f eb       	ldi	r25, 0xBF	; 191
    245e:	08 95       	ret
    2460:	26 f4       	brtc	.+8      	; 0x246a <floor+0x22>
    2462:	1b 16       	cp	r1, r27
    2464:	61 1d       	adc	r22, r1
    2466:	71 1d       	adc	r23, r1
    2468:	81 1d       	adc	r24, r1
    246a:	2b c0       	rjmp	.+86     	; 0x24c2 <__fp_mintl>
    246c:	45 c0       	rjmp	.+138    	; 0x24f8 <__fp_mpack>

0000246e <__fp_cmp>:
    246e:	99 0f       	add	r25, r25
    2470:	00 08       	sbc	r0, r0
    2472:	55 0f       	add	r21, r21
    2474:	aa 0b       	sbc	r26, r26
    2476:	e0 e8       	ldi	r30, 0x80	; 128
    2478:	fe ef       	ldi	r31, 0xFE	; 254
    247a:	16 16       	cp	r1, r22
    247c:	17 06       	cpc	r1, r23
    247e:	e8 07       	cpc	r30, r24
    2480:	f9 07       	cpc	r31, r25
    2482:	c0 f0       	brcs	.+48     	; 0x24b4 <__fp_cmp+0x46>
    2484:	12 16       	cp	r1, r18
    2486:	13 06       	cpc	r1, r19
    2488:	e4 07       	cpc	r30, r20
    248a:	f5 07       	cpc	r31, r21
    248c:	98 f0       	brcs	.+38     	; 0x24b4 <__fp_cmp+0x46>
    248e:	62 1b       	sub	r22, r18
    2490:	73 0b       	sbc	r23, r19
    2492:	84 0b       	sbc	r24, r20
    2494:	95 0b       	sbc	r25, r21
    2496:	39 f4       	brne	.+14     	; 0x24a6 <__fp_cmp+0x38>
    2498:	0a 26       	eor	r0, r26
    249a:	61 f0       	breq	.+24     	; 0x24b4 <__fp_cmp+0x46>
    249c:	23 2b       	or	r18, r19
    249e:	24 2b       	or	r18, r20
    24a0:	25 2b       	or	r18, r21
    24a2:	21 f4       	brne	.+8      	; 0x24ac <__fp_cmp+0x3e>
    24a4:	08 95       	ret
    24a6:	0a 26       	eor	r0, r26
    24a8:	09 f4       	brne	.+2      	; 0x24ac <__fp_cmp+0x3e>
    24aa:	a1 40       	sbci	r26, 0x01	; 1
    24ac:	a6 95       	lsr	r26
    24ae:	8f ef       	ldi	r24, 0xFF	; 255
    24b0:	81 1d       	adc	r24, r1
    24b2:	81 1d       	adc	r24, r1
    24b4:	08 95       	ret

000024b6 <__fp_inf>:
    24b6:	97 f9       	bld	r25, 7
    24b8:	9f 67       	ori	r25, 0x7F	; 127
    24ba:	80 e8       	ldi	r24, 0x80	; 128
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	08 95       	ret

000024c2 <__fp_mintl>:
    24c2:	88 23       	and	r24, r24
    24c4:	71 f4       	brne	.+28     	; 0x24e2 <__fp_mintl+0x20>
    24c6:	77 23       	and	r23, r23
    24c8:	21 f0       	breq	.+8      	; 0x24d2 <__fp_mintl+0x10>
    24ca:	98 50       	subi	r25, 0x08	; 8
    24cc:	87 2b       	or	r24, r23
    24ce:	76 2f       	mov	r23, r22
    24d0:	07 c0       	rjmp	.+14     	; 0x24e0 <__fp_mintl+0x1e>
    24d2:	66 23       	and	r22, r22
    24d4:	11 f4       	brne	.+4      	; 0x24da <__fp_mintl+0x18>
    24d6:	99 27       	eor	r25, r25
    24d8:	0d c0       	rjmp	.+26     	; 0x24f4 <__fp_mintl+0x32>
    24da:	90 51       	subi	r25, 0x10	; 16
    24dc:	86 2b       	or	r24, r22
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	2a f0       	brmi	.+10     	; 0x24ee <__fp_mintl+0x2c>
    24e4:	9a 95       	dec	r25
    24e6:	66 0f       	add	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	88 1f       	adc	r24, r24
    24ec:	da f7       	brpl	.-10     	; 0x24e4 <__fp_mintl+0x22>
    24ee:	88 0f       	add	r24, r24
    24f0:	96 95       	lsr	r25
    24f2:	87 95       	ror	r24
    24f4:	97 f9       	bld	r25, 7
    24f6:	08 95       	ret

000024f8 <__fp_mpack>:
    24f8:	9f 3f       	cpi	r25, 0xFF	; 255
    24fa:	31 f0       	breq	.+12     	; 0x2508 <__fp_mpack_finite+0xc>

000024fc <__fp_mpack_finite>:
    24fc:	91 50       	subi	r25, 0x01	; 1
    24fe:	20 f4       	brcc	.+8      	; 0x2508 <__fp_mpack_finite+0xc>
    2500:	87 95       	ror	r24
    2502:	77 95       	ror	r23
    2504:	67 95       	ror	r22
    2506:	b7 95       	ror	r27
    2508:	88 0f       	add	r24, r24
    250a:	91 1d       	adc	r25, r1
    250c:	96 95       	lsr	r25
    250e:	87 95       	ror	r24
    2510:	97 f9       	bld	r25, 7
    2512:	08 95       	ret

00002514 <__fp_nan>:
    2514:	9f ef       	ldi	r25, 0xFF	; 255
    2516:	80 ec       	ldi	r24, 0xC0	; 192
    2518:	08 95       	ret

0000251a <__fp_powser>:
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	1f 93       	push	r17
    2520:	0f 93       	push	r16
    2522:	ff 92       	push	r15
    2524:	ef 92       	push	r14
    2526:	df 92       	push	r13
    2528:	7b 01       	movw	r14, r22
    252a:	8c 01       	movw	r16, r24
    252c:	68 94       	set
    252e:	05 c0       	rjmp	.+10     	; 0x253a <__fp_powser+0x20>
    2530:	da 2e       	mov	r13, r26
    2532:	ef 01       	movw	r28, r30
    2534:	44 d1       	rcall	.+648    	; 0x27be <__mulsf3x>
    2536:	fe 01       	movw	r30, r28
    2538:	e8 94       	clt
    253a:	a5 91       	lpm	r26, Z+
    253c:	25 91       	lpm	r18, Z+
    253e:	35 91       	lpm	r19, Z+
    2540:	45 91       	lpm	r20, Z+
    2542:	55 91       	lpm	r21, Z+
    2544:	ae f3       	brts	.-22     	; 0x2530 <__fp_powser+0x16>
    2546:	ef 01       	movw	r28, r30
    2548:	ed dd       	rcall	.-1062   	; 0x2124 <__addsf3x>
    254a:	fe 01       	movw	r30, r28
    254c:	97 01       	movw	r18, r14
    254e:	a8 01       	movw	r20, r16
    2550:	da 94       	dec	r13
    2552:	79 f7       	brne	.-34     	; 0x2532 <__fp_powser+0x18>
    2554:	df 90       	pop	r13
    2556:	ef 90       	pop	r14
    2558:	ff 90       	pop	r15
    255a:	0f 91       	pop	r16
    255c:	1f 91       	pop	r17
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <__fp_pscA>:
    2564:	00 24       	eor	r0, r0
    2566:	0a 94       	dec	r0
    2568:	16 16       	cp	r1, r22
    256a:	17 06       	cpc	r1, r23
    256c:	18 06       	cpc	r1, r24
    256e:	09 06       	cpc	r0, r25
    2570:	08 95       	ret

00002572 <__fp_pscB>:
    2572:	00 24       	eor	r0, r0
    2574:	0a 94       	dec	r0
    2576:	12 16       	cp	r1, r18
    2578:	13 06       	cpc	r1, r19
    257a:	14 06       	cpc	r1, r20
    257c:	05 06       	cpc	r0, r21
    257e:	08 95       	ret
    2580:	c9 cf       	rjmp	.-110    	; 0x2514 <__fp_nan>

00002582 <__fp_rempio2>:
    2582:	50 d0       	rcall	.+160    	; 0x2624 <__fp_splitA>
    2584:	e8 f3       	brcs	.-6      	; 0x2580 <__fp_pscB+0xe>
    2586:	e8 94       	clt
    2588:	e0 e0       	ldi	r30, 0x00	; 0
    258a:	bb 27       	eor	r27, r27
    258c:	9f 57       	subi	r25, 0x7F	; 127
    258e:	f0 f0       	brcs	.+60     	; 0x25cc <__fp_rempio2+0x4a>
    2590:	2a ed       	ldi	r18, 0xDA	; 218
    2592:	3f e0       	ldi	r19, 0x0F	; 15
    2594:	49 ec       	ldi	r20, 0xC9	; 201
    2596:	06 c0       	rjmp	.+12     	; 0x25a4 <__fp_rempio2+0x22>
    2598:	ee 0f       	add	r30, r30
    259a:	bb 0f       	add	r27, r27
    259c:	66 1f       	adc	r22, r22
    259e:	77 1f       	adc	r23, r23
    25a0:	88 1f       	adc	r24, r24
    25a2:	28 f0       	brcs	.+10     	; 0x25ae <__fp_rempio2+0x2c>
    25a4:	b2 3a       	cpi	r27, 0xA2	; 162
    25a6:	62 07       	cpc	r22, r18
    25a8:	73 07       	cpc	r23, r19
    25aa:	84 07       	cpc	r24, r20
    25ac:	28 f0       	brcs	.+10     	; 0x25b8 <__fp_rempio2+0x36>
    25ae:	b2 5a       	subi	r27, 0xA2	; 162
    25b0:	62 0b       	sbc	r22, r18
    25b2:	73 0b       	sbc	r23, r19
    25b4:	84 0b       	sbc	r24, r20
    25b6:	e3 95       	inc	r30
    25b8:	9a 95       	dec	r25
    25ba:	72 f7       	brpl	.-36     	; 0x2598 <__fp_rempio2+0x16>
    25bc:	80 38       	cpi	r24, 0x80	; 128
    25be:	30 f4       	brcc	.+12     	; 0x25cc <__fp_rempio2+0x4a>
    25c0:	9a 95       	dec	r25
    25c2:	bb 0f       	add	r27, r27
    25c4:	66 1f       	adc	r22, r22
    25c6:	77 1f       	adc	r23, r23
    25c8:	88 1f       	adc	r24, r24
    25ca:	d2 f7       	brpl	.-12     	; 0x25c0 <__fp_rempio2+0x3e>
    25cc:	90 48       	sbci	r25, 0x80	; 128
    25ce:	96 cf       	rjmp	.-212    	; 0x24fc <__fp_mpack_finite>

000025d0 <__fp_round>:
    25d0:	09 2e       	mov	r0, r25
    25d2:	03 94       	inc	r0
    25d4:	00 0c       	add	r0, r0
    25d6:	11 f4       	brne	.+4      	; 0x25dc <__fp_round+0xc>
    25d8:	88 23       	and	r24, r24
    25da:	52 f0       	brmi	.+20     	; 0x25f0 <__fp_round+0x20>
    25dc:	bb 0f       	add	r27, r27
    25de:	40 f4       	brcc	.+16     	; 0x25f0 <__fp_round+0x20>
    25e0:	bf 2b       	or	r27, r31
    25e2:	11 f4       	brne	.+4      	; 0x25e8 <__fp_round+0x18>
    25e4:	60 ff       	sbrs	r22, 0
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <__fp_round+0x20>
    25e8:	6f 5f       	subi	r22, 0xFF	; 255
    25ea:	7f 4f       	sbci	r23, 0xFF	; 255
    25ec:	8f 4f       	sbci	r24, 0xFF	; 255
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	08 95       	ret

000025f2 <__fp_sinus>:
    25f2:	ef 93       	push	r30
    25f4:	e0 ff       	sbrs	r30, 0
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <__fp_sinus+0x12>
    25f8:	a2 ea       	ldi	r26, 0xA2	; 162
    25fa:	2a ed       	ldi	r18, 0xDA	; 218
    25fc:	3f e0       	ldi	r19, 0x0F	; 15
    25fe:	49 ec       	ldi	r20, 0xC9	; 201
    2600:	5f eb       	ldi	r21, 0xBF	; 191
    2602:	90 dd       	rcall	.-1248   	; 0x2124 <__addsf3x>
    2604:	e5 df       	rcall	.-54     	; 0x25d0 <__fp_round>
    2606:	0f 90       	pop	r0
    2608:	03 94       	inc	r0
    260a:	01 fc       	sbrc	r0, 1
    260c:	90 58       	subi	r25, 0x80	; 128
    260e:	e1 ee       	ldi	r30, 0xE1	; 225
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	1b c2       	rjmp	.+1078   	; 0x2a4a <__fp_powsodd>

00002614 <__fp_split3>:
    2614:	57 fd       	sbrc	r21, 7
    2616:	90 58       	subi	r25, 0x80	; 128
    2618:	44 0f       	add	r20, r20
    261a:	55 1f       	adc	r21, r21
    261c:	59 f0       	breq	.+22     	; 0x2634 <__fp_splitA+0x10>
    261e:	5f 3f       	cpi	r21, 0xFF	; 255
    2620:	71 f0       	breq	.+28     	; 0x263e <__fp_splitA+0x1a>
    2622:	47 95       	ror	r20

00002624 <__fp_splitA>:
    2624:	88 0f       	add	r24, r24
    2626:	97 fb       	bst	r25, 7
    2628:	99 1f       	adc	r25, r25
    262a:	61 f0       	breq	.+24     	; 0x2644 <__fp_splitA+0x20>
    262c:	9f 3f       	cpi	r25, 0xFF	; 255
    262e:	79 f0       	breq	.+30     	; 0x264e <__fp_splitA+0x2a>
    2630:	87 95       	ror	r24
    2632:	08 95       	ret
    2634:	12 16       	cp	r1, r18
    2636:	13 06       	cpc	r1, r19
    2638:	14 06       	cpc	r1, r20
    263a:	55 1f       	adc	r21, r21
    263c:	f2 cf       	rjmp	.-28     	; 0x2622 <__fp_split3+0xe>
    263e:	46 95       	lsr	r20
    2640:	f1 df       	rcall	.-30     	; 0x2624 <__fp_splitA>
    2642:	08 c0       	rjmp	.+16     	; 0x2654 <__fp_splitA+0x30>
    2644:	16 16       	cp	r1, r22
    2646:	17 06       	cpc	r1, r23
    2648:	18 06       	cpc	r1, r24
    264a:	99 1f       	adc	r25, r25
    264c:	f1 cf       	rjmp	.-30     	; 0x2630 <__fp_splitA+0xc>
    264e:	86 95       	lsr	r24
    2650:	71 05       	cpc	r23, r1
    2652:	61 05       	cpc	r22, r1
    2654:	08 94       	sec
    2656:	08 95       	ret

00002658 <__fp_trunc>:
    2658:	e5 df       	rcall	.-54     	; 0x2624 <__fp_splitA>
    265a:	a0 f0       	brcs	.+40     	; 0x2684 <__fp_trunc+0x2c>
    265c:	be e7       	ldi	r27, 0x7E	; 126
    265e:	b9 17       	cp	r27, r25
    2660:	88 f4       	brcc	.+34     	; 0x2684 <__fp_trunc+0x2c>
    2662:	bb 27       	eor	r27, r27
    2664:	9f 38       	cpi	r25, 0x8F	; 143
    2666:	60 f4       	brcc	.+24     	; 0x2680 <__fp_trunc+0x28>
    2668:	16 16       	cp	r1, r22
    266a:	b1 1d       	adc	r27, r1
    266c:	67 2f       	mov	r22, r23
    266e:	78 2f       	mov	r23, r24
    2670:	88 27       	eor	r24, r24
    2672:	98 5f       	subi	r25, 0xF8	; 248
    2674:	f7 cf       	rjmp	.-18     	; 0x2664 <__fp_trunc+0xc>
    2676:	86 95       	lsr	r24
    2678:	77 95       	ror	r23
    267a:	67 95       	ror	r22
    267c:	b1 1d       	adc	r27, r1
    267e:	93 95       	inc	r25
    2680:	96 39       	cpi	r25, 0x96	; 150
    2682:	c8 f3       	brcs	.-14     	; 0x2676 <__fp_trunc+0x1e>
    2684:	08 95       	ret

00002686 <__fp_zero>:
    2686:	e8 94       	clt

00002688 <__fp_szero>:
    2688:	bb 27       	eor	r27, r27
    268a:	66 27       	eor	r22, r22
    268c:	77 27       	eor	r23, r23
    268e:	cb 01       	movw	r24, r22
    2690:	97 f9       	bld	r25, 7
    2692:	08 95       	ret

00002694 <__gesf2>:
    2694:	ec de       	rcall	.-552    	; 0x246e <__fp_cmp>
    2696:	08 f4       	brcc	.+2      	; 0x269a <__gesf2+0x6>
    2698:	8f ef       	ldi	r24, 0xFF	; 255
    269a:	08 95       	ret

0000269c <inverse>:
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	9f e3       	ldi	r25, 0x3F	; 63
    26a8:	f9 cd       	rjmp	.-1038   	; 0x229c <__divsf3>

000026aa <log10>:
    26aa:	0a d0       	rcall	.+20     	; 0x26c0 <log>
    26ac:	29 ed       	ldi	r18, 0xD9	; 217
    26ae:	3b e5       	ldi	r19, 0x5B	; 91
    26b0:	4e ed       	ldi	r20, 0xDE	; 222
    26b2:	5e e3       	ldi	r21, 0x3E	; 62
    26b4:	78 c0       	rjmp	.+240    	; 0x27a6 <__mulsf3>
    26b6:	0e f0       	brts	.+2      	; 0x26ba <log10+0x10>
    26b8:	1f cf       	rjmp	.-450    	; 0x24f8 <__fp_mpack>
    26ba:	2c cf       	rjmp	.-424    	; 0x2514 <__fp_nan>
    26bc:	68 94       	set
    26be:	fb ce       	rjmp	.-522    	; 0x24b6 <__fp_inf>

000026c0 <log>:
    26c0:	b1 df       	rcall	.-158    	; 0x2624 <__fp_splitA>
    26c2:	c8 f3       	brcs	.-14     	; 0x26b6 <log10+0xc>
    26c4:	99 23       	and	r25, r25
    26c6:	d1 f3       	breq	.-12     	; 0x26bc <log10+0x12>
    26c8:	c6 f3       	brts	.-16     	; 0x26ba <log10+0x10>
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	1f 93       	push	r17
    26d0:	0f 93       	push	r16
    26d2:	ff 92       	push	r15
    26d4:	c9 2f       	mov	r28, r25
    26d6:	dd 27       	eor	r29, r29
    26d8:	88 23       	and	r24, r24
    26da:	2a f0       	brmi	.+10     	; 0x26e6 <log+0x26>
    26dc:	21 97       	sbiw	r28, 0x01	; 1
    26de:	66 0f       	add	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	88 1f       	adc	r24, r24
    26e4:	da f7       	brpl	.-10     	; 0x26dc <log+0x1c>
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f eb       	ldi	r21, 0xBF	; 191
    26ee:	9f e3       	ldi	r25, 0x3F	; 63
    26f0:	88 39       	cpi	r24, 0x98	; 152
    26f2:	20 f0       	brcs	.+8      	; 0x26fc <log+0x3c>
    26f4:	80 3e       	cpi	r24, 0xE0	; 224
    26f6:	30 f0       	brcs	.+12     	; 0x2704 <log+0x44>
    26f8:	21 96       	adiw	r28, 0x01	; 1
    26fa:	8f 77       	andi	r24, 0x7F	; 127
    26fc:	02 dd       	rcall	.-1532   	; 0x2102 <__addsf3>
    26fe:	ef ef       	ldi	r30, 0xFF	; 255
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	03 c0       	rjmp	.+6      	; 0x270a <log+0x4a>
    2704:	fe dc       	rcall	.-1540   	; 0x2102 <__addsf3>
    2706:	ec e2       	ldi	r30, 0x2C	; 44
    2708:	f1 e0       	ldi	r31, 0x01	; 1
    270a:	07 df       	rcall	.-498    	; 0x251a <__fp_powser>
    270c:	8b 01       	movw	r16, r22
    270e:	be 01       	movw	r22, r28
    2710:	ec 01       	movw	r28, r24
    2712:	fb 2e       	mov	r15, r27
    2714:	6f 57       	subi	r22, 0x7F	; 127
    2716:	71 09       	sbc	r23, r1
    2718:	75 95       	asr	r23
    271a:	77 1f       	adc	r23, r23
    271c:	88 0b       	sbc	r24, r24
    271e:	99 0b       	sbc	r25, r25
    2720:	58 de       	rcall	.-848    	; 0x23d2 <__floatsisf>
    2722:	28 e1       	ldi	r18, 0x18	; 24
    2724:	32 e7       	ldi	r19, 0x72	; 114
    2726:	41 e3       	ldi	r20, 0x31	; 49
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	49 d0       	rcall	.+146    	; 0x27be <__mulsf3x>
    272c:	af 2d       	mov	r26, r15
    272e:	98 01       	movw	r18, r16
    2730:	ae 01       	movw	r20, r28
    2732:	ff 90       	pop	r15
    2734:	0f 91       	pop	r16
    2736:	1f 91       	pop	r17
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	f3 dc       	rcall	.-1562   	; 0x2124 <__addsf3x>
    273e:	48 cf       	rjmp	.-368    	; 0x25d0 <__fp_round>

00002740 <modf>:
    2740:	fa 01       	movw	r30, r20
    2742:	dc 01       	movw	r26, r24
    2744:	aa 0f       	add	r26, r26
    2746:	bb 1f       	adc	r27, r27
    2748:	9b 01       	movw	r18, r22
    274a:	ac 01       	movw	r20, r24
    274c:	bf 57       	subi	r27, 0x7F	; 127
    274e:	28 f4       	brcc	.+10     	; 0x275a <modf+0x1a>
    2750:	22 27       	eor	r18, r18
    2752:	33 27       	eor	r19, r19
    2754:	44 27       	eor	r20, r20
    2756:	50 78       	andi	r21, 0x80	; 128
    2758:	1f c0       	rjmp	.+62     	; 0x2798 <modf+0x58>
    275a:	b7 51       	subi	r27, 0x17	; 23
    275c:	88 f4       	brcc	.+34     	; 0x2780 <modf+0x40>
    275e:	ab 2f       	mov	r26, r27
    2760:	00 24       	eor	r0, r0
    2762:	46 95       	lsr	r20
    2764:	37 95       	ror	r19
    2766:	27 95       	ror	r18
    2768:	01 1c       	adc	r0, r1
    276a:	a3 95       	inc	r26
    276c:	d2 f3       	brmi	.-12     	; 0x2762 <modf+0x22>
    276e:	00 20       	and	r0, r0
    2770:	69 f0       	breq	.+26     	; 0x278c <modf+0x4c>
    2772:	22 0f       	add	r18, r18
    2774:	33 1f       	adc	r19, r19
    2776:	44 1f       	adc	r20, r20
    2778:	b3 95       	inc	r27
    277a:	da f3       	brmi	.-10     	; 0x2772 <modf+0x32>
    277c:	0d d0       	rcall	.+26     	; 0x2798 <modf+0x58>
    277e:	c0 cc       	rjmp	.-1664   	; 0x2100 <__subsf3>
    2780:	61 30       	cpi	r22, 0x01	; 1
    2782:	71 05       	cpc	r23, r1
    2784:	a0 e8       	ldi	r26, 0x80	; 128
    2786:	8a 07       	cpc	r24, r26
    2788:	b9 46       	sbci	r27, 0x69	; 105
    278a:	30 f4       	brcc	.+12     	; 0x2798 <modf+0x58>
    278c:	9b 01       	movw	r18, r22
    278e:	ac 01       	movw	r20, r24
    2790:	66 27       	eor	r22, r22
    2792:	77 27       	eor	r23, r23
    2794:	88 27       	eor	r24, r24
    2796:	90 78       	andi	r25, 0x80	; 128
    2798:	30 96       	adiw	r30, 0x00	; 0
    279a:	21 f0       	breq	.+8      	; 0x27a4 <modf+0x64>
    279c:	20 83       	st	Z, r18
    279e:	31 83       	std	Z+1, r19	; 0x01
    27a0:	42 83       	std	Z+2, r20	; 0x02
    27a2:	53 83       	std	Z+3, r21	; 0x03
    27a4:	08 95       	ret

000027a6 <__mulsf3>:
    27a6:	0b d0       	rcall	.+22     	; 0x27be <__mulsf3x>
    27a8:	13 cf       	rjmp	.-474    	; 0x25d0 <__fp_round>
    27aa:	dc de       	rcall	.-584    	; 0x2564 <__fp_pscA>
    27ac:	28 f0       	brcs	.+10     	; 0x27b8 <__mulsf3+0x12>
    27ae:	e1 de       	rcall	.-574    	; 0x2572 <__fp_pscB>
    27b0:	18 f0       	brcs	.+6      	; 0x27b8 <__mulsf3+0x12>
    27b2:	95 23       	and	r25, r21
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__mulsf3+0x12>
    27b6:	7f ce       	rjmp	.-770    	; 0x24b6 <__fp_inf>
    27b8:	ad ce       	rjmp	.-678    	; 0x2514 <__fp_nan>
    27ba:	11 24       	eor	r1, r1
    27bc:	65 cf       	rjmp	.-310    	; 0x2688 <__fp_szero>

000027be <__mulsf3x>:
    27be:	2a df       	rcall	.-428    	; 0x2614 <__fp_split3>
    27c0:	a0 f3       	brcs	.-24     	; 0x27aa <__mulsf3+0x4>

000027c2 <__mulsf3_pse>:
    27c2:	95 9f       	mul	r25, r21
    27c4:	d1 f3       	breq	.-12     	; 0x27ba <__mulsf3+0x14>
    27c6:	95 0f       	add	r25, r21
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	55 1f       	adc	r21, r21
    27cc:	62 9f       	mul	r22, r18
    27ce:	f0 01       	movw	r30, r0
    27d0:	72 9f       	mul	r23, r18
    27d2:	bb 27       	eor	r27, r27
    27d4:	f0 0d       	add	r31, r0
    27d6:	b1 1d       	adc	r27, r1
    27d8:	63 9f       	mul	r22, r19
    27da:	aa 27       	eor	r26, r26
    27dc:	f0 0d       	add	r31, r0
    27de:	b1 1d       	adc	r27, r1
    27e0:	aa 1f       	adc	r26, r26
    27e2:	64 9f       	mul	r22, r20
    27e4:	66 27       	eor	r22, r22
    27e6:	b0 0d       	add	r27, r0
    27e8:	a1 1d       	adc	r26, r1
    27ea:	66 1f       	adc	r22, r22
    27ec:	82 9f       	mul	r24, r18
    27ee:	22 27       	eor	r18, r18
    27f0:	b0 0d       	add	r27, r0
    27f2:	a1 1d       	adc	r26, r1
    27f4:	62 1f       	adc	r22, r18
    27f6:	73 9f       	mul	r23, r19
    27f8:	b0 0d       	add	r27, r0
    27fa:	a1 1d       	adc	r26, r1
    27fc:	62 1f       	adc	r22, r18
    27fe:	83 9f       	mul	r24, r19
    2800:	a0 0d       	add	r26, r0
    2802:	61 1d       	adc	r22, r1
    2804:	22 1f       	adc	r18, r18
    2806:	74 9f       	mul	r23, r20
    2808:	33 27       	eor	r19, r19
    280a:	a0 0d       	add	r26, r0
    280c:	61 1d       	adc	r22, r1
    280e:	23 1f       	adc	r18, r19
    2810:	84 9f       	mul	r24, r20
    2812:	60 0d       	add	r22, r0
    2814:	21 1d       	adc	r18, r1
    2816:	82 2f       	mov	r24, r18
    2818:	76 2f       	mov	r23, r22
    281a:	6a 2f       	mov	r22, r26
    281c:	11 24       	eor	r1, r1
    281e:	9f 57       	subi	r25, 0x7F	; 127
    2820:	50 40       	sbci	r21, 0x00	; 0
    2822:	8a f0       	brmi	.+34     	; 0x2846 <__mulsf3_pse+0x84>
    2824:	e1 f0       	breq	.+56     	; 0x285e <__mulsf3_pse+0x9c>
    2826:	88 23       	and	r24, r24
    2828:	4a f0       	brmi	.+18     	; 0x283c <__mulsf3_pse+0x7a>
    282a:	ee 0f       	add	r30, r30
    282c:	ff 1f       	adc	r31, r31
    282e:	bb 1f       	adc	r27, r27
    2830:	66 1f       	adc	r22, r22
    2832:	77 1f       	adc	r23, r23
    2834:	88 1f       	adc	r24, r24
    2836:	91 50       	subi	r25, 0x01	; 1
    2838:	50 40       	sbci	r21, 0x00	; 0
    283a:	a9 f7       	brne	.-22     	; 0x2826 <__mulsf3_pse+0x64>
    283c:	9e 3f       	cpi	r25, 0xFE	; 254
    283e:	51 05       	cpc	r21, r1
    2840:	70 f0       	brcs	.+28     	; 0x285e <__mulsf3_pse+0x9c>
    2842:	39 ce       	rjmp	.-910    	; 0x24b6 <__fp_inf>
    2844:	21 cf       	rjmp	.-446    	; 0x2688 <__fp_szero>
    2846:	5f 3f       	cpi	r21, 0xFF	; 255
    2848:	ec f3       	brlt	.-6      	; 0x2844 <__mulsf3_pse+0x82>
    284a:	98 3e       	cpi	r25, 0xE8	; 232
    284c:	dc f3       	brlt	.-10     	; 0x2844 <__mulsf3_pse+0x82>
    284e:	86 95       	lsr	r24
    2850:	77 95       	ror	r23
    2852:	67 95       	ror	r22
    2854:	b7 95       	ror	r27
    2856:	f7 95       	ror	r31
    2858:	e7 95       	ror	r30
    285a:	9f 5f       	subi	r25, 0xFF	; 255
    285c:	c1 f7       	brne	.-16     	; 0x284e <__mulsf3_pse+0x8c>
    285e:	fe 2b       	or	r31, r30
    2860:	88 0f       	add	r24, r24
    2862:	91 1d       	adc	r25, r1
    2864:	96 95       	lsr	r25
    2866:	87 95       	ror	r24
    2868:	97 f9       	bld	r25, 7
    286a:	08 95       	ret

0000286c <pow>:
    286c:	fa 01       	movw	r30, r20
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	30 96       	adiw	r30, 0x00	; 0
    2874:	21 05       	cpc	r18, r1
    2876:	31 05       	cpc	r19, r1
    2878:	99 f1       	breq	.+102    	; 0x28e0 <pow+0x74>
    287a:	61 15       	cp	r22, r1
    287c:	71 05       	cpc	r23, r1
    287e:	61 f4       	brne	.+24     	; 0x2898 <pow+0x2c>
    2880:	80 38       	cpi	r24, 0x80	; 128
    2882:	bf e3       	ldi	r27, 0x3F	; 63
    2884:	9b 07       	cpc	r25, r27
    2886:	49 f1       	breq	.+82     	; 0x28da <pow+0x6e>
    2888:	68 94       	set
    288a:	90 38       	cpi	r25, 0x80	; 128
    288c:	81 05       	cpc	r24, r1
    288e:	61 f0       	breq	.+24     	; 0x28a8 <pow+0x3c>
    2890:	80 38       	cpi	r24, 0x80	; 128
    2892:	bf ef       	ldi	r27, 0xFF	; 255
    2894:	9b 07       	cpc	r25, r27
    2896:	41 f0       	breq	.+16     	; 0x28a8 <pow+0x3c>
    2898:	99 23       	and	r25, r25
    289a:	42 f5       	brpl	.+80     	; 0x28ec <pow+0x80>
    289c:	ff 3f       	cpi	r31, 0xFF	; 255
    289e:	e1 05       	cpc	r30, r1
    28a0:	31 05       	cpc	r19, r1
    28a2:	21 05       	cpc	r18, r1
    28a4:	11 f1       	breq	.+68     	; 0x28ea <pow+0x7e>
    28a6:	e8 94       	clt
    28a8:	08 94       	sec
    28aa:	e7 95       	ror	r30
    28ac:	d9 01       	movw	r26, r18
    28ae:	aa 23       	and	r26, r26
    28b0:	29 f4       	brne	.+10     	; 0x28bc <pow+0x50>
    28b2:	ab 2f       	mov	r26, r27
    28b4:	be 2f       	mov	r27, r30
    28b6:	f8 5f       	subi	r31, 0xF8	; 248
    28b8:	d0 f3       	brcs	.-12     	; 0x28ae <pow+0x42>
    28ba:	10 c0       	rjmp	.+32     	; 0x28dc <pow+0x70>
    28bc:	ff 5f       	subi	r31, 0xFF	; 255
    28be:	70 f4       	brcc	.+28     	; 0x28dc <pow+0x70>
    28c0:	a6 95       	lsr	r26
    28c2:	e0 f7       	brcc	.-8      	; 0x28bc <pow+0x50>
    28c4:	f7 39       	cpi	r31, 0x97	; 151
    28c6:	50 f0       	brcs	.+20     	; 0x28dc <pow+0x70>
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <pow+0x64>
    28ca:	ff 3a       	cpi	r31, 0xAF	; 175
    28cc:	38 f4       	brcc	.+14     	; 0x28dc <pow+0x70>
    28ce:	9f 77       	andi	r25, 0x7F	; 127
    28d0:	9f 93       	push	r25
    28d2:	0c d0       	rcall	.+24     	; 0x28ec <pow+0x80>
    28d4:	0f 90       	pop	r0
    28d6:	07 fc       	sbrc	r0, 7
    28d8:	90 58       	subi	r25, 0x80	; 128
    28da:	08 95       	ret
    28dc:	3e f0       	brts	.+14     	; 0x28ec <pow+0x80>
    28de:	1a ce       	rjmp	.-972    	; 0x2514 <__fp_nan>
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	80 e8       	ldi	r24, 0x80	; 128
    28e6:	9f e3       	ldi	r25, 0x3F	; 63
    28e8:	08 95       	ret
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	9f 77       	andi	r25, 0x7F	; 127
    28ee:	5f 93       	push	r21
    28f0:	4f 93       	push	r20
    28f2:	3f 93       	push	r19
    28f4:	2f 93       	push	r18
    28f6:	e4 de       	rcall	.-568    	; 0x26c0 <log>
    28f8:	2f 91       	pop	r18
    28fa:	3f 91       	pop	r19
    28fc:	4f 91       	pop	r20
    28fe:	5f 91       	pop	r21
    2900:	52 df       	rcall	.-348    	; 0x27a6 <__mulsf3>
    2902:	70 c0       	rjmp	.+224    	; 0x29e4 <exp>

00002904 <round>:
    2904:	8f de       	rcall	.-738    	; 0x2624 <__fp_splitA>
    2906:	e0 f0       	brcs	.+56     	; 0x2940 <round+0x3c>
    2908:	9e 37       	cpi	r25, 0x7E	; 126
    290a:	d8 f0       	brcs	.+54     	; 0x2942 <round+0x3e>
    290c:	96 39       	cpi	r25, 0x96	; 150
    290e:	b8 f4       	brcc	.+46     	; 0x293e <round+0x3a>
    2910:	9e 38       	cpi	r25, 0x8E	; 142
    2912:	48 f4       	brcc	.+18     	; 0x2926 <round+0x22>
    2914:	67 2f       	mov	r22, r23
    2916:	78 2f       	mov	r23, r24
    2918:	88 27       	eor	r24, r24
    291a:	98 5f       	subi	r25, 0xF8	; 248
    291c:	f9 cf       	rjmp	.-14     	; 0x2910 <round+0xc>
    291e:	86 95       	lsr	r24
    2920:	77 95       	ror	r23
    2922:	67 95       	ror	r22
    2924:	93 95       	inc	r25
    2926:	95 39       	cpi	r25, 0x95	; 149
    2928:	d0 f3       	brcs	.-12     	; 0x291e <round+0x1a>
    292a:	b6 2f       	mov	r27, r22
    292c:	b1 70       	andi	r27, 0x01	; 1
    292e:	6b 0f       	add	r22, r27
    2930:	71 1d       	adc	r23, r1
    2932:	81 1d       	adc	r24, r1
    2934:	20 f4       	brcc	.+8      	; 0x293e <round+0x3a>
    2936:	87 95       	ror	r24
    2938:	77 95       	ror	r23
    293a:	67 95       	ror	r22
    293c:	93 95       	inc	r25
    293e:	c1 cd       	rjmp	.-1150   	; 0x24c2 <__fp_mintl>
    2940:	db cd       	rjmp	.-1098   	; 0x24f8 <__fp_mpack>
    2942:	a2 ce       	rjmp	.-700    	; 0x2688 <__fp_szero>

00002944 <sin>:
    2944:	9f 93       	push	r25
    2946:	1d de       	rcall	.-966    	; 0x2582 <__fp_rempio2>
    2948:	0f 90       	pop	r0
    294a:	07 fc       	sbrc	r0, 7
    294c:	ee 5f       	subi	r30, 0xFE	; 254
    294e:	51 ce       	rjmp	.-862    	; 0x25f2 <__fp_sinus>
    2950:	11 f4       	brne	.+4      	; 0x2956 <sin+0x12>
    2952:	0e f4       	brtc	.+2      	; 0x2956 <sin+0x12>
    2954:	df cd       	rjmp	.-1090   	; 0x2514 <__fp_nan>
    2956:	d0 cd       	rjmp	.-1120   	; 0x24f8 <__fp_mpack>

00002958 <sqrt>:
    2958:	65 de       	rcall	.-822    	; 0x2624 <__fp_splitA>
    295a:	d0 f3       	brcs	.-12     	; 0x2950 <sin+0xc>
    295c:	99 23       	and	r25, r25
    295e:	d9 f3       	breq	.-10     	; 0x2956 <sin+0x12>
    2960:	ce f3       	brts	.-14     	; 0x2954 <sin+0x10>
    2962:	9f 57       	subi	r25, 0x7F	; 127
    2964:	55 0b       	sbc	r21, r21
    2966:	87 ff       	sbrs	r24, 7
    2968:	69 d0       	rcall	.+210    	; 0x2a3c <__fp_norm2>
    296a:	00 24       	eor	r0, r0
    296c:	a0 e6       	ldi	r26, 0x60	; 96
    296e:	40 ea       	ldi	r20, 0xA0	; 160
    2970:	90 01       	movw	r18, r0
    2972:	80 58       	subi	r24, 0x80	; 128
    2974:	56 95       	lsr	r21
    2976:	97 95       	ror	r25
    2978:	28 f4       	brcc	.+10     	; 0x2984 <sqrt+0x2c>
    297a:	80 5c       	subi	r24, 0xC0	; 192
    297c:	66 0f       	add	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	88 1f       	adc	r24, r24
    2982:	20 f0       	brcs	.+8      	; 0x298c <sqrt+0x34>
    2984:	26 17       	cp	r18, r22
    2986:	37 07       	cpc	r19, r23
    2988:	48 07       	cpc	r20, r24
    298a:	30 f4       	brcc	.+12     	; 0x2998 <sqrt+0x40>
    298c:	62 1b       	sub	r22, r18
    298e:	73 0b       	sbc	r23, r19
    2990:	84 0b       	sbc	r24, r20
    2992:	20 29       	or	r18, r0
    2994:	31 29       	or	r19, r1
    2996:	4a 2b       	or	r20, r26
    2998:	a6 95       	lsr	r26
    299a:	17 94       	ror	r1
    299c:	07 94       	ror	r0
    299e:	20 25       	eor	r18, r0
    29a0:	31 25       	eor	r19, r1
    29a2:	4a 27       	eor	r20, r26
    29a4:	58 f7       	brcc	.-42     	; 0x297c <sqrt+0x24>
    29a6:	66 0f       	add	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	20 f0       	brcs	.+8      	; 0x29b6 <sqrt+0x5e>
    29ae:	26 17       	cp	r18, r22
    29b0:	37 07       	cpc	r19, r23
    29b2:	48 07       	cpc	r20, r24
    29b4:	30 f4       	brcc	.+12     	; 0x29c2 <sqrt+0x6a>
    29b6:	62 0b       	sbc	r22, r18
    29b8:	73 0b       	sbc	r23, r19
    29ba:	84 0b       	sbc	r24, r20
    29bc:	20 0d       	add	r18, r0
    29be:	31 1d       	adc	r19, r1
    29c0:	41 1d       	adc	r20, r1
    29c2:	a0 95       	com	r26
    29c4:	81 f7       	brne	.-32     	; 0x29a6 <sqrt+0x4e>
    29c6:	b9 01       	movw	r22, r18
    29c8:	84 2f       	mov	r24, r20
    29ca:	91 58       	subi	r25, 0x81	; 129
    29cc:	88 0f       	add	r24, r24
    29ce:	96 95       	lsr	r25
    29d0:	87 95       	ror	r24
    29d2:	08 95       	ret

000029d4 <square>:
    29d4:	9b 01       	movw	r18, r22
    29d6:	ac 01       	movw	r20, r24
    29d8:	e6 ce       	rjmp	.-564    	; 0x27a6 <__mulsf3>
    29da:	19 f4       	brne	.+6      	; 0x29e2 <square+0xe>
    29dc:	0e f0       	brts	.+2      	; 0x29e0 <square+0xc>
    29de:	6b cd       	rjmp	.-1322   	; 0x24b6 <__fp_inf>
    29e0:	52 ce       	rjmp	.-860    	; 0x2686 <__fp_zero>
    29e2:	98 cd       	rjmp	.-1232   	; 0x2514 <__fp_nan>

000029e4 <exp>:
    29e4:	1f de       	rcall	.-962    	; 0x2624 <__fp_splitA>
    29e6:	c8 f3       	brcs	.-14     	; 0x29da <square+0x6>
    29e8:	96 38       	cpi	r25, 0x86	; 134
    29ea:	c0 f7       	brcc	.-16     	; 0x29dc <square+0x8>
    29ec:	07 f8       	bld	r0, 7
    29ee:	0f 92       	push	r0
    29f0:	e8 94       	clt
    29f2:	2b e3       	ldi	r18, 0x3B	; 59
    29f4:	3a ea       	ldi	r19, 0xAA	; 170
    29f6:	48 eb       	ldi	r20, 0xB8	; 184
    29f8:	5f e7       	ldi	r21, 0x7F	; 127
    29fa:	e3 de       	rcall	.-570    	; 0x27c2 <__mulsf3_pse>
    29fc:	0f 92       	push	r0
    29fe:	0f 92       	push	r0
    2a00:	0f 92       	push	r0
    2a02:	4d b7       	in	r20, 0x3d	; 61
    2a04:	5e b7       	in	r21, 0x3e	; 62
    2a06:	0f 92       	push	r0
    2a08:	9b de       	rcall	.-714    	; 0x2740 <modf>
    2a0a:	e9 e5       	ldi	r30, 0x59	; 89
    2a0c:	f1 e0       	ldi	r31, 0x01	; 1
    2a0e:	85 dd       	rcall	.-1270   	; 0x251a <__fp_powser>
    2a10:	4f 91       	pop	r20
    2a12:	5f 91       	pop	r21
    2a14:	ef 91       	pop	r30
    2a16:	ff 91       	pop	r31
    2a18:	e5 95       	asr	r30
    2a1a:	ee 1f       	adc	r30, r30
    2a1c:	ff 1f       	adc	r31, r31
    2a1e:	49 f0       	breq	.+18     	; 0x2a32 <exp+0x4e>
    2a20:	fe 57       	subi	r31, 0x7E	; 126
    2a22:	e0 68       	ori	r30, 0x80	; 128
    2a24:	44 27       	eor	r20, r20
    2a26:	ee 0f       	add	r30, r30
    2a28:	44 1f       	adc	r20, r20
    2a2a:	fa 95       	dec	r31
    2a2c:	e1 f7       	brne	.-8      	; 0x2a26 <exp+0x42>
    2a2e:	41 95       	neg	r20
    2a30:	55 0b       	sbc	r21, r21
    2a32:	1e d0       	rcall	.+60     	; 0x2a70 <ldexp>
    2a34:	0f 90       	pop	r0
    2a36:	07 fe       	sbrs	r0, 7
    2a38:	31 ce       	rjmp	.-926    	; 0x269c <inverse>
    2a3a:	08 95       	ret

00002a3c <__fp_norm2>:
    2a3c:	91 50       	subi	r25, 0x01	; 1
    2a3e:	50 40       	sbci	r21, 0x00	; 0
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	d2 f7       	brpl	.-12     	; 0x2a3c <__fp_norm2>
    2a48:	08 95       	ret

00002a4a <__fp_powsodd>:
    2a4a:	9f 93       	push	r25
    2a4c:	8f 93       	push	r24
    2a4e:	7f 93       	push	r23
    2a50:	6f 93       	push	r22
    2a52:	ff 93       	push	r31
    2a54:	ef 93       	push	r30
    2a56:	9b 01       	movw	r18, r22
    2a58:	ac 01       	movw	r20, r24
    2a5a:	a5 de       	rcall	.-694    	; 0x27a6 <__mulsf3>
    2a5c:	ef 91       	pop	r30
    2a5e:	ff 91       	pop	r31
    2a60:	5c dd       	rcall	.-1352   	; 0x251a <__fp_powser>
    2a62:	2f 91       	pop	r18
    2a64:	3f 91       	pop	r19
    2a66:	4f 91       	pop	r20
    2a68:	5f 91       	pop	r21
    2a6a:	9d ce       	rjmp	.-710    	; 0x27a6 <__mulsf3>
    2a6c:	24 cd       	rjmp	.-1464   	; 0x24b6 <__fp_inf>
    2a6e:	44 cd       	rjmp	.-1400   	; 0x24f8 <__fp_mpack>

00002a70 <ldexp>:
    2a70:	d9 dd       	rcall	.-1102   	; 0x2624 <__fp_splitA>
    2a72:	e8 f3       	brcs	.-6      	; 0x2a6e <__fp_powsodd+0x24>
    2a74:	99 23       	and	r25, r25
    2a76:	d9 f3       	breq	.-10     	; 0x2a6e <__fp_powsodd+0x24>
    2a78:	94 0f       	add	r25, r20
    2a7a:	51 1d       	adc	r21, r1
    2a7c:	bb f3       	brvs	.-18     	; 0x2a6c <__fp_powsodd+0x22>
    2a7e:	91 50       	subi	r25, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	94 f0       	brlt	.+36     	; 0x2aa8 <ldexp+0x38>
    2a84:	59 f0       	breq	.+22     	; 0x2a9c <ldexp+0x2c>
    2a86:	88 23       	and	r24, r24
    2a88:	32 f0       	brmi	.+12     	; 0x2a96 <ldexp+0x26>
    2a8a:	66 0f       	add	r22, r22
    2a8c:	77 1f       	adc	r23, r23
    2a8e:	88 1f       	adc	r24, r24
    2a90:	91 50       	subi	r25, 0x01	; 1
    2a92:	50 40       	sbci	r21, 0x00	; 0
    2a94:	c1 f7       	brne	.-16     	; 0x2a86 <ldexp+0x16>
    2a96:	9e 3f       	cpi	r25, 0xFE	; 254
    2a98:	51 05       	cpc	r21, r1
    2a9a:	44 f7       	brge	.-48     	; 0x2a6c <__fp_powsodd+0x22>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	91 1d       	adc	r25, r1
    2aa0:	96 95       	lsr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	97 f9       	bld	r25, 7
    2aa6:	08 95       	ret
    2aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    2aaa:	ac f0       	brlt	.+42     	; 0x2ad6 <ldexp+0x66>
    2aac:	98 3e       	cpi	r25, 0xE8	; 232
    2aae:	9c f0       	brlt	.+38     	; 0x2ad6 <ldexp+0x66>
    2ab0:	bb 27       	eor	r27, r27
    2ab2:	86 95       	lsr	r24
    2ab4:	77 95       	ror	r23
    2ab6:	67 95       	ror	r22
    2ab8:	b7 95       	ror	r27
    2aba:	08 f4       	brcc	.+2      	; 0x2abe <ldexp+0x4e>
    2abc:	b1 60       	ori	r27, 0x01	; 1
    2abe:	93 95       	inc	r25
    2ac0:	c1 f7       	brne	.-16     	; 0x2ab2 <ldexp+0x42>
    2ac2:	bb 0f       	add	r27, r27
    2ac4:	58 f7       	brcc	.-42     	; 0x2a9c <ldexp+0x2c>
    2ac6:	11 f4       	brne	.+4      	; 0x2acc <ldexp+0x5c>
    2ac8:	60 ff       	sbrs	r22, 0
    2aca:	e8 cf       	rjmp	.-48     	; 0x2a9c <ldexp+0x2c>
    2acc:	6f 5f       	subi	r22, 0xFF	; 255
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	e3 cf       	rjmp	.-58     	; 0x2a9c <ldexp+0x2c>
    2ad6:	d8 cd       	rjmp	.-1104   	; 0x2688 <__fp_szero>

00002ad8 <__tablejump2__>:
    2ad8:	ee 0f       	add	r30, r30
    2ada:	ff 1f       	adc	r31, r31

00002adc <__tablejump__>:
    2adc:	05 90       	lpm	r0, Z+
    2ade:	f4 91       	lpm	r31, Z
    2ae0:	e0 2d       	mov	r30, r0
    2ae2:	09 94       	ijmp

00002ae4 <malloc>:
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	82 30       	cpi	r24, 0x02	; 2
    2aea:	91 05       	cpc	r25, r1
    2aec:	10 f4       	brcc	.+4      	; 0x2af2 <malloc+0xe>
    2aee:	82 e0       	ldi	r24, 0x02	; 2
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	e0 91 81 04 	lds	r30, 0x0481
    2af6:	f0 91 82 04 	lds	r31, 0x0482
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	30 97       	sbiw	r30, 0x00	; 0
    2b04:	39 f1       	breq	.+78     	; 0x2b54 <malloc+0x70>
    2b06:	40 81       	ld	r20, Z
    2b08:	51 81       	ldd	r21, Z+1	; 0x01
    2b0a:	48 17       	cp	r20, r24
    2b0c:	59 07       	cpc	r21, r25
    2b0e:	b8 f0       	brcs	.+46     	; 0x2b3e <malloc+0x5a>
    2b10:	48 17       	cp	r20, r24
    2b12:	59 07       	cpc	r21, r25
    2b14:	71 f4       	brne	.+28     	; 0x2b32 <malloc+0x4e>
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	10 97       	sbiw	r26, 0x00	; 0
    2b1c:	29 f0       	breq	.+10     	; 0x2b28 <malloc+0x44>
    2b1e:	13 96       	adiw	r26, 0x03	; 3
    2b20:	9c 93       	st	X, r25
    2b22:	8e 93       	st	-X, r24
    2b24:	12 97       	sbiw	r26, 0x02	; 2
    2b26:	2c c0       	rjmp	.+88     	; 0x2b80 <malloc+0x9c>
    2b28:	90 93 82 04 	sts	0x0482, r25
    2b2c:	80 93 81 04 	sts	0x0481, r24
    2b30:	27 c0       	rjmp	.+78     	; 0x2b80 <malloc+0x9c>
    2b32:	21 15       	cp	r18, r1
    2b34:	31 05       	cpc	r19, r1
    2b36:	31 f0       	breq	.+12     	; 0x2b44 <malloc+0x60>
    2b38:	42 17       	cp	r20, r18
    2b3a:	53 07       	cpc	r21, r19
    2b3c:	18 f0       	brcs	.+6      	; 0x2b44 <malloc+0x60>
    2b3e:	a9 01       	movw	r20, r18
    2b40:	db 01       	movw	r26, r22
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <malloc+0x62>
    2b44:	ef 01       	movw	r28, r30
    2b46:	9a 01       	movw	r18, r20
    2b48:	bd 01       	movw	r22, r26
    2b4a:	df 01       	movw	r26, r30
    2b4c:	02 80       	ldd	r0, Z+2	; 0x02
    2b4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2b50:	e0 2d       	mov	r30, r0
    2b52:	d7 cf       	rjmp	.-82     	; 0x2b02 <malloc+0x1e>
    2b54:	21 15       	cp	r18, r1
    2b56:	31 05       	cpc	r19, r1
    2b58:	f9 f0       	breq	.+62     	; 0x2b98 <malloc+0xb4>
    2b5a:	28 1b       	sub	r18, r24
    2b5c:	39 0b       	sbc	r19, r25
    2b5e:	24 30       	cpi	r18, 0x04	; 4
    2b60:	31 05       	cpc	r19, r1
    2b62:	80 f4       	brcc	.+32     	; 0x2b84 <malloc+0xa0>
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	9b 81       	ldd	r25, Y+3	; 0x03
    2b68:	61 15       	cp	r22, r1
    2b6a:	71 05       	cpc	r23, r1
    2b6c:	21 f0       	breq	.+8      	; 0x2b76 <malloc+0x92>
    2b6e:	fb 01       	movw	r30, r22
    2b70:	93 83       	std	Z+3, r25	; 0x03
    2b72:	82 83       	std	Z+2, r24	; 0x02
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <malloc+0x9a>
    2b76:	90 93 82 04 	sts	0x0482, r25
    2b7a:	80 93 81 04 	sts	0x0481, r24
    2b7e:	fe 01       	movw	r30, r28
    2b80:	32 96       	adiw	r30, 0x02	; 2
    2b82:	44 c0       	rjmp	.+136    	; 0x2c0c <malloc+0x128>
    2b84:	fe 01       	movw	r30, r28
    2b86:	e2 0f       	add	r30, r18
    2b88:	f3 1f       	adc	r31, r19
    2b8a:	81 93       	st	Z+, r24
    2b8c:	91 93       	st	Z+, r25
    2b8e:	22 50       	subi	r18, 0x02	; 2
    2b90:	31 09       	sbc	r19, r1
    2b92:	39 83       	std	Y+1, r19	; 0x01
    2b94:	28 83       	st	Y, r18
    2b96:	3a c0       	rjmp	.+116    	; 0x2c0c <malloc+0x128>
    2b98:	20 91 7f 04 	lds	r18, 0x047F
    2b9c:	30 91 80 04 	lds	r19, 0x0480
    2ba0:	23 2b       	or	r18, r19
    2ba2:	41 f4       	brne	.+16     	; 0x2bb4 <malloc+0xd0>
    2ba4:	20 91 08 01 	lds	r18, 0x0108
    2ba8:	30 91 09 01 	lds	r19, 0x0109
    2bac:	30 93 80 04 	sts	0x0480, r19
    2bb0:	20 93 7f 04 	sts	0x047F, r18
    2bb4:	20 91 06 01 	lds	r18, 0x0106
    2bb8:	30 91 07 01 	lds	r19, 0x0107
    2bbc:	21 15       	cp	r18, r1
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	41 f4       	brne	.+16     	; 0x2bd2 <malloc+0xee>
    2bc2:	2d b7       	in	r18, 0x3d	; 61
    2bc4:	3e b7       	in	r19, 0x3e	; 62
    2bc6:	40 91 0a 01 	lds	r20, 0x010A
    2bca:	50 91 0b 01 	lds	r21, 0x010B
    2bce:	24 1b       	sub	r18, r20
    2bd0:	35 0b       	sbc	r19, r21
    2bd2:	e0 91 7f 04 	lds	r30, 0x047F
    2bd6:	f0 91 80 04 	lds	r31, 0x0480
    2bda:	e2 17       	cp	r30, r18
    2bdc:	f3 07       	cpc	r31, r19
    2bde:	a0 f4       	brcc	.+40     	; 0x2c08 <malloc+0x124>
    2be0:	2e 1b       	sub	r18, r30
    2be2:	3f 0b       	sbc	r19, r31
    2be4:	28 17       	cp	r18, r24
    2be6:	39 07       	cpc	r19, r25
    2be8:	78 f0       	brcs	.+30     	; 0x2c08 <malloc+0x124>
    2bea:	ac 01       	movw	r20, r24
    2bec:	4e 5f       	subi	r20, 0xFE	; 254
    2bee:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf0:	24 17       	cp	r18, r20
    2bf2:	35 07       	cpc	r19, r21
    2bf4:	48 f0       	brcs	.+18     	; 0x2c08 <malloc+0x124>
    2bf6:	4e 0f       	add	r20, r30
    2bf8:	5f 1f       	adc	r21, r31
    2bfa:	50 93 80 04 	sts	0x0480, r21
    2bfe:	40 93 7f 04 	sts	0x047F, r20
    2c02:	81 93       	st	Z+, r24
    2c04:	91 93       	st	Z+, r25
    2c06:	02 c0       	rjmp	.+4      	; 0x2c0c <malloc+0x128>
    2c08:	e0 e0       	ldi	r30, 0x00	; 0
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	cf 01       	movw	r24, r30
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	08 95       	ret

00002c14 <free>:
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <free+0xa>
    2c1c:	87 c0       	rjmp	.+270    	; 0x2d2c <free+0x118>
    2c1e:	fc 01       	movw	r30, r24
    2c20:	32 97       	sbiw	r30, 0x02	; 2
    2c22:	13 82       	std	Z+3, r1	; 0x03
    2c24:	12 82       	std	Z+2, r1	; 0x02
    2c26:	c0 91 81 04 	lds	r28, 0x0481
    2c2a:	d0 91 82 04 	lds	r29, 0x0482
    2c2e:	20 97       	sbiw	r28, 0x00	; 0
    2c30:	81 f4       	brne	.+32     	; 0x2c52 <free+0x3e>
    2c32:	20 81       	ld	r18, Z
    2c34:	31 81       	ldd	r19, Z+1	; 0x01
    2c36:	28 0f       	add	r18, r24
    2c38:	39 1f       	adc	r19, r25
    2c3a:	80 91 7f 04 	lds	r24, 0x047F
    2c3e:	90 91 80 04 	lds	r25, 0x0480
    2c42:	82 17       	cp	r24, r18
    2c44:	93 07       	cpc	r25, r19
    2c46:	79 f5       	brne	.+94     	; 0x2ca6 <free+0x92>
    2c48:	f0 93 80 04 	sts	0x0480, r31
    2c4c:	e0 93 7f 04 	sts	0x047F, r30
    2c50:	6d c0       	rjmp	.+218    	; 0x2d2c <free+0x118>
    2c52:	de 01       	movw	r26, r28
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	ae 17       	cp	r26, r30
    2c5a:	bf 07       	cpc	r27, r31
    2c5c:	50 f4       	brcc	.+20     	; 0x2c72 <free+0x5e>
    2c5e:	12 96       	adiw	r26, 0x02	; 2
    2c60:	4d 91       	ld	r20, X+
    2c62:	5c 91       	ld	r21, X
    2c64:	13 97       	sbiw	r26, 0x03	; 3
    2c66:	9d 01       	movw	r18, r26
    2c68:	41 15       	cp	r20, r1
    2c6a:	51 05       	cpc	r21, r1
    2c6c:	09 f1       	breq	.+66     	; 0x2cb0 <free+0x9c>
    2c6e:	da 01       	movw	r26, r20
    2c70:	f3 cf       	rjmp	.-26     	; 0x2c58 <free+0x44>
    2c72:	b3 83       	std	Z+3, r27	; 0x03
    2c74:	a2 83       	std	Z+2, r26	; 0x02
    2c76:	40 81       	ld	r20, Z
    2c78:	51 81       	ldd	r21, Z+1	; 0x01
    2c7a:	84 0f       	add	r24, r20
    2c7c:	95 1f       	adc	r25, r21
    2c7e:	8a 17       	cp	r24, r26
    2c80:	9b 07       	cpc	r25, r27
    2c82:	71 f4       	brne	.+28     	; 0x2ca0 <free+0x8c>
    2c84:	8d 91       	ld	r24, X+
    2c86:	9c 91       	ld	r25, X
    2c88:	11 97       	sbiw	r26, 0x01	; 1
    2c8a:	84 0f       	add	r24, r20
    2c8c:	95 1f       	adc	r25, r21
    2c8e:	02 96       	adiw	r24, 0x02	; 2
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
    2c94:	12 96       	adiw	r26, 0x02	; 2
    2c96:	8d 91       	ld	r24, X+
    2c98:	9c 91       	ld	r25, X
    2c9a:	13 97       	sbiw	r26, 0x03	; 3
    2c9c:	93 83       	std	Z+3, r25	; 0x03
    2c9e:	82 83       	std	Z+2, r24	; 0x02
    2ca0:	21 15       	cp	r18, r1
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	29 f4       	brne	.+10     	; 0x2cb0 <free+0x9c>
    2ca6:	f0 93 82 04 	sts	0x0482, r31
    2caa:	e0 93 81 04 	sts	0x0481, r30
    2cae:	3e c0       	rjmp	.+124    	; 0x2d2c <free+0x118>
    2cb0:	d9 01       	movw	r26, r18
    2cb2:	13 96       	adiw	r26, 0x03	; 3
    2cb4:	fc 93       	st	X, r31
    2cb6:	ee 93       	st	-X, r30
    2cb8:	12 97       	sbiw	r26, 0x02	; 2
    2cba:	4d 91       	ld	r20, X+
    2cbc:	5d 91       	ld	r21, X+
    2cbe:	a4 0f       	add	r26, r20
    2cc0:	b5 1f       	adc	r27, r21
    2cc2:	ea 17       	cp	r30, r26
    2cc4:	fb 07       	cpc	r31, r27
    2cc6:	79 f4       	brne	.+30     	; 0x2ce6 <free+0xd2>
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	84 0f       	add	r24, r20
    2cce:	95 1f       	adc	r25, r21
    2cd0:	02 96       	adiw	r24, 0x02	; 2
    2cd2:	d9 01       	movw	r26, r18
    2cd4:	11 96       	adiw	r26, 0x01	; 1
    2cd6:	9c 93       	st	X, r25
    2cd8:	8e 93       	st	-X, r24
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	13 96       	adiw	r26, 0x03	; 3
    2ce0:	9c 93       	st	X, r25
    2ce2:	8e 93       	st	-X, r24
    2ce4:	12 97       	sbiw	r26, 0x02	; 2
    2ce6:	e0 e0       	ldi	r30, 0x00	; 0
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	19 f0       	breq	.+6      	; 0x2cf8 <free+0xe4>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ec 01       	movw	r28, r24
    2cf6:	f9 cf       	rjmp	.-14     	; 0x2cea <free+0xd6>
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	02 96       	adiw	r24, 0x02	; 2
    2cfc:	28 81       	ld	r18, Y
    2cfe:	39 81       	ldd	r19, Y+1	; 0x01
    2d00:	82 0f       	add	r24, r18
    2d02:	93 1f       	adc	r25, r19
    2d04:	20 91 7f 04 	lds	r18, 0x047F
    2d08:	30 91 80 04 	lds	r19, 0x0480
    2d0c:	28 17       	cp	r18, r24
    2d0e:	39 07       	cpc	r19, r25
    2d10:	69 f4       	brne	.+26     	; 0x2d2c <free+0x118>
    2d12:	30 97       	sbiw	r30, 0x00	; 0
    2d14:	29 f4       	brne	.+10     	; 0x2d20 <free+0x10c>
    2d16:	10 92 82 04 	sts	0x0482, r1
    2d1a:	10 92 81 04 	sts	0x0481, r1
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <free+0x110>
    2d20:	13 82       	std	Z+3, r1	; 0x03
    2d22:	12 82       	std	Z+2, r1	; 0x02
    2d24:	d0 93 80 04 	sts	0x0480, r29
    2d28:	c0 93 7f 04 	sts	0x047F, r28
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <strtod>:
    2d32:	4f 92       	push	r4
    2d34:	5f 92       	push	r5
    2d36:	6f 92       	push	r6
    2d38:	7f 92       	push	r7
    2d3a:	8f 92       	push	r8
    2d3c:	9f 92       	push	r9
    2d3e:	af 92       	push	r10
    2d40:	bf 92       	push	r11
    2d42:	cf 92       	push	r12
    2d44:	df 92       	push	r13
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	8b 01       	movw	r16, r22
    2d54:	61 15       	cp	r22, r1
    2d56:	71 05       	cpc	r23, r1
    2d58:	21 f0       	breq	.+8      	; 0x2d62 <strtod+0x30>
    2d5a:	db 01       	movw	r26, r22
    2d5c:	8c 93       	st	X, r24
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	9c 93       	st	X, r25
    2d62:	ec 01       	movw	r28, r24
    2d64:	5e 01       	movw	r10, r28
    2d66:	bf ef       	ldi	r27, 0xFF	; 255
    2d68:	ab 1a       	sub	r10, r27
    2d6a:	bb 0a       	sbc	r11, r27
    2d6c:	75 01       	movw	r14, r10
    2d6e:	c8 80       	ld	r12, Y
    2d70:	8c 2d       	mov	r24, r12
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 16 18 	call	0x302c	; 0x302c <isspace>
    2d78:	89 2b       	or	r24, r25
    2d7a:	11 f0       	breq	.+4      	; 0x2d80 <strtod+0x4e>
    2d7c:	e5 01       	movw	r28, r10
    2d7e:	f2 cf       	rjmp	.-28     	; 0x2d64 <strtod+0x32>
    2d80:	ed e2       	ldi	r30, 0x2D	; 45
    2d82:	ce 12       	cpse	r12, r30
    2d84:	08 c0       	rjmp	.+16     	; 0x2d96 <strtod+0x64>
    2d86:	7e 01       	movw	r14, r28
    2d88:	f2 e0       	ldi	r31, 0x02	; 2
    2d8a:	ef 0e       	add	r14, r31
    2d8c:	f1 1c       	adc	r15, r1
    2d8e:	c9 80       	ldd	r12, Y+1	; 0x01
    2d90:	dd 24       	eor	r13, r13
    2d92:	d3 94       	inc	r13
    2d94:	09 c0       	rjmp	.+18     	; 0x2da8 <strtod+0x76>
    2d96:	2b e2       	ldi	r18, 0x2B	; 43
    2d98:	c2 12       	cpse	r12, r18
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <strtod+0x74>
    2d9c:	7e 01       	movw	r14, r28
    2d9e:	42 e0       	ldi	r20, 0x02	; 2
    2da0:	e4 0e       	add	r14, r20
    2da2:	f1 1c       	adc	r15, r1
    2da4:	c9 80       	ldd	r12, Y+1	; 0x01
    2da6:	d1 2c       	mov	r13, r1
    2da8:	e7 01       	movw	r28, r14
    2daa:	21 97       	sbiw	r28, 0x01	; 1
    2dac:	43 e0       	ldi	r20, 0x03	; 3
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	69 e8       	ldi	r22, 0x89	; 137
    2db2:	71 e0       	ldi	r23, 0x01	; 1
    2db4:	ce 01       	movw	r24, r28
    2db6:	0e 94 1e 18 	call	0x303c	; 0x303c <strncasecmp_P>
    2dba:	89 2b       	or	r24, r25
    2dbc:	d1 f4       	brne	.+52     	; 0x2df2 <strtod+0xc0>
    2dbe:	e7 01       	movw	r28, r14
    2dc0:	22 96       	adiw	r28, 0x02	; 2
    2dc2:	45 e0       	ldi	r20, 0x05	; 5
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	64 e8       	ldi	r22, 0x84	; 132
    2dc8:	71 e0       	ldi	r23, 0x01	; 1
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0e 94 1e 18 	call	0x303c	; 0x303c <strncasecmp_P>
    2dd0:	89 2b       	or	r24, r25
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <strtod+0xa6>
    2dd4:	e7 01       	movw	r28, r14
    2dd6:	27 96       	adiw	r28, 0x07	; 7
    2dd8:	01 15       	cp	r16, r1
    2dda:	11 05       	cpc	r17, r1
    2ddc:	19 f0       	breq	.+6      	; 0x2de4 <strtod+0xb2>
    2dde:	d8 01       	movw	r26, r16
    2de0:	cd 93       	st	X+, r28
    2de2:	dc 93       	st	X, r29
    2de4:	d1 10       	cpse	r13, r1
    2de6:	08 c1       	rjmp	.+528    	; 0x2ff8 <strtod+0x2c6>
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	80 e8       	ldi	r24, 0x80	; 128
    2dee:	9f e7       	ldi	r25, 0x7F	; 127
    2df0:	0c c1       	rjmp	.+536    	; 0x300a <strtod+0x2d8>
    2df2:	43 e0       	ldi	r20, 0x03	; 3
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	61 e8       	ldi	r22, 0x81	; 129
    2df8:	71 e0       	ldi	r23, 0x01	; 1
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0e 94 1e 18 	call	0x303c	; 0x303c <strncasecmp_P>
    2e00:	89 2b       	or	r24, r25
    2e02:	59 f4       	brne	.+22     	; 0x2e1a <strtod+0xe8>
    2e04:	01 15       	cp	r16, r1
    2e06:	11 05       	cpc	r17, r1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <strtod+0xda>
    2e0a:	fb c0       	rjmp	.+502    	; 0x3002 <strtod+0x2d0>
    2e0c:	b2 e0       	ldi	r27, 0x02	; 2
    2e0e:	eb 0e       	add	r14, r27
    2e10:	f1 1c       	adc	r15, r1
    2e12:	f8 01       	movw	r30, r16
    2e14:	f1 82       	std	Z+1, r15	; 0x01
    2e16:	e0 82       	st	Z, r14
    2e18:	f4 c0       	rjmp	.+488    	; 0x3002 <strtod+0x2d0>
    2e1a:	f7 01       	movw	r30, r14
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	cb 01       	movw	r24, r22
    2e22:	c0 e0       	ldi	r28, 0x00	; 0
    2e24:	d0 e0       	ldi	r29, 0x00	; 0
    2e26:	7f 01       	movw	r14, r30
    2e28:	a0 ed       	ldi	r26, 0xD0	; 208
    2e2a:	aa 2e       	mov	r10, r26
    2e2c:	ac 0c       	add	r10, r12
    2e2e:	29 e0       	ldi	r18, 0x09	; 9
    2e30:	2a 15       	cp	r18, r10
    2e32:	30 f1       	brcs	.+76     	; 0x2e80 <strtod+0x14e>
    2e34:	4d 2d       	mov	r20, r13
    2e36:	42 60       	ori	r20, 0x02	; 2
    2e38:	b4 2e       	mov	r11, r20
    2e3a:	2d 2d       	mov	r18, r13
    2e3c:	28 70       	andi	r18, 0x08	; 8
    2e3e:	d2 fe       	sbrs	r13, 2
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <strtod+0x118>
    2e42:	21 11       	cpse	r18, r1
    2e44:	25 c0       	rjmp	.+74     	; 0x2e90 <strtod+0x15e>
    2e46:	21 96       	adiw	r28, 0x01	; 1
    2e48:	23 c0       	rjmp	.+70     	; 0x2e90 <strtod+0x15e>
    2e4a:	21 11       	cpse	r18, r1
    2e4c:	21 97       	sbiw	r28, 0x01	; 1
    2e4e:	a5 e0       	ldi	r26, 0x05	; 5
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	9b 01       	movw	r18, r22
    2e54:	ac 01       	movw	r20, r24
    2e56:	0e 94 6d 1b 	call	0x36da	; 0x36da <__muluhisi3>
    2e5a:	66 0f       	add	r22, r22
    2e5c:	77 1f       	adc	r23, r23
    2e5e:	88 1f       	adc	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	6a 0d       	add	r22, r10
    2e64:	71 1d       	adc	r23, r1
    2e66:	81 1d       	adc	r24, r1
    2e68:	91 1d       	adc	r25, r1
    2e6a:	68 39       	cpi	r22, 0x98	; 152
    2e6c:	a9 e9       	ldi	r26, 0x99	; 153
    2e6e:	7a 07       	cpc	r23, r26
    2e70:	8a 07       	cpc	r24, r26
    2e72:	a9 e1       	ldi	r26, 0x19	; 25
    2e74:	9a 07       	cpc	r25, r26
    2e76:	60 f0       	brcs	.+24     	; 0x2e90 <strtod+0x15e>
    2e78:	bd 2d       	mov	r27, r13
    2e7a:	b6 60       	ori	r27, 0x06	; 6
    2e7c:	bb 2e       	mov	r11, r27
    2e7e:	08 c0       	rjmp	.+16     	; 0x2e90 <strtod+0x15e>
    2e80:	2e ef       	ldi	r18, 0xFE	; 254
    2e82:	a2 12       	cpse	r10, r18
    2e84:	0a c0       	rjmp	.+20     	; 0x2e9a <strtod+0x168>
    2e86:	d3 fc       	sbrc	r13, 3
    2e88:	50 c0       	rjmp	.+160    	; 0x2f2a <strtod+0x1f8>
    2e8a:	4d 2d       	mov	r20, r13
    2e8c:	48 60       	ori	r20, 0x08	; 8
    2e8e:	b4 2e       	mov	r11, r20
    2e90:	31 96       	adiw	r30, 0x01	; 1
    2e92:	d7 01       	movw	r26, r14
    2e94:	cc 90       	ld	r12, X
    2e96:	db 2c       	mov	r13, r11
    2e98:	c6 cf       	rjmp	.-116    	; 0x2e26 <strtod+0xf4>
    2e9a:	2c 2d       	mov	r18, r12
    2e9c:	2f 7d       	andi	r18, 0xDF	; 223
    2e9e:	25 34       	cpi	r18, 0x45	; 69
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <strtod+0x172>
    2ea2:	43 c0       	rjmp	.+134    	; 0x2f2a <strtod+0x1f8>
    2ea4:	a0 81       	ld	r26, Z
    2ea6:	ad 32       	cpi	r26, 0x2D	; 45
    2ea8:	41 f4       	brne	.+16     	; 0x2eba <strtod+0x188>
    2eaa:	bd 2d       	mov	r27, r13
    2eac:	b0 61       	ori	r27, 0x10	; 16
    2eae:	db 2e       	mov	r13, r27
    2eb0:	7f 01       	movw	r14, r30
    2eb2:	22 e0       	ldi	r18, 0x02	; 2
    2eb4:	e2 0e       	add	r14, r18
    2eb6:	f1 1c       	adc	r15, r1
    2eb8:	0c c0       	rjmp	.+24     	; 0x2ed2 <strtod+0x1a0>
    2eba:	7f 01       	movw	r14, r30
    2ebc:	ab 32       	cpi	r26, 0x2B	; 43
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <strtod+0x19a>
    2ec0:	4f ef       	ldi	r20, 0xFF	; 255
    2ec2:	e4 1a       	sub	r14, r20
    2ec4:	f4 0a       	sbc	r15, r20
    2ec6:	21 e0       	ldi	r18, 0x01	; 1
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	06 c0       	rjmp	.+12     	; 0x2ed8 <strtod+0x1a6>
    2ecc:	a2 e0       	ldi	r26, 0x02	; 2
    2ece:	ea 0e       	add	r14, r26
    2ed0:	f1 1c       	adc	r15, r1
    2ed2:	a1 81       	ldd	r26, Z+1	; 0x01
    2ed4:	22 e0       	ldi	r18, 0x02	; 2
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	a0 53       	subi	r26, 0x30	; 48
    2eda:	aa 30       	cpi	r26, 0x0A	; 10
    2edc:	18 f0       	brcs	.+6      	; 0x2ee4 <strtod+0x1b2>
    2ede:	e2 1a       	sub	r14, r18
    2ee0:	f3 0a       	sbc	r15, r19
    2ee2:	23 c0       	rjmp	.+70     	; 0x2f2a <strtod+0x1f8>
    2ee4:	f7 01       	movw	r30, r14
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	20 38       	cpi	r18, 0x80	; 128
    2eec:	bc e0       	ldi	r27, 0x0C	; 12
    2eee:	3b 07       	cpc	r19, r27
    2ef0:	5c f4       	brge	.+22     	; 0x2f08 <strtod+0x1d6>
    2ef2:	a9 01       	movw	r20, r18
    2ef4:	44 0f       	add	r20, r20
    2ef6:	55 1f       	adc	r21, r21
    2ef8:	44 0f       	add	r20, r20
    2efa:	55 1f       	adc	r21, r21
    2efc:	24 0f       	add	r18, r20
    2efe:	35 1f       	adc	r19, r21
    2f00:	22 0f       	add	r18, r18
    2f02:	33 1f       	adc	r19, r19
    2f04:	2a 0f       	add	r18, r26
    2f06:	31 1d       	adc	r19, r1
    2f08:	af 01       	movw	r20, r30
    2f0a:	4f 5f       	subi	r20, 0xFF	; 255
    2f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0e:	7a 01       	movw	r14, r20
    2f10:	a0 81       	ld	r26, Z
    2f12:	a0 53       	subi	r26, 0x30	; 48
    2f14:	aa 30       	cpi	r26, 0x0A	; 10
    2f16:	10 f4       	brcc	.+4      	; 0x2f1c <strtod+0x1ea>
    2f18:	fa 01       	movw	r30, r20
    2f1a:	e7 cf       	rjmp	.-50     	; 0x2eea <strtod+0x1b8>
    2f1c:	d4 fe       	sbrs	r13, 4
    2f1e:	03 c0       	rjmp	.+6      	; 0x2f26 <strtod+0x1f4>
    2f20:	31 95       	neg	r19
    2f22:	21 95       	neg	r18
    2f24:	31 09       	sbc	r19, r1
    2f26:	c2 0f       	add	r28, r18
    2f28:	d3 1f       	adc	r29, r19
    2f2a:	d1 fe       	sbrs	r13, 1
    2f2c:	09 c0       	rjmp	.+18     	; 0x2f40 <strtod+0x20e>
    2f2e:	01 15       	cp	r16, r1
    2f30:	11 05       	cpc	r17, r1
    2f32:	31 f0       	breq	.+12     	; 0x2f40 <strtod+0x20e>
    2f34:	e1 e0       	ldi	r30, 0x01	; 1
    2f36:	ee 1a       	sub	r14, r30
    2f38:	f1 08       	sbc	r15, r1
    2f3a:	d8 01       	movw	r26, r16
    2f3c:	ed 92       	st	X+, r14
    2f3e:	fc 92       	st	X, r15
    2f40:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__floatunsisf>
    2f44:	2d 2d       	mov	r18, r13
    2f46:	23 70       	andi	r18, 0x03	; 3
    2f48:	23 30       	cpi	r18, 0x03	; 3
    2f4a:	19 f0       	breq	.+6      	; 0x2f52 <strtod+0x220>
    2f4c:	6b 01       	movw	r12, r22
    2f4e:	7c 01       	movw	r14, r24
    2f50:	06 c0       	rjmp	.+12     	; 0x2f5e <strtod+0x22c>
    2f52:	6b 01       	movw	r12, r22
    2f54:	7c 01       	movw	r14, r24
    2f56:	f7 fa       	bst	r15, 7
    2f58:	f0 94       	com	r15
    2f5a:	f7 f8       	bld	r15, 7
    2f5c:	f0 94       	com	r15
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	a9 01       	movw	r20, r18
    2f64:	c7 01       	movw	r24, r14
    2f66:	b6 01       	movw	r22, r12
    2f68:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <strtod+0x240>
    2f70:	40 c0       	rjmp	.+128    	; 0x2ff2 <strtod+0x2c0>
    2f72:	d7 ff       	sbrs	r29, 7
    2f74:	06 c0       	rjmp	.+12     	; 0x2f82 <strtod+0x250>
    2f76:	d1 95       	neg	r29
    2f78:	c1 95       	neg	r28
    2f7a:	d1 09       	sbc	r29, r1
    2f7c:	00 ea       	ldi	r16, 0xA0	; 160
    2f7e:	11 e0       	ldi	r17, 0x01	; 1
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <strtod+0x254>
    2f82:	08 eb       	ldi	r16, 0xB8	; 184
    2f84:	11 e0       	ldi	r17, 0x01	; 1
    2f86:	48 01       	movw	r8, r16
    2f88:	b8 e1       	ldi	r27, 0x18	; 24
    2f8a:	8b 1a       	sub	r8, r27
    2f8c:	91 08       	sbc	r9, r1
    2f8e:	90 e2       	ldi	r25, 0x20	; 32
    2f90:	a9 2e       	mov	r10, r25
    2f92:	b1 2c       	mov	r11, r1
    2f94:	f8 01       	movw	r30, r16
    2f96:	45 90       	lpm	r4, Z+
    2f98:	55 90       	lpm	r5, Z+
    2f9a:	65 90       	lpm	r6, Z+
    2f9c:	74 90       	lpm	r7, Z
    2f9e:	ca 15       	cp	r28, r10
    2fa0:	db 05       	cpc	r29, r11
    2fa2:	5c f0       	brlt	.+22     	; 0x2fba <strtod+0x288>
    2fa4:	a3 01       	movw	r20, r6
    2fa6:	92 01       	movw	r18, r4
    2fa8:	c7 01       	movw	r24, r14
    2faa:	b6 01       	movw	r22, r12
    2fac:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3>
    2fb0:	6b 01       	movw	r12, r22
    2fb2:	7c 01       	movw	r14, r24
    2fb4:	ca 19       	sub	r28, r10
    2fb6:	db 09       	sbc	r29, r11
    2fb8:	f2 cf       	rjmp	.-28     	; 0x2f9e <strtod+0x26c>
    2fba:	04 50       	subi	r16, 0x04	; 4
    2fbc:	11 09       	sbc	r17, r1
    2fbe:	b5 94       	asr	r11
    2fc0:	a7 94       	ror	r10
    2fc2:	08 15       	cp	r16, r8
    2fc4:	19 05       	cpc	r17, r9
    2fc6:	31 f7       	brne	.-52     	; 0x2f94 <strtod+0x262>
    2fc8:	8e 2d       	mov	r24, r14
    2fca:	88 0f       	add	r24, r24
    2fcc:	8f 2d       	mov	r24, r15
    2fce:	88 1f       	adc	r24, r24
    2fd0:	8f 3f       	cpi	r24, 0xFF	; 255
    2fd2:	49 f0       	breq	.+18     	; 0x2fe6 <strtod+0x2b4>
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	a9 01       	movw	r20, r18
    2fda:	c7 01       	movw	r24, r14
    2fdc:	b6 01       	movw	r22, r12
    2fde:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
    2fe2:	81 11       	cpse	r24, r1
    2fe4:	06 c0       	rjmp	.+12     	; 0x2ff2 <strtod+0x2c0>
    2fe6:	82 e2       	ldi	r24, 0x22	; 34
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	90 93 84 04 	sts	0x0484, r25
    2fee:	80 93 83 04 	sts	0x0483, r24
    2ff2:	c7 01       	movw	r24, r14
    2ff4:	b6 01       	movw	r22, r12
    2ff6:	09 c0       	rjmp	.+18     	; 0x300a <strtod+0x2d8>
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	80 e8       	ldi	r24, 0x80	; 128
    2ffe:	9f ef       	ldi	r25, 0xFF	; 255
    3000:	04 c0       	rjmp	.+8      	; 0x300a <strtod+0x2d8>
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	70 e0       	ldi	r23, 0x00	; 0
    3006:	80 ec       	ldi	r24, 0xC0	; 192
    3008:	9f e7       	ldi	r25, 0x7F	; 127
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	ff 90       	pop	r15
    3014:	ef 90       	pop	r14
    3016:	df 90       	pop	r13
    3018:	cf 90       	pop	r12
    301a:	bf 90       	pop	r11
    301c:	af 90       	pop	r10
    301e:	9f 90       	pop	r9
    3020:	8f 90       	pop	r8
    3022:	7f 90       	pop	r7
    3024:	6f 90       	pop	r6
    3026:	5f 90       	pop	r5
    3028:	4f 90       	pop	r4
    302a:	08 95       	ret

0000302c <isspace>:
    302c:	91 11       	cpse	r25, r1
    302e:	ac c2       	rjmp	.+1368   	; 0x3588 <__ctype_isfalse>
    3030:	80 32       	cpi	r24, 0x20	; 32
    3032:	19 f0       	breq	.+6      	; 0x303a <isspace+0xe>
    3034:	89 50       	subi	r24, 0x09	; 9
    3036:	85 50       	subi	r24, 0x05	; 5
    3038:	d0 f7       	brcc	.-12     	; 0x302e <isspace+0x2>
    303a:	08 95       	ret

0000303c <strncasecmp_P>:
    303c:	fb 01       	movw	r30, r22
    303e:	dc 01       	movw	r26, r24
    3040:	41 50       	subi	r20, 0x01	; 1
    3042:	50 40       	sbci	r21, 0x00	; 0
    3044:	88 f0       	brcs	.+34     	; 0x3068 <strncasecmp_P+0x2c>
    3046:	8d 91       	ld	r24, X+
    3048:	81 34       	cpi	r24, 0x41	; 65
    304a:	1c f0       	brlt	.+6      	; 0x3052 <strncasecmp_P+0x16>
    304c:	8b 35       	cpi	r24, 0x5B	; 91
    304e:	0c f4       	brge	.+2      	; 0x3052 <strncasecmp_P+0x16>
    3050:	80 5e       	subi	r24, 0xE0	; 224
    3052:	65 91       	lpm	r22, Z+
    3054:	61 34       	cpi	r22, 0x41	; 65
    3056:	1c f0       	brlt	.+6      	; 0x305e <strncasecmp_P+0x22>
    3058:	6b 35       	cpi	r22, 0x5B	; 91
    305a:	0c f4       	brge	.+2      	; 0x305e <strncasecmp_P+0x22>
    305c:	60 5e       	subi	r22, 0xE0	; 224
    305e:	86 1b       	sub	r24, r22
    3060:	61 11       	cpse	r22, r1
    3062:	71 f3       	breq	.-36     	; 0x3040 <strncasecmp_P+0x4>
    3064:	99 0b       	sbc	r25, r25
    3066:	08 95       	ret
    3068:	88 1b       	sub	r24, r24
    306a:	fc cf       	rjmp	.-8      	; 0x3064 <strncasecmp_P+0x28>

0000306c <strcat>:
    306c:	fb 01       	movw	r30, r22
    306e:	dc 01       	movw	r26, r24
    3070:	0d 90       	ld	r0, X+
    3072:	00 20       	and	r0, r0
    3074:	e9 f7       	brne	.-6      	; 0x3070 <strcat+0x4>
    3076:	11 97       	sbiw	r26, 0x01	; 1
    3078:	01 90       	ld	r0, Z+
    307a:	0d 92       	st	X+, r0
    307c:	00 20       	and	r0, r0
    307e:	e1 f7       	brne	.-8      	; 0x3078 <strcat+0xc>
    3080:	08 95       	ret

00003082 <strcmp>:
    3082:	fb 01       	movw	r30, r22
    3084:	dc 01       	movw	r26, r24
    3086:	8d 91       	ld	r24, X+
    3088:	01 90       	ld	r0, Z+
    308a:	80 19       	sub	r24, r0
    308c:	01 10       	cpse	r0, r1
    308e:	d9 f3       	breq	.-10     	; 0x3086 <strcmp+0x4>
    3090:	99 0b       	sbc	r25, r25
    3092:	08 95       	ret

00003094 <strcpy>:
    3094:	fb 01       	movw	r30, r22
    3096:	dc 01       	movw	r26, r24
    3098:	01 90       	ld	r0, Z+
    309a:	0d 92       	st	X+, r0
    309c:	00 20       	and	r0, r0
    309e:	e1 f7       	brne	.-8      	; 0x3098 <strcpy+0x4>
    30a0:	08 95       	ret

000030a2 <strncpy>:
    30a2:	fb 01       	movw	r30, r22
    30a4:	dc 01       	movw	r26, r24
    30a6:	41 50       	subi	r20, 0x01	; 1
    30a8:	50 40       	sbci	r21, 0x00	; 0
    30aa:	48 f0       	brcs	.+18     	; 0x30be <strncpy+0x1c>
    30ac:	01 90       	ld	r0, Z+
    30ae:	0d 92       	st	X+, r0
    30b0:	00 20       	and	r0, r0
    30b2:	c9 f7       	brne	.-14     	; 0x30a6 <strncpy+0x4>
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <strncpy+0x16>
    30b6:	1d 92       	st	X+, r1
    30b8:	41 50       	subi	r20, 0x01	; 1
    30ba:	50 40       	sbci	r21, 0x00	; 0
    30bc:	e0 f7       	brcc	.-8      	; 0x30b6 <strncpy+0x14>
    30be:	08 95       	ret

000030c0 <strpbrk>:
    30c0:	dc 01       	movw	r26, r24
    30c2:	99 27       	eor	r25, r25
    30c4:	8d 91       	ld	r24, X+
    30c6:	88 23       	and	r24, r24
    30c8:	41 f0       	breq	.+16     	; 0x30da <strpbrk+0x1a>
    30ca:	fb 01       	movw	r30, r22
    30cc:	01 90       	ld	r0, Z+
    30ce:	08 16       	cp	r0, r24
    30d0:	01 10       	cpse	r0, r1
    30d2:	e1 f7       	brne	.-8      	; 0x30cc <strpbrk+0xc>
    30d4:	b9 f7       	brne	.-18     	; 0x30c4 <strpbrk+0x4>
    30d6:	11 97       	sbiw	r26, 0x01	; 1
    30d8:	cd 01       	movw	r24, r26
    30da:	08 95       	ret

000030dc <sprintf>:
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	2e 97       	sbiw	r28, 0x0e	; 14
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	0d 89       	ldd	r16, Y+21	; 0x15
    30f6:	1e 89       	ldd	r17, Y+22	; 0x16
    30f8:	86 e0       	ldi	r24, 0x06	; 6
    30fa:	8c 83       	std	Y+4, r24	; 0x04
    30fc:	1a 83       	std	Y+2, r17	; 0x02
    30fe:	09 83       	std	Y+1, r16	; 0x01
    3100:	8f ef       	ldi	r24, 0xFF	; 255
    3102:	9f e7       	ldi	r25, 0x7F	; 127
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	ae 01       	movw	r20, r28
    310a:	47 5e       	subi	r20, 0xE7	; 231
    310c:	5f 4f       	sbci	r21, 0xFF	; 255
    310e:	6f 89       	ldd	r22, Y+23	; 0x17
    3110:	78 8d       	ldd	r23, Y+24	; 0x18
    3112:	ce 01       	movw	r24, r28
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	0e 94 9d 18 	call	0x313a	; 0x313a <vfprintf>
    311a:	ef 81       	ldd	r30, Y+7	; 0x07
    311c:	f8 85       	ldd	r31, Y+8	; 0x08
    311e:	e0 0f       	add	r30, r16
    3120:	f1 1f       	adc	r31, r17
    3122:	10 82       	st	Z, r1
    3124:	2e 96       	adiw	r28, 0x0e	; 14
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	08 95       	ret

0000313a <vfprintf>:
    313a:	2f 92       	push	r2
    313c:	3f 92       	push	r3
    313e:	4f 92       	push	r4
    3140:	5f 92       	push	r5
    3142:	6f 92       	push	r6
    3144:	7f 92       	push	r7
    3146:	8f 92       	push	r8
    3148:	9f 92       	push	r9
    314a:	af 92       	push	r10
    314c:	bf 92       	push	r11
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	2c 97       	sbiw	r28, 0x0c	; 12
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	7c 01       	movw	r14, r24
    3170:	6b 01       	movw	r12, r22
    3172:	8a 01       	movw	r16, r20
    3174:	fc 01       	movw	r30, r24
    3176:	17 82       	std	Z+7, r1	; 0x07
    3178:	16 82       	std	Z+6, r1	; 0x06
    317a:	83 81       	ldd	r24, Z+3	; 0x03
    317c:	81 ff       	sbrs	r24, 1
    317e:	bd c1       	rjmp	.+890    	; 0x34fa <vfprintf+0x3c0>
    3180:	ce 01       	movw	r24, r28
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	4c 01       	movw	r8, r24
    3186:	f7 01       	movw	r30, r14
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	f6 01       	movw	r30, r12
    318c:	93 fd       	sbrc	r25, 3
    318e:	85 91       	lpm	r24, Z+
    3190:	93 ff       	sbrs	r25, 3
    3192:	81 91       	ld	r24, Z+
    3194:	6f 01       	movw	r12, r30
    3196:	88 23       	and	r24, r24
    3198:	09 f4       	brne	.+2      	; 0x319c <vfprintf+0x62>
    319a:	ab c1       	rjmp	.+854    	; 0x34f2 <vfprintf+0x3b8>
    319c:	85 32       	cpi	r24, 0x25	; 37
    319e:	39 f4       	brne	.+14     	; 0x31ae <vfprintf+0x74>
    31a0:	93 fd       	sbrc	r25, 3
    31a2:	85 91       	lpm	r24, Z+
    31a4:	93 ff       	sbrs	r25, 3
    31a6:	81 91       	ld	r24, Z+
    31a8:	6f 01       	movw	r12, r30
    31aa:	85 32       	cpi	r24, 0x25	; 37
    31ac:	29 f4       	brne	.+10     	; 0x31b8 <vfprintf+0x7e>
    31ae:	b7 01       	movw	r22, r14
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    31b6:	e7 cf       	rjmp	.-50     	; 0x3186 <vfprintf+0x4c>
    31b8:	51 2c       	mov	r5, r1
    31ba:	31 2c       	mov	r3, r1
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	20 32       	cpi	r18, 0x20	; 32
    31c0:	a0 f4       	brcc	.+40     	; 0x31ea <vfprintf+0xb0>
    31c2:	8b 32       	cpi	r24, 0x2B	; 43
    31c4:	69 f0       	breq	.+26     	; 0x31e0 <vfprintf+0xa6>
    31c6:	30 f4       	brcc	.+12     	; 0x31d4 <vfprintf+0x9a>
    31c8:	80 32       	cpi	r24, 0x20	; 32
    31ca:	59 f0       	breq	.+22     	; 0x31e2 <vfprintf+0xa8>
    31cc:	83 32       	cpi	r24, 0x23	; 35
    31ce:	69 f4       	brne	.+26     	; 0x31ea <vfprintf+0xb0>
    31d0:	20 61       	ori	r18, 0x10	; 16
    31d2:	2c c0       	rjmp	.+88     	; 0x322c <vfprintf+0xf2>
    31d4:	8d 32       	cpi	r24, 0x2D	; 45
    31d6:	39 f0       	breq	.+14     	; 0x31e6 <vfprintf+0xac>
    31d8:	80 33       	cpi	r24, 0x30	; 48
    31da:	39 f4       	brne	.+14     	; 0x31ea <vfprintf+0xb0>
    31dc:	21 60       	ori	r18, 0x01	; 1
    31de:	26 c0       	rjmp	.+76     	; 0x322c <vfprintf+0xf2>
    31e0:	22 60       	ori	r18, 0x02	; 2
    31e2:	24 60       	ori	r18, 0x04	; 4
    31e4:	23 c0       	rjmp	.+70     	; 0x322c <vfprintf+0xf2>
    31e6:	28 60       	ori	r18, 0x08	; 8
    31e8:	21 c0       	rjmp	.+66     	; 0x322c <vfprintf+0xf2>
    31ea:	27 fd       	sbrc	r18, 7
    31ec:	27 c0       	rjmp	.+78     	; 0x323c <vfprintf+0x102>
    31ee:	30 ed       	ldi	r19, 0xD0	; 208
    31f0:	38 0f       	add	r19, r24
    31f2:	3a 30       	cpi	r19, 0x0A	; 10
    31f4:	78 f4       	brcc	.+30     	; 0x3214 <vfprintf+0xda>
    31f6:	26 ff       	sbrs	r18, 6
    31f8:	06 c0       	rjmp	.+12     	; 0x3206 <vfprintf+0xcc>
    31fa:	fa e0       	ldi	r31, 0x0A	; 10
    31fc:	5f 9e       	mul	r5, r31
    31fe:	30 0d       	add	r19, r0
    3200:	11 24       	eor	r1, r1
    3202:	53 2e       	mov	r5, r19
    3204:	13 c0       	rjmp	.+38     	; 0x322c <vfprintf+0xf2>
    3206:	8a e0       	ldi	r24, 0x0A	; 10
    3208:	38 9e       	mul	r3, r24
    320a:	30 0d       	add	r19, r0
    320c:	11 24       	eor	r1, r1
    320e:	33 2e       	mov	r3, r19
    3210:	20 62       	ori	r18, 0x20	; 32
    3212:	0c c0       	rjmp	.+24     	; 0x322c <vfprintf+0xf2>
    3214:	8e 32       	cpi	r24, 0x2E	; 46
    3216:	21 f4       	brne	.+8      	; 0x3220 <vfprintf+0xe6>
    3218:	26 fd       	sbrc	r18, 6
    321a:	6b c1       	rjmp	.+726    	; 0x34f2 <vfprintf+0x3b8>
    321c:	20 64       	ori	r18, 0x40	; 64
    321e:	06 c0       	rjmp	.+12     	; 0x322c <vfprintf+0xf2>
    3220:	8c 36       	cpi	r24, 0x6C	; 108
    3222:	11 f4       	brne	.+4      	; 0x3228 <vfprintf+0xee>
    3224:	20 68       	ori	r18, 0x80	; 128
    3226:	02 c0       	rjmp	.+4      	; 0x322c <vfprintf+0xf2>
    3228:	88 36       	cpi	r24, 0x68	; 104
    322a:	41 f4       	brne	.+16     	; 0x323c <vfprintf+0x102>
    322c:	f6 01       	movw	r30, r12
    322e:	93 fd       	sbrc	r25, 3
    3230:	85 91       	lpm	r24, Z+
    3232:	93 ff       	sbrs	r25, 3
    3234:	81 91       	ld	r24, Z+
    3236:	6f 01       	movw	r12, r30
    3238:	81 11       	cpse	r24, r1
    323a:	c1 cf       	rjmp	.-126    	; 0x31be <vfprintf+0x84>
    323c:	98 2f       	mov	r25, r24
    323e:	9f 7d       	andi	r25, 0xDF	; 223
    3240:	95 54       	subi	r25, 0x45	; 69
    3242:	93 30       	cpi	r25, 0x03	; 3
    3244:	28 f4       	brcc	.+10     	; 0x3250 <vfprintf+0x116>
    3246:	0c 5f       	subi	r16, 0xFC	; 252
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	ff e3       	ldi	r31, 0x3F	; 63
    324c:	f9 83       	std	Y+1, r31	; 0x01
    324e:	0d c0       	rjmp	.+26     	; 0x326a <vfprintf+0x130>
    3250:	83 36       	cpi	r24, 0x63	; 99
    3252:	31 f0       	breq	.+12     	; 0x3260 <vfprintf+0x126>
    3254:	83 37       	cpi	r24, 0x73	; 115
    3256:	71 f0       	breq	.+28     	; 0x3274 <vfprintf+0x13a>
    3258:	83 35       	cpi	r24, 0x53	; 83
    325a:	09 f0       	breq	.+2      	; 0x325e <vfprintf+0x124>
    325c:	5b c0       	rjmp	.+182    	; 0x3314 <vfprintf+0x1da>
    325e:	22 c0       	rjmp	.+68     	; 0x32a4 <vfprintf+0x16a>
    3260:	f8 01       	movw	r30, r16
    3262:	80 81       	ld	r24, Z
    3264:	89 83       	std	Y+1, r24	; 0x01
    3266:	0e 5f       	subi	r16, 0xFE	; 254
    3268:	1f 4f       	sbci	r17, 0xFF	; 255
    326a:	44 24       	eor	r4, r4
    326c:	43 94       	inc	r4
    326e:	51 2c       	mov	r5, r1
    3270:	54 01       	movw	r10, r8
    3272:	15 c0       	rjmp	.+42     	; 0x329e <vfprintf+0x164>
    3274:	38 01       	movw	r6, r16
    3276:	f2 e0       	ldi	r31, 0x02	; 2
    3278:	6f 0e       	add	r6, r31
    327a:	71 1c       	adc	r7, r1
    327c:	f8 01       	movw	r30, r16
    327e:	a0 80       	ld	r10, Z
    3280:	b1 80       	ldd	r11, Z+1	; 0x01
    3282:	26 ff       	sbrs	r18, 6
    3284:	03 c0       	rjmp	.+6      	; 0x328c <vfprintf+0x152>
    3286:	65 2d       	mov	r22, r5
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <vfprintf+0x156>
    328c:	6f ef       	ldi	r22, 0xFF	; 255
    328e:	7f ef       	ldi	r23, 0xFF	; 255
    3290:	c5 01       	movw	r24, r10
    3292:	2c 87       	std	Y+12, r18	; 0x0c
    3294:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <strnlen>
    3298:	2c 01       	movw	r4, r24
    329a:	83 01       	movw	r16, r6
    329c:	2c 85       	ldd	r18, Y+12	; 0x0c
    329e:	2f 77       	andi	r18, 0x7F	; 127
    32a0:	22 2e       	mov	r2, r18
    32a2:	17 c0       	rjmp	.+46     	; 0x32d2 <vfprintf+0x198>
    32a4:	38 01       	movw	r6, r16
    32a6:	f2 e0       	ldi	r31, 0x02	; 2
    32a8:	6f 0e       	add	r6, r31
    32aa:	71 1c       	adc	r7, r1
    32ac:	f8 01       	movw	r30, r16
    32ae:	a0 80       	ld	r10, Z
    32b0:	b1 80       	ldd	r11, Z+1	; 0x01
    32b2:	26 ff       	sbrs	r18, 6
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <vfprintf+0x182>
    32b6:	65 2d       	mov	r22, r5
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <vfprintf+0x186>
    32bc:	6f ef       	ldi	r22, 0xFF	; 255
    32be:	7f ef       	ldi	r23, 0xFF	; 255
    32c0:	c5 01       	movw	r24, r10
    32c2:	2c 87       	std	Y+12, r18	; 0x0c
    32c4:	0e 94 c7 1a 	call	0x358e	; 0x358e <strnlen_P>
    32c8:	2c 01       	movw	r4, r24
    32ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    32cc:	20 68       	ori	r18, 0x80	; 128
    32ce:	22 2e       	mov	r2, r18
    32d0:	83 01       	movw	r16, r6
    32d2:	23 fc       	sbrc	r2, 3
    32d4:	1b c0       	rjmp	.+54     	; 0x330c <vfprintf+0x1d2>
    32d6:	83 2d       	mov	r24, r3
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	48 16       	cp	r4, r24
    32dc:	59 06       	cpc	r5, r25
    32de:	b0 f4       	brcc	.+44     	; 0x330c <vfprintf+0x1d2>
    32e0:	b7 01       	movw	r22, r14
    32e2:	80 e2       	ldi	r24, 0x20	; 32
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    32ea:	3a 94       	dec	r3
    32ec:	f4 cf       	rjmp	.-24     	; 0x32d6 <vfprintf+0x19c>
    32ee:	f5 01       	movw	r30, r10
    32f0:	27 fc       	sbrc	r2, 7
    32f2:	85 91       	lpm	r24, Z+
    32f4:	27 fe       	sbrs	r2, 7
    32f6:	81 91       	ld	r24, Z+
    32f8:	5f 01       	movw	r10, r30
    32fa:	b7 01       	movw	r22, r14
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    3302:	31 10       	cpse	r3, r1
    3304:	3a 94       	dec	r3
    3306:	f1 e0       	ldi	r31, 0x01	; 1
    3308:	4f 1a       	sub	r4, r31
    330a:	51 08       	sbc	r5, r1
    330c:	41 14       	cp	r4, r1
    330e:	51 04       	cpc	r5, r1
    3310:	71 f7       	brne	.-36     	; 0x32ee <vfprintf+0x1b4>
    3312:	e5 c0       	rjmp	.+458    	; 0x34de <vfprintf+0x3a4>
    3314:	84 36       	cpi	r24, 0x64	; 100
    3316:	11 f0       	breq	.+4      	; 0x331c <vfprintf+0x1e2>
    3318:	89 36       	cpi	r24, 0x69	; 105
    331a:	39 f5       	brne	.+78     	; 0x336a <vfprintf+0x230>
    331c:	f8 01       	movw	r30, r16
    331e:	27 ff       	sbrs	r18, 7
    3320:	07 c0       	rjmp	.+14     	; 0x3330 <vfprintf+0x1f6>
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	0c 5f       	subi	r16, 0xFC	; 252
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	08 c0       	rjmp	.+16     	; 0x3340 <vfprintf+0x206>
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	88 27       	eor	r24, r24
    3336:	77 fd       	sbrc	r23, 7
    3338:	80 95       	com	r24
    333a:	98 2f       	mov	r25, r24
    333c:	0e 5f       	subi	r16, 0xFE	; 254
    333e:	1f 4f       	sbci	r17, 0xFF	; 255
    3340:	2f 76       	andi	r18, 0x6F	; 111
    3342:	b2 2e       	mov	r11, r18
    3344:	97 ff       	sbrs	r25, 7
    3346:	09 c0       	rjmp	.+18     	; 0x335a <vfprintf+0x220>
    3348:	90 95       	com	r25
    334a:	80 95       	com	r24
    334c:	70 95       	com	r23
    334e:	61 95       	neg	r22
    3350:	7f 4f       	sbci	r23, 0xFF	; 255
    3352:	8f 4f       	sbci	r24, 0xFF	; 255
    3354:	9f 4f       	sbci	r25, 0xFF	; 255
    3356:	20 68       	ori	r18, 0x80	; 128
    3358:	b2 2e       	mov	r11, r18
    335a:	2a e0       	ldi	r18, 0x0A	; 10
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	a4 01       	movw	r20, r8
    3360:	0e 94 0f 1b 	call	0x361e	; 0x361e <__ultoa_invert>
    3364:	a8 2e       	mov	r10, r24
    3366:	a8 18       	sub	r10, r8
    3368:	44 c0       	rjmp	.+136    	; 0x33f2 <vfprintf+0x2b8>
    336a:	85 37       	cpi	r24, 0x75	; 117
    336c:	29 f4       	brne	.+10     	; 0x3378 <vfprintf+0x23e>
    336e:	2f 7e       	andi	r18, 0xEF	; 239
    3370:	b2 2e       	mov	r11, r18
    3372:	2a e0       	ldi	r18, 0x0A	; 10
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	25 c0       	rjmp	.+74     	; 0x33c2 <vfprintf+0x288>
    3378:	f2 2f       	mov	r31, r18
    337a:	f9 7f       	andi	r31, 0xF9	; 249
    337c:	bf 2e       	mov	r11, r31
    337e:	8f 36       	cpi	r24, 0x6F	; 111
    3380:	c1 f0       	breq	.+48     	; 0x33b2 <vfprintf+0x278>
    3382:	18 f4       	brcc	.+6      	; 0x338a <vfprintf+0x250>
    3384:	88 35       	cpi	r24, 0x58	; 88
    3386:	79 f0       	breq	.+30     	; 0x33a6 <vfprintf+0x26c>
    3388:	b4 c0       	rjmp	.+360    	; 0x34f2 <vfprintf+0x3b8>
    338a:	80 37       	cpi	r24, 0x70	; 112
    338c:	19 f0       	breq	.+6      	; 0x3394 <vfprintf+0x25a>
    338e:	88 37       	cpi	r24, 0x78	; 120
    3390:	21 f0       	breq	.+8      	; 0x339a <vfprintf+0x260>
    3392:	af c0       	rjmp	.+350    	; 0x34f2 <vfprintf+0x3b8>
    3394:	2f 2f       	mov	r18, r31
    3396:	20 61       	ori	r18, 0x10	; 16
    3398:	b2 2e       	mov	r11, r18
    339a:	b4 fe       	sbrs	r11, 4
    339c:	0d c0       	rjmp	.+26     	; 0x33b8 <vfprintf+0x27e>
    339e:	8b 2d       	mov	r24, r11
    33a0:	84 60       	ori	r24, 0x04	; 4
    33a2:	b8 2e       	mov	r11, r24
    33a4:	09 c0       	rjmp	.+18     	; 0x33b8 <vfprintf+0x27e>
    33a6:	24 ff       	sbrs	r18, 4
    33a8:	0a c0       	rjmp	.+20     	; 0x33be <vfprintf+0x284>
    33aa:	9f 2f       	mov	r25, r31
    33ac:	96 60       	ori	r25, 0x06	; 6
    33ae:	b9 2e       	mov	r11, r25
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <vfprintf+0x284>
    33b2:	28 e0       	ldi	r18, 0x08	; 8
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <vfprintf+0x288>
    33b8:	20 e1       	ldi	r18, 0x10	; 16
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <vfprintf+0x288>
    33be:	20 e1       	ldi	r18, 0x10	; 16
    33c0:	32 e0       	ldi	r19, 0x02	; 2
    33c2:	f8 01       	movw	r30, r16
    33c4:	b7 fe       	sbrs	r11, 7
    33c6:	07 c0       	rjmp	.+14     	; 0x33d6 <vfprintf+0x29c>
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	0c 5f       	subi	r16, 0xFC	; 252
    33d2:	1f 4f       	sbci	r17, 0xFF	; 255
    33d4:	06 c0       	rjmp	.+12     	; 0x33e2 <vfprintf+0x2a8>
    33d6:	60 81       	ld	r22, Z
    33d8:	71 81       	ldd	r23, Z+1	; 0x01
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 5f       	subi	r16, 0xFE	; 254
    33e0:	1f 4f       	sbci	r17, 0xFF	; 255
    33e2:	a4 01       	movw	r20, r8
    33e4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__ultoa_invert>
    33e8:	a8 2e       	mov	r10, r24
    33ea:	a8 18       	sub	r10, r8
    33ec:	fb 2d       	mov	r31, r11
    33ee:	ff 77       	andi	r31, 0x7F	; 127
    33f0:	bf 2e       	mov	r11, r31
    33f2:	b6 fe       	sbrs	r11, 6
    33f4:	0b c0       	rjmp	.+22     	; 0x340c <vfprintf+0x2d2>
    33f6:	2b 2d       	mov	r18, r11
    33f8:	2e 7f       	andi	r18, 0xFE	; 254
    33fa:	a5 14       	cp	r10, r5
    33fc:	50 f4       	brcc	.+20     	; 0x3412 <vfprintf+0x2d8>
    33fe:	b4 fe       	sbrs	r11, 4
    3400:	0a c0       	rjmp	.+20     	; 0x3416 <vfprintf+0x2dc>
    3402:	b2 fc       	sbrc	r11, 2
    3404:	08 c0       	rjmp	.+16     	; 0x3416 <vfprintf+0x2dc>
    3406:	2b 2d       	mov	r18, r11
    3408:	2e 7e       	andi	r18, 0xEE	; 238
    340a:	05 c0       	rjmp	.+10     	; 0x3416 <vfprintf+0x2dc>
    340c:	7a 2c       	mov	r7, r10
    340e:	2b 2d       	mov	r18, r11
    3410:	03 c0       	rjmp	.+6      	; 0x3418 <vfprintf+0x2de>
    3412:	7a 2c       	mov	r7, r10
    3414:	01 c0       	rjmp	.+2      	; 0x3418 <vfprintf+0x2de>
    3416:	75 2c       	mov	r7, r5
    3418:	24 ff       	sbrs	r18, 4
    341a:	0d c0       	rjmp	.+26     	; 0x3436 <vfprintf+0x2fc>
    341c:	fe 01       	movw	r30, r28
    341e:	ea 0d       	add	r30, r10
    3420:	f1 1d       	adc	r31, r1
    3422:	80 81       	ld	r24, Z
    3424:	80 33       	cpi	r24, 0x30	; 48
    3426:	11 f4       	brne	.+4      	; 0x342c <vfprintf+0x2f2>
    3428:	29 7e       	andi	r18, 0xE9	; 233
    342a:	09 c0       	rjmp	.+18     	; 0x343e <vfprintf+0x304>
    342c:	22 ff       	sbrs	r18, 2
    342e:	06 c0       	rjmp	.+12     	; 0x343c <vfprintf+0x302>
    3430:	73 94       	inc	r7
    3432:	73 94       	inc	r7
    3434:	04 c0       	rjmp	.+8      	; 0x343e <vfprintf+0x304>
    3436:	82 2f       	mov	r24, r18
    3438:	86 78       	andi	r24, 0x86	; 134
    343a:	09 f0       	breq	.+2      	; 0x343e <vfprintf+0x304>
    343c:	73 94       	inc	r7
    343e:	23 fd       	sbrc	r18, 3
    3440:	13 c0       	rjmp	.+38     	; 0x3468 <vfprintf+0x32e>
    3442:	20 ff       	sbrs	r18, 0
    3444:	06 c0       	rjmp	.+12     	; 0x3452 <vfprintf+0x318>
    3446:	5a 2c       	mov	r5, r10
    3448:	73 14       	cp	r7, r3
    344a:	18 f4       	brcc	.+6      	; 0x3452 <vfprintf+0x318>
    344c:	53 0c       	add	r5, r3
    344e:	57 18       	sub	r5, r7
    3450:	73 2c       	mov	r7, r3
    3452:	73 14       	cp	r7, r3
    3454:	68 f4       	brcc	.+26     	; 0x3470 <vfprintf+0x336>
    3456:	b7 01       	movw	r22, r14
    3458:	80 e2       	ldi	r24, 0x20	; 32
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	2c 87       	std	Y+12, r18	; 0x0c
    345e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    3462:	73 94       	inc	r7
    3464:	2c 85       	ldd	r18, Y+12	; 0x0c
    3466:	f5 cf       	rjmp	.-22     	; 0x3452 <vfprintf+0x318>
    3468:	73 14       	cp	r7, r3
    346a:	10 f4       	brcc	.+4      	; 0x3470 <vfprintf+0x336>
    346c:	37 18       	sub	r3, r7
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <vfprintf+0x338>
    3470:	31 2c       	mov	r3, r1
    3472:	24 ff       	sbrs	r18, 4
    3474:	12 c0       	rjmp	.+36     	; 0x349a <vfprintf+0x360>
    3476:	b7 01       	movw	r22, r14
    3478:	80 e3       	ldi	r24, 0x30	; 48
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	2c 87       	std	Y+12, r18	; 0x0c
    347e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    3482:	2c 85       	ldd	r18, Y+12	; 0x0c
    3484:	22 ff       	sbrs	r18, 2
    3486:	17 c0       	rjmp	.+46     	; 0x34b6 <vfprintf+0x37c>
    3488:	21 ff       	sbrs	r18, 1
    348a:	03 c0       	rjmp	.+6      	; 0x3492 <vfprintf+0x358>
    348c:	88 e5       	ldi	r24, 0x58	; 88
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	02 c0       	rjmp	.+4      	; 0x3496 <vfprintf+0x35c>
    3492:	88 e7       	ldi	r24, 0x78	; 120
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	b7 01       	movw	r22, r14
    3498:	0c c0       	rjmp	.+24     	; 0x34b2 <vfprintf+0x378>
    349a:	82 2f       	mov	r24, r18
    349c:	86 78       	andi	r24, 0x86	; 134
    349e:	59 f0       	breq	.+22     	; 0x34b6 <vfprintf+0x37c>
    34a0:	21 fd       	sbrc	r18, 1
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <vfprintf+0x36e>
    34a4:	80 e2       	ldi	r24, 0x20	; 32
    34a6:	01 c0       	rjmp	.+2      	; 0x34aa <vfprintf+0x370>
    34a8:	8b e2       	ldi	r24, 0x2B	; 43
    34aa:	27 fd       	sbrc	r18, 7
    34ac:	8d e2       	ldi	r24, 0x2D	; 45
    34ae:	b7 01       	movw	r22, r14
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    34b6:	a5 14       	cp	r10, r5
    34b8:	38 f4       	brcc	.+14     	; 0x34c8 <vfprintf+0x38e>
    34ba:	b7 01       	movw	r22, r14
    34bc:	80 e3       	ldi	r24, 0x30	; 48
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    34c4:	5a 94       	dec	r5
    34c6:	f7 cf       	rjmp	.-18     	; 0x34b6 <vfprintf+0x37c>
    34c8:	aa 94       	dec	r10
    34ca:	f4 01       	movw	r30, r8
    34cc:	ea 0d       	add	r30, r10
    34ce:	f1 1d       	adc	r31, r1
    34d0:	80 81       	ld	r24, Z
    34d2:	b7 01       	movw	r22, r14
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    34da:	a1 10       	cpse	r10, r1
    34dc:	f5 cf       	rjmp	.-22     	; 0x34c8 <vfprintf+0x38e>
    34de:	33 20       	and	r3, r3
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <vfprintf+0x3aa>
    34e2:	51 ce       	rjmp	.-862    	; 0x3186 <vfprintf+0x4c>
    34e4:	b7 01       	movw	r22, r14
    34e6:	80 e2       	ldi	r24, 0x20	; 32
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <fputc>
    34ee:	3a 94       	dec	r3
    34f0:	f6 cf       	rjmp	.-20     	; 0x34de <vfprintf+0x3a4>
    34f2:	f7 01       	movw	r30, r14
    34f4:	86 81       	ldd	r24, Z+6	; 0x06
    34f6:	97 81       	ldd	r25, Z+7	; 0x07
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <vfprintf+0x3c4>
    34fa:	8f ef       	ldi	r24, 0xFF	; 255
    34fc:	9f ef       	ldi	r25, 0xFF	; 255
    34fe:	2c 96       	adiw	r28, 0x0c	; 12
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	ff 90       	pop	r15
    3514:	ef 90       	pop	r14
    3516:	df 90       	pop	r13
    3518:	cf 90       	pop	r12
    351a:	bf 90       	pop	r11
    351c:	af 90       	pop	r10
    351e:	9f 90       	pop	r9
    3520:	8f 90       	pop	r8
    3522:	7f 90       	pop	r7
    3524:	6f 90       	pop	r6
    3526:	5f 90       	pop	r5
    3528:	4f 90       	pop	r4
    352a:	3f 90       	pop	r3
    352c:	2f 90       	pop	r2
    352e:	08 95       	ret

00003530 <__eerd_block_m1284p>:
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22

00003534 <__eerd_blraw_m1284p>:
    3534:	fc 01       	movw	r30, r24
    3536:	f9 99       	sbic	0x1f, 1	; 31
    3538:	fe cf       	rjmp	.-4      	; 0x3536 <__eerd_blraw_m1284p+0x2>
    353a:	06 c0       	rjmp	.+12     	; 0x3548 <__eerd_blraw_m1284p+0x14>
    353c:	f2 bd       	out	0x22, r31	; 34
    353e:	e1 bd       	out	0x21, r30	; 33
    3540:	f8 9a       	sbi	0x1f, 0	; 31
    3542:	31 96       	adiw	r30, 0x01	; 1
    3544:	00 b4       	in	r0, 0x20	; 32
    3546:	0d 92       	st	X+, r0
    3548:	41 50       	subi	r20, 0x01	; 1
    354a:	50 40       	sbci	r21, 0x00	; 0
    354c:	b8 f7       	brcc	.-18     	; 0x353c <__eerd_blraw_m1284p+0x8>
    354e:	08 95       	ret

00003550 <__eerd_byte_m1284p>:
    3550:	f9 99       	sbic	0x1f, 1	; 31
    3552:	fe cf       	rjmp	.-4      	; 0x3550 <__eerd_byte_m1284p>
    3554:	92 bd       	out	0x22, r25	; 34
    3556:	81 bd       	out	0x21, r24	; 33
    3558:	f8 9a       	sbi	0x1f, 0	; 31
    355a:	99 27       	eor	r25, r25
    355c:	80 b5       	in	r24, 0x20	; 32
    355e:	08 95       	ret

00003560 <__eerd_dword_m1284p>:
    3560:	a6 e1       	ldi	r26, 0x16	; 22
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	44 e0       	ldi	r20, 0x04	; 4
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__eerd_blraw_m1284p>

0000356c <__eewr_byte_m1284p>:
    356c:	26 2f       	mov	r18, r22

0000356e <__eewr_r18_m1284p>:
    356e:	f9 99       	sbic	0x1f, 1	; 31
    3570:	fe cf       	rjmp	.-4      	; 0x356e <__eewr_r18_m1284p>
    3572:	1f ba       	out	0x1f, r1	; 31
    3574:	92 bd       	out	0x22, r25	; 34
    3576:	81 bd       	out	0x21, r24	; 33
    3578:	20 bd       	out	0x20, r18	; 32
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	fa 9a       	sbi	0x1f, 2	; 31
    3580:	f9 9a       	sbi	0x1f, 1	; 31
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	08 95       	ret

00003588 <__ctype_isfalse>:
    3588:	99 27       	eor	r25, r25
    358a:	88 27       	eor	r24, r24

0000358c <__ctype_istrue>:
    358c:	08 95       	ret

0000358e <strnlen_P>:
    358e:	fc 01       	movw	r30, r24
    3590:	05 90       	lpm	r0, Z+
    3592:	61 50       	subi	r22, 0x01	; 1
    3594:	70 40       	sbci	r23, 0x00	; 0
    3596:	01 10       	cpse	r0, r1
    3598:	d8 f7       	brcc	.-10     	; 0x3590 <strnlen_P+0x2>
    359a:	80 95       	com	r24
    359c:	90 95       	com	r25
    359e:	8e 0f       	add	r24, r30
    35a0:	9f 1f       	adc	r25, r31
    35a2:	08 95       	ret

000035a4 <strnlen>:
    35a4:	fc 01       	movw	r30, r24
    35a6:	61 50       	subi	r22, 0x01	; 1
    35a8:	70 40       	sbci	r23, 0x00	; 0
    35aa:	01 90       	ld	r0, Z+
    35ac:	01 10       	cpse	r0, r1
    35ae:	d8 f7       	brcc	.-10     	; 0x35a6 <strnlen+0x2>
    35b0:	80 95       	com	r24
    35b2:	90 95       	com	r25
    35b4:	8e 0f       	add	r24, r30
    35b6:	9f 1f       	adc	r25, r31
    35b8:	08 95       	ret

000035ba <fputc>:
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	18 2f       	mov	r17, r24
    35c4:	09 2f       	mov	r16, r25
    35c6:	eb 01       	movw	r28, r22
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	81 fd       	sbrc	r24, 1
    35cc:	03 c0       	rjmp	.+6      	; 0x35d4 <fputc+0x1a>
    35ce:	8f ef       	ldi	r24, 0xFF	; 255
    35d0:	9f ef       	ldi	r25, 0xFF	; 255
    35d2:	20 c0       	rjmp	.+64     	; 0x3614 <fputc+0x5a>
    35d4:	82 ff       	sbrs	r24, 2
    35d6:	10 c0       	rjmp	.+32     	; 0x35f8 <fputc+0x3e>
    35d8:	4e 81       	ldd	r20, Y+6	; 0x06
    35da:	5f 81       	ldd	r21, Y+7	; 0x07
    35dc:	2c 81       	ldd	r18, Y+4	; 0x04
    35de:	3d 81       	ldd	r19, Y+5	; 0x05
    35e0:	42 17       	cp	r20, r18
    35e2:	53 07       	cpc	r21, r19
    35e4:	7c f4       	brge	.+30     	; 0x3604 <fputc+0x4a>
    35e6:	e8 81       	ld	r30, Y
    35e8:	f9 81       	ldd	r31, Y+1	; 0x01
    35ea:	9f 01       	movw	r18, r30
    35ec:	2f 5f       	subi	r18, 0xFF	; 255
    35ee:	3f 4f       	sbci	r19, 0xFF	; 255
    35f0:	39 83       	std	Y+1, r19	; 0x01
    35f2:	28 83       	st	Y, r18
    35f4:	10 83       	st	Z, r17
    35f6:	06 c0       	rjmp	.+12     	; 0x3604 <fputc+0x4a>
    35f8:	e8 85       	ldd	r30, Y+8	; 0x08
    35fa:	f9 85       	ldd	r31, Y+9	; 0x09
    35fc:	81 2f       	mov	r24, r17
    35fe:	09 95       	icall
    3600:	89 2b       	or	r24, r25
    3602:	29 f7       	brne	.-54     	; 0x35ce <fputc+0x14>
    3604:	2e 81       	ldd	r18, Y+6	; 0x06
    3606:	3f 81       	ldd	r19, Y+7	; 0x07
    3608:	2f 5f       	subi	r18, 0xFF	; 255
    360a:	3f 4f       	sbci	r19, 0xFF	; 255
    360c:	3f 83       	std	Y+7, r19	; 0x07
    360e:	2e 83       	std	Y+6, r18	; 0x06
    3610:	81 2f       	mov	r24, r17
    3612:	90 2f       	mov	r25, r16
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	08 95       	ret

0000361e <__ultoa_invert>:
    361e:	fa 01       	movw	r30, r20
    3620:	aa 27       	eor	r26, r26
    3622:	28 30       	cpi	r18, 0x08	; 8
    3624:	51 f1       	breq	.+84     	; 0x367a <__ultoa_invert+0x5c>
    3626:	20 31       	cpi	r18, 0x10	; 16
    3628:	81 f1       	breq	.+96     	; 0x368a <__ultoa_invert+0x6c>
    362a:	e8 94       	clt
    362c:	6f 93       	push	r22
    362e:	6e 7f       	andi	r22, 0xFE	; 254
    3630:	6e 5f       	subi	r22, 0xFE	; 254
    3632:	7f 4f       	sbci	r23, 0xFF	; 255
    3634:	8f 4f       	sbci	r24, 0xFF	; 255
    3636:	9f 4f       	sbci	r25, 0xFF	; 255
    3638:	af 4f       	sbci	r26, 0xFF	; 255
    363a:	b1 e0       	ldi	r27, 0x01	; 1
    363c:	3e d0       	rcall	.+124    	; 0x36ba <__ultoa_invert+0x9c>
    363e:	b4 e0       	ldi	r27, 0x04	; 4
    3640:	3c d0       	rcall	.+120    	; 0x36ba <__ultoa_invert+0x9c>
    3642:	67 0f       	add	r22, r23
    3644:	78 1f       	adc	r23, r24
    3646:	89 1f       	adc	r24, r25
    3648:	9a 1f       	adc	r25, r26
    364a:	a1 1d       	adc	r26, r1
    364c:	68 0f       	add	r22, r24
    364e:	79 1f       	adc	r23, r25
    3650:	8a 1f       	adc	r24, r26
    3652:	91 1d       	adc	r25, r1
    3654:	a1 1d       	adc	r26, r1
    3656:	6a 0f       	add	r22, r26
    3658:	71 1d       	adc	r23, r1
    365a:	81 1d       	adc	r24, r1
    365c:	91 1d       	adc	r25, r1
    365e:	a1 1d       	adc	r26, r1
    3660:	20 d0       	rcall	.+64     	; 0x36a2 <__ultoa_invert+0x84>
    3662:	09 f4       	brne	.+2      	; 0x3666 <__ultoa_invert+0x48>
    3664:	68 94       	set
    3666:	3f 91       	pop	r19
    3668:	2a e0       	ldi	r18, 0x0A	; 10
    366a:	26 9f       	mul	r18, r22
    366c:	11 24       	eor	r1, r1
    366e:	30 19       	sub	r19, r0
    3670:	30 5d       	subi	r19, 0xD0	; 208
    3672:	31 93       	st	Z+, r19
    3674:	de f6       	brtc	.-74     	; 0x362c <__ultoa_invert+0xe>
    3676:	cf 01       	movw	r24, r30
    3678:	08 95       	ret
    367a:	46 2f       	mov	r20, r22
    367c:	47 70       	andi	r20, 0x07	; 7
    367e:	40 5d       	subi	r20, 0xD0	; 208
    3680:	41 93       	st	Z+, r20
    3682:	b3 e0       	ldi	r27, 0x03	; 3
    3684:	0f d0       	rcall	.+30     	; 0x36a4 <__ultoa_invert+0x86>
    3686:	c9 f7       	brne	.-14     	; 0x367a <__ultoa_invert+0x5c>
    3688:	f6 cf       	rjmp	.-20     	; 0x3676 <__ultoa_invert+0x58>
    368a:	46 2f       	mov	r20, r22
    368c:	4f 70       	andi	r20, 0x0F	; 15
    368e:	40 5d       	subi	r20, 0xD0	; 208
    3690:	4a 33       	cpi	r20, 0x3A	; 58
    3692:	18 f0       	brcs	.+6      	; 0x369a <__ultoa_invert+0x7c>
    3694:	49 5d       	subi	r20, 0xD9	; 217
    3696:	31 fd       	sbrc	r19, 1
    3698:	40 52       	subi	r20, 0x20	; 32
    369a:	41 93       	st	Z+, r20
    369c:	02 d0       	rcall	.+4      	; 0x36a2 <__ultoa_invert+0x84>
    369e:	a9 f7       	brne	.-22     	; 0x368a <__ultoa_invert+0x6c>
    36a0:	ea cf       	rjmp	.-44     	; 0x3676 <__ultoa_invert+0x58>
    36a2:	b4 e0       	ldi	r27, 0x04	; 4
    36a4:	a6 95       	lsr	r26
    36a6:	97 95       	ror	r25
    36a8:	87 95       	ror	r24
    36aa:	77 95       	ror	r23
    36ac:	67 95       	ror	r22
    36ae:	ba 95       	dec	r27
    36b0:	c9 f7       	brne	.-14     	; 0x36a4 <__ultoa_invert+0x86>
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	61 05       	cpc	r22, r1
    36b6:	71 05       	cpc	r23, r1
    36b8:	08 95       	ret
    36ba:	9b 01       	movw	r18, r22
    36bc:	ac 01       	movw	r20, r24
    36be:	0a 2e       	mov	r0, r26
    36c0:	06 94       	lsr	r0
    36c2:	57 95       	ror	r21
    36c4:	47 95       	ror	r20
    36c6:	37 95       	ror	r19
    36c8:	27 95       	ror	r18
    36ca:	ba 95       	dec	r27
    36cc:	c9 f7       	brne	.-14     	; 0x36c0 <__ultoa_invert+0xa2>
    36ce:	62 0f       	add	r22, r18
    36d0:	73 1f       	adc	r23, r19
    36d2:	84 1f       	adc	r24, r20
    36d4:	95 1f       	adc	r25, r21
    36d6:	a0 1d       	adc	r26, r0
    36d8:	08 95       	ret

000036da <__muluhisi3>:
    36da:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__umulhisi3>
    36de:	a5 9f       	mul	r26, r21
    36e0:	90 0d       	add	r25, r0
    36e2:	b4 9f       	mul	r27, r20
    36e4:	90 0d       	add	r25, r0
    36e6:	a4 9f       	mul	r26, r20
    36e8:	80 0d       	add	r24, r0
    36ea:	91 1d       	adc	r25, r1
    36ec:	11 24       	eor	r1, r1
    36ee:	08 95       	ret

000036f0 <__umulhisi3>:
    36f0:	a2 9f       	mul	r26, r18
    36f2:	b0 01       	movw	r22, r0
    36f4:	b3 9f       	mul	r27, r19
    36f6:	c0 01       	movw	r24, r0
    36f8:	a3 9f       	mul	r26, r19
    36fa:	70 0d       	add	r23, r0
    36fc:	81 1d       	adc	r24, r1
    36fe:	11 24       	eor	r1, r1
    3700:	91 1d       	adc	r25, r1
    3702:	b2 9f       	mul	r27, r18
    3704:	70 0d       	add	r23, r0
    3706:	81 1d       	adc	r24, r1
    3708:	11 24       	eor	r1, r1
    370a:	91 1d       	adc	r25, r1
    370c:	08 95       	ret

0000370e <_exit>:
    370e:	f8 94       	cli

00003710 <__stop_program>:
    3710:	ff cf       	rjmp	.-2      	; 0x3710 <__stop_program>
