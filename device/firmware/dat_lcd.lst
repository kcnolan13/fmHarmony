
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800100  00003420  000034b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  0080034a  0080034a  000036fe  2**0
                  ALLOC
  3 .stab         0000c348  00000000  00000000  00003700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c67  00000000  00000000  0000fa48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000126af  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_20>
      54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_28>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	21 05       	cpc	r18, r1
      8e:	2b 05       	cpc	r18, r11
      90:	38 05       	cpc	r19, r8
      92:	47 05       	cpc	r20, r7
      94:	56 05       	cpc	r21, r6
      96:	67 05       	cpc	r22, r7
      98:	73 05       	cpc	r23, r3
      9a:	7f 05       	cpc	r23, r15
      9c:	8b 05       	cpc	r24, r11
      9e:	e4 05       	cpc	r30, r4
      a0:	e7 05       	cpc	r30, r7
      a2:	ea 05       	cpc	r30, r10
      a4:	ed 05       	cpc	r30, r13
      a6:	f0 05       	cpc	r31, r0
      a8:	f3 05       	cpc	r31, r3
      aa:	f6 05       	cpc	r31, r6
      ac:	f9 05       	cpc	r31, r9
      ae:	fc 05       	cpc	r31, r12
      b0:	ff 05       	cpc	r31, r15
      b2:	02 06       	cpc	r0, r18
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 05       	cpc	r19, r15
      e2:	a8 4c       	sbci	r26, 0xC8	; 200
      e4:	cd b2       	in	r12, 0x1d	; 29
      e6:	d4 4e       	sbci	r29, 0xE4	; 228
      e8:	b9 38       	cpi	r27, 0x89	; 137
      ea:	36 a9       	ldd	r19, Z+54	; 0x36
      ec:	02 0c       	add	r0, r2
      ee:	50 b9       	out	0x00, r21	; 0
      f0:	91 86       	std	Z+9, r9	; 0x09
      f2:	88 08       	sbc	r8, r8
      f4:	3c a6       	std	Y+44, r3	; 0x2c
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	2a be       	out	0x3a, r2	; 58
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 08       	sbc	r3, r15
     100:	00 00       	nop
     102:	00 be       	out	0x30, r0	; 48
     104:	92 24       	eor	r9, r2
     106:	49 12       	cpse	r4, r25
     108:	3e ab       	std	Y+54, r19	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	cd cc       	rjmp	.-1638   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     110:	cc 4c       	sbci	r28, 0xCC	; 204
     112:	3e 00       	.word	0x003e	; ????
     114:	00 00       	nop
     116:	80 be       	out	0x30, r8	; 48
     118:	ab aa       	std	Y+51, r10	; 0x33
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	00 bf       	out	0x30, r16	; 48
     122:	00 00       	nop
     124:	00 80       	ld	r0, Z
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	08 41       	sbci	r16, 0x18	; 24
     12e:	78 d3       	rcall	.+1776   	; 0x820 <earth_distance+0x11c>
     130:	bb 43       	sbci	r27, 0x3B	; 59
     132:	87 d1       	rcall	.+782    	; 0x442 <database_load+0x76>
     134:	13 3d       	cpi	r17, 0xD3	; 211
     136:	19 0e       	add	r1, r25
     138:	3c c3       	rjmp	.+1656   	; 0x7b2 <earth_distance+0xae>
     13a:	bd 42       	sbci	r27, 0x2D	; 45
     13c:	82 ad       	ldd	r24, Z+58	; 0x3a
     13e:	2b 3e       	cpi	r18, 0xEB	; 235
     140:	68 ec       	ldi	r22, 0xC8	; 200
     142:	82 76       	andi	r24, 0x62	; 98
     144:	be d9       	rcall	.-3204   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     146:	8f e1       	ldi	r24, 0x1F	; 31
     148:	a9 3e       	cpi	r26, 0xE9	; 233
     14a:	4c 80       	ldd	r4, Y+4	; 0x04
     14c:	ef ff       	.word	0xffef	; ????
     14e:	be 01       	movw	r22, r28
     150:	c4 ff       	sbrs	r28, 4
     152:	7f 3f       	cpi	r23, 0xFF	; 255
     154:	00 00       	nop
     156:	00 00       	nop
     158:	00 07       	cpc	r16, r16
     15a:	63 42       	sbci	r22, 0x23	; 35
     15c:	36 b7       	in	r19, 0x36	; 54
     15e:	9b d8       	rcall	.-3786   	; 0xfffff296 <__eeprom_end+0xff7ef296>
     160:	a7 1a       	sub	r10, r23
     162:	39 68       	ori	r19, 0x89	; 137
     164:	56 18       	sub	r5, r6
     166:	ae ba       	out	0x1e, r10	; 30
     168:	ab 55       	subi	r26, 0x5B	; 91
     16a:	8c 1d       	adc	r24, r12
     16c:	3c b7       	in	r19, 0x3c	; 60
     16e:	cc 57       	subi	r28, 0x7C	; 124
     170:	63 bd       	out	0x23, r22	; 35
     172:	6d ed       	ldi	r22, 0xDD	; 221
     174:	fd 75       	andi	r31, 0x5D	; 93
     176:	3e f6       	brtc	.-114    	; 0x106 <__SREG__+0xc7>
     178:	17 72       	andi	r17, 0x27	; 39
     17a:	31 bf       	out	0x31, r19	; 49
     17c:	00 00       	nop
     17e:	00 80       	ld	r0, Z
     180:	3f 4e       	sbci	r19, 0xEF	; 239

00000181 <pstr_nan>:
     181:	4e 41 4e                                            NAN

00000184 <pstr_inity>:
     184:	49 4e 49 54 59                                      INITY

00000189 <pstr_inf>:
     189:	49 4e 46                                            INF

0000018c <pwr_m10>:
     18c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     19c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a4 <pwr_p10>:
     1a4:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b4:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e4       	ldi	r29, 0x40	; 64
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e0 e2       	ldi	r30, 0x20	; 32
     1d0:	f4 e3       	ldi	r31, 0x34	; 52
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	aa 34       	cpi	r26, 0x4A	; 74
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	14 e0       	ldi	r17, 0x04	; 4
     1e4:	aa e4       	ldi	r26, 0x4A	; 74
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a7 35       	cpi	r26, 0x57	; 87
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <main>
     1f6:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     1fe:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
     208:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
     20c:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     210:	e9 ec       	ldi	r30, 0xC9	; 201
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	88 6d       	ori	r24, 0xD8	; 216
     218:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     21a:	e1 ec       	ldi	r30, 0xC1	; 193
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 6d       	ori	r24, 0xD8	; 216
     222:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     224:	e8 ec       	ldi	r30, 0xC8	; 200
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
     22e:	e0 ec       	ldi	r30, 0xC0	; 192
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	82 60       	ori	r24, 0x02	; 2
     236:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     238:	ea ec       	ldi	r30, 0xCA	; 202
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8e 60       	ori	r24, 0x0E	; 14
     240:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     242:	e2 ec       	ldi	r30, 0xC2	; 194
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	86 60       	ori	r24, 0x06	; 6
     24a:	80 83       	st	Z, r24
     24c:	08 95       	ret

0000024e <disable_gps>:

}

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	87 72       	andi	r24, 0x27	; 39
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <__vector_20>:
        rxWritePos = 0;
    }
}

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	0b b6       	in	r0, 0x3b	; 59
     266:	0f 92       	push	r0
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
     280:	80 91 a2 03 	lds	r24, 0x03A2
     284:	90 91 a3 03 	lds	r25, 0x03A3
     288:	81 35       	cpi	r24, 0x51	; 81
     28a:	91 05       	cpc	r25, r1
     28c:	74 f0       	brlt	.+28     	; 0x2aa <__vector_20+0x50>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=0; i<80; i++)
            gps_rxBuffer[i]='\0';
     292:	fc 01       	movw	r30, r24
     294:	ee 5a       	subi	r30, 0xAE	; 174
     296:	fc 4f       	sbci	r31, 0xFC	; 252
     298:	10 82       	st	Z, r1
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
    {
        for (i=0; i<80; i++)
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	80 35       	cpi	r24, 0x50	; 80
     29e:	91 05       	cpc	r25, r1
     2a0:	c1 f7       	brne	.-16     	; 0x292 <__vector_20+0x38>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 0; 
     2a2:	10 92 a3 03 	sts	0x03A3, r1
     2a6:	10 92 a2 03 	sts	0x03A2, r1
    }

    //Read value out of the UART buffer
    gps_rxBuffer[gps_rxCount] = UDR0;
     2aa:	e0 91 a2 03 	lds	r30, 0x03A2
     2ae:	f0 91 a3 03 	lds	r31, 0x03A3
     2b2:	80 91 c6 00 	lds	r24, 0x00C6
     2b6:	ee 5a       	subi	r30, 0xAE	; 174
     2b8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ba:	80 83       	st	Z, r24

    gps_rxCount ++;
     2bc:	80 91 a2 03 	lds	r24, 0x03A2
     2c0:	90 91 a3 03 	lds	r25, 0x03A3
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 a3 03 	sts	0x03A3, r25
     2ca:	80 93 a2 03 	sts	0x03A2, r24

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
     2ce:	e0 91 a2 03 	lds	r30, 0x03A2
     2d2:	f0 91 a3 03 	lds	r31, 0x03A3
     2d6:	ef 5a       	subi	r30, 0xAF	; 175
     2d8:	fc 4f       	sbci	r31, 0xFC	; 252
     2da:	80 81       	ld	r24, Z
     2dc:	84 32       	cpi	r24, 0x24	; 36
     2de:	99 f4       	brne	.+38     	; 0x306 <__vector_20+0xac>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=1; i<80; i++)
            gps_rxBuffer[i]='\0'; 
     2e4:	fc 01       	movw	r30, r24
     2e6:	ee 5a       	subi	r30, 0xAE	; 174
     2e8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ea:	10 82       	st	Z, r1
    gps_rxCount ++;

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
    {
        for (i=1; i<80; i++)
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	80 35       	cpi	r24, 0x50	; 80
     2f0:	91 05       	cpc	r25, r1
     2f2:	c1 f7       	brne	.-16     	; 0x2e4 <__vector_20+0x8a>
            gps_rxBuffer[i]='\0'; 

        gps_rxBuffer[0] = '$';
     2f4:	84 e2       	ldi	r24, 0x24	; 36
     2f6:	80 93 52 03 	sts	0x0352, r24
        gps_rxCount = 1; 
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 a3 03 	sts	0x03A3, r25
     302:	80 93 a2 03 	sts	0x03A2, r24
    }

    //carriage return ----> parse the string and update the gps_data fields
    if ((gps_rxBuffer[gps_rxCount-1]=='\r')) {
     306:	e0 91 a2 03 	lds	r30, 0x03A2
     30a:	f0 91 a3 03 	lds	r31, 0x03A3
     30e:	ef 5a       	subi	r30, 0xAF	; 175
     310:	fc 4f       	sbci	r31, 0xFC	; 252
     312:	80 81       	ld	r24, Z
     314:	8d 30       	cpi	r24, 0x0D	; 13
     316:	79 f5       	brne	.+94     	; 0x376 <__vector_20+0x11c>
        if (tag_check(gps_rxBuffer))
     318:	82 e5       	ldi	r24, 0x52	; 82
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <tag_check>
     320:	89 2b       	or	r24, r25
     322:	49 f1       	breq	.+82     	; 0x376 <__vector_20+0x11c>
        {
            //disable gps interrupts
            disable_gps();
     324:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>

            //strip off the rxBuffer carriage return
            gps_rxBuffer[strlen((char *)gps_rxBuffer)-1] = '\0';
     328:	e2 e5       	ldi	r30, 0x52	; 82
     32a:	f3 e0       	ldi	r31, 0x03	; 3
     32c:	01 90       	ld	r0, Z+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <__vector_20+0xd2>
     332:	32 97       	sbiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1

            //update the application gps_data fields
            parse_nmea(strcat((char *)gps_rxBuffer, ","), gps_data);
     336:	63 e1       	ldi	r22, 0x13	; 19
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	82 e5       	ldi	r24, 0x52	; 82
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <strcat>
     342:	67 e3       	ldi	r22, 0x37	; 55
     344:	74 e0       	ldi	r23, 0x04	; 4
     346:	0e 94 08 0c 	call	0x1810	; 0x1810 <parse_nmea>

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);
     34a:	60 91 b5 03 	lds	r22, 0x03B5
     34e:	70 91 b6 03 	lds	r23, 0x03B6
     352:	87 e3       	ldi	r24, 0x37	; 55
     354:	94 e0       	ldi	r25, 0x04	; 4
     356:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <update_user_gps_data>

            //clear the rxBuffer
            for (i=0; i<80; i++)
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
                gps_rxBuffer[i]='\0';
     35e:	fc 01       	movw	r30, r24
     360:	ee 5a       	subi	r30, 0xAE	; 174
     362:	fc 4f       	sbci	r31, 0xFC	; 252
     364:	10 82       	st	Z, r1

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);

            //clear the rxBuffer
            for (i=0; i<80; i++)
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	80 35       	cpi	r24, 0x50	; 80
     36a:	91 05       	cpc	r25, r1
     36c:	c1 f7       	brne	.-16     	; 0x35e <__vector_20+0x104>
                gps_rxBuffer[i]='\0';
            gps_rxCount = 0;
     36e:	10 92 a3 03 	sts	0x03A3, r1
     372:	10 92 a2 03 	sts	0x03A2, r1
        }
    }
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0b be       	out	0x3b, r0	; 59
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <enable_gps>:
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     39c:	e1 ec       	ldi	r30, 0xC1	; 193
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	88 6d       	ori	r24, 0xD8	; 216
     3a4:	80 83       	st	Z, r24
     3a6:	08 95       	ret

000003a8 <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	84 b9       	out	0x04, r24	; 4
    cli();
     3ac:	f8 94       	cli
    //Init usart
    InitUSART();
     3ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     3b2:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     3b4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	2f e3       	ldi	r18, 0x3F	; 63
     3ba:	8d e0       	ldi	r24, 0x0D	; 13
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <prepare_device+0x16>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <prepare_device+0x20>
     3c8:	00 00       	nop
     3ca:	08 95       	ret

000003cc <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <my_eeprom_read_int>

    if (num_stations==255)
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	91 05       	cpc	r25, r1
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <database_load+0x24>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3e6:	90 93 ae 03 	sts	0x03AE, r25
     3ea:	80 93 ad 03 	sts	0x03AD, r24
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <database_load+0x2c>

    if (num_stations==255)
        num_stations = 0;
     3f0:	10 92 ae 03 	sts	0x03AE, r1
     3f4:	10 92 ad 03 	sts	0x03AD, r1
     3f8:	2f e9       	ldi	r18, 0x9F	; 159
     3fa:	46 e8       	ldi	r20, 0x86	; 134
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	21 50       	subi	r18, 0x01	; 1
     400:	40 40       	sbci	r20, 0x00	; 0
     402:	50 40       	sbci	r21, 0x00	; 0
     404:	e1 f7       	brne	.-8      	; 0x3fe <database_load+0x32>
     406:	00 c0       	rjmp	.+0      	; 0x408 <database_load+0x3c>
     408:	00 00       	nop

    _delay_ms(500);
    lcd_init();
     40a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("importing ");
     40e:	85 e1       	ldi	r24, 0x15	; 21
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    string_write_int(num_stations,3);
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 91 ad 03 	lds	r24, 0x03AD
     41e:	90 91 ae 03 	lds	r25, 0x03AE
     422:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
    string_write("\nstations...");
     426:	80 e2       	ldi	r24, 0x20	; 32
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     42e:	80 91 ad 03 	lds	r24, 0x03AD
     432:	90 91 ae 03 	lds	r25, 0x03AE
     436:	2c e1       	ldi	r18, 0x1C	; 28
     438:	fc 01       	movw	r30, r24
     43a:	2e 9f       	mul	r18, r30
     43c:	c0 01       	movw	r24, r0
     43e:	2f 9f       	mul	r18, r31
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	0e 94 f5 13 	call	0x27ea	; 0x27ea <malloc>
     448:	90 93 b4 03 	sts	0x03B4, r25
     44c:	80 93 b3 03 	sts	0x03B3, r24

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	80 91 ad 03 	lds	r24, 0x03AD
     45c:	90 91 ae 03 	lds	r25, 0x03AE
     460:	08 17       	cp	r16, r24
     462:	19 07       	cpc	r17, r25
     464:	0c f0       	brlt	.+2      	; 0x468 <database_load+0x9c>
     466:	5c c0       	rjmp	.+184    	; 0x520 <database_load+0x154>
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     46e:	80 91 b3 03 	lds	r24, 0x03B3
     472:	90 91 b4 03 	lds	r25, 0x03B4
     476:	48 e0       	ldi	r20, 0x08	; 8
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	8c 0f       	add	r24, r28
     47c:	9d 1f       	adc	r25, r29
     47e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <my_eeprom_read_string>
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     482:	e0 90 b3 03 	lds	r14, 0x03B3
     486:	f0 90 b4 03 	lds	r15, 0x03B4
     48a:	ec 0e       	add	r14, r28
     48c:	fd 1e       	adc	r15, r29
     48e:	ce 01       	movw	r24, r28
     490:	09 96       	adiw	r24, 0x09	; 9
     492:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <my_eeprom_read_float>
     496:	f7 01       	movw	r30, r14
     498:	60 87       	std	Z+8, r22	; 0x08
     49a:	71 87       	std	Z+9, r23	; 0x09
     49c:	82 87       	std	Z+10, r24	; 0x0a
     49e:	93 87       	std	Z+11, r25	; 0x0b
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     4a0:	e0 90 b3 03 	lds	r14, 0x03B3
     4a4:	f0 90 b4 03 	lds	r15, 0x03B4
     4a8:	ec 0e       	add	r14, r28
     4aa:	fd 1e       	adc	r15, r29
     4ac:	ce 01       	movw	r24, r28
     4ae:	0d 96       	adiw	r24, 0x0d	; 13
     4b0:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <my_eeprom_read_float>
     4b4:	f7 01       	movw	r30, r14
     4b6:	64 87       	std	Z+12, r22	; 0x0c
     4b8:	75 87       	std	Z+13, r23	; 0x0d
     4ba:	86 87       	std	Z+14, r24	; 0x0e
     4bc:	97 87       	std	Z+15, r25	; 0x0f
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     4be:	e0 90 b3 03 	lds	r14, 0x03B3
     4c2:	f0 90 b4 03 	lds	r15, 0x03B4
     4c6:	ec 0e       	add	r14, r28
     4c8:	fd 1e       	adc	r15, r29
     4ca:	ce 01       	movw	r24, r28
     4cc:	41 96       	adiw	r24, 0x11	; 17
     4ce:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <my_eeprom_read_float>
     4d2:	f7 01       	movw	r30, r14
     4d4:	60 8b       	std	Z+16, r22	; 0x10
     4d6:	71 8b       	std	Z+17, r23	; 0x11
     4d8:	82 8b       	std	Z+18, r24	; 0x12
     4da:	93 8b       	std	Z+19, r25	; 0x13
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     4dc:	e0 90 b3 03 	lds	r14, 0x03B3
     4e0:	f0 90 b4 03 	lds	r15, 0x03B4
     4e4:	ec 0e       	add	r14, r28
     4e6:	fd 1e       	adc	r15, r29
     4e8:	ce 01       	movw	r24, r28
     4ea:	45 96       	adiw	r24, 0x15	; 21
     4ec:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <my_eeprom_read_float>
     4f0:	f7 01       	movw	r30, r14
     4f2:	64 8b       	std	Z+20, r22	; 0x14
     4f4:	75 8b       	std	Z+21, r23	; 0x15
     4f6:	86 8b       	std	Z+22, r24	; 0x16
     4f8:	97 8b       	std	Z+23, r25	; 0x17
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     4fa:	e0 90 b3 03 	lds	r14, 0x03B3
     4fe:	f0 90 b4 03 	lds	r15, 0x03B4
     502:	ec 0e       	add	r14, r28
     504:	fd 1e       	adc	r15, r29
     506:	ce 01       	movw	r24, r28
     508:	49 96       	adiw	r24, 0x19	; 25
     50a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <my_eeprom_read_float>
     50e:	f7 01       	movw	r30, r14
     510:	60 8f       	std	Z+24, r22	; 0x18
     512:	71 8f       	std	Z+25, r23	; 0x19
     514:	82 8f       	std	Z+26, r24	; 0x1a
     516:	93 8f       	std	Z+27, r25	; 0x1b

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     518:	0f 5f       	subi	r16, 0xFF	; 255
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	6c 96       	adiw	r28, 0x1c	; 28
     51e:	9c cf       	rjmp	.-200    	; 0x458 <database_load+0x8c>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	08 95       	ret

0000052e <database_free>:

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     52e:	10 92 ae 03 	sts	0x03AE, r1
     532:	10 92 ad 03 	sts	0x03AD, r1

    free(all_stations);
     536:	80 91 b3 03 	lds	r24, 0x03B3
     53a:	90 91 b4 03 	lds	r25, 0x03B4
     53e:	0e 94 8d 14 	call	0x291a	; 0x291a <free>
    all_stations = NULL;
     542:	10 92 b4 03 	sts	0x03B4, r1
     546:	10 92 b3 03 	sts	0x03B3, r1
     54a:	08 95       	ret

0000054c <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     54c:	80 91 a8 03 	lds	r24, 0x03A8
     550:	90 91 01 01 	lds	r25, 0x0101
     554:	89 13       	cpse	r24, r25
     556:	0c c0       	rjmp	.+24     	; 0x570 <detectSerialStart+0x24>
     558:	20 91 a9 03 	lds	r18, 0x03A9
     55c:	28 13       	cpse	r18, r24
     55e:	08 c0       	rjmp	.+16     	; 0x570 <detectSerialStart+0x24>
     560:	30 91 aa 03 	lds	r19, 0x03AA
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	32 17       	cp	r19, r18
     56a:	21 f0       	breq	.+8      	; 0x574 <detectSerialStart+0x28>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret
        return 1;
    else
        return 0;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
}
     574:	08 95       	ret

00000576 <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	0b b6       	in	r0, 0x3b	; 59
     582:	0f 92       	push	r0
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     59c:	80 91 a9 03 	lds	r24, 0x03A9
     5a0:	80 93 aa 03 	sts	0x03AA, r24
    serial_history[1] = serial_history[0];
     5a4:	80 91 a8 03 	lds	r24, 0x03A8
     5a8:	80 93 a9 03 	sts	0x03A9, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     5ac:	80 91 ce 00 	lds	r24, 0x00CE
     5b0:	80 93 a8 03 	sts	0x03A8, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     5b4:	80 91 50 03 	lds	r24, 0x0350
     5b8:	90 91 51 03 	lds	r25, 0x0351
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	69 f4       	brne	.+26     	; 0x5da <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     5c0:	e0 91 ab 03 	lds	r30, 0x03AB
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 91 a8 03 	lds	r24, 0x03A8
     5ca:	e9 54       	subi	r30, 0x49	; 73
     5cc:	fc 4f       	sbci	r31, 0xFC	; 252
     5ce:	80 83       	st	Z, r24
        rxWritePos++;
     5d0:	80 91 ab 03 	lds	r24, 0x03AB
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	80 93 ab 03 	sts	0x03AB, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     5da:	0e 94 a6 02 	call	0x54c	; 0x54c <detectSerialStart>
     5de:	89 2b       	or	r24, r25
     5e0:	31 f0       	breq	.+12     	; 0x5ee <__vector_28+0x78>
        op_mode = MD_UPDATE;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	90 93 51 03 	sts	0x0351, r25
     5ea:	80 93 50 03 	sts	0x0350, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     5ee:	80 91 ab 03 	lds	r24, 0x03AB
     5f2:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     5f4:	10 92 ab 03 	sts	0x03AB, r1
    }
}
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	7f 91       	pop	r23
     606:	6f 91       	pop	r22
     608:	5f 91       	pop	r21
     60a:	4f 91       	pop	r20
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0b be       	out	0x3b, r0	; 59
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     61e:	80 91 a8 03 	lds	r24, 0x03A8
     622:	90 91 00 01 	lds	r25, 0x0100
     626:	89 13       	cpse	r24, r25
     628:	0c c0       	rjmp	.+24     	; 0x642 <detectSerialEnd+0x24>
     62a:	20 91 a9 03 	lds	r18, 0x03A9
     62e:	28 13       	cpse	r18, r24
     630:	08 c0       	rjmp	.+16     	; 0x642 <detectSerialEnd+0x24>
     632:	30 91 aa 03 	lds	r19, 0x03AA
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	32 17       	cp	r19, r18
     63c:	21 f0       	breq	.+8      	; 0x646 <detectSerialEnd+0x28>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
        return 1;
    else
        return 0;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
}
     646:	08 95       	ret

00000648 <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     648:	e0 91 ac 03 	lds	r30, 0x03AC
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	e9 54       	subi	r30, 0x49	; 73
     650:	fc 4f       	sbci	r31, 0xFC	; 252
     652:	80 81       	ld	r24, Z
     
    rxReadPos++;
     654:	90 91 ac 03 	lds	r25, 0x03AC
     658:	9f 5f       	subi	r25, 0xFF	; 255
     65a:	90 93 ac 03 	sts	0x03AC, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     65e:	90 91 ac 03 	lds	r25, 0x03AC
     662:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     664:	10 92 ac 03 	sts	0x03AC, r1
    }
    
    return ret;
}
     668:	08 95       	ret

0000066a <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     66a:	90 91 ac 03 	lds	r25, 0x03AC
     66e:	80 91 ab 03 	lds	r24, 0x03AB
     672:	98 17       	cp	r25, r24
     674:	39 f0       	breq	.+14     	; 0x684 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     676:	e0 91 ac 03 	lds	r30, 0x03AC
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e9 54       	subi	r30, 0x49	; 73
     67e:	fc 4f       	sbci	r31, 0xFC	; 252
     680:	80 81       	ld	r24, Z
     682:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     684:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     686:	08 95       	ret

00000688 <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     68e:	10 92 51 03 	sts	0x0351, r1
     692:	10 92 50 03 	sts	0x0350, r1
    updating = 0;
     696:	10 92 4d 03 	sts	0x034D, r1
     69a:	10 92 4c 03 	sts	0x034C, r1
    serial_timer = 0;
     69e:	10 92 a4 03 	sts	0x03A4, r1
     6a2:	10 92 a5 03 	sts	0x03A5, r1
     6a6:	10 92 a6 03 	sts	0x03A6, r1
     6aa:	10 92 a7 03 	sts	0x03A7, r1

    //import the new database
    lcd_init();
     6ae:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>

    if (flag==FL_SUCCESS)
     6b2:	20 97       	sbiw	r28, 0x00	; 0
     6b4:	19 f4       	brne	.+6      	; 0x6bc <terminate_serial+0x34>
        string_write("reading\ndatabase ...");
     6b6:	8d e2       	ldi	r24, 0x2D	; 45
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     6bc:	82 e4       	ldi	r24, 0x42	; 66
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>

    database_load();
     6c4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <database_load>
     6c8:	2f e3       	ldi	r18, 0x3F	; 63
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <terminate_serial+0x46>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <terminate_serial+0x50>
     6d8:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
     6da:	21 97       	sbiw	r28, 0x01	; 1
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <terminate_serial+0x5e>
        string_write("\nupdate failed\n");
     6de:	85 e5       	ldi	r24, 0x55	; 85
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     6e6:	2f e9       	ldi	r18, 0x9F	; 159
     6e8:	86 e8       	ldi	r24, 0x86	; 134
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <terminate_serial+0x64>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <terminate_serial+0x6e>
     6f6:	00 00       	nop

    _delay_ms(500);
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <get_nearest_station>:

int get_nearest_station(float lat, float lon)
{

    return -1;
}
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	9f ef       	ldi	r25, 0xFF	; 255
     702:	08 95       	ret

00000704 <earth_distance>:

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
     704:	4f 92       	push	r4
     706:	5f 92       	push	r5
     708:	6f 92       	push	r6
     70a:	7f 92       	push	r7
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	60 97       	sbiw	r28, 0x10	; 16
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	2b 01       	movw	r4, r22
     736:	3c 01       	movw	r6, r24
     738:	29 87       	std	Y+9, r18	; 0x09
     73a:	3a 87       	std	Y+10, r19	; 0x0a
     73c:	4b 87       	std	Y+11, r20	; 0x0b
     73e:	5c 87       	std	Y+12, r21	; 0x0c
     740:	e9 82       	std	Y+1, r14	; 0x01
     742:	fa 82       	std	Y+2, r15	; 0x02
     744:	0b 83       	std	Y+3, r16	; 0x03
     746:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	c8 01       	movw	r24, r16
     74e:	b7 01       	movw	r22, r14
     750:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__subsf3>
    return (float)distance;
}

double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     754:	2b ed       	ldi	r18, 0xDB	; 219
     756:	3f e0       	ldi	r19, 0x0F	; 15
     758:	49 e4       	ldi	r20, 0x49	; 73
     75a:	50 e4       	ldi	r21, 0x40	; 64
     75c:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	44 e3       	ldi	r20, 0x34	; 52
     766:	53 e4       	ldi	r21, 0x43	; 67
     768:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	5f e3       	ldi	r21, 0x3F	; 63
     774:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     778:	0e 94 01 13 	call	0x2602	; 0x2602 <sin>
     77c:	6d 83       	std	Y+5, r22	; 0x05
     77e:	7e 83       	std	Y+6, r23	; 0x06
     780:	8f 83       	std	Y+7, r24	; 0x07
     782:	98 87       	std	Y+8, r25	; 0x08
    return (float)distance;
}

double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     784:	2b ed       	ldi	r18, 0xDB	; 219
     786:	3f e0       	ldi	r19, 0x0F	; 15
     788:	49 e4       	ldi	r20, 0x49	; 73
     78a:	50 e4       	ldi	r21, 0x40	; 64
     78c:	c3 01       	movw	r24, r6
     78e:	b2 01       	movw	r22, r4
     790:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	44 e3       	ldi	r20, 0x34	; 52
     79a:	53 e4       	ldi	r21, 0x43	; 67
     79c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     7a0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <cos>
     7a4:	2b 01       	movw	r4, r22
     7a6:	3c 01       	movw	r6, r24
    return (float)distance;
}

double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     7a8:	2b ed       	ldi	r18, 0xDB	; 219
     7aa:	3f e0       	ldi	r19, 0x0F	; 15
     7ac:	49 e4       	ldi	r20, 0x49	; 73
     7ae:	50 e4       	ldi	r21, 0x40	; 64
     7b0:	c8 01       	movw	r24, r16
     7b2:	b7 01       	movw	r22, r14
     7b4:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	44 e3       	ldi	r20, 0x34	; 52
     7be:	53 e4       	ldi	r21, 0x43	; 67
     7c0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     7c4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <cos>
     7c8:	69 83       	std	Y+1, r22	; 0x01
     7ca:	7a 83       	std	Y+2, r23	; 0x02
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
     7d0:	29 85       	ldd	r18, Y+9	; 0x09
     7d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d4:	4b 85       	ldd	r20, Y+11	; 0x0b
     7d6:	5c 85       	ldd	r21, Y+12	; 0x0c
     7d8:	c6 01       	movw	r24, r12
     7da:	b5 01       	movw	r22, r10
     7dc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__subsf3>
    return (float)distance;
}

double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     7e0:	2b ed       	ldi	r18, 0xDB	; 219
     7e2:	3f e0       	ldi	r19, 0x0F	; 15
     7e4:	49 e4       	ldi	r20, 0x49	; 73
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	44 e3       	ldi	r20, 0x34	; 52
     7f2:	53 e4       	ldi	r21, 0x43	; 67
     7f4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	5f e3       	ldi	r21, 0x3F	; 63
     800:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     804:	0e 94 01 13 	call	0x2602	; 0x2602 <sin>
     808:	4b 01       	movw	r8, r22
     80a:	5c 01       	movw	r10, r24
     80c:	2d 81       	ldd	r18, Y+5	; 0x05
     80e:	3e 81       	ldd	r19, Y+6	; 0x06
     810:	4f 81       	ldd	r20, Y+7	; 0x07
     812:	58 85       	ldd	r21, Y+8	; 0x08
     814:	ca 01       	movw	r24, r20
     816:	b9 01       	movw	r22, r18
     818:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
     820:	29 81       	ldd	r18, Y+1	; 0x01
     822:	3a 81       	ldd	r19, Y+2	; 0x02
     824:	4b 81       	ldd	r20, Y+3	; 0x03
     826:	5c 81       	ldd	r21, Y+4	; 0x04
     828:	c3 01       	movw	r24, r6
     82a:	b2 01       	movw	r22, r4
     82c:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     830:	a5 01       	movw	r20, r10
     832:	94 01       	movw	r18, r8
     834:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     838:	a5 01       	movw	r20, r10
     83a:	94 01       	movw	r18, r8
     83c:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>
     84c:	6b 01       	movw	r12, r22
     84e:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	80 e8       	ldi	r24, 0x80	; 128
     85a:	9f e3       	ldi	r25, 0x3F	; 63
     85c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__subsf3>
     860:	0e 94 0b 13 	call	0x2616	; 0x2616 <sqrt>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	2d 87       	std	Y+13, r18	; 0x0d
     86e:	3e 87       	std	Y+14, r19	; 0x0e
     870:	4f 87       	std	Y+15, r20	; 0x0f
     872:	58 8b       	std	Y+16, r21	; 0x10
     874:	0e 94 0b 13 	call	0x2616	; 0x2616 <sqrt>
     878:	2d 85       	ldd	r18, Y+13	; 0x0d
     87a:	3e 85       	ldd	r19, Y+14	; 0x0e
     87c:	4f 85       	ldd	r20, Y+15	; 0x0f
     87e:	58 89       	ldd	r21, Y+16	; 0x10
     880:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <atan2>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>
    double distance = R*c;
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	38 e1       	ldi	r19, 0x18	; 24
     890:	47 ec       	ldi	r20, 0xC7	; 199
     892:	55 e4       	ldi	r21, 0x45	; 69
     894:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>

    return (float)distance;
}
     898:	60 96       	adiw	r28, 0x10	; 16
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	5f 90       	pop	r5
     8c2:	4f 90       	pop	r4
     8c4:	08 95       	ret

000008c6 <to_radians>:

double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
     8c6:	2b ed       	ldi	r18, 0xDB	; 219
     8c8:	3f e0       	ldi	r19, 0x0F	; 15
     8ca:	49 e4       	ldi	r20, 0x49	; 73
     8cc:	50 e4       	ldi	r21, 0x40	; 64
     8ce:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	44 e3       	ldi	r20, 0x34	; 52
     8d8:	53 e4       	ldi	r21, 0x43	; 67
     8da:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
}
     8de:	08 95       	ret

000008e0 <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	8c 01       	movw	r16, r24
     8ea:	eb 01       	movw	r28, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     8ec:	6f 3f       	cpi	r22, 0xFF	; 255
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	78 07       	cpc	r23, r24
     8f2:	59 f4       	brne	.+22     	; 0x90a <print_eeprom_contents+0x2a>
        end_addr = 1+num_stations*STATION_BLOCKSIZE;
     8f4:	80 91 ad 03 	lds	r24, 0x03AD
     8f8:	90 91 ae 03 	lds	r25, 0x03AE
     8fc:	2c e1       	ldi	r18, 0x1C	; 28
     8fe:	28 9f       	mul	r18, r24
     900:	e0 01       	movw	r28, r0
     902:	29 9f       	mul	r18, r25
     904:	d0 0d       	add	r29, r0
     906:	11 24       	eor	r1, r1
     908:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
     90a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     90e:	0c 17       	cp	r16, r28
     910:	1d 07       	cpc	r17, r29
     912:	bc f4       	brge	.+46     	; 0x942 <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     914:	80 91 50 03 	lds	r24, 0x0350
     918:	90 91 51 03 	lds	r25, 0x0351
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	89 f0       	breq	.+34     	; 0x942 <print_eeprom_contents+0x62>
        one_byte = my_eeprom_read_char(i);
     920:	c8 01       	movw	r24, r16
     922:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <my_eeprom_read_char>
        if (one_byte == '\0')
     926:	81 11       	cpse	r24, r1
     928:	01 c0       	rjmp	.+2      	; 0x92c <print_eeprom_contents+0x4c>
            one_byte = '?';
     92a:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     92c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
     930:	87 ea       	ldi	r24, 0xA7	; 167
     932:	91 e6       	ldi	r25, 0x61	; 97
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	f1 f7       	brne	.-4      	; 0x934 <print_eeprom_contents+0x54>
     938:	00 c0       	rjmp	.+0      	; 0x93a <print_eeprom_contents+0x5a>
     93a:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     93c:	0f 5f       	subi	r16, 0xFF	; 255
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	e6 cf       	rjmp	.-52     	; 0x90e <print_eeprom_contents+0x2e>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     952:	c0 e0       	ldi	r28, 0x00	; 0
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	1c e1       	ldi	r17, 0x1C	; 28
     958:	20 91 ad 03 	lds	r18, 0x03AD
     95c:	30 91 ae 03 	lds	r19, 0x03AE
     960:	12 9f       	mul	r17, r18
     962:	c0 01       	movw	r24, r0
     964:	13 9f       	mul	r17, r19
     966:	90 0d       	add	r25, r0
     968:	11 24       	eor	r1, r1
     96a:	c8 17       	cp	r28, r24
     96c:	d9 07       	cpc	r29, r25
     96e:	b4 f4       	brge	.+44     	; 0x99c <print_eeprom_station_contents+0x50>
    {
        if (op_mode==MD_UPDATE) return;
     970:	80 91 50 03 	lds	r24, 0x0350
     974:	90 91 51 03 	lds	r25, 0x0351
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	81 f0       	breq	.+32     	; 0x99c <print_eeprom_station_contents+0x50>
        one_byte = my_eeprom_read_char(start+i);
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <my_eeprom_read_char>
        if (one_byte == '\0')
     984:	81 11       	cpse	r24, r1
     986:	01 c0       	rjmp	.+2      	; 0x98a <print_eeprom_station_contents+0x3e>
            one_byte = '?';
     988:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     98a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
     98e:	87 ea       	ldi	r24, 0xA7	; 167
     990:	91 e6       	ldi	r25, 0x61	; 97
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <print_eeprom_station_contents+0x46>
     996:	00 c0       	rjmp	.+0      	; 0x998 <print_eeprom_station_contents+0x4c>
     998:	00 00       	nop
     99a:	de cf       	rjmp	.-68     	; 0x958 <print_eeprom_station_contents+0xc>
        _delay_ms(100);
    }
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	08 95       	ret

000009a4 <wait_for_update>:
    }
}

void wait_for_update(void)
{
    lcd_init();
     9a4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("update required\n...feed me...");
     9a8:	85 e6       	ldi	r24, 0x65	; 101
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     9b0:	80 91 50 03 	lds	r24, 0x0350
     9b4:	90 91 51 03 	lds	r25, 0x0351
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <wait_for_update+0xc>
    }
}
     9bc:	08 95       	ret

000009be <print_gps_data>:
    _delay_ms(2000);
}

//print the formatted data stored in the UserData struct to the screen
void print_gps_data(void)
{
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     9c2:	80 91 50 03 	lds	r24, 0x0350
     9c6:	90 91 51 03 	lds	r25, 0x0351
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <print_gps_data+0x12>
     9ce:	c4 c0       	rjmp	.+392    	; 0xb58 <print_gps_data+0x19a>
    lcd_init();
     9d0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("Printing\nGPS Data");
     9d4:	83 e8       	ldi	r24, 0x83	; 131
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     9dc:	2f e3       	ldi	r18, 0x3F	; 63
     9de:	8d e0       	ldi	r24, 0x0D	; 13
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	21 50       	subi	r18, 0x01	; 1
     9e4:	80 40       	sbci	r24, 0x00	; 0
     9e6:	90 40       	sbci	r25, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <print_gps_data+0x24>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <print_gps_data+0x2e>
     9ec:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     9ee:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     9f6:	20 97       	sbiw	r28, 0x00	; 0
     9f8:	69 f0       	breq	.+26     	; 0xa14 <print_gps_data+0x56>
            string_write("\n");
     9fa:	8e ef       	ldi	r24, 0xFE	; 254
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>

        switch (i)
     a02:	fe 01       	movw	r30, r28
     a04:	32 97       	sbiw	r30, 0x02	; 2
     a06:	e9 30       	cpi	r30, 0x09	; 9
     a08:	f1 05       	cpc	r31, r1
     a0a:	78 f4       	brcc	.+30     	; 0xa2a <print_gps_data+0x6c>
     a0c:	ea 5b       	subi	r30, 0xBA	; 186
     a0e:	ff 4f       	sbci	r31, 0xFF	; 255
     a10:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
     a14:	85 e9       	ldi	r24, 0x95	; 149
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_numchars(user->msg_type,8);
     a1c:	68 e0       	ldi	r22, 0x08	; 8
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 91 b5 03 	lds	r24, 0x03B5
     a24:	90 91 b6 03 	lds	r25, 0x03B6
     a28:	81 c0       	rjmp	.+258    	; 0xb2c <print_gps_data+0x16e>
            break;

            case 1:
                string_write("Time: ");
     a2a:	8f e9       	ldi	r24, 0x9F	; 159
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_numchars(user->utc_time,8);
     a32:	80 91 b5 03 	lds	r24, 0x03B5
     a36:	90 91 b6 03 	lds	r25, 0x03B6
     a3a:	68 e0       	ldi	r22, 0x08	; 8
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	08 96       	adiw	r24, 0x08	; 8
     a40:	75 c0       	rjmp	.+234    	; 0xb2c <print_gps_data+0x16e>
            break;

            case 2:
                string_write("NRW: ");
     a42:	86 ea       	ldi	r24, 0xA6	; 166
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                char_write(user->nrw);
     a4a:	e0 91 b5 03 	lds	r30, 0x03B5
     a4e:	f0 91 b6 03 	lds	r31, 0x03B6
     a52:	80 89       	ldd	r24, Z+16	; 0x10
     a54:	5d c0       	rjmp	.+186    	; 0xb10 <print_gps_data+0x152>
            break;

            case 3:
                string_write("Lat: ");
     a56:	8c ea       	ldi	r24, 0xAC	; 172
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_float(user->lat,4);
     a5e:	e0 91 b5 03 	lds	r30, 0x03B5
     a62:	f0 91 b6 03 	lds	r31, 0x03B6
     a66:	61 89       	ldd	r22, Z+17	; 0x11
     a68:	72 89       	ldd	r23, Z+18	; 0x12
     a6a:	83 89       	ldd	r24, Z+19	; 0x13
     a6c:	94 89       	ldd	r25, Z+20	; 0x14
     a6e:	0c c0       	rjmp	.+24     	; 0xa88 <print_gps_data+0xca>
            break;

            case 4:
                string_write("Lon: ");
     a70:	82 eb       	ldi	r24, 0xB2	; 178
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_float(user->lon,4);
     a78:	e0 91 b5 03 	lds	r30, 0x03B5
     a7c:	f0 91 b6 03 	lds	r31, 0x03B6
     a80:	65 89       	ldd	r22, Z+21	; 0x15
     a82:	76 89       	ldd	r23, Z+22	; 0x16
     a84:	87 89       	ldd	r24, Z+23	; 0x17
     a86:	90 8d       	ldd	r25, Z+24	; 0x18
     a88:	44 e0       	ldi	r20, 0x04	; 4
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	1d c0       	rjmp	.+58     	; 0xac8 <print_gps_data+0x10a>
            break;

            case 5:
                string_write("Speed: ");
     a8e:	88 eb       	ldi	r24, 0xB8	; 184
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_float(user->speed,1);
     a96:	e0 91 b5 03 	lds	r30, 0x03B5
     a9a:	f0 91 b6 03 	lds	r31, 0x03B6
     a9e:	61 8d       	ldd	r22, Z+25	; 0x19
     aa0:	72 8d       	ldd	r23, Z+26	; 0x1a
     aa2:	83 8d       	ldd	r24, Z+27	; 0x1b
     aa4:	94 8d       	ldd	r25, Z+28	; 0x1c
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	0e c0       	rjmp	.+28     	; 0xac8 <print_gps_data+0x10a>
            break;

            case 6:
                string_write("Course: ");
     aac:	80 ec       	ldi	r24, 0xC0	; 192
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_float(user->course,3);
     ab4:	e0 91 b5 03 	lds	r30, 0x03B5
     ab8:	f0 91 b6 03 	lds	r31, 0x03B6
     abc:	65 8d       	ldd	r22, Z+29	; 0x1d
     abe:	76 8d       	ldd	r23, Z+30	; 0x1e
     ac0:	87 8d       	ldd	r24, Z+31	; 0x1f
     ac2:	90 a1       	ldd	r25, Z+32	; 0x20
     ac4:	43 e0       	ldi	r20, 0x03	; 3
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
     acc:	31 c0       	rjmp	.+98     	; 0xb30 <print_gps_data+0x172>
            break;

            case 7:
                string_write("Date: ");
     ace:	89 ec       	ldi	r24, 0xC9	; 201
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_numchars(user->date,8);
     ad6:	80 91 b5 03 	lds	r24, 0x03B5
     ada:	90 91 b6 03 	lds	r25, 0x03B6
     ade:	68 e0       	ldi	r22, 0x08	; 8
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	81 96       	adiw	r24, 0x21	; 33
     ae4:	23 c0       	rjmp	.+70     	; 0xb2c <print_gps_data+0x16e>
            break;

            case 8:
                string_write("MagVar: ");
     ae6:	80 ed       	ldi	r24, 0xD0	; 208
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_numchars(user->mag_var,8);
     aee:	80 91 b5 03 	lds	r24, 0x03B5
     af2:	90 91 b6 03 	lds	r25, 0x03B6
     af6:	68 e0       	ldi	r22, 0x08	; 8
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	89 96       	adiw	r24, 0x29	; 41
     afc:	17 c0       	rjmp	.+46     	; 0xb2c <print_gps_data+0x16e>
            break;

            case 9:
                string_write("Mode: ");
     afe:	89 ed       	ldi	r24, 0xD9	; 217
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                char_write(user->mode);
     b06:	e0 91 b5 03 	lds	r30, 0x03B5
     b0a:	f0 91 b6 03 	lds	r31, 0x03B6
     b0e:	81 a9       	ldd	r24, Z+49	; 0x31
     b10:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
     b14:	0d c0       	rjmp	.+26     	; 0xb30 <print_gps_data+0x172>
            break;

            case 10:
                string_write("Checksum: ");
     b16:	80 ee       	ldi	r24, 0xE0	; 224
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_numchars(user->checksum,3);
     b1e:	80 91 b5 03 	lds	r24, 0x03B5
     b22:	90 91 b6 03 	lds	r25, 0x03B6
     b26:	63 e0       	ldi	r22, 0x03	; 3
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	c2 96       	adiw	r24, 0x32	; 50
     b2c:	0e 94 86 0b 	call	0x170c	; 0x170c <string_write_numchars>
     b30:	2f e3       	ldi	r18, 0x3F	; 63
     b32:	8d e0       	ldi	r24, 0x0D	; 13
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <print_gps_data+0x178>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <print_gps_data+0x182>
     b40:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
     b42:	80 91 50 03 	lds	r24, 0x0350
     b46:	90 91 51 03 	lds	r25, 0x0351
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	29 f0       	breq	.+10     	; 0xb58 <print_gps_data+0x19a>
    lcd_init();
    string_write("Printing\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
     b4e:	21 96       	adiw	r28, 0x01	; 1
     b50:	cb 30       	cpi	r28, 0x0B	; 11
     b52:	d1 05       	cpc	r29, r1
     b54:	09 f0       	breq	.+2      	; 0xb58 <print_gps_data+0x19a>
     b56:	4f cf       	rjmp	.-354    	; 0x9f6 <print_gps_data+0x38>
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
    }
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(void)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     b66:	80 91 50 03 	lds	r24, 0x0350
     b6a:	90 91 51 03 	lds	r25, 0x0351
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	09 f4       	brne	.+2      	; 0xb74 <print_raw_gps_data+0x16>
     b72:	6a c0       	rjmp	.+212    	; 0xc48 <print_raw_gps_data+0xea>
    lcd_init();
     b74:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("Printing Raw\nGPS Data");
     b78:	8b ee       	ldi	r24, 0xEB	; 235
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     b80:	2f e3       	ldi	r18, 0x3F	; 63
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	21 50       	subi	r18, 0x01	; 1
     b88:	80 40       	sbci	r24, 0x00	; 0
     b8a:	90 40       	sbci	r25, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <print_raw_gps_data+0x28>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <print_raw_gps_data+0x32>
     b90:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     b92:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
     b96:	07 e3       	ldi	r16, 0x37	; 55
     b98:	14 e0       	ldi	r17, 0x04	; 4
    int i=0;
    for (i=0; i<13; i++)
     b9a:	c0 e0       	ldi	r28, 0x00	; 0
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     b9e:	20 97       	sbiw	r28, 0x00	; 0
     ba0:	69 f0       	breq	.+26     	; 0xbbc <print_raw_gps_data+0x5e>
            string_write("\n");
     ba2:	8e ef       	ldi	r24, 0xFE	; 254
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>

        switch (i)
     baa:	fe 01       	movw	r30, r28
     bac:	32 97       	sbiw	r30, 0x02	; 2
     bae:	eb 30       	cpi	r30, 0x0B	; 11
     bb0:	f1 05       	cpc	r31, r1
     bb2:	38 f4       	brcc	.+14     	; 0xbc2 <print_raw_gps_data+0x64>
     bb4:	e1 5b       	subi	r30, 0xB1	; 177
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__tablejump2__>
        {
            case 0:
                string_write("Message");
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	23 c0       	rjmp	.+70     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 1:
                string_write("Time");
     bc2:	89 e0       	ldi	r24, 0x09	; 9
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	20 c0       	rjmp	.+64     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 2:
                string_write("NRW");
     bc8:	8e e0       	ldi	r24, 0x0E	; 14
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 3:
                string_write("Lat");
     bce:	82 e1       	ldi	r24, 0x12	; 18
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	1a c0       	rjmp	.+52     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 4:
                string_write("N/S");
     bd4:	86 e1       	ldi	r24, 0x16	; 22
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	17 c0       	rjmp	.+46     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 5:
                string_write("Lon");
     bda:	8a e1       	ldi	r24, 0x1A	; 26
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	14 c0       	rjmp	.+40     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 6:
                string_write("E/W");
     be0:	8e e1       	ldi	r24, 0x1E	; 30
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	11 c0       	rjmp	.+34     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 7:
                string_write("Speed");
     be6:	82 e2       	ldi	r24, 0x22	; 34
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 8:
                string_write("Course");
     bec:	88 e2       	ldi	r24, 0x28	; 40
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 9:
                string_write("Date");
     bf2:	8f e2       	ldi	r24, 0x2F	; 47
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 10:
                string_write("MagVar");
     bf8:	84 e3       	ldi	r24, 0x34	; 52
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 11:
                string_write("Mode");
     bfe:	8b e3       	ldi	r24, 0x3B	; 59
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <print_raw_gps_data+0xaa>
            break;

            case 12:
                string_write("Checksum");
     c04:	80 e4       	ldi	r24, 0x40	; 64
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
            break;
        }

        string_write(": ");
     c0c:	8f e8       	ldi	r24, 0x8F	; 143
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
        string_write(gps_data[i]);
     c14:	f8 01       	movw	r30, r16
     c16:	81 91       	ld	r24, Z+
     c18:	91 91       	ld	r25, Z+
     c1a:	8f 01       	movw	r16, r30
     c1c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     c20:	ff e9       	ldi	r31, 0x9F	; 159
     c22:	26 e8       	ldi	r18, 0x86	; 134
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	f1 50       	subi	r31, 0x01	; 1
     c28:	20 40       	sbci	r18, 0x00	; 0
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <print_raw_gps_data+0xc8>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <print_raw_gps_data+0xd2>
     c30:	00 00       	nop

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
     c32:	80 91 50 03 	lds	r24, 0x0350
     c36:	90 91 51 03 	lds	r25, 0x0351
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	29 f0       	breq	.+10     	; 0xc48 <print_raw_gps_data+0xea>
    lcd_init();
    string_write("Printing Raw\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
     c3e:	21 96       	adiw	r28, 0x01	; 1
     c40:	cd 30       	cpi	r28, 0x0D	; 13
     c42:	d1 05       	cpc	r29, r1
     c44:	09 f0       	breq	.+2      	; 0xc48 <print_raw_gps_data+0xea>
     c46:	ab cf       	rjmp	.-170    	; 0xb9e <print_raw_gps_data+0x40>
        string_write(gps_data[i]);

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
    }
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(void)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
    int i;
    lcd_init();
     c56:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("wiping\nmemory...");
     c5a:	89 e4       	ldi	r24, 0x49	; 73
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     c62:	c0 e0       	ldi	r28, 0x00	; 0
     c64:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     c66:	80 91 50 03 	lds	r24, 0x0350
     c6a:	90 91 51 03 	lds	r25, 0x0351
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	49 f0       	breq	.+18     	; 0xc84 <wipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     c72:	6f ef       	ldi	r22, 0xFF	; 255
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 3d 19 	call	0x327a	; 0x327a <__eewr_byte_m1284p>
void wipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     c7a:	21 96       	adiw	r28, 0x01	; 1
     c7c:	c1 3f       	cpi	r28, 0xF1	; 241
     c7e:	8a e0       	ldi	r24, 0x0A	; 10
     c80:	d8 07       	cpc	r29, r24
     c82:	89 f7       	brne	.-30     	; 0xc66 <wipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     c92:	2c e1       	ldi	r18, 0x1C	; 28
     c94:	28 9f       	mul	r18, r24
     c96:	80 01       	movw	r16, r0
     c98:	29 9f       	mul	r18, r25
     c9a:	10 0d       	add	r17, r0
     c9c:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     ca2:	e0 91 b3 03 	lds	r30, 0x03B3
     ca6:	f0 91 b4 03 	lds	r31, 0x03B4
     caa:	e0 0f       	add	r30, r16
     cac:	f1 1f       	adc	r31, r17
     cae:	ec 0f       	add	r30, r28
     cb0:	fd 1f       	adc	r31, r29
     cb2:	80 81       	ld	r24, Z
     cb4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     cb8:	21 96       	adiw	r28, 0x01	; 1
     cba:	c8 30       	cpi	r28, 0x08	; 8
     cbc:	d1 05       	cpc	r29, r1
     cbe:	89 f7       	brne	.-30     	; 0xca2 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <check_database_integrity>:
    _delay_ms(500);
}

//check for database corruption
void check_database_integrity(void)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     cd2:	60 91 ad 03 	lds	r22, 0x03AD
     cd6:	70 91 ae 03 	lds	r23, 0x03AE
     cda:	80 91 b3 03 	lds	r24, 0x03B3
     cde:	90 91 b4 03 	lds	r25, 0x03B4
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	c6 17       	cp	r28, r22
     ce8:	d7 07       	cpc	r29, r23
     cea:	0c f0       	brlt	.+2      	; 0xcee <check_database_integrity+0x24>
     cec:	6c c0       	rjmp	.+216    	; 0xdc6 <check_database_integrity+0xfc>
     cee:	ac 01       	movw	r20, r24
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if (((call[j] < 33)||(call[j] > 126))&&(call[j]!=' '))
     cf4:	8a 01       	movw	r16, r20
     cf6:	4f 5f       	subi	r20, 0xFF	; 255
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	d8 01       	movw	r26, r16
     cfc:	ec 91       	ld	r30, X
     cfe:	e0 52       	subi	r30, 0x20	; 32
     d00:	ef 35       	cpi	r30, 0x5F	; 95
     d02:	08 f4       	brcc	.+2      	; 0xd06 <check_database_integrity+0x3c>
     d04:	57 c0       	rjmp	.+174    	; 0xdb4 <check_database_integrity+0xea>
            {
                database_corrupted = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	90 93 4b 03 	sts	0x034B, r25
     d0e:	80 93 4a 03 	sts	0x034A, r24
                lcd_init();
     d12:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
                string_write("CORRUPTION\nDETECTED");
     d16:	8a e5       	ldi	r24, 0x5A	; 90
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     d1e:	bf e7       	ldi	r27, 0x7F	; 127
     d20:	ea e1       	ldi	r30, 0x1A	; 26
     d22:	f6 e0       	ldi	r31, 0x06	; 6
     d24:	b1 50       	subi	r27, 0x01	; 1
     d26:	e0 40       	sbci	r30, 0x00	; 0
     d28:	f0 40       	sbci	r31, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <check_database_integrity+0x5a>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <check_database_integrity+0x64>
     d2e:	00 00       	nop
                _delay_ms(2000);
                lcd_init();
     d30:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
                string_write("tracing\ncorruption...");
     d34:	8e e6       	ldi	r24, 0x6E	; 110
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     d3c:	2f e9       	ldi	r18, 0x9F	; 159
     d3e:	86 e8       	ldi	r24, 0x86	; 134
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	80 40       	sbci	r24, 0x00	; 0
     d46:	90 40       	sbci	r25, 0x00	; 0
     d48:	e1 f7       	brne	.-8      	; 0xd42 <check_database_integrity+0x78>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <check_database_integrity+0x82>
     d4c:	00 00       	nop
                _delay_ms(500);
                lcd_init();
     d4e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
                string_write("station #");
     d52:	84 e8       	ldi	r24, 0x84	; 132
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                string_write_int(i+1,3);
     d5a:	63 e0       	ldi	r22, 0x03	; 3
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
                string_write(" : ");
     d66:	8e e8       	ldi	r24, 0x8E	; 142
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
                char_write('\'');
     d6e:	87 e2       	ldi	r24, 0x27	; 39
     d70:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
                char_write(call[j]);
     d74:	d8 01       	movw	r26, r16
     d76:	8c 91       	ld	r24, X
     d78:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
                char_write('\'');
     d7c:	87 e2       	ldi	r24, 0x27	; 39
     d7e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
                char_write('\n');
     d82:	8a e0       	ldi	r24, 0x0A	; 10
     d84:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
     d88:	bf e7       	ldi	r27, 0x7F	; 127
     d8a:	ea e1       	ldi	r30, 0x1A	; 26
     d8c:	f6 e0       	ldi	r31, 0x06	; 6
     d8e:	b1 50       	subi	r27, 0x01	; 1
     d90:	e0 40       	sbci	r30, 0x00	; 0
     d92:	f0 40       	sbci	r31, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <check_database_integrity+0xc4>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <check_database_integrity+0xce>
     d98:	00 00       	nop
                _delay_ms(2000);
                print_callsign(i);
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 45 06 	call	0xc8a	; 0xc8a <print_callsign>
     da0:	2f ef       	ldi	r18, 0xFF	; 255
     da2:	84 e3       	ldi	r24, 0x34	; 52
     da4:	9c e0       	ldi	r25, 0x0C	; 12
     da6:	21 50       	subi	r18, 0x01	; 1
     da8:	80 40       	sbci	r24, 0x00	; 0
     daa:	90 40       	sbci	r25, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <check_database_integrity+0xdc>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <check_database_integrity+0xe6>
     db0:	00 00       	nop
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <check_database_integrity+0xfc>
{
    int i, j;
    for (i=0; i<num_stations; i++)
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     db4:	2f 5f       	subi	r18, 0xFF	; 255
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	28 30       	cpi	r18, 0x08	; 8
     dba:	31 05       	cpc	r19, r1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <check_database_integrity+0xf6>
     dbe:	9a cf       	rjmp	.-204    	; 0xcf4 <check_database_integrity+0x2a>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     dc0:	21 96       	adiw	r28, 0x01	; 1
     dc2:	4c 96       	adiw	r24, 0x1c	; 28
     dc4:	90 cf       	rjmp	.-224    	; 0xce6 <check_database_integrity+0x1c>
                _delay_ms(4000);
                return;
            }
        }
    }
}
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     dd8:	80 91 50 03 	lds	r24, 0x0350
     ddc:	90 91 51 03 	lds	r25, 0x0351
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	09 f4       	brne	.+2      	; 0xde6 <print_all_callsigns+0x16>
     de4:	4d c0       	rjmp	.+154    	; 0xe80 <print_all_callsigns+0xb0>
    int i;
    lcd_init();
     de6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write_int(num_stations,3);
     dea:	63 e0       	ldi	r22, 0x03	; 3
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 91 ad 03 	lds	r24, 0x03AD
     df2:	90 91 ae 03 	lds	r25, 0x03AE
     df6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
    string_write(" known\nstations");
     dfa:	82 e9       	ldi	r24, 0x92	; 146
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     e02:	2f e7       	ldi	r18, 0x7F	; 127
     e04:	8a e1       	ldi	r24, 0x1A	; 26
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	80 40       	sbci	r24, 0x00	; 0
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <print_all_callsigns+0x38>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <print_all_callsigns+0x42>
     e12:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     e14:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("\n");
     e18:	8e ef       	ldi	r24, 0xFE	; 254
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>

    for (i=0; i<num_stations; i++)
     e20:	c0 e0       	ldi	r28, 0x00	; 0
     e22:	d0 e0       	ldi	r29, 0x00	; 0
     e24:	80 91 ad 03 	lds	r24, 0x03AD
     e28:	90 91 ae 03 	lds	r25, 0x03AE
     e2c:	c8 17       	cp	r28, r24
     e2e:	d9 07       	cpc	r29, r25
     e30:	3c f5       	brge	.+78     	; 0xe80 <print_all_callsigns+0xb0>
    {
        if (op_mode==MD_UPDATE) return;
     e32:	80 91 50 03 	lds	r24, 0x0350
     e36:	90 91 51 03 	lds	r25, 0x0351
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	09 f1       	breq	.+66     	; 0xe80 <print_all_callsigns+0xb0>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
     e3e:	8e ef       	ldi	r24, 0xFE	; 254
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     e46:	8e 01       	movw	r16, r28
     e48:	0f 5f       	subi	r16, 0xFF	; 255
     e4a:	1f 4f       	sbci	r17, 0xFF	; 255
     e4c:	63 e0       	ldi	r22, 0x03	; 3
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	c8 01       	movw	r24, r16
     e52:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
     e56:	8f e8       	ldi	r24, 0x8F	; 143
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     e5e:	ce 01       	movw	r24, r28
     e60:	0e 94 45 06 	call	0xc8a	; 0xc8a <print_callsign>

        if (op_mode==MD_UPDATE) return;
     e64:	80 91 50 03 	lds	r24, 0x0350
     e68:	90 91 51 03 	lds	r25, 0x0351
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	41 f0       	breq	.+16     	; 0xe80 <print_all_callsigns+0xb0>
     e70:	83 e2       	ldi	r24, 0x23	; 35
     e72:	94 ef       	ldi	r25, 0xF4	; 244
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <print_all_callsigns+0xa4>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <print_all_callsigns+0xaa>
     e7a:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    string_write("\n");

    for (i=0; i<num_stations; i++)
     e7c:	e8 01       	movw	r28, r16
     e7e:	d2 cf       	rjmp	.-92     	; 0xe24 <print_all_callsigns+0x54>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     e94:	63 e0       	ldi	r22, 0x03	; 3
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
     e9e:	8f e8       	ldi	r24, 0x8F	; 143
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     ea6:	c8 01       	movw	r24, r16
     ea8:	0e 94 45 06 	call	0xc8a	; 0xc8a <print_callsign>
     eac:	83 e2       	ldi	r24, 0x23	; 35
     eae:	94 ef       	ldi	r25, 0xF4	; 244
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <print_station+0x26>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <print_station+0x2c>
     eb6:	00 00       	nop
     eb8:	8e ef       	ldi	r24, 0xFE	; 254
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    if (op_mode==MD_UPDATE)
     ec0:	80 91 50 03 	lds	r24, 0x0350
     ec4:	90 91 51 03 	lds	r25, 0x0351
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	09 f4       	brne	.+2      	; 0xece <print_station+0x44>
     ecc:	b1 c0       	rjmp	.+354    	; 0x1030 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     ece:	82 ea       	ldi	r24, 0xA2	; 162
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     ed6:	8c e1       	ldi	r24, 0x1C	; 28
     ed8:	80 9f       	mul	r24, r16
     eda:	e0 01       	movw	r28, r0
     edc:	81 9f       	mul	r24, r17
     ede:	d0 0d       	add	r29, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	e0 91 b3 03 	lds	r30, 0x03B3
     ee6:	f0 91 b4 03 	lds	r31, 0x03B4
     eea:	ec 0f       	add	r30, r28
     eec:	fd 1f       	adc	r31, r29
     eee:	60 85       	ldd	r22, Z+8	; 0x08
     ef0:	71 85       	ldd	r23, Z+9	; 0x09
     ef2:	82 85       	ldd	r24, Z+10	; 0x0a
     ef4:	93 85       	ldd	r25, Z+11	; 0x0b
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
     efe:	83 e2       	ldi	r24, 0x23	; 35
     f00:	94 ef       	ldi	r25, 0xF4	; 244
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <print_station+0x78>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <print_station+0x7e>
     f08:	00 00       	nop
     f0a:	8e ef       	ldi	r24, 0xFE	; 254
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    if (op_mode==MD_UPDATE)
     f12:	80 91 50 03 	lds	r24, 0x0350
     f16:	90 91 51 03 	lds	r25, 0x0351
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <print_station+0x96>
     f1e:	88 c0       	rjmp	.+272    	; 0x1030 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     f20:	89 ea       	ldi	r24, 0xA9	; 169
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     f28:	e0 91 b3 03 	lds	r30, 0x03B3
     f2c:	f0 91 b4 03 	lds	r31, 0x03B4
     f30:	ec 0f       	add	r30, r28
     f32:	fd 1f       	adc	r31, r29
     f34:	64 85       	ldd	r22, Z+12	; 0x0c
     f36:	75 85       	ldd	r23, Z+13	; 0x0d
     f38:	86 85       	ldd	r24, Z+14	; 0x0e
     f3a:	97 85       	ldd	r25, Z+15	; 0x0f
     f3c:	44 e0       	ldi	r20, 0x04	; 4
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
     f44:	83 e2       	ldi	r24, 0x23	; 35
     f46:	94 ef       	ldi	r25, 0xF4	; 244
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <print_station+0xbe>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <print_station+0xc4>
     f4e:	00 00       	nop
     f50:	8e ef       	ldi	r24, 0xFE	; 254
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    if (op_mode==MD_UPDATE)
     f58:	80 91 50 03 	lds	r24, 0x0350
     f5c:	90 91 51 03 	lds	r25, 0x0351
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	09 f4       	brne	.+2      	; 0xf66 <print_station+0xdc>
     f64:	65 c0       	rjmp	.+202    	; 0x1030 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     f66:	8f ea       	ldi	r24, 0xAF	; 175
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     f6e:	e0 91 b3 03 	lds	r30, 0x03B3
     f72:	f0 91 b4 03 	lds	r31, 0x03B4
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
     f7a:	60 89       	ldd	r22, Z+16	; 0x10
     f7c:	71 89       	ldd	r23, Z+17	; 0x11
     f7e:	82 89       	ldd	r24, Z+18	; 0x12
     f80:	93 89       	ldd	r25, Z+19	; 0x13
     f82:	44 e0       	ldi	r20, 0x04	; 4
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
     f8a:	83 e2       	ldi	r24, 0x23	; 35
     f8c:	94 ef       	ldi	r25, 0xF4	; 244
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <print_station+0x104>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <print_station+0x10a>
     f94:	00 00       	nop
     f96:	8e ef       	ldi	r24, 0xFE	; 254
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    if (op_mode==MD_UPDATE)
     f9e:	80 91 50 03 	lds	r24, 0x0350
     fa2:	90 91 51 03 	lds	r25, 0x0351
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	09 f4       	brne	.+2      	; 0xfac <print_station+0x122>
     faa:	42 c0       	rjmp	.+132    	; 0x1030 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     fac:	85 eb       	ldi	r24, 0xB5	; 181
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     fb4:	e0 91 b3 03 	lds	r30, 0x03B3
     fb8:	f0 91 b4 03 	lds	r31, 0x03B4
     fbc:	ec 0f       	add	r30, r28
     fbe:	fd 1f       	adc	r31, r29
     fc0:	64 89       	ldd	r22, Z+20	; 0x14
     fc2:	75 89       	ldd	r23, Z+21	; 0x15
     fc4:	86 89       	ldd	r24, Z+22	; 0x16
     fc6:	97 89       	ldd	r25, Z+23	; 0x17
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
     fd0:	83 e2       	ldi	r24, 0x23	; 35
     fd2:	94 ef       	ldi	r25, 0xF4	; 244
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <print_station+0x14a>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <print_station+0x150>
     fda:	00 00       	nop
     fdc:	8e ef       	ldi	r24, 0xFE	; 254
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    if (op_mode==MD_UPDATE)
     fe4:	80 91 50 03 	lds	r24, 0x0350
     fe8:	90 91 51 03 	lds	r25, 0x0351
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	01 f1       	breq	.+64     	; 0x1030 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     ff0:	8b eb       	ldi	r24, 0xBB	; 187
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
     ff8:	e0 91 b3 03 	lds	r30, 0x03B3
     ffc:	f0 91 b4 03 	lds	r31, 0x03B4
    1000:	ec 0f       	add	r30, r28
    1002:	fd 1f       	adc	r31, r29
    1004:	60 8d       	ldd	r22, Z+24	; 0x18
    1006:	71 8d       	ldd	r23, Z+25	; 0x19
    1008:	82 8d       	ldd	r24, Z+26	; 0x1a
    100a:	93 8d       	ldd	r25, Z+27	; 0x1b
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
    1014:	83 e2       	ldi	r24, 0x23	; 35
    1016:	94 ef       	ldi	r25, 0xF4	; 244
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <print_station+0x18e>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <print_station+0x194>
    101e:	00 00       	nop
    1020:	8e ef       	ldi	r24, 0xFE	; 254
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    if (op_mode==MD_UPDATE)
    1028:	80 91 50 03 	lds	r24, 0x0350
    102c:	90 91 51 03 	lds	r25, 0x0351
        return;
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	08 95       	ret

0000103a <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
    103e:	80 91 50 03 	lds	r24, 0x0350
    1042:	90 91 51 03 	lds	r25, 0x0351
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	c9 f1       	breq	.+114    	; 0x10bc <print_all_known_stations+0x82>
    int i;
    lcd_init();
    104a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write_int(num_stations,3);
    104e:	63 e0       	ldi	r22, 0x03	; 3
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 91 ad 03 	lds	r24, 0x03AD
    1056:	90 91 ae 03 	lds	r25, 0x03AE
    105a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
    string_write(" known\nstations");
    105e:	82 e9       	ldi	r24, 0x92	; 146
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    1066:	2f e7       	ldi	r18, 0x7F	; 127
    1068:	8a e1       	ldi	r24, 0x1A	; 26
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	21 50       	subi	r18, 0x01	; 1
    106e:	80 40       	sbci	r24, 0x00	; 0
    1070:	90 40       	sbci	r25, 0x00	; 0
    1072:	e1 f7       	brne	.-8      	; 0x106c <print_all_known_stations+0x32>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <print_all_known_stations+0x3c>
    1076:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
    1078:	c0 e0       	ldi	r28, 0x00	; 0
    107a:	d0 e0       	ldi	r29, 0x00	; 0
    107c:	80 91 ad 03 	lds	r24, 0x03AD
    1080:	90 91 ae 03 	lds	r25, 0x03AE
    1084:	c8 17       	cp	r28, r24
    1086:	d9 07       	cpc	r29, r25
    1088:	cc f4       	brge	.+50     	; 0x10bc <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
    108a:	80 91 50 03 	lds	r24, 0x0350
    108e:	90 91 51 03 	lds	r25, 0x0351
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	99 f0       	breq	.+38     	; 0x10bc <print_all_known_stations+0x82>

        lcd_init();
    1096:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
        print_station(i);
    109a:	ce 01       	movw	r24, r28
    109c:	0e 94 45 07 	call	0xe8a	; 0xe8a <print_station>

        if (op_mode==MD_UPDATE) return;
    10a0:	80 91 50 03 	lds	r24, 0x0350
    10a4:	90 91 51 03 	lds	r25, 0x0351
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	41 f0       	breq	.+16     	; 0x10bc <print_all_known_stations+0x82>
    10ac:	8f e4       	ldi	r24, 0x4F	; 79
    10ae:	93 ec       	ldi	r25, 0xC3	; 195
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <print_all_known_stations+0x76>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <print_all_known_stations+0x7c>
    10b6:	00 00       	nop
    string_write_int(num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
    10b8:	21 96       	adiw	r28, 0x01	; 1
    10ba:	e0 cf       	rjmp	.-64     	; 0x107c <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <show_nearest_station>:
    }
}

void show_nearest_station(void)
{
    lcd_init();
    10c2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("Nearest Station:\n");
    10c6:	82 ec       	ldi	r24, 0xC2	; 194
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    print_callsign(nearest_station);
    10ce:	80 91 02 01 	lds	r24, 0x0102
    10d2:	90 91 03 01 	lds	r25, 0x0103
    10d6:	0e 94 45 06 	call	0xc8a	; 0xc8a <print_callsign>
    10da:	2f e7       	ldi	r18, 0x7F	; 127
    10dc:	8a e1       	ldi	r24, 0x1A	; 26
    10de:	96 e0       	ldi	r25, 0x06	; 6
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <show_nearest_station+0x1e>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <show_nearest_station+0x28>
    10ea:	00 00       	nop
    _delay_ms(2000);
    print_station(nearest_station);
    10ec:	80 91 02 01 	lds	r24, 0x0102
    10f0:	90 91 03 01 	lds	r25, 0x0103
    10f4:	0e 94 45 07 	call	0xe8a	; 0xe8a <print_station>
    10f8:	2f e7       	ldi	r18, 0x7F	; 127
    10fa:	8a e1       	ldi	r24, 0x1A	; 26
    10fc:	96 e0       	ldi	r25, 0x06	; 6
    10fe:	21 50       	subi	r18, 0x01	; 1
    1100:	80 40       	sbci	r24, 0x00	; 0
    1102:	90 40       	sbci	r25, 0x00	; 0
    1104:	e1 f7       	brne	.-8      	; 0x10fe <show_nearest_station+0x3c>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <show_nearest_station+0x46>
    1108:	00 00       	nop
    110a:	08 95       	ret

0000110c <test_earth_distance>:
        char_write(all_stations[station_index].callsign[i]);
    }
}

void test_earth_distance(void)
{
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    lcd_init();
    111c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    string_write("Calculating\nEarth Distances");
    1120:	84 ed       	ldi	r24, 0xD4	; 212
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    1128:	2f e7       	ldi	r18, 0x7F	; 127
    112a:	8a e1       	ldi	r24, 0x1A	; 26
    112c:	96 e0       	ldi	r25, 0x06	; 6
    112e:	21 50       	subi	r18, 0x01	; 1
    1130:	80 40       	sbci	r24, 0x00	; 0
    1132:	90 40       	sbci	r25, 0x00	; 0
    1134:	e1 f7       	brne	.-8      	; 0x112e <test_earth_distance+0x22>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <test_earth_distance+0x2c>
    1138:	00 00       	nop
    _delay_ms(2000);


    string_write("Denver -> NYC:\n");
    113a:	80 ef       	ldi	r24, 0xF0	; 240
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    1142:	a1 2c       	mov	r10, r1
    1144:	b1 2c       	mov	r11, r1
    1146:	80 ed       	ldi	r24, 0xD0	; 208
    1148:	c8 2e       	mov	r12, r24
    114a:	82 ec       	ldi	r24, 0xC2	; 194
    114c:	d8 2e       	mov	r13, r24
    114e:	e1 2c       	mov	r14, r1
    1150:	f1 2c       	mov	r15, r1
    1152:	0c e1       	ldi	r16, 0x1C	; 28
    1154:	12 e4       	ldi	r17, 0x42	; 66
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	44 e9       	ldi	r20, 0x94	; 148
    115c:	52 ec       	ldi	r21, 0xC2	; 194
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	92 e4       	ldi	r25, 0x42	; 66
    1166:	0e 94 82 03 	call	0x704	; 0x704 <earth_distance>
    string_write_float(distance,4);
    116a:	44 e0       	ldi	r20, 0x04	; 4
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	0e 94 09 0b 	call	0x1612	; 0x1612 <string_write_float>
    1172:	2f e7       	ldi	r18, 0x7F	; 127
    1174:	8a e1       	ldi	r24, 0x1A	; 26
    1176:	96 e0       	ldi	r25, 0x06	; 6
    1178:	21 50       	subi	r18, 0x01	; 1
    117a:	80 40       	sbci	r24, 0x00	; 0
    117c:	90 40       	sbci	r25, 0x00	; 0
    117e:	e1 f7       	brne	.-8      	; 0x1178 <test_earth_distance+0x6c>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <test_earth_distance+0x76>
    1182:	00 00       	nop
    _delay_ms(2000);

    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	08 95       	ret

00001196 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
    1196:	12 9a       	sbi	0x02, 2	; 2
    1198:	81 ee       	ldi	r24, 0xE1	; 225
    119a:	94 e0       	ldi	r25, 0x04	; 4
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <datarw+0x6>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <datarw+0xc>
    11a2:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
    11a4:	12 98       	cbi	0x02, 2	; 2
    11a6:	08 95       	ret

000011a8 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
    11a8:	10 92 b0 03 	sts	0x03B0, r1
    11ac:	10 92 af 03 	sts	0x03AF, r1
    line_num = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	90 93 05 01 	sts	0x0105, r25
    11b8:	80 93 04 01 	sts	0x0104, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
    11bc:	81 b1       	in	r24, 0x01	; 1
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	81 b9       	out	0x01, r24	; 1
    11c2:	87 e8       	ldi	r24, 0x87	; 135
    11c4:	93 e1       	ldi	r25, 0x13	; 19
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <lcd_init+0x1e>
    11ca:	00 c0       	rjmp	.+0      	; 0x11cc <lcd_init+0x24>
    11cc:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
    11ce:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
    11d0:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
    11d2:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
    11d4:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11d6:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    11d8:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    11da:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    11dc:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    11e0:	81 ee       	ldi	r24, 0xE1	; 225
    11e2:	94 e0       	ldi	r25, 0x04	; 4
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <lcd_init+0x3c>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <lcd_init+0x42>
    11ea:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
    11ec:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    11f0:	89 ef       	ldi	r24, 0xF9	; 249
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <lcd_init+0x4c>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <lcd_init+0x52>
    11fa:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
    11fc:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1200:	89 ef       	ldi	r24, 0xF9	; 249
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <lcd_init+0x5c>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <lcd_init+0x62>
    120a:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
    120c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    120e:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1210:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1212:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1214:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1218:	89 ef       	ldi	r24, 0xF9	; 249
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <lcd_init+0x74>
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <lcd_init+0x7a>
    1222:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
    1224:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1226:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1228:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    122a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    122c:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1230:	89 ef       	ldi	r24, 0xF9	; 249
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <lcd_init+0x8c>
    1238:	00 c0       	rjmp	.+0      	; 0x123a <lcd_init+0x92>
    123a:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
    123c:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    123e:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1240:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1242:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1244:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1248:	89 ef       	ldi	r24, 0xF9	; 249
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <lcd_init+0xa4>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <lcd_init+0xaa>
    1252:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
    1254:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1256:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1258:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    125a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    125c:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1260:	89 ef       	ldi	r24, 0xF9	; 249
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <lcd_init+0xbc>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <lcd_init+0xc2>
    126a:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    126c:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
    126e:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
    1270:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1272:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1274:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1278:	89 ef       	ldi	r24, 0xF9	; 249
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <lcd_init+0xd4>
    1280:	00 c0       	rjmp	.+0      	; 0x1282 <lcd_init+0xda>
    1282:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
    1284:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1286:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1288:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    128a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    128c:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1290:	89 ef       	ldi	r24, 0xF9	; 249
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <lcd_init+0xec>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <lcd_init+0xf2>
    129a:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
    129c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    129e:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    12a0:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    12a2:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    12a4:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    12a8:	89 ef       	ldi	r24, 0xF9	; 249
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <lcd_init+0x104>
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <lcd_init+0x10a>
    12b2:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
    12b4:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    12b6:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    12b8:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    12ba:	13 98       	cbi	0x02, 3	; 2
    datarw();
    12bc:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    12c0:	89 ef       	ldi	r24, 0xF9	; 249
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <lcd_init+0x11c>
    12c8:	00 c0       	rjmp	.+0      	; 0x12ca <lcd_init+0x122>
    12ca:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
    12cc:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    12ce:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    12d0:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
    12d2:	13 98       	cbi	0x02, 3	; 2
    datarw();
    12d4:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    12d8:	89 ef       	ldi	r24, 0xF9	; 249
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <lcd_init+0x134>
    12e0:	00 c0       	rjmp	.+0      	; 0x12e2 <lcd_init+0x13a>
    12e2:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
    12e4:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    12e6:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    12e8:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    12ea:	13 98       	cbi	0x02, 3	; 2
    datarw();
    12ec:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    12f0:	89 ef       	ldi	r24, 0xF9	; 249
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <lcd_init+0x14c>
    12f8:	00 c0       	rjmp	.+0      	; 0x12fa <lcd_init+0x152>
    12fa:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    12fc:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    12fe:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1300:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    1302:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    1304:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    1308:	89 ef       	ldi	r24, 0xF9	; 249
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <lcd_init+0x164>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <lcd_init+0x16a>
    1312:	00 00       	nop
    _delay_ms(1);

	return 0;
}
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	08 95       	ret

0000131a <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	11 f4       	brne	.+4      	; 0x1322 <letterwrite+0x8>
    131e:	16 9a       	sbi	0x02, 6	; 2
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
    1322:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
    1324:	61 30       	cpi	r22, 0x01	; 1
    1326:	71 05       	cpc	r23, r1
    1328:	11 f4       	brne	.+4      	; 0x132e <letterwrite+0x14>
    132a:	15 9a       	sbi	0x02, 5	; 2
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
    132e:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
    1330:	41 30       	cpi	r20, 0x01	; 1
    1332:	51 05       	cpc	r21, r1
    1334:	11 f4       	brne	.+4      	; 0x133a <letterwrite+0x20>
    1336:	14 9a       	sbi	0x02, 4	; 2
    1338:	01 c0       	rjmp	.+2      	; 0x133c <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
    133a:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
    133c:	21 30       	cpi	r18, 0x01	; 1
    133e:	31 05       	cpc	r19, r1
    1340:	11 f4       	brne	.+4      	; 0x1346 <letterwrite+0x2c>
    1342:	13 9a       	sbi	0x02, 3	; 2
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
    1346:	13 98       	cbi	0x02, 3	; 2
   	datarw();
    1348:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    134c:	89 ef       	ldi	r24, 0xF9	; 249
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <letterwrite+0x36>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <letterwrite+0x3c>
    1356:	00 00       	nop
    1358:	08 95       	ret

0000135a <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
    1360:	81 b1       	in	r24, 0x01	; 1
    1362:	87 78       	andi	r24, 0x87	; 135
    1364:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
    1366:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
    1368:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    136a:	12 9a       	sbi	0x02, 2	; 2
    136c:	81 ee       	ldi	r24, 0xE1	; 225
    136e:	94 e0       	ldi	r25, 0x04	; 4
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <instruction_read+0x16>
    1374:	00 c0       	rjmp	.+0      	; 0x1376 <instruction_read+0x1c>
    1376:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    1378:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    137a:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
    137c:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
    137e:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
    1380:	12 98       	cbi	0x02, 2	; 2
    1382:	e9 ef       	ldi	r30, 0xF9	; 249
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	31 97       	sbiw	r30, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <instruction_read+0x2c>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <instruction_read+0x32>
    138c:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    138e:	12 9a       	sbi	0x02, 2	; 2
    1390:	e1 ee       	ldi	r30, 0xE1	; 225
    1392:	f4 e0       	ldi	r31, 0x04	; 4
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <instruction_read+0x3a>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <instruction_read+0x40>
    139a:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    139c:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
    139e:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
    13a0:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
    13a2:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    13a4:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	26 e0       	ldi	r18, 0x06	; 6
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	2a 95       	dec	r18
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <instruction_read+0x50>
    value = PORTA & _BV(DB5);
    13b2:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
    13b4:	d0 e0       	ldi	r29, 0x00	; 0
    13b6:	35 e0       	ldi	r19, 0x05	; 5
    13b8:	cc 0f       	add	r28, r28
    13ba:	dd 1f       	adc	r29, r29
    13bc:	3a 95       	dec	r19
    13be:	e1 f7       	brne	.-8      	; 0x13b8 <instruction_read+0x5e>
    13c0:	8c 2b       	or	r24, r28
    13c2:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
    13c4:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
    13c6:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    13c8:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	54 e0       	ldi	r21, 0x04	; 4
    13ce:	aa 0f       	add	r26, r26
    13d0:	bb 1f       	adc	r27, r27
    13d2:	5a 95       	dec	r21
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    13d6:	8a 2b       	or	r24, r26
    13d8:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    13da:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	73 e0       	ldi	r23, 0x03	; 3
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	7a 95       	dec	r23
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
    13e8:	8e 2b       	or	r24, r30
    13ea:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    13ec:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
    13f8:	86 2b       	or	r24, r22
    13fa:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
    13fc:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
    13fe:	51 b1       	in	r21, 0x01	; 1
    1400:	58 67       	ori	r21, 0x78	; 120
    1402:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    1404:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1406:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    1408:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	44 0f       	add	r20, r20
    140e:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
    1410:	84 2b       	or	r24, r20
    1412:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    1414:	16 fb       	bst	r17, 6
    1416:	22 27       	eor	r18, r18
    1418:	20 f9       	bld	r18, 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
    141c:	36 95       	lsr	r19
    141e:	32 2f       	mov	r19, r18
    1420:	22 27       	eor	r18, r18
    1422:	37 95       	ror	r19
    1424:	27 95       	ror	r18
}
    1426:	82 2b       	or	r24, r18
    1428:	93 2b       	or	r25, r19
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	08 95       	ret

00001432 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
    1432:	0e 94 ad 09 	call	0x135a	; 0x135a <instruction_read>
    1436:	8f 77       	andi	r24, 0x7F	; 127
    1438:	99 27       	eor	r25, r25
    return address+1;
}
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	08 95       	ret

0000143e <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
    143e:	89 2b       	or	r24, r25
    1440:	11 f4       	brne	.+4      	; 0x1446 <write_db74+0x8>
    1442:	16 98       	cbi	0x02, 6	; 2
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <write_db74+0xa>
    else PORTA |= _BV(DB7);
    1446:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
    1448:	67 2b       	or	r22, r23
    144a:	11 f4       	brne	.+4      	; 0x1450 <write_db74+0x12>
    144c:	15 98       	cbi	0x02, 5	; 2
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <write_db74+0x14>
    else PORTA |= _BV(DB6);
    1450:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
    1452:	45 2b       	or	r20, r21
    1454:	11 f4       	brne	.+4      	; 0x145a <write_db74+0x1c>
    1456:	14 98       	cbi	0x02, 4	; 2
    1458:	01 c0       	rjmp	.+2      	; 0x145c <write_db74+0x1e>
    else PORTA |= _BV(DB5);
    145a:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
    145c:	23 2b       	or	r18, r19
    145e:	11 f4       	brne	.+4      	; 0x1464 <write_db74+0x26>
    1460:	13 98       	cbi	0x02, 3	; 2
    1462:	08 95       	ret
    else PORTA |= _BV(DB4);
    1464:	13 9a       	sbi	0x02, 3	; 2
    1466:	08 95       	ret

00001468 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
    146e:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1470:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    1472:	28 2f       	mov	r18, r24
    1474:	22 95       	swap	r18
    1476:	21 70       	andi	r18, 0x01	; 1
    1478:	85 fb       	bst	r24, 5
    147a:	44 27       	eor	r20, r20
    147c:	40 f9       	bld	r20, 0
    147e:	86 fb       	bst	r24, 6
    1480:	66 27       	eor	r22, r22
    1482:	60 f9       	bld	r22, 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 1f 0a 	call	0x143e	; 0x143e <write_db74>
    datarw();
    1492:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    1496:	9e 01       	movw	r18, r28
    1498:	21 70       	andi	r18, 0x01	; 1
    149a:	33 27       	eor	r19, r19
    149c:	4c 2f       	mov	r20, r28
    149e:	46 95       	lsr	r20
    14a0:	41 70       	andi	r20, 0x01	; 1
    14a2:	c2 fb       	bst	r28, 2
    14a4:	66 27       	eor	r22, r22
    14a6:	60 f9       	bld	r22, 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	c3 fb       	bst	r28, 3
    14ae:	88 27       	eor	r24, r24
    14b0:	80 f9       	bld	r24, 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 1f 0a 	call	0x143e	; 0x143e <write_db74>
    datarw();
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
    14bc:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <datarw>

000014c0 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
    14c0:	cf 93       	push	r28
    14c2:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
    14c4:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    14c6:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    14c8:	84 fb       	bst	r24, 4
    14ca:	22 27       	eor	r18, r18
    14cc:	20 f9       	bld	r18, 0
    14ce:	85 fb       	bst	r24, 5
    14d0:	44 27       	eor	r20, r20
    14d2:	40 f9       	bld	r20, 0
    14d4:	86 fb       	bst	r24, 6
    14d6:	66 27       	eor	r22, r22
    14d8:	60 f9       	bld	r22, 0
    14da:	88 1f       	adc	r24, r24
    14dc:	88 27       	eor	r24, r24
    14de:	88 1f       	adc	r24, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 1f 0a 	call	0x143e	; 0x143e <write_db74>
    datarw();
    14ec:	0e 94 cb 08 	call	0x1196	; 0x1196 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    14f0:	2c 2f       	mov	r18, r28
    14f2:	21 70       	andi	r18, 0x01	; 1
    14f4:	c1 fb       	bst	r28, 1
    14f6:	44 27       	eor	r20, r20
    14f8:	40 f9       	bld	r20, 0
    14fa:	c2 fb       	bst	r28, 2
    14fc:	66 27       	eor	r22, r22
    14fe:	60 f9       	bld	r22, 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	c3 fb       	bst	r28, 3
    1508:	88 27       	eor	r24, r24
    150a:	80 f9       	bld	r24, 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 1f 0a 	call	0x143e	; 0x143e <write_db74>
    datarw();
}
    1512:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
    1514:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <datarw>

00001518 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
    1518:	cf 93       	push	r28
    151a:	c8 2f       	mov	r28, r24
    chars_written++;
    151c:	20 91 af 03 	lds	r18, 0x03AF
    1520:	30 91 b0 03 	lds	r19, 0x03B0
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	30 93 b0 03 	sts	0x03B0, r19
    152c:	20 93 af 03 	sts	0x03AF, r18

    if ((chars_written==17)||(mychar=='\n'))
    1530:	21 31       	cpi	r18, 0x11	; 17
    1532:	31 05       	cpc	r19, r1
    1534:	31 f0       	breq	.+12     	; 0x1542 <char_write+0x2a>
    1536:	8a 30       	cpi	r24, 0x0A	; 10
    1538:	21 f0       	breq	.+8      	; 0x1542 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    153a:	8c 2f       	mov	r24, r28
    
}
    153c:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    153e:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
    1542:	20 91 04 01 	lds	r18, 0x0104
    1546:	30 91 05 01 	lds	r19, 0x0105
    154a:	21 30       	cpi	r18, 0x01	; 1
    154c:	31 05       	cpc	r19, r1
    154e:	79 f4       	brne	.+30     	; 0x156e <char_write+0x56>
        {
            set_ddram_address(0x40);
    1550:	80 e4       	ldi	r24, 0x40	; 64
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 34 0a 	call	0x1468	; 0x1468 <set_ddram_address>
            line_num = 2;
    1558:	22 e0       	ldi	r18, 0x02	; 2
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	30 93 05 01 	sts	0x0105, r19
    1560:	20 93 04 01 	sts	0x0104, r18
            chars_written = 0;
    1564:	10 92 b0 03 	sts	0x03B0, r1
    1568:	10 92 af 03 	sts	0x03AF, r1
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <char_write+0x60>
        }
        else if (line_num==2)
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	11 f4       	brne	.+4      	; 0x1578 <char_write+0x60>
        {
            lcd_init();
    1574:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
        }
    }

    if (mychar!='\n')
    1578:	ca 30       	cpi	r28, 0x0A	; 10
    157a:	f9 f6       	brne	.-66     	; 0x153a <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
    158a:	0e 94 19 0a 	call	0x1432	; 0x1432 <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
    158e:	8e 01       	movw	r16, r28
    1590:	fe 01       	movw	r30, r28
    1592:	01 90       	ld	r0, Z+
    1594:	00 20       	and	r0, r0
    1596:	e9 f7       	brne	.-6      	; 0x1592 <string_write+0x12>
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	ec 1b       	sub	r30, r28
    159c:	fd 0b       	sbc	r31, r29
    159e:	c8 01       	movw	r24, r16
    15a0:	8c 1b       	sub	r24, r28
    15a2:	9d 0b       	sbc	r25, r29
    15a4:	8e 17       	cp	r24, r30
    15a6:	9f 07       	cpc	r25, r31
    15a8:	40 f4       	brcc	.+16     	; 0x15ba <string_write+0x3a>
        char_write(mystring[i]);
    15aa:	f8 01       	movw	r30, r16
    15ac:	81 91       	ld	r24, Z+
    15ae:	8f 01       	movw	r16, r30
    15b0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
        get_current_address();
    15b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <get_current_address>
    15b8:	eb cf       	rjmp	.-42     	; 0x1590 <string_write+0x10>
    }
}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	08 95       	ret

000015c4 <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	18 2f       	mov	r17, r24
    15ce:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
    15d0:	cb 01       	movw	r24, r22
    15d2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <malloc>
    15d6:	d8 2f       	mov	r29, r24
    15d8:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	2d e3       	ldi	r18, 0x3D	; 61
    15e0:	33 e0       	ldi	r19, 0x03	; 3
    15e2:	3f 93       	push	r19
    15e4:	2f 93       	push	r18
    15e6:	9f 93       	push	r25
    15e8:	8f 93       	push	r24
    15ea:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <sprintf>
    string_write(temp);
    15ee:	8d 2f       	mov	r24, r29
    15f0:	9c 2f       	mov	r25, r28
    15f2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    free(temp);
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	8d 2f       	mov	r24, r29
    1604:	9c 2f       	mov	r25, r28
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
    160e:	0c 94 8d 14 	jmp	0x291a	; 0x291a <free>

00001612 <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
    1612:	cf 92       	push	r12
    1614:	df 92       	push	r13
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	00 d0       	rcall	.+0      	; 0x1624 <string_write_float+0x12>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <string_write_float+0x14>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
    162c:	ae 01       	movw	r20, r28
    162e:	4f 5f       	subi	r20, 0xFF	; 255
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	0e 94 ff 11 	call	0x23fe	; 0x23fe <modf>
    1636:	6b 01       	movw	r12, r22
    1638:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
    163a:	69 81       	ldd	r22, Y+1	; 0x01
    163c:	7a 81       	ldd	r23, Y+2	; 0x02
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	0e 94 39 10 	call	0x2072	; 0x2072 <__fixsfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	64 e0       	ldi	r22, 0x04	; 4
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <string_write_int>
    1652:	80 e4       	ldi	r24, 0x40	; 64
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
    165a:	b8 01       	movw	r22, r16
    165c:	88 27       	eor	r24, r24
    165e:	77 fd       	sbrc	r23, 7
    1660:	80 95       	com	r24
    1662:	98 2f       	mov	r25, r24
    1664:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__floatsisf>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	91 e4       	ldi	r25, 0x41	; 65
    1674:	0e 94 95 12 	call	0x252a	; 0x252a <pow>
    1678:	9b 01       	movw	r18, r22
    167a:	ac 01       	movw	r20, r24
    167c:	c7 01       	movw	r24, r14
    167e:	b6 01       	movw	r22, r12
    1680:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
    1684:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <round>
    1688:	0e 94 39 10 	call	0x2072	; 0x2072 <__fixsfsi>
    168c:	7b 01       	movw	r14, r22
    168e:	77 ff       	sbrs	r23, 7
    1690:	04 c0       	rjmp	.+8      	; 0x169a <string_write_float+0x88>
    1692:	ee 24       	eor	r14, r14
    1694:	ff 24       	eor	r15, r15
    1696:	e6 1a       	sub	r14, r22
    1698:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
    169a:	e1 14       	cp	r14, r1
    169c:	f1 04       	cpc	r15, r1
    169e:	a1 f0       	breq	.+40     	; 0x16c8 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
    16a0:	b7 01       	movw	r22, r14
    16a2:	88 27       	eor	r24, r24
    16a4:	77 fd       	sbrc	r23, 7
    16a6:	80 95       	com	r24
    16a8:	98 2f       	mov	r25, r24
    16aa:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__floatsisf>
    16ae:	0e 94 b4 11 	call	0x2368	; 0x2368 <log10>
    16b2:	0e 94 a7 10 	call	0x214e	; 0x214e <floor>
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>
    16c2:	0e 94 39 10 	call	0x2072	; 0x2072 <__fixsfsi>
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <string_write_float+0xba>
    } else {
        digits = 0;
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    16cc:	c1 2c       	mov	r12, r1
    16ce:	d1 2c       	mov	r13, r1
    16d0:	06 1b       	sub	r16, r22
    16d2:	17 0b       	sbc	r17, r23
    16d4:	c0 16       	cp	r12, r16
    16d6:	d1 06       	cpc	r13, r17
    16d8:	44 f4       	brge	.+16     	; 0x16ea <string_write_float+0xd8>
    {
        string_write("0");
    16da:	80 e4       	ldi	r24, 0x40	; 64
    16dc:	93 e0       	ldi	r25, 0x03	; 3
    16de:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	c8 1a       	sub	r12, r24
    16e6:	d8 0a       	sbc	r13, r24
    16e8:	f5 cf       	rjmp	.-22     	; 0x16d4 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
    16ea:	64 e0       	ldi	r22, 0x04	; 4
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	c7 01       	movw	r24, r14
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
    1708:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <string_write_int>

0000170c <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	8c 01       	movw	r16, r24
    171e:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
    1720:	0e 94 19 0a 	call	0x1432	; 0x1432 <get_current_address>
    1724:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    1726:	c0 e0       	ldi	r28, 0x00	; 0
    1728:	d0 e0       	ldi	r29, 0x00	; 0
    172a:	cc 15       	cp	r28, r12
    172c:	dd 05       	cpc	r29, r13
    172e:	9c f4       	brge	.+38     	; 0x1756 <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
    1730:	f8 01       	movw	r30, r16
    1732:	01 90       	ld	r0, Z+
    1734:	00 20       	and	r0, r0
    1736:	e9 f7       	brne	.-6      	; 0x1732 <string_write_numchars+0x26>
    1738:	31 97       	sbiw	r30, 0x01	; 1
    173a:	e0 1b       	sub	r30, r16
    173c:	f1 0b       	sbc	r31, r17
    173e:	ce 17       	cp	r28, r30
    1740:	df 07       	cpc	r29, r31
    1742:	48 f4       	brcc	.+18     	; 0x1756 <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
    1744:	f7 01       	movw	r30, r14
    1746:	81 91       	ld	r24, Z+
    1748:	7f 01       	movw	r14, r30
    174a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <char_write>
        get_current_address();
    174e:	0e 94 19 0a 	call	0x1432	; 0x1432 <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    1752:	21 96       	adiw	r28, 0x01	; 1
    1754:	ea cf       	rjmp	.-44     	; 0x172a <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	08 95       	ret

00001768 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	00 d0       	rcall	.+0      	; 0x176e <tag_check+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <tag_check+0x8>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <tag_check+0xa>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
    1776:	26 e0       	ldi	r18, 0x06	; 6
    1778:	ec e0       	ldi	r30, 0x0C	; 12
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	de 01       	movw	r26, r28
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	01 90       	ld	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	2a 95       	dec	r18
    1786:	e1 f7       	brne	.-8      	; 0x1780 <tag_check+0x18>
    1788:	fe 01       	movw	r30, r28
    178a:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	dc 01       	movw	r26, r24
    1792:	a2 0f       	add	r26, r18
    1794:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
    1796:	4c 91       	ld	r20, X
    1798:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
    179a:	2f 5f       	subi	r18, 0xFF	; 255
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	26 30       	cpi	r18, 0x06	; 6
    17a0:	31 05       	cpc	r19, r1
    17a2:	b1 f7       	brne	.-20     	; 0x1790 <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
    17a4:	62 e4       	ldi	r22, 0x42	; 66
    17a6:	73 e0       	ldi	r23, 0x03	; 3
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <strcmp>
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	89 2b       	or	r24, r25
    17b6:	11 f0       	breq	.+4      	; 0x17bc <tag_check+0x54>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
    17bc:	c9 01       	movw	r24, r18
    17be:	26 96       	adiw	r28, 0x06	; 6
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <strtok_single+0x10>
    src = in_str;
    17d8:	90 93 b2 03 	sts	0x03B2, r25
    17dc:	80 93 b1 03 	sts	0x03B1, r24

  if (src == NULL)
    17e0:	c0 91 b1 03 	lds	r28, 0x03B1
    17e4:	d0 91 b2 03 	lds	r29, 0x03B2
    17e8:	20 97       	sbiw	r28, 0x00	; 0
    17ea:	69 f0       	breq	.+26     	; 0x1806 <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
    17ec:	ce 01       	movw	r24, r28
    17ee:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <strpbrk>
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	41 f0       	breq	.+16     	; 0x1806 <strtok_single+0x36>
    *p  = 0;
    17f6:	fc 01       	movw	r30, r24
    17f8:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
    17fa:	f0 93 b2 03 	sts	0x03B2, r31
    17fe:	e0 93 b1 03 	sts	0x03B1, r30
    1802:	ce 01       	movw	r24, r28
    1804:	02 c0       	rjmp	.+4      	; 0x180a <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <parse_nmea>:
#include <util/delay.h>
#include "gps.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the gps_data fields
int parse_nmea(char *in_sent, char *gps_data[13]){
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	8b 01       	movw	r16, r22

	int i = 0, j=0;
	char* token;

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
    181a:	63 e1       	ldi	r22, 0x13	; 19
    181c:	71 e0       	ldi	r23, 0x01	; 1
    181e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <strtok_single>
    1822:	ec 01       	movw	r28, r24
	strcpy(gps_data[0], token);
    1824:	bc 01       	movw	r22, r24
    1826:	d8 01       	movw	r26, r16
    1828:	8d 91       	ld	r24, X+
    182a:	9c 91       	ld	r25, X
    182c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <strcpy>

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    1830:	fe 01       	movw	r30, r28
    1832:	01 90       	ld	r0, Z+
    1834:	00 20       	and	r0, r0
    1836:	e9 f7       	brne	.-6      	; 0x1832 <parse_nmea+0x22>
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	ec 1b       	sub	r30, r28
    183c:	fd 0b       	sbc	r31, r29
    183e:	e0 31       	cpi	r30, 0x10	; 16
    1840:	f1 05       	cpc	r31, r1
    1842:	5c f4       	brge	.+22     	; 0x185a <parse_nmea+0x4a>
	{
		gps_data[0][j] = '\0';
    1844:	d8 01       	movw	r26, r16
    1846:	8d 91       	ld	r24, X+
    1848:	9c 91       	ld	r25, X
    184a:	8e 0f       	add	r24, r30
    184c:	9f 1f       	adc	r25, r31
    184e:	dc 01       	movw	r26, r24
    1850:	1c 92       	st	X, r1
	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
	strcpy(gps_data[0], token);

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    1852:	31 96       	adiw	r30, 0x01	; 1
    1854:	f4 cf       	rjmp	.-24     	; 0x183e <parse_nmea+0x2e>
    1856:	0e 5f       	subi	r16, 0xFE	; 254
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		gps_data[0][j] = '\0';
	}

	//copy over the rest of the tokens
	while(token) 
    185a:	cd 2b       	or	r28, r29
    185c:	11 f1       	breq	.+68     	; 0x18a2 <parse_nmea+0x92>
	{
		i++;
		token = strtok_single(NULL, ",");
    185e:	63 e1       	ldi	r22, 0x13	; 19
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <strtok_single>
    186a:	ec 01       	movw	r28, r24
		strcpy(gps_data[i], token);
    186c:	bc 01       	movw	r22, r24
    186e:	f8 01       	movw	r30, r16
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <strcpy>
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    1878:	fe 01       	movw	r30, r28
    187a:	01 90       	ld	r0, Z+
    187c:	00 20       	and	r0, r0
    187e:	e9 f7       	brne	.-6      	; 0x187a <parse_nmea+0x6a>
    1880:	31 97       	sbiw	r30, 0x01	; 1
    1882:	ec 1b       	sub	r30, r28
    1884:	fd 0b       	sbc	r31, r29
    1886:	e0 31       	cpi	r30, 0x10	; 16
    1888:	f1 05       	cpc	r31, r1
    188a:	2c f7       	brge	.-54     	; 0x1856 <parse_nmea+0x46>
		{
			gps_data[i][j] = '\0';
    188c:	d8 01       	movw	r26, r16
    188e:	12 96       	adiw	r26, 0x02	; 2
    1890:	8d 91       	ld	r24, X+
    1892:	9c 91       	ld	r25, X
    1894:	13 97       	sbiw	r26, 0x03	; 3
    1896:	8e 0f       	add	r24, r30
    1898:	9f 1f       	adc	r25, r31
    189a:	dc 01       	movw	r26, r24
    189c:	1c 92       	st	X, r1
	{
		i++;
		token = strtok_single(NULL, ",");
		strcpy(gps_data[i], token);
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    189e:	31 96       	adiw	r30, 0x01	; 1
    18a0:	f2 cf       	rjmp	.-28     	; 0x1886 <parse_nmea+0x76>
			gps_data[i][j] = '\0';
		}
	}

	return 0;
}
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
    18b0:	fc 01       	movw	r30, r24
    18b2:	9f 01       	movw	r18, r30
    18b4:	28 1b       	sub	r18, r24
    18b6:	39 0b       	sbc	r19, r25
    18b8:	26 17       	cp	r18, r22
    18ba:	37 07       	cpc	r19, r23
    18bc:	14 f4       	brge	.+4      	; 0x18c2 <wipe_chars+0x12>
	{
		str[i] = '\0';
    18be:	11 92       	st	Z+, r1
    18c0:	f8 cf       	rjmp	.-16     	; 0x18b2 <wipe_chars+0x2>
	}
}
    18c2:	08 95       	ret

000018c4 <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	27 97       	sbiw	r28, 0x07	; 7
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	5c 01       	movw	r10, r24
    18e8:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
    18ea:	fc 01       	movw	r30, r24
    18ec:	80 81       	ld	r24, Z
    18ee:	99 27       	eor	r25, r25
    18f0:	87 fd       	sbrc	r24, 7
    18f2:	90 95       	com	r25
    18f4:	c0 97       	sbiw	r24, 0x30	; 48
    18f6:	2a e0       	ldi	r18, 0x0A	; 10
    18f8:	28 9f       	mul	r18, r24
    18fa:	b0 01       	movw	r22, r0
    18fc:	29 9f       	mul	r18, r25
    18fe:	70 0d       	add	r23, r0
    1900:	11 24       	eor	r1, r1
    1902:	81 81       	ldd	r24, Z+1	; 0x01
    1904:	99 27       	eor	r25, r25
    1906:	87 fd       	sbrc	r24, 7
    1908:	90 95       	com	r25
    190a:	c0 97       	sbiw	r24, 0x30	; 48
    190c:	68 0f       	add	r22, r24
    190e:	79 1f       	adc	r23, r25
    1910:	88 27       	eor	r24, r24
    1912:	77 fd       	sbrc	r23, 7
    1914:	80 95       	com	r24
    1916:	98 2f       	mov	r25, r24
    1918:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__floatsisf>
    191c:	6b 01       	movw	r12, r22
    191e:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
    1920:	b5 01       	movw	r22, r10
    1922:	6e 5f       	subi	r22, 0xFE	; 254
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	47 e0       	ldi	r20, 0x07	; 7
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strncpy>

	float minutes = strtod(temp,NULL);
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	ce 01       	movw	r24, r28
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e7       	ldi	r20, 0x70	; 112
    1944:	52 e4       	ldi	r21, 0x42	; 66
    1946:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	c7 01       	movw	r24, r14
    1950:	b6 01       	movw	r22, r12
    1952:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
    1956:	13 35       	cpi	r17, 0x53	; 83
    1958:	09 f4       	brne	.+2      	; 0x195c <lat2dec+0x98>
		result *= -1;
    195a:	90 58       	subi	r25, 0x80	; 128

	return result;

}
    195c:	27 96       	adiw	r28, 0x07	; 7
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	08 95       	ret

0000197c <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	27 97       	sbiw	r28, 0x07	; 7
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	5c 01       	movw	r10, r24
    19a0:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
    19a2:	fc 01       	movw	r30, r24
    19a4:	80 81       	ld	r24, Z
    19a6:	99 27       	eor	r25, r25
    19a8:	87 fd       	sbrc	r24, 7
    19aa:	90 95       	com	r25
    19ac:	c0 97       	sbiw	r24, 0x30	; 48
    19ae:	24 e6       	ldi	r18, 0x64	; 100
    19b0:	28 9f       	mul	r18, r24
    19b2:	b0 01       	movw	r22, r0
    19b4:	29 9f       	mul	r18, r25
    19b6:	70 0d       	add	r23, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	81 81       	ldd	r24, Z+1	; 0x01
    19bc:	99 27       	eor	r25, r25
    19be:	87 fd       	sbrc	r24, 7
    19c0:	90 95       	com	r25
    19c2:	c0 97       	sbiw	r24, 0x30	; 48
    19c4:	4a e0       	ldi	r20, 0x0A	; 10
    19c6:	48 9f       	mul	r20, r24
    19c8:	90 01       	movw	r18, r0
    19ca:	49 9f       	mul	r20, r25
    19cc:	30 0d       	add	r19, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	62 0f       	add	r22, r18
    19d2:	73 1f       	adc	r23, r19
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	99 27       	eor	r25, r25
    19d8:	87 fd       	sbrc	r24, 7
    19da:	90 95       	com	r25
    19dc:	c0 97       	sbiw	r24, 0x30	; 48
    19de:	68 0f       	add	r22, r24
    19e0:	79 1f       	adc	r23, r25
    19e2:	88 27       	eor	r24, r24
    19e4:	77 fd       	sbrc	r23, 7
    19e6:	80 95       	com	r24
    19e8:	98 2f       	mov	r25, r24
    19ea:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__floatsisf>
    19ee:	6b 01       	movw	r12, r22
    19f0:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
    19f2:	b5 01       	movw	r22, r10
    19f4:	6d 5f       	subi	r22, 0xFD	; 253
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	47 e0       	ldi	r20, 0x07	; 7
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strncpy>

	float minutes = strtod(temp,NULL);
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	ce 01       	movw	r24, r28
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e7       	ldi	r20, 0x70	; 112
    1a16:	52 e4       	ldi	r21, 0x42	; 66
    1a18:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
    1a1c:	9b 01       	movw	r18, r22
    1a1e:	ac 01       	movw	r20, r24
    1a20:	c7 01       	movw	r24, r14
    1a22:	b6 01       	movw	r22, r12
    1a24:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
    1a28:	17 35       	cpi	r17, 0x57	; 87
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <lon2dec+0xb2>
		result *= -1;
    1a2c:	90 58       	subi	r25, 0x80	; 128

	return result;
}
    1a2e:	27 96       	adiw	r28, 0x07	; 7
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	df 90       	pop	r13
    1a46:	cf 90       	pop	r12
    1a48:	bf 90       	pop	r11
    1a4a:	af 90       	pop	r10
    1a4c:	08 95       	ret

00001a4e <update_user_gps_data>:

//use the raw gps_data fields to populate the UserData struct
void update_user_gps_data(char *gps_data[13], UserData *user)
{
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	8c 01       	movw	r16, r24
    1a5c:	eb 01       	movw	r28, r22
	wipe_chars(user->msg_type,8);
    1a5e:	68 e0       	ldi	r22, 0x08	; 8
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	ce 01       	movw	r24, r28
    1a64:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <wipe_chars>
	strcpy(user->msg_type,gps_data[0]);
    1a68:	d8 01       	movw	r26, r16
    1a6a:	6d 91       	ld	r22, X+
    1a6c:	7c 91       	ld	r23, X
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <strcpy>

	wipe_chars(user->utc_time,8);
    1a74:	68 e0       	ldi	r22, 0x08	; 8
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	ce 01       	movw	r24, r28
    1a7a:	08 96       	adiw	r24, 0x08	; 8
    1a7c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <wipe_chars>
	user->utc_time[0] = gps_data[1][0];
    1a80:	d8 01       	movw	r26, r16
    1a82:	12 96       	adiw	r26, 0x02	; 2
    1a84:	ed 91       	ld	r30, X+
    1a86:	fc 91       	ld	r31, X
    1a88:	13 97       	sbiw	r26, 0x03	; 3
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 87       	std	Y+8, r24	; 0x08
	user->utc_time[1] = gps_data[1][1];
    1a8e:	12 96       	adiw	r26, 0x02	; 2
    1a90:	ed 91       	ld	r30, X+
    1a92:	fc 91       	ld	r31, X
    1a94:	13 97       	sbiw	r26, 0x03	; 3
    1a96:	81 81       	ldd	r24, Z+1	; 0x01
    1a98:	89 87       	std	Y+9, r24	; 0x09
	user->utc_time[2] = ':';
    1a9a:	8a e3       	ldi	r24, 0x3A	; 58
    1a9c:	8a 87       	std	Y+10, r24	; 0x0a
	user->utc_time[3] = gps_data[1][2];
    1a9e:	12 96       	adiw	r26, 0x02	; 2
    1aa0:	ed 91       	ld	r30, X+
    1aa2:	fc 91       	ld	r31, X
    1aa4:	13 97       	sbiw	r26, 0x03	; 3
    1aa6:	92 81       	ldd	r25, Z+2	; 0x02
    1aa8:	9b 87       	std	Y+11, r25	; 0x0b
	user->utc_time[4] = gps_data[1][3];
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	ed 91       	ld	r30, X+
    1aae:	fc 91       	ld	r31, X
    1ab0:	13 97       	sbiw	r26, 0x03	; 3
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	9c 87       	std	Y+12, r25	; 0x0c
	user->utc_time[5] = ':';
    1ab6:	8d 87       	std	Y+13, r24	; 0x0d
	user->utc_time[6] = gps_data[1][4];
    1ab8:	12 96       	adiw	r26, 0x02	; 2
    1aba:	ed 91       	ld	r30, X+
    1abc:	fc 91       	ld	r31, X
    1abe:	13 97       	sbiw	r26, 0x03	; 3
    1ac0:	84 81       	ldd	r24, Z+4	; 0x04
    1ac2:	8e 87       	std	Y+14, r24	; 0x0e
	user->utc_time[7] = gps_data[1][5];
    1ac4:	12 96       	adiw	r26, 0x02	; 2
    1ac6:	ed 91       	ld	r30, X+
    1ac8:	fc 91       	ld	r31, X
    1aca:	13 97       	sbiw	r26, 0x03	; 3
    1acc:	85 81       	ldd	r24, Z+5	; 0x05
    1ace:	8f 87       	std	Y+15, r24	; 0x0f

	user->nrw = gps_data[2][0];
    1ad0:	14 96       	adiw	r26, 0x04	; 4
    1ad2:	ed 91       	ld	r30, X+
    1ad4:	fc 91       	ld	r31, X
    1ad6:	15 97       	sbiw	r26, 0x05	; 5
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 8b       	std	Y+16, r24	; 0x10

	user->lat = 0;
    1adc:	19 8a       	std	Y+17, r1	; 0x11
    1ade:	1a 8a       	std	Y+18, r1	; 0x12
    1ae0:	1b 8a       	std	Y+19, r1	; 0x13
    1ae2:	1c 8a       	std	Y+20, r1	; 0x14
	user->lat = lat2dec(gps_data[3], gps_data[4][0]);
    1ae4:	18 96       	adiw	r26, 0x08	; 8
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	19 97       	sbiw	r26, 0x09	; 9
    1aec:	60 81       	ld	r22, Z
    1aee:	16 96       	adiw	r26, 0x06	; 6
    1af0:	8d 91       	ld	r24, X+
    1af2:	9c 91       	ld	r25, X
    1af4:	17 97       	sbiw	r26, 0x07	; 7
    1af6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <lat2dec>
    1afa:	69 8b       	std	Y+17, r22	; 0x11
    1afc:	7a 8b       	std	Y+18, r23	; 0x12
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
    1b00:	9c 8b       	std	Y+20, r25	; 0x14

	user->lon = 0;
    1b02:	1d 8a       	std	Y+21, r1	; 0x15
    1b04:	1e 8a       	std	Y+22, r1	; 0x16
    1b06:	1f 8a       	std	Y+23, r1	; 0x17
    1b08:	18 8e       	std	Y+24, r1	; 0x18
	user->lon = lon2dec(gps_data[5], gps_data[6][0]);
    1b0a:	d8 01       	movw	r26, r16
    1b0c:	1c 96       	adiw	r26, 0x0c	; 12
    1b0e:	ed 91       	ld	r30, X+
    1b10:	fc 91       	ld	r31, X
    1b12:	1d 97       	sbiw	r26, 0x0d	; 13
    1b14:	60 81       	ld	r22, Z
    1b16:	1a 96       	adiw	r26, 0x0a	; 10
    1b18:	8d 91       	ld	r24, X+
    1b1a:	9c 91       	ld	r25, X
    1b1c:	1b 97       	sbiw	r26, 0x0b	; 11
    1b1e:	0e 94 be 0c 	call	0x197c	; 0x197c <lon2dec>
    1b22:	6d 8b       	std	Y+21, r22	; 0x15
    1b24:	7e 8b       	std	Y+22, r23	; 0x16
    1b26:	8f 8b       	std	Y+23, r24	; 0x17
    1b28:	98 8f       	std	Y+24, r25	; 0x18

	user->speed = 0;
    1b2a:	19 8e       	std	Y+25, r1	; 0x19
    1b2c:	1a 8e       	std	Y+26, r1	; 0x1a
    1b2e:	1b 8e       	std	Y+27, r1	; 0x1b
    1b30:	1c 8e       	std	Y+28, r1	; 0x1c
	user->speed = (float)strtod(gps_data[7],NULL);
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	f8 01       	movw	r30, r16
    1b38:	86 85       	ldd	r24, Z+14	; 0x0e
    1b3a:	97 85       	ldd	r25, Z+15	; 0x0f
    1b3c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <strtod>
    1b40:	69 8f       	std	Y+25, r22	; 0x19
    1b42:	7a 8f       	std	Y+26, r23	; 0x1a
    1b44:	8b 8f       	std	Y+27, r24	; 0x1b
    1b46:	9c 8f       	std	Y+28, r25	; 0x1c

	user->course = 0;
    1b48:	1d 8e       	std	Y+29, r1	; 0x1d
    1b4a:	1e 8e       	std	Y+30, r1	; 0x1e
    1b4c:	1f 8e       	std	Y+31, r1	; 0x1f
    1b4e:	18 a2       	std	Y+32, r1	; 0x20
	user->course = (float)strtod(gps_data[8],NULL);
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	d8 01       	movw	r26, r16
    1b56:	50 96       	adiw	r26, 0x10	; 16
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	51 97       	sbiw	r26, 0x11	; 17
    1b5e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <strtod>
    1b62:	6d 8f       	std	Y+29, r22	; 0x1d
    1b64:	7e 8f       	std	Y+30, r23	; 0x1e
    1b66:	8f 8f       	std	Y+31, r24	; 0x1f
    1b68:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(user->date,8);
    1b6a:	68 e0       	ldi	r22, 0x08	; 8
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	ce 01       	movw	r24, r28
    1b70:	81 96       	adiw	r24, 0x21	; 33
    1b72:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <wipe_chars>
	user->date[0] = gps_data[9][2];
    1b76:	d8 01       	movw	r26, r16
    1b78:	52 96       	adiw	r26, 0x12	; 18
    1b7a:	ed 91       	ld	r30, X+
    1b7c:	fc 91       	ld	r31, X
    1b7e:	53 97       	sbiw	r26, 0x13	; 19
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	89 a3       	std	Y+33, r24	; 0x21
	user->date[1] = gps_data[9][3];
    1b84:	52 96       	adiw	r26, 0x12	; 18
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	53 97       	sbiw	r26, 0x13	; 19
    1b8c:	83 81       	ldd	r24, Z+3	; 0x03
    1b8e:	8a a3       	std	Y+34, r24	; 0x22
	user->date[2] = '/';
    1b90:	8f e2       	ldi	r24, 0x2F	; 47
    1b92:	8b a3       	std	Y+35, r24	; 0x23
	user->date[3] = gps_data[9][0];
    1b94:	52 96       	adiw	r26, 0x12	; 18
    1b96:	ed 91       	ld	r30, X+
    1b98:	fc 91       	ld	r31, X
    1b9a:	53 97       	sbiw	r26, 0x13	; 19
    1b9c:	90 81       	ld	r25, Z
    1b9e:	9c a3       	std	Y+36, r25	; 0x24
	user->date[4] = gps_data[9][1];
    1ba0:	52 96       	adiw	r26, 0x12	; 18
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	53 97       	sbiw	r26, 0x13	; 19
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	9d a3       	std	Y+37, r25	; 0x25
	user->date[5] = '/';
    1bac:	8e a3       	std	Y+38, r24	; 0x26
	user->date[6] = gps_data[9][4];
    1bae:	52 96       	adiw	r26, 0x12	; 18
    1bb0:	ed 91       	ld	r30, X+
    1bb2:	fc 91       	ld	r31, X
    1bb4:	53 97       	sbiw	r26, 0x13	; 19
    1bb6:	84 81       	ldd	r24, Z+4	; 0x04
    1bb8:	8f a3       	std	Y+39, r24	; 0x27
	user->date[7] = gps_data[9][5];
    1bba:	52 96       	adiw	r26, 0x12	; 18
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	53 97       	sbiw	r26, 0x13	; 19
    1bc2:	85 81       	ldd	r24, Z+5	; 0x05
    1bc4:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(user->mag_var,8);
    1bc6:	7e 01       	movw	r14, r28
    1bc8:	b9 e2       	ldi	r27, 0x29	; 41
    1bca:	eb 0e       	add	r14, r27
    1bcc:	f1 1c       	adc	r15, r1
    1bce:	68 e0       	ldi	r22, 0x08	; 8
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <wipe_chars>
	strcpy(user->mag_var,gps_data[10]);
    1bd8:	f8 01       	movw	r30, r16
    1bda:	64 89       	ldd	r22, Z+20	; 0x14
    1bdc:	75 89       	ldd	r23, Z+21	; 0x15
    1bde:	c7 01       	movw	r24, r14
    1be0:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <strcpy>

	user->mode = gps_data[12][0];
    1be4:	d8 01       	movw	r26, r16
    1be6:	58 96       	adiw	r26, 0x18	; 24
    1be8:	ed 91       	ld	r30, X+
    1bea:	fc 91       	ld	r31, X
    1bec:	59 97       	sbiw	r26, 0x19	; 25
    1bee:	80 81       	ld	r24, Z
    1bf0:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(user->checksum,3);
    1bf2:	63 e0       	ldi	r22, 0x03	; 3
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	c2 96       	adiw	r24, 0x32	; 50
    1bfa:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <wipe_chars>
	user->checksum[0] = gps_data[12][1];
    1bfe:	d8 01       	movw	r26, r16
    1c00:	58 96       	adiw	r26, 0x18	; 24
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	59 97       	sbiw	r26, 0x19	; 25
    1c08:	81 81       	ldd	r24, Z+1	; 0x01
    1c0a:	8a ab       	std	Y+50, r24	; 0x32
	user->checksum[1] = gps_data[12][2];
    1c0c:	58 96       	adiw	r26, 0x18	; 24
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	59 97       	sbiw	r26, 0x19	; 25
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	8b ab       	std	Y+51, r24	; 0x33
	user->checksum[2] = gps_data[12][3];
    1c18:	58 96       	adiw	r26, 0x18	; 24
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	59 97       	sbiw	r26, 0x19	; 25
    1c20:	83 81       	ldd	r24, Z+3	; 0x03
    1c22:	8c ab       	std	Y+52, r24	; 0x34
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	08 95       	ret

00001c32 <my_eeprom_read_int>:
//---- EEPROM Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1c32:	0e 94 2f 19 	call	0x325e	; 0x325e <__eerd_byte_m1284p>
    return (temp_num);
}
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	08 95       	ret

00001c3a <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    1c3a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__eerd_byte_m1284p>

00001c3e <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1c3e:	0c 94 37 19 	jmp	0x326e	; 0x326e <__eerd_dword_m1284p>

00001c42 <my_eeprom_read_string>:
    1c42:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__eerd_block_m1284p>

00001c46 <main>:
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	1f 92       	push	r1
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <prepare_device>
    1c54:	07 e3       	ldi	r16, 0x37	; 55
    1c56:	14 e0       	ldi	r17, 0x04	; 4
    1c58:	80 e1       	ldi	r24, 0x10	; 16
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <malloc>
    1c60:	f8 01       	movw	r30, r16
    1c62:	81 93       	st	Z+, r24
    1c64:	91 93       	st	Z+, r25
    1c66:	8f 01       	movw	r16, r30
    1c68:	f4 e0       	ldi	r31, 0x04	; 4
    1c6a:	01 35       	cpi	r16, 0x51	; 81
    1c6c:	1f 07       	cpc	r17, r31
    1c6e:	a1 f7       	brne	.-24     	; 0x1c58 <main+0x12>
    1c70:	85 e3       	ldi	r24, 0x35	; 53
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 f5 13 	call	0x27ea	; 0x27ea <malloc>
    1c78:	90 93 b6 03 	sts	0x03B6, r25
    1c7c:	80 93 b5 03 	sts	0x03B5, r24
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	93 e0       	ldi	r25, 0x03	; 3
    1c84:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    1c88:	0e 94 e6 01 	call	0x3cc	; 0x3cc <database_load>
    1c8c:	2f e3       	ldi	r18, 0x3F	; 63
    1c8e:	8d e0       	ldi	r24, 0x0D	; 13
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	21 50       	subi	r18, 0x01	; 1
    1c94:	80 40       	sbci	r24, 0x00	; 0
    1c96:	90 40       	sbci	r25, 0x00	; 0
    1c98:	e1 f7       	brne	.-8      	; 0x1c92 <main+0x4c>
    1c9a:	00 c0       	rjmp	.+0      	; 0x1c9c <main+0x56>
    1c9c:	00 00       	nop
    1c9e:	02 e0       	ldi	r16, 0x02	; 2
    1ca0:	10 e0       	ldi	r17, 0x00	; 0
    1ca2:	e0 90 50 03 	lds	r14, 0x0350
    1ca6:	f0 90 51 03 	lds	r15, 0x0351
    1caa:	e1 e0       	ldi	r30, 0x01	; 1
    1cac:	ee 16       	cp	r14, r30
    1cae:	f1 04       	cpc	r15, r1
    1cb0:	f1 f0       	breq	.+60     	; 0x1cee <main+0xa8>
    1cb2:	f2 e0       	ldi	r31, 0x02	; 2
    1cb4:	ef 16       	cp	r14, r31
    1cb6:	f1 04       	cpc	r15, r1
    1cb8:	89 f0       	breq	.+34     	; 0x1cdc <main+0x96>
    1cba:	ef 28       	or	r14, r15
    1cbc:	91 f7       	brne	.-28     	; 0x1ca2 <main+0x5c>
    1cbe:	80 91 ad 03 	lds	r24, 0x03AD
    1cc2:	90 91 ae 03 	lds	r25, 0x03AE
    1cc6:	18 16       	cp	r1, r24
    1cc8:	19 06       	cpc	r1, r25
    1cca:	44 f0       	brlt	.+16     	; 0x1cdc <main+0x96>
    1ccc:	80 91 50 03 	lds	r24, 0x0350
    1cd0:	90 91 51 03 	lds	r25, 0x0351
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <main+0x94>
    1cd8:	4b c0       	rjmp	.+150    	; 0x1d70 <main+0x12a>
    1cda:	e3 cf       	rjmp	.-58     	; 0x1ca2 <main+0x5c>
    1cdc:	0e 94 86 08 	call	0x110c	; 0x110c <test_earth_distance>
    1ce0:	0e 94 ce 01 	call	0x39c	; 0x39c <enable_gps>
    1ce4:	0e 94 df 04 	call	0x9be	; 0x9be <print_gps_data>
    1ce8:	0e 94 af 05 	call	0xb5e	; 0xb5e <print_raw_gps_data>
    1cec:	da cf       	rjmp	.-76     	; 0x1ca2 <main+0x5c>
    1cee:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>
    1cf2:	80 91 4c 03 	lds	r24, 0x034C
    1cf6:	90 91 4d 03 	lds	r25, 0x034D
    1cfa:	89 2b       	or	r24, r25
    1cfc:	a1 f4       	brne	.+40     	; 0x1d26 <main+0xe0>
    1cfe:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    1d02:	84 e1       	ldi	r24, 0x14	; 20
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    1d0a:	f0 92 4d 03 	sts	0x034D, r15
    1d0e:	e0 92 4c 03 	sts	0x034C, r14
    1d12:	10 92 4b 03 	sts	0x034B, r1
    1d16:	10 92 4a 03 	sts	0x034A, r1
    1d1a:	10 92 4f 03 	sts	0x034F, r1
    1d1e:	10 92 4e 03 	sts	0x034E, r1
    1d22:	0e 94 97 02 	call	0x52e	; 0x52e <database_free>
    1d26:	90 91 ac 03 	lds	r25, 0x03AC
    1d2a:	80 91 ab 03 	lds	r24, 0x03AB
    1d2e:	98 17       	cp	r25, r24
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <main+0xee>
    1d32:	43 c0       	rjmp	.+134    	; 0x1dba <main+0x174>
    1d34:	10 92 a4 03 	sts	0x03A4, r1
    1d38:	10 92 a5 03 	sts	0x03A5, r1
    1d3c:	10 92 a6 03 	sts	0x03A6, r1
    1d40:	10 92 a7 03 	sts	0x03A7, r1
    1d44:	0e 94 24 03 	call	0x648	; 0x648 <getChar>
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	0e 94 0f 03 	call	0x61e	; 0x61e <detectSerialEnd>
    1d4e:	69 81       	ldd	r22, Y+1	; 0x01
    1d50:	89 2b       	or	r24, r25
    1d52:	19 f1       	breq	.+70     	; 0x1d9a <main+0x154>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 44 03 	call	0x688	; 0x688 <terminate_serial>
    1d5c:	0e 94 65 06 	call	0xcca	; 0xcca <check_database_integrity>
    1d60:	80 91 4a 03 	lds	r24, 0x034A
    1d64:	90 91 4b 03 	lds	r25, 0x034B
    1d68:	89 2b       	or	r24, r25
    1d6a:	39 f0       	breq	.+14     	; 0x1d7a <main+0x134>
    1d6c:	0e 94 29 06 	call	0xc52	; 0xc52 <wipe_eeprom>
    1d70:	10 93 51 03 	sts	0x0351, r17
    1d74:	00 93 50 03 	sts	0x0350, r16
    1d78:	94 cf       	rjmp	.-216    	; 0x1ca2 <main+0x5c>
    1d7a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <lcd_init>
    1d7e:	8d e2       	ldi	r24, 0x2D	; 45
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 c0 0a 	call	0x1580	; 0x1580 <string_write>
    1d86:	2f e3       	ldi	r18, 0x3F	; 63
    1d88:	8d e0       	ldi	r24, 0x0D	; 13
    1d8a:	93 e0       	ldi	r25, 0x03	; 3
    1d8c:	21 50       	subi	r18, 0x01	; 1
    1d8e:	80 40       	sbci	r24, 0x00	; 0
    1d90:	90 40       	sbci	r25, 0x00	; 0
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <main+0x146>
    1d94:	00 c0       	rjmp	.+0      	; 0x1d96 <main+0x150>
    1d96:	00 00       	nop
    1d98:	84 cf       	rjmp	.-248    	; 0x1ca2 <main+0x5c>
    1d9a:	80 91 4e 03 	lds	r24, 0x034E
    1d9e:	90 91 4f 03 	lds	r25, 0x034F
    1da2:	0e 94 3d 19 	call	0x327a	; 0x327a <__eewr_byte_m1284p>
    1da6:	80 91 4e 03 	lds	r24, 0x034E
    1daa:	90 91 4f 03 	lds	r25, 0x034F
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	90 93 4f 03 	sts	0x034F, r25
    1db4:	80 93 4e 03 	sts	0x034E, r24
    1db8:	74 cf       	rjmp	.-280    	; 0x1ca2 <main+0x5c>
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	60 91 a4 03 	lds	r22, 0x03A4
    1dc6:	70 91 a5 03 	lds	r23, 0x03A5
    1dca:	80 91 a6 03 	lds	r24, 0x03A6
    1dce:	90 91 a7 03 	lds	r25, 0x03A7
    1dd2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>
    1dd6:	60 93 a4 03 	sts	0x03A4, r22
    1dda:	70 93 a5 03 	sts	0x03A5, r23
    1dde:	80 93 a6 03 	sts	0x03A6, r24
    1de2:	90 93 a7 03 	sts	0x03A7, r25
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e5       	ldi	r19, 0x50	; 80
    1dea:	43 e4       	ldi	r20, 0x43	; 67
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 a9 11 	call	0x2352	; 0x2352 <__gesf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <main+0x1b2>
    1df6:	55 cf       	rjmp	.-342    	; 0x1ca2 <main+0x5c>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 44 03 	call	0x688	; 0x688 <terminate_serial>
    1e00:	60 e2       	ldi	r22, 0x20	; 32
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_eeprom_contents>
    1e0c:	af cf       	rjmp	.-162    	; 0x1d6c <main+0x126>

00001e0e <__subsf3>:
    1e0e:	50 58       	subi	r21, 0x80	; 128

00001e10 <__addsf3>:
    1e10:	bb 27       	eor	r27, r27
    1e12:	aa 27       	eor	r26, r26
    1e14:	0e d0       	rcall	.+28     	; 0x1e32 <__addsf3x>
    1e16:	3b c2       	rjmp	.+1142   	; 0x228e <__fp_round>
    1e18:	04 d2       	rcall	.+1032   	; 0x2222 <__fp_pscA>
    1e1a:	30 f0       	brcs	.+12     	; 0x1e28 <__addsf3+0x18>
    1e1c:	09 d2       	rcall	.+1042   	; 0x2230 <__fp_pscB>
    1e1e:	20 f0       	brcs	.+8      	; 0x1e28 <__addsf3+0x18>
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <__addsf3+0x1e>
    1e22:	9f 3f       	cpi	r25, 0xFF	; 255
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <__addsf3+0x1a>
    1e26:	1e f4       	brtc	.+6      	; 0x1e2e <__addsf3+0x1e>
    1e28:	d4 c1       	rjmp	.+936    	; 0x21d2 <__fp_nan>
    1e2a:	0e f4       	brtc	.+2      	; 0x1e2e <__addsf3+0x1e>
    1e2c:	e0 95       	com	r30
    1e2e:	e7 fb       	bst	r30, 7
    1e30:	a1 c1       	rjmp	.+834    	; 0x2174 <__fp_inf>

00001e32 <__addsf3x>:
    1e32:	e9 2f       	mov	r30, r25
    1e34:	4e d2       	rcall	.+1180   	; 0x22d2 <__fp_split3>
    1e36:	80 f3       	brcs	.-32     	; 0x1e18 <__addsf3+0x8>
    1e38:	ba 17       	cp	r27, r26
    1e3a:	62 07       	cpc	r22, r18
    1e3c:	73 07       	cpc	r23, r19
    1e3e:	84 07       	cpc	r24, r20
    1e40:	95 07       	cpc	r25, r21
    1e42:	18 f0       	brcs	.+6      	; 0x1e4a <__addsf3x+0x18>
    1e44:	71 f4       	brne	.+28     	; 0x1e62 <__addsf3x+0x30>
    1e46:	9e f5       	brtc	.+102    	; 0x1eae <__addsf3x+0x7c>
    1e48:	7d c2       	rjmp	.+1274   	; 0x2344 <__fp_zero>
    1e4a:	0e f4       	brtc	.+2      	; 0x1e4e <__addsf3x+0x1c>
    1e4c:	e0 95       	com	r30
    1e4e:	0b 2e       	mov	r0, r27
    1e50:	ba 2f       	mov	r27, r26
    1e52:	a0 2d       	mov	r26, r0
    1e54:	0b 01       	movw	r0, r22
    1e56:	b9 01       	movw	r22, r18
    1e58:	90 01       	movw	r18, r0
    1e5a:	0c 01       	movw	r0, r24
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	a0 01       	movw	r20, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	ff 27       	eor	r31, r31
    1e64:	59 1b       	sub	r21, r25
    1e66:	99 f0       	breq	.+38     	; 0x1e8e <__addsf3x+0x5c>
    1e68:	59 3f       	cpi	r21, 0xF9	; 249
    1e6a:	50 f4       	brcc	.+20     	; 0x1e80 <__addsf3x+0x4e>
    1e6c:	50 3e       	cpi	r21, 0xE0	; 224
    1e6e:	68 f1       	brcs	.+90     	; 0x1eca <__addsf3x+0x98>
    1e70:	1a 16       	cp	r1, r26
    1e72:	f0 40       	sbci	r31, 0x00	; 0
    1e74:	a2 2f       	mov	r26, r18
    1e76:	23 2f       	mov	r18, r19
    1e78:	34 2f       	mov	r19, r20
    1e7a:	44 27       	eor	r20, r20
    1e7c:	58 5f       	subi	r21, 0xF8	; 248
    1e7e:	f3 cf       	rjmp	.-26     	; 0x1e66 <__addsf3x+0x34>
    1e80:	46 95       	lsr	r20
    1e82:	37 95       	ror	r19
    1e84:	27 95       	ror	r18
    1e86:	a7 95       	ror	r26
    1e88:	f0 40       	sbci	r31, 0x00	; 0
    1e8a:	53 95       	inc	r21
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <__addsf3x+0x4e>
    1e8e:	7e f4       	brtc	.+30     	; 0x1eae <__addsf3x+0x7c>
    1e90:	1f 16       	cp	r1, r31
    1e92:	ba 0b       	sbc	r27, r26
    1e94:	62 0b       	sbc	r22, r18
    1e96:	73 0b       	sbc	r23, r19
    1e98:	84 0b       	sbc	r24, r20
    1e9a:	ba f0       	brmi	.+46     	; 0x1eca <__addsf3x+0x98>
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	a1 f0       	breq	.+40     	; 0x1ec8 <__addsf3x+0x96>
    1ea0:	ff 0f       	add	r31, r31
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	66 1f       	adc	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	c2 f7       	brpl	.-16     	; 0x1e9c <__addsf3x+0x6a>
    1eac:	0e c0       	rjmp	.+28     	; 0x1eca <__addsf3x+0x98>
    1eae:	ba 0f       	add	r27, r26
    1eb0:	62 1f       	adc	r22, r18
    1eb2:	73 1f       	adc	r23, r19
    1eb4:	84 1f       	adc	r24, r20
    1eb6:	48 f4       	brcc	.+18     	; 0x1eca <__addsf3x+0x98>
    1eb8:	87 95       	ror	r24
    1eba:	77 95       	ror	r23
    1ebc:	67 95       	ror	r22
    1ebe:	b7 95       	ror	r27
    1ec0:	f7 95       	ror	r31
    1ec2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <__addsf3x+0x96>
    1ec6:	b3 cf       	rjmp	.-154    	; 0x1e2e <__addsf3+0x1e>
    1ec8:	93 95       	inc	r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <__addsf3x+0x9e>
    1ece:	99 27       	eor	r25, r25
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	97 95       	ror	r25
    1ed4:	87 95       	ror	r24
    1ed6:	08 95       	ret
    1ed8:	a4 d1       	rcall	.+840    	; 0x2222 <__fp_pscA>
    1eda:	58 f0       	brcs	.+22     	; 0x1ef2 <__addsf3x+0xc0>
    1edc:	80 e8       	ldi	r24, 0x80	; 128
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <__addsf3x+0xb2>
    1ee2:	9e ef       	ldi	r25, 0xFE	; 254
    1ee4:	a5 d1       	rcall	.+842    	; 0x2230 <__fp_pscB>
    1ee6:	28 f0       	brcs	.+10     	; 0x1ef2 <__addsf3x+0xc0>
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	51 e0       	ldi	r21, 0x01	; 1
    1eec:	59 f4       	brne	.+22     	; 0x1f04 <atan2+0xe>
    1eee:	5e ef       	ldi	r21, 0xFE	; 254
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <atan2+0xe>
    1ef2:	6f c1       	rjmp	.+734    	; 0x21d2 <__fp_nan>
    1ef4:	27 c2       	rjmp	.+1102   	; 0x2344 <__fp_zero>

00001ef6 <atan2>:
    1ef6:	e9 2f       	mov	r30, r25
    1ef8:	e0 78       	andi	r30, 0x80	; 128
    1efa:	eb d1       	rcall	.+982    	; 0x22d2 <__fp_split3>
    1efc:	68 f3       	brcs	.-38     	; 0x1ed8 <__addsf3x+0xa6>
    1efe:	09 2e       	mov	r0, r25
    1f00:	05 2a       	or	r0, r21
    1f02:	c1 f3       	breq	.-16     	; 0x1ef4 <__addsf3x+0xc2>
    1f04:	26 17       	cp	r18, r22
    1f06:	37 07       	cpc	r19, r23
    1f08:	48 07       	cpc	r20, r24
    1f0a:	59 07       	cpc	r21, r25
    1f0c:	38 f0       	brcs	.+14     	; 0x1f1c <atan2+0x26>
    1f0e:	0e 2e       	mov	r0, r30
    1f10:	07 f8       	bld	r0, 7
    1f12:	e0 25       	eor	r30, r0
    1f14:	69 f0       	breq	.+26     	; 0x1f30 <atan2+0x3a>
    1f16:	e0 25       	eor	r30, r0
    1f18:	e0 64       	ori	r30, 0x40	; 64
    1f1a:	0a c0       	rjmp	.+20     	; 0x1f30 <atan2+0x3a>
    1f1c:	ef 63       	ori	r30, 0x3F	; 63
    1f1e:	07 f8       	bld	r0, 7
    1f20:	00 94       	com	r0
    1f22:	07 fa       	bst	r0, 7
    1f24:	db 01       	movw	r26, r22
    1f26:	b9 01       	movw	r22, r18
    1f28:	9d 01       	movw	r18, r26
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	ad 01       	movw	r20, r26
    1f30:	ef 93       	push	r30
    1f32:	46 d0       	rcall	.+140    	; 0x1fc0 <__divsf3_pse>
    1f34:	ac d1       	rcall	.+856    	; 0x228e <__fp_round>
    1f36:	0a d0       	rcall	.+20     	; 0x1f4c <atan>
    1f38:	5f 91       	pop	r21
    1f3a:	55 23       	and	r21, r21
    1f3c:	31 f0       	breq	.+12     	; 0x1f4a <atan2+0x54>
    1f3e:	2b ed       	ldi	r18, 0xDB	; 219
    1f40:	3f e0       	ldi	r19, 0x0F	; 15
    1f42:	49 e4       	ldi	r20, 0x49	; 73
    1f44:	50 fd       	sbrc	r21, 0
    1f46:	49 ec       	ldi	r20, 0xC9	; 201
    1f48:	63 cf       	rjmp	.-314    	; 0x1e10 <__addsf3>
    1f4a:	08 95       	ret

00001f4c <atan>:
    1f4c:	df 93       	push	r29
    1f4e:	dd 27       	eor	r29, r29
    1f50:	b9 2f       	mov	r27, r25
    1f52:	bf 77       	andi	r27, 0x7F	; 127
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	16 16       	cp	r1, r22
    1f5a:	17 06       	cpc	r1, r23
    1f5c:	48 07       	cpc	r20, r24
    1f5e:	5b 07       	cpc	r21, r27
    1f60:	10 f4       	brcc	.+4      	; 0x1f66 <atan+0x1a>
    1f62:	d9 2f       	mov	r29, r25
    1f64:	fa d1       	rcall	.+1012   	; 0x235a <inverse>
    1f66:	9f 93       	push	r25
    1f68:	8f 93       	push	r24
    1f6a:	7f 93       	push	r23
    1f6c:	6f 93       	push	r22
    1f6e:	91 d3       	rcall	.+1826   	; 0x2692 <square>
    1f70:	e4 eb       	ldi	r30, 0xB4	; 180
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	31 d1       	rcall	.+610    	; 0x21d8 <__fp_powser>
    1f76:	8b d1       	rcall	.+790    	; 0x228e <__fp_round>
    1f78:	2f 91       	pop	r18
    1f7a:	3f 91       	pop	r19
    1f7c:	4f 91       	pop	r20
    1f7e:	5f 91       	pop	r21
    1f80:	7d d2       	rcall	.+1274   	; 0x247c <__mulsf3x>
    1f82:	dd 23       	and	r29, r29
    1f84:	49 f0       	breq	.+18     	; 0x1f98 <atan+0x4c>
    1f86:	90 58       	subi	r25, 0x80	; 128
    1f88:	a2 ea       	ldi	r26, 0xA2	; 162
    1f8a:	2a ed       	ldi	r18, 0xDA	; 218
    1f8c:	3f e0       	ldi	r19, 0x0F	; 15
    1f8e:	49 ec       	ldi	r20, 0xC9	; 201
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	d0 78       	andi	r29, 0x80	; 128
    1f94:	5d 27       	eor	r21, r29
    1f96:	4d df       	rcall	.-358    	; 0x1e32 <__addsf3x>
    1f98:	df 91       	pop	r29
    1f9a:	79 c1       	rjmp	.+754    	; 0x228e <__fp_round>

00001f9c <cos>:
    1f9c:	51 d1       	rcall	.+674    	; 0x2240 <__fp_rempio2>
    1f9e:	e3 95       	inc	r30
    1fa0:	87 c1       	rjmp	.+782    	; 0x22b0 <__fp_sinus>

00001fa2 <__divsf3>:
    1fa2:	0c d0       	rcall	.+24     	; 0x1fbc <__divsf3x>
    1fa4:	74 c1       	rjmp	.+744    	; 0x228e <__fp_round>
    1fa6:	44 d1       	rcall	.+648    	; 0x2230 <__fp_pscB>
    1fa8:	40 f0       	brcs	.+16     	; 0x1fba <__divsf3+0x18>
    1faa:	3b d1       	rcall	.+630    	; 0x2222 <__fp_pscA>
    1fac:	30 f0       	brcs	.+12     	; 0x1fba <__divsf3+0x18>
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <__divsf3+0x16>
    1fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fb2:	19 f0       	breq	.+6      	; 0x1fba <__divsf3+0x18>
    1fb4:	df c0       	rjmp	.+446    	; 0x2174 <__fp_inf>
    1fb6:	51 11       	cpse	r21, r1
    1fb8:	c6 c1       	rjmp	.+908    	; 0x2346 <__fp_szero>
    1fba:	0b c1       	rjmp	.+534    	; 0x21d2 <__fp_nan>

00001fbc <__divsf3x>:
    1fbc:	8a d1       	rcall	.+788    	; 0x22d2 <__fp_split3>
    1fbe:	98 f3       	brcs	.-26     	; 0x1fa6 <__divsf3+0x4>

00001fc0 <__divsf3_pse>:
    1fc0:	99 23       	and	r25, r25
    1fc2:	c9 f3       	breq	.-14     	; 0x1fb6 <__divsf3+0x14>
    1fc4:	55 23       	and	r21, r21
    1fc6:	b1 f3       	breq	.-20     	; 0x1fb4 <__divsf3+0x12>
    1fc8:	95 1b       	sub	r25, r21
    1fca:	55 0b       	sbc	r21, r21
    1fcc:	bb 27       	eor	r27, r27
    1fce:	aa 27       	eor	r26, r26
    1fd0:	62 17       	cp	r22, r18
    1fd2:	73 07       	cpc	r23, r19
    1fd4:	84 07       	cpc	r24, r20
    1fd6:	38 f0       	brcs	.+14     	; 0x1fe6 <__divsf3_pse+0x26>
    1fd8:	9f 5f       	subi	r25, 0xFF	; 255
    1fda:	5f 4f       	sbci	r21, 0xFF	; 255
    1fdc:	22 0f       	add	r18, r18
    1fde:	33 1f       	adc	r19, r19
    1fe0:	44 1f       	adc	r20, r20
    1fe2:	aa 1f       	adc	r26, r26
    1fe4:	a9 f3       	breq	.-22     	; 0x1fd0 <__divsf3_pse+0x10>
    1fe6:	33 d0       	rcall	.+102    	; 0x204e <__divsf3_pse+0x8e>
    1fe8:	0e 2e       	mov	r0, r30
    1fea:	3a f0       	brmi	.+14     	; 0x1ffa <__divsf3_pse+0x3a>
    1fec:	e0 e8       	ldi	r30, 0x80	; 128
    1fee:	30 d0       	rcall	.+96     	; 0x2050 <__divsf3_pse+0x90>
    1ff0:	91 50       	subi	r25, 0x01	; 1
    1ff2:	50 40       	sbci	r21, 0x00	; 0
    1ff4:	e6 95       	lsr	r30
    1ff6:	00 1c       	adc	r0, r0
    1ff8:	ca f7       	brpl	.-14     	; 0x1fec <__divsf3_pse+0x2c>
    1ffa:	29 d0       	rcall	.+82     	; 0x204e <__divsf3_pse+0x8e>
    1ffc:	fe 2f       	mov	r31, r30
    1ffe:	27 d0       	rcall	.+78     	; 0x204e <__divsf3_pse+0x8e>
    2000:	66 0f       	add	r22, r22
    2002:	77 1f       	adc	r23, r23
    2004:	88 1f       	adc	r24, r24
    2006:	bb 1f       	adc	r27, r27
    2008:	26 17       	cp	r18, r22
    200a:	37 07       	cpc	r19, r23
    200c:	48 07       	cpc	r20, r24
    200e:	ab 07       	cpc	r26, r27
    2010:	b0 e8       	ldi	r27, 0x80	; 128
    2012:	09 f0       	breq	.+2      	; 0x2016 <__divsf3_pse+0x56>
    2014:	bb 0b       	sbc	r27, r27
    2016:	80 2d       	mov	r24, r0
    2018:	bf 01       	movw	r22, r30
    201a:	ff 27       	eor	r31, r31
    201c:	93 58       	subi	r25, 0x83	; 131
    201e:	5f 4f       	sbci	r21, 0xFF	; 255
    2020:	2a f0       	brmi	.+10     	; 0x202c <__divsf3_pse+0x6c>
    2022:	9e 3f       	cpi	r25, 0xFE	; 254
    2024:	51 05       	cpc	r21, r1
    2026:	68 f0       	brcs	.+26     	; 0x2042 <__divsf3_pse+0x82>
    2028:	a5 c0       	rjmp	.+330    	; 0x2174 <__fp_inf>
    202a:	8d c1       	rjmp	.+794    	; 0x2346 <__fp_szero>
    202c:	5f 3f       	cpi	r21, 0xFF	; 255
    202e:	ec f3       	brlt	.-6      	; 0x202a <__divsf3_pse+0x6a>
    2030:	98 3e       	cpi	r25, 0xE8	; 232
    2032:	dc f3       	brlt	.-10     	; 0x202a <__divsf3_pse+0x6a>
    2034:	86 95       	lsr	r24
    2036:	77 95       	ror	r23
    2038:	67 95       	ror	r22
    203a:	b7 95       	ror	r27
    203c:	f7 95       	ror	r31
    203e:	9f 5f       	subi	r25, 0xFF	; 255
    2040:	c9 f7       	brne	.-14     	; 0x2034 <__divsf3_pse+0x74>
    2042:	88 0f       	add	r24, r24
    2044:	91 1d       	adc	r25, r1
    2046:	96 95       	lsr	r25
    2048:	87 95       	ror	r24
    204a:	97 f9       	bld	r25, 7
    204c:	08 95       	ret
    204e:	e1 e0       	ldi	r30, 0x01	; 1
    2050:	66 0f       	add	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	bb 1f       	adc	r27, r27
    2058:	62 17       	cp	r22, r18
    205a:	73 07       	cpc	r23, r19
    205c:	84 07       	cpc	r24, r20
    205e:	ba 07       	cpc	r27, r26
    2060:	20 f0       	brcs	.+8      	; 0x206a <__divsf3_pse+0xaa>
    2062:	62 1b       	sub	r22, r18
    2064:	73 0b       	sbc	r23, r19
    2066:	84 0b       	sbc	r24, r20
    2068:	ba 0b       	sbc	r27, r26
    206a:	ee 1f       	adc	r30, r30
    206c:	88 f7       	brcc	.-30     	; 0x2050 <__divsf3_pse+0x90>
    206e:	e0 95       	com	r30
    2070:	08 95       	ret

00002072 <__fixsfsi>:
    2072:	04 d0       	rcall	.+8      	; 0x207c <__fixunssfsi>
    2074:	68 94       	set
    2076:	b1 11       	cpse	r27, r1
    2078:	66 c1       	rjmp	.+716    	; 0x2346 <__fp_szero>
    207a:	08 95       	ret

0000207c <__fixunssfsi>:
    207c:	32 d1       	rcall	.+612    	; 0x22e2 <__fp_splitA>
    207e:	88 f0       	brcs	.+34     	; 0x20a2 <__fixunssfsi+0x26>
    2080:	9f 57       	subi	r25, 0x7F	; 127
    2082:	90 f0       	brcs	.+36     	; 0x20a8 <__fixunssfsi+0x2c>
    2084:	b9 2f       	mov	r27, r25
    2086:	99 27       	eor	r25, r25
    2088:	b7 51       	subi	r27, 0x17	; 23
    208a:	a0 f0       	brcs	.+40     	; 0x20b4 <__fixunssfsi+0x38>
    208c:	d1 f0       	breq	.+52     	; 0x20c2 <__fixunssfsi+0x46>
    208e:	66 0f       	add	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	1a f0       	brmi	.+6      	; 0x209e <__fixunssfsi+0x22>
    2098:	ba 95       	dec	r27
    209a:	c9 f7       	brne	.-14     	; 0x208e <__fixunssfsi+0x12>
    209c:	12 c0       	rjmp	.+36     	; 0x20c2 <__fixunssfsi+0x46>
    209e:	b1 30       	cpi	r27, 0x01	; 1
    20a0:	81 f0       	breq	.+32     	; 0x20c2 <__fixunssfsi+0x46>
    20a2:	50 d1       	rcall	.+672    	; 0x2344 <__fp_zero>
    20a4:	b1 e0       	ldi	r27, 0x01	; 1
    20a6:	08 95       	ret
    20a8:	4d c1       	rjmp	.+666    	; 0x2344 <__fp_zero>
    20aa:	67 2f       	mov	r22, r23
    20ac:	78 2f       	mov	r23, r24
    20ae:	88 27       	eor	r24, r24
    20b0:	b8 5f       	subi	r27, 0xF8	; 248
    20b2:	39 f0       	breq	.+14     	; 0x20c2 <__fixunssfsi+0x46>
    20b4:	b9 3f       	cpi	r27, 0xF9	; 249
    20b6:	cc f3       	brlt	.-14     	; 0x20aa <__fixunssfsi+0x2e>
    20b8:	86 95       	lsr	r24
    20ba:	77 95       	ror	r23
    20bc:	67 95       	ror	r22
    20be:	b3 95       	inc	r27
    20c0:	d9 f7       	brne	.-10     	; 0x20b8 <__fixunssfsi+0x3c>
    20c2:	3e f4       	brtc	.+14     	; 0x20d2 <__fixunssfsi+0x56>
    20c4:	90 95       	com	r25
    20c6:	80 95       	com	r24
    20c8:	70 95       	com	r23
    20ca:	61 95       	neg	r22
    20cc:	7f 4f       	sbci	r23, 0xFF	; 255
    20ce:	8f 4f       	sbci	r24, 0xFF	; 255
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	08 95       	ret

000020d4 <__floatunsisf>:
    20d4:	e8 94       	clt
    20d6:	09 c0       	rjmp	.+18     	; 0x20ea <__floatsisf+0x12>

000020d8 <__floatsisf>:
    20d8:	97 fb       	bst	r25, 7
    20da:	3e f4       	brtc	.+14     	; 0x20ea <__floatsisf+0x12>
    20dc:	90 95       	com	r25
    20de:	80 95       	com	r24
    20e0:	70 95       	com	r23
    20e2:	61 95       	neg	r22
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	99 23       	and	r25, r25
    20ec:	a9 f0       	breq	.+42     	; 0x2118 <__floatsisf+0x40>
    20ee:	f9 2f       	mov	r31, r25
    20f0:	96 e9       	ldi	r25, 0x96	; 150
    20f2:	bb 27       	eor	r27, r27
    20f4:	93 95       	inc	r25
    20f6:	f6 95       	lsr	r31
    20f8:	87 95       	ror	r24
    20fa:	77 95       	ror	r23
    20fc:	67 95       	ror	r22
    20fe:	b7 95       	ror	r27
    2100:	f1 11       	cpse	r31, r1
    2102:	f8 cf       	rjmp	.-16     	; 0x20f4 <__floatsisf+0x1c>
    2104:	fa f4       	brpl	.+62     	; 0x2144 <__floatsisf+0x6c>
    2106:	bb 0f       	add	r27, r27
    2108:	11 f4       	brne	.+4      	; 0x210e <__floatsisf+0x36>
    210a:	60 ff       	sbrs	r22, 0
    210c:	1b c0       	rjmp	.+54     	; 0x2144 <__floatsisf+0x6c>
    210e:	6f 5f       	subi	r22, 0xFF	; 255
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	8f 4f       	sbci	r24, 0xFF	; 255
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	16 c0       	rjmp	.+44     	; 0x2144 <__floatsisf+0x6c>
    2118:	88 23       	and	r24, r24
    211a:	11 f0       	breq	.+4      	; 0x2120 <__floatsisf+0x48>
    211c:	96 e9       	ldi	r25, 0x96	; 150
    211e:	11 c0       	rjmp	.+34     	; 0x2142 <__floatsisf+0x6a>
    2120:	77 23       	and	r23, r23
    2122:	21 f0       	breq	.+8      	; 0x212c <__floatsisf+0x54>
    2124:	9e e8       	ldi	r25, 0x8E	; 142
    2126:	87 2f       	mov	r24, r23
    2128:	76 2f       	mov	r23, r22
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <__floatsisf+0x5e>
    212c:	66 23       	and	r22, r22
    212e:	71 f0       	breq	.+28     	; 0x214c <__floatsisf+0x74>
    2130:	96 e8       	ldi	r25, 0x86	; 134
    2132:	86 2f       	mov	r24, r22
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	2a f0       	brmi	.+10     	; 0x2144 <__floatsisf+0x6c>
    213a:	9a 95       	dec	r25
    213c:	66 0f       	add	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	88 1f       	adc	r24, r24
    2142:	da f7       	brpl	.-10     	; 0x213a <__floatsisf+0x62>
    2144:	88 0f       	add	r24, r24
    2146:	96 95       	lsr	r25
    2148:	87 95       	ror	r24
    214a:	97 f9       	bld	r25, 7
    214c:	08 95       	ret

0000214e <floor>:
    214e:	e3 d0       	rcall	.+454    	; 0x2316 <__fp_trunc>
    2150:	80 f0       	brcs	.+32     	; 0x2172 <floor+0x24>
    2152:	9f 37       	cpi	r25, 0x7F	; 127
    2154:	40 f4       	brcc	.+16     	; 0x2166 <floor+0x18>
    2156:	91 11       	cpse	r25, r1
    2158:	0e f0       	brts	.+2      	; 0x215c <floor+0xe>
    215a:	f5 c0       	rjmp	.+490    	; 0x2346 <__fp_szero>
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	80 e8       	ldi	r24, 0x80	; 128
    2162:	9f eb       	ldi	r25, 0xBF	; 191
    2164:	08 95       	ret
    2166:	26 f4       	brtc	.+8      	; 0x2170 <floor+0x22>
    2168:	1b 16       	cp	r1, r27
    216a:	61 1d       	adc	r22, r1
    216c:	71 1d       	adc	r23, r1
    216e:	81 1d       	adc	r24, r1
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <__fp_mintl>
    2172:	21 c0       	rjmp	.+66     	; 0x21b6 <__fp_mpack>

00002174 <__fp_inf>:
    2174:	97 f9       	bld	r25, 7
    2176:	9f 67       	ori	r25, 0x7F	; 127
    2178:	80 e8       	ldi	r24, 0x80	; 128
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	08 95       	ret

00002180 <__fp_mintl>:
    2180:	88 23       	and	r24, r24
    2182:	71 f4       	brne	.+28     	; 0x21a0 <__fp_mintl+0x20>
    2184:	77 23       	and	r23, r23
    2186:	21 f0       	breq	.+8      	; 0x2190 <__fp_mintl+0x10>
    2188:	98 50       	subi	r25, 0x08	; 8
    218a:	87 2b       	or	r24, r23
    218c:	76 2f       	mov	r23, r22
    218e:	07 c0       	rjmp	.+14     	; 0x219e <__fp_mintl+0x1e>
    2190:	66 23       	and	r22, r22
    2192:	11 f4       	brne	.+4      	; 0x2198 <__fp_mintl+0x18>
    2194:	99 27       	eor	r25, r25
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <__fp_mintl+0x32>
    2198:	90 51       	subi	r25, 0x10	; 16
    219a:	86 2b       	or	r24, r22
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	2a f0       	brmi	.+10     	; 0x21ac <__fp_mintl+0x2c>
    21a2:	9a 95       	dec	r25
    21a4:	66 0f       	add	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	da f7       	brpl	.-10     	; 0x21a2 <__fp_mintl+0x22>
    21ac:	88 0f       	add	r24, r24
    21ae:	96 95       	lsr	r25
    21b0:	87 95       	ror	r24
    21b2:	97 f9       	bld	r25, 7
    21b4:	08 95       	ret

000021b6 <__fp_mpack>:
    21b6:	9f 3f       	cpi	r25, 0xFF	; 255
    21b8:	31 f0       	breq	.+12     	; 0x21c6 <__fp_mpack_finite+0xc>

000021ba <__fp_mpack_finite>:
    21ba:	91 50       	subi	r25, 0x01	; 1
    21bc:	20 f4       	brcc	.+8      	; 0x21c6 <__fp_mpack_finite+0xc>
    21be:	87 95       	ror	r24
    21c0:	77 95       	ror	r23
    21c2:	67 95       	ror	r22
    21c4:	b7 95       	ror	r27
    21c6:	88 0f       	add	r24, r24
    21c8:	91 1d       	adc	r25, r1
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	97 f9       	bld	r25, 7
    21d0:	08 95       	ret

000021d2 <__fp_nan>:
    21d2:	9f ef       	ldi	r25, 0xFF	; 255
    21d4:	80 ec       	ldi	r24, 0xC0	; 192
    21d6:	08 95       	ret

000021d8 <__fp_powser>:
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	1f 93       	push	r17
    21de:	0f 93       	push	r16
    21e0:	ff 92       	push	r15
    21e2:	ef 92       	push	r14
    21e4:	df 92       	push	r13
    21e6:	7b 01       	movw	r14, r22
    21e8:	8c 01       	movw	r16, r24
    21ea:	68 94       	set
    21ec:	05 c0       	rjmp	.+10     	; 0x21f8 <__fp_powser+0x20>
    21ee:	da 2e       	mov	r13, r26
    21f0:	ef 01       	movw	r28, r30
    21f2:	44 d1       	rcall	.+648    	; 0x247c <__mulsf3x>
    21f4:	fe 01       	movw	r30, r28
    21f6:	e8 94       	clt
    21f8:	a5 91       	lpm	r26, Z+
    21fa:	25 91       	lpm	r18, Z+
    21fc:	35 91       	lpm	r19, Z+
    21fe:	45 91       	lpm	r20, Z+
    2200:	55 91       	lpm	r21, Z+
    2202:	ae f3       	brts	.-22     	; 0x21ee <__fp_powser+0x16>
    2204:	ef 01       	movw	r28, r30
    2206:	15 de       	rcall	.-982    	; 0x1e32 <__addsf3x>
    2208:	fe 01       	movw	r30, r28
    220a:	97 01       	movw	r18, r14
    220c:	a8 01       	movw	r20, r16
    220e:	da 94       	dec	r13
    2210:	79 f7       	brne	.-34     	; 0x21f0 <__fp_powser+0x18>
    2212:	df 90       	pop	r13
    2214:	ef 90       	pop	r14
    2216:	ff 90       	pop	r15
    2218:	0f 91       	pop	r16
    221a:	1f 91       	pop	r17
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <__fp_pscA>:
    2222:	00 24       	eor	r0, r0
    2224:	0a 94       	dec	r0
    2226:	16 16       	cp	r1, r22
    2228:	17 06       	cpc	r1, r23
    222a:	18 06       	cpc	r1, r24
    222c:	09 06       	cpc	r0, r25
    222e:	08 95       	ret

00002230 <__fp_pscB>:
    2230:	00 24       	eor	r0, r0
    2232:	0a 94       	dec	r0
    2234:	12 16       	cp	r1, r18
    2236:	13 06       	cpc	r1, r19
    2238:	14 06       	cpc	r1, r20
    223a:	05 06       	cpc	r0, r21
    223c:	08 95       	ret
    223e:	c9 cf       	rjmp	.-110    	; 0x21d2 <__fp_nan>

00002240 <__fp_rempio2>:
    2240:	50 d0       	rcall	.+160    	; 0x22e2 <__fp_splitA>
    2242:	e8 f3       	brcs	.-6      	; 0x223e <__fp_pscB+0xe>
    2244:	e8 94       	clt
    2246:	e0 e0       	ldi	r30, 0x00	; 0
    2248:	bb 27       	eor	r27, r27
    224a:	9f 57       	subi	r25, 0x7F	; 127
    224c:	f0 f0       	brcs	.+60     	; 0x228a <__fp_rempio2+0x4a>
    224e:	2a ed       	ldi	r18, 0xDA	; 218
    2250:	3f e0       	ldi	r19, 0x0F	; 15
    2252:	49 ec       	ldi	r20, 0xC9	; 201
    2254:	06 c0       	rjmp	.+12     	; 0x2262 <__fp_rempio2+0x22>
    2256:	ee 0f       	add	r30, r30
    2258:	bb 0f       	add	r27, r27
    225a:	66 1f       	adc	r22, r22
    225c:	77 1f       	adc	r23, r23
    225e:	88 1f       	adc	r24, r24
    2260:	28 f0       	brcs	.+10     	; 0x226c <__fp_rempio2+0x2c>
    2262:	b2 3a       	cpi	r27, 0xA2	; 162
    2264:	62 07       	cpc	r22, r18
    2266:	73 07       	cpc	r23, r19
    2268:	84 07       	cpc	r24, r20
    226a:	28 f0       	brcs	.+10     	; 0x2276 <__fp_rempio2+0x36>
    226c:	b2 5a       	subi	r27, 0xA2	; 162
    226e:	62 0b       	sbc	r22, r18
    2270:	73 0b       	sbc	r23, r19
    2272:	84 0b       	sbc	r24, r20
    2274:	e3 95       	inc	r30
    2276:	9a 95       	dec	r25
    2278:	72 f7       	brpl	.-36     	; 0x2256 <__fp_rempio2+0x16>
    227a:	80 38       	cpi	r24, 0x80	; 128
    227c:	30 f4       	brcc	.+12     	; 0x228a <__fp_rempio2+0x4a>
    227e:	9a 95       	dec	r25
    2280:	bb 0f       	add	r27, r27
    2282:	66 1f       	adc	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	d2 f7       	brpl	.-12     	; 0x227e <__fp_rempio2+0x3e>
    228a:	90 48       	sbci	r25, 0x80	; 128
    228c:	96 cf       	rjmp	.-212    	; 0x21ba <__fp_mpack_finite>

0000228e <__fp_round>:
    228e:	09 2e       	mov	r0, r25
    2290:	03 94       	inc	r0
    2292:	00 0c       	add	r0, r0
    2294:	11 f4       	brne	.+4      	; 0x229a <__fp_round+0xc>
    2296:	88 23       	and	r24, r24
    2298:	52 f0       	brmi	.+20     	; 0x22ae <__fp_round+0x20>
    229a:	bb 0f       	add	r27, r27
    229c:	40 f4       	brcc	.+16     	; 0x22ae <__fp_round+0x20>
    229e:	bf 2b       	or	r27, r31
    22a0:	11 f4       	brne	.+4      	; 0x22a6 <__fp_round+0x18>
    22a2:	60 ff       	sbrs	r22, 0
    22a4:	04 c0       	rjmp	.+8      	; 0x22ae <__fp_round+0x20>
    22a6:	6f 5f       	subi	r22, 0xFF	; 255
    22a8:	7f 4f       	sbci	r23, 0xFF	; 255
    22aa:	8f 4f       	sbci	r24, 0xFF	; 255
    22ac:	9f 4f       	sbci	r25, 0xFF	; 255
    22ae:	08 95       	ret

000022b0 <__fp_sinus>:
    22b0:	ef 93       	push	r30
    22b2:	e0 ff       	sbrs	r30, 0
    22b4:	06 c0       	rjmp	.+12     	; 0x22c2 <__fp_sinus+0x12>
    22b6:	a2 ea       	ldi	r26, 0xA2	; 162
    22b8:	2a ed       	ldi	r18, 0xDA	; 218
    22ba:	3f e0       	ldi	r19, 0x0F	; 15
    22bc:	49 ec       	ldi	r20, 0xC9	; 201
    22be:	5f eb       	ldi	r21, 0xBF	; 191
    22c0:	b8 dd       	rcall	.-1168   	; 0x1e32 <__addsf3x>
    22c2:	e5 df       	rcall	.-54     	; 0x228e <__fp_round>
    22c4:	0f 90       	pop	r0
    22c6:	03 94       	inc	r0
    22c8:	01 fc       	sbrc	r0, 1
    22ca:	90 58       	subi	r25, 0x80	; 128
    22cc:	e1 ee       	ldi	r30, 0xE1	; 225
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	3f c2       	rjmp	.+1150   	; 0x2750 <__fp_powsodd>

000022d2 <__fp_split3>:
    22d2:	57 fd       	sbrc	r21, 7
    22d4:	90 58       	subi	r25, 0x80	; 128
    22d6:	44 0f       	add	r20, r20
    22d8:	55 1f       	adc	r21, r21
    22da:	59 f0       	breq	.+22     	; 0x22f2 <__fp_splitA+0x10>
    22dc:	5f 3f       	cpi	r21, 0xFF	; 255
    22de:	71 f0       	breq	.+28     	; 0x22fc <__fp_splitA+0x1a>
    22e0:	47 95       	ror	r20

000022e2 <__fp_splitA>:
    22e2:	88 0f       	add	r24, r24
    22e4:	97 fb       	bst	r25, 7
    22e6:	99 1f       	adc	r25, r25
    22e8:	61 f0       	breq	.+24     	; 0x2302 <__fp_splitA+0x20>
    22ea:	9f 3f       	cpi	r25, 0xFF	; 255
    22ec:	79 f0       	breq	.+30     	; 0x230c <__fp_splitA+0x2a>
    22ee:	87 95       	ror	r24
    22f0:	08 95       	ret
    22f2:	12 16       	cp	r1, r18
    22f4:	13 06       	cpc	r1, r19
    22f6:	14 06       	cpc	r1, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	f2 cf       	rjmp	.-28     	; 0x22e0 <__fp_split3+0xe>
    22fc:	46 95       	lsr	r20
    22fe:	f1 df       	rcall	.-30     	; 0x22e2 <__fp_splitA>
    2300:	08 c0       	rjmp	.+16     	; 0x2312 <__fp_splitA+0x30>
    2302:	16 16       	cp	r1, r22
    2304:	17 06       	cpc	r1, r23
    2306:	18 06       	cpc	r1, r24
    2308:	99 1f       	adc	r25, r25
    230a:	f1 cf       	rjmp	.-30     	; 0x22ee <__fp_splitA+0xc>
    230c:	86 95       	lsr	r24
    230e:	71 05       	cpc	r23, r1
    2310:	61 05       	cpc	r22, r1
    2312:	08 94       	sec
    2314:	08 95       	ret

00002316 <__fp_trunc>:
    2316:	e5 df       	rcall	.-54     	; 0x22e2 <__fp_splitA>
    2318:	a0 f0       	brcs	.+40     	; 0x2342 <__fp_trunc+0x2c>
    231a:	be e7       	ldi	r27, 0x7E	; 126
    231c:	b9 17       	cp	r27, r25
    231e:	88 f4       	brcc	.+34     	; 0x2342 <__fp_trunc+0x2c>
    2320:	bb 27       	eor	r27, r27
    2322:	9f 38       	cpi	r25, 0x8F	; 143
    2324:	60 f4       	brcc	.+24     	; 0x233e <__fp_trunc+0x28>
    2326:	16 16       	cp	r1, r22
    2328:	b1 1d       	adc	r27, r1
    232a:	67 2f       	mov	r22, r23
    232c:	78 2f       	mov	r23, r24
    232e:	88 27       	eor	r24, r24
    2330:	98 5f       	subi	r25, 0xF8	; 248
    2332:	f7 cf       	rjmp	.-18     	; 0x2322 <__fp_trunc+0xc>
    2334:	86 95       	lsr	r24
    2336:	77 95       	ror	r23
    2338:	67 95       	ror	r22
    233a:	b1 1d       	adc	r27, r1
    233c:	93 95       	inc	r25
    233e:	96 39       	cpi	r25, 0x96	; 150
    2340:	c8 f3       	brcs	.-14     	; 0x2334 <__fp_trunc+0x1e>
    2342:	08 95       	ret

00002344 <__fp_zero>:
    2344:	e8 94       	clt

00002346 <__fp_szero>:
    2346:	bb 27       	eor	r27, r27
    2348:	66 27       	eor	r22, r22
    234a:	77 27       	eor	r23, r23
    234c:	cb 01       	movw	r24, r22
    234e:	97 f9       	bld	r25, 7
    2350:	08 95       	ret

00002352 <__gesf2>:
    2352:	d3 d1       	rcall	.+934    	; 0x26fa <__fp_cmp>
    2354:	08 f4       	brcc	.+2      	; 0x2358 <__gesf2+0x6>
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	08 95       	ret

0000235a <inverse>:
    235a:	9b 01       	movw	r18, r22
    235c:	ac 01       	movw	r20, r24
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	80 e8       	ldi	r24, 0x80	; 128
    2364:	9f e3       	ldi	r25, 0x3F	; 63
    2366:	1d ce       	rjmp	.-966    	; 0x1fa2 <__divsf3>

00002368 <log10>:
    2368:	0a d0       	rcall	.+20     	; 0x237e <log>
    236a:	29 ed       	ldi	r18, 0xD9	; 217
    236c:	3b e5       	ldi	r19, 0x5B	; 91
    236e:	4e ed       	ldi	r20, 0xDE	; 222
    2370:	5e e3       	ldi	r21, 0x3E	; 62
    2372:	78 c0       	rjmp	.+240    	; 0x2464 <__mulsf3>
    2374:	0e f0       	brts	.+2      	; 0x2378 <log10+0x10>
    2376:	1f cf       	rjmp	.-450    	; 0x21b6 <__fp_mpack>
    2378:	2c cf       	rjmp	.-424    	; 0x21d2 <__fp_nan>
    237a:	68 94       	set
    237c:	fb ce       	rjmp	.-522    	; 0x2174 <__fp_inf>

0000237e <log>:
    237e:	b1 df       	rcall	.-158    	; 0x22e2 <__fp_splitA>
    2380:	c8 f3       	brcs	.-14     	; 0x2374 <log10+0xc>
    2382:	99 23       	and	r25, r25
    2384:	d1 f3       	breq	.-12     	; 0x237a <log10+0x12>
    2386:	c6 f3       	brts	.-16     	; 0x2378 <log10+0x10>
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	1f 93       	push	r17
    238e:	0f 93       	push	r16
    2390:	ff 92       	push	r15
    2392:	c9 2f       	mov	r28, r25
    2394:	dd 27       	eor	r29, r29
    2396:	88 23       	and	r24, r24
    2398:	2a f0       	brmi	.+10     	; 0x23a4 <log+0x26>
    239a:	21 97       	sbiw	r28, 0x01	; 1
    239c:	66 0f       	add	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	da f7       	brpl	.-10     	; 0x239a <log+0x1c>
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f eb       	ldi	r21, 0xBF	; 191
    23ac:	9f e3       	ldi	r25, 0x3F	; 63
    23ae:	88 39       	cpi	r24, 0x98	; 152
    23b0:	20 f0       	brcs	.+8      	; 0x23ba <log+0x3c>
    23b2:	80 3e       	cpi	r24, 0xE0	; 224
    23b4:	30 f0       	brcs	.+12     	; 0x23c2 <log+0x44>
    23b6:	21 96       	adiw	r28, 0x01	; 1
    23b8:	8f 77       	andi	r24, 0x7F	; 127
    23ba:	2a dd       	rcall	.-1452   	; 0x1e10 <__addsf3>
    23bc:	ef ef       	ldi	r30, 0xFF	; 255
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <log+0x4a>
    23c2:	26 dd       	rcall	.-1460   	; 0x1e10 <__addsf3>
    23c4:	ec e2       	ldi	r30, 0x2C	; 44
    23c6:	f1 e0       	ldi	r31, 0x01	; 1
    23c8:	07 df       	rcall	.-498    	; 0x21d8 <__fp_powser>
    23ca:	8b 01       	movw	r16, r22
    23cc:	be 01       	movw	r22, r28
    23ce:	ec 01       	movw	r28, r24
    23d0:	fb 2e       	mov	r15, r27
    23d2:	6f 57       	subi	r22, 0x7F	; 127
    23d4:	71 09       	sbc	r23, r1
    23d6:	75 95       	asr	r23
    23d8:	77 1f       	adc	r23, r23
    23da:	88 0b       	sbc	r24, r24
    23dc:	99 0b       	sbc	r25, r25
    23de:	7c de       	rcall	.-776    	; 0x20d8 <__floatsisf>
    23e0:	28 e1       	ldi	r18, 0x18	; 24
    23e2:	32 e7       	ldi	r19, 0x72	; 114
    23e4:	41 e3       	ldi	r20, 0x31	; 49
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	49 d0       	rcall	.+146    	; 0x247c <__mulsf3x>
    23ea:	af 2d       	mov	r26, r15
    23ec:	98 01       	movw	r18, r16
    23ee:	ae 01       	movw	r20, r28
    23f0:	ff 90       	pop	r15
    23f2:	0f 91       	pop	r16
    23f4:	1f 91       	pop	r17
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	1b dd       	rcall	.-1482   	; 0x1e32 <__addsf3x>
    23fc:	48 cf       	rjmp	.-368    	; 0x228e <__fp_round>

000023fe <modf>:
    23fe:	fa 01       	movw	r30, r20
    2400:	dc 01       	movw	r26, r24
    2402:	aa 0f       	add	r26, r26
    2404:	bb 1f       	adc	r27, r27
    2406:	9b 01       	movw	r18, r22
    2408:	ac 01       	movw	r20, r24
    240a:	bf 57       	subi	r27, 0x7F	; 127
    240c:	28 f4       	brcc	.+10     	; 0x2418 <modf+0x1a>
    240e:	22 27       	eor	r18, r18
    2410:	33 27       	eor	r19, r19
    2412:	44 27       	eor	r20, r20
    2414:	50 78       	andi	r21, 0x80	; 128
    2416:	1f c0       	rjmp	.+62     	; 0x2456 <modf+0x58>
    2418:	b7 51       	subi	r27, 0x17	; 23
    241a:	88 f4       	brcc	.+34     	; 0x243e <modf+0x40>
    241c:	ab 2f       	mov	r26, r27
    241e:	00 24       	eor	r0, r0
    2420:	46 95       	lsr	r20
    2422:	37 95       	ror	r19
    2424:	27 95       	ror	r18
    2426:	01 1c       	adc	r0, r1
    2428:	a3 95       	inc	r26
    242a:	d2 f3       	brmi	.-12     	; 0x2420 <modf+0x22>
    242c:	00 20       	and	r0, r0
    242e:	69 f0       	breq	.+26     	; 0x244a <modf+0x4c>
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	44 1f       	adc	r20, r20
    2436:	b3 95       	inc	r27
    2438:	da f3       	brmi	.-10     	; 0x2430 <modf+0x32>
    243a:	0d d0       	rcall	.+26     	; 0x2456 <modf+0x58>
    243c:	e8 cc       	rjmp	.-1584   	; 0x1e0e <__subsf3>
    243e:	61 30       	cpi	r22, 0x01	; 1
    2440:	71 05       	cpc	r23, r1
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	8a 07       	cpc	r24, r26
    2446:	b9 46       	sbci	r27, 0x69	; 105
    2448:	30 f4       	brcc	.+12     	; 0x2456 <modf+0x58>
    244a:	9b 01       	movw	r18, r22
    244c:	ac 01       	movw	r20, r24
    244e:	66 27       	eor	r22, r22
    2450:	77 27       	eor	r23, r23
    2452:	88 27       	eor	r24, r24
    2454:	90 78       	andi	r25, 0x80	; 128
    2456:	30 96       	adiw	r30, 0x00	; 0
    2458:	21 f0       	breq	.+8      	; 0x2462 <modf+0x64>
    245a:	20 83       	st	Z, r18
    245c:	31 83       	std	Z+1, r19	; 0x01
    245e:	42 83       	std	Z+2, r20	; 0x02
    2460:	53 83       	std	Z+3, r21	; 0x03
    2462:	08 95       	ret

00002464 <__mulsf3>:
    2464:	0b d0       	rcall	.+22     	; 0x247c <__mulsf3x>
    2466:	13 cf       	rjmp	.-474    	; 0x228e <__fp_round>
    2468:	dc de       	rcall	.-584    	; 0x2222 <__fp_pscA>
    246a:	28 f0       	brcs	.+10     	; 0x2476 <__mulsf3+0x12>
    246c:	e1 de       	rcall	.-574    	; 0x2230 <__fp_pscB>
    246e:	18 f0       	brcs	.+6      	; 0x2476 <__mulsf3+0x12>
    2470:	95 23       	and	r25, r21
    2472:	09 f0       	breq	.+2      	; 0x2476 <__mulsf3+0x12>
    2474:	7f ce       	rjmp	.-770    	; 0x2174 <__fp_inf>
    2476:	ad ce       	rjmp	.-678    	; 0x21d2 <__fp_nan>
    2478:	11 24       	eor	r1, r1
    247a:	65 cf       	rjmp	.-310    	; 0x2346 <__fp_szero>

0000247c <__mulsf3x>:
    247c:	2a df       	rcall	.-428    	; 0x22d2 <__fp_split3>
    247e:	a0 f3       	brcs	.-24     	; 0x2468 <__mulsf3+0x4>

00002480 <__mulsf3_pse>:
    2480:	95 9f       	mul	r25, r21
    2482:	d1 f3       	breq	.-12     	; 0x2478 <__mulsf3+0x14>
    2484:	95 0f       	add	r25, r21
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	55 1f       	adc	r21, r21
    248a:	62 9f       	mul	r22, r18
    248c:	f0 01       	movw	r30, r0
    248e:	72 9f       	mul	r23, r18
    2490:	bb 27       	eor	r27, r27
    2492:	f0 0d       	add	r31, r0
    2494:	b1 1d       	adc	r27, r1
    2496:	63 9f       	mul	r22, r19
    2498:	aa 27       	eor	r26, r26
    249a:	f0 0d       	add	r31, r0
    249c:	b1 1d       	adc	r27, r1
    249e:	aa 1f       	adc	r26, r26
    24a0:	64 9f       	mul	r22, r20
    24a2:	66 27       	eor	r22, r22
    24a4:	b0 0d       	add	r27, r0
    24a6:	a1 1d       	adc	r26, r1
    24a8:	66 1f       	adc	r22, r22
    24aa:	82 9f       	mul	r24, r18
    24ac:	22 27       	eor	r18, r18
    24ae:	b0 0d       	add	r27, r0
    24b0:	a1 1d       	adc	r26, r1
    24b2:	62 1f       	adc	r22, r18
    24b4:	73 9f       	mul	r23, r19
    24b6:	b0 0d       	add	r27, r0
    24b8:	a1 1d       	adc	r26, r1
    24ba:	62 1f       	adc	r22, r18
    24bc:	83 9f       	mul	r24, r19
    24be:	a0 0d       	add	r26, r0
    24c0:	61 1d       	adc	r22, r1
    24c2:	22 1f       	adc	r18, r18
    24c4:	74 9f       	mul	r23, r20
    24c6:	33 27       	eor	r19, r19
    24c8:	a0 0d       	add	r26, r0
    24ca:	61 1d       	adc	r22, r1
    24cc:	23 1f       	adc	r18, r19
    24ce:	84 9f       	mul	r24, r20
    24d0:	60 0d       	add	r22, r0
    24d2:	21 1d       	adc	r18, r1
    24d4:	82 2f       	mov	r24, r18
    24d6:	76 2f       	mov	r23, r22
    24d8:	6a 2f       	mov	r22, r26
    24da:	11 24       	eor	r1, r1
    24dc:	9f 57       	subi	r25, 0x7F	; 127
    24de:	50 40       	sbci	r21, 0x00	; 0
    24e0:	8a f0       	brmi	.+34     	; 0x2504 <__mulsf3_pse+0x84>
    24e2:	e1 f0       	breq	.+56     	; 0x251c <__mulsf3_pse+0x9c>
    24e4:	88 23       	and	r24, r24
    24e6:	4a f0       	brmi	.+18     	; 0x24fa <__mulsf3_pse+0x7a>
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	bb 1f       	adc	r27, r27
    24ee:	66 1f       	adc	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	88 1f       	adc	r24, r24
    24f4:	91 50       	subi	r25, 0x01	; 1
    24f6:	50 40       	sbci	r21, 0x00	; 0
    24f8:	a9 f7       	brne	.-22     	; 0x24e4 <__mulsf3_pse+0x64>
    24fa:	9e 3f       	cpi	r25, 0xFE	; 254
    24fc:	51 05       	cpc	r21, r1
    24fe:	70 f0       	brcs	.+28     	; 0x251c <__mulsf3_pse+0x9c>
    2500:	39 ce       	rjmp	.-910    	; 0x2174 <__fp_inf>
    2502:	21 cf       	rjmp	.-446    	; 0x2346 <__fp_szero>
    2504:	5f 3f       	cpi	r21, 0xFF	; 255
    2506:	ec f3       	brlt	.-6      	; 0x2502 <__mulsf3_pse+0x82>
    2508:	98 3e       	cpi	r25, 0xE8	; 232
    250a:	dc f3       	brlt	.-10     	; 0x2502 <__mulsf3_pse+0x82>
    250c:	86 95       	lsr	r24
    250e:	77 95       	ror	r23
    2510:	67 95       	ror	r22
    2512:	b7 95       	ror	r27
    2514:	f7 95       	ror	r31
    2516:	e7 95       	ror	r30
    2518:	9f 5f       	subi	r25, 0xFF	; 255
    251a:	c1 f7       	brne	.-16     	; 0x250c <__mulsf3_pse+0x8c>
    251c:	fe 2b       	or	r31, r30
    251e:	88 0f       	add	r24, r24
    2520:	91 1d       	adc	r25, r1
    2522:	96 95       	lsr	r25
    2524:	87 95       	ror	r24
    2526:	97 f9       	bld	r25, 7
    2528:	08 95       	ret

0000252a <pow>:
    252a:	fa 01       	movw	r30, r20
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	30 96       	adiw	r30, 0x00	; 0
    2532:	21 05       	cpc	r18, r1
    2534:	31 05       	cpc	r19, r1
    2536:	99 f1       	breq	.+102    	; 0x259e <pow+0x74>
    2538:	61 15       	cp	r22, r1
    253a:	71 05       	cpc	r23, r1
    253c:	61 f4       	brne	.+24     	; 0x2556 <pow+0x2c>
    253e:	80 38       	cpi	r24, 0x80	; 128
    2540:	bf e3       	ldi	r27, 0x3F	; 63
    2542:	9b 07       	cpc	r25, r27
    2544:	49 f1       	breq	.+82     	; 0x2598 <pow+0x6e>
    2546:	68 94       	set
    2548:	90 38       	cpi	r25, 0x80	; 128
    254a:	81 05       	cpc	r24, r1
    254c:	61 f0       	breq	.+24     	; 0x2566 <pow+0x3c>
    254e:	80 38       	cpi	r24, 0x80	; 128
    2550:	bf ef       	ldi	r27, 0xFF	; 255
    2552:	9b 07       	cpc	r25, r27
    2554:	41 f0       	breq	.+16     	; 0x2566 <pow+0x3c>
    2556:	99 23       	and	r25, r25
    2558:	42 f5       	brpl	.+80     	; 0x25aa <pow+0x80>
    255a:	ff 3f       	cpi	r31, 0xFF	; 255
    255c:	e1 05       	cpc	r30, r1
    255e:	31 05       	cpc	r19, r1
    2560:	21 05       	cpc	r18, r1
    2562:	11 f1       	breq	.+68     	; 0x25a8 <pow+0x7e>
    2564:	e8 94       	clt
    2566:	08 94       	sec
    2568:	e7 95       	ror	r30
    256a:	d9 01       	movw	r26, r18
    256c:	aa 23       	and	r26, r26
    256e:	29 f4       	brne	.+10     	; 0x257a <pow+0x50>
    2570:	ab 2f       	mov	r26, r27
    2572:	be 2f       	mov	r27, r30
    2574:	f8 5f       	subi	r31, 0xF8	; 248
    2576:	d0 f3       	brcs	.-12     	; 0x256c <pow+0x42>
    2578:	10 c0       	rjmp	.+32     	; 0x259a <pow+0x70>
    257a:	ff 5f       	subi	r31, 0xFF	; 255
    257c:	70 f4       	brcc	.+28     	; 0x259a <pow+0x70>
    257e:	a6 95       	lsr	r26
    2580:	e0 f7       	brcc	.-8      	; 0x257a <pow+0x50>
    2582:	f7 39       	cpi	r31, 0x97	; 151
    2584:	50 f0       	brcs	.+20     	; 0x259a <pow+0x70>
    2586:	19 f0       	breq	.+6      	; 0x258e <pow+0x64>
    2588:	ff 3a       	cpi	r31, 0xAF	; 175
    258a:	38 f4       	brcc	.+14     	; 0x259a <pow+0x70>
    258c:	9f 77       	andi	r25, 0x7F	; 127
    258e:	9f 93       	push	r25
    2590:	0c d0       	rcall	.+24     	; 0x25aa <pow+0x80>
    2592:	0f 90       	pop	r0
    2594:	07 fc       	sbrc	r0, 7
    2596:	90 58       	subi	r25, 0x80	; 128
    2598:	08 95       	ret
    259a:	3e f0       	brts	.+14     	; 0x25aa <pow+0x80>
    259c:	1a ce       	rjmp	.-972    	; 0x21d2 <__fp_nan>
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	80 e8       	ldi	r24, 0x80	; 128
    25a4:	9f e3       	ldi	r25, 0x3F	; 63
    25a6:	08 95       	ret
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	9f 77       	andi	r25, 0x7F	; 127
    25ac:	5f 93       	push	r21
    25ae:	4f 93       	push	r20
    25b0:	3f 93       	push	r19
    25b2:	2f 93       	push	r18
    25b4:	e4 de       	rcall	.-568    	; 0x237e <log>
    25b6:	2f 91       	pop	r18
    25b8:	3f 91       	pop	r19
    25ba:	4f 91       	pop	r20
    25bc:	5f 91       	pop	r21
    25be:	52 df       	rcall	.-348    	; 0x2464 <__mulsf3>
    25c0:	70 c0       	rjmp	.+224    	; 0x26a2 <exp>

000025c2 <round>:
    25c2:	8f de       	rcall	.-738    	; 0x22e2 <__fp_splitA>
    25c4:	e0 f0       	brcs	.+56     	; 0x25fe <round+0x3c>
    25c6:	9e 37       	cpi	r25, 0x7E	; 126
    25c8:	d8 f0       	brcs	.+54     	; 0x2600 <round+0x3e>
    25ca:	96 39       	cpi	r25, 0x96	; 150
    25cc:	b8 f4       	brcc	.+46     	; 0x25fc <round+0x3a>
    25ce:	9e 38       	cpi	r25, 0x8E	; 142
    25d0:	48 f4       	brcc	.+18     	; 0x25e4 <round+0x22>
    25d2:	67 2f       	mov	r22, r23
    25d4:	78 2f       	mov	r23, r24
    25d6:	88 27       	eor	r24, r24
    25d8:	98 5f       	subi	r25, 0xF8	; 248
    25da:	f9 cf       	rjmp	.-14     	; 0x25ce <round+0xc>
    25dc:	86 95       	lsr	r24
    25de:	77 95       	ror	r23
    25e0:	67 95       	ror	r22
    25e2:	93 95       	inc	r25
    25e4:	95 39       	cpi	r25, 0x95	; 149
    25e6:	d0 f3       	brcs	.-12     	; 0x25dc <round+0x1a>
    25e8:	b6 2f       	mov	r27, r22
    25ea:	b1 70       	andi	r27, 0x01	; 1
    25ec:	6b 0f       	add	r22, r27
    25ee:	71 1d       	adc	r23, r1
    25f0:	81 1d       	adc	r24, r1
    25f2:	20 f4       	brcc	.+8      	; 0x25fc <round+0x3a>
    25f4:	87 95       	ror	r24
    25f6:	77 95       	ror	r23
    25f8:	67 95       	ror	r22
    25fa:	93 95       	inc	r25
    25fc:	c1 cd       	rjmp	.-1150   	; 0x2180 <__fp_mintl>
    25fe:	db cd       	rjmp	.-1098   	; 0x21b6 <__fp_mpack>
    2600:	a2 ce       	rjmp	.-700    	; 0x2346 <__fp_szero>

00002602 <sin>:
    2602:	9f 93       	push	r25
    2604:	1d de       	rcall	.-966    	; 0x2240 <__fp_rempio2>
    2606:	0f 90       	pop	r0
    2608:	07 fc       	sbrc	r0, 7
    260a:	ee 5f       	subi	r30, 0xFE	; 254
    260c:	51 ce       	rjmp	.-862    	; 0x22b0 <__fp_sinus>
    260e:	11 f4       	brne	.+4      	; 0x2614 <sin+0x12>
    2610:	0e f4       	brtc	.+2      	; 0x2614 <sin+0x12>
    2612:	df cd       	rjmp	.-1090   	; 0x21d2 <__fp_nan>
    2614:	d0 cd       	rjmp	.-1120   	; 0x21b6 <__fp_mpack>

00002616 <sqrt>:
    2616:	65 de       	rcall	.-822    	; 0x22e2 <__fp_splitA>
    2618:	d0 f3       	brcs	.-12     	; 0x260e <sin+0xc>
    261a:	99 23       	and	r25, r25
    261c:	d9 f3       	breq	.-10     	; 0x2614 <sin+0x12>
    261e:	ce f3       	brts	.-14     	; 0x2612 <sin+0x10>
    2620:	9f 57       	subi	r25, 0x7F	; 127
    2622:	55 0b       	sbc	r21, r21
    2624:	87 ff       	sbrs	r24, 7
    2626:	8d d0       	rcall	.+282    	; 0x2742 <__fp_norm2>
    2628:	00 24       	eor	r0, r0
    262a:	a0 e6       	ldi	r26, 0x60	; 96
    262c:	40 ea       	ldi	r20, 0xA0	; 160
    262e:	90 01       	movw	r18, r0
    2630:	80 58       	subi	r24, 0x80	; 128
    2632:	56 95       	lsr	r21
    2634:	97 95       	ror	r25
    2636:	28 f4       	brcc	.+10     	; 0x2642 <sqrt+0x2c>
    2638:	80 5c       	subi	r24, 0xC0	; 192
    263a:	66 0f       	add	r22, r22
    263c:	77 1f       	adc	r23, r23
    263e:	88 1f       	adc	r24, r24
    2640:	20 f0       	brcs	.+8      	; 0x264a <sqrt+0x34>
    2642:	26 17       	cp	r18, r22
    2644:	37 07       	cpc	r19, r23
    2646:	48 07       	cpc	r20, r24
    2648:	30 f4       	brcc	.+12     	; 0x2656 <sqrt+0x40>
    264a:	62 1b       	sub	r22, r18
    264c:	73 0b       	sbc	r23, r19
    264e:	84 0b       	sbc	r24, r20
    2650:	20 29       	or	r18, r0
    2652:	31 29       	or	r19, r1
    2654:	4a 2b       	or	r20, r26
    2656:	a6 95       	lsr	r26
    2658:	17 94       	ror	r1
    265a:	07 94       	ror	r0
    265c:	20 25       	eor	r18, r0
    265e:	31 25       	eor	r19, r1
    2660:	4a 27       	eor	r20, r26
    2662:	58 f7       	brcc	.-42     	; 0x263a <sqrt+0x24>
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	88 1f       	adc	r24, r24
    266a:	20 f0       	brcs	.+8      	; 0x2674 <sqrt+0x5e>
    266c:	26 17       	cp	r18, r22
    266e:	37 07       	cpc	r19, r23
    2670:	48 07       	cpc	r20, r24
    2672:	30 f4       	brcc	.+12     	; 0x2680 <sqrt+0x6a>
    2674:	62 0b       	sbc	r22, r18
    2676:	73 0b       	sbc	r23, r19
    2678:	84 0b       	sbc	r24, r20
    267a:	20 0d       	add	r18, r0
    267c:	31 1d       	adc	r19, r1
    267e:	41 1d       	adc	r20, r1
    2680:	a0 95       	com	r26
    2682:	81 f7       	brne	.-32     	; 0x2664 <sqrt+0x4e>
    2684:	b9 01       	movw	r22, r18
    2686:	84 2f       	mov	r24, r20
    2688:	91 58       	subi	r25, 0x81	; 129
    268a:	88 0f       	add	r24, r24
    268c:	96 95       	lsr	r25
    268e:	87 95       	ror	r24
    2690:	08 95       	ret

00002692 <square>:
    2692:	9b 01       	movw	r18, r22
    2694:	ac 01       	movw	r20, r24
    2696:	e6 ce       	rjmp	.-564    	; 0x2464 <__mulsf3>
    2698:	19 f4       	brne	.+6      	; 0x26a0 <square+0xe>
    269a:	0e f0       	brts	.+2      	; 0x269e <square+0xc>
    269c:	6b cd       	rjmp	.-1322   	; 0x2174 <__fp_inf>
    269e:	52 ce       	rjmp	.-860    	; 0x2344 <__fp_zero>
    26a0:	98 cd       	rjmp	.-1232   	; 0x21d2 <__fp_nan>

000026a2 <exp>:
    26a2:	1f de       	rcall	.-962    	; 0x22e2 <__fp_splitA>
    26a4:	c8 f3       	brcs	.-14     	; 0x2698 <square+0x6>
    26a6:	96 38       	cpi	r25, 0x86	; 134
    26a8:	c0 f7       	brcc	.-16     	; 0x269a <square+0x8>
    26aa:	07 f8       	bld	r0, 7
    26ac:	0f 92       	push	r0
    26ae:	e8 94       	clt
    26b0:	2b e3       	ldi	r18, 0x3B	; 59
    26b2:	3a ea       	ldi	r19, 0xAA	; 170
    26b4:	48 eb       	ldi	r20, 0xB8	; 184
    26b6:	5f e7       	ldi	r21, 0x7F	; 127
    26b8:	e3 de       	rcall	.-570    	; 0x2480 <__mulsf3_pse>
    26ba:	0f 92       	push	r0
    26bc:	0f 92       	push	r0
    26be:	0f 92       	push	r0
    26c0:	4d b7       	in	r20, 0x3d	; 61
    26c2:	5e b7       	in	r21, 0x3e	; 62
    26c4:	0f 92       	push	r0
    26c6:	9b de       	rcall	.-714    	; 0x23fe <modf>
    26c8:	e9 e5       	ldi	r30, 0x59	; 89
    26ca:	f1 e0       	ldi	r31, 0x01	; 1
    26cc:	85 dd       	rcall	.-1270   	; 0x21d8 <__fp_powser>
    26ce:	4f 91       	pop	r20
    26d0:	5f 91       	pop	r21
    26d2:	ef 91       	pop	r30
    26d4:	ff 91       	pop	r31
    26d6:	e5 95       	asr	r30
    26d8:	ee 1f       	adc	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	49 f0       	breq	.+18     	; 0x26f0 <exp+0x4e>
    26de:	fe 57       	subi	r31, 0x7E	; 126
    26e0:	e0 68       	ori	r30, 0x80	; 128
    26e2:	44 27       	eor	r20, r20
    26e4:	ee 0f       	add	r30, r30
    26e6:	44 1f       	adc	r20, r20
    26e8:	fa 95       	dec	r31
    26ea:	e1 f7       	brne	.-8      	; 0x26e4 <exp+0x42>
    26ec:	41 95       	neg	r20
    26ee:	55 0b       	sbc	r21, r21
    26f0:	42 d0       	rcall	.+132    	; 0x2776 <ldexp>
    26f2:	0f 90       	pop	r0
    26f4:	07 fe       	sbrs	r0, 7
    26f6:	31 ce       	rjmp	.-926    	; 0x235a <inverse>
    26f8:	08 95       	ret

000026fa <__fp_cmp>:
    26fa:	99 0f       	add	r25, r25
    26fc:	00 08       	sbc	r0, r0
    26fe:	55 0f       	add	r21, r21
    2700:	aa 0b       	sbc	r26, r26
    2702:	e0 e8       	ldi	r30, 0x80	; 128
    2704:	fe ef       	ldi	r31, 0xFE	; 254
    2706:	16 16       	cp	r1, r22
    2708:	17 06       	cpc	r1, r23
    270a:	e8 07       	cpc	r30, r24
    270c:	f9 07       	cpc	r31, r25
    270e:	c0 f0       	brcs	.+48     	; 0x2740 <__fp_cmp+0x46>
    2710:	12 16       	cp	r1, r18
    2712:	13 06       	cpc	r1, r19
    2714:	e4 07       	cpc	r30, r20
    2716:	f5 07       	cpc	r31, r21
    2718:	98 f0       	brcs	.+38     	; 0x2740 <__fp_cmp+0x46>
    271a:	62 1b       	sub	r22, r18
    271c:	73 0b       	sbc	r23, r19
    271e:	84 0b       	sbc	r24, r20
    2720:	95 0b       	sbc	r25, r21
    2722:	39 f4       	brne	.+14     	; 0x2732 <__fp_cmp+0x38>
    2724:	0a 26       	eor	r0, r26
    2726:	61 f0       	breq	.+24     	; 0x2740 <__fp_cmp+0x46>
    2728:	23 2b       	or	r18, r19
    272a:	24 2b       	or	r18, r20
    272c:	25 2b       	or	r18, r21
    272e:	21 f4       	brne	.+8      	; 0x2738 <__fp_cmp+0x3e>
    2730:	08 95       	ret
    2732:	0a 26       	eor	r0, r26
    2734:	09 f4       	brne	.+2      	; 0x2738 <__fp_cmp+0x3e>
    2736:	a1 40       	sbci	r26, 0x01	; 1
    2738:	a6 95       	lsr	r26
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	81 1d       	adc	r24, r1
    273e:	81 1d       	adc	r24, r1
    2740:	08 95       	ret

00002742 <__fp_norm2>:
    2742:	91 50       	subi	r25, 0x01	; 1
    2744:	50 40       	sbci	r21, 0x00	; 0
    2746:	66 0f       	add	r22, r22
    2748:	77 1f       	adc	r23, r23
    274a:	88 1f       	adc	r24, r24
    274c:	d2 f7       	brpl	.-12     	; 0x2742 <__fp_norm2>
    274e:	08 95       	ret

00002750 <__fp_powsodd>:
    2750:	9f 93       	push	r25
    2752:	8f 93       	push	r24
    2754:	7f 93       	push	r23
    2756:	6f 93       	push	r22
    2758:	ff 93       	push	r31
    275a:	ef 93       	push	r30
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	81 de       	rcall	.-766    	; 0x2464 <__mulsf3>
    2762:	ef 91       	pop	r30
    2764:	ff 91       	pop	r31
    2766:	38 dd       	rcall	.-1424   	; 0x21d8 <__fp_powser>
    2768:	2f 91       	pop	r18
    276a:	3f 91       	pop	r19
    276c:	4f 91       	pop	r20
    276e:	5f 91       	pop	r21
    2770:	79 ce       	rjmp	.-782    	; 0x2464 <__mulsf3>
    2772:	00 cd       	rjmp	.-1536   	; 0x2174 <__fp_inf>
    2774:	20 cd       	rjmp	.-1472   	; 0x21b6 <__fp_mpack>

00002776 <ldexp>:
    2776:	b5 dd       	rcall	.-1174   	; 0x22e2 <__fp_splitA>
    2778:	e8 f3       	brcs	.-6      	; 0x2774 <__fp_powsodd+0x24>
    277a:	99 23       	and	r25, r25
    277c:	d9 f3       	breq	.-10     	; 0x2774 <__fp_powsodd+0x24>
    277e:	94 0f       	add	r25, r20
    2780:	51 1d       	adc	r21, r1
    2782:	bb f3       	brvs	.-18     	; 0x2772 <__fp_powsodd+0x22>
    2784:	91 50       	subi	r25, 0x01	; 1
    2786:	50 40       	sbci	r21, 0x00	; 0
    2788:	94 f0       	brlt	.+36     	; 0x27ae <ldexp+0x38>
    278a:	59 f0       	breq	.+22     	; 0x27a2 <ldexp+0x2c>
    278c:	88 23       	and	r24, r24
    278e:	32 f0       	brmi	.+12     	; 0x279c <ldexp+0x26>
    2790:	66 0f       	add	r22, r22
    2792:	77 1f       	adc	r23, r23
    2794:	88 1f       	adc	r24, r24
    2796:	91 50       	subi	r25, 0x01	; 1
    2798:	50 40       	sbci	r21, 0x00	; 0
    279a:	c1 f7       	brne	.-16     	; 0x278c <ldexp+0x16>
    279c:	9e 3f       	cpi	r25, 0xFE	; 254
    279e:	51 05       	cpc	r21, r1
    27a0:	44 f7       	brge	.-48     	; 0x2772 <__fp_powsodd+0x22>
    27a2:	88 0f       	add	r24, r24
    27a4:	91 1d       	adc	r25, r1
    27a6:	96 95       	lsr	r25
    27a8:	87 95       	ror	r24
    27aa:	97 f9       	bld	r25, 7
    27ac:	08 95       	ret
    27ae:	5f 3f       	cpi	r21, 0xFF	; 255
    27b0:	ac f0       	brlt	.+42     	; 0x27dc <ldexp+0x66>
    27b2:	98 3e       	cpi	r25, 0xE8	; 232
    27b4:	9c f0       	brlt	.+38     	; 0x27dc <ldexp+0x66>
    27b6:	bb 27       	eor	r27, r27
    27b8:	86 95       	lsr	r24
    27ba:	77 95       	ror	r23
    27bc:	67 95       	ror	r22
    27be:	b7 95       	ror	r27
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <ldexp+0x4e>
    27c2:	b1 60       	ori	r27, 0x01	; 1
    27c4:	93 95       	inc	r25
    27c6:	c1 f7       	brne	.-16     	; 0x27b8 <ldexp+0x42>
    27c8:	bb 0f       	add	r27, r27
    27ca:	58 f7       	brcc	.-42     	; 0x27a2 <ldexp+0x2c>
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <ldexp+0x5c>
    27ce:	60 ff       	sbrs	r22, 0
    27d0:	e8 cf       	rjmp	.-48     	; 0x27a2 <ldexp+0x2c>
    27d2:	6f 5f       	subi	r22, 0xFF	; 255
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	8f 4f       	sbci	r24, 0xFF	; 255
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	e3 cf       	rjmp	.-58     	; 0x27a2 <ldexp+0x2c>
    27dc:	b4 cd       	rjmp	.-1176   	; 0x2346 <__fp_szero>

000027de <__tablejump2__>:
    27de:	ee 0f       	add	r30, r30
    27e0:	ff 1f       	adc	r31, r31

000027e2 <__tablejump__>:
    27e2:	05 90       	lpm	r0, Z+
    27e4:	f4 91       	lpm	r31, Z
    27e6:	e0 2d       	mov	r30, r0
    27e8:	09 94       	ijmp

000027ea <malloc>:
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	82 30       	cpi	r24, 0x02	; 2
    27f0:	91 05       	cpc	r25, r1
    27f2:	10 f4       	brcc	.+4      	; 0x27f8 <malloc+0xe>
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	e0 91 53 04 	lds	r30, 0x0453
    27fc:	f0 91 54 04 	lds	r31, 0x0454
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	a0 e0       	ldi	r26, 0x00	; 0
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	30 97       	sbiw	r30, 0x00	; 0
    280a:	39 f1       	breq	.+78     	; 0x285a <malloc+0x70>
    280c:	40 81       	ld	r20, Z
    280e:	51 81       	ldd	r21, Z+1	; 0x01
    2810:	48 17       	cp	r20, r24
    2812:	59 07       	cpc	r21, r25
    2814:	b8 f0       	brcs	.+46     	; 0x2844 <malloc+0x5a>
    2816:	48 17       	cp	r20, r24
    2818:	59 07       	cpc	r21, r25
    281a:	71 f4       	brne	.+28     	; 0x2838 <malloc+0x4e>
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	10 97       	sbiw	r26, 0x00	; 0
    2822:	29 f0       	breq	.+10     	; 0x282e <malloc+0x44>
    2824:	13 96       	adiw	r26, 0x03	; 3
    2826:	9c 93       	st	X, r25
    2828:	8e 93       	st	-X, r24
    282a:	12 97       	sbiw	r26, 0x02	; 2
    282c:	2c c0       	rjmp	.+88     	; 0x2886 <malloc+0x9c>
    282e:	90 93 54 04 	sts	0x0454, r25
    2832:	80 93 53 04 	sts	0x0453, r24
    2836:	27 c0       	rjmp	.+78     	; 0x2886 <malloc+0x9c>
    2838:	21 15       	cp	r18, r1
    283a:	31 05       	cpc	r19, r1
    283c:	31 f0       	breq	.+12     	; 0x284a <malloc+0x60>
    283e:	42 17       	cp	r20, r18
    2840:	53 07       	cpc	r21, r19
    2842:	18 f0       	brcs	.+6      	; 0x284a <malloc+0x60>
    2844:	a9 01       	movw	r20, r18
    2846:	db 01       	movw	r26, r22
    2848:	01 c0       	rjmp	.+2      	; 0x284c <malloc+0x62>
    284a:	ef 01       	movw	r28, r30
    284c:	9a 01       	movw	r18, r20
    284e:	bd 01       	movw	r22, r26
    2850:	df 01       	movw	r26, r30
    2852:	02 80       	ldd	r0, Z+2	; 0x02
    2854:	f3 81       	ldd	r31, Z+3	; 0x03
    2856:	e0 2d       	mov	r30, r0
    2858:	d7 cf       	rjmp	.-82     	; 0x2808 <malloc+0x1e>
    285a:	21 15       	cp	r18, r1
    285c:	31 05       	cpc	r19, r1
    285e:	f9 f0       	breq	.+62     	; 0x289e <malloc+0xb4>
    2860:	28 1b       	sub	r18, r24
    2862:	39 0b       	sbc	r19, r25
    2864:	24 30       	cpi	r18, 0x04	; 4
    2866:	31 05       	cpc	r19, r1
    2868:	80 f4       	brcc	.+32     	; 0x288a <malloc+0xa0>
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	61 15       	cp	r22, r1
    2870:	71 05       	cpc	r23, r1
    2872:	21 f0       	breq	.+8      	; 0x287c <malloc+0x92>
    2874:	fb 01       	movw	r30, r22
    2876:	93 83       	std	Z+3, r25	; 0x03
    2878:	82 83       	std	Z+2, r24	; 0x02
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <malloc+0x9a>
    287c:	90 93 54 04 	sts	0x0454, r25
    2880:	80 93 53 04 	sts	0x0453, r24
    2884:	fe 01       	movw	r30, r28
    2886:	32 96       	adiw	r30, 0x02	; 2
    2888:	44 c0       	rjmp	.+136    	; 0x2912 <malloc+0x128>
    288a:	fe 01       	movw	r30, r28
    288c:	e2 0f       	add	r30, r18
    288e:	f3 1f       	adc	r31, r19
    2890:	81 93       	st	Z+, r24
    2892:	91 93       	st	Z+, r25
    2894:	22 50       	subi	r18, 0x02	; 2
    2896:	31 09       	sbc	r19, r1
    2898:	39 83       	std	Y+1, r19	; 0x01
    289a:	28 83       	st	Y, r18
    289c:	3a c0       	rjmp	.+116    	; 0x2912 <malloc+0x128>
    289e:	20 91 51 04 	lds	r18, 0x0451
    28a2:	30 91 52 04 	lds	r19, 0x0452
    28a6:	23 2b       	or	r18, r19
    28a8:	41 f4       	brne	.+16     	; 0x28ba <malloc+0xd0>
    28aa:	20 91 08 01 	lds	r18, 0x0108
    28ae:	30 91 09 01 	lds	r19, 0x0109
    28b2:	30 93 52 04 	sts	0x0452, r19
    28b6:	20 93 51 04 	sts	0x0451, r18
    28ba:	20 91 06 01 	lds	r18, 0x0106
    28be:	30 91 07 01 	lds	r19, 0x0107
    28c2:	21 15       	cp	r18, r1
    28c4:	31 05       	cpc	r19, r1
    28c6:	41 f4       	brne	.+16     	; 0x28d8 <malloc+0xee>
    28c8:	2d b7       	in	r18, 0x3d	; 61
    28ca:	3e b7       	in	r19, 0x3e	; 62
    28cc:	40 91 0a 01 	lds	r20, 0x010A
    28d0:	50 91 0b 01 	lds	r21, 0x010B
    28d4:	24 1b       	sub	r18, r20
    28d6:	35 0b       	sbc	r19, r21
    28d8:	e0 91 51 04 	lds	r30, 0x0451
    28dc:	f0 91 52 04 	lds	r31, 0x0452
    28e0:	e2 17       	cp	r30, r18
    28e2:	f3 07       	cpc	r31, r19
    28e4:	a0 f4       	brcc	.+40     	; 0x290e <malloc+0x124>
    28e6:	2e 1b       	sub	r18, r30
    28e8:	3f 0b       	sbc	r19, r31
    28ea:	28 17       	cp	r18, r24
    28ec:	39 07       	cpc	r19, r25
    28ee:	78 f0       	brcs	.+30     	; 0x290e <malloc+0x124>
    28f0:	ac 01       	movw	r20, r24
    28f2:	4e 5f       	subi	r20, 0xFE	; 254
    28f4:	5f 4f       	sbci	r21, 0xFF	; 255
    28f6:	24 17       	cp	r18, r20
    28f8:	35 07       	cpc	r19, r21
    28fa:	48 f0       	brcs	.+18     	; 0x290e <malloc+0x124>
    28fc:	4e 0f       	add	r20, r30
    28fe:	5f 1f       	adc	r21, r31
    2900:	50 93 52 04 	sts	0x0452, r21
    2904:	40 93 51 04 	sts	0x0451, r20
    2908:	81 93       	st	Z+, r24
    290a:	91 93       	st	Z+, r25
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <malloc+0x128>
    290e:	e0 e0       	ldi	r30, 0x00	; 0
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	cf 01       	movw	r24, r30
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	08 95       	ret

0000291a <free>:
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	09 f4       	brne	.+2      	; 0x2924 <free+0xa>
    2922:	87 c0       	rjmp	.+270    	; 0x2a32 <free+0x118>
    2924:	fc 01       	movw	r30, r24
    2926:	32 97       	sbiw	r30, 0x02	; 2
    2928:	13 82       	std	Z+3, r1	; 0x03
    292a:	12 82       	std	Z+2, r1	; 0x02
    292c:	c0 91 53 04 	lds	r28, 0x0453
    2930:	d0 91 54 04 	lds	r29, 0x0454
    2934:	20 97       	sbiw	r28, 0x00	; 0
    2936:	81 f4       	brne	.+32     	; 0x2958 <free+0x3e>
    2938:	20 81       	ld	r18, Z
    293a:	31 81       	ldd	r19, Z+1	; 0x01
    293c:	28 0f       	add	r18, r24
    293e:	39 1f       	adc	r19, r25
    2940:	80 91 51 04 	lds	r24, 0x0451
    2944:	90 91 52 04 	lds	r25, 0x0452
    2948:	82 17       	cp	r24, r18
    294a:	93 07       	cpc	r25, r19
    294c:	79 f5       	brne	.+94     	; 0x29ac <free+0x92>
    294e:	f0 93 52 04 	sts	0x0452, r31
    2952:	e0 93 51 04 	sts	0x0451, r30
    2956:	6d c0       	rjmp	.+218    	; 0x2a32 <free+0x118>
    2958:	de 01       	movw	r26, r28
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	ae 17       	cp	r26, r30
    2960:	bf 07       	cpc	r27, r31
    2962:	50 f4       	brcc	.+20     	; 0x2978 <free+0x5e>
    2964:	12 96       	adiw	r26, 0x02	; 2
    2966:	4d 91       	ld	r20, X+
    2968:	5c 91       	ld	r21, X
    296a:	13 97       	sbiw	r26, 0x03	; 3
    296c:	9d 01       	movw	r18, r26
    296e:	41 15       	cp	r20, r1
    2970:	51 05       	cpc	r21, r1
    2972:	09 f1       	breq	.+66     	; 0x29b6 <free+0x9c>
    2974:	da 01       	movw	r26, r20
    2976:	f3 cf       	rjmp	.-26     	; 0x295e <free+0x44>
    2978:	b3 83       	std	Z+3, r27	; 0x03
    297a:	a2 83       	std	Z+2, r26	; 0x02
    297c:	40 81       	ld	r20, Z
    297e:	51 81       	ldd	r21, Z+1	; 0x01
    2980:	84 0f       	add	r24, r20
    2982:	95 1f       	adc	r25, r21
    2984:	8a 17       	cp	r24, r26
    2986:	9b 07       	cpc	r25, r27
    2988:	71 f4       	brne	.+28     	; 0x29a6 <free+0x8c>
    298a:	8d 91       	ld	r24, X+
    298c:	9c 91       	ld	r25, X
    298e:	11 97       	sbiw	r26, 0x01	; 1
    2990:	84 0f       	add	r24, r20
    2992:	95 1f       	adc	r25, r21
    2994:	02 96       	adiw	r24, 0x02	; 2
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	12 96       	adiw	r26, 0x02	; 2
    299c:	8d 91       	ld	r24, X+
    299e:	9c 91       	ld	r25, X
    29a0:	13 97       	sbiw	r26, 0x03	; 3
    29a2:	93 83       	std	Z+3, r25	; 0x03
    29a4:	82 83       	std	Z+2, r24	; 0x02
    29a6:	21 15       	cp	r18, r1
    29a8:	31 05       	cpc	r19, r1
    29aa:	29 f4       	brne	.+10     	; 0x29b6 <free+0x9c>
    29ac:	f0 93 54 04 	sts	0x0454, r31
    29b0:	e0 93 53 04 	sts	0x0453, r30
    29b4:	3e c0       	rjmp	.+124    	; 0x2a32 <free+0x118>
    29b6:	d9 01       	movw	r26, r18
    29b8:	13 96       	adiw	r26, 0x03	; 3
    29ba:	fc 93       	st	X, r31
    29bc:	ee 93       	st	-X, r30
    29be:	12 97       	sbiw	r26, 0x02	; 2
    29c0:	4d 91       	ld	r20, X+
    29c2:	5d 91       	ld	r21, X+
    29c4:	a4 0f       	add	r26, r20
    29c6:	b5 1f       	adc	r27, r21
    29c8:	ea 17       	cp	r30, r26
    29ca:	fb 07       	cpc	r31, r27
    29cc:	79 f4       	brne	.+30     	; 0x29ec <free+0xd2>
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	84 0f       	add	r24, r20
    29d4:	95 1f       	adc	r25, r21
    29d6:	02 96       	adiw	r24, 0x02	; 2
    29d8:	d9 01       	movw	r26, r18
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	13 96       	adiw	r26, 0x03	; 3
    29e6:	9c 93       	st	X, r25
    29e8:	8e 93       	st	-X, r24
    29ea:	12 97       	sbiw	r26, 0x02	; 2
    29ec:	e0 e0       	ldi	r30, 0x00	; 0
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	19 f0       	breq	.+6      	; 0x29fe <free+0xe4>
    29f8:	fe 01       	movw	r30, r28
    29fa:	ec 01       	movw	r28, r24
    29fc:	f9 cf       	rjmp	.-14     	; 0x29f0 <free+0xd6>
    29fe:	ce 01       	movw	r24, r28
    2a00:	02 96       	adiw	r24, 0x02	; 2
    2a02:	28 81       	ld	r18, Y
    2a04:	39 81       	ldd	r19, Y+1	; 0x01
    2a06:	82 0f       	add	r24, r18
    2a08:	93 1f       	adc	r25, r19
    2a0a:	20 91 51 04 	lds	r18, 0x0451
    2a0e:	30 91 52 04 	lds	r19, 0x0452
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	69 f4       	brne	.+26     	; 0x2a32 <free+0x118>
    2a18:	30 97       	sbiw	r30, 0x00	; 0
    2a1a:	29 f4       	brne	.+10     	; 0x2a26 <free+0x10c>
    2a1c:	10 92 54 04 	sts	0x0454, r1
    2a20:	10 92 53 04 	sts	0x0453, r1
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <free+0x110>
    2a26:	13 82       	std	Z+3, r1	; 0x03
    2a28:	12 82       	std	Z+2, r1	; 0x02
    2a2a:	d0 93 52 04 	sts	0x0452, r29
    2a2e:	c0 93 51 04 	sts	0x0451, r28
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	08 95       	ret

00002a38 <strtod>:
    2a38:	4f 92       	push	r4
    2a3a:	5f 92       	push	r5
    2a3c:	6f 92       	push	r6
    2a3e:	7f 92       	push	r7
    2a40:	8f 92       	push	r8
    2a42:	9f 92       	push	r9
    2a44:	af 92       	push	r10
    2a46:	bf 92       	push	r11
    2a48:	cf 92       	push	r12
    2a4a:	df 92       	push	r13
    2a4c:	ef 92       	push	r14
    2a4e:	ff 92       	push	r15
    2a50:	0f 93       	push	r16
    2a52:	1f 93       	push	r17
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	8b 01       	movw	r16, r22
    2a5a:	61 15       	cp	r22, r1
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	21 f0       	breq	.+8      	; 0x2a68 <strtod+0x30>
    2a60:	db 01       	movw	r26, r22
    2a62:	8c 93       	st	X, r24
    2a64:	11 96       	adiw	r26, 0x01	; 1
    2a66:	9c 93       	st	X, r25
    2a68:	ec 01       	movw	r28, r24
    2a6a:	5e 01       	movw	r10, r28
    2a6c:	bf ef       	ldi	r27, 0xFF	; 255
    2a6e:	ab 1a       	sub	r10, r27
    2a70:	bb 0a       	sbc	r11, r27
    2a72:	75 01       	movw	r14, r10
    2a74:	c8 80       	ld	r12, Y
    2a76:	8c 2d       	mov	r24, r12
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <isspace>
    2a7e:	89 2b       	or	r24, r25
    2a80:	11 f0       	breq	.+4      	; 0x2a86 <strtod+0x4e>
    2a82:	e5 01       	movw	r28, r10
    2a84:	f2 cf       	rjmp	.-28     	; 0x2a6a <strtod+0x32>
    2a86:	ed e2       	ldi	r30, 0x2D	; 45
    2a88:	ce 12       	cpse	r12, r30
    2a8a:	08 c0       	rjmp	.+16     	; 0x2a9c <strtod+0x64>
    2a8c:	7e 01       	movw	r14, r28
    2a8e:	f2 e0       	ldi	r31, 0x02	; 2
    2a90:	ef 0e       	add	r14, r31
    2a92:	f1 1c       	adc	r15, r1
    2a94:	c9 80       	ldd	r12, Y+1	; 0x01
    2a96:	dd 24       	eor	r13, r13
    2a98:	d3 94       	inc	r13
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <strtod+0x76>
    2a9c:	2b e2       	ldi	r18, 0x2B	; 43
    2a9e:	c2 12       	cpse	r12, r18
    2aa0:	05 c0       	rjmp	.+10     	; 0x2aac <strtod+0x74>
    2aa2:	7e 01       	movw	r14, r28
    2aa4:	42 e0       	ldi	r20, 0x02	; 2
    2aa6:	e4 0e       	add	r14, r20
    2aa8:	f1 1c       	adc	r15, r1
    2aaa:	c9 80       	ldd	r12, Y+1	; 0x01
    2aac:	d1 2c       	mov	r13, r1
    2aae:	e7 01       	movw	r28, r14
    2ab0:	21 97       	sbiw	r28, 0x01	; 1
    2ab2:	43 e0       	ldi	r20, 0x03	; 3
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	69 e8       	ldi	r22, 0x89	; 137
    2ab8:	71 e0       	ldi	r23, 0x01	; 1
    2aba:	ce 01       	movw	r24, r28
    2abc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <strncasecmp_P>
    2ac0:	89 2b       	or	r24, r25
    2ac2:	d1 f4       	brne	.+52     	; 0x2af8 <strtod+0xc0>
    2ac4:	e7 01       	movw	r28, r14
    2ac6:	22 96       	adiw	r28, 0x02	; 2
    2ac8:	45 e0       	ldi	r20, 0x05	; 5
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	64 e8       	ldi	r22, 0x84	; 132
    2ace:	71 e0       	ldi	r23, 0x01	; 1
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <strncasecmp_P>
    2ad6:	89 2b       	or	r24, r25
    2ad8:	11 f4       	brne	.+4      	; 0x2ade <strtod+0xa6>
    2ada:	e7 01       	movw	r28, r14
    2adc:	27 96       	adiw	r28, 0x07	; 7
    2ade:	01 15       	cp	r16, r1
    2ae0:	11 05       	cpc	r17, r1
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <strtod+0xb2>
    2ae4:	d8 01       	movw	r26, r16
    2ae6:	cd 93       	st	X+, r28
    2ae8:	dc 93       	st	X, r29
    2aea:	d1 10       	cpse	r13, r1
    2aec:	08 c1       	rjmp	.+528    	; 0x2cfe <strtod+0x2c6>
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	80 e8       	ldi	r24, 0x80	; 128
    2af4:	9f e7       	ldi	r25, 0x7F	; 127
    2af6:	0c c1       	rjmp	.+536    	; 0x2d10 <strtod+0x2d8>
    2af8:	43 e0       	ldi	r20, 0x03	; 3
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	61 e8       	ldi	r22, 0x81	; 129
    2afe:	71 e0       	ldi	r23, 0x01	; 1
    2b00:	ce 01       	movw	r24, r28
    2b02:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <strncasecmp_P>
    2b06:	89 2b       	or	r24, r25
    2b08:	59 f4       	brne	.+22     	; 0x2b20 <strtod+0xe8>
    2b0a:	01 15       	cp	r16, r1
    2b0c:	11 05       	cpc	r17, r1
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <strtod+0xda>
    2b10:	fb c0       	rjmp	.+502    	; 0x2d08 <strtod+0x2d0>
    2b12:	b2 e0       	ldi	r27, 0x02	; 2
    2b14:	eb 0e       	add	r14, r27
    2b16:	f1 1c       	adc	r15, r1
    2b18:	f8 01       	movw	r30, r16
    2b1a:	f1 82       	std	Z+1, r15	; 0x01
    2b1c:	e0 82       	st	Z, r14
    2b1e:	f4 c0       	rjmp	.+488    	; 0x2d08 <strtod+0x2d0>
    2b20:	f7 01       	movw	r30, r14
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	cb 01       	movw	r24, r22
    2b28:	c0 e0       	ldi	r28, 0x00	; 0
    2b2a:	d0 e0       	ldi	r29, 0x00	; 0
    2b2c:	7f 01       	movw	r14, r30
    2b2e:	a0 ed       	ldi	r26, 0xD0	; 208
    2b30:	aa 2e       	mov	r10, r26
    2b32:	ac 0c       	add	r10, r12
    2b34:	29 e0       	ldi	r18, 0x09	; 9
    2b36:	2a 15       	cp	r18, r10
    2b38:	30 f1       	brcs	.+76     	; 0x2b86 <strtod+0x14e>
    2b3a:	4d 2d       	mov	r20, r13
    2b3c:	42 60       	ori	r20, 0x02	; 2
    2b3e:	b4 2e       	mov	r11, r20
    2b40:	2d 2d       	mov	r18, r13
    2b42:	28 70       	andi	r18, 0x08	; 8
    2b44:	d2 fe       	sbrs	r13, 2
    2b46:	04 c0       	rjmp	.+8      	; 0x2b50 <strtod+0x118>
    2b48:	21 11       	cpse	r18, r1
    2b4a:	25 c0       	rjmp	.+74     	; 0x2b96 <strtod+0x15e>
    2b4c:	21 96       	adiw	r28, 0x01	; 1
    2b4e:	23 c0       	rjmp	.+70     	; 0x2b96 <strtod+0x15e>
    2b50:	21 11       	cpse	r18, r1
    2b52:	21 97       	sbiw	r28, 0x01	; 1
    2b54:	a5 e0       	ldi	r26, 0x05	; 5
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	9b 01       	movw	r18, r22
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__muluhisi3>
    2b60:	66 0f       	add	r22, r22
    2b62:	77 1f       	adc	r23, r23
    2b64:	88 1f       	adc	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	6a 0d       	add	r22, r10
    2b6a:	71 1d       	adc	r23, r1
    2b6c:	81 1d       	adc	r24, r1
    2b6e:	91 1d       	adc	r25, r1
    2b70:	68 39       	cpi	r22, 0x98	; 152
    2b72:	a9 e9       	ldi	r26, 0x99	; 153
    2b74:	7a 07       	cpc	r23, r26
    2b76:	8a 07       	cpc	r24, r26
    2b78:	a9 e1       	ldi	r26, 0x19	; 25
    2b7a:	9a 07       	cpc	r25, r26
    2b7c:	60 f0       	brcs	.+24     	; 0x2b96 <strtod+0x15e>
    2b7e:	bd 2d       	mov	r27, r13
    2b80:	b6 60       	ori	r27, 0x06	; 6
    2b82:	bb 2e       	mov	r11, r27
    2b84:	08 c0       	rjmp	.+16     	; 0x2b96 <strtod+0x15e>
    2b86:	2e ef       	ldi	r18, 0xFE	; 254
    2b88:	a2 12       	cpse	r10, r18
    2b8a:	0a c0       	rjmp	.+20     	; 0x2ba0 <strtod+0x168>
    2b8c:	d3 fc       	sbrc	r13, 3
    2b8e:	50 c0       	rjmp	.+160    	; 0x2c30 <strtod+0x1f8>
    2b90:	4d 2d       	mov	r20, r13
    2b92:	48 60       	ori	r20, 0x08	; 8
    2b94:	b4 2e       	mov	r11, r20
    2b96:	31 96       	adiw	r30, 0x01	; 1
    2b98:	d7 01       	movw	r26, r14
    2b9a:	cc 90       	ld	r12, X
    2b9c:	db 2c       	mov	r13, r11
    2b9e:	c6 cf       	rjmp	.-116    	; 0x2b2c <strtod+0xf4>
    2ba0:	2c 2d       	mov	r18, r12
    2ba2:	2f 7d       	andi	r18, 0xDF	; 223
    2ba4:	25 34       	cpi	r18, 0x45	; 69
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <strtod+0x172>
    2ba8:	43 c0       	rjmp	.+134    	; 0x2c30 <strtod+0x1f8>
    2baa:	a0 81       	ld	r26, Z
    2bac:	ad 32       	cpi	r26, 0x2D	; 45
    2bae:	41 f4       	brne	.+16     	; 0x2bc0 <strtod+0x188>
    2bb0:	bd 2d       	mov	r27, r13
    2bb2:	b0 61       	ori	r27, 0x10	; 16
    2bb4:	db 2e       	mov	r13, r27
    2bb6:	7f 01       	movw	r14, r30
    2bb8:	22 e0       	ldi	r18, 0x02	; 2
    2bba:	e2 0e       	add	r14, r18
    2bbc:	f1 1c       	adc	r15, r1
    2bbe:	0c c0       	rjmp	.+24     	; 0x2bd8 <strtod+0x1a0>
    2bc0:	7f 01       	movw	r14, r30
    2bc2:	ab 32       	cpi	r26, 0x2B	; 43
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <strtod+0x19a>
    2bc6:	4f ef       	ldi	r20, 0xFF	; 255
    2bc8:	e4 1a       	sub	r14, r20
    2bca:	f4 0a       	sbc	r15, r20
    2bcc:	21 e0       	ldi	r18, 0x01	; 1
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <strtod+0x1a6>
    2bd2:	a2 e0       	ldi	r26, 0x02	; 2
    2bd4:	ea 0e       	add	r14, r26
    2bd6:	f1 1c       	adc	r15, r1
    2bd8:	a1 81       	ldd	r26, Z+1	; 0x01
    2bda:	22 e0       	ldi	r18, 0x02	; 2
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	a0 53       	subi	r26, 0x30	; 48
    2be0:	aa 30       	cpi	r26, 0x0A	; 10
    2be2:	18 f0       	brcs	.+6      	; 0x2bea <strtod+0x1b2>
    2be4:	e2 1a       	sub	r14, r18
    2be6:	f3 0a       	sbc	r15, r19
    2be8:	23 c0       	rjmp	.+70     	; 0x2c30 <strtod+0x1f8>
    2bea:	f7 01       	movw	r30, r14
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	20 38       	cpi	r18, 0x80	; 128
    2bf2:	bc e0       	ldi	r27, 0x0C	; 12
    2bf4:	3b 07       	cpc	r19, r27
    2bf6:	5c f4       	brge	.+22     	; 0x2c0e <strtod+0x1d6>
    2bf8:	a9 01       	movw	r20, r18
    2bfa:	44 0f       	add	r20, r20
    2bfc:	55 1f       	adc	r21, r21
    2bfe:	44 0f       	add	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	24 0f       	add	r18, r20
    2c04:	35 1f       	adc	r19, r21
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	2a 0f       	add	r18, r26
    2c0c:	31 1d       	adc	r19, r1
    2c0e:	af 01       	movw	r20, r30
    2c10:	4f 5f       	subi	r20, 0xFF	; 255
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	7a 01       	movw	r14, r20
    2c16:	a0 81       	ld	r26, Z
    2c18:	a0 53       	subi	r26, 0x30	; 48
    2c1a:	aa 30       	cpi	r26, 0x0A	; 10
    2c1c:	10 f4       	brcc	.+4      	; 0x2c22 <strtod+0x1ea>
    2c1e:	fa 01       	movw	r30, r20
    2c20:	e7 cf       	rjmp	.-50     	; 0x2bf0 <strtod+0x1b8>
    2c22:	d4 fe       	sbrs	r13, 4
    2c24:	03 c0       	rjmp	.+6      	; 0x2c2c <strtod+0x1f4>
    2c26:	31 95       	neg	r19
    2c28:	21 95       	neg	r18
    2c2a:	31 09       	sbc	r19, r1
    2c2c:	c2 0f       	add	r28, r18
    2c2e:	d3 1f       	adc	r29, r19
    2c30:	d1 fe       	sbrs	r13, 1
    2c32:	09 c0       	rjmp	.+18     	; 0x2c46 <strtod+0x20e>
    2c34:	01 15       	cp	r16, r1
    2c36:	11 05       	cpc	r17, r1
    2c38:	31 f0       	breq	.+12     	; 0x2c46 <strtod+0x20e>
    2c3a:	e1 e0       	ldi	r30, 0x01	; 1
    2c3c:	ee 1a       	sub	r14, r30
    2c3e:	f1 08       	sbc	r15, r1
    2c40:	d8 01       	movw	r26, r16
    2c42:	ed 92       	st	X+, r14
    2c44:	fc 92       	st	X, r15
    2c46:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__floatunsisf>
    2c4a:	2d 2d       	mov	r18, r13
    2c4c:	23 70       	andi	r18, 0x03	; 3
    2c4e:	23 30       	cpi	r18, 0x03	; 3
    2c50:	19 f0       	breq	.+6      	; 0x2c58 <strtod+0x220>
    2c52:	6b 01       	movw	r12, r22
    2c54:	7c 01       	movw	r14, r24
    2c56:	06 c0       	rjmp	.+12     	; 0x2c64 <strtod+0x22c>
    2c58:	6b 01       	movw	r12, r22
    2c5a:	7c 01       	movw	r14, r24
    2c5c:	f7 fa       	bst	r15, 7
    2c5e:	f0 94       	com	r15
    2c60:	f7 f8       	bld	r15, 7
    2c62:	f0 94       	com	r15
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	a9 01       	movw	r20, r18
    2c6a:	c7 01       	movw	r24, r14
    2c6c:	b6 01       	movw	r22, r12
    2c6e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__cmpsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <strtod+0x240>
    2c76:	40 c0       	rjmp	.+128    	; 0x2cf8 <strtod+0x2c0>
    2c78:	d7 ff       	sbrs	r29, 7
    2c7a:	06 c0       	rjmp	.+12     	; 0x2c88 <strtod+0x250>
    2c7c:	d1 95       	neg	r29
    2c7e:	c1 95       	neg	r28
    2c80:	d1 09       	sbc	r29, r1
    2c82:	00 ea       	ldi	r16, 0xA0	; 160
    2c84:	11 e0       	ldi	r17, 0x01	; 1
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <strtod+0x254>
    2c88:	08 eb       	ldi	r16, 0xB8	; 184
    2c8a:	11 e0       	ldi	r17, 0x01	; 1
    2c8c:	48 01       	movw	r8, r16
    2c8e:	b8 e1       	ldi	r27, 0x18	; 24
    2c90:	8b 1a       	sub	r8, r27
    2c92:	91 08       	sbc	r9, r1
    2c94:	90 e2       	ldi	r25, 0x20	; 32
    2c96:	a9 2e       	mov	r10, r25
    2c98:	b1 2c       	mov	r11, r1
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	45 90       	lpm	r4, Z+
    2c9e:	55 90       	lpm	r5, Z+
    2ca0:	65 90       	lpm	r6, Z+
    2ca2:	74 90       	lpm	r7, Z
    2ca4:	ca 15       	cp	r28, r10
    2ca6:	db 05       	cpc	r29, r11
    2ca8:	5c f0       	brlt	.+22     	; 0x2cc0 <strtod+0x288>
    2caa:	a3 01       	movw	r20, r6
    2cac:	92 01       	movw	r18, r4
    2cae:	c7 01       	movw	r24, r14
    2cb0:	b6 01       	movw	r22, r12
    2cb2:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsf3>
    2cb6:	6b 01       	movw	r12, r22
    2cb8:	7c 01       	movw	r14, r24
    2cba:	ca 19       	sub	r28, r10
    2cbc:	db 09       	sbc	r29, r11
    2cbe:	f2 cf       	rjmp	.-28     	; 0x2ca4 <strtod+0x26c>
    2cc0:	04 50       	subi	r16, 0x04	; 4
    2cc2:	11 09       	sbc	r17, r1
    2cc4:	b5 94       	asr	r11
    2cc6:	a7 94       	ror	r10
    2cc8:	08 15       	cp	r16, r8
    2cca:	19 05       	cpc	r17, r9
    2ccc:	31 f7       	brne	.-52     	; 0x2c9a <strtod+0x262>
    2cce:	8e 2d       	mov	r24, r14
    2cd0:	88 0f       	add	r24, r24
    2cd2:	8f 2d       	mov	r24, r15
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd8:	49 f0       	breq	.+18     	; 0x2cec <strtod+0x2b4>
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	a9 01       	movw	r20, r18
    2ce0:	c7 01       	movw	r24, r14
    2ce2:	b6 01       	movw	r22, r12
    2ce4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__cmpsf2>
    2ce8:	81 11       	cpse	r24, r1
    2cea:	06 c0       	rjmp	.+12     	; 0x2cf8 <strtod+0x2c0>
    2cec:	82 e2       	ldi	r24, 0x22	; 34
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	90 93 56 04 	sts	0x0456, r25
    2cf4:	80 93 55 04 	sts	0x0455, r24
    2cf8:	c7 01       	movw	r24, r14
    2cfa:	b6 01       	movw	r22, r12
    2cfc:	09 c0       	rjmp	.+18     	; 0x2d10 <strtod+0x2d8>
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	80 e8       	ldi	r24, 0x80	; 128
    2d04:	9f ef       	ldi	r25, 0xFF	; 255
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <strtod+0x2d8>
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	80 ec       	ldi	r24, 0xC0	; 192
    2d0e:	9f e7       	ldi	r25, 0x7F	; 127
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	bf 90       	pop	r11
    2d22:	af 90       	pop	r10
    2d24:	9f 90       	pop	r9
    2d26:	8f 90       	pop	r8
    2d28:	7f 90       	pop	r7
    2d2a:	6f 90       	pop	r6
    2d2c:	5f 90       	pop	r5
    2d2e:	4f 90       	pop	r4
    2d30:	08 95       	ret

00002d32 <isspace>:
    2d32:	91 11       	cpse	r25, r1
    2d34:	b0 c2       	rjmp	.+1376   	; 0x3296 <__ctype_isfalse>
    2d36:	80 32       	cpi	r24, 0x20	; 32
    2d38:	19 f0       	breq	.+6      	; 0x2d40 <isspace+0xe>
    2d3a:	89 50       	subi	r24, 0x09	; 9
    2d3c:	85 50       	subi	r24, 0x05	; 5
    2d3e:	d0 f7       	brcc	.-12     	; 0x2d34 <isspace+0x2>
    2d40:	08 95       	ret

00002d42 <strncasecmp_P>:
    2d42:	fb 01       	movw	r30, r22
    2d44:	dc 01       	movw	r26, r24
    2d46:	41 50       	subi	r20, 0x01	; 1
    2d48:	50 40       	sbci	r21, 0x00	; 0
    2d4a:	88 f0       	brcs	.+34     	; 0x2d6e <strncasecmp_P+0x2c>
    2d4c:	8d 91       	ld	r24, X+
    2d4e:	81 34       	cpi	r24, 0x41	; 65
    2d50:	1c f0       	brlt	.+6      	; 0x2d58 <strncasecmp_P+0x16>
    2d52:	8b 35       	cpi	r24, 0x5B	; 91
    2d54:	0c f4       	brge	.+2      	; 0x2d58 <strncasecmp_P+0x16>
    2d56:	80 5e       	subi	r24, 0xE0	; 224
    2d58:	65 91       	lpm	r22, Z+
    2d5a:	61 34       	cpi	r22, 0x41	; 65
    2d5c:	1c f0       	brlt	.+6      	; 0x2d64 <strncasecmp_P+0x22>
    2d5e:	6b 35       	cpi	r22, 0x5B	; 91
    2d60:	0c f4       	brge	.+2      	; 0x2d64 <strncasecmp_P+0x22>
    2d62:	60 5e       	subi	r22, 0xE0	; 224
    2d64:	86 1b       	sub	r24, r22
    2d66:	61 11       	cpse	r22, r1
    2d68:	71 f3       	breq	.-36     	; 0x2d46 <strncasecmp_P+0x4>
    2d6a:	99 0b       	sbc	r25, r25
    2d6c:	08 95       	ret
    2d6e:	88 1b       	sub	r24, r24
    2d70:	fc cf       	rjmp	.-8      	; 0x2d6a <strncasecmp_P+0x28>

00002d72 <strcat>:
    2d72:	fb 01       	movw	r30, r22
    2d74:	dc 01       	movw	r26, r24
    2d76:	0d 90       	ld	r0, X+
    2d78:	00 20       	and	r0, r0
    2d7a:	e9 f7       	brne	.-6      	; 0x2d76 <strcat+0x4>
    2d7c:	11 97       	sbiw	r26, 0x01	; 1
    2d7e:	01 90       	ld	r0, Z+
    2d80:	0d 92       	st	X+, r0
    2d82:	00 20       	and	r0, r0
    2d84:	e1 f7       	brne	.-8      	; 0x2d7e <strcat+0xc>
    2d86:	08 95       	ret

00002d88 <strcmp>:
    2d88:	fb 01       	movw	r30, r22
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	8d 91       	ld	r24, X+
    2d8e:	01 90       	ld	r0, Z+
    2d90:	80 19       	sub	r24, r0
    2d92:	01 10       	cpse	r0, r1
    2d94:	d9 f3       	breq	.-10     	; 0x2d8c <strcmp+0x4>
    2d96:	99 0b       	sbc	r25, r25
    2d98:	08 95       	ret

00002d9a <strcpy>:
    2d9a:	fb 01       	movw	r30, r22
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	01 90       	ld	r0, Z+
    2da0:	0d 92       	st	X+, r0
    2da2:	00 20       	and	r0, r0
    2da4:	e1 f7       	brne	.-8      	; 0x2d9e <strcpy+0x4>
    2da6:	08 95       	ret

00002da8 <strncpy>:
    2da8:	fb 01       	movw	r30, r22
    2daa:	dc 01       	movw	r26, r24
    2dac:	41 50       	subi	r20, 0x01	; 1
    2dae:	50 40       	sbci	r21, 0x00	; 0
    2db0:	48 f0       	brcs	.+18     	; 0x2dc4 <strncpy+0x1c>
    2db2:	01 90       	ld	r0, Z+
    2db4:	0d 92       	st	X+, r0
    2db6:	00 20       	and	r0, r0
    2db8:	c9 f7       	brne	.-14     	; 0x2dac <strncpy+0x4>
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <strncpy+0x16>
    2dbc:	1d 92       	st	X+, r1
    2dbe:	41 50       	subi	r20, 0x01	; 1
    2dc0:	50 40       	sbci	r21, 0x00	; 0
    2dc2:	e0 f7       	brcc	.-8      	; 0x2dbc <strncpy+0x14>
    2dc4:	08 95       	ret

00002dc6 <strpbrk>:
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	99 27       	eor	r25, r25
    2dca:	8d 91       	ld	r24, X+
    2dcc:	88 23       	and	r24, r24
    2dce:	41 f0       	breq	.+16     	; 0x2de0 <strpbrk+0x1a>
    2dd0:	fb 01       	movw	r30, r22
    2dd2:	01 90       	ld	r0, Z+
    2dd4:	08 16       	cp	r0, r24
    2dd6:	01 10       	cpse	r0, r1
    2dd8:	e1 f7       	brne	.-8      	; 0x2dd2 <strpbrk+0xc>
    2dda:	b9 f7       	brne	.-18     	; 0x2dca <strpbrk+0x4>
    2ddc:	11 97       	sbiw	r26, 0x01	; 1
    2dde:	cd 01       	movw	r24, r26
    2de0:	08 95       	ret

00002de2 <sprintf>:
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	2e 97       	sbiw	r28, 0x0e	; 14
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	0d 89       	ldd	r16, Y+21	; 0x15
    2dfc:	1e 89       	ldd	r17, Y+22	; 0x16
    2dfe:	86 e0       	ldi	r24, 0x06	; 6
    2e00:	8c 83       	std	Y+4, r24	; 0x04
    2e02:	1a 83       	std	Y+2, r17	; 0x02
    2e04:	09 83       	std	Y+1, r16	; 0x01
    2e06:	8f ef       	ldi	r24, 0xFF	; 255
    2e08:	9f e7       	ldi	r25, 0x7F	; 127
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	ae 01       	movw	r20, r28
    2e10:	47 5e       	subi	r20, 0xE7	; 231
    2e12:	5f 4f       	sbci	r21, 0xFF	; 255
    2e14:	6f 89       	ldd	r22, Y+23	; 0x17
    2e16:	78 8d       	ldd	r23, Y+24	; 0x18
    2e18:	ce 01       	movw	r24, r28
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <vfprintf>
    2e20:	ef 81       	ldd	r30, Y+7	; 0x07
    2e22:	f8 85       	ldd	r31, Y+8	; 0x08
    2e24:	e0 0f       	add	r30, r16
    2e26:	f1 1f       	adc	r31, r17
    2e28:	10 82       	st	Z, r1
    2e2a:	2e 96       	adiw	r28, 0x0e	; 14
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	08 95       	ret

00002e40 <__cmpsf2>:
    2e40:	5c dc       	rcall	.-1864   	; 0x26fa <__fp_cmp>
    2e42:	08 f4       	brcc	.+2      	; 0x2e46 <__cmpsf2+0x6>
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	08 95       	ret

00002e48 <vfprintf>:
    2e48:	2f 92       	push	r2
    2e4a:	3f 92       	push	r3
    2e4c:	4f 92       	push	r4
    2e4e:	5f 92       	push	r5
    2e50:	6f 92       	push	r6
    2e52:	7f 92       	push	r7
    2e54:	8f 92       	push	r8
    2e56:	9f 92       	push	r9
    2e58:	af 92       	push	r10
    2e5a:	bf 92       	push	r11
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ef 92       	push	r14
    2e62:	ff 92       	push	r15
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	2c 97       	sbiw	r28, 0x0c	; 12
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	7c 01       	movw	r14, r24
    2e7e:	6b 01       	movw	r12, r22
    2e80:	8a 01       	movw	r16, r20
    2e82:	fc 01       	movw	r30, r24
    2e84:	17 82       	std	Z+7, r1	; 0x07
    2e86:	16 82       	std	Z+6, r1	; 0x06
    2e88:	83 81       	ldd	r24, Z+3	; 0x03
    2e8a:	81 ff       	sbrs	r24, 1
    2e8c:	bd c1       	rjmp	.+890    	; 0x3208 <vfprintf+0x3c0>
    2e8e:	ce 01       	movw	r24, r28
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	4c 01       	movw	r8, r24
    2e94:	f7 01       	movw	r30, r14
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	f6 01       	movw	r30, r12
    2e9a:	93 fd       	sbrc	r25, 3
    2e9c:	85 91       	lpm	r24, Z+
    2e9e:	93 ff       	sbrs	r25, 3
    2ea0:	81 91       	ld	r24, Z+
    2ea2:	6f 01       	movw	r12, r30
    2ea4:	88 23       	and	r24, r24
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <vfprintf+0x62>
    2ea8:	ab c1       	rjmp	.+854    	; 0x3200 <vfprintf+0x3b8>
    2eaa:	85 32       	cpi	r24, 0x25	; 37
    2eac:	39 f4       	brne	.+14     	; 0x2ebc <vfprintf+0x74>
    2eae:	93 fd       	sbrc	r25, 3
    2eb0:	85 91       	lpm	r24, Z+
    2eb2:	93 ff       	sbrs	r25, 3
    2eb4:	81 91       	ld	r24, Z+
    2eb6:	6f 01       	movw	r12, r30
    2eb8:	85 32       	cpi	r24, 0x25	; 37
    2eba:	29 f4       	brne	.+10     	; 0x2ec6 <vfprintf+0x7e>
    2ebc:	b7 01       	movw	r22, r14
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    2ec4:	e7 cf       	rjmp	.-50     	; 0x2e94 <vfprintf+0x4c>
    2ec6:	51 2c       	mov	r5, r1
    2ec8:	31 2c       	mov	r3, r1
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	20 32       	cpi	r18, 0x20	; 32
    2ece:	a0 f4       	brcc	.+40     	; 0x2ef8 <vfprintf+0xb0>
    2ed0:	8b 32       	cpi	r24, 0x2B	; 43
    2ed2:	69 f0       	breq	.+26     	; 0x2eee <vfprintf+0xa6>
    2ed4:	30 f4       	brcc	.+12     	; 0x2ee2 <vfprintf+0x9a>
    2ed6:	80 32       	cpi	r24, 0x20	; 32
    2ed8:	59 f0       	breq	.+22     	; 0x2ef0 <vfprintf+0xa8>
    2eda:	83 32       	cpi	r24, 0x23	; 35
    2edc:	69 f4       	brne	.+26     	; 0x2ef8 <vfprintf+0xb0>
    2ede:	20 61       	ori	r18, 0x10	; 16
    2ee0:	2c c0       	rjmp	.+88     	; 0x2f3a <vfprintf+0xf2>
    2ee2:	8d 32       	cpi	r24, 0x2D	; 45
    2ee4:	39 f0       	breq	.+14     	; 0x2ef4 <vfprintf+0xac>
    2ee6:	80 33       	cpi	r24, 0x30	; 48
    2ee8:	39 f4       	brne	.+14     	; 0x2ef8 <vfprintf+0xb0>
    2eea:	21 60       	ori	r18, 0x01	; 1
    2eec:	26 c0       	rjmp	.+76     	; 0x2f3a <vfprintf+0xf2>
    2eee:	22 60       	ori	r18, 0x02	; 2
    2ef0:	24 60       	ori	r18, 0x04	; 4
    2ef2:	23 c0       	rjmp	.+70     	; 0x2f3a <vfprintf+0xf2>
    2ef4:	28 60       	ori	r18, 0x08	; 8
    2ef6:	21 c0       	rjmp	.+66     	; 0x2f3a <vfprintf+0xf2>
    2ef8:	27 fd       	sbrc	r18, 7
    2efa:	27 c0       	rjmp	.+78     	; 0x2f4a <vfprintf+0x102>
    2efc:	30 ed       	ldi	r19, 0xD0	; 208
    2efe:	38 0f       	add	r19, r24
    2f00:	3a 30       	cpi	r19, 0x0A	; 10
    2f02:	78 f4       	brcc	.+30     	; 0x2f22 <vfprintf+0xda>
    2f04:	26 ff       	sbrs	r18, 6
    2f06:	06 c0       	rjmp	.+12     	; 0x2f14 <vfprintf+0xcc>
    2f08:	fa e0       	ldi	r31, 0x0A	; 10
    2f0a:	5f 9e       	mul	r5, r31
    2f0c:	30 0d       	add	r19, r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	53 2e       	mov	r5, r19
    2f12:	13 c0       	rjmp	.+38     	; 0x2f3a <vfprintf+0xf2>
    2f14:	8a e0       	ldi	r24, 0x0A	; 10
    2f16:	38 9e       	mul	r3, r24
    2f18:	30 0d       	add	r19, r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	33 2e       	mov	r3, r19
    2f1e:	20 62       	ori	r18, 0x20	; 32
    2f20:	0c c0       	rjmp	.+24     	; 0x2f3a <vfprintf+0xf2>
    2f22:	8e 32       	cpi	r24, 0x2E	; 46
    2f24:	21 f4       	brne	.+8      	; 0x2f2e <vfprintf+0xe6>
    2f26:	26 fd       	sbrc	r18, 6
    2f28:	6b c1       	rjmp	.+726    	; 0x3200 <vfprintf+0x3b8>
    2f2a:	20 64       	ori	r18, 0x40	; 64
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <vfprintf+0xf2>
    2f2e:	8c 36       	cpi	r24, 0x6C	; 108
    2f30:	11 f4       	brne	.+4      	; 0x2f36 <vfprintf+0xee>
    2f32:	20 68       	ori	r18, 0x80	; 128
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <vfprintf+0xf2>
    2f36:	88 36       	cpi	r24, 0x68	; 104
    2f38:	41 f4       	brne	.+16     	; 0x2f4a <vfprintf+0x102>
    2f3a:	f6 01       	movw	r30, r12
    2f3c:	93 fd       	sbrc	r25, 3
    2f3e:	85 91       	lpm	r24, Z+
    2f40:	93 ff       	sbrs	r25, 3
    2f42:	81 91       	ld	r24, Z+
    2f44:	6f 01       	movw	r12, r30
    2f46:	81 11       	cpse	r24, r1
    2f48:	c1 cf       	rjmp	.-126    	; 0x2ecc <vfprintf+0x84>
    2f4a:	98 2f       	mov	r25, r24
    2f4c:	9f 7d       	andi	r25, 0xDF	; 223
    2f4e:	95 54       	subi	r25, 0x45	; 69
    2f50:	93 30       	cpi	r25, 0x03	; 3
    2f52:	28 f4       	brcc	.+10     	; 0x2f5e <vfprintf+0x116>
    2f54:	0c 5f       	subi	r16, 0xFC	; 252
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	ff e3       	ldi	r31, 0x3F	; 63
    2f5a:	f9 83       	std	Y+1, r31	; 0x01
    2f5c:	0d c0       	rjmp	.+26     	; 0x2f78 <vfprintf+0x130>
    2f5e:	83 36       	cpi	r24, 0x63	; 99
    2f60:	31 f0       	breq	.+12     	; 0x2f6e <vfprintf+0x126>
    2f62:	83 37       	cpi	r24, 0x73	; 115
    2f64:	71 f0       	breq	.+28     	; 0x2f82 <vfprintf+0x13a>
    2f66:	83 35       	cpi	r24, 0x53	; 83
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <vfprintf+0x124>
    2f6a:	5b c0       	rjmp	.+182    	; 0x3022 <vfprintf+0x1da>
    2f6c:	22 c0       	rjmp	.+68     	; 0x2fb2 <vfprintf+0x16a>
    2f6e:	f8 01       	movw	r30, r16
    2f70:	80 81       	ld	r24, Z
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	0e 5f       	subi	r16, 0xFE	; 254
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	44 24       	eor	r4, r4
    2f7a:	43 94       	inc	r4
    2f7c:	51 2c       	mov	r5, r1
    2f7e:	54 01       	movw	r10, r8
    2f80:	15 c0       	rjmp	.+42     	; 0x2fac <vfprintf+0x164>
    2f82:	38 01       	movw	r6, r16
    2f84:	f2 e0       	ldi	r31, 0x02	; 2
    2f86:	6f 0e       	add	r6, r31
    2f88:	71 1c       	adc	r7, r1
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	a0 80       	ld	r10, Z
    2f8e:	b1 80       	ldd	r11, Z+1	; 0x01
    2f90:	26 ff       	sbrs	r18, 6
    2f92:	03 c0       	rjmp	.+6      	; 0x2f9a <vfprintf+0x152>
    2f94:	65 2d       	mov	r22, r5
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <vfprintf+0x156>
    2f9a:	6f ef       	ldi	r22, 0xFF	; 255
    2f9c:	7f ef       	ldi	r23, 0xFF	; 255
    2f9e:	c5 01       	movw	r24, r10
    2fa0:	2c 87       	std	Y+12, r18	; 0x0c
    2fa2:	0e 94 59 19 	call	0x32b2	; 0x32b2 <strnlen>
    2fa6:	2c 01       	movw	r4, r24
    2fa8:	83 01       	movw	r16, r6
    2faa:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fac:	2f 77       	andi	r18, 0x7F	; 127
    2fae:	22 2e       	mov	r2, r18
    2fb0:	17 c0       	rjmp	.+46     	; 0x2fe0 <vfprintf+0x198>
    2fb2:	38 01       	movw	r6, r16
    2fb4:	f2 e0       	ldi	r31, 0x02	; 2
    2fb6:	6f 0e       	add	r6, r31
    2fb8:	71 1c       	adc	r7, r1
    2fba:	f8 01       	movw	r30, r16
    2fbc:	a0 80       	ld	r10, Z
    2fbe:	b1 80       	ldd	r11, Z+1	; 0x01
    2fc0:	26 ff       	sbrs	r18, 6
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <vfprintf+0x182>
    2fc4:	65 2d       	mov	r22, r5
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <vfprintf+0x186>
    2fca:	6f ef       	ldi	r22, 0xFF	; 255
    2fcc:	7f ef       	ldi	r23, 0xFF	; 255
    2fce:	c5 01       	movw	r24, r10
    2fd0:	2c 87       	std	Y+12, r18	; 0x0c
    2fd2:	0e 94 4e 19 	call	0x329c	; 0x329c <strnlen_P>
    2fd6:	2c 01       	movw	r4, r24
    2fd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fda:	20 68       	ori	r18, 0x80	; 128
    2fdc:	22 2e       	mov	r2, r18
    2fde:	83 01       	movw	r16, r6
    2fe0:	23 fc       	sbrc	r2, 3
    2fe2:	1b c0       	rjmp	.+54     	; 0x301a <vfprintf+0x1d2>
    2fe4:	83 2d       	mov	r24, r3
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	48 16       	cp	r4, r24
    2fea:	59 06       	cpc	r5, r25
    2fec:	b0 f4       	brcc	.+44     	; 0x301a <vfprintf+0x1d2>
    2fee:	b7 01       	movw	r22, r14
    2ff0:	80 e2       	ldi	r24, 0x20	; 32
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    2ff8:	3a 94       	dec	r3
    2ffa:	f4 cf       	rjmp	.-24     	; 0x2fe4 <vfprintf+0x19c>
    2ffc:	f5 01       	movw	r30, r10
    2ffe:	27 fc       	sbrc	r2, 7
    3000:	85 91       	lpm	r24, Z+
    3002:	27 fe       	sbrs	r2, 7
    3004:	81 91       	ld	r24, Z+
    3006:	5f 01       	movw	r10, r30
    3008:	b7 01       	movw	r22, r14
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    3010:	31 10       	cpse	r3, r1
    3012:	3a 94       	dec	r3
    3014:	f1 e0       	ldi	r31, 0x01	; 1
    3016:	4f 1a       	sub	r4, r31
    3018:	51 08       	sbc	r5, r1
    301a:	41 14       	cp	r4, r1
    301c:	51 04       	cpc	r5, r1
    301e:	71 f7       	brne	.-36     	; 0x2ffc <vfprintf+0x1b4>
    3020:	e5 c0       	rjmp	.+458    	; 0x31ec <vfprintf+0x3a4>
    3022:	84 36       	cpi	r24, 0x64	; 100
    3024:	11 f0       	breq	.+4      	; 0x302a <vfprintf+0x1e2>
    3026:	89 36       	cpi	r24, 0x69	; 105
    3028:	39 f5       	brne	.+78     	; 0x3078 <vfprintf+0x230>
    302a:	f8 01       	movw	r30, r16
    302c:	27 ff       	sbrs	r18, 7
    302e:	07 c0       	rjmp	.+14     	; 0x303e <vfprintf+0x1f6>
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	0c 5f       	subi	r16, 0xFC	; 252
    303a:	1f 4f       	sbci	r17, 0xFF	; 255
    303c:	08 c0       	rjmp	.+16     	; 0x304e <vfprintf+0x206>
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	88 27       	eor	r24, r24
    3044:	77 fd       	sbrc	r23, 7
    3046:	80 95       	com	r24
    3048:	98 2f       	mov	r25, r24
    304a:	0e 5f       	subi	r16, 0xFE	; 254
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	2f 76       	andi	r18, 0x6F	; 111
    3050:	b2 2e       	mov	r11, r18
    3052:	97 ff       	sbrs	r25, 7
    3054:	09 c0       	rjmp	.+18     	; 0x3068 <vfprintf+0x220>
    3056:	90 95       	com	r25
    3058:	80 95       	com	r24
    305a:	70 95       	com	r23
    305c:	61 95       	neg	r22
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	8f 4f       	sbci	r24, 0xFF	; 255
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	20 68       	ori	r18, 0x80	; 128
    3066:	b2 2e       	mov	r11, r18
    3068:	2a e0       	ldi	r18, 0x0A	; 10
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	a4 01       	movw	r20, r8
    306e:	0e 94 96 19 	call	0x332c	; 0x332c <__ultoa_invert>
    3072:	a8 2e       	mov	r10, r24
    3074:	a8 18       	sub	r10, r8
    3076:	44 c0       	rjmp	.+136    	; 0x3100 <vfprintf+0x2b8>
    3078:	85 37       	cpi	r24, 0x75	; 117
    307a:	29 f4       	brne	.+10     	; 0x3086 <vfprintf+0x23e>
    307c:	2f 7e       	andi	r18, 0xEF	; 239
    307e:	b2 2e       	mov	r11, r18
    3080:	2a e0       	ldi	r18, 0x0A	; 10
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	25 c0       	rjmp	.+74     	; 0x30d0 <vfprintf+0x288>
    3086:	f2 2f       	mov	r31, r18
    3088:	f9 7f       	andi	r31, 0xF9	; 249
    308a:	bf 2e       	mov	r11, r31
    308c:	8f 36       	cpi	r24, 0x6F	; 111
    308e:	c1 f0       	breq	.+48     	; 0x30c0 <vfprintf+0x278>
    3090:	18 f4       	brcc	.+6      	; 0x3098 <vfprintf+0x250>
    3092:	88 35       	cpi	r24, 0x58	; 88
    3094:	79 f0       	breq	.+30     	; 0x30b4 <vfprintf+0x26c>
    3096:	b4 c0       	rjmp	.+360    	; 0x3200 <vfprintf+0x3b8>
    3098:	80 37       	cpi	r24, 0x70	; 112
    309a:	19 f0       	breq	.+6      	; 0x30a2 <vfprintf+0x25a>
    309c:	88 37       	cpi	r24, 0x78	; 120
    309e:	21 f0       	breq	.+8      	; 0x30a8 <vfprintf+0x260>
    30a0:	af c0       	rjmp	.+350    	; 0x3200 <vfprintf+0x3b8>
    30a2:	2f 2f       	mov	r18, r31
    30a4:	20 61       	ori	r18, 0x10	; 16
    30a6:	b2 2e       	mov	r11, r18
    30a8:	b4 fe       	sbrs	r11, 4
    30aa:	0d c0       	rjmp	.+26     	; 0x30c6 <vfprintf+0x27e>
    30ac:	8b 2d       	mov	r24, r11
    30ae:	84 60       	ori	r24, 0x04	; 4
    30b0:	b8 2e       	mov	r11, r24
    30b2:	09 c0       	rjmp	.+18     	; 0x30c6 <vfprintf+0x27e>
    30b4:	24 ff       	sbrs	r18, 4
    30b6:	0a c0       	rjmp	.+20     	; 0x30cc <vfprintf+0x284>
    30b8:	9f 2f       	mov	r25, r31
    30ba:	96 60       	ori	r25, 0x06	; 6
    30bc:	b9 2e       	mov	r11, r25
    30be:	06 c0       	rjmp	.+12     	; 0x30cc <vfprintf+0x284>
    30c0:	28 e0       	ldi	r18, 0x08	; 8
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	05 c0       	rjmp	.+10     	; 0x30d0 <vfprintf+0x288>
    30c6:	20 e1       	ldi	r18, 0x10	; 16
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <vfprintf+0x288>
    30cc:	20 e1       	ldi	r18, 0x10	; 16
    30ce:	32 e0       	ldi	r19, 0x02	; 2
    30d0:	f8 01       	movw	r30, r16
    30d2:	b7 fe       	sbrs	r11, 7
    30d4:	07 c0       	rjmp	.+14     	; 0x30e4 <vfprintf+0x29c>
    30d6:	60 81       	ld	r22, Z
    30d8:	71 81       	ldd	r23, Z+1	; 0x01
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	93 81       	ldd	r25, Z+3	; 0x03
    30de:	0c 5f       	subi	r16, 0xFC	; 252
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	06 c0       	rjmp	.+12     	; 0x30f0 <vfprintf+0x2a8>
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	0e 5f       	subi	r16, 0xFE	; 254
    30ee:	1f 4f       	sbci	r17, 0xFF	; 255
    30f0:	a4 01       	movw	r20, r8
    30f2:	0e 94 96 19 	call	0x332c	; 0x332c <__ultoa_invert>
    30f6:	a8 2e       	mov	r10, r24
    30f8:	a8 18       	sub	r10, r8
    30fa:	fb 2d       	mov	r31, r11
    30fc:	ff 77       	andi	r31, 0x7F	; 127
    30fe:	bf 2e       	mov	r11, r31
    3100:	b6 fe       	sbrs	r11, 6
    3102:	0b c0       	rjmp	.+22     	; 0x311a <vfprintf+0x2d2>
    3104:	2b 2d       	mov	r18, r11
    3106:	2e 7f       	andi	r18, 0xFE	; 254
    3108:	a5 14       	cp	r10, r5
    310a:	50 f4       	brcc	.+20     	; 0x3120 <vfprintf+0x2d8>
    310c:	b4 fe       	sbrs	r11, 4
    310e:	0a c0       	rjmp	.+20     	; 0x3124 <vfprintf+0x2dc>
    3110:	b2 fc       	sbrc	r11, 2
    3112:	08 c0       	rjmp	.+16     	; 0x3124 <vfprintf+0x2dc>
    3114:	2b 2d       	mov	r18, r11
    3116:	2e 7e       	andi	r18, 0xEE	; 238
    3118:	05 c0       	rjmp	.+10     	; 0x3124 <vfprintf+0x2dc>
    311a:	7a 2c       	mov	r7, r10
    311c:	2b 2d       	mov	r18, r11
    311e:	03 c0       	rjmp	.+6      	; 0x3126 <vfprintf+0x2de>
    3120:	7a 2c       	mov	r7, r10
    3122:	01 c0       	rjmp	.+2      	; 0x3126 <vfprintf+0x2de>
    3124:	75 2c       	mov	r7, r5
    3126:	24 ff       	sbrs	r18, 4
    3128:	0d c0       	rjmp	.+26     	; 0x3144 <vfprintf+0x2fc>
    312a:	fe 01       	movw	r30, r28
    312c:	ea 0d       	add	r30, r10
    312e:	f1 1d       	adc	r31, r1
    3130:	80 81       	ld	r24, Z
    3132:	80 33       	cpi	r24, 0x30	; 48
    3134:	11 f4       	brne	.+4      	; 0x313a <vfprintf+0x2f2>
    3136:	29 7e       	andi	r18, 0xE9	; 233
    3138:	09 c0       	rjmp	.+18     	; 0x314c <vfprintf+0x304>
    313a:	22 ff       	sbrs	r18, 2
    313c:	06 c0       	rjmp	.+12     	; 0x314a <vfprintf+0x302>
    313e:	73 94       	inc	r7
    3140:	73 94       	inc	r7
    3142:	04 c0       	rjmp	.+8      	; 0x314c <vfprintf+0x304>
    3144:	82 2f       	mov	r24, r18
    3146:	86 78       	andi	r24, 0x86	; 134
    3148:	09 f0       	breq	.+2      	; 0x314c <vfprintf+0x304>
    314a:	73 94       	inc	r7
    314c:	23 fd       	sbrc	r18, 3
    314e:	13 c0       	rjmp	.+38     	; 0x3176 <vfprintf+0x32e>
    3150:	20 ff       	sbrs	r18, 0
    3152:	06 c0       	rjmp	.+12     	; 0x3160 <vfprintf+0x318>
    3154:	5a 2c       	mov	r5, r10
    3156:	73 14       	cp	r7, r3
    3158:	18 f4       	brcc	.+6      	; 0x3160 <vfprintf+0x318>
    315a:	53 0c       	add	r5, r3
    315c:	57 18       	sub	r5, r7
    315e:	73 2c       	mov	r7, r3
    3160:	73 14       	cp	r7, r3
    3162:	68 f4       	brcc	.+26     	; 0x317e <vfprintf+0x336>
    3164:	b7 01       	movw	r22, r14
    3166:	80 e2       	ldi	r24, 0x20	; 32
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	2c 87       	std	Y+12, r18	; 0x0c
    316c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    3170:	73 94       	inc	r7
    3172:	2c 85       	ldd	r18, Y+12	; 0x0c
    3174:	f5 cf       	rjmp	.-22     	; 0x3160 <vfprintf+0x318>
    3176:	73 14       	cp	r7, r3
    3178:	10 f4       	brcc	.+4      	; 0x317e <vfprintf+0x336>
    317a:	37 18       	sub	r3, r7
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <vfprintf+0x338>
    317e:	31 2c       	mov	r3, r1
    3180:	24 ff       	sbrs	r18, 4
    3182:	12 c0       	rjmp	.+36     	; 0x31a8 <vfprintf+0x360>
    3184:	b7 01       	movw	r22, r14
    3186:	80 e3       	ldi	r24, 0x30	; 48
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	2c 87       	std	Y+12, r18	; 0x0c
    318c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    3190:	2c 85       	ldd	r18, Y+12	; 0x0c
    3192:	22 ff       	sbrs	r18, 2
    3194:	17 c0       	rjmp	.+46     	; 0x31c4 <vfprintf+0x37c>
    3196:	21 ff       	sbrs	r18, 1
    3198:	03 c0       	rjmp	.+6      	; 0x31a0 <vfprintf+0x358>
    319a:	88 e5       	ldi	r24, 0x58	; 88
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <vfprintf+0x35c>
    31a0:	88 e7       	ldi	r24, 0x78	; 120
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	b7 01       	movw	r22, r14
    31a6:	0c c0       	rjmp	.+24     	; 0x31c0 <vfprintf+0x378>
    31a8:	82 2f       	mov	r24, r18
    31aa:	86 78       	andi	r24, 0x86	; 134
    31ac:	59 f0       	breq	.+22     	; 0x31c4 <vfprintf+0x37c>
    31ae:	21 fd       	sbrc	r18, 1
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <vfprintf+0x36e>
    31b2:	80 e2       	ldi	r24, 0x20	; 32
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <vfprintf+0x370>
    31b6:	8b e2       	ldi	r24, 0x2B	; 43
    31b8:	27 fd       	sbrc	r18, 7
    31ba:	8d e2       	ldi	r24, 0x2D	; 45
    31bc:	b7 01       	movw	r22, r14
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    31c4:	a5 14       	cp	r10, r5
    31c6:	38 f4       	brcc	.+14     	; 0x31d6 <vfprintf+0x38e>
    31c8:	b7 01       	movw	r22, r14
    31ca:	80 e3       	ldi	r24, 0x30	; 48
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    31d2:	5a 94       	dec	r5
    31d4:	f7 cf       	rjmp	.-18     	; 0x31c4 <vfprintf+0x37c>
    31d6:	aa 94       	dec	r10
    31d8:	f4 01       	movw	r30, r8
    31da:	ea 0d       	add	r30, r10
    31dc:	f1 1d       	adc	r31, r1
    31de:	80 81       	ld	r24, Z
    31e0:	b7 01       	movw	r22, r14
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    31e8:	a1 10       	cpse	r10, r1
    31ea:	f5 cf       	rjmp	.-22     	; 0x31d6 <vfprintf+0x38e>
    31ec:	33 20       	and	r3, r3
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <vfprintf+0x3aa>
    31f0:	51 ce       	rjmp	.-862    	; 0x2e94 <vfprintf+0x4c>
    31f2:	b7 01       	movw	r22, r14
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 64 19 	call	0x32c8	; 0x32c8 <fputc>
    31fc:	3a 94       	dec	r3
    31fe:	f6 cf       	rjmp	.-20     	; 0x31ec <vfprintf+0x3a4>
    3200:	f7 01       	movw	r30, r14
    3202:	86 81       	ldd	r24, Z+6	; 0x06
    3204:	97 81       	ldd	r25, Z+7	; 0x07
    3206:	02 c0       	rjmp	.+4      	; 0x320c <vfprintf+0x3c4>
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	9f ef       	ldi	r25, 0xFF	; 255
    320c:	2c 96       	adiw	r28, 0x0c	; 12
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	bf 90       	pop	r11
    322a:	af 90       	pop	r10
    322c:	9f 90       	pop	r9
    322e:	8f 90       	pop	r8
    3230:	7f 90       	pop	r7
    3232:	6f 90       	pop	r6
    3234:	5f 90       	pop	r5
    3236:	4f 90       	pop	r4
    3238:	3f 90       	pop	r3
    323a:	2f 90       	pop	r2
    323c:	08 95       	ret

0000323e <__eerd_block_m1284p>:
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22

00003242 <__eerd_blraw_m1284p>:
    3242:	fc 01       	movw	r30, r24
    3244:	f9 99       	sbic	0x1f, 1	; 31
    3246:	fe cf       	rjmp	.-4      	; 0x3244 <__eerd_blraw_m1284p+0x2>
    3248:	06 c0       	rjmp	.+12     	; 0x3256 <__eerd_blraw_m1284p+0x14>
    324a:	f2 bd       	out	0x22, r31	; 34
    324c:	e1 bd       	out	0x21, r30	; 33
    324e:	f8 9a       	sbi	0x1f, 0	; 31
    3250:	31 96       	adiw	r30, 0x01	; 1
    3252:	00 b4       	in	r0, 0x20	; 32
    3254:	0d 92       	st	X+, r0
    3256:	41 50       	subi	r20, 0x01	; 1
    3258:	50 40       	sbci	r21, 0x00	; 0
    325a:	b8 f7       	brcc	.-18     	; 0x324a <__eerd_blraw_m1284p+0x8>
    325c:	08 95       	ret

0000325e <__eerd_byte_m1284p>:
    325e:	f9 99       	sbic	0x1f, 1	; 31
    3260:	fe cf       	rjmp	.-4      	; 0x325e <__eerd_byte_m1284p>
    3262:	92 bd       	out	0x22, r25	; 34
    3264:	81 bd       	out	0x21, r24	; 33
    3266:	f8 9a       	sbi	0x1f, 0	; 31
    3268:	99 27       	eor	r25, r25
    326a:	80 b5       	in	r24, 0x20	; 32
    326c:	08 95       	ret

0000326e <__eerd_dword_m1284p>:
    326e:	a6 e1       	ldi	r26, 0x16	; 22
    3270:	b0 e0       	ldi	r27, 0x00	; 0
    3272:	44 e0       	ldi	r20, 0x04	; 4
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__eerd_blraw_m1284p>

0000327a <__eewr_byte_m1284p>:
    327a:	26 2f       	mov	r18, r22

0000327c <__eewr_r18_m1284p>:
    327c:	f9 99       	sbic	0x1f, 1	; 31
    327e:	fe cf       	rjmp	.-4      	; 0x327c <__eewr_r18_m1284p>
    3280:	1f ba       	out	0x1f, r1	; 31
    3282:	92 bd       	out	0x22, r25	; 34
    3284:	81 bd       	out	0x21, r24	; 33
    3286:	20 bd       	out	0x20, r18	; 32
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	fa 9a       	sbi	0x1f, 2	; 31
    328e:	f9 9a       	sbi	0x1f, 1	; 31
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	08 95       	ret

00003296 <__ctype_isfalse>:
    3296:	99 27       	eor	r25, r25
    3298:	88 27       	eor	r24, r24

0000329a <__ctype_istrue>:
    329a:	08 95       	ret

0000329c <strnlen_P>:
    329c:	fc 01       	movw	r30, r24
    329e:	05 90       	lpm	r0, Z+
    32a0:	61 50       	subi	r22, 0x01	; 1
    32a2:	70 40       	sbci	r23, 0x00	; 0
    32a4:	01 10       	cpse	r0, r1
    32a6:	d8 f7       	brcc	.-10     	; 0x329e <strnlen_P+0x2>
    32a8:	80 95       	com	r24
    32aa:	90 95       	com	r25
    32ac:	8e 0f       	add	r24, r30
    32ae:	9f 1f       	adc	r25, r31
    32b0:	08 95       	ret

000032b2 <strnlen>:
    32b2:	fc 01       	movw	r30, r24
    32b4:	61 50       	subi	r22, 0x01	; 1
    32b6:	70 40       	sbci	r23, 0x00	; 0
    32b8:	01 90       	ld	r0, Z+
    32ba:	01 10       	cpse	r0, r1
    32bc:	d8 f7       	brcc	.-10     	; 0x32b4 <strnlen+0x2>
    32be:	80 95       	com	r24
    32c0:	90 95       	com	r25
    32c2:	8e 0f       	add	r24, r30
    32c4:	9f 1f       	adc	r25, r31
    32c6:	08 95       	ret

000032c8 <fputc>:
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	18 2f       	mov	r17, r24
    32d2:	09 2f       	mov	r16, r25
    32d4:	eb 01       	movw	r28, r22
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	81 fd       	sbrc	r24, 1
    32da:	03 c0       	rjmp	.+6      	; 0x32e2 <fputc+0x1a>
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	9f ef       	ldi	r25, 0xFF	; 255
    32e0:	20 c0       	rjmp	.+64     	; 0x3322 <fputc+0x5a>
    32e2:	82 ff       	sbrs	r24, 2
    32e4:	10 c0       	rjmp	.+32     	; 0x3306 <fputc+0x3e>
    32e6:	4e 81       	ldd	r20, Y+6	; 0x06
    32e8:	5f 81       	ldd	r21, Y+7	; 0x07
    32ea:	2c 81       	ldd	r18, Y+4	; 0x04
    32ec:	3d 81       	ldd	r19, Y+5	; 0x05
    32ee:	42 17       	cp	r20, r18
    32f0:	53 07       	cpc	r21, r19
    32f2:	7c f4       	brge	.+30     	; 0x3312 <fputc+0x4a>
    32f4:	e8 81       	ld	r30, Y
    32f6:	f9 81       	ldd	r31, Y+1	; 0x01
    32f8:	9f 01       	movw	r18, r30
    32fa:	2f 5f       	subi	r18, 0xFF	; 255
    32fc:	3f 4f       	sbci	r19, 0xFF	; 255
    32fe:	39 83       	std	Y+1, r19	; 0x01
    3300:	28 83       	st	Y, r18
    3302:	10 83       	st	Z, r17
    3304:	06 c0       	rjmp	.+12     	; 0x3312 <fputc+0x4a>
    3306:	e8 85       	ldd	r30, Y+8	; 0x08
    3308:	f9 85       	ldd	r31, Y+9	; 0x09
    330a:	81 2f       	mov	r24, r17
    330c:	09 95       	icall
    330e:	89 2b       	or	r24, r25
    3310:	29 f7       	brne	.-54     	; 0x32dc <fputc+0x14>
    3312:	2e 81       	ldd	r18, Y+6	; 0x06
    3314:	3f 81       	ldd	r19, Y+7	; 0x07
    3316:	2f 5f       	subi	r18, 0xFF	; 255
    3318:	3f 4f       	sbci	r19, 0xFF	; 255
    331a:	3f 83       	std	Y+7, r19	; 0x07
    331c:	2e 83       	std	Y+6, r18	; 0x06
    331e:	81 2f       	mov	r24, r17
    3320:	90 2f       	mov	r25, r16
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	08 95       	ret

0000332c <__ultoa_invert>:
    332c:	fa 01       	movw	r30, r20
    332e:	aa 27       	eor	r26, r26
    3330:	28 30       	cpi	r18, 0x08	; 8
    3332:	51 f1       	breq	.+84     	; 0x3388 <__ultoa_invert+0x5c>
    3334:	20 31       	cpi	r18, 0x10	; 16
    3336:	81 f1       	breq	.+96     	; 0x3398 <__ultoa_invert+0x6c>
    3338:	e8 94       	clt
    333a:	6f 93       	push	r22
    333c:	6e 7f       	andi	r22, 0xFE	; 254
    333e:	6e 5f       	subi	r22, 0xFE	; 254
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	8f 4f       	sbci	r24, 0xFF	; 255
    3344:	9f 4f       	sbci	r25, 0xFF	; 255
    3346:	af 4f       	sbci	r26, 0xFF	; 255
    3348:	b1 e0       	ldi	r27, 0x01	; 1
    334a:	3e d0       	rcall	.+124    	; 0x33c8 <__ultoa_invert+0x9c>
    334c:	b4 e0       	ldi	r27, 0x04	; 4
    334e:	3c d0       	rcall	.+120    	; 0x33c8 <__ultoa_invert+0x9c>
    3350:	67 0f       	add	r22, r23
    3352:	78 1f       	adc	r23, r24
    3354:	89 1f       	adc	r24, r25
    3356:	9a 1f       	adc	r25, r26
    3358:	a1 1d       	adc	r26, r1
    335a:	68 0f       	add	r22, r24
    335c:	79 1f       	adc	r23, r25
    335e:	8a 1f       	adc	r24, r26
    3360:	91 1d       	adc	r25, r1
    3362:	a1 1d       	adc	r26, r1
    3364:	6a 0f       	add	r22, r26
    3366:	71 1d       	adc	r23, r1
    3368:	81 1d       	adc	r24, r1
    336a:	91 1d       	adc	r25, r1
    336c:	a1 1d       	adc	r26, r1
    336e:	20 d0       	rcall	.+64     	; 0x33b0 <__ultoa_invert+0x84>
    3370:	09 f4       	brne	.+2      	; 0x3374 <__ultoa_invert+0x48>
    3372:	68 94       	set
    3374:	3f 91       	pop	r19
    3376:	2a e0       	ldi	r18, 0x0A	; 10
    3378:	26 9f       	mul	r18, r22
    337a:	11 24       	eor	r1, r1
    337c:	30 19       	sub	r19, r0
    337e:	30 5d       	subi	r19, 0xD0	; 208
    3380:	31 93       	st	Z+, r19
    3382:	de f6       	brtc	.-74     	; 0x333a <__ultoa_invert+0xe>
    3384:	cf 01       	movw	r24, r30
    3386:	08 95       	ret
    3388:	46 2f       	mov	r20, r22
    338a:	47 70       	andi	r20, 0x07	; 7
    338c:	40 5d       	subi	r20, 0xD0	; 208
    338e:	41 93       	st	Z+, r20
    3390:	b3 e0       	ldi	r27, 0x03	; 3
    3392:	0f d0       	rcall	.+30     	; 0x33b2 <__ultoa_invert+0x86>
    3394:	c9 f7       	brne	.-14     	; 0x3388 <__ultoa_invert+0x5c>
    3396:	f6 cf       	rjmp	.-20     	; 0x3384 <__ultoa_invert+0x58>
    3398:	46 2f       	mov	r20, r22
    339a:	4f 70       	andi	r20, 0x0F	; 15
    339c:	40 5d       	subi	r20, 0xD0	; 208
    339e:	4a 33       	cpi	r20, 0x3A	; 58
    33a0:	18 f0       	brcs	.+6      	; 0x33a8 <__ultoa_invert+0x7c>
    33a2:	49 5d       	subi	r20, 0xD9	; 217
    33a4:	31 fd       	sbrc	r19, 1
    33a6:	40 52       	subi	r20, 0x20	; 32
    33a8:	41 93       	st	Z+, r20
    33aa:	02 d0       	rcall	.+4      	; 0x33b0 <__ultoa_invert+0x84>
    33ac:	a9 f7       	brne	.-22     	; 0x3398 <__ultoa_invert+0x6c>
    33ae:	ea cf       	rjmp	.-44     	; 0x3384 <__ultoa_invert+0x58>
    33b0:	b4 e0       	ldi	r27, 0x04	; 4
    33b2:	a6 95       	lsr	r26
    33b4:	97 95       	ror	r25
    33b6:	87 95       	ror	r24
    33b8:	77 95       	ror	r23
    33ba:	67 95       	ror	r22
    33bc:	ba 95       	dec	r27
    33be:	c9 f7       	brne	.-14     	; 0x33b2 <__ultoa_invert+0x86>
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	61 05       	cpc	r22, r1
    33c4:	71 05       	cpc	r23, r1
    33c6:	08 95       	ret
    33c8:	9b 01       	movw	r18, r22
    33ca:	ac 01       	movw	r20, r24
    33cc:	0a 2e       	mov	r0, r26
    33ce:	06 94       	lsr	r0
    33d0:	57 95       	ror	r21
    33d2:	47 95       	ror	r20
    33d4:	37 95       	ror	r19
    33d6:	27 95       	ror	r18
    33d8:	ba 95       	dec	r27
    33da:	c9 f7       	brne	.-14     	; 0x33ce <__ultoa_invert+0xa2>
    33dc:	62 0f       	add	r22, r18
    33de:	73 1f       	adc	r23, r19
    33e0:	84 1f       	adc	r24, r20
    33e2:	95 1f       	adc	r25, r21
    33e4:	a0 1d       	adc	r26, r0
    33e6:	08 95       	ret

000033e8 <__muluhisi3>:
    33e8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__umulhisi3>
    33ec:	a5 9f       	mul	r26, r21
    33ee:	90 0d       	add	r25, r0
    33f0:	b4 9f       	mul	r27, r20
    33f2:	90 0d       	add	r25, r0
    33f4:	a4 9f       	mul	r26, r20
    33f6:	80 0d       	add	r24, r0
    33f8:	91 1d       	adc	r25, r1
    33fa:	11 24       	eor	r1, r1
    33fc:	08 95       	ret

000033fe <__umulhisi3>:
    33fe:	a2 9f       	mul	r26, r18
    3400:	b0 01       	movw	r22, r0
    3402:	b3 9f       	mul	r27, r19
    3404:	c0 01       	movw	r24, r0
    3406:	a3 9f       	mul	r26, r19
    3408:	70 0d       	add	r23, r0
    340a:	81 1d       	adc	r24, r1
    340c:	11 24       	eor	r1, r1
    340e:	91 1d       	adc	r25, r1
    3410:	b2 9f       	mul	r27, r18
    3412:	70 0d       	add	r23, r0
    3414:	81 1d       	adc	r24, r1
    3416:	11 24       	eor	r1, r1
    3418:	91 1d       	adc	r25, r1
    341a:	08 95       	ret

0000341c <_exit>:
    341c:	f8 94       	cli

0000341e <__stop_program>:
    341e:	ff cf       	rjmp	.-2      	; 0x341e <__stop_program>
