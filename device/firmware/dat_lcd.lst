
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002aa  00800100  000038d2  00003966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  008003aa  008003aa  00003c10  2**0
                  ALLOC
  3 .stab         0000c834  00000000  00000000  00003c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002cd5  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00013119  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_20>
      54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_28>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	3c 04       	cpc	r3, r12
      8e:	46 04       	cpc	r4, r6
      90:	53 04       	cpc	r5, r3
      92:	62 04       	cpc	r6, r2
      94:	71 04       	cpc	r7, r1
      96:	82 04       	cpc	r8, r2
      98:	8e 04       	cpc	r8, r14
      9a:	9a 04       	cpc	r9, r10
      9c:	a6 04       	cpc	r10, r6
      9e:	ff 04       	cpc	r15, r15
      a0:	02 05       	cpc	r16, r2
      a2:	05 05       	cpc	r16, r5
      a4:	08 05       	cpc	r16, r8
      a6:	0b 05       	cpc	r16, r11
      a8:	0e 05       	cpc	r16, r14
      aa:	11 05       	cpc	r17, r1
      ac:	14 05       	cpc	r17, r4
      ae:	17 05       	cpc	r17, r7
      b0:	1a 05       	cpc	r17, r10
      b2:	1d 05       	cpc	r17, r13
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 05       	cpc	r19, r15
      e2:	a8 4c       	sbci	r26, 0xC8	; 200
      e4:	cd b2       	in	r12, 0x1d	; 29
      e6:	d4 4e       	sbci	r29, 0xE4	; 228
      e8:	b9 38       	cpi	r27, 0x89	; 137
      ea:	36 a9       	ldd	r19, Z+54	; 0x36
      ec:	02 0c       	add	r0, r2
      ee:	50 b9       	out	0x00, r21	; 0
      f0:	91 86       	std	Z+9, r9	; 0x09
      f2:	88 08       	sbc	r8, r8
      f4:	3c a6       	std	Y+44, r3	; 0x2c
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	2a be       	out	0x3a, r2	; 58
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 08       	sbc	r3, r15
     100:	00 00       	nop
     102:	00 be       	out	0x30, r0	; 48
     104:	92 24       	eor	r9, r2
     106:	49 12       	cpse	r4, r25
     108:	3e ab       	std	Y+54, r19	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	cd cc       	rjmp	.-1638   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     110:	cc 4c       	sbci	r28, 0xCC	; 204
     112:	3e 00       	.word	0x003e	; ????
     114:	00 00       	nop
     116:	80 be       	out	0x30, r8	; 48
     118:	ab aa       	std	Y+51, r10	; 0x33
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	00 bf       	out	0x30, r16	; 48
     122:	00 00       	nop
     124:	00 80       	ld	r0, Z
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	08 41       	sbci	r16, 0x18	; 24
     12e:	78 d3       	rcall	.+1776   	; 0x820 <print_gps_data+0x2c>
     130:	bb 43       	sbci	r27, 0x3B	; 59
     132:	87 d1       	rcall	.+782    	; 0x442 <database_load+0x7c>
     134:	13 3d       	cpi	r17, 0xD3	; 211
     136:	19 0e       	add	r1, r25
     138:	3c c3       	rjmp	.+1656   	; 0x7b2 <print_eeprom_station_contents+0x30>
     13a:	bd 42       	sbci	r27, 0x2D	; 45
     13c:	82 ad       	ldd	r24, Z+58	; 0x3a
     13e:	2b 3e       	cpi	r18, 0xEB	; 235
     140:	68 ec       	ldi	r22, 0xC8	; 200
     142:	82 76       	andi	r24, 0x62	; 98
     144:	be d9       	rcall	.-3204   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     146:	8f e1       	ldi	r24, 0x1F	; 31
     148:	a9 3e       	cpi	r26, 0xE9	; 233
     14a:	4c 80       	ldd	r4, Y+4	; 0x04
     14c:	ef ff       	.word	0xffef	; ????
     14e:	be 01       	movw	r22, r28
     150:	c4 ff       	sbrs	r28, 4
     152:	7f 3f       	cpi	r23, 0xFF	; 255
     154:	00 00       	nop
     156:	00 00       	nop
     158:	00 07       	cpc	r16, r16
     15a:	63 42       	sbci	r22, 0x23	; 35
     15c:	36 b7       	in	r19, 0x36	; 54
     15e:	9b d8       	rcall	.-3786   	; 0xfffff296 <__eeprom_end+0xff7ef296>
     160:	a7 1a       	sub	r10, r23
     162:	39 68       	ori	r19, 0x89	; 137
     164:	56 18       	sub	r5, r6
     166:	ae ba       	out	0x1e, r10	; 30
     168:	ab 55       	subi	r26, 0x5B	; 91
     16a:	8c 1d       	adc	r24, r12
     16c:	3c b7       	in	r19, 0x3c	; 60
     16e:	cc 57       	subi	r28, 0x7C	; 124
     170:	63 bd       	out	0x23, r22	; 35
     172:	6d ed       	ldi	r22, 0xDD	; 221
     174:	fd 75       	andi	r31, 0x5D	; 93
     176:	3e f6       	brtc	.-114    	; 0x106 <__SREG__+0xc7>
     178:	17 72       	andi	r17, 0x27	; 39
     17a:	31 bf       	out	0x31, r19	; 49
     17c:	00 00       	nop
     17e:	00 80       	ld	r0, Z
     180:	3f 4e       	sbci	r19, 0xEF	; 239

00000181 <pstr_nan>:
     181:	4e 41 4e                                            NAN

00000184 <pstr_inity>:
     184:	49 4e 49 54 59                                      INITY

00000189 <pstr_inf>:
     189:	49 4e 46                                            INF

0000018c <pwr_m10>:
     18c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     19c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a4 <pwr_p10>:
     1a4:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b4:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e4       	ldi	r29, 0x40	; 64
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e2 ed       	ldi	r30, 0xD2	; 210
     1d0:	f8 e3       	ldi	r31, 0x38	; 56
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	aa 3a       	cpi	r26, 0xAA	; 170
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	14 e0       	ldi	r17, 0x04	; 4
     1e4:	aa ea       	ldi	r26, 0xAA	; 170
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a7 3b       	cpi	r26, 0xB7	; 183
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 11 10 	call	0x2022	; 0x2022 <main>
     1f6:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     1fe:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
     208:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
     20c:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     210:	e9 ec       	ldi	r30, 0xC9	; 201
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	88 6d       	ori	r24, 0xD8	; 216
     218:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     21a:	e1 ec       	ldi	r30, 0xC1	; 193
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 6d       	ori	r24, 0xD8	; 216
     222:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     224:	e8 ec       	ldi	r30, 0xC8	; 200
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
     22e:	e0 ec       	ldi	r30, 0xC0	; 192
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	82 60       	ori	r24, 0x02	; 2
     236:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     238:	ea ec       	ldi	r30, 0xCA	; 202
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8e 60       	ori	r24, 0x0E	; 14
     240:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     242:	e2 ec       	ldi	r30, 0xC2	; 194
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	86 60       	ori	r24, 0x06	; 6
     24a:	80 83       	st	Z, r24
     24c:	08 95       	ret

0000024e <disable_gps>:

}

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	87 72       	andi	r24, 0x27	; 39
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <__vector_20>:
        rxWritePos = 0;
    }
}

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	0b b6       	in	r0, 0x3b	; 59
     266:	0f 92       	push	r0
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
     280:	80 91 02 04 	lds	r24, 0x0402
     284:	90 91 03 04 	lds	r25, 0x0403
     288:	81 35       	cpi	r24, 0x51	; 81
     28a:	91 05       	cpc	r25, r1
     28c:	74 f0       	brlt	.+28     	; 0x2aa <__vector_20+0x50>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=0; i<80; i++)
            gps_rxBuffer[i]='\0';
     292:	fc 01       	movw	r30, r24
     294:	ee 54       	subi	r30, 0x4E	; 78
     296:	fc 4f       	sbci	r31, 0xFC	; 252
     298:	10 82       	st	Z, r1
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
    {
        for (i=0; i<80; i++)
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	80 35       	cpi	r24, 0x50	; 80
     29e:	91 05       	cpc	r25, r1
     2a0:	c1 f7       	brne	.-16     	; 0x292 <__vector_20+0x38>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 0; 
     2a2:	10 92 03 04 	sts	0x0403, r1
     2a6:	10 92 02 04 	sts	0x0402, r1
    }

    //Read value out of the UART buffer
    gps_rxBuffer[gps_rxCount] = UDR0;
     2aa:	e0 91 02 04 	lds	r30, 0x0402
     2ae:	f0 91 03 04 	lds	r31, 0x0403
     2b2:	80 91 c6 00 	lds	r24, 0x00C6
     2b6:	ee 54       	subi	r30, 0x4E	; 78
     2b8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ba:	80 83       	st	Z, r24

    gps_rxCount ++;
     2bc:	80 91 02 04 	lds	r24, 0x0402
     2c0:	90 91 03 04 	lds	r25, 0x0403
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 03 04 	sts	0x0403, r25
     2ca:	80 93 02 04 	sts	0x0402, r24

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
     2ce:	e0 91 02 04 	lds	r30, 0x0402
     2d2:	f0 91 03 04 	lds	r31, 0x0403
     2d6:	ef 54       	subi	r30, 0x4F	; 79
     2d8:	fc 4f       	sbci	r31, 0xFC	; 252
     2da:	80 81       	ld	r24, Z
     2dc:	84 32       	cpi	r24, 0x24	; 36
     2de:	99 f4       	brne	.+38     	; 0x306 <__vector_20+0xac>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=1; i<80; i++)
            gps_rxBuffer[i]='\0'; 
     2e4:	fc 01       	movw	r30, r24
     2e6:	ee 54       	subi	r30, 0x4E	; 78
     2e8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ea:	10 82       	st	Z, r1
    gps_rxCount ++;

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
    {
        for (i=1; i<80; i++)
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	80 35       	cpi	r24, 0x50	; 80
     2f0:	91 05       	cpc	r25, r1
     2f2:	c1 f7       	brne	.-16     	; 0x2e4 <__vector_20+0x8a>
            gps_rxBuffer[i]='\0'; 

        gps_rxBuffer[0] = '$';
     2f4:	84 e2       	ldi	r24, 0x24	; 36
     2f6:	80 93 b2 03 	sts	0x03B2, r24
        gps_rxCount = 1; 
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 03 04 	sts	0x0403, r25
     302:	80 93 02 04 	sts	0x0402, r24
    }

    //carriage return ----> parse the string and update the gps_data fields
    if ((gps_rxBuffer[gps_rxCount-1]=='\r')) {
     306:	e0 91 02 04 	lds	r30, 0x0402
     30a:	f0 91 03 04 	lds	r31, 0x0403
     30e:	ef 54       	subi	r30, 0x4F	; 79
     310:	fc 4f       	sbci	r31, 0xFC	; 252
     312:	80 81       	ld	r24, Z
     314:	8d 30       	cpi	r24, 0x0D	; 13
     316:	61 f5       	brne	.+88     	; 0x370 <__vector_20+0x116>
        if (tag_check(gps_rxBuffer))
     318:	82 eb       	ldi	r24, 0xB2	; 178
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 90 0b 	call	0x1720	; 0x1720 <tag_check>
     320:	89 2b       	or	r24, r25
     322:	31 f1       	breq	.+76     	; 0x370 <__vector_20+0x116>
        {
            disable_gps();
     324:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>
            
            //strip off the rxBuffer carriage return and replace with ,
            gps_rxBuffer[gps_rxCount-1] = ',';
     328:	e0 91 02 04 	lds	r30, 0x0402
     32c:	f0 91 03 04 	lds	r31, 0x0403
     330:	ef 54       	subi	r30, 0x4F	; 79
     332:	fc 4f       	sbci	r31, 0xFC	; 252
     334:	8c e2       	ldi	r24, 0x2C	; 44
     336:	80 83       	st	Z, r24

            //update the application gps_data fields
            parse_nmea(gps_rxBuffer, gps_data);
     338:	67 e9       	ldi	r22, 0x97	; 151
     33a:	74 e0       	ldi	r23, 0x04	; 4
     33c:	82 eb       	ldi	r24, 0xB2	; 178
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <parse_nmea>

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);
     344:	60 91 15 04 	lds	r22, 0x0415
     348:	70 91 16 04 	lds	r23, 0x0416
     34c:	87 e9       	ldi	r24, 0x97	; 151
     34e:	94 e0       	ldi	r25, 0x04	; 4
     350:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <update_user_gps_data>

            //clear the rxBuffer
            for (i=0; i<80; i++)
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
                gps_rxBuffer[i]='\0';
     358:	fc 01       	movw	r30, r24
     35a:	ee 54       	subi	r30, 0x4E	; 78
     35c:	fc 4f       	sbci	r31, 0xFC	; 252
     35e:	10 82       	st	Z, r1

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);

            //clear the rxBuffer
            for (i=0; i<80; i++)
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	80 35       	cpi	r24, 0x50	; 80
     364:	91 05       	cpc	r25, r1
     366:	c1 f7       	brne	.-16     	; 0x358 <__vector_20+0xfe>
                gps_rxBuffer[i]='\0';
            gps_rxCount = 0;
     368:	10 92 03 04 	sts	0x0403, r1
     36c:	10 92 02 04 	sts	0x0402, r1
        }
    }
}
     370:	ff 91       	pop	r31
     372:	ef 91       	pop	r30
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	0b be       	out	0x3b, r0	; 59
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <enable_gps>:
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     396:	e1 ec       	ldi	r30, 0xC1	; 193
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	88 6d       	ori	r24, 0xD8	; 216
     39e:	80 83       	st	Z, r24
     3a0:	08 95       	ret

000003a2 <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	84 b9       	out	0x04, r24	; 4
    cli();
     3a6:	f8 94       	cli
    //Init usart
    InitUSART();
     3a8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     3ac:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     3ae:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b2:	2f e3       	ldi	r18, 0x3F	; 63
     3b4:	8d e0       	ldi	r24, 0x0D	; 13
     3b6:	93 e0       	ldi	r25, 0x03	; 3
     3b8:	21 50       	subi	r18, 0x01	; 1
     3ba:	80 40       	sbci	r24, 0x00	; 0
     3bc:	90 40       	sbci	r25, 0x00	; 0
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <prepare_device+0x16>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <prepare_device+0x20>
     3c2:	00 00       	nop
     3c4:	08 95       	ret

000003c6 <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 07 10 	call	0x200e	; 0x200e <my_eeprom_read_int>

    if (num_stations==255)
     3da:	8f 3f       	cpi	r24, 0xFF	; 255
     3dc:	91 05       	cpc	r25, r1
     3de:	29 f0       	breq	.+10     	; 0x3ea <database_load+0x24>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3e0:	90 93 0e 04 	sts	0x040E, r25
     3e4:	80 93 0d 04 	sts	0x040D, r24
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <database_load+0x2c>

    if (num_stations==255)
        num_stations = 0;
     3ea:	10 92 0e 04 	sts	0x040E, r1
     3ee:	10 92 0d 04 	sts	0x040D, r1
     3f2:	2f e9       	ldi	r18, 0x9F	; 159
     3f4:	46 e8       	ldi	r20, 0x86	; 134
     3f6:	51 e0       	ldi	r21, 0x01	; 1
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	40 40       	sbci	r20, 0x00	; 0
     3fc:	50 40       	sbci	r21, 0x00	; 0
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <database_load+0x32>
     400:	00 c0       	rjmp	.+0      	; 0x402 <database_load+0x3c>
     402:	00 00       	nop

    _delay_ms(500);
    lcd_init();
     404:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("importing ");
     408:	83 e1       	ldi	r24, 0x13	; 19
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    string_write_int(num_stations,3);
     410:	63 e0       	ldi	r22, 0x03	; 3
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 91 0d 04 	lds	r24, 0x040D
     418:	90 91 0e 04 	lds	r25, 0x040E
     41c:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
    string_write("\nstations...");
     420:	8e e1       	ldi	r24, 0x1E	; 30
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     428:	80 91 0d 04 	lds	r24, 0x040D
     42c:	90 91 0e 04 	lds	r25, 0x040E
     430:	2c e1       	ldi	r18, 0x1C	; 28
     432:	fc 01       	movw	r30, r24
     434:	2e 9f       	mul	r18, r30
     436:	c0 01       	movw	r24, r0
     438:	2f 9f       	mul	r18, r31
     43a:	90 0d       	add	r25, r0
     43c:	11 24       	eor	r1, r1
     43e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <malloc>
     442:	90 93 14 04 	sts	0x0414, r25
     446:	80 93 13 04 	sts	0x0413, r24

    if (all_stations == NULL)
     44a:	89 2b       	or	r24, r25
     44c:	29 f0       	breq	.+10     	; 0x458 <database_load+0x92>
     44e:	c0 e0       	ldi	r28, 0x00	; 0
     450:	d0 e0       	ldi	r29, 0x00	; 0
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	0c c0       	rjmp	.+24     	; 0x470 <database_load+0xaa>
    {
            lcd_init();
     458:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
            string_write("bad malloc");
     45c:	8b e2       	ldi	r24, 0x2B	; 43
     45e:	91 e0       	ldi	r25, 0x01	; 1
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    if (all_stations == NULL)
    {
            lcd_init();
            string_write("bad malloc");
     46c:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <string_write>
            return;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     470:	80 91 0d 04 	lds	r24, 0x040D
     474:	90 91 0e 04 	lds	r25, 0x040E
     478:	08 17       	cp	r16, r24
     47a:	19 07       	cpc	r17, r25
     47c:	0c f0       	brlt	.+2      	; 0x480 <database_load+0xba>
     47e:	5c c0       	rjmp	.+184    	; 0x538 <database_load+0x172>
     480:	be 01       	movw	r22, r28
     482:	6f 5f       	subi	r22, 0xFF	; 255
     484:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     486:	80 91 13 04 	lds	r24, 0x0413
     48a:	90 91 14 04 	lds	r25, 0x0414
     48e:	48 e0       	ldi	r20, 0x08	; 8
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	8c 0f       	add	r24, r28
     494:	9d 1f       	adc	r25, r29
     496:	0e 94 0f 10 	call	0x201e	; 0x201e <my_eeprom_read_string>
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     49a:	e0 90 13 04 	lds	r14, 0x0413
     49e:	f0 90 14 04 	lds	r15, 0x0414
     4a2:	ec 0e       	add	r14, r28
     4a4:	fd 1e       	adc	r15, r29
     4a6:	ce 01       	movw	r24, r28
     4a8:	09 96       	adiw	r24, 0x09	; 9
     4aa:	0e 94 0d 10 	call	0x201a	; 0x201a <my_eeprom_read_float>
     4ae:	f7 01       	movw	r30, r14
     4b0:	60 87       	std	Z+8, r22	; 0x08
     4b2:	71 87       	std	Z+9, r23	; 0x09
     4b4:	82 87       	std	Z+10, r24	; 0x0a
     4b6:	93 87       	std	Z+11, r25	; 0x0b
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     4b8:	e0 90 13 04 	lds	r14, 0x0413
     4bc:	f0 90 14 04 	lds	r15, 0x0414
     4c0:	ec 0e       	add	r14, r28
     4c2:	fd 1e       	adc	r15, r29
     4c4:	ce 01       	movw	r24, r28
     4c6:	0d 96       	adiw	r24, 0x0d	; 13
     4c8:	0e 94 0d 10 	call	0x201a	; 0x201a <my_eeprom_read_float>
     4cc:	f7 01       	movw	r30, r14
     4ce:	64 87       	std	Z+12, r22	; 0x0c
     4d0:	75 87       	std	Z+13, r23	; 0x0d
     4d2:	86 87       	std	Z+14, r24	; 0x0e
     4d4:	97 87       	std	Z+15, r25	; 0x0f
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     4d6:	e0 90 13 04 	lds	r14, 0x0413
     4da:	f0 90 14 04 	lds	r15, 0x0414
     4de:	ec 0e       	add	r14, r28
     4e0:	fd 1e       	adc	r15, r29
     4e2:	ce 01       	movw	r24, r28
     4e4:	41 96       	adiw	r24, 0x11	; 17
     4e6:	0e 94 0d 10 	call	0x201a	; 0x201a <my_eeprom_read_float>
     4ea:	f7 01       	movw	r30, r14
     4ec:	60 8b       	std	Z+16, r22	; 0x10
     4ee:	71 8b       	std	Z+17, r23	; 0x11
     4f0:	82 8b       	std	Z+18, r24	; 0x12
     4f2:	93 8b       	std	Z+19, r25	; 0x13
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     4f4:	e0 90 13 04 	lds	r14, 0x0413
     4f8:	f0 90 14 04 	lds	r15, 0x0414
     4fc:	ec 0e       	add	r14, r28
     4fe:	fd 1e       	adc	r15, r29
     500:	ce 01       	movw	r24, r28
     502:	45 96       	adiw	r24, 0x15	; 21
     504:	0e 94 0d 10 	call	0x201a	; 0x201a <my_eeprom_read_float>
     508:	f7 01       	movw	r30, r14
     50a:	64 8b       	std	Z+20, r22	; 0x14
     50c:	75 8b       	std	Z+21, r23	; 0x15
     50e:	86 8b       	std	Z+22, r24	; 0x16
     510:	97 8b       	std	Z+23, r25	; 0x17
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     512:	e0 90 13 04 	lds	r14, 0x0413
     516:	f0 90 14 04 	lds	r15, 0x0414
     51a:	ec 0e       	add	r14, r28
     51c:	fd 1e       	adc	r15, r29
     51e:	ce 01       	movw	r24, r28
     520:	49 96       	adiw	r24, 0x19	; 25
     522:	0e 94 0d 10 	call	0x201a	; 0x201a <my_eeprom_read_float>
     526:	f7 01       	movw	r30, r14
     528:	60 8f       	std	Z+24, r22	; 0x18
     52a:	71 8f       	std	Z+25, r23	; 0x19
     52c:	82 8f       	std	Z+26, r24	; 0x1a
     52e:	93 8f       	std	Z+27, r25	; 0x1b
            string_write("bad malloc");
            return;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     530:	0f 5f       	subi	r16, 0xFF	; 255
     532:	1f 4f       	sbci	r17, 0xFF	; 255
     534:	6c 96       	adiw	r28, 0x1c	; 28
     536:	9c cf       	rjmp	.-200    	; 0x470 <database_load+0xaa>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <database_free>:

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     546:	10 92 0e 04 	sts	0x040E, r1
     54a:	10 92 0d 04 	sts	0x040D, r1

    free(all_stations);
     54e:	80 91 13 04 	lds	r24, 0x0413
     552:	90 91 14 04 	lds	r25, 0x0414
     556:	0e 94 f5 16 	call	0x2dea	; 0x2dea <free>
    all_stations = NULL;
     55a:	10 92 14 04 	sts	0x0414, r1
     55e:	10 92 13 04 	sts	0x0413, r1
     562:	08 95       	ret

00000564 <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     564:	80 91 08 04 	lds	r24, 0x0408
     568:	90 91 01 01 	lds	r25, 0x0101
     56c:	89 13       	cpse	r24, r25
     56e:	0c c0       	rjmp	.+24     	; 0x588 <detectSerialStart+0x24>
     570:	20 91 09 04 	lds	r18, 0x0409
     574:	28 13       	cpse	r18, r24
     576:	08 c0       	rjmp	.+16     	; 0x588 <detectSerialStart+0x24>
     578:	30 91 0a 04 	lds	r19, 0x040A
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	32 17       	cp	r19, r18
     582:	21 f0       	breq	.+8      	; 0x58c <detectSerialStart+0x28>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	08 95       	ret
        return 1;
    else
        return 0;
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
}
     58c:	08 95       	ret

0000058e <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	0f 92       	push	r0
     59c:	2f 93       	push	r18
     59e:	3f 93       	push	r19
     5a0:	4f 93       	push	r20
     5a2:	5f 93       	push	r21
     5a4:	6f 93       	push	r22
     5a6:	7f 93       	push	r23
     5a8:	8f 93       	push	r24
     5aa:	9f 93       	push	r25
     5ac:	af 93       	push	r26
     5ae:	bf 93       	push	r27
     5b0:	ef 93       	push	r30
     5b2:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     5b4:	80 91 09 04 	lds	r24, 0x0409
     5b8:	80 93 0a 04 	sts	0x040A, r24
    serial_history[1] = serial_history[0];
     5bc:	80 91 08 04 	lds	r24, 0x0408
     5c0:	80 93 09 04 	sts	0x0409, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     5c4:	80 91 ce 00 	lds	r24, 0x00CE
     5c8:	80 93 08 04 	sts	0x0408, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     5cc:	80 91 b0 03 	lds	r24, 0x03B0
     5d0:	90 91 b1 03 	lds	r25, 0x03B1
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	69 f4       	brne	.+26     	; 0x5f2 <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     5d8:	e0 91 0b 04 	lds	r30, 0x040B
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 91 08 04 	lds	r24, 0x0408
     5e2:	e9 5e       	subi	r30, 0xE9	; 233
     5e4:	fb 4f       	sbci	r31, 0xFB	; 251
     5e6:	80 83       	st	Z, r24
        rxWritePos++;
     5e8:	80 91 0b 04 	lds	r24, 0x040B
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	80 93 0b 04 	sts	0x040B, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     5f2:	0e 94 b2 02 	call	0x564	; 0x564 <detectSerialStart>
     5f6:	89 2b       	or	r24, r25
     5f8:	31 f0       	breq	.+12     	; 0x606 <__vector_28+0x78>
        op_mode = MD_UPDATE;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 b1 03 	sts	0x03B1, r25
     602:	80 93 b0 03 	sts	0x03B0, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     606:	80 91 0b 04 	lds	r24, 0x040B
     60a:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     60c:	10 92 0b 04 	sts	0x040B, r1
    }
}
     610:	ff 91       	pop	r31
     612:	ef 91       	pop	r30
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	0f 90       	pop	r0
     62a:	0b be       	out	0x3b, r0	; 59
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti

00000636 <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     636:	80 91 08 04 	lds	r24, 0x0408
     63a:	90 91 00 01 	lds	r25, 0x0100
     63e:	89 13       	cpse	r24, r25
     640:	0c c0       	rjmp	.+24     	; 0x65a <detectSerialEnd+0x24>
     642:	20 91 09 04 	lds	r18, 0x0409
     646:	28 13       	cpse	r18, r24
     648:	08 c0       	rjmp	.+16     	; 0x65a <detectSerialEnd+0x24>
     64a:	30 91 0a 04 	lds	r19, 0x040A
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	32 17       	cp	r19, r18
     654:	21 f0       	breq	.+8      	; 0x65e <detectSerialEnd+0x28>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret
        return 1;
    else
        return 0;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
}
     65e:	08 95       	ret

00000660 <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     660:	e0 91 0c 04 	lds	r30, 0x040C
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	e9 5e       	subi	r30, 0xE9	; 233
     668:	fb 4f       	sbci	r31, 0xFB	; 251
     66a:	80 81       	ld	r24, Z
     
    rxReadPos++;
     66c:	90 91 0c 04 	lds	r25, 0x040C
     670:	9f 5f       	subi	r25, 0xFF	; 255
     672:	90 93 0c 04 	sts	0x040C, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     676:	90 91 0c 04 	lds	r25, 0x040C
     67a:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     67c:	10 92 0c 04 	sts	0x040C, r1
    }
    
    return ret;
}
     680:	08 95       	ret

00000682 <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     682:	90 91 0c 04 	lds	r25, 0x040C
     686:	80 91 0b 04 	lds	r24, 0x040B
     68a:	98 17       	cp	r25, r24
     68c:	39 f0       	breq	.+14     	; 0x69c <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     68e:	e0 91 0c 04 	lds	r30, 0x040C
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	e9 5e       	subi	r30, 0xE9	; 233
     696:	fb 4f       	sbci	r31, 0xFB	; 251
     698:	80 81       	ld	r24, Z
     69a:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     69c:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     69e:	08 95       	ret

000006a0 <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     6a6:	10 92 b1 03 	sts	0x03B1, r1
     6aa:	10 92 b0 03 	sts	0x03B0, r1
    updating = 0;
     6ae:	10 92 ad 03 	sts	0x03AD, r1
     6b2:	10 92 ac 03 	sts	0x03AC, r1
    serial_timer = 0;
     6b6:	10 92 04 04 	sts	0x0404, r1
     6ba:	10 92 05 04 	sts	0x0405, r1
     6be:	10 92 06 04 	sts	0x0406, r1
     6c2:	10 92 07 04 	sts	0x0407, r1

    //import the new database
    lcd_init();
     6c6:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>

    if (flag==FL_SUCCESS)
     6ca:	20 97       	sbiw	r28, 0x00	; 0
     6cc:	19 f4       	brne	.+6      	; 0x6d4 <terminate_serial+0x34>
        string_write("reading\ndatabase ...");
     6ce:	86 e3       	ldi	r24, 0x36	; 54
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     6d4:	8b e4       	ldi	r24, 0x4B	; 75
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>

    database_load();
     6dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <database_load>
     6e0:	2f e3       	ldi	r18, 0x3F	; 63
     6e2:	8d e0       	ldi	r24, 0x0D	; 13
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	21 50       	subi	r18, 0x01	; 1
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <terminate_serial+0x46>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <terminate_serial+0x50>
     6f0:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
     6f2:	21 97       	sbiw	r28, 0x01	; 1
     6f4:	21 f4       	brne	.+8      	; 0x6fe <terminate_serial+0x5e>
        string_write("\nupdate failed\n");
     6f6:	8e e5       	ldi	r24, 0x5E	; 94
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     6fe:	2f e9       	ldi	r18, 0x9F	; 159
     700:	86 e8       	ldi	r24, 0x86	; 134
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	21 50       	subi	r18, 0x01	; 1
     706:	80 40       	sbci	r24, 0x00	; 0
     708:	90 40       	sbci	r25, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <terminate_serial+0x64>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <terminate_serial+0x6e>
     70e:	00 00       	nop

    _delay_ms(500);
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	8c 01       	movw	r16, r24
     720:	eb 01       	movw	r28, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     722:	6f 3f       	cpi	r22, 0xFF	; 255
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	78 07       	cpc	r23, r24
     728:	59 f4       	brne	.+22     	; 0x740 <print_eeprom_contents+0x2a>
        end_addr = 1+num_stations*STATION_BLOCKSIZE;
     72a:	80 91 0d 04 	lds	r24, 0x040D
     72e:	90 91 0e 04 	lds	r25, 0x040E
     732:	2c e1       	ldi	r18, 0x1C	; 28
     734:	28 9f       	mul	r18, r24
     736:	e0 01       	movw	r28, r0
     738:	29 9f       	mul	r18, r25
     73a:	d0 0d       	add	r29, r0
     73c:	11 24       	eor	r1, r1
     73e:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
     740:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     744:	0c 17       	cp	r16, r28
     746:	1d 07       	cpc	r17, r29
     748:	bc f4       	brge	.+46     	; 0x778 <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     74a:	80 91 b0 03 	lds	r24, 0x03B0
     74e:	90 91 b1 03 	lds	r25, 0x03B1
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	89 f0       	breq	.+34     	; 0x778 <print_eeprom_contents+0x62>
        one_byte = my_eeprom_read_char(i);
     756:	c8 01       	movw	r24, r16
     758:	0e 94 0b 10 	call	0x2016	; 0x2016 <my_eeprom_read_char>
        if (one_byte == '\0')
     75c:	81 11       	cpse	r24, r1
     75e:	01 c0       	rjmp	.+2      	; 0x762 <print_eeprom_contents+0x4c>
            one_byte = '?';
     760:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     762:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
     766:	87 ea       	ldi	r24, 0xA7	; 167
     768:	91 e6       	ldi	r25, 0x61	; 97
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <print_eeprom_contents+0x54>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <print_eeprom_contents+0x5a>
     770:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     772:	0f 5f       	subi	r16, 0xFF	; 255
     774:	1f 4f       	sbci	r17, 0xFF	; 255
     776:	e6 cf       	rjmp	.-52     	; 0x744 <print_eeprom_contents+0x2e>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret

00000782 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	d0 e0       	ldi	r29, 0x00	; 0
     78c:	1c e1       	ldi	r17, 0x1C	; 28
     78e:	20 91 0d 04 	lds	r18, 0x040D
     792:	30 91 0e 04 	lds	r19, 0x040E
     796:	12 9f       	mul	r17, r18
     798:	c0 01       	movw	r24, r0
     79a:	13 9f       	mul	r17, r19
     79c:	90 0d       	add	r25, r0
     79e:	11 24       	eor	r1, r1
     7a0:	c8 17       	cp	r28, r24
     7a2:	d9 07       	cpc	r29, r25
     7a4:	b4 f4       	brge	.+44     	; 0x7d2 <print_eeprom_station_contents+0x50>
    {
        if (op_mode==MD_UPDATE) return;
     7a6:	80 91 b0 03 	lds	r24, 0x03B0
     7aa:	90 91 b1 03 	lds	r25, 0x03B1
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	81 f0       	breq	.+32     	; 0x7d2 <print_eeprom_station_contents+0x50>
        one_byte = my_eeprom_read_char(start+i);
     7b2:	21 96       	adiw	r28, 0x01	; 1
     7b4:	ce 01       	movw	r24, r28
     7b6:	0e 94 0b 10 	call	0x2016	; 0x2016 <my_eeprom_read_char>
        if (one_byte == '\0')
     7ba:	81 11       	cpse	r24, r1
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <print_eeprom_station_contents+0x3e>
            one_byte = '?';
     7be:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     7c0:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
     7c4:	87 ea       	ldi	r24, 0xA7	; 167
     7c6:	91 e6       	ldi	r25, 0x61	; 97
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <print_eeprom_station_contents+0x46>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <print_eeprom_station_contents+0x4c>
     7ce:	00 00       	nop
     7d0:	de cf       	rjmp	.-68     	; 0x78e <print_eeprom_station_contents+0xc>
        _delay_ms(100);
    }
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <wait_for_update>:
    }
}

void wait_for_update(void)
{
    lcd_init();
     7da:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("update required\n...feed me...");
     7de:	8e e6       	ldi	r24, 0x6E	; 110
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     7e6:	80 91 b0 03 	lds	r24, 0x03B0
     7ea:	90 91 b1 03 	lds	r25, 0x03B1
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	d1 f7       	brne	.-12     	; 0x7e6 <wait_for_update+0xc>
    }
}
     7f2:	08 95       	ret

000007f4 <print_gps_data>:
    _delay_ms(2000);
}

//print the formatted data stored in the UserData struct to the screen
void print_gps_data(void)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     7f8:	80 91 b0 03 	lds	r24, 0x03B0
     7fc:	90 91 b1 03 	lds	r25, 0x03B1
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	09 f4       	brne	.+2      	; 0x806 <print_gps_data+0x12>
     804:	c4 c0       	rjmp	.+392    	; 0x98e <print_gps_data+0x19a>
    lcd_init();
     806:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("Latest\nGPS Data:");
     80a:	8c e8       	ldi	r24, 0x8C	; 140
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     812:	2f e3       	ldi	r18, 0x3F	; 63
     814:	8d e0       	ldi	r24, 0x0D	; 13
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	21 50       	subi	r18, 0x01	; 1
     81a:	80 40       	sbci	r24, 0x00	; 0
     81c:	90 40       	sbci	r25, 0x00	; 0
     81e:	e1 f7       	brne	.-8      	; 0x818 <print_gps_data+0x24>
     820:	00 c0       	rjmp	.+0      	; 0x822 <print_gps_data+0x2e>
     822:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     824:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
     828:	c0 e0       	ldi	r28, 0x00	; 0
     82a:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     82c:	20 97       	sbiw	r28, 0x00	; 0
     82e:	69 f0       	breq	.+26     	; 0x84a <print_gps_data+0x56>
            string_write("\n");
     830:	8e e0       	ldi	r24, 0x0E	; 14
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>

        switch (i)
     838:	fe 01       	movw	r30, r28
     83a:	32 97       	sbiw	r30, 0x02	; 2
     83c:	e9 30       	cpi	r30, 0x09	; 9
     83e:	f1 05       	cpc	r31, r1
     840:	78 f4       	brcc	.+30     	; 0x860 <print_gps_data+0x6c>
     842:	ea 5b       	subi	r30, 0xBA	; 186
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
     84a:	8d e9       	ldi	r24, 0x9D	; 157
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_numchars(user->msg_type,8);
     852:	68 e0       	ldi	r22, 0x08	; 8
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 91 15 04 	lds	r24, 0x0415
     85a:	90 91 16 04 	lds	r25, 0x0416
     85e:	81 c0       	rjmp	.+258    	; 0x962 <print_gps_data+0x16e>
            break;

            case 1:
                string_write("Time: ");
     860:	87 ea       	ldi	r24, 0xA7	; 167
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_numchars(user->utc_time,8);
     868:	80 91 15 04 	lds	r24, 0x0415
     86c:	90 91 16 04 	lds	r25, 0x0416
     870:	68 e0       	ldi	r22, 0x08	; 8
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	08 96       	adiw	r24, 0x08	; 8
     876:	75 c0       	rjmp	.+234    	; 0x962 <print_gps_data+0x16e>
            break;

            case 2:
                string_write("NRW: ");
     878:	8e ea       	ldi	r24, 0xAE	; 174
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                char_write(user->nrw);
     880:	e0 91 15 04 	lds	r30, 0x0415
     884:	f0 91 16 04 	lds	r31, 0x0416
     888:	80 89       	ldd	r24, Z+16	; 0x10
     88a:	5d c0       	rjmp	.+186    	; 0x946 <print_gps_data+0x152>
            break;

            case 3:
                string_write("Lat: ");
     88c:	84 eb       	ldi	r24, 0xB4	; 180
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_float(user->lat,4);
     894:	e0 91 15 04 	lds	r30, 0x0415
     898:	f0 91 16 04 	lds	r31, 0x0416
     89c:	61 89       	ldd	r22, Z+17	; 0x11
     89e:	72 89       	ldd	r23, Z+18	; 0x12
     8a0:	83 89       	ldd	r24, Z+19	; 0x13
     8a2:	94 89       	ldd	r25, Z+20	; 0x14
     8a4:	0c c0       	rjmp	.+24     	; 0x8be <print_gps_data+0xca>
            break;

            case 4:
                string_write("Lon: ");
     8a6:	8a eb       	ldi	r24, 0xBA	; 186
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_float(user->lon,4);
     8ae:	e0 91 15 04 	lds	r30, 0x0415
     8b2:	f0 91 16 04 	lds	r31, 0x0416
     8b6:	65 89       	ldd	r22, Z+21	; 0x15
     8b8:	76 89       	ldd	r23, Z+22	; 0x16
     8ba:	87 89       	ldd	r24, Z+23	; 0x17
     8bc:	90 8d       	ldd	r25, Z+24	; 0x18
     8be:	44 e0       	ldi	r20, 0x04	; 4
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	1d c0       	rjmp	.+58     	; 0x8fe <print_gps_data+0x10a>
            break;

            case 5:
                string_write("Speed: ");
     8c4:	80 ec       	ldi	r24, 0xC0	; 192
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_float(user->speed,1);
     8cc:	e0 91 15 04 	lds	r30, 0x0415
     8d0:	f0 91 16 04 	lds	r31, 0x0416
     8d4:	61 8d       	ldd	r22, Z+25	; 0x19
     8d6:	72 8d       	ldd	r23, Z+26	; 0x1a
     8d8:	83 8d       	ldd	r24, Z+27	; 0x1b
     8da:	94 8d       	ldd	r25, Z+28	; 0x1c
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	0e c0       	rjmp	.+28     	; 0x8fe <print_gps_data+0x10a>
            break;

            case 6:
                string_write("Course: ");
     8e2:	88 ec       	ldi	r24, 0xC8	; 200
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_float(user->course,3);
     8ea:	e0 91 15 04 	lds	r30, 0x0415
     8ee:	f0 91 16 04 	lds	r31, 0x0416
     8f2:	65 8d       	ldd	r22, Z+29	; 0x1d
     8f4:	76 8d       	ldd	r23, Z+30	; 0x1e
     8f6:	87 8d       	ldd	r24, Z+31	; 0x1f
     8f8:	90 a1       	ldd	r25, Z+32	; 0x20
     8fa:	43 e0       	ldi	r20, 0x03	; 3
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     902:	31 c0       	rjmp	.+98     	; 0x966 <print_gps_data+0x172>
            break;

            case 7:
                string_write("Date: ");
     904:	81 ed       	ldi	r24, 0xD1	; 209
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_numchars(user->date,8);
     90c:	80 91 15 04 	lds	r24, 0x0415
     910:	90 91 16 04 	lds	r25, 0x0416
     914:	68 e0       	ldi	r22, 0x08	; 8
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	81 96       	adiw	r24, 0x21	; 33
     91a:	23 c0       	rjmp	.+70     	; 0x962 <print_gps_data+0x16e>
            break;

            case 8:
                string_write("MagVar: ");
     91c:	88 ed       	ldi	r24, 0xD8	; 216
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_numchars(user->mag_var,8);
     924:	80 91 15 04 	lds	r24, 0x0415
     928:	90 91 16 04 	lds	r25, 0x0416
     92c:	68 e0       	ldi	r22, 0x08	; 8
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	89 96       	adiw	r24, 0x29	; 41
     932:	17 c0       	rjmp	.+46     	; 0x962 <print_gps_data+0x16e>
            break;

            case 9:
                string_write("Mode: ");
     934:	81 ee       	ldi	r24, 0xE1	; 225
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                char_write(user->mode);
     93c:	e0 91 15 04 	lds	r30, 0x0415
     940:	f0 91 16 04 	lds	r31, 0x0416
     944:	81 a9       	ldd	r24, Z+49	; 0x31
     946:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
     94a:	0d c0       	rjmp	.+26     	; 0x966 <print_gps_data+0x172>
            break;

            case 10:
                string_write("Checksum: ");
     94c:	88 ee       	ldi	r24, 0xE8	; 232
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_numchars(user->checksum,3);
     954:	80 91 15 04 	lds	r24, 0x0415
     958:	90 91 16 04 	lds	r25, 0x0416
     95c:	63 e0       	ldi	r22, 0x03	; 3
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	c2 96       	adiw	r24, 0x32	; 50
     962:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <string_write_numchars>
     966:	2f e3       	ldi	r18, 0x3F	; 63
     968:	8d e0       	ldi	r24, 0x0D	; 13
     96a:	93 e0       	ldi	r25, 0x03	; 3
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	80 40       	sbci	r24, 0x00	; 0
     970:	90 40       	sbci	r25, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <print_gps_data+0x178>
     974:	00 c0       	rjmp	.+0      	; 0x976 <print_gps_data+0x182>
     976:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
     978:	80 91 b0 03 	lds	r24, 0x03B0
     97c:	90 91 b1 03 	lds	r25, 0x03B1
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	29 f0       	breq	.+10     	; 0x98e <print_gps_data+0x19a>
    lcd_init();
    string_write("Latest\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
     984:	21 96       	adiw	r28, 0x01	; 1
     986:	cb 30       	cpi	r28, 0x0B	; 11
     988:	d1 05       	cpc	r29, r1
     98a:	09 f0       	breq	.+2      	; 0x98e <print_gps_data+0x19a>
     98c:	4f cf       	rjmp	.-354    	; 0x82c <print_gps_data+0x38>
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
    }
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(void)
{
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     99c:	80 91 b0 03 	lds	r24, 0x03B0
     9a0:	90 91 b1 03 	lds	r25, 0x03B1
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <print_raw_gps_data+0x16>
     9a8:	6a c0       	rjmp	.+212    	; 0xa7e <print_raw_gps_data+0xea>
    lcd_init();
     9aa:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("Raw\nGPS Data");
     9ae:	83 ef       	ldi	r24, 0xF3	; 243
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     9b6:	2f e3       	ldi	r18, 0x3F	; 63
     9b8:	8d e0       	ldi	r24, 0x0D	; 13
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	80 40       	sbci	r24, 0x00	; 0
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <print_raw_gps_data+0x28>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <print_raw_gps_data+0x32>
     9c6:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     9c8:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
     9cc:	07 e9       	ldi	r16, 0x97	; 151
     9ce:	14 e0       	ldi	r17, 0x04	; 4
    int i=0;
    for (i=0; i<13; i++)
     9d0:	c0 e0       	ldi	r28, 0x00	; 0
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     9d4:	20 97       	sbiw	r28, 0x00	; 0
     9d6:	69 f0       	breq	.+26     	; 0x9f2 <print_raw_gps_data+0x5e>
            string_write("\n");
     9d8:	8e e0       	ldi	r24, 0x0E	; 14
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>

        switch (i)
     9e0:	fe 01       	movw	r30, r28
     9e2:	32 97       	sbiw	r30, 0x02	; 2
     9e4:	eb 30       	cpi	r30, 0x0B	; 11
     9e6:	f1 05       	cpc	r31, r1
     9e8:	38 f4       	brcc	.+14     	; 0x9f8 <print_raw_gps_data+0x64>
     9ea:	e1 5b       	subi	r30, 0xB1	; 177
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__tablejump2__>
        {
            case 0:
                string_write("Message");
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	23 c0       	rjmp	.+70     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 1:
                string_write("Time");
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	20 c0       	rjmp	.+64     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 2:
                string_write("NRW");
     9fe:	8d e0       	ldi	r24, 0x0D	; 13
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	1d c0       	rjmp	.+58     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 3:
                string_write("Lat");
     a04:	81 e1       	ldi	r24, 0x11	; 17
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	1a c0       	rjmp	.+52     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 4:
                string_write("N/S");
     a0a:	85 e1       	ldi	r24, 0x15	; 21
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	17 c0       	rjmp	.+46     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 5:
                string_write("Lon");
     a10:	89 e1       	ldi	r24, 0x19	; 25
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	14 c0       	rjmp	.+40     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 6:
                string_write("E/W");
     a16:	8d e1       	ldi	r24, 0x1D	; 29
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	11 c0       	rjmp	.+34     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 7:
                string_write("Speed");
     a1c:	81 e2       	ldi	r24, 0x21	; 33
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e c0       	rjmp	.+28     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 8:
                string_write("Course");
     a22:	87 e2       	ldi	r24, 0x27	; 39
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0b c0       	rjmp	.+22     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 9:
                string_write("Date");
     a28:	8e e2       	ldi	r24, 0x2E	; 46
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 10:
                string_write("MagVar");
     a2e:	83 e3       	ldi	r24, 0x33	; 51
     a30:	92 e0       	ldi	r25, 0x02	; 2
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 11:
                string_write("Mode");
     a34:	8a e3       	ldi	r24, 0x3A	; 58
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <print_raw_gps_data+0xaa>
            break;

            case 12:
                string_write("Checksum");
     a3a:	8f e3       	ldi	r24, 0x3F	; 63
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
            break;
        }

        string_write(": ");
     a42:	8e e8       	ldi	r24, 0x8E	; 142
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
        string_write(gps_data[i]);
     a4a:	f8 01       	movw	r30, r16
     a4c:	81 91       	ld	r24, Z+
     a4e:	91 91       	ld	r25, Z+
     a50:	8f 01       	movw	r16, r30
     a52:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     a56:	ff e9       	ldi	r31, 0x9F	; 159
     a58:	26 e8       	ldi	r18, 0x86	; 134
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	f1 50       	subi	r31, 0x01	; 1
     a5e:	20 40       	sbci	r18, 0x00	; 0
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <print_raw_gps_data+0xc8>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <print_raw_gps_data+0xd2>
     a66:	00 00       	nop

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
     a68:	80 91 b0 03 	lds	r24, 0x03B0
     a6c:	90 91 b1 03 	lds	r25, 0x03B1
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	29 f0       	breq	.+10     	; 0xa7e <print_raw_gps_data+0xea>
    lcd_init();
    string_write("Raw\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
     a74:	21 96       	adiw	r28, 0x01	; 1
     a76:	cd 30       	cpi	r28, 0x0D	; 13
     a78:	d1 05       	cpc	r29, r1
     a7a:	09 f0       	breq	.+2      	; 0xa7e <print_raw_gps_data+0xea>
     a7c:	ab cf       	rjmp	.-170    	; 0x9d4 <print_raw_gps_data+0x40>
        string_write(gps_data[i]);

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
    }
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(void)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
    int i;
    lcd_init();
     a8c:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("wiping\nmemory...");
     a90:	88 e4       	ldi	r24, 0x48	; 72
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     a98:	c0 e0       	ldi	r28, 0x00	; 0
     a9a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     a9c:	80 91 b0 03 	lds	r24, 0x03B0
     aa0:	90 91 b1 03 	lds	r25, 0x03B1
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	49 f0       	breq	.+18     	; 0xaba <wipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     aa8:	6f ef       	ldi	r22, 0xFF	; 255
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 96 1b 	call	0x372c	; 0x372c <__eewr_byte_m1284p>
void wipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     ab0:	21 96       	adiw	r28, 0x01	; 1
     ab2:	c1 3f       	cpi	r28, 0xF1	; 241
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	d8 07       	cpc	r29, r24
     ab8:	89 f7       	brne	.-30     	; 0xa9c <wipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     ac8:	2c e1       	ldi	r18, 0x1C	; 28
     aca:	28 9f       	mul	r18, r24
     acc:	80 01       	movw	r16, r0
     ace:	29 9f       	mul	r18, r25
     ad0:	10 0d       	add	r17, r0
     ad2:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     ad4:	c0 e0       	ldi	r28, 0x00	; 0
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     ad8:	e0 91 13 04 	lds	r30, 0x0413
     adc:	f0 91 14 04 	lds	r31, 0x0414
     ae0:	e0 0f       	add	r30, r16
     ae2:	f1 1f       	adc	r31, r17
     ae4:	ec 0f       	add	r30, r28
     ae6:	fd 1f       	adc	r31, r29
     ae8:	80 81       	ld	r24, Z
     aea:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     aee:	21 96       	adiw	r28, 0x01	; 1
     af0:	c8 30       	cpi	r28, 0x08	; 8
     af2:	d1 05       	cpc	r29, r1
     af4:	89 f7       	brne	.-30     	; 0xad8 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <check_database_integrity>:
    _delay_ms(500);
}

//check for database corruption
void check_database_integrity(void)
{
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     b08:	60 91 0d 04 	lds	r22, 0x040D
     b0c:	70 91 0e 04 	lds	r23, 0x040E
     b10:	80 91 13 04 	lds	r24, 0x0413
     b14:	90 91 14 04 	lds	r25, 0x0414
     b18:	c0 e0       	ldi	r28, 0x00	; 0
     b1a:	d0 e0       	ldi	r29, 0x00	; 0
     b1c:	c6 17       	cp	r28, r22
     b1e:	d7 07       	cpc	r29, r23
     b20:	0c f0       	brlt	.+2      	; 0xb24 <check_database_integrity+0x24>
     b22:	6c c0       	rjmp	.+216    	; 0xbfc <check_database_integrity+0xfc>
     b24:	ac 01       	movw	r20, r24
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if (((call[j] < 33)||(call[j] > 126))&&(call[j]!=' '))
     b2a:	8a 01       	movw	r16, r20
     b2c:	4f 5f       	subi	r20, 0xFF	; 255
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	d8 01       	movw	r26, r16
     b32:	ec 91       	ld	r30, X
     b34:	e0 52       	subi	r30, 0x20	; 32
     b36:	ef 35       	cpi	r30, 0x5F	; 95
     b38:	08 f4       	brcc	.+2      	; 0xb3c <check_database_integrity+0x3c>
     b3a:	57 c0       	rjmp	.+174    	; 0xbea <check_database_integrity+0xea>
            {
                database_corrupted = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	90 93 ab 03 	sts	0x03AB, r25
     b44:	80 93 aa 03 	sts	0x03AA, r24
                lcd_init();
     b48:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
                string_write("CORRUPTION\nDETECTED");
     b4c:	89 e5       	ldi	r24, 0x59	; 89
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     b54:	bf e7       	ldi	r27, 0x7F	; 127
     b56:	ea e1       	ldi	r30, 0x1A	; 26
     b58:	f6 e0       	ldi	r31, 0x06	; 6
     b5a:	b1 50       	subi	r27, 0x01	; 1
     b5c:	e0 40       	sbci	r30, 0x00	; 0
     b5e:	f0 40       	sbci	r31, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <check_database_integrity+0x5a>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <check_database_integrity+0x64>
     b64:	00 00       	nop
                _delay_ms(2000);
                lcd_init();
     b66:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
                string_write("tracing\ncorruption...");
     b6a:	8d e6       	ldi	r24, 0x6D	; 109
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     b72:	2f e9       	ldi	r18, 0x9F	; 159
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	21 50       	subi	r18, 0x01	; 1
     b7a:	80 40       	sbci	r24, 0x00	; 0
     b7c:	90 40       	sbci	r25, 0x00	; 0
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <check_database_integrity+0x78>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <check_database_integrity+0x82>
     b82:	00 00       	nop
                _delay_ms(500);
                lcd_init();
     b84:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
                string_write("station #");
     b88:	83 e8       	ldi	r24, 0x83	; 131
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                string_write_int(i+1,3);
     b90:	63 e0       	ldi	r22, 0x03	; 3
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
                string_write(" : ");
     b9c:	8d e8       	ldi	r24, 0x8D	; 141
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
                char_write('\'');
     ba4:	87 e2       	ldi	r24, 0x27	; 39
     ba6:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
                char_write(call[j]);
     baa:	d8 01       	movw	r26, r16
     bac:	8c 91       	ld	r24, X
     bae:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
                char_write('\'');
     bb2:	87 e2       	ldi	r24, 0x27	; 39
     bb4:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
                char_write('\n');
     bb8:	8a e0       	ldi	r24, 0x0A	; 10
     bba:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
     bbe:	bf e7       	ldi	r27, 0x7F	; 127
     bc0:	ea e1       	ldi	r30, 0x1A	; 26
     bc2:	f6 e0       	ldi	r31, 0x06	; 6
     bc4:	b1 50       	subi	r27, 0x01	; 1
     bc6:	e0 40       	sbci	r30, 0x00	; 0
     bc8:	f0 40       	sbci	r31, 0x00	; 0
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <check_database_integrity+0xc4>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <check_database_integrity+0xce>
     bce:	00 00       	nop
                _delay_ms(2000);
                print_callsign(i);
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 60 05 	call	0xac0	; 0xac0 <print_callsign>
     bd6:	2f ef       	ldi	r18, 0xFF	; 255
     bd8:	84 e3       	ldi	r24, 0x34	; 52
     bda:	9c e0       	ldi	r25, 0x0C	; 12
     bdc:	21 50       	subi	r18, 0x01	; 1
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	90 40       	sbci	r25, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <check_database_integrity+0xdc>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <check_database_integrity+0xe6>
     be6:	00 00       	nop
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <check_database_integrity+0xfc>
{
    int i, j;
    for (i=0; i<num_stations; i++)
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     bea:	2f 5f       	subi	r18, 0xFF	; 255
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	28 30       	cpi	r18, 0x08	; 8
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <check_database_integrity+0xf6>
     bf4:	9a cf       	rjmp	.-204    	; 0xb2a <check_database_integrity+0x2a>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     bf6:	21 96       	adiw	r28, 0x01	; 1
     bf8:	4c 96       	adiw	r24, 0x1c	; 28
     bfa:	90 cf       	rjmp	.-224    	; 0xb1c <check_database_integrity+0x1c>
                _delay_ms(4000);
                return;
            }
        }
    }
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	08 95       	ret

00000c06 <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     c0e:	80 91 b0 03 	lds	r24, 0x03B0
     c12:	90 91 b1 03 	lds	r25, 0x03B1
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	09 f4       	brne	.+2      	; 0xc1c <print_all_callsigns+0x16>
     c1a:	4d c0       	rjmp	.+154    	; 0xcb6 <print_all_callsigns+0xb0>
    int i;
    lcd_init();
     c1c:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write_int(num_stations,3);
     c20:	63 e0       	ldi	r22, 0x03	; 3
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 91 0d 04 	lds	r24, 0x040D
     c28:	90 91 0e 04 	lds	r25, 0x040E
     c2c:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
    string_write(" known\nstations");
     c30:	81 e9       	ldi	r24, 0x91	; 145
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     c38:	2f e7       	ldi	r18, 0x7F	; 127
     c3a:	8a e1       	ldi	r24, 0x1A	; 26
     c3c:	96 e0       	ldi	r25, 0x06	; 6
     c3e:	21 50       	subi	r18, 0x01	; 1
     c40:	80 40       	sbci	r24, 0x00	; 0
     c42:	90 40       	sbci	r25, 0x00	; 0
     c44:	e1 f7       	brne	.-8      	; 0xc3e <print_all_callsigns+0x38>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <print_all_callsigns+0x42>
     c48:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     c4a:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("\n");
     c4e:	8e e0       	ldi	r24, 0x0E	; 14
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>

    for (i=0; i<num_stations; i++)
     c56:	c0 e0       	ldi	r28, 0x00	; 0
     c58:	d0 e0       	ldi	r29, 0x00	; 0
     c5a:	80 91 0d 04 	lds	r24, 0x040D
     c5e:	90 91 0e 04 	lds	r25, 0x040E
     c62:	c8 17       	cp	r28, r24
     c64:	d9 07       	cpc	r29, r25
     c66:	3c f5       	brge	.+78     	; 0xcb6 <print_all_callsigns+0xb0>
    {
        if (op_mode==MD_UPDATE) return;
     c68:	80 91 b0 03 	lds	r24, 0x03B0
     c6c:	90 91 b1 03 	lds	r25, 0x03B1
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	09 f1       	breq	.+66     	; 0xcb6 <print_all_callsigns+0xb0>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
     c74:	8e e0       	ldi	r24, 0x0E	; 14
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     c7c:	8e 01       	movw	r16, r28
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	63 e0       	ldi	r22, 0x03	; 3
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	c8 01       	movw	r24, r16
     c88:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
     c8c:	8e e8       	ldi	r24, 0x8E	; 142
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 60 05 	call	0xac0	; 0xac0 <print_callsign>

        if (op_mode==MD_UPDATE) return;
     c9a:	80 91 b0 03 	lds	r24, 0x03B0
     c9e:	90 91 b1 03 	lds	r25, 0x03B1
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <print_all_callsigns+0xb0>
     ca6:	83 e2       	ldi	r24, 0x23	; 35
     ca8:	94 ef       	ldi	r25, 0xF4	; 244
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <print_all_callsigns+0xa4>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <print_all_callsigns+0xaa>
     cb0:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    string_write("\n");

    for (i=0; i<num_stations; i++)
     cb2:	e8 01       	movw	r28, r16
     cb4:	d2 cf       	rjmp	.-92     	; 0xc5a <print_all_callsigns+0x54>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     cca:	63 e0       	ldi	r22, 0x03	; 3
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
     cd4:	8e e8       	ldi	r24, 0x8E	; 142
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     cdc:	c8 01       	movw	r24, r16
     cde:	0e 94 60 05 	call	0xac0	; 0xac0 <print_callsign>
     ce2:	83 e2       	ldi	r24, 0x23	; 35
     ce4:	94 ef       	ldi	r25, 0xF4	; 244
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <print_station+0x26>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <print_station+0x2c>
     cec:	00 00       	nop
     cee:	8e e0       	ldi	r24, 0x0E	; 14
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE)
     cf6:	80 91 b0 03 	lds	r24, 0x03B0
     cfa:	90 91 b1 03 	lds	r25, 0x03B1
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	09 f4       	brne	.+2      	; 0xd04 <print_station+0x44>
     d02:	b1 c0       	rjmp	.+354    	; 0xe66 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     d04:	81 ea       	ldi	r24, 0xA1	; 161
     d06:	92 e0       	ldi	r25, 0x02	; 2
     d08:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     d0c:	8c e1       	ldi	r24, 0x1C	; 28
     d0e:	80 9f       	mul	r24, r16
     d10:	e0 01       	movw	r28, r0
     d12:	81 9f       	mul	r24, r17
     d14:	d0 0d       	add	r29, r0
     d16:	11 24       	eor	r1, r1
     d18:	e0 91 13 04 	lds	r30, 0x0413
     d1c:	f0 91 14 04 	lds	r31, 0x0414
     d20:	ec 0f       	add	r30, r28
     d22:	fd 1f       	adc	r31, r29
     d24:	60 85       	ldd	r22, Z+8	; 0x08
     d26:	71 85       	ldd	r23, Z+9	; 0x09
     d28:	82 85       	ldd	r24, Z+10	; 0x0a
     d2a:	93 85       	ldd	r25, Z+11	; 0x0b
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     d34:	83 e2       	ldi	r24, 0x23	; 35
     d36:	94 ef       	ldi	r25, 0xF4	; 244
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <print_station+0x78>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <print_station+0x7e>
     d3e:	00 00       	nop
     d40:	8e e0       	ldi	r24, 0x0E	; 14
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE)
     d48:	80 91 b0 03 	lds	r24, 0x03B0
     d4c:	90 91 b1 03 	lds	r25, 0x03B1
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	09 f4       	brne	.+2      	; 0xd56 <print_station+0x96>
     d54:	88 c0       	rjmp	.+272    	; 0xe66 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     d56:	88 ea       	ldi	r24, 0xA8	; 168
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     d5e:	e0 91 13 04 	lds	r30, 0x0413
     d62:	f0 91 14 04 	lds	r31, 0x0414
     d66:	ec 0f       	add	r30, r28
     d68:	fd 1f       	adc	r31, r29
     d6a:	64 85       	ldd	r22, Z+12	; 0x0c
     d6c:	75 85       	ldd	r23, Z+13	; 0x0d
     d6e:	86 85       	ldd	r24, Z+14	; 0x0e
     d70:	97 85       	ldd	r25, Z+15	; 0x0f
     d72:	44 e0       	ldi	r20, 0x04	; 4
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     d7a:	83 e2       	ldi	r24, 0x23	; 35
     d7c:	94 ef       	ldi	r25, 0xF4	; 244
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <print_station+0xbe>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <print_station+0xc4>
     d84:	00 00       	nop
     d86:	8e e0       	ldi	r24, 0x0E	; 14
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE)
     d8e:	80 91 b0 03 	lds	r24, 0x03B0
     d92:	90 91 b1 03 	lds	r25, 0x03B1
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	09 f4       	brne	.+2      	; 0xd9c <print_station+0xdc>
     d9a:	65 c0       	rjmp	.+202    	; 0xe66 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     d9c:	8e ea       	ldi	r24, 0xAE	; 174
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     da4:	e0 91 13 04 	lds	r30, 0x0413
     da8:	f0 91 14 04 	lds	r31, 0x0414
     dac:	ec 0f       	add	r30, r28
     dae:	fd 1f       	adc	r31, r29
     db0:	60 89       	ldd	r22, Z+16	; 0x10
     db2:	71 89       	ldd	r23, Z+17	; 0x11
     db4:	82 89       	ldd	r24, Z+18	; 0x12
     db6:	93 89       	ldd	r25, Z+19	; 0x13
     db8:	44 e0       	ldi	r20, 0x04	; 4
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     dc0:	83 e2       	ldi	r24, 0x23	; 35
     dc2:	94 ef       	ldi	r25, 0xF4	; 244
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <print_station+0x104>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <print_station+0x10a>
     dca:	00 00       	nop
     dcc:	8e e0       	ldi	r24, 0x0E	; 14
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE)
     dd4:	80 91 b0 03 	lds	r24, 0x03B0
     dd8:	90 91 b1 03 	lds	r25, 0x03B1
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	09 f4       	brne	.+2      	; 0xde2 <print_station+0x122>
     de0:	42 c0       	rjmp	.+132    	; 0xe66 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     de2:	84 eb       	ldi	r24, 0xB4	; 180
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     dea:	e0 91 13 04 	lds	r30, 0x0413
     dee:	f0 91 14 04 	lds	r31, 0x0414
     df2:	ec 0f       	add	r30, r28
     df4:	fd 1f       	adc	r31, r29
     df6:	64 89       	ldd	r22, Z+20	; 0x14
     df8:	75 89       	ldd	r23, Z+21	; 0x15
     dfa:	86 89       	ldd	r24, Z+22	; 0x16
     dfc:	97 89       	ldd	r25, Z+23	; 0x17
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     e06:	83 e2       	ldi	r24, 0x23	; 35
     e08:	94 ef       	ldi	r25, 0xF4	; 244
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <print_station+0x14a>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <print_station+0x150>
     e10:	00 00       	nop
     e12:	8e e0       	ldi	r24, 0x0E	; 14
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE)
     e1a:	80 91 b0 03 	lds	r24, 0x03B0
     e1e:	90 91 b1 03 	lds	r25, 0x03B1
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	01 f1       	breq	.+64     	; 0xe66 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     e26:	8a eb       	ldi	r24, 0xBA	; 186
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     e2e:	e0 91 13 04 	lds	r30, 0x0413
     e32:	f0 91 14 04 	lds	r31, 0x0414
     e36:	ec 0f       	add	r30, r28
     e38:	fd 1f       	adc	r31, r29
     e3a:	60 8d       	ldd	r22, Z+24	; 0x18
     e3c:	71 8d       	ldd	r23, Z+25	; 0x19
     e3e:	82 8d       	ldd	r24, Z+26	; 0x1a
     e40:	93 8d       	ldd	r25, Z+27	; 0x1b
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     e4a:	83 e2       	ldi	r24, 0x23	; 35
     e4c:	94 ef       	ldi	r25, 0xF4	; 244
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <print_station+0x18e>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <print_station+0x194>
     e54:	00 00       	nop
     e56:	8e e0       	ldi	r24, 0x0E	; 14
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE)
     e5e:	80 91 b0 03 	lds	r24, 0x03B0
     e62:	90 91 b1 03 	lds	r25, 0x03B1
        return;
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     e74:	80 91 b0 03 	lds	r24, 0x03B0
     e78:	90 91 b1 03 	lds	r25, 0x03B1
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	c9 f1       	breq	.+114    	; 0xef2 <print_all_known_stations+0x82>
    int i;
    lcd_init();
     e80:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write_int(num_stations,3);
     e84:	63 e0       	ldi	r22, 0x03	; 3
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	80 91 0d 04 	lds	r24, 0x040D
     e8c:	90 91 0e 04 	lds	r25, 0x040E
     e90:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
    string_write(" known\nstations");
     e94:	81 e9       	ldi	r24, 0x91	; 145
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     e9c:	2f e7       	ldi	r18, 0x7F	; 127
     e9e:	8a e1       	ldi	r24, 0x1A	; 26
     ea0:	96 e0       	ldi	r25, 0x06	; 6
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	90 40       	sbci	r25, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <print_all_known_stations+0x32>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <print_all_known_stations+0x3c>
     eac:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
     eae:	c0 e0       	ldi	r28, 0x00	; 0
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
     eb2:	80 91 0d 04 	lds	r24, 0x040D
     eb6:	90 91 0e 04 	lds	r25, 0x040E
     eba:	c8 17       	cp	r28, r24
     ebc:	d9 07       	cpc	r29, r25
     ebe:	cc f4       	brge	.+50     	; 0xef2 <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
     ec0:	80 91 b0 03 	lds	r24, 0x03B0
     ec4:	90 91 b1 03 	lds	r25, 0x03B1
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	99 f0       	breq	.+38     	; 0xef2 <print_all_known_stations+0x82>

        lcd_init();
     ecc:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
        print_station(i);
     ed0:	ce 01       	movw	r24, r28
     ed2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <print_station>

        if (op_mode==MD_UPDATE) return;
     ed6:	80 91 b0 03 	lds	r24, 0x03B0
     eda:	90 91 b1 03 	lds	r25, 0x03B1
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	41 f0       	breq	.+16     	; 0xef2 <print_all_known_stations+0x82>
     ee2:	8f e4       	ldi	r24, 0x4F	; 79
     ee4:	93 ec       	ldi	r25, 0xC3	; 195
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <print_all_known_stations+0x76>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <print_all_known_stations+0x7c>
     eec:	00 00       	nop
    string_write_int(num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
     eee:	21 96       	adiw	r28, 0x01	; 1
     ef0:	e0 cf       	rjmp	.-64     	; 0xeb2 <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <show_nearest_station>:
        if (op_mode==MD_UPDATE) return;
    }
}

void show_nearest_station(void)
{
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
    if (op_mode==MD_UPDATE) return;
     f00:	80 91 b0 03 	lds	r24, 0x03B0
     f04:	90 91 b1 03 	lds	r25, 0x03B1
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <show_nearest_station+0x16>
     f0c:	6d c0       	rjmp	.+218    	; 0xfe8 <show_nearest_station+0xf0>
    lcd_init();
     f0e:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("Finding Nearest\nStation...");
     f12:	81 ec       	ldi	r24, 0xC1	; 193
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
     f1a:	2f e7       	ldi	r18, 0x7F	; 127
     f1c:	8a e1       	ldi	r24, 0x1A	; 26
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	21 50       	subi	r18, 0x01	; 1
     f22:	80 40       	sbci	r24, 0x00	; 0
     f24:	90 40       	sbci	r25, 0x00	; 0
     f26:	e1 f7       	brne	.-8      	; 0xf20 <show_nearest_station+0x28>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <show_nearest_station+0x32>
     f2a:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     f2c:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    nearest_station = get_nearest_station(all_stations, num_stations, user->lat, user->lon);
     f30:	e0 91 15 04 	lds	r30, 0x0415
     f34:	f0 91 16 04 	lds	r31, 0x0416
     f38:	e5 88       	ldd	r14, Z+21	; 0x15
     f3a:	f6 88       	ldd	r15, Z+22	; 0x16
     f3c:	07 89       	ldd	r16, Z+23	; 0x17
     f3e:	10 8d       	ldd	r17, Z+24	; 0x18
     f40:	21 89       	ldd	r18, Z+17	; 0x11
     f42:	32 89       	ldd	r19, Z+18	; 0x12
     f44:	43 89       	ldd	r20, Z+19	; 0x13
     f46:	54 89       	ldd	r21, Z+20	; 0x14
     f48:	60 91 0d 04 	lds	r22, 0x040D
     f4c:	70 91 0e 04 	lds	r23, 0x040E
     f50:	80 91 13 04 	lds	r24, 0x0413
     f54:	90 91 14 04 	lds	r25, 0x0414
     f58:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <get_nearest_station>
     f5c:	90 93 03 01 	sts	0x0103, r25
     f60:	80 93 02 01 	sts	0x0102, r24
    print_callsign(nearest_station); string_write("\n");
     f64:	0e 94 60 05 	call	0xac0	; 0xac0 <print_callsign>
     f68:	8e e0       	ldi	r24, 0x0E	; 14
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    string_write_float(my_distance_to_station(user, all_stations, nearest_station),1); string_write(" km");
     f70:	40 91 02 01 	lds	r20, 0x0102
     f74:	50 91 03 01 	lds	r21, 0x0103
     f78:	60 91 13 04 	lds	r22, 0x0413
     f7c:	70 91 14 04 	lds	r23, 0x0414
     f80:	80 91 15 04 	lds	r24, 0x0415
     f84:	90 91 16 04 	lds	r25, 0x0416
     f88:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <my_distance_to_station>
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
     f94:	8c ed       	ldi	r24, 0xDC	; 220
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    if (op_mode==MD_UPDATE) return;
     f9c:	80 91 b0 03 	lds	r24, 0x03B0
     fa0:	90 91 b1 03 	lds	r25, 0x03B1
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	01 f1       	breq	.+64     	; 0xfe8 <show_nearest_station+0xf0>
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	84 e3       	ldi	r24, 0x34	; 52
     fac:	9c e0       	ldi	r25, 0x0C	; 12
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	80 40       	sbci	r24, 0x00	; 0
     fb2:	90 40       	sbci	r25, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <show_nearest_station+0xb6>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <show_nearest_station+0xc0>
     fb8:	00 00       	nop
    _delay_ms(4000);

    if (op_mode==MD_UPDATE) return;
     fba:	80 91 b0 03 	lds	r24, 0x03B0
     fbe:	90 91 b1 03 	lds	r25, 0x03B1
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	89 f0       	breq	.+34     	; 0xfe8 <show_nearest_station+0xf0>
    lcd_init();    
     fc6:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    print_station(nearest_station);
     fca:	80 91 02 01 	lds	r24, 0x0102
     fce:	90 91 03 01 	lds	r25, 0x0103
     fd2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <print_station>
     fd6:	2f e7       	ldi	r18, 0x7F	; 127
     fd8:	8a e1       	ldi	r24, 0x1A	; 26
     fda:	96 e0       	ldi	r25, 0x06	; 6
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	80 40       	sbci	r24, 0x00	; 0
     fe0:	90 40       	sbci	r25, 0x00	; 0
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <show_nearest_station+0xe4>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <show_nearest_station+0xee>
     fe6:	00 00       	nop
    _delay_ms(2000);
}
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <test_earth_distance>:
        char_write(all_stations[station_index].callsign[i]);
    }
}

void test_earth_distance(void)
{
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    lcd_init();
    1002:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("Calculating\nEarth Distances");
    1006:	87 e4       	ldi	r24, 0x47	; 71
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    100e:	2f e7       	ldi	r18, 0x7F	; 127
    1010:	8a e1       	ldi	r24, 0x1A	; 26
    1012:	96 e0       	ldi	r25, 0x06	; 6
    1014:	21 50       	subi	r18, 0x01	; 1
    1016:	80 40       	sbci	r24, 0x00	; 0
    1018:	90 40       	sbci	r25, 0x00	; 0
    101a:	e1 f7       	brne	.-8      	; 0x1014 <test_earth_distance+0x22>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <test_earth_distance+0x2c>
    101e:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1020:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("Denver -> NYC:\n");
    1024:	83 e6       	ldi	r24, 0x63	; 99
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    102c:	a1 2c       	mov	r10, r1
    102e:	b1 2c       	mov	r11, r1
    1030:	90 ed       	ldi	r25, 0xD0	; 208
    1032:	c9 2e       	mov	r12, r25
    1034:	92 ec       	ldi	r25, 0xC2	; 194
    1036:	d9 2e       	mov	r13, r25
    1038:	e1 2c       	mov	r14, r1
    103a:	f1 2c       	mov	r15, r1
    103c:	0c e1       	ldi	r16, 0x1C	; 28
    103e:	12 e4       	ldi	r17, 0x42	; 66
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	44 e9       	ldi	r20, 0x94	; 148
    1046:	52 ec       	ldi	r21, 0xC2	; 194
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e2       	ldi	r24, 0x20	; 32
    104e:	92 e4       	ldi	r25, 0x42	; 66
    1050:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    1054:	41 e0       	ldi	r20, 0x01	; 1
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
    105c:	8c ed       	ldi	r24, 0xDC	; 220
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    1064:	2f e1       	ldi	r18, 0x1F	; 31
    1066:	81 ea       	ldi	r24, 0xA1	; 161
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	21 50       	subi	r18, 0x01	; 1
    106c:	80 40       	sbci	r24, 0x00	; 0
    106e:	90 40       	sbci	r25, 0x00	; 0
    1070:	e1 f7       	brne	.-8      	; 0x106a <test_earth_distance+0x78>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <test_earth_distance+0x82>
    1074:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    1076:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("North KC -> KC:\n");
    107a:	83 e7       	ldi	r24, 0x73	; 115
    107c:	93 e0       	ldi	r25, 0x03	; 3
    107e:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    1082:	35 e3       	ldi	r19, 0x35	; 53
    1084:	a3 2e       	mov	r10, r19
    1086:	3e e1       	ldi	r19, 0x1E	; 30
    1088:	b3 2e       	mov	r11, r19
    108a:	3d eb       	ldi	r19, 0xBD	; 189
    108c:	c3 2e       	mov	r12, r19
    108e:	32 ec       	ldi	r19, 0xC2	; 194
    1090:	d3 2e       	mov	r13, r19
    1092:	12 e3       	ldi	r17, 0x32	; 50
    1094:	e1 2e       	mov	r14, r17
    1096:	15 e5       	ldi	r17, 0x55	; 85
    1098:	f1 2e       	mov	r15, r17
    109a:	0c e1       	ldi	r16, 0x1C	; 28
    109c:	12 e4       	ldi	r17, 0x42	; 66
    109e:	22 e4       	ldi	r18, 0x42	; 66
    10a0:	30 e2       	ldi	r19, 0x20	; 32
    10a2:	4d eb       	ldi	r20, 0xBD	; 189
    10a4:	52 ec       	ldi	r21, 0xC2	; 194
    10a6:	65 e2       	ldi	r22, 0x25	; 37
    10a8:	76 e8       	ldi	r23, 0x86	; 134
    10aa:	8c e1       	ldi	r24, 0x1C	; 28
    10ac:	92 e4       	ldi	r25, 0x42	; 66
    10ae:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
    10ba:	8c ed       	ldi	r24, 0xDC	; 220
    10bc:	92 e0       	ldi	r25, 0x02	; 2
    10be:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    10c2:	2f e1       	ldi	r18, 0x1F	; 31
    10c4:	81 ea       	ldi	r24, 0xA1	; 161
    10c6:	97 e0       	ldi	r25, 0x07	; 7
    10c8:	21 50       	subi	r18, 0x01	; 1
    10ca:	80 40       	sbci	r24, 0x00	; 0
    10cc:	90 40       	sbci	r25, 0x00	; 0
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <test_earth_distance+0xd6>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <test_earth_distance+0xe0>
    10d2:	00 00       	nop
    _delay_ms(2500);

    //just for reference, UMaine coords are: 44.900 -68.667
}
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	08 95       	ret

000010e6 <wait_for_gps_lock>:

void wait_for_gps_lock(void)
{
    lcd_init();
    10e6:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    string_write("Waiting For\nGPS Lock...");
    10ea:	84 e8       	ldi	r24, 0x84	; 132
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    10f2:	2f e3       	ldi	r18, 0x3F	; 63
    10f4:	8d e0       	ldi	r24, 0x0D	; 13
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	80 40       	sbci	r24, 0x00	; 0
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <wait_for_gps_lock+0x12>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <wait_for_gps_lock+0x1c>
    1102:	00 00       	nop
    _delay_ms(1000);
    while (!(gps_locked(user)))
    1104:	80 91 15 04 	lds	r24, 0x0415
    1108:	90 91 16 04 	lds	r25, 0x0416
    110c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <gps_locked>
    1110:	89 2b       	or	r24, r25
    1112:	79 f4       	brne	.+30     	; 0x1132 <wait_for_gps_lock+0x4c>
    {
        lcd_init();
    1114:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
        print_gps_data();
    1118:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <print_gps_data>
        if (op_mode==MD_UPDATE) return;
    111c:	80 91 b0 03 	lds	r24, 0x03B0
    1120:	90 91 b1 03 	lds	r25, 0x03B1
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	49 f0       	breq	.+18     	; 0x113a <wait_for_gps_lock+0x54>
    1128:	83 e2       	ldi	r24, 0x23	; 35
    112a:	94 ef       	ldi	r25, 0xF4	; 244
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <wait_for_gps_lock+0x46>
    1130:	e7 cf       	rjmp	.-50     	; 0x1100 <wait_for_gps_lock+0x1a>
        _delay_ms(250);
    }
    lcd_init();
    1132:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    print_gps_data();
    1136:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <print_gps_data>
    113a:	08 95       	ret

0000113c <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
    113c:	12 9a       	sbi	0x02, 2	; 2
    113e:	81 ee       	ldi	r24, 0xE1	; 225
    1140:	94 e0       	ldi	r25, 0x04	; 4
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <datarw+0x6>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <datarw+0xc>
    1148:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
    114a:	12 98       	cbi	0x02, 2	; 2
    114c:	08 95       	ret

0000114e <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
    114e:	10 92 10 04 	sts	0x0410, r1
    1152:	10 92 0f 04 	sts	0x040F, r1
    line_num = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	90 93 05 01 	sts	0x0105, r25
    115e:	80 93 04 01 	sts	0x0104, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
    1162:	81 b1       	in	r24, 0x01	; 1
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	81 b9       	out	0x01, r24	; 1
    1168:	87 e8       	ldi	r24, 0x87	; 135
    116a:	93 e1       	ldi	r25, 0x13	; 19
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <lcd_init+0x1e>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <lcd_init+0x24>
    1172:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
    1174:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
    1176:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
    1178:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
    117a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    117c:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    117e:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    1180:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    1182:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    1186:	81 ee       	ldi	r24, 0xE1	; 225
    1188:	94 e0       	ldi	r25, 0x04	; 4
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <lcd_init+0x3c>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <lcd_init+0x42>
    1190:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
    1192:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    1196:	89 ef       	ldi	r24, 0xF9	; 249
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <lcd_init+0x4c>
    119e:	00 c0       	rjmp	.+0      	; 0x11a0 <lcd_init+0x52>
    11a0:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
    11a2:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    11a6:	89 ef       	ldi	r24, 0xF9	; 249
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <lcd_init+0x5c>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <lcd_init+0x62>
    11b0:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
    11b2:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11b4:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    11b6:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11b8:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11ba:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    11be:	89 ef       	ldi	r24, 0xF9	; 249
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <lcd_init+0x74>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <lcd_init+0x7a>
    11c8:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
    11ca:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11cc:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    11ce:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11d0:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11d2:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    11d6:	89 ef       	ldi	r24, 0xF9	; 249
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <lcd_init+0x8c>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <lcd_init+0x92>
    11e0:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
    11e2:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11e4:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    11e6:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11e8:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11ea:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    11ee:	89 ef       	ldi	r24, 0xF9	; 249
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <lcd_init+0xa4>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <lcd_init+0xaa>
    11f8:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
    11fa:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11fc:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    11fe:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1200:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1202:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    1206:	89 ef       	ldi	r24, 0xF9	; 249
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <lcd_init+0xbc>
    120e:	00 c0       	rjmp	.+0      	; 0x1210 <lcd_init+0xc2>
    1210:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    1212:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
    1214:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
    1216:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1218:	13 98       	cbi	0x02, 3	; 2
    datarw();
    121a:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    121e:	89 ef       	ldi	r24, 0xF9	; 249
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <lcd_init+0xd4>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <lcd_init+0xda>
    1228:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
    122a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    122c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    122e:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1230:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1232:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    1236:	89 ef       	ldi	r24, 0xF9	; 249
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <lcd_init+0xec>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <lcd_init+0xf2>
    1240:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
    1242:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1244:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1246:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    1248:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    124a:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    124e:	89 ef       	ldi	r24, 0xF9	; 249
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <lcd_init+0x104>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <lcd_init+0x10a>
    1258:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
    125a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    125c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    125e:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1260:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1262:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    1266:	89 ef       	ldi	r24, 0xF9	; 249
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <lcd_init+0x11c>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <lcd_init+0x122>
    1270:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
    1272:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    1274:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1276:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
    1278:	13 98       	cbi	0x02, 3	; 2
    datarw();
    127a:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    127e:	89 ef       	ldi	r24, 0xF9	; 249
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <lcd_init+0x134>
    1286:	00 c0       	rjmp	.+0      	; 0x1288 <lcd_init+0x13a>
    1288:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
    128a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    128c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    128e:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1290:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1292:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    1296:	89 ef       	ldi	r24, 0xF9	; 249
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <lcd_init+0x14c>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <lcd_init+0x152>
    12a0:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    12a2:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    12a4:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    12a6:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    12a8:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    12aa:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    12ae:	89 ef       	ldi	r24, 0xF9	; 249
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <lcd_init+0x164>
    12b6:	00 c0       	rjmp	.+0      	; 0x12b8 <lcd_init+0x16a>
    12b8:	00 00       	nop
    _delay_ms(1);

	return 0;
}
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	08 95       	ret

000012c0 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <letterwrite+0x8>
    12c4:	16 9a       	sbi	0x02, 6	; 2
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
    12c8:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
    12ca:	61 30       	cpi	r22, 0x01	; 1
    12cc:	71 05       	cpc	r23, r1
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <letterwrite+0x14>
    12d0:	15 9a       	sbi	0x02, 5	; 2
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
    12d4:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
    12d6:	41 30       	cpi	r20, 0x01	; 1
    12d8:	51 05       	cpc	r21, r1
    12da:	11 f4       	brne	.+4      	; 0x12e0 <letterwrite+0x20>
    12dc:	14 9a       	sbi	0x02, 4	; 2
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
    12e0:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
    12e2:	21 30       	cpi	r18, 0x01	; 1
    12e4:	31 05       	cpc	r19, r1
    12e6:	11 f4       	brne	.+4      	; 0x12ec <letterwrite+0x2c>
    12e8:	13 9a       	sbi	0x02, 3	; 2
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
    12ec:	13 98       	cbi	0x02, 3	; 2
   	datarw();
    12ee:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    12f2:	89 ef       	ldi	r24, 0xF9	; 249
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <letterwrite+0x36>
    12fa:	00 c0       	rjmp	.+0      	; 0x12fc <letterwrite+0x3c>
    12fc:	00 00       	nop
    12fe:	08 95       	ret

00001300 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
    1306:	81 b1       	in	r24, 0x01	; 1
    1308:	87 78       	andi	r24, 0x87	; 135
    130a:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
    130c:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
    130e:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    1310:	12 9a       	sbi	0x02, 2	; 2
    1312:	81 ee       	ldi	r24, 0xE1	; 225
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <instruction_read+0x16>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <instruction_read+0x1c>
    131c:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    131e:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    1320:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
    1322:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
    1324:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
    1326:	12 98       	cbi	0x02, 2	; 2
    1328:	e9 ef       	ldi	r30, 0xF9	; 249
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <instruction_read+0x2c>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <instruction_read+0x32>
    1332:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    1334:	12 9a       	sbi	0x02, 2	; 2
    1336:	e1 ee       	ldi	r30, 0xE1	; 225
    1338:	f4 e0       	ldi	r31, 0x04	; 4
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <instruction_read+0x3a>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <instruction_read+0x40>
    1340:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    1342:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
    1344:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
    1346:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
    1348:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    134a:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	26 e0       	ldi	r18, 0x06	; 6
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	2a 95       	dec	r18
    1356:	e1 f7       	brne	.-8      	; 0x1350 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
    1358:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	35 e0       	ldi	r19, 0x05	; 5
    135e:	cc 0f       	add	r28, r28
    1360:	dd 1f       	adc	r29, r29
    1362:	3a 95       	dec	r19
    1364:	e1 f7       	brne	.-8      	; 0x135e <instruction_read+0x5e>
    1366:	8c 2b       	or	r24, r28
    1368:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
    136a:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
    136c:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    136e:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	54 e0       	ldi	r21, 0x04	; 4
    1374:	aa 0f       	add	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	5a 95       	dec	r21
    137a:	e1 f7       	brne	.-8      	; 0x1374 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    137c:	8a 2b       	or	r24, r26
    137e:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    1380:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	73 e0       	ldi	r23, 0x03	; 3
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	7a 95       	dec	r23
    138c:	e1 f7       	brne	.-8      	; 0x1386 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
    138e:	8e 2b       	or	r24, r30
    1390:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    1392:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
    139e:	86 2b       	or	r24, r22
    13a0:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
    13a2:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
    13a4:	51 b1       	in	r21, 0x01	; 1
    13a6:	58 67       	ori	r21, 0x78	; 120
    13a8:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    13aa:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    13ac:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    13ae:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
    13b6:	84 2b       	or	r24, r20
    13b8:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    13ba:	16 fb       	bst	r17, 6
    13bc:	22 27       	eor	r18, r18
    13be:	20 f9       	bld	r18, 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
    13c2:	36 95       	lsr	r19
    13c4:	32 2f       	mov	r19, r18
    13c6:	22 27       	eor	r18, r18
    13c8:	37 95       	ror	r19
    13ca:	27 95       	ror	r18
}
    13cc:	82 2b       	or	r24, r18
    13ce:	93 2b       	or	r25, r19
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	08 95       	ret

000013d8 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
    13d8:	0e 94 80 09 	call	0x1300	; 0x1300 <instruction_read>
    13dc:	8f 77       	andi	r24, 0x7F	; 127
    13de:	99 27       	eor	r25, r25
    return address+1;
}
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	08 95       	ret

000013e4 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
    13e4:	89 2b       	or	r24, r25
    13e6:	11 f4       	brne	.+4      	; 0x13ec <write_db74+0x8>
    13e8:	16 98       	cbi	0x02, 6	; 2
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <write_db74+0xa>
    else PORTA |= _BV(DB7);
    13ec:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
    13ee:	67 2b       	or	r22, r23
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <write_db74+0x12>
    13f2:	15 98       	cbi	0x02, 5	; 2
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <write_db74+0x14>
    else PORTA |= _BV(DB6);
    13f6:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
    13f8:	45 2b       	or	r20, r21
    13fa:	11 f4       	brne	.+4      	; 0x1400 <write_db74+0x1c>
    13fc:	14 98       	cbi	0x02, 4	; 2
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
    1400:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
    1402:	23 2b       	or	r18, r19
    1404:	11 f4       	brne	.+4      	; 0x140a <write_db74+0x26>
    1406:	13 98       	cbi	0x02, 3	; 2
    1408:	08 95       	ret
    else PORTA |= _BV(DB4);
    140a:	13 9a       	sbi	0x02, 3	; 2
    140c:	08 95       	ret

0000140e <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
    1414:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1416:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    1418:	28 2f       	mov	r18, r24
    141a:	22 95       	swap	r18
    141c:	21 70       	andi	r18, 0x01	; 1
    141e:	85 fb       	bst	r24, 5
    1420:	44 27       	eor	r20, r20
    1422:	40 f9       	bld	r20, 0
    1424:	86 fb       	bst	r24, 6
    1426:	66 27       	eor	r22, r22
    1428:	60 f9       	bld	r22, 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_db74>
    datarw();
    1438:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    143c:	9e 01       	movw	r18, r28
    143e:	21 70       	andi	r18, 0x01	; 1
    1440:	33 27       	eor	r19, r19
    1442:	4c 2f       	mov	r20, r28
    1444:	46 95       	lsr	r20
    1446:	41 70       	andi	r20, 0x01	; 1
    1448:	c2 fb       	bst	r28, 2
    144a:	66 27       	eor	r22, r22
    144c:	60 f9       	bld	r22, 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	c3 fb       	bst	r28, 3
    1454:	88 27       	eor	r24, r24
    1456:	80 f9       	bld	r24, 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_db74>
    datarw();
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
    1462:	0c 94 9e 08 	jmp	0x113c	; 0x113c <datarw>

00001466 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
    1466:	cf 93       	push	r28
    1468:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
    146a:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    146c:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    146e:	84 fb       	bst	r24, 4
    1470:	22 27       	eor	r18, r18
    1472:	20 f9       	bld	r18, 0
    1474:	85 fb       	bst	r24, 5
    1476:	44 27       	eor	r20, r20
    1478:	40 f9       	bld	r20, 0
    147a:	86 fb       	bst	r24, 6
    147c:	66 27       	eor	r22, r22
    147e:	60 f9       	bld	r22, 0
    1480:	88 1f       	adc	r24, r24
    1482:	88 27       	eor	r24, r24
    1484:	88 1f       	adc	r24, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_db74>
    datarw();
    1492:	0e 94 9e 08 	call	0x113c	; 0x113c <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    1496:	2c 2f       	mov	r18, r28
    1498:	21 70       	andi	r18, 0x01	; 1
    149a:	c1 fb       	bst	r28, 1
    149c:	44 27       	eor	r20, r20
    149e:	40 f9       	bld	r20, 0
    14a0:	c2 fb       	bst	r28, 2
    14a2:	66 27       	eor	r22, r22
    14a4:	60 f9       	bld	r22, 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	c3 fb       	bst	r28, 3
    14ae:	88 27       	eor	r24, r24
    14b0:	80 f9       	bld	r24, 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <write_db74>
    datarw();
}
    14b8:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
    14ba:	0c 94 9e 08 	jmp	0x113c	; 0x113c <datarw>

000014be <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
    14be:	cf 93       	push	r28
    14c0:	c8 2f       	mov	r28, r24
    chars_written++;
    14c2:	20 91 0f 04 	lds	r18, 0x040F
    14c6:	30 91 10 04 	lds	r19, 0x0410
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	30 93 10 04 	sts	0x0410, r19
    14d2:	20 93 0f 04 	sts	0x040F, r18

    if ((chars_written==17)||(mychar=='\n'))
    14d6:	21 31       	cpi	r18, 0x11	; 17
    14d8:	31 05       	cpc	r19, r1
    14da:	31 f0       	breq	.+12     	; 0x14e8 <char_write+0x2a>
    14dc:	8a 30       	cpi	r24, 0x0A	; 10
    14de:	21 f0       	breq	.+8      	; 0x14e8 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    14e0:	8c 2f       	mov	r24, r28
    
}
    14e2:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    14e4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
    14e8:	20 91 04 01 	lds	r18, 0x0104
    14ec:	30 91 05 01 	lds	r19, 0x0105
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	79 f4       	brne	.+30     	; 0x1514 <char_write+0x56>
        {
            set_ddram_address(0x40);
    14f6:	80 e4       	ldi	r24, 0x40	; 64
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 07 0a 	call	0x140e	; 0x140e <set_ddram_address>
            line_num = 2;
    14fe:	22 e0       	ldi	r18, 0x02	; 2
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	30 93 05 01 	sts	0x0105, r19
    1506:	20 93 04 01 	sts	0x0104, r18
            chars_written = 0;
    150a:	10 92 10 04 	sts	0x0410, r1
    150e:	10 92 0f 04 	sts	0x040F, r1
    1512:	05 c0       	rjmp	.+10     	; 0x151e <char_write+0x60>
        }
        else if (line_num==2)
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	11 f4       	brne	.+4      	; 0x151e <char_write+0x60>
        {
            lcd_init();
    151a:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
        }
    }

    if (mychar!='\n')
    151e:	ca 30       	cpi	r28, 0x0A	; 10
    1520:	f9 f6       	brne	.-66     	; 0x14e0 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
    1530:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
    1534:	8e 01       	movw	r16, r28
    1536:	fe 01       	movw	r30, r28
    1538:	01 90       	ld	r0, Z+
    153a:	00 20       	and	r0, r0
    153c:	e9 f7       	brne	.-6      	; 0x1538 <string_write+0x12>
    153e:	31 97       	sbiw	r30, 0x01	; 1
    1540:	ec 1b       	sub	r30, r28
    1542:	fd 0b       	sbc	r31, r29
    1544:	c8 01       	movw	r24, r16
    1546:	8c 1b       	sub	r24, r28
    1548:	9d 0b       	sbc	r25, r29
    154a:	8e 17       	cp	r24, r30
    154c:	9f 07       	cpc	r25, r31
    154e:	40 f4       	brcc	.+16     	; 0x1560 <string_write+0x3a>
        char_write(mystring[i]);
    1550:	f8 01       	movw	r30, r16
    1552:	81 91       	ld	r24, Z+
    1554:	8f 01       	movw	r16, r30
    1556:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
        get_current_address();
    155a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <get_current_address>
    155e:	eb cf       	rjmp	.-42     	; 0x1536 <string_write+0x10>
    }
}
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	08 95       	ret

0000156a <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	18 2f       	mov	r17, r24
    1574:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
    1576:	cb 01       	movw	r24, r22
    1578:	0e 94 5d 16 	call	0x2cba	; 0x2cba <malloc>
    157c:	ec 01       	movw	r28, r24
    if (temp==NULL)
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	51 f4       	brne	.+20     	; 0x1596 <string_write_int+0x2c>
    {
            lcd_init();
    1582:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
            string_write("bad malloc");
    1586:	8b e2       	ldi	r24, 0x2B	; 43
    1588:	91 e0       	ldi	r25, 0x01	; 1
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    if (temp==NULL)
    {
            lcd_init();
            string_write("bad malloc");
    1592:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <string_write>
            return;
    }
    sprintf(temp,"%d",num);
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	8c e9       	ldi	r24, 0x9C	; 156
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	9f 93       	push	r25
    15a0:	8f 93       	push	r24
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	0e 94 4e 19 	call	0x329c	; 0x329c <sprintf>
    string_write(temp);
    15aa:	ce 01       	movw	r24, r28
    15ac:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    free(temp);
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	ce 01       	movw	r24, r28
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
            string_write("bad malloc");
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
    15c6:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <free>

000015ca <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	00 d0       	rcall	.+0      	; 0x15dc <string_write_float+0x12>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <string_write_float+0x14>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
    15e4:	ae 01       	movw	r20, r28
    15e6:	4f 5f       	subi	r20, 0xFF	; 255
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	0e 94 8b 14 	call	0x2916	; 0x2916 <modf>
    15ee:	6b 01       	movw	r12, r22
    15f0:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
    15f2:	69 81       	ldd	r22, Y+1	; 0x01
    15f4:	7a 81       	ldd	r23, Y+2	; 0x02
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixsfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	64 e0       	ldi	r22, 0x04	; 4
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	0e 94 b5 0a 	call	0x156a	; 0x156a <string_write_int>
    160a:	89 e4       	ldi	r24, 0x49	; 73
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
    1612:	b8 01       	movw	r22, r16
    1614:	88 27       	eor	r24, r24
    1616:	77 fd       	sbrc	r23, 7
    1618:	80 95       	com	r24
    161a:	98 2f       	mov	r25, r24
    161c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__floatsisf>
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e2       	ldi	r24, 0x20	; 32
    162a:	91 e4       	ldi	r25, 0x41	; 65
    162c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pow>
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	c7 01       	movw	r24, r14
    1636:	b6 01       	movw	r22, r12
    1638:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    163c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <round>
    1640:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixsfsi>
    1644:	7b 01       	movw	r14, r22
    1646:	77 ff       	sbrs	r23, 7
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <string_write_float+0x88>
    164a:	ee 24       	eor	r14, r14
    164c:	ff 24       	eor	r15, r15
    164e:	e6 1a       	sub	r14, r22
    1650:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
    1652:	e1 14       	cp	r14, r1
    1654:	f1 04       	cpc	r15, r1
    1656:	a1 f0       	breq	.+40     	; 0x1680 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
    1658:	b7 01       	movw	r22, r14
    165a:	88 27       	eor	r24, r24
    165c:	77 fd       	sbrc	r23, 7
    165e:	80 95       	com	r24
    1660:	98 2f       	mov	r25, r24
    1662:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__floatsisf>
    1666:	0e 94 40 14 	call	0x2880	; 0x2880 <log10>
    166a:	0e 94 0f 13 	call	0x261e	; 0x261e <floor>
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3>
    167a:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixsfsi>
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <string_write_float+0xba>
    } else {
        digits = 0;
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    1684:	c1 2c       	mov	r12, r1
    1686:	d1 2c       	mov	r13, r1
    1688:	06 1b       	sub	r16, r22
    168a:	17 0b       	sbc	r17, r23
    168c:	c0 16       	cp	r12, r16
    168e:	d1 06       	cpc	r13, r17
    1690:	44 f4       	brge	.+16     	; 0x16a2 <string_write_float+0xd8>
    {
        string_write("0");
    1692:	8f e9       	ldi	r24, 0x9F	; 159
    1694:	93 e0       	ldi	r25, 0x03	; 3
    1696:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	c8 1a       	sub	r12, r24
    169e:	d8 0a       	sbc	r13, r24
    16a0:	f5 cf       	rjmp	.-22     	; 0x168c <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
    16a2:	64 e0       	ldi	r22, 0x04	; 4
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	c7 01       	movw	r24, r14
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	df 90       	pop	r13
    16be:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
    16c0:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <string_write_int>

000016c4 <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
    16c4:	cf 92       	push	r12
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	8c 01       	movw	r16, r24
    16d6:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
    16d8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <get_current_address>
    16dc:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    16de:	c0 e0       	ldi	r28, 0x00	; 0
    16e0:	d0 e0       	ldi	r29, 0x00	; 0
    16e2:	cc 15       	cp	r28, r12
    16e4:	dd 05       	cpc	r29, r13
    16e6:	9c f4       	brge	.+38     	; 0x170e <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
    16e8:	f8 01       	movw	r30, r16
    16ea:	01 90       	ld	r0, Z+
    16ec:	00 20       	and	r0, r0
    16ee:	e9 f7       	brne	.-6      	; 0x16ea <string_write_numchars+0x26>
    16f0:	31 97       	sbiw	r30, 0x01	; 1
    16f2:	e0 1b       	sub	r30, r16
    16f4:	f1 0b       	sbc	r31, r17
    16f6:	ce 17       	cp	r28, r30
    16f8:	df 07       	cpc	r29, r31
    16fa:	48 f4       	brcc	.+18     	; 0x170e <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
    16fc:	f7 01       	movw	r30, r14
    16fe:	81 91       	ld	r24, Z+
    1700:	7f 01       	movw	r14, r30
    1702:	0e 94 5f 0a 	call	0x14be	; 0x14be <char_write>
        get_current_address();
    1706:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    170a:	21 96       	adiw	r28, 0x01	; 1
    170c:	ea cf       	rjmp	.-44     	; 0x16e2 <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	08 95       	ret

00001720 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	00 d0       	rcall	.+0      	; 0x1726 <tag_check+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <tag_check+0x8>
    1728:	00 d0       	rcall	.+0      	; 0x172a <tag_check+0xa>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
    172e:	26 e0       	ldi	r18, 0x06	; 6
    1730:	ec e0       	ldi	r30, 0x0C	; 12
    1732:	f1 e0       	ldi	r31, 0x01	; 1
    1734:	de 01       	movw	r26, r28
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	01 90       	ld	r0, Z+
    173a:	0d 92       	st	X+, r0
    173c:	2a 95       	dec	r18
    173e:	e1 f7       	brne	.-8      	; 0x1738 <tag_check+0x18>
    1740:	fe 01       	movw	r30, r28
    1742:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	dc 01       	movw	r26, r24
    174a:	a2 0f       	add	r26, r18
    174c:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
    174e:	4c 91       	ld	r20, X
    1750:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	26 30       	cpi	r18, 0x06	; 6
    1758:	31 05       	cpc	r19, r1
    175a:	b1 f7       	brne	.-20     	; 0x1748 <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
    175c:	61 ea       	ldi	r22, 0xA1	; 161
    175e:	73 e0       	ldi	r23, 0x03	; 3
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	0e 94 21 19 	call	0x3242	; 0x3242 <strcmp>
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	89 2b       	or	r24, r25
    176e:	11 f0       	breq	.+4      	; 0x1774 <tag_check+0x54>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
    1774:	c9 01       	movw	r24, r18
    1776:	26 96       	adiw	r28, 0x06	; 6
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	21 f0       	breq	.+8      	; 0x1798 <strtok_single+0x10>
    src = in_str;
    1790:	90 93 12 04 	sts	0x0412, r25
    1794:	80 93 11 04 	sts	0x0411, r24

  if (src == NULL)
    1798:	c0 91 11 04 	lds	r28, 0x0411
    179c:	d0 91 12 04 	lds	r29, 0x0412
    17a0:	20 97       	sbiw	r28, 0x00	; 0
    17a2:	69 f0       	breq	.+26     	; 0x17be <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
    17a4:	ce 01       	movw	r24, r28
    17a6:	0e 94 40 19 	call	0x3280	; 0x3280 <strpbrk>
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	41 f0       	breq	.+16     	; 0x17be <strtok_single+0x36>
    *p  = 0;
    17ae:	fc 01       	movw	r30, r24
    17b0:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
    17b2:	f0 93 12 04 	sts	0x0412, r31
    17b6:	e0 93 11 04 	sts	0x0411, r30
    17ba:	ce 01       	movw	r24, r28
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <parse_nmea>:
#include <math.h>
#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the gps_data fields
int parse_nmea(volatile char *in_sent, char *gps_data[13]){
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	8b 01       	movw	r16, r22

	int i = 0, j=0;
	char* token;

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
    17d2:	68 ea       	ldi	r22, 0xA8	; 168
    17d4:	73 e0       	ldi	r23, 0x03	; 3
    17d6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <strtok_single>
    17da:	ec 01       	movw	r28, r24
	strcpy(gps_data[0], token);
    17dc:	bc 01       	movw	r22, r24
    17de:	d8 01       	movw	r26, r16
    17e0:	8d 91       	ld	r24, X+
    17e2:	9c 91       	ld	r25, X
    17e4:	0e 94 2a 19 	call	0x3254	; 0x3254 <strcpy>

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    17e8:	fe 01       	movw	r30, r28
    17ea:	01 90       	ld	r0, Z+
    17ec:	00 20       	and	r0, r0
    17ee:	e9 f7       	brne	.-6      	; 0x17ea <parse_nmea+0x22>
    17f0:	31 97       	sbiw	r30, 0x01	; 1
    17f2:	ec 1b       	sub	r30, r28
    17f4:	fd 0b       	sbc	r31, r29
    17f6:	e0 31       	cpi	r30, 0x10	; 16
    17f8:	f1 05       	cpc	r31, r1
    17fa:	5c f4       	brge	.+22     	; 0x1812 <parse_nmea+0x4a>
	{
		gps_data[0][j] = '\0';
    17fc:	d8 01       	movw	r26, r16
    17fe:	8d 91       	ld	r24, X+
    1800:	9c 91       	ld	r25, X
    1802:	8e 0f       	add	r24, r30
    1804:	9f 1f       	adc	r25, r31
    1806:	dc 01       	movw	r26, r24
    1808:	1c 92       	st	X, r1
	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
	strcpy(gps_data[0], token);

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    180a:	31 96       	adiw	r30, 0x01	; 1
    180c:	f4 cf       	rjmp	.-24     	; 0x17f6 <parse_nmea+0x2e>
    180e:	0e 5f       	subi	r16, 0xFE	; 254
    1810:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		gps_data[0][j] = '\0';
	}

	//copy over the rest of the tokens
	while(token) 
    1812:	cd 2b       	or	r28, r29
    1814:	11 f1       	breq	.+68     	; 0x185a <parse_nmea+0x92>
	{
		i++;
		token = strtok_single(NULL, ",");
    1816:	68 ea       	ldi	r22, 0xA8	; 168
    1818:	73 e0       	ldi	r23, 0x03	; 3
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <strtok_single>
    1822:	ec 01       	movw	r28, r24
		strcpy(gps_data[i], token);
    1824:	bc 01       	movw	r22, r24
    1826:	f8 01       	movw	r30, r16
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	0e 94 2a 19 	call	0x3254	; 0x3254 <strcpy>
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    1830:	fe 01       	movw	r30, r28
    1832:	01 90       	ld	r0, Z+
    1834:	00 20       	and	r0, r0
    1836:	e9 f7       	brne	.-6      	; 0x1832 <parse_nmea+0x6a>
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	ec 1b       	sub	r30, r28
    183c:	fd 0b       	sbc	r31, r29
    183e:	e0 31       	cpi	r30, 0x10	; 16
    1840:	f1 05       	cpc	r31, r1
    1842:	2c f7       	brge	.-54     	; 0x180e <parse_nmea+0x46>
		{
			gps_data[i][j] = '\0';
    1844:	d8 01       	movw	r26, r16
    1846:	12 96       	adiw	r26, 0x02	; 2
    1848:	8d 91       	ld	r24, X+
    184a:	9c 91       	ld	r25, X
    184c:	13 97       	sbiw	r26, 0x03	; 3
    184e:	8e 0f       	add	r24, r30
    1850:	9f 1f       	adc	r25, r31
    1852:	dc 01       	movw	r26, r24
    1854:	1c 92       	st	X, r1
	{
		i++;
		token = strtok_single(NULL, ",");
		strcpy(gps_data[i], token);
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    1856:	31 96       	adiw	r30, 0x01	; 1
    1858:	f2 cf       	rjmp	.-28     	; 0x183e <parse_nmea+0x76>
			gps_data[i][j] = '\0';
		}
	}

	return 0;
}
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
    1868:	fc 01       	movw	r30, r24
    186a:	9f 01       	movw	r18, r30
    186c:	28 1b       	sub	r18, r24
    186e:	39 0b       	sbc	r19, r25
    1870:	26 17       	cp	r18, r22
    1872:	37 07       	cpc	r19, r23
    1874:	14 f4       	brge	.+4      	; 0x187a <wipe_chars+0x12>
	{
		str[i] = '\0';
    1876:	11 92       	st	Z+, r1
    1878:	f8 cf       	rjmp	.-16     	; 0x186a <wipe_chars+0x2>
	}
}
    187a:	08 95       	ret

0000187c <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	27 97       	sbiw	r28, 0x07	; 7
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	5c 01       	movw	r10, r24
    18a0:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
    18a2:	fc 01       	movw	r30, r24
    18a4:	80 81       	ld	r24, Z
    18a6:	99 27       	eor	r25, r25
    18a8:	87 fd       	sbrc	r24, 7
    18aa:	90 95       	com	r25
    18ac:	c0 97       	sbiw	r24, 0x30	; 48
    18ae:	2a e0       	ldi	r18, 0x0A	; 10
    18b0:	28 9f       	mul	r18, r24
    18b2:	b0 01       	movw	r22, r0
    18b4:	29 9f       	mul	r18, r25
    18b6:	70 0d       	add	r23, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	81 81       	ldd	r24, Z+1	; 0x01
    18bc:	99 27       	eor	r25, r25
    18be:	87 fd       	sbrc	r24, 7
    18c0:	90 95       	com	r25
    18c2:	c0 97       	sbiw	r24, 0x30	; 48
    18c4:	68 0f       	add	r22, r24
    18c6:	79 1f       	adc	r23, r25
    18c8:	88 27       	eor	r24, r24
    18ca:	77 fd       	sbrc	r23, 7
    18cc:	80 95       	com	r24
    18ce:	98 2f       	mov	r25, r24
    18d0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__floatsisf>
    18d4:	6b 01       	movw	r12, r22
    18d6:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
    18d8:	b5 01       	movw	r22, r10
    18da:	6e 5f       	subi	r22, 0xFE	; 254
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	47 e0       	ldi	r20, 0x07	; 7
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	0e 94 31 19 	call	0x3262	; 0x3262 <strncpy>

	float minutes = strtod(temp,NULL);
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	ce 01       	movw	r24, r28
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	0e 94 84 17 	call	0x2f08	; 0x2f08 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e7       	ldi	r20, 0x70	; 112
    18fc:	52 e4       	ldi	r21, 0x42	; 66
    18fe:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    1902:	9b 01       	movw	r18, r22
    1904:	ac 01       	movw	r20, r24
    1906:	c7 01       	movw	r24, r14
    1908:	b6 01       	movw	r22, r12
    190a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
    190e:	13 35       	cpi	r17, 0x53	; 83
    1910:	09 f4       	brne	.+2      	; 0x1914 <lat2dec+0x98>
		result *= -1;
    1912:	90 58       	subi	r25, 0x80	; 128

	return result;

}
    1914:	27 96       	adiw	r28, 0x07	; 7
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	08 95       	ret

00001934 <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	27 97       	sbiw	r28, 0x07	; 7
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	5c 01       	movw	r10, r24
    1958:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	99 27       	eor	r25, r25
    1960:	87 fd       	sbrc	r24, 7
    1962:	90 95       	com	r25
    1964:	c0 97       	sbiw	r24, 0x30	; 48
    1966:	24 e6       	ldi	r18, 0x64	; 100
    1968:	28 9f       	mul	r18, r24
    196a:	b0 01       	movw	r22, r0
    196c:	29 9f       	mul	r18, r25
    196e:	70 0d       	add	r23, r0
    1970:	11 24       	eor	r1, r1
    1972:	81 81       	ldd	r24, Z+1	; 0x01
    1974:	99 27       	eor	r25, r25
    1976:	87 fd       	sbrc	r24, 7
    1978:	90 95       	com	r25
    197a:	c0 97       	sbiw	r24, 0x30	; 48
    197c:	4a e0       	ldi	r20, 0x0A	; 10
    197e:	48 9f       	mul	r20, r24
    1980:	90 01       	movw	r18, r0
    1982:	49 9f       	mul	r20, r25
    1984:	30 0d       	add	r19, r0
    1986:	11 24       	eor	r1, r1
    1988:	62 0f       	add	r22, r18
    198a:	73 1f       	adc	r23, r19
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	99 27       	eor	r25, r25
    1990:	87 fd       	sbrc	r24, 7
    1992:	90 95       	com	r25
    1994:	c0 97       	sbiw	r24, 0x30	; 48
    1996:	68 0f       	add	r22, r24
    1998:	79 1f       	adc	r23, r25
    199a:	88 27       	eor	r24, r24
    199c:	77 fd       	sbrc	r23, 7
    199e:	80 95       	com	r24
    19a0:	98 2f       	mov	r25, r24
    19a2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__floatsisf>
    19a6:	6b 01       	movw	r12, r22
    19a8:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
    19aa:	b5 01       	movw	r22, r10
    19ac:	6d 5f       	subi	r22, 0xFD	; 253
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	47 e0       	ldi	r20, 0x07	; 7
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	ce 01       	movw	r24, r28
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	0e 94 31 19 	call	0x3262	; 0x3262 <strncpy>

	float minutes = strtod(temp,NULL);
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	0e 94 84 17 	call	0x2f08	; 0x2f08 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e7       	ldi	r20, 0x70	; 112
    19ce:	52 e4       	ldi	r21, 0x42	; 66
    19d0:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
    19e0:	17 35       	cpi	r17, 0x57	; 87
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <lon2dec+0xb2>
		result *= -1;
    19e4:	90 58       	subi	r25, 0x80	; 128

	return result;
}
    19e6:	27 96       	adiw	r28, 0x07	; 7
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	bf 90       	pop	r11
    1a02:	af 90       	pop	r10
    1a04:	08 95       	ret

00001a06 <update_user_gps_data>:

//use the raw gps_data fields to populate the UserData struct
void update_user_gps_data(char *gps_data[13], UserData *user)
{
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	8c 01       	movw	r16, r24
    1a18:	eb 01       	movw	r28, r22
	float temp;
	wipe_chars(user->msg_type,8);
    1a1a:	68 e0       	ldi	r22, 0x08	; 8
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 34 0c 	call	0x1868	; 0x1868 <wipe_chars>
	strcpy(user->msg_type,gps_data[0]);
    1a24:	d8 01       	movw	r26, r16
    1a26:	6d 91       	ld	r22, X+
    1a28:	7c 91       	ld	r23, X
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	0e 94 2a 19 	call	0x3254	; 0x3254 <strcpy>

	wipe_chars(user->utc_time,8);
    1a30:	68 e0       	ldi	r22, 0x08	; 8
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	ce 01       	movw	r24, r28
    1a36:	08 96       	adiw	r24, 0x08	; 8
    1a38:	0e 94 34 0c 	call	0x1868	; 0x1868 <wipe_chars>
	user->utc_time[0] = gps_data[1][0];
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	12 96       	adiw	r26, 0x02	; 2
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	13 97       	sbiw	r26, 0x03	; 3
    1a46:	80 81       	ld	r24, Z
    1a48:	88 87       	std	Y+8, r24	; 0x08
	user->utc_time[1] = gps_data[1][1];
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	ed 91       	ld	r30, X+
    1a4e:	fc 91       	ld	r31, X
    1a50:	13 97       	sbiw	r26, 0x03	; 3
    1a52:	81 81       	ldd	r24, Z+1	; 0x01
    1a54:	89 87       	std	Y+9, r24	; 0x09
	user->utc_time[2] = ':';
    1a56:	8a e3       	ldi	r24, 0x3A	; 58
    1a58:	8a 87       	std	Y+10, r24	; 0x0a
	user->utc_time[3] = gps_data[1][2];
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3
    1a62:	92 81       	ldd	r25, Z+2	; 0x02
    1a64:	9b 87       	std	Y+11, r25	; 0x0b
	user->utc_time[4] = gps_data[1][3];
    1a66:	12 96       	adiw	r26, 0x02	; 2
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	13 97       	sbiw	r26, 0x03	; 3
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	9c 87       	std	Y+12, r25	; 0x0c
	user->utc_time[5] = ':';
    1a72:	8d 87       	std	Y+13, r24	; 0x0d
	user->utc_time[6] = gps_data[1][4];
    1a74:	12 96       	adiw	r26, 0x02	; 2
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	13 97       	sbiw	r26, 0x03	; 3
    1a7c:	84 81       	ldd	r24, Z+4	; 0x04
    1a7e:	8e 87       	std	Y+14, r24	; 0x0e
	user->utc_time[7] = gps_data[1][5];
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	ed 91       	ld	r30, X+
    1a84:	fc 91       	ld	r31, X
    1a86:	13 97       	sbiw	r26, 0x03	; 3
    1a88:	85 81       	ldd	r24, Z+5	; 0x05
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f

	user->nrw = gps_data[2][0];
    1a8c:	14 96       	adiw	r26, 0x04	; 4
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	15 97       	sbiw	r26, 0x05	; 5
    1a94:	80 81       	ld	r24, Z
    1a96:	88 8b       	std	Y+16, r24	; 0x10

	user->lat = 0;
    1a98:	19 8a       	std	Y+17, r1	; 0x11
    1a9a:	1a 8a       	std	Y+18, r1	; 0x12
    1a9c:	1b 8a       	std	Y+19, r1	; 0x13
    1a9e:	1c 8a       	std	Y+20, r1	; 0x14
	temp = lat2dec(gps_data[3], gps_data[4][0]);
    1aa0:	18 96       	adiw	r26, 0x08	; 8
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	19 97       	sbiw	r26, 0x09	; 9
    1aa8:	60 81       	ld	r22, Z
    1aaa:	16 96       	adiw	r26, 0x06	; 6
    1aac:	8d 91       	ld	r24, X+
    1aae:	9c 91       	ld	r25, X
    1ab0:	17 97       	sbiw	r26, 0x07	; 7
    1ab2:	0e 94 3e 0c 	call	0x187c	; 0x187c <lat2dec>
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	7c 01       	movw	r14, r24

	//handle invalid latitudes
	if ((temp >= -90)&&(temp <= 90))
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	44 eb       	ldi	r20, 0xB4	; 180
    1ac0:	52 ec       	ldi	r21, 0xC2	; 194
    1ac2:	0e 94 35 14 	call	0x286a	; 0x286a <__gesf2>
    1ac6:	87 fd       	sbrc	r24, 7
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <update_user_gps_data+0xe0>
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	44 eb       	ldi	r20, 0xB4	; 180
    1ad0:	52 e4       	ldi	r21, 0x42	; 66
    1ad2:	c7 01       	movw	r24, r14
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	24 f0       	brlt	.+8      	; 0x1ae6 <update_user_gps_data+0xe0>
		user->lat = temp;
    1ade:	c9 8a       	std	Y+17, r12	; 0x11
    1ae0:	da 8a       	std	Y+18, r13	; 0x12
    1ae2:	eb 8a       	std	Y+19, r14	; 0x13
    1ae4:	fc 8a       	std	Y+20, r15	; 0x14

	user->lon = 0;
    1ae6:	1d 8a       	std	Y+21, r1	; 0x15
    1ae8:	1e 8a       	std	Y+22, r1	; 0x16
    1aea:	1f 8a       	std	Y+23, r1	; 0x17
    1aec:	18 8e       	std	Y+24, r1	; 0x18
	temp = lon2dec(gps_data[5], gps_data[6][0]);
    1aee:	d8 01       	movw	r26, r16
    1af0:	1c 96       	adiw	r26, 0x0c	; 12
    1af2:	ed 91       	ld	r30, X+
    1af4:	fc 91       	ld	r31, X
    1af6:	1d 97       	sbiw	r26, 0x0d	; 13
    1af8:	60 81       	ld	r22, Z
    1afa:	1a 96       	adiw	r26, 0x0a	; 10
    1afc:	8d 91       	ld	r24, X+
    1afe:	9c 91       	ld	r25, X
    1b00:	1b 97       	sbiw	r26, 0x0b	; 11
    1b02:	0e 94 9a 0c 	call	0x1934	; 0x1934 <lon2dec>
    1b06:	6b 01       	movw	r12, r22
    1b08:	7c 01       	movw	r14, r24

	//handle invalid longitudes
	if ((temp >= -180)&&(temp <= 180))
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	44 e3       	ldi	r20, 0x34	; 52
    1b10:	53 ec       	ldi	r21, 0xC3	; 195
    1b12:	0e 94 35 14 	call	0x286a	; 0x286a <__gesf2>
    1b16:	87 fd       	sbrc	r24, 7
    1b18:	0e c0       	rjmp	.+28     	; 0x1b36 <update_user_gps_data+0x130>
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	44 e3       	ldi	r20, 0x34	; 52
    1b20:	53 e4       	ldi	r21, 0x43	; 67
    1b22:	c7 01       	movw	r24, r14
    1b24:	b6 01       	movw	r22, r12
    1b26:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	24 f0       	brlt	.+8      	; 0x1b36 <update_user_gps_data+0x130>
		user->lon = temp;
    1b2e:	cd 8a       	std	Y+21, r12	; 0x15
    1b30:	de 8a       	std	Y+22, r13	; 0x16
    1b32:	ef 8a       	std	Y+23, r14	; 0x17
    1b34:	f8 8e       	std	Y+24, r15	; 0x18

	user->speed = 0;
    1b36:	19 8e       	std	Y+25, r1	; 0x19
    1b38:	1a 8e       	std	Y+26, r1	; 0x1a
    1b3a:	1b 8e       	std	Y+27, r1	; 0x1b
    1b3c:	1c 8e       	std	Y+28, r1	; 0x1c
	user->speed = (float)strtod(gps_data[7],NULL);
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	f8 01       	movw	r30, r16
    1b44:	86 85       	ldd	r24, Z+14	; 0x0e
    1b46:	97 85       	ldd	r25, Z+15	; 0x0f
    1b48:	0e 94 84 17 	call	0x2f08	; 0x2f08 <strtod>
    1b4c:	69 8f       	std	Y+25, r22	; 0x19
    1b4e:	7a 8f       	std	Y+26, r23	; 0x1a
    1b50:	8b 8f       	std	Y+27, r24	; 0x1b
    1b52:	9c 8f       	std	Y+28, r25	; 0x1c

	user->course = 0;
    1b54:	1d 8e       	std	Y+29, r1	; 0x1d
    1b56:	1e 8e       	std	Y+30, r1	; 0x1e
    1b58:	1f 8e       	std	Y+31, r1	; 0x1f
    1b5a:	18 a2       	std	Y+32, r1	; 0x20
	user->course = (float)strtod(gps_data[8],NULL);
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	d8 01       	movw	r26, r16
    1b62:	50 96       	adiw	r26, 0x10	; 16
    1b64:	8d 91       	ld	r24, X+
    1b66:	9c 91       	ld	r25, X
    1b68:	51 97       	sbiw	r26, 0x11	; 17
    1b6a:	0e 94 84 17 	call	0x2f08	; 0x2f08 <strtod>
    1b6e:	6d 8f       	std	Y+29, r22	; 0x1d
    1b70:	7e 8f       	std	Y+30, r23	; 0x1e
    1b72:	8f 8f       	std	Y+31, r24	; 0x1f
    1b74:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(user->date,8);
    1b76:	68 e0       	ldi	r22, 0x08	; 8
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	81 96       	adiw	r24, 0x21	; 33
    1b7e:	0e 94 34 0c 	call	0x1868	; 0x1868 <wipe_chars>
	user->date[0] = gps_data[9][2];
    1b82:	d8 01       	movw	r26, r16
    1b84:	52 96       	adiw	r26, 0x12	; 18
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	53 97       	sbiw	r26, 0x13	; 19
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
	user->date[1] = gps_data[9][3];
    1b90:	52 96       	adiw	r26, 0x12	; 18
    1b92:	ed 91       	ld	r30, X+
    1b94:	fc 91       	ld	r31, X
    1b96:	53 97       	sbiw	r26, 0x13	; 19
    1b98:	83 81       	ldd	r24, Z+3	; 0x03
    1b9a:	8a a3       	std	Y+34, r24	; 0x22
	user->date[2] = '/';
    1b9c:	8f e2       	ldi	r24, 0x2F	; 47
    1b9e:	8b a3       	std	Y+35, r24	; 0x23
	user->date[3] = gps_data[9][0];
    1ba0:	52 96       	adiw	r26, 0x12	; 18
    1ba2:	ed 91       	ld	r30, X+
    1ba4:	fc 91       	ld	r31, X
    1ba6:	53 97       	sbiw	r26, 0x13	; 19
    1ba8:	90 81       	ld	r25, Z
    1baa:	9c a3       	std	Y+36, r25	; 0x24
	user->date[4] = gps_data[9][1];
    1bac:	52 96       	adiw	r26, 0x12	; 18
    1bae:	ed 91       	ld	r30, X+
    1bb0:	fc 91       	ld	r31, X
    1bb2:	53 97       	sbiw	r26, 0x13	; 19
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	9d a3       	std	Y+37, r25	; 0x25
	user->date[5] = '/';
    1bb8:	8e a3       	std	Y+38, r24	; 0x26
	user->date[6] = gps_data[9][4];
    1bba:	52 96       	adiw	r26, 0x12	; 18
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	53 97       	sbiw	r26, 0x13	; 19
    1bc2:	84 81       	ldd	r24, Z+4	; 0x04
    1bc4:	8f a3       	std	Y+39, r24	; 0x27
	user->date[7] = gps_data[9][5];
    1bc6:	52 96       	adiw	r26, 0x12	; 18
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	53 97       	sbiw	r26, 0x13	; 19
    1bce:	85 81       	ldd	r24, Z+5	; 0x05
    1bd0:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(user->mag_var,8);
    1bd2:	7e 01       	movw	r14, r28
    1bd4:	b9 e2       	ldi	r27, 0x29	; 41
    1bd6:	eb 0e       	add	r14, r27
    1bd8:	f1 1c       	adc	r15, r1
    1bda:	68 e0       	ldi	r22, 0x08	; 8
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	c7 01       	movw	r24, r14
    1be0:	0e 94 34 0c 	call	0x1868	; 0x1868 <wipe_chars>
	strcpy(user->mag_var,gps_data[10]);
    1be4:	f8 01       	movw	r30, r16
    1be6:	64 89       	ldd	r22, Z+20	; 0x14
    1be8:	75 89       	ldd	r23, Z+21	; 0x15
    1bea:	c7 01       	movw	r24, r14
    1bec:	0e 94 2a 19 	call	0x3254	; 0x3254 <strcpy>

	user->mode = gps_data[12][0];
    1bf0:	d8 01       	movw	r26, r16
    1bf2:	58 96       	adiw	r26, 0x18	; 24
    1bf4:	ed 91       	ld	r30, X+
    1bf6:	fc 91       	ld	r31, X
    1bf8:	59 97       	sbiw	r26, 0x19	; 25
    1bfa:	80 81       	ld	r24, Z
    1bfc:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(user->checksum,3);
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	ce 01       	movw	r24, r28
    1c04:	c2 96       	adiw	r24, 0x32	; 50
    1c06:	0e 94 34 0c 	call	0x1868	; 0x1868 <wipe_chars>
	user->checksum[0] = gps_data[12][1];
    1c0a:	d8 01       	movw	r26, r16
    1c0c:	58 96       	adiw	r26, 0x18	; 24
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	59 97       	sbiw	r26, 0x19	; 25
    1c14:	81 81       	ldd	r24, Z+1	; 0x01
    1c16:	8a ab       	std	Y+50, r24	; 0x32
	user->checksum[1] = gps_data[12][2];
    1c18:	58 96       	adiw	r26, 0x18	; 24
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	59 97       	sbiw	r26, 0x19	; 25
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	8b ab       	std	Y+51, r24	; 0x33
	user->checksum[2] = gps_data[12][3];
    1c24:	58 96       	adiw	r26, 0x18	; 24
    1c26:	ed 91       	ld	r30, X+
    1c28:	fc 91       	ld	r31, X
    1c2a:	59 97       	sbiw	r26, 0x19	; 25
    1c2c:	83 81       	ldd	r24, Z+3	; 0x03
    1c2e:	8c ab       	std	Y+52, r24	; 0x34
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <earth_distance>:
    return earth_distance(user->lat, user->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
    1c42:	4f 92       	push	r4
    1c44:	5f 92       	push	r5
    1c46:	6f 92       	push	r6
    1c48:	7f 92       	push	r7
    1c4a:	8f 92       	push	r8
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	60 97       	sbiw	r28, 0x10	; 16
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	2b 01       	movw	r4, r22
    1c74:	3c 01       	movw	r6, r24
    1c76:	29 87       	std	Y+9, r18	; 0x09
    1c78:	3a 87       	std	Y+10, r19	; 0x0a
    1c7a:	4b 87       	std	Y+11, r20	; 0x0b
    1c7c:	5c 87       	std	Y+12, r21	; 0x0c
    1c7e:	e9 82       	std	Y+1, r14	; 0x01
    1c80:	fa 82       	std	Y+2, r15	; 0x02
    1c82:	0b 83       	std	Y+3, r16	; 0x03
    1c84:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    1c86:	9b 01       	movw	r18, r22
    1c88:	ac 01       	movw	r20, r24
    1c8a:	c8 01       	movw	r24, r16
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1c92:	2b ed       	ldi	r18, 0xDB	; 219
    1c94:	3f e0       	ldi	r19, 0x0F	; 15
    1c96:	49 e4       	ldi	r20, 0x49	; 73
    1c98:	50 e4       	ldi	r21, 0x40	; 64
    1c9a:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	44 e3       	ldi	r20, 0x34	; 52
    1ca4:	53 e4       	ldi	r21, 0x43	; 67
    1ca6:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1cb6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <sin>
    1cba:	6d 83       	std	Y+5, r22	; 0x05
    1cbc:	7e 83       	std	Y+6, r23	; 0x06
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1cc2:	2b ed       	ldi	r18, 0xDB	; 219
    1cc4:	3f e0       	ldi	r19, 0x0F	; 15
    1cc6:	49 e4       	ldi	r20, 0x49	; 73
    1cc8:	50 e4       	ldi	r21, 0x40	; 64
    1cca:	c3 01       	movw	r24, r6
    1ccc:	b2 01       	movw	r22, r4
    1cce:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	44 e3       	ldi	r20, 0x34	; 52
    1cd8:	53 e4       	ldi	r21, 0x43	; 67
    1cda:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1cde:	0e 94 36 12 	call	0x246c	; 0x246c <cos>
    1ce2:	2b 01       	movw	r4, r22
    1ce4:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1ce6:	2b ed       	ldi	r18, 0xDB	; 219
    1ce8:	3f e0       	ldi	r19, 0x0F	; 15
    1cea:	49 e4       	ldi	r20, 0x49	; 73
    1cec:	50 e4       	ldi	r21, 0x40	; 64
    1cee:	c8 01       	movw	r24, r16
    1cf0:	b7 01       	movw	r22, r14
    1cf2:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	44 e3       	ldi	r20, 0x34	; 52
    1cfc:	53 e4       	ldi	r21, 0x43	; 67
    1cfe:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1d02:	0e 94 36 12 	call	0x246c	; 0x246c <cos>
    1d06:	69 83       	std	Y+1, r22	; 0x01
    1d08:	7a 83       	std	Y+2, r23	; 0x02
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
    1d0e:	29 85       	ldd	r18, Y+9	; 0x09
    1d10:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d12:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d14:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d16:	c6 01       	movw	r24, r12
    1d18:	b5 01       	movw	r22, r10
    1d1a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1d1e:	2b ed       	ldi	r18, 0xDB	; 219
    1d20:	3f e0       	ldi	r19, 0x0F	; 15
    1d22:	49 e4       	ldi	r20, 0x49	; 73
    1d24:	50 e4       	ldi	r21, 0x40	; 64
    1d26:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	44 e3       	ldi	r20, 0x34	; 52
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1d42:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <sin>
    1d46:	4b 01       	movw	r8, r22
    1d48:	5c 01       	movw	r10, r24
    1d4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4e:	4f 81       	ldd	r20, Y+7	; 0x07
    1d50:	58 85       	ldd	r21, Y+8	; 0x08
    1d52:	ca 01       	movw	r24, r20
    1d54:	b9 01       	movw	r22, r18
    1d56:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1d5a:	6b 01       	movw	r12, r22
    1d5c:	7c 01       	movw	r14, r24
    1d5e:	29 81       	ldd	r18, Y+1	; 0x01
    1d60:	3a 81       	ldd	r19, Y+2	; 0x02
    1d62:	4b 81       	ldd	r20, Y+3	; 0x03
    1d64:	5c 81       	ldd	r21, Y+4	; 0x04
    1d66:	c3 01       	movw	r24, r6
    1d68:	b2 01       	movw	r22, r4
    1d6a:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1d6e:	a5 01       	movw	r20, r10
    1d70:	94 01       	movw	r18, r8
    1d72:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1d76:	a5 01       	movw	r20, r10
    1d78:	94 01       	movw	r18, r8
    1d7a:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1d7e:	9b 01       	movw	r18, r22
    1d80:	ac 01       	movw	r20, r24
    1d82:	c7 01       	movw	r24, r14
    1d84:	b6 01       	movw	r22, r12
    1d86:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3>
    1d8a:	6b 01       	movw	r12, r22
    1d8c:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
    1d8e:	9b 01       	movw	r18, r22
    1d90:	ac 01       	movw	r20, r24
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	80 e8       	ldi	r24, 0x80	; 128
    1d98:	9f e3       	ldi	r25, 0x3F	; 63
    1d9a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__subsf3>
    1d9e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <sqrt>
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	c7 01       	movw	r24, r14
    1da8:	b6 01       	movw	r22, r12
    1daa:	2d 87       	std	Y+13, r18	; 0x0d
    1dac:	3e 87       	std	Y+14, r19	; 0x0e
    1dae:	4f 87       	std	Y+15, r20	; 0x0f
    1db0:	58 8b       	std	Y+16, r21	; 0x10
    1db2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <sqrt>
    1db6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1db8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dba:	4f 85       	ldd	r20, Y+15	; 0x0f
    1dbc:	58 89       	ldd	r21, Y+16	; 0x10
    1dbe:	0e 94 df 11 	call	0x23be	; 0x23be <atan2>
    1dc2:	9b 01       	movw	r18, r22
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3>
    double distance = R*c;
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	38 e1       	ldi	r19, 0x18	; 24
    1dce:	47 ec       	ldi	r20, 0xC7	; 199
    1dd0:	55 e4       	ldi	r21, 0x45	; 69
    1dd2:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>

    return (float)distance;
}
    1dd6:	60 96       	adiw	r28, 0x10	; 16
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	7f 90       	pop	r7
    1dfc:	6f 90       	pop	r6
    1dfe:	5f 90       	pop	r5
    1e00:	4f 90       	pop	r4
    1e02:	08 95       	ret

00001e04 <get_nearest_station>:

//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(Station *all_stations, int num_stations, float lat, float lon)
{
    1e04:	2f 92       	push	r2
    1e06:	3f 92       	push	r3
    1e08:	4f 92       	push	r4
    1e0a:	5f 92       	push	r5
    1e0c:	6f 92       	push	r6
    1e0e:	7f 92       	push	r7
    1e10:	8f 92       	push	r8
    1e12:	9f 92       	push	r9
    1e14:	af 92       	push	r10
    1e16:	bf 92       	push	r11
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	7e 83       	std	Y+6, r23	; 0x06
    1e3a:	6d 83       	std	Y+5, r22	; 0x05
    1e3c:	29 01       	movw	r4, r18
    1e3e:	3a 01       	movw	r6, r20
    1e40:	ef 82       	std	Y+7, r14	; 0x07
    1e42:	f8 86       	std	Y+8, r15	; 0x08
    1e44:	09 87       	std	Y+9, r16	; 0x09
    1e46:	1a 87       	std	Y+10, r17	; 0x0a
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1e4c:	1c 86       	std	Y+12, r1	; 0x0c
    1e4e:	1b 86       	std	Y+11, r1	; 0x0b

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(Station *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    int station_index = -1, i;
    1e50:	2f ef       	ldi	r18, 0xFF	; 255
    1e52:	2b 83       	std	Y+3, r18	; 0x03
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	3c 83       	std	Y+4, r19	; 0x04
//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(Station *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    1e58:	21 2c       	mov	r2, r1
    1e5a:	31 2c       	mov	r3, r1
    1e5c:	80 e8       	ldi	r24, 0x80	; 128
    1e5e:	88 2e       	mov	r8, r24
    1e60:	9f eb       	ldi	r25, 0xBF	; 191
    1e62:	99 2e       	mov	r9, r25
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1e64:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e66:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e68:	ed 81       	ldd	r30, Y+5	; 0x05
    1e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e6c:	8e 17       	cp	r24, r30
    1e6e:	9f 07       	cpc	r25, r31
    1e70:	f4 f5       	brge	.+124    	; 0x1eee <get_nearest_station+0xea>
    {
        float temp = earth_distance(lat, lon, all_stations[i].lat, all_stations[i].lon);
    1e72:	e9 81       	ldd	r30, Y+1	; 0x01
    1e74:	fa 81       	ldd	r31, Y+2	; 0x02
    1e76:	a0 88       	ldd	r10, Z+16	; 0x10
    1e78:	b1 88       	ldd	r11, Z+17	; 0x11
    1e7a:	c2 88       	ldd	r12, Z+18	; 0x12
    1e7c:	d3 88       	ldd	r13, Z+19	; 0x13
    1e7e:	e4 84       	ldd	r14, Z+12	; 0x0c
    1e80:	f5 84       	ldd	r15, Z+13	; 0x0d
    1e82:	06 85       	ldd	r16, Z+14	; 0x0e
    1e84:	17 85       	ldd	r17, Z+15	; 0x0f
    1e86:	2f 81       	ldd	r18, Y+7	; 0x07
    1e88:	38 85       	ldd	r19, Y+8	; 0x08
    1e8a:	49 85       	ldd	r20, Y+9	; 0x09
    1e8c:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e8e:	c3 01       	movw	r24, r6
    1e90:	b2 01       	movw	r22, r4
    1e92:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <earth_distance>
    1e96:	7b 01       	movw	r14, r22
    1e98:	8c 01       	movw	r16, r24
        if ((temp < min_dist)||(min_dist==-1))
    1e9a:	91 01       	movw	r18, r2
    1e9c:	a4 01       	movw	r20, r8
    1e9e:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    1ea2:	87 fd       	sbrc	r24, 7
    1ea4:	0d c0       	rjmp	.+26     	; 0x1ec0 <get_nearest_station+0xbc>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f eb       	ldi	r21, 0xBF	; 191
    1eae:	b1 01       	movw	r22, r2
    1eb0:	c4 01       	movw	r24, r8
    1eb2:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	41 f0       	breq	.+16     	; 0x1eca <get_nearest_station+0xc6>
    1eba:	71 01       	movw	r14, r2
    1ebc:	84 01       	movw	r16, r8
    1ebe:	09 c0       	rjmp	.+18     	; 0x1ed2 <get_nearest_station+0xce>
    1ec0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ec2:	fb 83       	std	Y+3, r31	; 0x03
    1ec4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ec6:	2c 83       	std	Y+4, r18	; 0x04
    1ec8:	04 c0       	rjmp	.+8      	; 0x1ed2 <get_nearest_station+0xce>
    1eca:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ecc:	3b 83       	std	Y+3, r19	; 0x03
    1ece:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed0:	8c 83       	std	Y+4, r24	; 0x04
{
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1ed2:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ed4:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ed6:	31 96       	adiw	r30, 0x01	; 1
    1ed8:	fc 87       	std	Y+12, r31	; 0x0c
    1eda:	eb 87       	std	Y+11, r30	; 0x0b
    1edc:	29 81       	ldd	r18, Y+1	; 0x01
    1ede:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee0:	24 5e       	subi	r18, 0xE4	; 228
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	3a 83       	std	Y+2, r19	; 0x02
    1ee6:	29 83       	std	Y+1, r18	; 0x01
    1ee8:	17 01       	movw	r2, r14
    1eea:	48 01       	movw	r8, r16
    1eec:	bb cf       	rjmp	.-138    	; 0x1e64 <get_nearest_station+0x60>
            min_dist = temp;
        }
    }

    return station_index;
}
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	2c 96       	adiw	r28, 0x0c	; 12
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	8f 90       	pop	r8
    1f16:	7f 90       	pop	r7
    1f18:	6f 90       	pop	r6
    1f1a:	5f 90       	pop	r5
    1f1c:	4f 90       	pop	r4
    1f1e:	3f 90       	pop	r3
    1f20:	2f 90       	pop	r2
    1f22:	08 95       	ret

00001f24 <my_distance_to_station>:

//find the distance from the user to a particular station
float my_distance_to_station(UserData * user, Station *all_stations, int station_index)
{
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    return earth_distance(user->lat, user->lon, all_stations[station_index].lat, all_stations[station_index].lon);
    1f34:	ec e1       	ldi	r30, 0x1C	; 28
    1f36:	e4 9f       	mul	r30, r20
    1f38:	90 01       	movw	r18, r0
    1f3a:	e5 9f       	mul	r30, r21
    1f3c:	30 0d       	add	r19, r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	62 0f       	add	r22, r18
    1f42:	73 1f       	adc	r23, r19
    1f44:	fb 01       	movw	r30, r22
    1f46:	a0 88       	ldd	r10, Z+16	; 0x10
    1f48:	b1 88       	ldd	r11, Z+17	; 0x11
    1f4a:	c2 88       	ldd	r12, Z+18	; 0x12
    1f4c:	d3 88       	ldd	r13, Z+19	; 0x13
    1f4e:	e4 84       	ldd	r14, Z+12	; 0x0c
    1f50:	f5 84       	ldd	r15, Z+13	; 0x0d
    1f52:	06 85       	ldd	r16, Z+14	; 0x0e
    1f54:	17 85       	ldd	r17, Z+15	; 0x0f
    1f56:	fc 01       	movw	r30, r24
    1f58:	25 89       	ldd	r18, Z+21	; 0x15
    1f5a:	36 89       	ldd	r19, Z+22	; 0x16
    1f5c:	47 89       	ldd	r20, Z+23	; 0x17
    1f5e:	50 8d       	ldd	r21, Z+24	; 0x18
    1f60:	61 89       	ldd	r22, Z+17	; 0x11
    1f62:	72 89       	ldd	r23, Z+18	; 0x12
    1f64:	83 89       	ldd	r24, Z+19	; 0x13
    1f66:	94 89       	ldd	r25, Z+20	; 0x14
    1f68:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <earth_distance>
}
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	08 95       	ret

00001f7e <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1f7e:	2b ed       	ldi	r18, 0xDB	; 219
    1f80:	3f e0       	ldi	r19, 0x0F	; 15
    1f82:	49 e4       	ldi	r20, 0x49	; 73
    1f84:	50 e4       	ldi	r21, 0x40	; 64
    1f86:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	44 e3       	ldi	r20, 0x34	; 52
    1f90:	53 e4       	ldi	r21, 0x43	; 67
    1f92:	0e 94 39 12 	call	0x2472	; 0x2472 <__divsf3>
}
    1f96:	08 95       	ret

00001f98 <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(UserData *user)
{
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	ec 01       	movw	r28, r24
    1f9e:	fc 01       	movw	r30, r24
    int i;
    for (i=0; i<4; i++)
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (user->msg_type[i]=='\0')
    1fa4:	21 91       	ld	r18, Z+
    1fa6:	22 23       	and	r18, r18
    1fa8:	69 f1       	breq	.+90     	; 0x2004 <gps_locked+0x6c>

//make sure there is valid GPS data to work with
int gps_locked(UserData *user)
{
    int i;
    for (i=0; i<4; i++)
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	91 05       	cpc	r25, r1
    1fb0:	c9 f7       	brne	.-14     	; 0x1fa4 <gps_locked+0xc>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e8 0f       	add	r30, r24
    1fba:	f9 1f       	adc	r31, r25
            return 0;
    }

    for (i=0; i<4; i++)
    {
        if (user->utc_time[i]=='\0')
    1fbc:	20 85       	ldd	r18, Z+8	; 0x08
    1fbe:	22 23       	and	r18, r18
    1fc0:	09 f1       	breq	.+66     	; 0x2004 <gps_locked+0x6c>
    {
        if (user->msg_type[i]=='\0')
            return 0;
    }

    for (i=0; i<4; i++)
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	b1 f7       	brne	.-20     	; 0x1fb6 <gps_locked+0x1e>
    {
        if (user->utc_time[i]=='\0')
            return 0;
    }

    if ((user->lat==0)||(user->lon==0))
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	a9 01       	movw	r20, r18
    1fd0:	69 89       	ldd	r22, Y+17	; 0x11
    1fd2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd8:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	91 f0       	breq	.+36     	; 0x2004 <gps_locked+0x6c>
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	39 f0       	breq	.+14     	; 0x2004 <gps_locked+0x6c>
        return 0;

    if (user->checksum[0] != '*')
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	2a a9       	ldd	r18, Y+50	; 0x32
    1ffc:	2a 32       	cpi	r18, 0x2A	; 42
    1ffe:	21 f0       	breq	.+8      	; 0x2008 <gps_locked+0x70>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <gps_locked+0x70>
{
    int i;
    for (i=0; i<4; i++)
    {
        if (user->msg_type[i]=='\0')
            return 0;
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    if (user->checksum[0] != '*')
        return 0;

    return 1;

    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	08 95       	ret

0000200e <my_eeprom_read_int>:
//---- EEPROM Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    200e:	0e 94 88 1b 	call	0x3710	; 0x3710 <__eerd_byte_m1284p>
    return (temp_num);
}
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	08 95       	ret

00002016 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    2016:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__eerd_byte_m1284p>

0000201a <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    201a:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__eerd_dword_m1284p>

0000201e <my_eeprom_read_string>:
    201e:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__eerd_block_m1284p>

00002022 <main>:
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	1f 92       	push	r1
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <prepare_device>
    2038:	07 e9       	ldi	r16, 0x97	; 151
    203a:	14 e0       	ldi	r17, 0x04	; 4
    203c:	80 e1       	ldi	r24, 0x10	; 16
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 5d 16 	call	0x2cba	; 0x2cba <malloc>
    2044:	f8 01       	movw	r30, r16
    2046:	81 93       	st	Z+, r24
    2048:	91 93       	st	Z+, r25
    204a:	8f 01       	movw	r16, r30
    204c:	89 2b       	or	r24, r25
    204e:	09 f4       	brne	.+2      	; 0x2052 <main+0x30>
    2050:	32 c1       	rjmp	.+612    	; 0x22b6 <main+0x294>
    2052:	f4 e0       	ldi	r31, 0x04	; 4
    2054:	01 3b       	cpi	r16, 0xB1	; 177
    2056:	1f 07       	cpc	r17, r31
    2058:	89 f7       	brne	.-30     	; 0x203c <main+0x1a>
    205a:	85 e3       	ldi	r24, 0x35	; 53
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <malloc>
    2062:	90 93 16 04 	sts	0x0416, r25
    2066:	80 93 15 04 	sts	0x0415, r24
    206a:	89 2b       	or	r24, r25
    206c:	09 f4       	brne	.+2      	; 0x2070 <main+0x4e>
    206e:	23 c1       	rjmp	.+582    	; 0x22b6 <main+0x294>
    2070:	80 ee       	ldi	r24, 0xE0	; 224
    2072:	92 e0       	ldi	r25, 0x02	; 2
    2074:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    2078:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <database_load>
    207c:	2f e3       	ldi	r18, 0x3F	; 63
    207e:	8d e0       	ldi	r24, 0x0D	; 13
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	21 50       	subi	r18, 0x01	; 1
    2084:	80 40       	sbci	r24, 0x00	; 0
    2086:	90 40       	sbci	r25, 0x00	; 0
    2088:	e1 f7       	brne	.-8      	; 0x2082 <main+0x60>
    208a:	00 c0       	rjmp	.+0      	; 0x208c <main+0x6a>
    208c:	00 00       	nop
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	e8 2e       	mov	r14, r24
    2092:	f1 2c       	mov	r15, r1
    2094:	00 91 b0 03 	lds	r16, 0x03B0
    2098:	10 91 b1 03 	lds	r17, 0x03B1
    209c:	01 30       	cpi	r16, 0x01	; 1
    209e:	11 05       	cpc	r17, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <main+0x82>
    20a2:	79 c0       	rjmp	.+242    	; 0x2196 <main+0x174>
    20a4:	02 30       	cpi	r16, 0x02	; 2
    20a6:	11 05       	cpc	r17, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <main+0x8a>
    20aa:	72 c0       	rjmp	.+228    	; 0x2190 <main+0x16e>
    20ac:	01 2b       	or	r16, r17
    20ae:	91 f7       	brne	.-28     	; 0x2094 <main+0x72>
    20b0:	80 91 0d 04 	lds	r24, 0x040D
    20b4:	90 91 0e 04 	lds	r25, 0x040E
    20b8:	18 16       	cp	r1, r24
    20ba:	19 06       	cpc	r1, r25
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <main+0x9e>
    20be:	ac c0       	rjmp	.+344    	; 0x2218 <main+0x1f6>
    20c0:	0e 94 cb 01 	call	0x396	; 0x396 <enable_gps>
    20c4:	0e 94 03 06 	call	0xc06	; 0xc06 <print_all_callsigns>
    20c8:	80 91 15 04 	lds	r24, 0x0415
    20cc:	90 91 16 04 	lds	r25, 0x0416
    20d0:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <gps_locked>
    20d4:	89 2b       	or	r24, r25
    20d6:	09 f4       	brne	.+2      	; 0x20da <main+0xb8>
    20d8:	45 c0       	rjmp	.+138    	; 0x2164 <main+0x142>
    20da:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    20de:	84 ef       	ldi	r24, 0xF4	; 244
    20e0:	92 e0       	ldi	r25, 0x02	; 2
    20e2:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    20e6:	ef e9       	ldi	r30, 0x9F	; 159
    20e8:	f6 e8       	ldi	r31, 0x86	; 134
    20ea:	21 e0       	ldi	r18, 0x01	; 1
    20ec:	e1 50       	subi	r30, 0x01	; 1
    20ee:	f0 40       	sbci	r31, 0x00	; 0
    20f0:	20 40       	sbci	r18, 0x00	; 0
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <main+0xca>
    20f4:	00 c0       	rjmp	.+0      	; 0x20f6 <main+0xd4>
    20f6:	00 00       	nop
    20f8:	e0 91 15 04 	lds	r30, 0x0415
    20fc:	f0 91 16 04 	lds	r31, 0x0416
    2100:	61 89       	ldd	r22, Z+17	; 0x11
    2102:	72 89       	ldd	r23, Z+18	; 0x12
    2104:	83 89       	ldd	r24, Z+19	; 0x13
    2106:	94 89       	ldd	r25, Z+20	; 0x14
    2108:	43 e0       	ldi	r20, 0x03	; 3
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
    2110:	83 e2       	ldi	r24, 0x23	; 35
    2112:	94 ef       	ldi	r25, 0xF4	; 244
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <main+0xf2>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <main+0xf8>
    211a:	00 00       	nop
    211c:	8e ef       	ldi	r24, 0xFE	; 254
    211e:	92 e0       	ldi	r25, 0x02	; 2
    2120:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    2124:	e3 e2       	ldi	r30, 0x23	; 35
    2126:	f4 ef       	ldi	r31, 0xF4	; 244
    2128:	31 97       	sbiw	r30, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <main+0x106>
    212c:	00 c0       	rjmp	.+0      	; 0x212e <main+0x10c>
    212e:	00 00       	nop
    2130:	e0 91 15 04 	lds	r30, 0x0415
    2134:	f0 91 16 04 	lds	r31, 0x0416
    2138:	65 89       	ldd	r22, Z+21	; 0x15
    213a:	76 89       	ldd	r23, Z+22	; 0x16
    213c:	87 89       	ldd	r24, Z+23	; 0x17
    213e:	90 8d       	ldd	r25, Z+24	; 0x18
    2140:	43 e0       	ldi	r20, 0x03	; 3
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <string_write_float>
    2148:	ff eb       	ldi	r31, 0xBF	; 191
    214a:	27 e2       	ldi	r18, 0x27	; 39
    214c:	89 e0       	ldi	r24, 0x09	; 9
    214e:	f1 50       	subi	r31, 0x01	; 1
    2150:	20 40       	sbci	r18, 0x00	; 0
    2152:	80 40       	sbci	r24, 0x00	; 0
    2154:	e1 f7       	brne	.-8      	; 0x214e <main+0x12c>
    2156:	00 c0       	rjmp	.+0      	; 0x2158 <main+0x136>
    2158:	00 00       	nop
    215a:	0e 94 7c 07 	call	0xef8	; 0xef8 <show_nearest_station>
    215e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <print_gps_data>
    2162:	13 c0       	rjmp	.+38     	; 0x218a <main+0x168>
    2164:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	93 e0       	ldi	r25, 0x03	; 3
    216c:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    2170:	80 e1       	ldi	r24, 0x10	; 16
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    2178:	9f e7       	ldi	r25, 0x7F	; 127
    217a:	ea e1       	ldi	r30, 0x1A	; 26
    217c:	f6 e0       	ldi	r31, 0x06	; 6
    217e:	91 50       	subi	r25, 0x01	; 1
    2180:	e0 40       	sbci	r30, 0x00	; 0
    2182:	f0 40       	sbci	r31, 0x00	; 0
    2184:	e1 f7       	brne	.-8      	; 0x217e <main+0x15c>
    2186:	00 c0       	rjmp	.+0      	; 0x2188 <main+0x166>
    2188:	00 00       	nop
    218a:	0e 94 38 07 	call	0xe70	; 0xe70 <print_all_known_stations>
    218e:	82 cf       	rjmp	.-252    	; 0x2094 <main+0x72>
    2190:	0e 94 ed 03 	call	0x7da	; 0x7da <wait_for_update>
    2194:	7f cf       	rjmp	.-258    	; 0x2094 <main+0x72>
    2196:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>
    219a:	80 91 ac 03 	lds	r24, 0x03AC
    219e:	90 91 ad 03 	lds	r25, 0x03AD
    21a2:	89 2b       	or	r24, r25
    21a4:	a1 f4       	brne	.+40     	; 0x21ce <main+0x1ac>
    21a6:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    21aa:	8e e1       	ldi	r24, 0x1E	; 30
    21ac:	93 e0       	ldi	r25, 0x03	; 3
    21ae:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    21b2:	10 93 ad 03 	sts	0x03AD, r17
    21b6:	00 93 ac 03 	sts	0x03AC, r16
    21ba:	10 92 ab 03 	sts	0x03AB, r1
    21be:	10 92 aa 03 	sts	0x03AA, r1
    21c2:	10 92 af 03 	sts	0x03AF, r1
    21c6:	10 92 ae 03 	sts	0x03AE, r1
    21ca:	0e 94 a3 02 	call	0x546	; 0x546 <database_free>
    21ce:	90 91 0c 04 	lds	r25, 0x040C
    21d2:	80 91 0b 04 	lds	r24, 0x040B
    21d6:	98 17       	cp	r25, r24
    21d8:	09 f4       	brne	.+2      	; 0x21dc <main+0x1ba>
    21da:	43 c0       	rjmp	.+134    	; 0x2262 <main+0x240>
    21dc:	10 92 04 04 	sts	0x0404, r1
    21e0:	10 92 05 04 	sts	0x0405, r1
    21e4:	10 92 06 04 	sts	0x0406, r1
    21e8:	10 92 07 04 	sts	0x0407, r1
    21ec:	0e 94 30 03 	call	0x660	; 0x660 <getChar>
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	0e 94 1b 03 	call	0x636	; 0x636 <detectSerialEnd>
    21f6:	69 81       	ldd	r22, Y+1	; 0x01
    21f8:	89 2b       	or	r24, r25
    21fa:	19 f1       	breq	.+70     	; 0x2242 <main+0x220>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 50 03 	call	0x6a0	; 0x6a0 <terminate_serial>
    2204:	0e 94 80 05 	call	0xb00	; 0xb00 <check_database_integrity>
    2208:	80 91 aa 03 	lds	r24, 0x03AA
    220c:	90 91 ab 03 	lds	r25, 0x03AB
    2210:	89 2b       	or	r24, r25
    2212:	39 f0       	breq	.+14     	; 0x2222 <main+0x200>
    2214:	0e 94 44 05 	call	0xa88	; 0xa88 <wipe_eeprom>
    2218:	f0 92 b1 03 	sts	0x03B1, r15
    221c:	e0 92 b0 03 	sts	0x03B0, r14
    2220:	39 cf       	rjmp	.-398    	; 0x2094 <main+0x72>
    2222:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    2226:	87 e3       	ldi	r24, 0x37	; 55
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    222e:	2f e3       	ldi	r18, 0x3F	; 63
    2230:	8d e0       	ldi	r24, 0x0D	; 13
    2232:	93 e0       	ldi	r25, 0x03	; 3
    2234:	21 50       	subi	r18, 0x01	; 1
    2236:	80 40       	sbci	r24, 0x00	; 0
    2238:	90 40       	sbci	r25, 0x00	; 0
    223a:	e1 f7       	brne	.-8      	; 0x2234 <main+0x212>
    223c:	00 c0       	rjmp	.+0      	; 0x223e <main+0x21c>
    223e:	00 00       	nop
    2240:	29 cf       	rjmp	.-430    	; 0x2094 <main+0x72>
    2242:	80 91 ae 03 	lds	r24, 0x03AE
    2246:	90 91 af 03 	lds	r25, 0x03AF
    224a:	0e 94 96 1b 	call	0x372c	; 0x372c <__eewr_byte_m1284p>
    224e:	80 91 ae 03 	lds	r24, 0x03AE
    2252:	90 91 af 03 	lds	r25, 0x03AF
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	90 93 af 03 	sts	0x03AF, r25
    225c:	80 93 ae 03 	sts	0x03AE, r24
    2260:	19 cf       	rjmp	.-462    	; 0x2094 <main+0x72>
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	60 91 04 04 	lds	r22, 0x0404
    226e:	70 91 05 04 	lds	r23, 0x0405
    2272:	80 91 06 04 	lds	r24, 0x0406
    2276:	90 91 07 04 	lds	r25, 0x0407
    227a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3>
    227e:	60 93 04 04 	sts	0x0404, r22
    2282:	70 93 05 04 	sts	0x0405, r23
    2286:	80 93 06 04 	sts	0x0406, r24
    228a:	90 93 07 04 	sts	0x0407, r25
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e5       	ldi	r19, 0x50	; 80
    2292:	43 e4       	ldi	r20, 0x43	; 67
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 35 14 	call	0x286a	; 0x286a <__gesf2>
    229a:	18 16       	cp	r1, r24
    229c:	0c f0       	brlt	.+2      	; 0x22a0 <main+0x27e>
    229e:	fa ce       	rjmp	.-524    	; 0x2094 <main+0x72>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <terminate_serial>
    22a8:	60 e2       	ldi	r22, 0x20	; 32
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 8b 03 	call	0x716	; 0x716 <print_eeprom_contents>
    22b4:	af cf       	rjmp	.-162    	; 0x2214 <main+0x1f2>
    22b6:	0e 94 a7 08 	call	0x114e	; 0x114e <lcd_init>
    22ba:	8b e2       	ldi	r24, 0x2B	; 43
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	0e 94 93 0a 	call	0x1526	; 0x1526 <string_write>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0f 90       	pop	r0
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	08 95       	ret

000022d6 <__subsf3>:
    22d6:	50 58       	subi	r21, 0x80	; 128

000022d8 <__addsf3>:
    22d8:	bb 27       	eor	r27, r27
    22da:	aa 27       	eor	r26, r26
    22dc:	0e d0       	rcall	.+28     	; 0x22fa <__addsf3x>
    22de:	63 c2       	rjmp	.+1222   	; 0x27a6 <__fp_round>
    22e0:	2c d2       	rcall	.+1112   	; 0x273a <__fp_pscA>
    22e2:	30 f0       	brcs	.+12     	; 0x22f0 <__addsf3+0x18>
    22e4:	31 d2       	rcall	.+1122   	; 0x2748 <__fp_pscB>
    22e6:	20 f0       	brcs	.+8      	; 0x22f0 <__addsf3+0x18>
    22e8:	31 f4       	brne	.+12     	; 0x22f6 <__addsf3+0x1e>
    22ea:	9f 3f       	cpi	r25, 0xFF	; 255
    22ec:	11 f4       	brne	.+4      	; 0x22f2 <__addsf3+0x1a>
    22ee:	1e f4       	brtc	.+6      	; 0x22f6 <__addsf3+0x1e>
    22f0:	fc c1       	rjmp	.+1016   	; 0x26ea <__fp_nan>
    22f2:	0e f4       	brtc	.+2      	; 0x22f6 <__addsf3+0x1e>
    22f4:	e0 95       	com	r30
    22f6:	e7 fb       	bst	r30, 7
    22f8:	c9 c1       	rjmp	.+914    	; 0x268c <__fp_inf>

000022fa <__addsf3x>:
    22fa:	e9 2f       	mov	r30, r25
    22fc:	76 d2       	rcall	.+1260   	; 0x27ea <__fp_split3>
    22fe:	80 f3       	brcs	.-32     	; 0x22e0 <__addsf3+0x8>
    2300:	ba 17       	cp	r27, r26
    2302:	62 07       	cpc	r22, r18
    2304:	73 07       	cpc	r23, r19
    2306:	84 07       	cpc	r24, r20
    2308:	95 07       	cpc	r25, r21
    230a:	18 f0       	brcs	.+6      	; 0x2312 <__addsf3x+0x18>
    230c:	71 f4       	brne	.+28     	; 0x232a <__addsf3x+0x30>
    230e:	9e f5       	brtc	.+102    	; 0x2376 <__addsf3x+0x7c>
    2310:	a5 c2       	rjmp	.+1354   	; 0x285c <__fp_zero>
    2312:	0e f4       	brtc	.+2      	; 0x2316 <__addsf3x+0x1c>
    2314:	e0 95       	com	r30
    2316:	0b 2e       	mov	r0, r27
    2318:	ba 2f       	mov	r27, r26
    231a:	a0 2d       	mov	r26, r0
    231c:	0b 01       	movw	r0, r22
    231e:	b9 01       	movw	r22, r18
    2320:	90 01       	movw	r18, r0
    2322:	0c 01       	movw	r0, r24
    2324:	ca 01       	movw	r24, r20
    2326:	a0 01       	movw	r20, r0
    2328:	11 24       	eor	r1, r1
    232a:	ff 27       	eor	r31, r31
    232c:	59 1b       	sub	r21, r25
    232e:	99 f0       	breq	.+38     	; 0x2356 <__addsf3x+0x5c>
    2330:	59 3f       	cpi	r21, 0xF9	; 249
    2332:	50 f4       	brcc	.+20     	; 0x2348 <__addsf3x+0x4e>
    2334:	50 3e       	cpi	r21, 0xE0	; 224
    2336:	68 f1       	brcs	.+90     	; 0x2392 <__addsf3x+0x98>
    2338:	1a 16       	cp	r1, r26
    233a:	f0 40       	sbci	r31, 0x00	; 0
    233c:	a2 2f       	mov	r26, r18
    233e:	23 2f       	mov	r18, r19
    2340:	34 2f       	mov	r19, r20
    2342:	44 27       	eor	r20, r20
    2344:	58 5f       	subi	r21, 0xF8	; 248
    2346:	f3 cf       	rjmp	.-26     	; 0x232e <__addsf3x+0x34>
    2348:	46 95       	lsr	r20
    234a:	37 95       	ror	r19
    234c:	27 95       	ror	r18
    234e:	a7 95       	ror	r26
    2350:	f0 40       	sbci	r31, 0x00	; 0
    2352:	53 95       	inc	r21
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__addsf3x+0x4e>
    2356:	7e f4       	brtc	.+30     	; 0x2376 <__addsf3x+0x7c>
    2358:	1f 16       	cp	r1, r31
    235a:	ba 0b       	sbc	r27, r26
    235c:	62 0b       	sbc	r22, r18
    235e:	73 0b       	sbc	r23, r19
    2360:	84 0b       	sbc	r24, r20
    2362:	ba f0       	brmi	.+46     	; 0x2392 <__addsf3x+0x98>
    2364:	91 50       	subi	r25, 0x01	; 1
    2366:	a1 f0       	breq	.+40     	; 0x2390 <__addsf3x+0x96>
    2368:	ff 0f       	add	r31, r31
    236a:	bb 1f       	adc	r27, r27
    236c:	66 1f       	adc	r22, r22
    236e:	77 1f       	adc	r23, r23
    2370:	88 1f       	adc	r24, r24
    2372:	c2 f7       	brpl	.-16     	; 0x2364 <__addsf3x+0x6a>
    2374:	0e c0       	rjmp	.+28     	; 0x2392 <__addsf3x+0x98>
    2376:	ba 0f       	add	r27, r26
    2378:	62 1f       	adc	r22, r18
    237a:	73 1f       	adc	r23, r19
    237c:	84 1f       	adc	r24, r20
    237e:	48 f4       	brcc	.+18     	; 0x2392 <__addsf3x+0x98>
    2380:	87 95       	ror	r24
    2382:	77 95       	ror	r23
    2384:	67 95       	ror	r22
    2386:	b7 95       	ror	r27
    2388:	f7 95       	ror	r31
    238a:	9e 3f       	cpi	r25, 0xFE	; 254
    238c:	08 f0       	brcs	.+2      	; 0x2390 <__addsf3x+0x96>
    238e:	b3 cf       	rjmp	.-154    	; 0x22f6 <__addsf3+0x1e>
    2390:	93 95       	inc	r25
    2392:	88 0f       	add	r24, r24
    2394:	08 f0       	brcs	.+2      	; 0x2398 <__addsf3x+0x9e>
    2396:	99 27       	eor	r25, r25
    2398:	ee 0f       	add	r30, r30
    239a:	97 95       	ror	r25
    239c:	87 95       	ror	r24
    239e:	08 95       	ret
    23a0:	cc d1       	rcall	.+920    	; 0x273a <__fp_pscA>
    23a2:	58 f0       	brcs	.+22     	; 0x23ba <__addsf3x+0xc0>
    23a4:	80 e8       	ldi	r24, 0x80	; 128
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__addsf3x+0xb2>
    23aa:	9e ef       	ldi	r25, 0xFE	; 254
    23ac:	cd d1       	rcall	.+922    	; 0x2748 <__fp_pscB>
    23ae:	28 f0       	brcs	.+10     	; 0x23ba <__addsf3x+0xc0>
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	51 e0       	ldi	r21, 0x01	; 1
    23b4:	59 f4       	brne	.+22     	; 0x23cc <atan2+0xe>
    23b6:	5e ef       	ldi	r21, 0xFE	; 254
    23b8:	09 c0       	rjmp	.+18     	; 0x23cc <atan2+0xe>
    23ba:	97 c1       	rjmp	.+814    	; 0x26ea <__fp_nan>
    23bc:	4f c2       	rjmp	.+1182   	; 0x285c <__fp_zero>

000023be <atan2>:
    23be:	e9 2f       	mov	r30, r25
    23c0:	e0 78       	andi	r30, 0x80	; 128
    23c2:	13 d2       	rcall	.+1062   	; 0x27ea <__fp_split3>
    23c4:	68 f3       	brcs	.-38     	; 0x23a0 <__addsf3x+0xa6>
    23c6:	09 2e       	mov	r0, r25
    23c8:	05 2a       	or	r0, r21
    23ca:	c1 f3       	breq	.-16     	; 0x23bc <__addsf3x+0xc2>
    23cc:	26 17       	cp	r18, r22
    23ce:	37 07       	cpc	r19, r23
    23d0:	48 07       	cpc	r20, r24
    23d2:	59 07       	cpc	r21, r25
    23d4:	38 f0       	brcs	.+14     	; 0x23e4 <atan2+0x26>
    23d6:	0e 2e       	mov	r0, r30
    23d8:	07 f8       	bld	r0, 7
    23da:	e0 25       	eor	r30, r0
    23dc:	69 f0       	breq	.+26     	; 0x23f8 <atan2+0x3a>
    23de:	e0 25       	eor	r30, r0
    23e0:	e0 64       	ori	r30, 0x40	; 64
    23e2:	0a c0       	rjmp	.+20     	; 0x23f8 <atan2+0x3a>
    23e4:	ef 63       	ori	r30, 0x3F	; 63
    23e6:	07 f8       	bld	r0, 7
    23e8:	00 94       	com	r0
    23ea:	07 fa       	bst	r0, 7
    23ec:	db 01       	movw	r26, r22
    23ee:	b9 01       	movw	r22, r18
    23f0:	9d 01       	movw	r18, r26
    23f2:	dc 01       	movw	r26, r24
    23f4:	ca 01       	movw	r24, r20
    23f6:	ad 01       	movw	r20, r26
    23f8:	ef 93       	push	r30
    23fa:	4a d0       	rcall	.+148    	; 0x2490 <__divsf3_pse>
    23fc:	d4 d1       	rcall	.+936    	; 0x27a6 <__fp_round>
    23fe:	0a d0       	rcall	.+20     	; 0x2414 <atan>
    2400:	5f 91       	pop	r21
    2402:	55 23       	and	r21, r21
    2404:	31 f0       	breq	.+12     	; 0x2412 <atan2+0x54>
    2406:	2b ed       	ldi	r18, 0xDB	; 219
    2408:	3f e0       	ldi	r19, 0x0F	; 15
    240a:	49 e4       	ldi	r20, 0x49	; 73
    240c:	50 fd       	sbrc	r21, 0
    240e:	49 ec       	ldi	r20, 0xC9	; 201
    2410:	63 cf       	rjmp	.-314    	; 0x22d8 <__addsf3>
    2412:	08 95       	ret

00002414 <atan>:
    2414:	df 93       	push	r29
    2416:	dd 27       	eor	r29, r29
    2418:	b9 2f       	mov	r27, r25
    241a:	bf 77       	andi	r27, 0x7F	; 127
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	16 16       	cp	r1, r22
    2422:	17 06       	cpc	r1, r23
    2424:	48 07       	cpc	r20, r24
    2426:	5b 07       	cpc	r21, r27
    2428:	10 f4       	brcc	.+4      	; 0x242e <atan+0x1a>
    242a:	d9 2f       	mov	r29, r25
    242c:	22 d2       	rcall	.+1092   	; 0x2872 <inverse>
    242e:	9f 93       	push	r25
    2430:	8f 93       	push	r24
    2432:	7f 93       	push	r23
    2434:	6f 93       	push	r22
    2436:	b9 d3       	rcall	.+1906   	; 0x2baa <square>
    2438:	e4 eb       	ldi	r30, 0xB4	; 180
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	59 d1       	rcall	.+690    	; 0x26f0 <__fp_powser>
    243e:	b3 d1       	rcall	.+870    	; 0x27a6 <__fp_round>
    2440:	2f 91       	pop	r18
    2442:	3f 91       	pop	r19
    2444:	4f 91       	pop	r20
    2446:	5f 91       	pop	r21
    2448:	a5 d2       	rcall	.+1354   	; 0x2994 <__mulsf3x>
    244a:	dd 23       	and	r29, r29
    244c:	49 f0       	breq	.+18     	; 0x2460 <atan+0x4c>
    244e:	90 58       	subi	r25, 0x80	; 128
    2450:	a2 ea       	ldi	r26, 0xA2	; 162
    2452:	2a ed       	ldi	r18, 0xDA	; 218
    2454:	3f e0       	ldi	r19, 0x0F	; 15
    2456:	49 ec       	ldi	r20, 0xC9	; 201
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	d0 78       	andi	r29, 0x80	; 128
    245c:	5d 27       	eor	r21, r29
    245e:	4d df       	rcall	.-358    	; 0x22fa <__addsf3x>
    2460:	df 91       	pop	r29
    2462:	a1 c1       	rjmp	.+834    	; 0x27a6 <__fp_round>

00002464 <__cmpsf2>:
    2464:	ef d0       	rcall	.+478    	; 0x2644 <__fp_cmp>
    2466:	08 f4       	brcc	.+2      	; 0x246a <__cmpsf2+0x6>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	08 95       	ret

0000246c <cos>:
    246c:	75 d1       	rcall	.+746    	; 0x2758 <__fp_rempio2>
    246e:	e3 95       	inc	r30
    2470:	ab c1       	rjmp	.+854    	; 0x27c8 <__fp_sinus>

00002472 <__divsf3>:
    2472:	0c d0       	rcall	.+24     	; 0x248c <__divsf3x>
    2474:	98 c1       	rjmp	.+816    	; 0x27a6 <__fp_round>
    2476:	68 d1       	rcall	.+720    	; 0x2748 <__fp_pscB>
    2478:	40 f0       	brcs	.+16     	; 0x248a <__divsf3+0x18>
    247a:	5f d1       	rcall	.+702    	; 0x273a <__fp_pscA>
    247c:	30 f0       	brcs	.+12     	; 0x248a <__divsf3+0x18>
    247e:	21 f4       	brne	.+8      	; 0x2488 <__divsf3+0x16>
    2480:	5f 3f       	cpi	r21, 0xFF	; 255
    2482:	19 f0       	breq	.+6      	; 0x248a <__divsf3+0x18>
    2484:	03 c1       	rjmp	.+518    	; 0x268c <__fp_inf>
    2486:	51 11       	cpse	r21, r1
    2488:	ea c1       	rjmp	.+980    	; 0x285e <__fp_szero>
    248a:	2f c1       	rjmp	.+606    	; 0x26ea <__fp_nan>

0000248c <__divsf3x>:
    248c:	ae d1       	rcall	.+860    	; 0x27ea <__fp_split3>
    248e:	98 f3       	brcs	.-26     	; 0x2476 <__divsf3+0x4>

00002490 <__divsf3_pse>:
    2490:	99 23       	and	r25, r25
    2492:	c9 f3       	breq	.-14     	; 0x2486 <__divsf3+0x14>
    2494:	55 23       	and	r21, r21
    2496:	b1 f3       	breq	.-20     	; 0x2484 <__divsf3+0x12>
    2498:	95 1b       	sub	r25, r21
    249a:	55 0b       	sbc	r21, r21
    249c:	bb 27       	eor	r27, r27
    249e:	aa 27       	eor	r26, r26
    24a0:	62 17       	cp	r22, r18
    24a2:	73 07       	cpc	r23, r19
    24a4:	84 07       	cpc	r24, r20
    24a6:	38 f0       	brcs	.+14     	; 0x24b6 <__divsf3_pse+0x26>
    24a8:	9f 5f       	subi	r25, 0xFF	; 255
    24aa:	5f 4f       	sbci	r21, 0xFF	; 255
    24ac:	22 0f       	add	r18, r18
    24ae:	33 1f       	adc	r19, r19
    24b0:	44 1f       	adc	r20, r20
    24b2:	aa 1f       	adc	r26, r26
    24b4:	a9 f3       	breq	.-22     	; 0x24a0 <__divsf3_pse+0x10>
    24b6:	33 d0       	rcall	.+102    	; 0x251e <__divsf3_pse+0x8e>
    24b8:	0e 2e       	mov	r0, r30
    24ba:	3a f0       	brmi	.+14     	; 0x24ca <__divsf3_pse+0x3a>
    24bc:	e0 e8       	ldi	r30, 0x80	; 128
    24be:	30 d0       	rcall	.+96     	; 0x2520 <__divsf3_pse+0x90>
    24c0:	91 50       	subi	r25, 0x01	; 1
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	e6 95       	lsr	r30
    24c6:	00 1c       	adc	r0, r0
    24c8:	ca f7       	brpl	.-14     	; 0x24bc <__divsf3_pse+0x2c>
    24ca:	29 d0       	rcall	.+82     	; 0x251e <__divsf3_pse+0x8e>
    24cc:	fe 2f       	mov	r31, r30
    24ce:	27 d0       	rcall	.+78     	; 0x251e <__divsf3_pse+0x8e>
    24d0:	66 0f       	add	r22, r22
    24d2:	77 1f       	adc	r23, r23
    24d4:	88 1f       	adc	r24, r24
    24d6:	bb 1f       	adc	r27, r27
    24d8:	26 17       	cp	r18, r22
    24da:	37 07       	cpc	r19, r23
    24dc:	48 07       	cpc	r20, r24
    24de:	ab 07       	cpc	r26, r27
    24e0:	b0 e8       	ldi	r27, 0x80	; 128
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <__divsf3_pse+0x56>
    24e4:	bb 0b       	sbc	r27, r27
    24e6:	80 2d       	mov	r24, r0
    24e8:	bf 01       	movw	r22, r30
    24ea:	ff 27       	eor	r31, r31
    24ec:	93 58       	subi	r25, 0x83	; 131
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
    24f0:	2a f0       	brmi	.+10     	; 0x24fc <__divsf3_pse+0x6c>
    24f2:	9e 3f       	cpi	r25, 0xFE	; 254
    24f4:	51 05       	cpc	r21, r1
    24f6:	68 f0       	brcs	.+26     	; 0x2512 <__divsf3_pse+0x82>
    24f8:	c9 c0       	rjmp	.+402    	; 0x268c <__fp_inf>
    24fa:	b1 c1       	rjmp	.+866    	; 0x285e <__fp_szero>
    24fc:	5f 3f       	cpi	r21, 0xFF	; 255
    24fe:	ec f3       	brlt	.-6      	; 0x24fa <__divsf3_pse+0x6a>
    2500:	98 3e       	cpi	r25, 0xE8	; 232
    2502:	dc f3       	brlt	.-10     	; 0x24fa <__divsf3_pse+0x6a>
    2504:	86 95       	lsr	r24
    2506:	77 95       	ror	r23
    2508:	67 95       	ror	r22
    250a:	b7 95       	ror	r27
    250c:	f7 95       	ror	r31
    250e:	9f 5f       	subi	r25, 0xFF	; 255
    2510:	c9 f7       	brne	.-14     	; 0x2504 <__divsf3_pse+0x74>
    2512:	88 0f       	add	r24, r24
    2514:	91 1d       	adc	r25, r1
    2516:	96 95       	lsr	r25
    2518:	87 95       	ror	r24
    251a:	97 f9       	bld	r25, 7
    251c:	08 95       	ret
    251e:	e1 e0       	ldi	r30, 0x01	; 1
    2520:	66 0f       	add	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	88 1f       	adc	r24, r24
    2526:	bb 1f       	adc	r27, r27
    2528:	62 17       	cp	r22, r18
    252a:	73 07       	cpc	r23, r19
    252c:	84 07       	cpc	r24, r20
    252e:	ba 07       	cpc	r27, r26
    2530:	20 f0       	brcs	.+8      	; 0x253a <__divsf3_pse+0xaa>
    2532:	62 1b       	sub	r22, r18
    2534:	73 0b       	sbc	r23, r19
    2536:	84 0b       	sbc	r24, r20
    2538:	ba 0b       	sbc	r27, r26
    253a:	ee 1f       	adc	r30, r30
    253c:	88 f7       	brcc	.-30     	; 0x2520 <__divsf3_pse+0x90>
    253e:	e0 95       	com	r30
    2540:	08 95       	ret

00002542 <__fixsfsi>:
    2542:	04 d0       	rcall	.+8      	; 0x254c <__fixunssfsi>
    2544:	68 94       	set
    2546:	b1 11       	cpse	r27, r1
    2548:	8a c1       	rjmp	.+788    	; 0x285e <__fp_szero>
    254a:	08 95       	ret

0000254c <__fixunssfsi>:
    254c:	56 d1       	rcall	.+684    	; 0x27fa <__fp_splitA>
    254e:	88 f0       	brcs	.+34     	; 0x2572 <__fixunssfsi+0x26>
    2550:	9f 57       	subi	r25, 0x7F	; 127
    2552:	90 f0       	brcs	.+36     	; 0x2578 <__fixunssfsi+0x2c>
    2554:	b9 2f       	mov	r27, r25
    2556:	99 27       	eor	r25, r25
    2558:	b7 51       	subi	r27, 0x17	; 23
    255a:	a0 f0       	brcs	.+40     	; 0x2584 <__fixunssfsi+0x38>
    255c:	d1 f0       	breq	.+52     	; 0x2592 <__fixunssfsi+0x46>
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	88 1f       	adc	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	1a f0       	brmi	.+6      	; 0x256e <__fixunssfsi+0x22>
    2568:	ba 95       	dec	r27
    256a:	c9 f7       	brne	.-14     	; 0x255e <__fixunssfsi+0x12>
    256c:	12 c0       	rjmp	.+36     	; 0x2592 <__fixunssfsi+0x46>
    256e:	b1 30       	cpi	r27, 0x01	; 1
    2570:	81 f0       	breq	.+32     	; 0x2592 <__fixunssfsi+0x46>
    2572:	74 d1       	rcall	.+744    	; 0x285c <__fp_zero>
    2574:	b1 e0       	ldi	r27, 0x01	; 1
    2576:	08 95       	ret
    2578:	71 c1       	rjmp	.+738    	; 0x285c <__fp_zero>
    257a:	67 2f       	mov	r22, r23
    257c:	78 2f       	mov	r23, r24
    257e:	88 27       	eor	r24, r24
    2580:	b8 5f       	subi	r27, 0xF8	; 248
    2582:	39 f0       	breq	.+14     	; 0x2592 <__fixunssfsi+0x46>
    2584:	b9 3f       	cpi	r27, 0xF9	; 249
    2586:	cc f3       	brlt	.-14     	; 0x257a <__fixunssfsi+0x2e>
    2588:	86 95       	lsr	r24
    258a:	77 95       	ror	r23
    258c:	67 95       	ror	r22
    258e:	b3 95       	inc	r27
    2590:	d9 f7       	brne	.-10     	; 0x2588 <__fixunssfsi+0x3c>
    2592:	3e f4       	brtc	.+14     	; 0x25a2 <__fixunssfsi+0x56>
    2594:	90 95       	com	r25
    2596:	80 95       	com	r24
    2598:	70 95       	com	r23
    259a:	61 95       	neg	r22
    259c:	7f 4f       	sbci	r23, 0xFF	; 255
    259e:	8f 4f       	sbci	r24, 0xFF	; 255
    25a0:	9f 4f       	sbci	r25, 0xFF	; 255
    25a2:	08 95       	ret

000025a4 <__floatunsisf>:
    25a4:	e8 94       	clt
    25a6:	09 c0       	rjmp	.+18     	; 0x25ba <__floatsisf+0x12>

000025a8 <__floatsisf>:
    25a8:	97 fb       	bst	r25, 7
    25aa:	3e f4       	brtc	.+14     	; 0x25ba <__floatsisf+0x12>
    25ac:	90 95       	com	r25
    25ae:	80 95       	com	r24
    25b0:	70 95       	com	r23
    25b2:	61 95       	neg	r22
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	8f 4f       	sbci	r24, 0xFF	; 255
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	99 23       	and	r25, r25
    25bc:	a9 f0       	breq	.+42     	; 0x25e8 <__floatsisf+0x40>
    25be:	f9 2f       	mov	r31, r25
    25c0:	96 e9       	ldi	r25, 0x96	; 150
    25c2:	bb 27       	eor	r27, r27
    25c4:	93 95       	inc	r25
    25c6:	f6 95       	lsr	r31
    25c8:	87 95       	ror	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	b7 95       	ror	r27
    25d0:	f1 11       	cpse	r31, r1
    25d2:	f8 cf       	rjmp	.-16     	; 0x25c4 <__floatsisf+0x1c>
    25d4:	fa f4       	brpl	.+62     	; 0x2614 <__floatsisf+0x6c>
    25d6:	bb 0f       	add	r27, r27
    25d8:	11 f4       	brne	.+4      	; 0x25de <__floatsisf+0x36>
    25da:	60 ff       	sbrs	r22, 0
    25dc:	1b c0       	rjmp	.+54     	; 0x2614 <__floatsisf+0x6c>
    25de:	6f 5f       	subi	r22, 0xFF	; 255
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	8f 4f       	sbci	r24, 0xFF	; 255
    25e4:	9f 4f       	sbci	r25, 0xFF	; 255
    25e6:	16 c0       	rjmp	.+44     	; 0x2614 <__floatsisf+0x6c>
    25e8:	88 23       	and	r24, r24
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <__floatsisf+0x48>
    25ec:	96 e9       	ldi	r25, 0x96	; 150
    25ee:	11 c0       	rjmp	.+34     	; 0x2612 <__floatsisf+0x6a>
    25f0:	77 23       	and	r23, r23
    25f2:	21 f0       	breq	.+8      	; 0x25fc <__floatsisf+0x54>
    25f4:	9e e8       	ldi	r25, 0x8E	; 142
    25f6:	87 2f       	mov	r24, r23
    25f8:	76 2f       	mov	r23, r22
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <__floatsisf+0x5e>
    25fc:	66 23       	and	r22, r22
    25fe:	71 f0       	breq	.+28     	; 0x261c <__floatsisf+0x74>
    2600:	96 e8       	ldi	r25, 0x86	; 134
    2602:	86 2f       	mov	r24, r22
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	2a f0       	brmi	.+10     	; 0x2614 <__floatsisf+0x6c>
    260a:	9a 95       	dec	r25
    260c:	66 0f       	add	r22, r22
    260e:	77 1f       	adc	r23, r23
    2610:	88 1f       	adc	r24, r24
    2612:	da f7       	brpl	.-10     	; 0x260a <__floatsisf+0x62>
    2614:	88 0f       	add	r24, r24
    2616:	96 95       	lsr	r25
    2618:	87 95       	ror	r24
    261a:	97 f9       	bld	r25, 7
    261c:	08 95       	ret

0000261e <floor>:
    261e:	07 d1       	rcall	.+526    	; 0x282e <__fp_trunc>
    2620:	80 f0       	brcs	.+32     	; 0x2642 <floor+0x24>
    2622:	9f 37       	cpi	r25, 0x7F	; 127
    2624:	40 f4       	brcc	.+16     	; 0x2636 <floor+0x18>
    2626:	91 11       	cpse	r25, r1
    2628:	0e f0       	brts	.+2      	; 0x262c <floor+0xe>
    262a:	19 c1       	rjmp	.+562    	; 0x285e <__fp_szero>
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	9f eb       	ldi	r25, 0xBF	; 191
    2634:	08 95       	ret
    2636:	26 f4       	brtc	.+8      	; 0x2640 <floor+0x22>
    2638:	1b 16       	cp	r1, r27
    263a:	61 1d       	adc	r22, r1
    263c:	71 1d       	adc	r23, r1
    263e:	81 1d       	adc	r24, r1
    2640:	2b c0       	rjmp	.+86     	; 0x2698 <__fp_mintl>
    2642:	45 c0       	rjmp	.+138    	; 0x26ce <__fp_mpack>

00002644 <__fp_cmp>:
    2644:	99 0f       	add	r25, r25
    2646:	00 08       	sbc	r0, r0
    2648:	55 0f       	add	r21, r21
    264a:	aa 0b       	sbc	r26, r26
    264c:	e0 e8       	ldi	r30, 0x80	; 128
    264e:	fe ef       	ldi	r31, 0xFE	; 254
    2650:	16 16       	cp	r1, r22
    2652:	17 06       	cpc	r1, r23
    2654:	e8 07       	cpc	r30, r24
    2656:	f9 07       	cpc	r31, r25
    2658:	c0 f0       	brcs	.+48     	; 0x268a <__fp_cmp+0x46>
    265a:	12 16       	cp	r1, r18
    265c:	13 06       	cpc	r1, r19
    265e:	e4 07       	cpc	r30, r20
    2660:	f5 07       	cpc	r31, r21
    2662:	98 f0       	brcs	.+38     	; 0x268a <__fp_cmp+0x46>
    2664:	62 1b       	sub	r22, r18
    2666:	73 0b       	sbc	r23, r19
    2668:	84 0b       	sbc	r24, r20
    266a:	95 0b       	sbc	r25, r21
    266c:	39 f4       	brne	.+14     	; 0x267c <__fp_cmp+0x38>
    266e:	0a 26       	eor	r0, r26
    2670:	61 f0       	breq	.+24     	; 0x268a <__fp_cmp+0x46>
    2672:	23 2b       	or	r18, r19
    2674:	24 2b       	or	r18, r20
    2676:	25 2b       	or	r18, r21
    2678:	21 f4       	brne	.+8      	; 0x2682 <__fp_cmp+0x3e>
    267a:	08 95       	ret
    267c:	0a 26       	eor	r0, r26
    267e:	09 f4       	brne	.+2      	; 0x2682 <__fp_cmp+0x3e>
    2680:	a1 40       	sbci	r26, 0x01	; 1
    2682:	a6 95       	lsr	r26
    2684:	8f ef       	ldi	r24, 0xFF	; 255
    2686:	81 1d       	adc	r24, r1
    2688:	81 1d       	adc	r24, r1
    268a:	08 95       	ret

0000268c <__fp_inf>:
    268c:	97 f9       	bld	r25, 7
    268e:	9f 67       	ori	r25, 0x7F	; 127
    2690:	80 e8       	ldi	r24, 0x80	; 128
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	08 95       	ret

00002698 <__fp_mintl>:
    2698:	88 23       	and	r24, r24
    269a:	71 f4       	brne	.+28     	; 0x26b8 <__fp_mintl+0x20>
    269c:	77 23       	and	r23, r23
    269e:	21 f0       	breq	.+8      	; 0x26a8 <__fp_mintl+0x10>
    26a0:	98 50       	subi	r25, 0x08	; 8
    26a2:	87 2b       	or	r24, r23
    26a4:	76 2f       	mov	r23, r22
    26a6:	07 c0       	rjmp	.+14     	; 0x26b6 <__fp_mintl+0x1e>
    26a8:	66 23       	and	r22, r22
    26aa:	11 f4       	brne	.+4      	; 0x26b0 <__fp_mintl+0x18>
    26ac:	99 27       	eor	r25, r25
    26ae:	0d c0       	rjmp	.+26     	; 0x26ca <__fp_mintl+0x32>
    26b0:	90 51       	subi	r25, 0x10	; 16
    26b2:	86 2b       	or	r24, r22
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	2a f0       	brmi	.+10     	; 0x26c4 <__fp_mintl+0x2c>
    26ba:	9a 95       	dec	r25
    26bc:	66 0f       	add	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	da f7       	brpl	.-10     	; 0x26ba <__fp_mintl+0x22>
    26c4:	88 0f       	add	r24, r24
    26c6:	96 95       	lsr	r25
    26c8:	87 95       	ror	r24
    26ca:	97 f9       	bld	r25, 7
    26cc:	08 95       	ret

000026ce <__fp_mpack>:
    26ce:	9f 3f       	cpi	r25, 0xFF	; 255
    26d0:	31 f0       	breq	.+12     	; 0x26de <__fp_mpack_finite+0xc>

000026d2 <__fp_mpack_finite>:
    26d2:	91 50       	subi	r25, 0x01	; 1
    26d4:	20 f4       	brcc	.+8      	; 0x26de <__fp_mpack_finite+0xc>
    26d6:	87 95       	ror	r24
    26d8:	77 95       	ror	r23
    26da:	67 95       	ror	r22
    26dc:	b7 95       	ror	r27
    26de:	88 0f       	add	r24, r24
    26e0:	91 1d       	adc	r25, r1
    26e2:	96 95       	lsr	r25
    26e4:	87 95       	ror	r24
    26e6:	97 f9       	bld	r25, 7
    26e8:	08 95       	ret

000026ea <__fp_nan>:
    26ea:	9f ef       	ldi	r25, 0xFF	; 255
    26ec:	80 ec       	ldi	r24, 0xC0	; 192
    26ee:	08 95       	ret

000026f0 <__fp_powser>:
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	1f 93       	push	r17
    26f6:	0f 93       	push	r16
    26f8:	ff 92       	push	r15
    26fa:	ef 92       	push	r14
    26fc:	df 92       	push	r13
    26fe:	7b 01       	movw	r14, r22
    2700:	8c 01       	movw	r16, r24
    2702:	68 94       	set
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <__fp_powser+0x20>
    2706:	da 2e       	mov	r13, r26
    2708:	ef 01       	movw	r28, r30
    270a:	44 d1       	rcall	.+648    	; 0x2994 <__mulsf3x>
    270c:	fe 01       	movw	r30, r28
    270e:	e8 94       	clt
    2710:	a5 91       	lpm	r26, Z+
    2712:	25 91       	lpm	r18, Z+
    2714:	35 91       	lpm	r19, Z+
    2716:	45 91       	lpm	r20, Z+
    2718:	55 91       	lpm	r21, Z+
    271a:	ae f3       	brts	.-22     	; 0x2706 <__fp_powser+0x16>
    271c:	ef 01       	movw	r28, r30
    271e:	ed dd       	rcall	.-1062   	; 0x22fa <__addsf3x>
    2720:	fe 01       	movw	r30, r28
    2722:	97 01       	movw	r18, r14
    2724:	a8 01       	movw	r20, r16
    2726:	da 94       	dec	r13
    2728:	79 f7       	brne	.-34     	; 0x2708 <__fp_powser+0x18>
    272a:	df 90       	pop	r13
    272c:	ef 90       	pop	r14
    272e:	ff 90       	pop	r15
    2730:	0f 91       	pop	r16
    2732:	1f 91       	pop	r17
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <__fp_pscA>:
    273a:	00 24       	eor	r0, r0
    273c:	0a 94       	dec	r0
    273e:	16 16       	cp	r1, r22
    2740:	17 06       	cpc	r1, r23
    2742:	18 06       	cpc	r1, r24
    2744:	09 06       	cpc	r0, r25
    2746:	08 95       	ret

00002748 <__fp_pscB>:
    2748:	00 24       	eor	r0, r0
    274a:	0a 94       	dec	r0
    274c:	12 16       	cp	r1, r18
    274e:	13 06       	cpc	r1, r19
    2750:	14 06       	cpc	r1, r20
    2752:	05 06       	cpc	r0, r21
    2754:	08 95       	ret
    2756:	c9 cf       	rjmp	.-110    	; 0x26ea <__fp_nan>

00002758 <__fp_rempio2>:
    2758:	50 d0       	rcall	.+160    	; 0x27fa <__fp_splitA>
    275a:	e8 f3       	brcs	.-6      	; 0x2756 <__fp_pscB+0xe>
    275c:	e8 94       	clt
    275e:	e0 e0       	ldi	r30, 0x00	; 0
    2760:	bb 27       	eor	r27, r27
    2762:	9f 57       	subi	r25, 0x7F	; 127
    2764:	f0 f0       	brcs	.+60     	; 0x27a2 <__fp_rempio2+0x4a>
    2766:	2a ed       	ldi	r18, 0xDA	; 218
    2768:	3f e0       	ldi	r19, 0x0F	; 15
    276a:	49 ec       	ldi	r20, 0xC9	; 201
    276c:	06 c0       	rjmp	.+12     	; 0x277a <__fp_rempio2+0x22>
    276e:	ee 0f       	add	r30, r30
    2770:	bb 0f       	add	r27, r27
    2772:	66 1f       	adc	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	88 1f       	adc	r24, r24
    2778:	28 f0       	brcs	.+10     	; 0x2784 <__fp_rempio2+0x2c>
    277a:	b2 3a       	cpi	r27, 0xA2	; 162
    277c:	62 07       	cpc	r22, r18
    277e:	73 07       	cpc	r23, r19
    2780:	84 07       	cpc	r24, r20
    2782:	28 f0       	brcs	.+10     	; 0x278e <__fp_rempio2+0x36>
    2784:	b2 5a       	subi	r27, 0xA2	; 162
    2786:	62 0b       	sbc	r22, r18
    2788:	73 0b       	sbc	r23, r19
    278a:	84 0b       	sbc	r24, r20
    278c:	e3 95       	inc	r30
    278e:	9a 95       	dec	r25
    2790:	72 f7       	brpl	.-36     	; 0x276e <__fp_rempio2+0x16>
    2792:	80 38       	cpi	r24, 0x80	; 128
    2794:	30 f4       	brcc	.+12     	; 0x27a2 <__fp_rempio2+0x4a>
    2796:	9a 95       	dec	r25
    2798:	bb 0f       	add	r27, r27
    279a:	66 1f       	adc	r22, r22
    279c:	77 1f       	adc	r23, r23
    279e:	88 1f       	adc	r24, r24
    27a0:	d2 f7       	brpl	.-12     	; 0x2796 <__fp_rempio2+0x3e>
    27a2:	90 48       	sbci	r25, 0x80	; 128
    27a4:	96 cf       	rjmp	.-212    	; 0x26d2 <__fp_mpack_finite>

000027a6 <__fp_round>:
    27a6:	09 2e       	mov	r0, r25
    27a8:	03 94       	inc	r0
    27aa:	00 0c       	add	r0, r0
    27ac:	11 f4       	brne	.+4      	; 0x27b2 <__fp_round+0xc>
    27ae:	88 23       	and	r24, r24
    27b0:	52 f0       	brmi	.+20     	; 0x27c6 <__fp_round+0x20>
    27b2:	bb 0f       	add	r27, r27
    27b4:	40 f4       	brcc	.+16     	; 0x27c6 <__fp_round+0x20>
    27b6:	bf 2b       	or	r27, r31
    27b8:	11 f4       	brne	.+4      	; 0x27be <__fp_round+0x18>
    27ba:	60 ff       	sbrs	r22, 0
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <__fp_round+0x20>
    27be:	6f 5f       	subi	r22, 0xFF	; 255
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	8f 4f       	sbci	r24, 0xFF	; 255
    27c4:	9f 4f       	sbci	r25, 0xFF	; 255
    27c6:	08 95       	ret

000027c8 <__fp_sinus>:
    27c8:	ef 93       	push	r30
    27ca:	e0 ff       	sbrs	r30, 0
    27cc:	06 c0       	rjmp	.+12     	; 0x27da <__fp_sinus+0x12>
    27ce:	a2 ea       	ldi	r26, 0xA2	; 162
    27d0:	2a ed       	ldi	r18, 0xDA	; 218
    27d2:	3f e0       	ldi	r19, 0x0F	; 15
    27d4:	49 ec       	ldi	r20, 0xC9	; 201
    27d6:	5f eb       	ldi	r21, 0xBF	; 191
    27d8:	90 dd       	rcall	.-1248   	; 0x22fa <__addsf3x>
    27da:	e5 df       	rcall	.-54     	; 0x27a6 <__fp_round>
    27dc:	0f 90       	pop	r0
    27de:	03 94       	inc	r0
    27e0:	01 fc       	sbrc	r0, 1
    27e2:	90 58       	subi	r25, 0x80	; 128
    27e4:	e1 ee       	ldi	r30, 0xE1	; 225
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	1b c2       	rjmp	.+1078   	; 0x2c20 <__fp_powsodd>

000027ea <__fp_split3>:
    27ea:	57 fd       	sbrc	r21, 7
    27ec:	90 58       	subi	r25, 0x80	; 128
    27ee:	44 0f       	add	r20, r20
    27f0:	55 1f       	adc	r21, r21
    27f2:	59 f0       	breq	.+22     	; 0x280a <__fp_splitA+0x10>
    27f4:	5f 3f       	cpi	r21, 0xFF	; 255
    27f6:	71 f0       	breq	.+28     	; 0x2814 <__fp_splitA+0x1a>
    27f8:	47 95       	ror	r20

000027fa <__fp_splitA>:
    27fa:	88 0f       	add	r24, r24
    27fc:	97 fb       	bst	r25, 7
    27fe:	99 1f       	adc	r25, r25
    2800:	61 f0       	breq	.+24     	; 0x281a <__fp_splitA+0x20>
    2802:	9f 3f       	cpi	r25, 0xFF	; 255
    2804:	79 f0       	breq	.+30     	; 0x2824 <__fp_splitA+0x2a>
    2806:	87 95       	ror	r24
    2808:	08 95       	ret
    280a:	12 16       	cp	r1, r18
    280c:	13 06       	cpc	r1, r19
    280e:	14 06       	cpc	r1, r20
    2810:	55 1f       	adc	r21, r21
    2812:	f2 cf       	rjmp	.-28     	; 0x27f8 <__fp_split3+0xe>
    2814:	46 95       	lsr	r20
    2816:	f1 df       	rcall	.-30     	; 0x27fa <__fp_splitA>
    2818:	08 c0       	rjmp	.+16     	; 0x282a <__fp_splitA+0x30>
    281a:	16 16       	cp	r1, r22
    281c:	17 06       	cpc	r1, r23
    281e:	18 06       	cpc	r1, r24
    2820:	99 1f       	adc	r25, r25
    2822:	f1 cf       	rjmp	.-30     	; 0x2806 <__fp_splitA+0xc>
    2824:	86 95       	lsr	r24
    2826:	71 05       	cpc	r23, r1
    2828:	61 05       	cpc	r22, r1
    282a:	08 94       	sec
    282c:	08 95       	ret

0000282e <__fp_trunc>:
    282e:	e5 df       	rcall	.-54     	; 0x27fa <__fp_splitA>
    2830:	a0 f0       	brcs	.+40     	; 0x285a <__fp_trunc+0x2c>
    2832:	be e7       	ldi	r27, 0x7E	; 126
    2834:	b9 17       	cp	r27, r25
    2836:	88 f4       	brcc	.+34     	; 0x285a <__fp_trunc+0x2c>
    2838:	bb 27       	eor	r27, r27
    283a:	9f 38       	cpi	r25, 0x8F	; 143
    283c:	60 f4       	brcc	.+24     	; 0x2856 <__fp_trunc+0x28>
    283e:	16 16       	cp	r1, r22
    2840:	b1 1d       	adc	r27, r1
    2842:	67 2f       	mov	r22, r23
    2844:	78 2f       	mov	r23, r24
    2846:	88 27       	eor	r24, r24
    2848:	98 5f       	subi	r25, 0xF8	; 248
    284a:	f7 cf       	rjmp	.-18     	; 0x283a <__fp_trunc+0xc>
    284c:	86 95       	lsr	r24
    284e:	77 95       	ror	r23
    2850:	67 95       	ror	r22
    2852:	b1 1d       	adc	r27, r1
    2854:	93 95       	inc	r25
    2856:	96 39       	cpi	r25, 0x96	; 150
    2858:	c8 f3       	brcs	.-14     	; 0x284c <__fp_trunc+0x1e>
    285a:	08 95       	ret

0000285c <__fp_zero>:
    285c:	e8 94       	clt

0000285e <__fp_szero>:
    285e:	bb 27       	eor	r27, r27
    2860:	66 27       	eor	r22, r22
    2862:	77 27       	eor	r23, r23
    2864:	cb 01       	movw	r24, r22
    2866:	97 f9       	bld	r25, 7
    2868:	08 95       	ret

0000286a <__gesf2>:
    286a:	ec de       	rcall	.-552    	; 0x2644 <__fp_cmp>
    286c:	08 f4       	brcc	.+2      	; 0x2870 <__gesf2+0x6>
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	08 95       	ret

00002872 <inverse>:
    2872:	9b 01       	movw	r18, r22
    2874:	ac 01       	movw	r20, r24
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	80 e8       	ldi	r24, 0x80	; 128
    287c:	9f e3       	ldi	r25, 0x3F	; 63
    287e:	f9 cd       	rjmp	.-1038   	; 0x2472 <__divsf3>

00002880 <log10>:
    2880:	0a d0       	rcall	.+20     	; 0x2896 <log>
    2882:	29 ed       	ldi	r18, 0xD9	; 217
    2884:	3b e5       	ldi	r19, 0x5B	; 91
    2886:	4e ed       	ldi	r20, 0xDE	; 222
    2888:	5e e3       	ldi	r21, 0x3E	; 62
    288a:	78 c0       	rjmp	.+240    	; 0x297c <__mulsf3>
    288c:	0e f0       	brts	.+2      	; 0x2890 <log10+0x10>
    288e:	1f cf       	rjmp	.-450    	; 0x26ce <__fp_mpack>
    2890:	2c cf       	rjmp	.-424    	; 0x26ea <__fp_nan>
    2892:	68 94       	set
    2894:	fb ce       	rjmp	.-522    	; 0x268c <__fp_inf>

00002896 <log>:
    2896:	b1 df       	rcall	.-158    	; 0x27fa <__fp_splitA>
    2898:	c8 f3       	brcs	.-14     	; 0x288c <log10+0xc>
    289a:	99 23       	and	r25, r25
    289c:	d1 f3       	breq	.-12     	; 0x2892 <log10+0x12>
    289e:	c6 f3       	brts	.-16     	; 0x2890 <log10+0x10>
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	1f 93       	push	r17
    28a6:	0f 93       	push	r16
    28a8:	ff 92       	push	r15
    28aa:	c9 2f       	mov	r28, r25
    28ac:	dd 27       	eor	r29, r29
    28ae:	88 23       	and	r24, r24
    28b0:	2a f0       	brmi	.+10     	; 0x28bc <log+0x26>
    28b2:	21 97       	sbiw	r28, 0x01	; 1
    28b4:	66 0f       	add	r22, r22
    28b6:	77 1f       	adc	r23, r23
    28b8:	88 1f       	adc	r24, r24
    28ba:	da f7       	brpl	.-10     	; 0x28b2 <log+0x1c>
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f eb       	ldi	r21, 0xBF	; 191
    28c4:	9f e3       	ldi	r25, 0x3F	; 63
    28c6:	88 39       	cpi	r24, 0x98	; 152
    28c8:	20 f0       	brcs	.+8      	; 0x28d2 <log+0x3c>
    28ca:	80 3e       	cpi	r24, 0xE0	; 224
    28cc:	30 f0       	brcs	.+12     	; 0x28da <log+0x44>
    28ce:	21 96       	adiw	r28, 0x01	; 1
    28d0:	8f 77       	andi	r24, 0x7F	; 127
    28d2:	02 dd       	rcall	.-1532   	; 0x22d8 <__addsf3>
    28d4:	ef ef       	ldi	r30, 0xFF	; 255
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	03 c0       	rjmp	.+6      	; 0x28e0 <log+0x4a>
    28da:	fe dc       	rcall	.-1540   	; 0x22d8 <__addsf3>
    28dc:	ec e2       	ldi	r30, 0x2C	; 44
    28de:	f1 e0       	ldi	r31, 0x01	; 1
    28e0:	07 df       	rcall	.-498    	; 0x26f0 <__fp_powser>
    28e2:	8b 01       	movw	r16, r22
    28e4:	be 01       	movw	r22, r28
    28e6:	ec 01       	movw	r28, r24
    28e8:	fb 2e       	mov	r15, r27
    28ea:	6f 57       	subi	r22, 0x7F	; 127
    28ec:	71 09       	sbc	r23, r1
    28ee:	75 95       	asr	r23
    28f0:	77 1f       	adc	r23, r23
    28f2:	88 0b       	sbc	r24, r24
    28f4:	99 0b       	sbc	r25, r25
    28f6:	58 de       	rcall	.-848    	; 0x25a8 <__floatsisf>
    28f8:	28 e1       	ldi	r18, 0x18	; 24
    28fa:	32 e7       	ldi	r19, 0x72	; 114
    28fc:	41 e3       	ldi	r20, 0x31	; 49
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	49 d0       	rcall	.+146    	; 0x2994 <__mulsf3x>
    2902:	af 2d       	mov	r26, r15
    2904:	98 01       	movw	r18, r16
    2906:	ae 01       	movw	r20, r28
    2908:	ff 90       	pop	r15
    290a:	0f 91       	pop	r16
    290c:	1f 91       	pop	r17
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	f3 dc       	rcall	.-1562   	; 0x22fa <__addsf3x>
    2914:	48 cf       	rjmp	.-368    	; 0x27a6 <__fp_round>

00002916 <modf>:
    2916:	fa 01       	movw	r30, r20
    2918:	dc 01       	movw	r26, r24
    291a:	aa 0f       	add	r26, r26
    291c:	bb 1f       	adc	r27, r27
    291e:	9b 01       	movw	r18, r22
    2920:	ac 01       	movw	r20, r24
    2922:	bf 57       	subi	r27, 0x7F	; 127
    2924:	28 f4       	brcc	.+10     	; 0x2930 <modf+0x1a>
    2926:	22 27       	eor	r18, r18
    2928:	33 27       	eor	r19, r19
    292a:	44 27       	eor	r20, r20
    292c:	50 78       	andi	r21, 0x80	; 128
    292e:	1f c0       	rjmp	.+62     	; 0x296e <modf+0x58>
    2930:	b7 51       	subi	r27, 0x17	; 23
    2932:	88 f4       	brcc	.+34     	; 0x2956 <modf+0x40>
    2934:	ab 2f       	mov	r26, r27
    2936:	00 24       	eor	r0, r0
    2938:	46 95       	lsr	r20
    293a:	37 95       	ror	r19
    293c:	27 95       	ror	r18
    293e:	01 1c       	adc	r0, r1
    2940:	a3 95       	inc	r26
    2942:	d2 f3       	brmi	.-12     	; 0x2938 <modf+0x22>
    2944:	00 20       	and	r0, r0
    2946:	69 f0       	breq	.+26     	; 0x2962 <modf+0x4c>
    2948:	22 0f       	add	r18, r18
    294a:	33 1f       	adc	r19, r19
    294c:	44 1f       	adc	r20, r20
    294e:	b3 95       	inc	r27
    2950:	da f3       	brmi	.-10     	; 0x2948 <modf+0x32>
    2952:	0d d0       	rcall	.+26     	; 0x296e <modf+0x58>
    2954:	c0 cc       	rjmp	.-1664   	; 0x22d6 <__subsf3>
    2956:	61 30       	cpi	r22, 0x01	; 1
    2958:	71 05       	cpc	r23, r1
    295a:	a0 e8       	ldi	r26, 0x80	; 128
    295c:	8a 07       	cpc	r24, r26
    295e:	b9 46       	sbci	r27, 0x69	; 105
    2960:	30 f4       	brcc	.+12     	; 0x296e <modf+0x58>
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	66 27       	eor	r22, r22
    2968:	77 27       	eor	r23, r23
    296a:	88 27       	eor	r24, r24
    296c:	90 78       	andi	r25, 0x80	; 128
    296e:	30 96       	adiw	r30, 0x00	; 0
    2970:	21 f0       	breq	.+8      	; 0x297a <modf+0x64>
    2972:	20 83       	st	Z, r18
    2974:	31 83       	std	Z+1, r19	; 0x01
    2976:	42 83       	std	Z+2, r20	; 0x02
    2978:	53 83       	std	Z+3, r21	; 0x03
    297a:	08 95       	ret

0000297c <__mulsf3>:
    297c:	0b d0       	rcall	.+22     	; 0x2994 <__mulsf3x>
    297e:	13 cf       	rjmp	.-474    	; 0x27a6 <__fp_round>
    2980:	dc de       	rcall	.-584    	; 0x273a <__fp_pscA>
    2982:	28 f0       	brcs	.+10     	; 0x298e <__mulsf3+0x12>
    2984:	e1 de       	rcall	.-574    	; 0x2748 <__fp_pscB>
    2986:	18 f0       	brcs	.+6      	; 0x298e <__mulsf3+0x12>
    2988:	95 23       	and	r25, r21
    298a:	09 f0       	breq	.+2      	; 0x298e <__mulsf3+0x12>
    298c:	7f ce       	rjmp	.-770    	; 0x268c <__fp_inf>
    298e:	ad ce       	rjmp	.-678    	; 0x26ea <__fp_nan>
    2990:	11 24       	eor	r1, r1
    2992:	65 cf       	rjmp	.-310    	; 0x285e <__fp_szero>

00002994 <__mulsf3x>:
    2994:	2a df       	rcall	.-428    	; 0x27ea <__fp_split3>
    2996:	a0 f3       	brcs	.-24     	; 0x2980 <__mulsf3+0x4>

00002998 <__mulsf3_pse>:
    2998:	95 9f       	mul	r25, r21
    299a:	d1 f3       	breq	.-12     	; 0x2990 <__mulsf3+0x14>
    299c:	95 0f       	add	r25, r21
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	55 1f       	adc	r21, r21
    29a2:	62 9f       	mul	r22, r18
    29a4:	f0 01       	movw	r30, r0
    29a6:	72 9f       	mul	r23, r18
    29a8:	bb 27       	eor	r27, r27
    29aa:	f0 0d       	add	r31, r0
    29ac:	b1 1d       	adc	r27, r1
    29ae:	63 9f       	mul	r22, r19
    29b0:	aa 27       	eor	r26, r26
    29b2:	f0 0d       	add	r31, r0
    29b4:	b1 1d       	adc	r27, r1
    29b6:	aa 1f       	adc	r26, r26
    29b8:	64 9f       	mul	r22, r20
    29ba:	66 27       	eor	r22, r22
    29bc:	b0 0d       	add	r27, r0
    29be:	a1 1d       	adc	r26, r1
    29c0:	66 1f       	adc	r22, r22
    29c2:	82 9f       	mul	r24, r18
    29c4:	22 27       	eor	r18, r18
    29c6:	b0 0d       	add	r27, r0
    29c8:	a1 1d       	adc	r26, r1
    29ca:	62 1f       	adc	r22, r18
    29cc:	73 9f       	mul	r23, r19
    29ce:	b0 0d       	add	r27, r0
    29d0:	a1 1d       	adc	r26, r1
    29d2:	62 1f       	adc	r22, r18
    29d4:	83 9f       	mul	r24, r19
    29d6:	a0 0d       	add	r26, r0
    29d8:	61 1d       	adc	r22, r1
    29da:	22 1f       	adc	r18, r18
    29dc:	74 9f       	mul	r23, r20
    29de:	33 27       	eor	r19, r19
    29e0:	a0 0d       	add	r26, r0
    29e2:	61 1d       	adc	r22, r1
    29e4:	23 1f       	adc	r18, r19
    29e6:	84 9f       	mul	r24, r20
    29e8:	60 0d       	add	r22, r0
    29ea:	21 1d       	adc	r18, r1
    29ec:	82 2f       	mov	r24, r18
    29ee:	76 2f       	mov	r23, r22
    29f0:	6a 2f       	mov	r22, r26
    29f2:	11 24       	eor	r1, r1
    29f4:	9f 57       	subi	r25, 0x7F	; 127
    29f6:	50 40       	sbci	r21, 0x00	; 0
    29f8:	8a f0       	brmi	.+34     	; 0x2a1c <__mulsf3_pse+0x84>
    29fa:	e1 f0       	breq	.+56     	; 0x2a34 <__mulsf3_pse+0x9c>
    29fc:	88 23       	and	r24, r24
    29fe:	4a f0       	brmi	.+18     	; 0x2a12 <__mulsf3_pse+0x7a>
    2a00:	ee 0f       	add	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	bb 1f       	adc	r27, r27
    2a06:	66 1f       	adc	r22, r22
    2a08:	77 1f       	adc	r23, r23
    2a0a:	88 1f       	adc	r24, r24
    2a0c:	91 50       	subi	r25, 0x01	; 1
    2a0e:	50 40       	sbci	r21, 0x00	; 0
    2a10:	a9 f7       	brne	.-22     	; 0x29fc <__mulsf3_pse+0x64>
    2a12:	9e 3f       	cpi	r25, 0xFE	; 254
    2a14:	51 05       	cpc	r21, r1
    2a16:	70 f0       	brcs	.+28     	; 0x2a34 <__mulsf3_pse+0x9c>
    2a18:	39 ce       	rjmp	.-910    	; 0x268c <__fp_inf>
    2a1a:	21 cf       	rjmp	.-446    	; 0x285e <__fp_szero>
    2a1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a1e:	ec f3       	brlt	.-6      	; 0x2a1a <__mulsf3_pse+0x82>
    2a20:	98 3e       	cpi	r25, 0xE8	; 232
    2a22:	dc f3       	brlt	.-10     	; 0x2a1a <__mulsf3_pse+0x82>
    2a24:	86 95       	lsr	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	b7 95       	ror	r27
    2a2c:	f7 95       	ror	r31
    2a2e:	e7 95       	ror	r30
    2a30:	9f 5f       	subi	r25, 0xFF	; 255
    2a32:	c1 f7       	brne	.-16     	; 0x2a24 <__mulsf3_pse+0x8c>
    2a34:	fe 2b       	or	r31, r30
    2a36:	88 0f       	add	r24, r24
    2a38:	91 1d       	adc	r25, r1
    2a3a:	96 95       	lsr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	97 f9       	bld	r25, 7
    2a40:	08 95       	ret

00002a42 <pow>:
    2a42:	fa 01       	movw	r30, r20
    2a44:	ee 0f       	add	r30, r30
    2a46:	ff 1f       	adc	r31, r31
    2a48:	30 96       	adiw	r30, 0x00	; 0
    2a4a:	21 05       	cpc	r18, r1
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	99 f1       	breq	.+102    	; 0x2ab6 <pow+0x74>
    2a50:	61 15       	cp	r22, r1
    2a52:	71 05       	cpc	r23, r1
    2a54:	61 f4       	brne	.+24     	; 0x2a6e <pow+0x2c>
    2a56:	80 38       	cpi	r24, 0x80	; 128
    2a58:	bf e3       	ldi	r27, 0x3F	; 63
    2a5a:	9b 07       	cpc	r25, r27
    2a5c:	49 f1       	breq	.+82     	; 0x2ab0 <pow+0x6e>
    2a5e:	68 94       	set
    2a60:	90 38       	cpi	r25, 0x80	; 128
    2a62:	81 05       	cpc	r24, r1
    2a64:	61 f0       	breq	.+24     	; 0x2a7e <pow+0x3c>
    2a66:	80 38       	cpi	r24, 0x80	; 128
    2a68:	bf ef       	ldi	r27, 0xFF	; 255
    2a6a:	9b 07       	cpc	r25, r27
    2a6c:	41 f0       	breq	.+16     	; 0x2a7e <pow+0x3c>
    2a6e:	99 23       	and	r25, r25
    2a70:	42 f5       	brpl	.+80     	; 0x2ac2 <pow+0x80>
    2a72:	ff 3f       	cpi	r31, 0xFF	; 255
    2a74:	e1 05       	cpc	r30, r1
    2a76:	31 05       	cpc	r19, r1
    2a78:	21 05       	cpc	r18, r1
    2a7a:	11 f1       	breq	.+68     	; 0x2ac0 <pow+0x7e>
    2a7c:	e8 94       	clt
    2a7e:	08 94       	sec
    2a80:	e7 95       	ror	r30
    2a82:	d9 01       	movw	r26, r18
    2a84:	aa 23       	and	r26, r26
    2a86:	29 f4       	brne	.+10     	; 0x2a92 <pow+0x50>
    2a88:	ab 2f       	mov	r26, r27
    2a8a:	be 2f       	mov	r27, r30
    2a8c:	f8 5f       	subi	r31, 0xF8	; 248
    2a8e:	d0 f3       	brcs	.-12     	; 0x2a84 <pow+0x42>
    2a90:	10 c0       	rjmp	.+32     	; 0x2ab2 <pow+0x70>
    2a92:	ff 5f       	subi	r31, 0xFF	; 255
    2a94:	70 f4       	brcc	.+28     	; 0x2ab2 <pow+0x70>
    2a96:	a6 95       	lsr	r26
    2a98:	e0 f7       	brcc	.-8      	; 0x2a92 <pow+0x50>
    2a9a:	f7 39       	cpi	r31, 0x97	; 151
    2a9c:	50 f0       	brcs	.+20     	; 0x2ab2 <pow+0x70>
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <pow+0x64>
    2aa0:	ff 3a       	cpi	r31, 0xAF	; 175
    2aa2:	38 f4       	brcc	.+14     	; 0x2ab2 <pow+0x70>
    2aa4:	9f 77       	andi	r25, 0x7F	; 127
    2aa6:	9f 93       	push	r25
    2aa8:	0c d0       	rcall	.+24     	; 0x2ac2 <pow+0x80>
    2aaa:	0f 90       	pop	r0
    2aac:	07 fc       	sbrc	r0, 7
    2aae:	90 58       	subi	r25, 0x80	; 128
    2ab0:	08 95       	ret
    2ab2:	3e f0       	brts	.+14     	; 0x2ac2 <pow+0x80>
    2ab4:	1a ce       	rjmp	.-972    	; 0x26ea <__fp_nan>
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	80 e8       	ldi	r24, 0x80	; 128
    2abc:	9f e3       	ldi	r25, 0x3F	; 63
    2abe:	08 95       	ret
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	9f 77       	andi	r25, 0x7F	; 127
    2ac4:	5f 93       	push	r21
    2ac6:	4f 93       	push	r20
    2ac8:	3f 93       	push	r19
    2aca:	2f 93       	push	r18
    2acc:	e4 de       	rcall	.-568    	; 0x2896 <log>
    2ace:	2f 91       	pop	r18
    2ad0:	3f 91       	pop	r19
    2ad2:	4f 91       	pop	r20
    2ad4:	5f 91       	pop	r21
    2ad6:	52 df       	rcall	.-348    	; 0x297c <__mulsf3>
    2ad8:	70 c0       	rjmp	.+224    	; 0x2bba <exp>

00002ada <round>:
    2ada:	8f de       	rcall	.-738    	; 0x27fa <__fp_splitA>
    2adc:	e0 f0       	brcs	.+56     	; 0x2b16 <round+0x3c>
    2ade:	9e 37       	cpi	r25, 0x7E	; 126
    2ae0:	d8 f0       	brcs	.+54     	; 0x2b18 <round+0x3e>
    2ae2:	96 39       	cpi	r25, 0x96	; 150
    2ae4:	b8 f4       	brcc	.+46     	; 0x2b14 <round+0x3a>
    2ae6:	9e 38       	cpi	r25, 0x8E	; 142
    2ae8:	48 f4       	brcc	.+18     	; 0x2afc <round+0x22>
    2aea:	67 2f       	mov	r22, r23
    2aec:	78 2f       	mov	r23, r24
    2aee:	88 27       	eor	r24, r24
    2af0:	98 5f       	subi	r25, 0xF8	; 248
    2af2:	f9 cf       	rjmp	.-14     	; 0x2ae6 <round+0xc>
    2af4:	86 95       	lsr	r24
    2af6:	77 95       	ror	r23
    2af8:	67 95       	ror	r22
    2afa:	93 95       	inc	r25
    2afc:	95 39       	cpi	r25, 0x95	; 149
    2afe:	d0 f3       	brcs	.-12     	; 0x2af4 <round+0x1a>
    2b00:	b6 2f       	mov	r27, r22
    2b02:	b1 70       	andi	r27, 0x01	; 1
    2b04:	6b 0f       	add	r22, r27
    2b06:	71 1d       	adc	r23, r1
    2b08:	81 1d       	adc	r24, r1
    2b0a:	20 f4       	brcc	.+8      	; 0x2b14 <round+0x3a>
    2b0c:	87 95       	ror	r24
    2b0e:	77 95       	ror	r23
    2b10:	67 95       	ror	r22
    2b12:	93 95       	inc	r25
    2b14:	c1 cd       	rjmp	.-1150   	; 0x2698 <__fp_mintl>
    2b16:	db cd       	rjmp	.-1098   	; 0x26ce <__fp_mpack>
    2b18:	a2 ce       	rjmp	.-700    	; 0x285e <__fp_szero>

00002b1a <sin>:
    2b1a:	9f 93       	push	r25
    2b1c:	1d de       	rcall	.-966    	; 0x2758 <__fp_rempio2>
    2b1e:	0f 90       	pop	r0
    2b20:	07 fc       	sbrc	r0, 7
    2b22:	ee 5f       	subi	r30, 0xFE	; 254
    2b24:	51 ce       	rjmp	.-862    	; 0x27c8 <__fp_sinus>
    2b26:	11 f4       	brne	.+4      	; 0x2b2c <sin+0x12>
    2b28:	0e f4       	brtc	.+2      	; 0x2b2c <sin+0x12>
    2b2a:	df cd       	rjmp	.-1090   	; 0x26ea <__fp_nan>
    2b2c:	d0 cd       	rjmp	.-1120   	; 0x26ce <__fp_mpack>

00002b2e <sqrt>:
    2b2e:	65 de       	rcall	.-822    	; 0x27fa <__fp_splitA>
    2b30:	d0 f3       	brcs	.-12     	; 0x2b26 <sin+0xc>
    2b32:	99 23       	and	r25, r25
    2b34:	d9 f3       	breq	.-10     	; 0x2b2c <sin+0x12>
    2b36:	ce f3       	brts	.-14     	; 0x2b2a <sin+0x10>
    2b38:	9f 57       	subi	r25, 0x7F	; 127
    2b3a:	55 0b       	sbc	r21, r21
    2b3c:	87 ff       	sbrs	r24, 7
    2b3e:	69 d0       	rcall	.+210    	; 0x2c12 <__fp_norm2>
    2b40:	00 24       	eor	r0, r0
    2b42:	a0 e6       	ldi	r26, 0x60	; 96
    2b44:	40 ea       	ldi	r20, 0xA0	; 160
    2b46:	90 01       	movw	r18, r0
    2b48:	80 58       	subi	r24, 0x80	; 128
    2b4a:	56 95       	lsr	r21
    2b4c:	97 95       	ror	r25
    2b4e:	28 f4       	brcc	.+10     	; 0x2b5a <sqrt+0x2c>
    2b50:	80 5c       	subi	r24, 0xC0	; 192
    2b52:	66 0f       	add	r22, r22
    2b54:	77 1f       	adc	r23, r23
    2b56:	88 1f       	adc	r24, r24
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <sqrt+0x34>
    2b5a:	26 17       	cp	r18, r22
    2b5c:	37 07       	cpc	r19, r23
    2b5e:	48 07       	cpc	r20, r24
    2b60:	30 f4       	brcc	.+12     	; 0x2b6e <sqrt+0x40>
    2b62:	62 1b       	sub	r22, r18
    2b64:	73 0b       	sbc	r23, r19
    2b66:	84 0b       	sbc	r24, r20
    2b68:	20 29       	or	r18, r0
    2b6a:	31 29       	or	r19, r1
    2b6c:	4a 2b       	or	r20, r26
    2b6e:	a6 95       	lsr	r26
    2b70:	17 94       	ror	r1
    2b72:	07 94       	ror	r0
    2b74:	20 25       	eor	r18, r0
    2b76:	31 25       	eor	r19, r1
    2b78:	4a 27       	eor	r20, r26
    2b7a:	58 f7       	brcc	.-42     	; 0x2b52 <sqrt+0x24>
    2b7c:	66 0f       	add	r22, r22
    2b7e:	77 1f       	adc	r23, r23
    2b80:	88 1f       	adc	r24, r24
    2b82:	20 f0       	brcs	.+8      	; 0x2b8c <sqrt+0x5e>
    2b84:	26 17       	cp	r18, r22
    2b86:	37 07       	cpc	r19, r23
    2b88:	48 07       	cpc	r20, r24
    2b8a:	30 f4       	brcc	.+12     	; 0x2b98 <sqrt+0x6a>
    2b8c:	62 0b       	sbc	r22, r18
    2b8e:	73 0b       	sbc	r23, r19
    2b90:	84 0b       	sbc	r24, r20
    2b92:	20 0d       	add	r18, r0
    2b94:	31 1d       	adc	r19, r1
    2b96:	41 1d       	adc	r20, r1
    2b98:	a0 95       	com	r26
    2b9a:	81 f7       	brne	.-32     	; 0x2b7c <sqrt+0x4e>
    2b9c:	b9 01       	movw	r22, r18
    2b9e:	84 2f       	mov	r24, r20
    2ba0:	91 58       	subi	r25, 0x81	; 129
    2ba2:	88 0f       	add	r24, r24
    2ba4:	96 95       	lsr	r25
    2ba6:	87 95       	ror	r24
    2ba8:	08 95       	ret

00002baa <square>:
    2baa:	9b 01       	movw	r18, r22
    2bac:	ac 01       	movw	r20, r24
    2bae:	e6 ce       	rjmp	.-564    	; 0x297c <__mulsf3>
    2bb0:	19 f4       	brne	.+6      	; 0x2bb8 <square+0xe>
    2bb2:	0e f0       	brts	.+2      	; 0x2bb6 <square+0xc>
    2bb4:	6b cd       	rjmp	.-1322   	; 0x268c <__fp_inf>
    2bb6:	52 ce       	rjmp	.-860    	; 0x285c <__fp_zero>
    2bb8:	98 cd       	rjmp	.-1232   	; 0x26ea <__fp_nan>

00002bba <exp>:
    2bba:	1f de       	rcall	.-962    	; 0x27fa <__fp_splitA>
    2bbc:	c8 f3       	brcs	.-14     	; 0x2bb0 <square+0x6>
    2bbe:	96 38       	cpi	r25, 0x86	; 134
    2bc0:	c0 f7       	brcc	.-16     	; 0x2bb2 <square+0x8>
    2bc2:	07 f8       	bld	r0, 7
    2bc4:	0f 92       	push	r0
    2bc6:	e8 94       	clt
    2bc8:	2b e3       	ldi	r18, 0x3B	; 59
    2bca:	3a ea       	ldi	r19, 0xAA	; 170
    2bcc:	48 eb       	ldi	r20, 0xB8	; 184
    2bce:	5f e7       	ldi	r21, 0x7F	; 127
    2bd0:	e3 de       	rcall	.-570    	; 0x2998 <__mulsf3_pse>
    2bd2:	0f 92       	push	r0
    2bd4:	0f 92       	push	r0
    2bd6:	0f 92       	push	r0
    2bd8:	4d b7       	in	r20, 0x3d	; 61
    2bda:	5e b7       	in	r21, 0x3e	; 62
    2bdc:	0f 92       	push	r0
    2bde:	9b de       	rcall	.-714    	; 0x2916 <modf>
    2be0:	e9 e5       	ldi	r30, 0x59	; 89
    2be2:	f1 e0       	ldi	r31, 0x01	; 1
    2be4:	85 dd       	rcall	.-1270   	; 0x26f0 <__fp_powser>
    2be6:	4f 91       	pop	r20
    2be8:	5f 91       	pop	r21
    2bea:	ef 91       	pop	r30
    2bec:	ff 91       	pop	r31
    2bee:	e5 95       	asr	r30
    2bf0:	ee 1f       	adc	r30, r30
    2bf2:	ff 1f       	adc	r31, r31
    2bf4:	49 f0       	breq	.+18     	; 0x2c08 <exp+0x4e>
    2bf6:	fe 57       	subi	r31, 0x7E	; 126
    2bf8:	e0 68       	ori	r30, 0x80	; 128
    2bfa:	44 27       	eor	r20, r20
    2bfc:	ee 0f       	add	r30, r30
    2bfe:	44 1f       	adc	r20, r20
    2c00:	fa 95       	dec	r31
    2c02:	e1 f7       	brne	.-8      	; 0x2bfc <exp+0x42>
    2c04:	41 95       	neg	r20
    2c06:	55 0b       	sbc	r21, r21
    2c08:	1e d0       	rcall	.+60     	; 0x2c46 <ldexp>
    2c0a:	0f 90       	pop	r0
    2c0c:	07 fe       	sbrs	r0, 7
    2c0e:	31 ce       	rjmp	.-926    	; 0x2872 <inverse>
    2c10:	08 95       	ret

00002c12 <__fp_norm2>:
    2c12:	91 50       	subi	r25, 0x01	; 1
    2c14:	50 40       	sbci	r21, 0x00	; 0
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	88 1f       	adc	r24, r24
    2c1c:	d2 f7       	brpl	.-12     	; 0x2c12 <__fp_norm2>
    2c1e:	08 95       	ret

00002c20 <__fp_powsodd>:
    2c20:	9f 93       	push	r25
    2c22:	8f 93       	push	r24
    2c24:	7f 93       	push	r23
    2c26:	6f 93       	push	r22
    2c28:	ff 93       	push	r31
    2c2a:	ef 93       	push	r30
    2c2c:	9b 01       	movw	r18, r22
    2c2e:	ac 01       	movw	r20, r24
    2c30:	a5 de       	rcall	.-694    	; 0x297c <__mulsf3>
    2c32:	ef 91       	pop	r30
    2c34:	ff 91       	pop	r31
    2c36:	5c dd       	rcall	.-1352   	; 0x26f0 <__fp_powser>
    2c38:	2f 91       	pop	r18
    2c3a:	3f 91       	pop	r19
    2c3c:	4f 91       	pop	r20
    2c3e:	5f 91       	pop	r21
    2c40:	9d ce       	rjmp	.-710    	; 0x297c <__mulsf3>
    2c42:	24 cd       	rjmp	.-1464   	; 0x268c <__fp_inf>
    2c44:	44 cd       	rjmp	.-1400   	; 0x26ce <__fp_mpack>

00002c46 <ldexp>:
    2c46:	d9 dd       	rcall	.-1102   	; 0x27fa <__fp_splitA>
    2c48:	e8 f3       	brcs	.-6      	; 0x2c44 <__fp_powsodd+0x24>
    2c4a:	99 23       	and	r25, r25
    2c4c:	d9 f3       	breq	.-10     	; 0x2c44 <__fp_powsodd+0x24>
    2c4e:	94 0f       	add	r25, r20
    2c50:	51 1d       	adc	r21, r1
    2c52:	bb f3       	brvs	.-18     	; 0x2c42 <__fp_powsodd+0x22>
    2c54:	91 50       	subi	r25, 0x01	; 1
    2c56:	50 40       	sbci	r21, 0x00	; 0
    2c58:	94 f0       	brlt	.+36     	; 0x2c7e <ldexp+0x38>
    2c5a:	59 f0       	breq	.+22     	; 0x2c72 <ldexp+0x2c>
    2c5c:	88 23       	and	r24, r24
    2c5e:	32 f0       	brmi	.+12     	; 0x2c6c <ldexp+0x26>
    2c60:	66 0f       	add	r22, r22
    2c62:	77 1f       	adc	r23, r23
    2c64:	88 1f       	adc	r24, r24
    2c66:	91 50       	subi	r25, 0x01	; 1
    2c68:	50 40       	sbci	r21, 0x00	; 0
    2c6a:	c1 f7       	brne	.-16     	; 0x2c5c <ldexp+0x16>
    2c6c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c6e:	51 05       	cpc	r21, r1
    2c70:	44 f7       	brge	.-48     	; 0x2c42 <__fp_powsodd+0x22>
    2c72:	88 0f       	add	r24, r24
    2c74:	91 1d       	adc	r25, r1
    2c76:	96 95       	lsr	r25
    2c78:	87 95       	ror	r24
    2c7a:	97 f9       	bld	r25, 7
    2c7c:	08 95       	ret
    2c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c80:	ac f0       	brlt	.+42     	; 0x2cac <ldexp+0x66>
    2c82:	98 3e       	cpi	r25, 0xE8	; 232
    2c84:	9c f0       	brlt	.+38     	; 0x2cac <ldexp+0x66>
    2c86:	bb 27       	eor	r27, r27
    2c88:	86 95       	lsr	r24
    2c8a:	77 95       	ror	r23
    2c8c:	67 95       	ror	r22
    2c8e:	b7 95       	ror	r27
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <ldexp+0x4e>
    2c92:	b1 60       	ori	r27, 0x01	; 1
    2c94:	93 95       	inc	r25
    2c96:	c1 f7       	brne	.-16     	; 0x2c88 <ldexp+0x42>
    2c98:	bb 0f       	add	r27, r27
    2c9a:	58 f7       	brcc	.-42     	; 0x2c72 <ldexp+0x2c>
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <ldexp+0x5c>
    2c9e:	60 ff       	sbrs	r22, 0
    2ca0:	e8 cf       	rjmp	.-48     	; 0x2c72 <ldexp+0x2c>
    2ca2:	6f 5f       	subi	r22, 0xFF	; 255
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    2caa:	e3 cf       	rjmp	.-58     	; 0x2c72 <ldexp+0x2c>
    2cac:	d8 cd       	rjmp	.-1104   	; 0x285e <__fp_szero>

00002cae <__tablejump2__>:
    2cae:	ee 0f       	add	r30, r30
    2cb0:	ff 1f       	adc	r31, r31

00002cb2 <__tablejump__>:
    2cb2:	05 90       	lpm	r0, Z+
    2cb4:	f4 91       	lpm	r31, Z
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	09 94       	ijmp

00002cba <malloc>:
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	82 30       	cpi	r24, 0x02	; 2
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	10 f4       	brcc	.+4      	; 0x2cc8 <malloc+0xe>
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	e0 91 b3 04 	lds	r30, 0x04B3
    2ccc:	f0 91 b4 04 	lds	r31, 0x04B4
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	a0 e0       	ldi	r26, 0x00	; 0
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	30 97       	sbiw	r30, 0x00	; 0
    2cda:	39 f1       	breq	.+78     	; 0x2d2a <malloc+0x70>
    2cdc:	40 81       	ld	r20, Z
    2cde:	51 81       	ldd	r21, Z+1	; 0x01
    2ce0:	48 17       	cp	r20, r24
    2ce2:	59 07       	cpc	r21, r25
    2ce4:	b8 f0       	brcs	.+46     	; 0x2d14 <malloc+0x5a>
    2ce6:	48 17       	cp	r20, r24
    2ce8:	59 07       	cpc	r21, r25
    2cea:	71 f4       	brne	.+28     	; 0x2d08 <malloc+0x4e>
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	10 97       	sbiw	r26, 0x00	; 0
    2cf2:	29 f0       	breq	.+10     	; 0x2cfe <malloc+0x44>
    2cf4:	13 96       	adiw	r26, 0x03	; 3
    2cf6:	9c 93       	st	X, r25
    2cf8:	8e 93       	st	-X, r24
    2cfa:	12 97       	sbiw	r26, 0x02	; 2
    2cfc:	2c c0       	rjmp	.+88     	; 0x2d56 <malloc+0x9c>
    2cfe:	90 93 b4 04 	sts	0x04B4, r25
    2d02:	80 93 b3 04 	sts	0x04B3, r24
    2d06:	27 c0       	rjmp	.+78     	; 0x2d56 <malloc+0x9c>
    2d08:	21 15       	cp	r18, r1
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	31 f0       	breq	.+12     	; 0x2d1a <malloc+0x60>
    2d0e:	42 17       	cp	r20, r18
    2d10:	53 07       	cpc	r21, r19
    2d12:	18 f0       	brcs	.+6      	; 0x2d1a <malloc+0x60>
    2d14:	a9 01       	movw	r20, r18
    2d16:	db 01       	movw	r26, r22
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <malloc+0x62>
    2d1a:	ef 01       	movw	r28, r30
    2d1c:	9a 01       	movw	r18, r20
    2d1e:	bd 01       	movw	r22, r26
    2d20:	df 01       	movw	r26, r30
    2d22:	02 80       	ldd	r0, Z+2	; 0x02
    2d24:	f3 81       	ldd	r31, Z+3	; 0x03
    2d26:	e0 2d       	mov	r30, r0
    2d28:	d7 cf       	rjmp	.-82     	; 0x2cd8 <malloc+0x1e>
    2d2a:	21 15       	cp	r18, r1
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	f9 f0       	breq	.+62     	; 0x2d6e <malloc+0xb4>
    2d30:	28 1b       	sub	r18, r24
    2d32:	39 0b       	sbc	r19, r25
    2d34:	24 30       	cpi	r18, 0x04	; 4
    2d36:	31 05       	cpc	r19, r1
    2d38:	80 f4       	brcc	.+32     	; 0x2d5a <malloc+0xa0>
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3e:	61 15       	cp	r22, r1
    2d40:	71 05       	cpc	r23, r1
    2d42:	21 f0       	breq	.+8      	; 0x2d4c <malloc+0x92>
    2d44:	fb 01       	movw	r30, r22
    2d46:	93 83       	std	Z+3, r25	; 0x03
    2d48:	82 83       	std	Z+2, r24	; 0x02
    2d4a:	04 c0       	rjmp	.+8      	; 0x2d54 <malloc+0x9a>
    2d4c:	90 93 b4 04 	sts	0x04B4, r25
    2d50:	80 93 b3 04 	sts	0x04B3, r24
    2d54:	fe 01       	movw	r30, r28
    2d56:	32 96       	adiw	r30, 0x02	; 2
    2d58:	44 c0       	rjmp	.+136    	; 0x2de2 <malloc+0x128>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	81 93       	st	Z+, r24
    2d62:	91 93       	st	Z+, r25
    2d64:	22 50       	subi	r18, 0x02	; 2
    2d66:	31 09       	sbc	r19, r1
    2d68:	39 83       	std	Y+1, r19	; 0x01
    2d6a:	28 83       	st	Y, r18
    2d6c:	3a c0       	rjmp	.+116    	; 0x2de2 <malloc+0x128>
    2d6e:	20 91 b1 04 	lds	r18, 0x04B1
    2d72:	30 91 b2 04 	lds	r19, 0x04B2
    2d76:	23 2b       	or	r18, r19
    2d78:	41 f4       	brne	.+16     	; 0x2d8a <malloc+0xd0>
    2d7a:	20 91 08 01 	lds	r18, 0x0108
    2d7e:	30 91 09 01 	lds	r19, 0x0109
    2d82:	30 93 b2 04 	sts	0x04B2, r19
    2d86:	20 93 b1 04 	sts	0x04B1, r18
    2d8a:	20 91 06 01 	lds	r18, 0x0106
    2d8e:	30 91 07 01 	lds	r19, 0x0107
    2d92:	21 15       	cp	r18, r1
    2d94:	31 05       	cpc	r19, r1
    2d96:	41 f4       	brne	.+16     	; 0x2da8 <malloc+0xee>
    2d98:	2d b7       	in	r18, 0x3d	; 61
    2d9a:	3e b7       	in	r19, 0x3e	; 62
    2d9c:	40 91 0a 01 	lds	r20, 0x010A
    2da0:	50 91 0b 01 	lds	r21, 0x010B
    2da4:	24 1b       	sub	r18, r20
    2da6:	35 0b       	sbc	r19, r21
    2da8:	e0 91 b1 04 	lds	r30, 0x04B1
    2dac:	f0 91 b2 04 	lds	r31, 0x04B2
    2db0:	e2 17       	cp	r30, r18
    2db2:	f3 07       	cpc	r31, r19
    2db4:	a0 f4       	brcc	.+40     	; 0x2dde <malloc+0x124>
    2db6:	2e 1b       	sub	r18, r30
    2db8:	3f 0b       	sbc	r19, r31
    2dba:	28 17       	cp	r18, r24
    2dbc:	39 07       	cpc	r19, r25
    2dbe:	78 f0       	brcs	.+30     	; 0x2dde <malloc+0x124>
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	4e 5f       	subi	r20, 0xFE	; 254
    2dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc6:	24 17       	cp	r18, r20
    2dc8:	35 07       	cpc	r19, r21
    2dca:	48 f0       	brcs	.+18     	; 0x2dde <malloc+0x124>
    2dcc:	4e 0f       	add	r20, r30
    2dce:	5f 1f       	adc	r21, r31
    2dd0:	50 93 b2 04 	sts	0x04B2, r21
    2dd4:	40 93 b1 04 	sts	0x04B1, r20
    2dd8:	81 93       	st	Z+, r24
    2dda:	91 93       	st	Z+, r25
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <malloc+0x128>
    2dde:	e0 e0       	ldi	r30, 0x00	; 0
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	cf 01       	movw	r24, r30
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	08 95       	ret

00002dea <free>:
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <free+0xa>
    2df2:	87 c0       	rjmp	.+270    	; 0x2f02 <free+0x118>
    2df4:	fc 01       	movw	r30, r24
    2df6:	32 97       	sbiw	r30, 0x02	; 2
    2df8:	13 82       	std	Z+3, r1	; 0x03
    2dfa:	12 82       	std	Z+2, r1	; 0x02
    2dfc:	c0 91 b3 04 	lds	r28, 0x04B3
    2e00:	d0 91 b4 04 	lds	r29, 0x04B4
    2e04:	20 97       	sbiw	r28, 0x00	; 0
    2e06:	81 f4       	brne	.+32     	; 0x2e28 <free+0x3e>
    2e08:	20 81       	ld	r18, Z
    2e0a:	31 81       	ldd	r19, Z+1	; 0x01
    2e0c:	28 0f       	add	r18, r24
    2e0e:	39 1f       	adc	r19, r25
    2e10:	80 91 b1 04 	lds	r24, 0x04B1
    2e14:	90 91 b2 04 	lds	r25, 0x04B2
    2e18:	82 17       	cp	r24, r18
    2e1a:	93 07       	cpc	r25, r19
    2e1c:	79 f5       	brne	.+94     	; 0x2e7c <free+0x92>
    2e1e:	f0 93 b2 04 	sts	0x04B2, r31
    2e22:	e0 93 b1 04 	sts	0x04B1, r30
    2e26:	6d c0       	rjmp	.+218    	; 0x2f02 <free+0x118>
    2e28:	de 01       	movw	r26, r28
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	ae 17       	cp	r26, r30
    2e30:	bf 07       	cpc	r27, r31
    2e32:	50 f4       	brcc	.+20     	; 0x2e48 <free+0x5e>
    2e34:	12 96       	adiw	r26, 0x02	; 2
    2e36:	4d 91       	ld	r20, X+
    2e38:	5c 91       	ld	r21, X
    2e3a:	13 97       	sbiw	r26, 0x03	; 3
    2e3c:	9d 01       	movw	r18, r26
    2e3e:	41 15       	cp	r20, r1
    2e40:	51 05       	cpc	r21, r1
    2e42:	09 f1       	breq	.+66     	; 0x2e86 <free+0x9c>
    2e44:	da 01       	movw	r26, r20
    2e46:	f3 cf       	rjmp	.-26     	; 0x2e2e <free+0x44>
    2e48:	b3 83       	std	Z+3, r27	; 0x03
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	40 81       	ld	r20, Z
    2e4e:	51 81       	ldd	r21, Z+1	; 0x01
    2e50:	84 0f       	add	r24, r20
    2e52:	95 1f       	adc	r25, r21
    2e54:	8a 17       	cp	r24, r26
    2e56:	9b 07       	cpc	r25, r27
    2e58:	71 f4       	brne	.+28     	; 0x2e76 <free+0x8c>
    2e5a:	8d 91       	ld	r24, X+
    2e5c:	9c 91       	ld	r25, X
    2e5e:	11 97       	sbiw	r26, 0x01	; 1
    2e60:	84 0f       	add	r24, r20
    2e62:	95 1f       	adc	r25, r21
    2e64:	02 96       	adiw	r24, 0x02	; 2
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	12 96       	adiw	r26, 0x02	; 2
    2e6c:	8d 91       	ld	r24, X+
    2e6e:	9c 91       	ld	r25, X
    2e70:	13 97       	sbiw	r26, 0x03	; 3
    2e72:	93 83       	std	Z+3, r25	; 0x03
    2e74:	82 83       	std	Z+2, r24	; 0x02
    2e76:	21 15       	cp	r18, r1
    2e78:	31 05       	cpc	r19, r1
    2e7a:	29 f4       	brne	.+10     	; 0x2e86 <free+0x9c>
    2e7c:	f0 93 b4 04 	sts	0x04B4, r31
    2e80:	e0 93 b3 04 	sts	0x04B3, r30
    2e84:	3e c0       	rjmp	.+124    	; 0x2f02 <free+0x118>
    2e86:	d9 01       	movw	r26, r18
    2e88:	13 96       	adiw	r26, 0x03	; 3
    2e8a:	fc 93       	st	X, r31
    2e8c:	ee 93       	st	-X, r30
    2e8e:	12 97       	sbiw	r26, 0x02	; 2
    2e90:	4d 91       	ld	r20, X+
    2e92:	5d 91       	ld	r21, X+
    2e94:	a4 0f       	add	r26, r20
    2e96:	b5 1f       	adc	r27, r21
    2e98:	ea 17       	cp	r30, r26
    2e9a:	fb 07       	cpc	r31, r27
    2e9c:	79 f4       	brne	.+30     	; 0x2ebc <free+0xd2>
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	84 0f       	add	r24, r20
    2ea4:	95 1f       	adc	r25, r21
    2ea6:	02 96       	adiw	r24, 0x02	; 2
    2ea8:	d9 01       	movw	r26, r18
    2eaa:	11 96       	adiw	r26, 0x01	; 1
    2eac:	9c 93       	st	X, r25
    2eae:	8e 93       	st	-X, r24
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	13 96       	adiw	r26, 0x03	; 3
    2eb6:	9c 93       	st	X, r25
    2eb8:	8e 93       	st	-X, r24
    2eba:	12 97       	sbiw	r26, 0x02	; 2
    2ebc:	e0 e0       	ldi	r30, 0x00	; 0
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	19 f0       	breq	.+6      	; 0x2ece <free+0xe4>
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ec 01       	movw	r28, r24
    2ecc:	f9 cf       	rjmp	.-14     	; 0x2ec0 <free+0xd6>
    2ece:	ce 01       	movw	r24, r28
    2ed0:	02 96       	adiw	r24, 0x02	; 2
    2ed2:	28 81       	ld	r18, Y
    2ed4:	39 81       	ldd	r19, Y+1	; 0x01
    2ed6:	82 0f       	add	r24, r18
    2ed8:	93 1f       	adc	r25, r19
    2eda:	20 91 b1 04 	lds	r18, 0x04B1
    2ede:	30 91 b2 04 	lds	r19, 0x04B2
    2ee2:	28 17       	cp	r18, r24
    2ee4:	39 07       	cpc	r19, r25
    2ee6:	69 f4       	brne	.+26     	; 0x2f02 <free+0x118>
    2ee8:	30 97       	sbiw	r30, 0x00	; 0
    2eea:	29 f4       	brne	.+10     	; 0x2ef6 <free+0x10c>
    2eec:	10 92 b4 04 	sts	0x04B4, r1
    2ef0:	10 92 b3 04 	sts	0x04B3, r1
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <free+0x110>
    2ef6:	13 82       	std	Z+3, r1	; 0x03
    2ef8:	12 82       	std	Z+2, r1	; 0x02
    2efa:	d0 93 b2 04 	sts	0x04B2, r29
    2efe:	c0 93 b1 04 	sts	0x04B1, r28
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	08 95       	ret

00002f08 <strtod>:
    2f08:	4f 92       	push	r4
    2f0a:	5f 92       	push	r5
    2f0c:	6f 92       	push	r6
    2f0e:	7f 92       	push	r7
    2f10:	8f 92       	push	r8
    2f12:	9f 92       	push	r9
    2f14:	af 92       	push	r10
    2f16:	bf 92       	push	r11
    2f18:	cf 92       	push	r12
    2f1a:	df 92       	push	r13
    2f1c:	ef 92       	push	r14
    2f1e:	ff 92       	push	r15
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	8b 01       	movw	r16, r22
    2f2a:	61 15       	cp	r22, r1
    2f2c:	71 05       	cpc	r23, r1
    2f2e:	21 f0       	breq	.+8      	; 0x2f38 <strtod+0x30>
    2f30:	db 01       	movw	r26, r22
    2f32:	8c 93       	st	X, r24
    2f34:	11 96       	adiw	r26, 0x01	; 1
    2f36:	9c 93       	st	X, r25
    2f38:	ec 01       	movw	r28, r24
    2f3a:	5e 01       	movw	r10, r28
    2f3c:	bf ef       	ldi	r27, 0xFF	; 255
    2f3e:	ab 1a       	sub	r10, r27
    2f40:	bb 0a       	sbc	r11, r27
    2f42:	75 01       	movw	r14, r10
    2f44:	c8 80       	ld	r12, Y
    2f46:	8c 2d       	mov	r24, r12
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 01 19 	call	0x3202	; 0x3202 <isspace>
    2f4e:	89 2b       	or	r24, r25
    2f50:	11 f0       	breq	.+4      	; 0x2f56 <strtod+0x4e>
    2f52:	e5 01       	movw	r28, r10
    2f54:	f2 cf       	rjmp	.-28     	; 0x2f3a <strtod+0x32>
    2f56:	ed e2       	ldi	r30, 0x2D	; 45
    2f58:	ce 12       	cpse	r12, r30
    2f5a:	08 c0       	rjmp	.+16     	; 0x2f6c <strtod+0x64>
    2f5c:	7e 01       	movw	r14, r28
    2f5e:	f2 e0       	ldi	r31, 0x02	; 2
    2f60:	ef 0e       	add	r14, r31
    2f62:	f1 1c       	adc	r15, r1
    2f64:	c9 80       	ldd	r12, Y+1	; 0x01
    2f66:	dd 24       	eor	r13, r13
    2f68:	d3 94       	inc	r13
    2f6a:	09 c0       	rjmp	.+18     	; 0x2f7e <strtod+0x76>
    2f6c:	2b e2       	ldi	r18, 0x2B	; 43
    2f6e:	c2 12       	cpse	r12, r18
    2f70:	05 c0       	rjmp	.+10     	; 0x2f7c <strtod+0x74>
    2f72:	7e 01       	movw	r14, r28
    2f74:	42 e0       	ldi	r20, 0x02	; 2
    2f76:	e4 0e       	add	r14, r20
    2f78:	f1 1c       	adc	r15, r1
    2f7a:	c9 80       	ldd	r12, Y+1	; 0x01
    2f7c:	d1 2c       	mov	r13, r1
    2f7e:	e7 01       	movw	r28, r14
    2f80:	21 97       	sbiw	r28, 0x01	; 1
    2f82:	43 e0       	ldi	r20, 0x03	; 3
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	69 e8       	ldi	r22, 0x89	; 137
    2f88:	71 e0       	ldi	r23, 0x01	; 1
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	0e 94 09 19 	call	0x3212	; 0x3212 <strncasecmp_P>
    2f90:	89 2b       	or	r24, r25
    2f92:	d1 f4       	brne	.+52     	; 0x2fc8 <strtod+0xc0>
    2f94:	e7 01       	movw	r28, r14
    2f96:	22 96       	adiw	r28, 0x02	; 2
    2f98:	45 e0       	ldi	r20, 0x05	; 5
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	64 e8       	ldi	r22, 0x84	; 132
    2f9e:	71 e0       	ldi	r23, 0x01	; 1
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	0e 94 09 19 	call	0x3212	; 0x3212 <strncasecmp_P>
    2fa6:	89 2b       	or	r24, r25
    2fa8:	11 f4       	brne	.+4      	; 0x2fae <strtod+0xa6>
    2faa:	e7 01       	movw	r28, r14
    2fac:	27 96       	adiw	r28, 0x07	; 7
    2fae:	01 15       	cp	r16, r1
    2fb0:	11 05       	cpc	r17, r1
    2fb2:	19 f0       	breq	.+6      	; 0x2fba <strtod+0xb2>
    2fb4:	d8 01       	movw	r26, r16
    2fb6:	cd 93       	st	X+, r28
    2fb8:	dc 93       	st	X, r29
    2fba:	d1 10       	cpse	r13, r1
    2fbc:	08 c1       	rjmp	.+528    	; 0x31ce <strtod+0x2c6>
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	80 e8       	ldi	r24, 0x80	; 128
    2fc4:	9f e7       	ldi	r25, 0x7F	; 127
    2fc6:	0c c1       	rjmp	.+536    	; 0x31e0 <strtod+0x2d8>
    2fc8:	43 e0       	ldi	r20, 0x03	; 3
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	61 e8       	ldi	r22, 0x81	; 129
    2fce:	71 e0       	ldi	r23, 0x01	; 1
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 94 09 19 	call	0x3212	; 0x3212 <strncasecmp_P>
    2fd6:	89 2b       	or	r24, r25
    2fd8:	59 f4       	brne	.+22     	; 0x2ff0 <strtod+0xe8>
    2fda:	01 15       	cp	r16, r1
    2fdc:	11 05       	cpc	r17, r1
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <strtod+0xda>
    2fe0:	fb c0       	rjmp	.+502    	; 0x31d8 <strtod+0x2d0>
    2fe2:	b2 e0       	ldi	r27, 0x02	; 2
    2fe4:	eb 0e       	add	r14, r27
    2fe6:	f1 1c       	adc	r15, r1
    2fe8:	f8 01       	movw	r30, r16
    2fea:	f1 82       	std	Z+1, r15	; 0x01
    2fec:	e0 82       	st	Z, r14
    2fee:	f4 c0       	rjmp	.+488    	; 0x31d8 <strtod+0x2d0>
    2ff0:	f7 01       	movw	r30, r14
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	c0 e0       	ldi	r28, 0x00	; 0
    2ffa:	d0 e0       	ldi	r29, 0x00	; 0
    2ffc:	7f 01       	movw	r14, r30
    2ffe:	a0 ed       	ldi	r26, 0xD0	; 208
    3000:	aa 2e       	mov	r10, r26
    3002:	ac 0c       	add	r10, r12
    3004:	29 e0       	ldi	r18, 0x09	; 9
    3006:	2a 15       	cp	r18, r10
    3008:	30 f1       	brcs	.+76     	; 0x3056 <strtod+0x14e>
    300a:	4d 2d       	mov	r20, r13
    300c:	42 60       	ori	r20, 0x02	; 2
    300e:	b4 2e       	mov	r11, r20
    3010:	2d 2d       	mov	r18, r13
    3012:	28 70       	andi	r18, 0x08	; 8
    3014:	d2 fe       	sbrs	r13, 2
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <strtod+0x118>
    3018:	21 11       	cpse	r18, r1
    301a:	25 c0       	rjmp	.+74     	; 0x3066 <strtod+0x15e>
    301c:	21 96       	adiw	r28, 0x01	; 1
    301e:	23 c0       	rjmp	.+70     	; 0x3066 <strtod+0x15e>
    3020:	21 11       	cpse	r18, r1
    3022:	21 97       	sbiw	r28, 0x01	; 1
    3024:	a5 e0       	ldi	r26, 0x05	; 5
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	9b 01       	movw	r18, r22
    302a:	ac 01       	movw	r20, r24
    302c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__muluhisi3>
    3030:	66 0f       	add	r22, r22
    3032:	77 1f       	adc	r23, r23
    3034:	88 1f       	adc	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	6a 0d       	add	r22, r10
    303a:	71 1d       	adc	r23, r1
    303c:	81 1d       	adc	r24, r1
    303e:	91 1d       	adc	r25, r1
    3040:	68 39       	cpi	r22, 0x98	; 152
    3042:	a9 e9       	ldi	r26, 0x99	; 153
    3044:	7a 07       	cpc	r23, r26
    3046:	8a 07       	cpc	r24, r26
    3048:	a9 e1       	ldi	r26, 0x19	; 25
    304a:	9a 07       	cpc	r25, r26
    304c:	60 f0       	brcs	.+24     	; 0x3066 <strtod+0x15e>
    304e:	bd 2d       	mov	r27, r13
    3050:	b6 60       	ori	r27, 0x06	; 6
    3052:	bb 2e       	mov	r11, r27
    3054:	08 c0       	rjmp	.+16     	; 0x3066 <strtod+0x15e>
    3056:	2e ef       	ldi	r18, 0xFE	; 254
    3058:	a2 12       	cpse	r10, r18
    305a:	0a c0       	rjmp	.+20     	; 0x3070 <strtod+0x168>
    305c:	d3 fc       	sbrc	r13, 3
    305e:	50 c0       	rjmp	.+160    	; 0x3100 <strtod+0x1f8>
    3060:	4d 2d       	mov	r20, r13
    3062:	48 60       	ori	r20, 0x08	; 8
    3064:	b4 2e       	mov	r11, r20
    3066:	31 96       	adiw	r30, 0x01	; 1
    3068:	d7 01       	movw	r26, r14
    306a:	cc 90       	ld	r12, X
    306c:	db 2c       	mov	r13, r11
    306e:	c6 cf       	rjmp	.-116    	; 0x2ffc <strtod+0xf4>
    3070:	2c 2d       	mov	r18, r12
    3072:	2f 7d       	andi	r18, 0xDF	; 223
    3074:	25 34       	cpi	r18, 0x45	; 69
    3076:	09 f0       	breq	.+2      	; 0x307a <strtod+0x172>
    3078:	43 c0       	rjmp	.+134    	; 0x3100 <strtod+0x1f8>
    307a:	a0 81       	ld	r26, Z
    307c:	ad 32       	cpi	r26, 0x2D	; 45
    307e:	41 f4       	brne	.+16     	; 0x3090 <strtod+0x188>
    3080:	bd 2d       	mov	r27, r13
    3082:	b0 61       	ori	r27, 0x10	; 16
    3084:	db 2e       	mov	r13, r27
    3086:	7f 01       	movw	r14, r30
    3088:	22 e0       	ldi	r18, 0x02	; 2
    308a:	e2 0e       	add	r14, r18
    308c:	f1 1c       	adc	r15, r1
    308e:	0c c0       	rjmp	.+24     	; 0x30a8 <strtod+0x1a0>
    3090:	7f 01       	movw	r14, r30
    3092:	ab 32       	cpi	r26, 0x2B	; 43
    3094:	31 f0       	breq	.+12     	; 0x30a2 <strtod+0x19a>
    3096:	4f ef       	ldi	r20, 0xFF	; 255
    3098:	e4 1a       	sub	r14, r20
    309a:	f4 0a       	sbc	r15, r20
    309c:	21 e0       	ldi	r18, 0x01	; 1
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <strtod+0x1a6>
    30a2:	a2 e0       	ldi	r26, 0x02	; 2
    30a4:	ea 0e       	add	r14, r26
    30a6:	f1 1c       	adc	r15, r1
    30a8:	a1 81       	ldd	r26, Z+1	; 0x01
    30aa:	22 e0       	ldi	r18, 0x02	; 2
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	a0 53       	subi	r26, 0x30	; 48
    30b0:	aa 30       	cpi	r26, 0x0A	; 10
    30b2:	18 f0       	brcs	.+6      	; 0x30ba <strtod+0x1b2>
    30b4:	e2 1a       	sub	r14, r18
    30b6:	f3 0a       	sbc	r15, r19
    30b8:	23 c0       	rjmp	.+70     	; 0x3100 <strtod+0x1f8>
    30ba:	f7 01       	movw	r30, r14
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	20 38       	cpi	r18, 0x80	; 128
    30c2:	bc e0       	ldi	r27, 0x0C	; 12
    30c4:	3b 07       	cpc	r19, r27
    30c6:	5c f4       	brge	.+22     	; 0x30de <strtod+0x1d6>
    30c8:	a9 01       	movw	r20, r18
    30ca:	44 0f       	add	r20, r20
    30cc:	55 1f       	adc	r21, r21
    30ce:	44 0f       	add	r20, r20
    30d0:	55 1f       	adc	r21, r21
    30d2:	24 0f       	add	r18, r20
    30d4:	35 1f       	adc	r19, r21
    30d6:	22 0f       	add	r18, r18
    30d8:	33 1f       	adc	r19, r19
    30da:	2a 0f       	add	r18, r26
    30dc:	31 1d       	adc	r19, r1
    30de:	af 01       	movw	r20, r30
    30e0:	4f 5f       	subi	r20, 0xFF	; 255
    30e2:	5f 4f       	sbci	r21, 0xFF	; 255
    30e4:	7a 01       	movw	r14, r20
    30e6:	a0 81       	ld	r26, Z
    30e8:	a0 53       	subi	r26, 0x30	; 48
    30ea:	aa 30       	cpi	r26, 0x0A	; 10
    30ec:	10 f4       	brcc	.+4      	; 0x30f2 <strtod+0x1ea>
    30ee:	fa 01       	movw	r30, r20
    30f0:	e7 cf       	rjmp	.-50     	; 0x30c0 <strtod+0x1b8>
    30f2:	d4 fe       	sbrs	r13, 4
    30f4:	03 c0       	rjmp	.+6      	; 0x30fc <strtod+0x1f4>
    30f6:	31 95       	neg	r19
    30f8:	21 95       	neg	r18
    30fa:	31 09       	sbc	r19, r1
    30fc:	c2 0f       	add	r28, r18
    30fe:	d3 1f       	adc	r29, r19
    3100:	d1 fe       	sbrs	r13, 1
    3102:	09 c0       	rjmp	.+18     	; 0x3116 <strtod+0x20e>
    3104:	01 15       	cp	r16, r1
    3106:	11 05       	cpc	r17, r1
    3108:	31 f0       	breq	.+12     	; 0x3116 <strtod+0x20e>
    310a:	e1 e0       	ldi	r30, 0x01	; 1
    310c:	ee 1a       	sub	r14, r30
    310e:	f1 08       	sbc	r15, r1
    3110:	d8 01       	movw	r26, r16
    3112:	ed 92       	st	X+, r14
    3114:	fc 92       	st	X, r15
    3116:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__floatunsisf>
    311a:	2d 2d       	mov	r18, r13
    311c:	23 70       	andi	r18, 0x03	; 3
    311e:	23 30       	cpi	r18, 0x03	; 3
    3120:	19 f0       	breq	.+6      	; 0x3128 <strtod+0x220>
    3122:	6b 01       	movw	r12, r22
    3124:	7c 01       	movw	r14, r24
    3126:	06 c0       	rjmp	.+12     	; 0x3134 <strtod+0x22c>
    3128:	6b 01       	movw	r12, r22
    312a:	7c 01       	movw	r14, r24
    312c:	f7 fa       	bst	r15, 7
    312e:	f0 94       	com	r15
    3130:	f7 f8       	bld	r15, 7
    3132:	f0 94       	com	r15
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	a9 01       	movw	r20, r18
    313a:	c7 01       	movw	r24, r14
    313c:	b6 01       	movw	r22, r12
    313e:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    3142:	88 23       	and	r24, r24
    3144:	09 f4       	brne	.+2      	; 0x3148 <strtod+0x240>
    3146:	40 c0       	rjmp	.+128    	; 0x31c8 <strtod+0x2c0>
    3148:	d7 ff       	sbrs	r29, 7
    314a:	06 c0       	rjmp	.+12     	; 0x3158 <strtod+0x250>
    314c:	d1 95       	neg	r29
    314e:	c1 95       	neg	r28
    3150:	d1 09       	sbc	r29, r1
    3152:	00 ea       	ldi	r16, 0xA0	; 160
    3154:	11 e0       	ldi	r17, 0x01	; 1
    3156:	02 c0       	rjmp	.+4      	; 0x315c <strtod+0x254>
    3158:	08 eb       	ldi	r16, 0xB8	; 184
    315a:	11 e0       	ldi	r17, 0x01	; 1
    315c:	48 01       	movw	r8, r16
    315e:	b8 e1       	ldi	r27, 0x18	; 24
    3160:	8b 1a       	sub	r8, r27
    3162:	91 08       	sbc	r9, r1
    3164:	90 e2       	ldi	r25, 0x20	; 32
    3166:	a9 2e       	mov	r10, r25
    3168:	b1 2c       	mov	r11, r1
    316a:	f8 01       	movw	r30, r16
    316c:	45 90       	lpm	r4, Z+
    316e:	55 90       	lpm	r5, Z+
    3170:	65 90       	lpm	r6, Z+
    3172:	74 90       	lpm	r7, Z
    3174:	ca 15       	cp	r28, r10
    3176:	db 05       	cpc	r29, r11
    3178:	5c f0       	brlt	.+22     	; 0x3190 <strtod+0x288>
    317a:	a3 01       	movw	r20, r6
    317c:	92 01       	movw	r18, r4
    317e:	c7 01       	movw	r24, r14
    3180:	b6 01       	movw	r22, r12
    3182:	0e 94 be 14 	call	0x297c	; 0x297c <__mulsf3>
    3186:	6b 01       	movw	r12, r22
    3188:	7c 01       	movw	r14, r24
    318a:	ca 19       	sub	r28, r10
    318c:	db 09       	sbc	r29, r11
    318e:	f2 cf       	rjmp	.-28     	; 0x3174 <strtod+0x26c>
    3190:	04 50       	subi	r16, 0x04	; 4
    3192:	11 09       	sbc	r17, r1
    3194:	b5 94       	asr	r11
    3196:	a7 94       	ror	r10
    3198:	08 15       	cp	r16, r8
    319a:	19 05       	cpc	r17, r9
    319c:	31 f7       	brne	.-52     	; 0x316a <strtod+0x262>
    319e:	8e 2d       	mov	r24, r14
    31a0:	88 0f       	add	r24, r24
    31a2:	8f 2d       	mov	r24, r15
    31a4:	88 1f       	adc	r24, r24
    31a6:	8f 3f       	cpi	r24, 0xFF	; 255
    31a8:	49 f0       	breq	.+18     	; 0x31bc <strtod+0x2b4>
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	a9 01       	movw	r20, r18
    31b0:	c7 01       	movw	r24, r14
    31b2:	b6 01       	movw	r22, r12
    31b4:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
    31b8:	81 11       	cpse	r24, r1
    31ba:	06 c0       	rjmp	.+12     	; 0x31c8 <strtod+0x2c0>
    31bc:	82 e2       	ldi	r24, 0x22	; 34
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	90 93 b6 04 	sts	0x04B6, r25
    31c4:	80 93 b5 04 	sts	0x04B5, r24
    31c8:	c7 01       	movw	r24, r14
    31ca:	b6 01       	movw	r22, r12
    31cc:	09 c0       	rjmp	.+18     	; 0x31e0 <strtod+0x2d8>
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	80 e8       	ldi	r24, 0x80	; 128
    31d4:	9f ef       	ldi	r25, 0xFF	; 255
    31d6:	04 c0       	rjmp	.+8      	; 0x31e0 <strtod+0x2d8>
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	80 ec       	ldi	r24, 0xC0	; 192
    31de:	9f e7       	ldi	r25, 0x7F	; 127
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	1f 91       	pop	r17
    31e6:	0f 91       	pop	r16
    31e8:	ff 90       	pop	r15
    31ea:	ef 90       	pop	r14
    31ec:	df 90       	pop	r13
    31ee:	cf 90       	pop	r12
    31f0:	bf 90       	pop	r11
    31f2:	af 90       	pop	r10
    31f4:	9f 90       	pop	r9
    31f6:	8f 90       	pop	r8
    31f8:	7f 90       	pop	r7
    31fa:	6f 90       	pop	r6
    31fc:	5f 90       	pop	r5
    31fe:	4f 90       	pop	r4
    3200:	08 95       	ret

00003202 <isspace>:
    3202:	91 11       	cpse	r25, r1
    3204:	a1 c2       	rjmp	.+1346   	; 0x3748 <__ctype_isfalse>
    3206:	80 32       	cpi	r24, 0x20	; 32
    3208:	19 f0       	breq	.+6      	; 0x3210 <isspace+0xe>
    320a:	89 50       	subi	r24, 0x09	; 9
    320c:	85 50       	subi	r24, 0x05	; 5
    320e:	d0 f7       	brcc	.-12     	; 0x3204 <isspace+0x2>
    3210:	08 95       	ret

00003212 <strncasecmp_P>:
    3212:	fb 01       	movw	r30, r22
    3214:	dc 01       	movw	r26, r24
    3216:	41 50       	subi	r20, 0x01	; 1
    3218:	50 40       	sbci	r21, 0x00	; 0
    321a:	88 f0       	brcs	.+34     	; 0x323e <strncasecmp_P+0x2c>
    321c:	8d 91       	ld	r24, X+
    321e:	81 34       	cpi	r24, 0x41	; 65
    3220:	1c f0       	brlt	.+6      	; 0x3228 <strncasecmp_P+0x16>
    3222:	8b 35       	cpi	r24, 0x5B	; 91
    3224:	0c f4       	brge	.+2      	; 0x3228 <strncasecmp_P+0x16>
    3226:	80 5e       	subi	r24, 0xE0	; 224
    3228:	65 91       	lpm	r22, Z+
    322a:	61 34       	cpi	r22, 0x41	; 65
    322c:	1c f0       	brlt	.+6      	; 0x3234 <strncasecmp_P+0x22>
    322e:	6b 35       	cpi	r22, 0x5B	; 91
    3230:	0c f4       	brge	.+2      	; 0x3234 <strncasecmp_P+0x22>
    3232:	60 5e       	subi	r22, 0xE0	; 224
    3234:	86 1b       	sub	r24, r22
    3236:	61 11       	cpse	r22, r1
    3238:	71 f3       	breq	.-36     	; 0x3216 <strncasecmp_P+0x4>
    323a:	99 0b       	sbc	r25, r25
    323c:	08 95       	ret
    323e:	88 1b       	sub	r24, r24
    3240:	fc cf       	rjmp	.-8      	; 0x323a <strncasecmp_P+0x28>

00003242 <strcmp>:
    3242:	fb 01       	movw	r30, r22
    3244:	dc 01       	movw	r26, r24
    3246:	8d 91       	ld	r24, X+
    3248:	01 90       	ld	r0, Z+
    324a:	80 19       	sub	r24, r0
    324c:	01 10       	cpse	r0, r1
    324e:	d9 f3       	breq	.-10     	; 0x3246 <strcmp+0x4>
    3250:	99 0b       	sbc	r25, r25
    3252:	08 95       	ret

00003254 <strcpy>:
    3254:	fb 01       	movw	r30, r22
    3256:	dc 01       	movw	r26, r24
    3258:	01 90       	ld	r0, Z+
    325a:	0d 92       	st	X+, r0
    325c:	00 20       	and	r0, r0
    325e:	e1 f7       	brne	.-8      	; 0x3258 <strcpy+0x4>
    3260:	08 95       	ret

00003262 <strncpy>:
    3262:	fb 01       	movw	r30, r22
    3264:	dc 01       	movw	r26, r24
    3266:	41 50       	subi	r20, 0x01	; 1
    3268:	50 40       	sbci	r21, 0x00	; 0
    326a:	48 f0       	brcs	.+18     	; 0x327e <strncpy+0x1c>
    326c:	01 90       	ld	r0, Z+
    326e:	0d 92       	st	X+, r0
    3270:	00 20       	and	r0, r0
    3272:	c9 f7       	brne	.-14     	; 0x3266 <strncpy+0x4>
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <strncpy+0x16>
    3276:	1d 92       	st	X+, r1
    3278:	41 50       	subi	r20, 0x01	; 1
    327a:	50 40       	sbci	r21, 0x00	; 0
    327c:	e0 f7       	brcc	.-8      	; 0x3276 <strncpy+0x14>
    327e:	08 95       	ret

00003280 <strpbrk>:
    3280:	dc 01       	movw	r26, r24
    3282:	99 27       	eor	r25, r25
    3284:	8d 91       	ld	r24, X+
    3286:	88 23       	and	r24, r24
    3288:	41 f0       	breq	.+16     	; 0x329a <strpbrk+0x1a>
    328a:	fb 01       	movw	r30, r22
    328c:	01 90       	ld	r0, Z+
    328e:	08 16       	cp	r0, r24
    3290:	01 10       	cpse	r0, r1
    3292:	e1 f7       	brne	.-8      	; 0x328c <strpbrk+0xc>
    3294:	b9 f7       	brne	.-18     	; 0x3284 <strpbrk+0x4>
    3296:	11 97       	sbiw	r26, 0x01	; 1
    3298:	cd 01       	movw	r24, r26
    329a:	08 95       	ret

0000329c <sprintf>:
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	2e 97       	sbiw	r28, 0x0e	; 14
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	0d 89       	ldd	r16, Y+21	; 0x15
    32b6:	1e 89       	ldd	r17, Y+22	; 0x16
    32b8:	86 e0       	ldi	r24, 0x06	; 6
    32ba:	8c 83       	std	Y+4, r24	; 0x04
    32bc:	1a 83       	std	Y+2, r17	; 0x02
    32be:	09 83       	std	Y+1, r16	; 0x01
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	9f e7       	ldi	r25, 0x7F	; 127
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
    32c8:	ae 01       	movw	r20, r28
    32ca:	47 5e       	subi	r20, 0xE7	; 231
    32cc:	5f 4f       	sbci	r21, 0xFF	; 255
    32ce:	6f 89       	ldd	r22, Y+23	; 0x17
    32d0:	78 8d       	ldd	r23, Y+24	; 0x18
    32d2:	ce 01       	movw	r24, r28
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <vfprintf>
    32da:	ef 81       	ldd	r30, Y+7	; 0x07
    32dc:	f8 85       	ldd	r31, Y+8	; 0x08
    32de:	e0 0f       	add	r30, r16
    32e0:	f1 1f       	adc	r31, r17
    32e2:	10 82       	st	Z, r1
    32e4:	2e 96       	adiw	r28, 0x0e	; 14
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <vfprintf>:
    32fa:	2f 92       	push	r2
    32fc:	3f 92       	push	r3
    32fe:	4f 92       	push	r4
    3300:	5f 92       	push	r5
    3302:	6f 92       	push	r6
    3304:	7f 92       	push	r7
    3306:	8f 92       	push	r8
    3308:	9f 92       	push	r9
    330a:	af 92       	push	r10
    330c:	bf 92       	push	r11
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	2c 97       	sbiw	r28, 0x0c	; 12
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	7c 01       	movw	r14, r24
    3330:	6b 01       	movw	r12, r22
    3332:	8a 01       	movw	r16, r20
    3334:	fc 01       	movw	r30, r24
    3336:	17 82       	std	Z+7, r1	; 0x07
    3338:	16 82       	std	Z+6, r1	; 0x06
    333a:	83 81       	ldd	r24, Z+3	; 0x03
    333c:	81 ff       	sbrs	r24, 1
    333e:	bd c1       	rjmp	.+890    	; 0x36ba <vfprintf+0x3c0>
    3340:	ce 01       	movw	r24, r28
    3342:	01 96       	adiw	r24, 0x01	; 1
    3344:	4c 01       	movw	r8, r24
    3346:	f7 01       	movw	r30, r14
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	f6 01       	movw	r30, r12
    334c:	93 fd       	sbrc	r25, 3
    334e:	85 91       	lpm	r24, Z+
    3350:	93 ff       	sbrs	r25, 3
    3352:	81 91       	ld	r24, Z+
    3354:	6f 01       	movw	r12, r30
    3356:	88 23       	and	r24, r24
    3358:	09 f4       	brne	.+2      	; 0x335c <vfprintf+0x62>
    335a:	ab c1       	rjmp	.+854    	; 0x36b2 <vfprintf+0x3b8>
    335c:	85 32       	cpi	r24, 0x25	; 37
    335e:	39 f4       	brne	.+14     	; 0x336e <vfprintf+0x74>
    3360:	93 fd       	sbrc	r25, 3
    3362:	85 91       	lpm	r24, Z+
    3364:	93 ff       	sbrs	r25, 3
    3366:	81 91       	ld	r24, Z+
    3368:	6f 01       	movw	r12, r30
    336a:	85 32       	cpi	r24, 0x25	; 37
    336c:	29 f4       	brne	.+10     	; 0x3378 <vfprintf+0x7e>
    336e:	b7 01       	movw	r22, r14
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    3376:	e7 cf       	rjmp	.-50     	; 0x3346 <vfprintf+0x4c>
    3378:	51 2c       	mov	r5, r1
    337a:	31 2c       	mov	r3, r1
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	20 32       	cpi	r18, 0x20	; 32
    3380:	a0 f4       	brcc	.+40     	; 0x33aa <vfprintf+0xb0>
    3382:	8b 32       	cpi	r24, 0x2B	; 43
    3384:	69 f0       	breq	.+26     	; 0x33a0 <vfprintf+0xa6>
    3386:	30 f4       	brcc	.+12     	; 0x3394 <vfprintf+0x9a>
    3388:	80 32       	cpi	r24, 0x20	; 32
    338a:	59 f0       	breq	.+22     	; 0x33a2 <vfprintf+0xa8>
    338c:	83 32       	cpi	r24, 0x23	; 35
    338e:	69 f4       	brne	.+26     	; 0x33aa <vfprintf+0xb0>
    3390:	20 61       	ori	r18, 0x10	; 16
    3392:	2c c0       	rjmp	.+88     	; 0x33ec <vfprintf+0xf2>
    3394:	8d 32       	cpi	r24, 0x2D	; 45
    3396:	39 f0       	breq	.+14     	; 0x33a6 <vfprintf+0xac>
    3398:	80 33       	cpi	r24, 0x30	; 48
    339a:	39 f4       	brne	.+14     	; 0x33aa <vfprintf+0xb0>
    339c:	21 60       	ori	r18, 0x01	; 1
    339e:	26 c0       	rjmp	.+76     	; 0x33ec <vfprintf+0xf2>
    33a0:	22 60       	ori	r18, 0x02	; 2
    33a2:	24 60       	ori	r18, 0x04	; 4
    33a4:	23 c0       	rjmp	.+70     	; 0x33ec <vfprintf+0xf2>
    33a6:	28 60       	ori	r18, 0x08	; 8
    33a8:	21 c0       	rjmp	.+66     	; 0x33ec <vfprintf+0xf2>
    33aa:	27 fd       	sbrc	r18, 7
    33ac:	27 c0       	rjmp	.+78     	; 0x33fc <vfprintf+0x102>
    33ae:	30 ed       	ldi	r19, 0xD0	; 208
    33b0:	38 0f       	add	r19, r24
    33b2:	3a 30       	cpi	r19, 0x0A	; 10
    33b4:	78 f4       	brcc	.+30     	; 0x33d4 <vfprintf+0xda>
    33b6:	26 ff       	sbrs	r18, 6
    33b8:	06 c0       	rjmp	.+12     	; 0x33c6 <vfprintf+0xcc>
    33ba:	fa e0       	ldi	r31, 0x0A	; 10
    33bc:	5f 9e       	mul	r5, r31
    33be:	30 0d       	add	r19, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	53 2e       	mov	r5, r19
    33c4:	13 c0       	rjmp	.+38     	; 0x33ec <vfprintf+0xf2>
    33c6:	8a e0       	ldi	r24, 0x0A	; 10
    33c8:	38 9e       	mul	r3, r24
    33ca:	30 0d       	add	r19, r0
    33cc:	11 24       	eor	r1, r1
    33ce:	33 2e       	mov	r3, r19
    33d0:	20 62       	ori	r18, 0x20	; 32
    33d2:	0c c0       	rjmp	.+24     	; 0x33ec <vfprintf+0xf2>
    33d4:	8e 32       	cpi	r24, 0x2E	; 46
    33d6:	21 f4       	brne	.+8      	; 0x33e0 <vfprintf+0xe6>
    33d8:	26 fd       	sbrc	r18, 6
    33da:	6b c1       	rjmp	.+726    	; 0x36b2 <vfprintf+0x3b8>
    33dc:	20 64       	ori	r18, 0x40	; 64
    33de:	06 c0       	rjmp	.+12     	; 0x33ec <vfprintf+0xf2>
    33e0:	8c 36       	cpi	r24, 0x6C	; 108
    33e2:	11 f4       	brne	.+4      	; 0x33e8 <vfprintf+0xee>
    33e4:	20 68       	ori	r18, 0x80	; 128
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <vfprintf+0xf2>
    33e8:	88 36       	cpi	r24, 0x68	; 104
    33ea:	41 f4       	brne	.+16     	; 0x33fc <vfprintf+0x102>
    33ec:	f6 01       	movw	r30, r12
    33ee:	93 fd       	sbrc	r25, 3
    33f0:	85 91       	lpm	r24, Z+
    33f2:	93 ff       	sbrs	r25, 3
    33f4:	81 91       	ld	r24, Z+
    33f6:	6f 01       	movw	r12, r30
    33f8:	81 11       	cpse	r24, r1
    33fa:	c1 cf       	rjmp	.-126    	; 0x337e <vfprintf+0x84>
    33fc:	98 2f       	mov	r25, r24
    33fe:	9f 7d       	andi	r25, 0xDF	; 223
    3400:	95 54       	subi	r25, 0x45	; 69
    3402:	93 30       	cpi	r25, 0x03	; 3
    3404:	28 f4       	brcc	.+10     	; 0x3410 <vfprintf+0x116>
    3406:	0c 5f       	subi	r16, 0xFC	; 252
    3408:	1f 4f       	sbci	r17, 0xFF	; 255
    340a:	ff e3       	ldi	r31, 0x3F	; 63
    340c:	f9 83       	std	Y+1, r31	; 0x01
    340e:	0d c0       	rjmp	.+26     	; 0x342a <vfprintf+0x130>
    3410:	83 36       	cpi	r24, 0x63	; 99
    3412:	31 f0       	breq	.+12     	; 0x3420 <vfprintf+0x126>
    3414:	83 37       	cpi	r24, 0x73	; 115
    3416:	71 f0       	breq	.+28     	; 0x3434 <vfprintf+0x13a>
    3418:	83 35       	cpi	r24, 0x53	; 83
    341a:	09 f0       	breq	.+2      	; 0x341e <vfprintf+0x124>
    341c:	5b c0       	rjmp	.+182    	; 0x34d4 <vfprintf+0x1da>
    341e:	22 c0       	rjmp	.+68     	; 0x3464 <vfprintf+0x16a>
    3420:	f8 01       	movw	r30, r16
    3422:	80 81       	ld	r24, Z
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	0e 5f       	subi	r16, 0xFE	; 254
    3428:	1f 4f       	sbci	r17, 0xFF	; 255
    342a:	44 24       	eor	r4, r4
    342c:	43 94       	inc	r4
    342e:	51 2c       	mov	r5, r1
    3430:	54 01       	movw	r10, r8
    3432:	15 c0       	rjmp	.+42     	; 0x345e <vfprintf+0x164>
    3434:	38 01       	movw	r6, r16
    3436:	f2 e0       	ldi	r31, 0x02	; 2
    3438:	6f 0e       	add	r6, r31
    343a:	71 1c       	adc	r7, r1
    343c:	f8 01       	movw	r30, r16
    343e:	a0 80       	ld	r10, Z
    3440:	b1 80       	ldd	r11, Z+1	; 0x01
    3442:	26 ff       	sbrs	r18, 6
    3444:	03 c0       	rjmp	.+6      	; 0x344c <vfprintf+0x152>
    3446:	65 2d       	mov	r22, r5
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <vfprintf+0x156>
    344c:	6f ef       	ldi	r22, 0xFF	; 255
    344e:	7f ef       	ldi	r23, 0xFF	; 255
    3450:	c5 01       	movw	r24, r10
    3452:	2c 87       	std	Y+12, r18	; 0x0c
    3454:	0e 94 b2 1b 	call	0x3764	; 0x3764 <strnlen>
    3458:	2c 01       	movw	r4, r24
    345a:	83 01       	movw	r16, r6
    345c:	2c 85       	ldd	r18, Y+12	; 0x0c
    345e:	2f 77       	andi	r18, 0x7F	; 127
    3460:	22 2e       	mov	r2, r18
    3462:	17 c0       	rjmp	.+46     	; 0x3492 <vfprintf+0x198>
    3464:	38 01       	movw	r6, r16
    3466:	f2 e0       	ldi	r31, 0x02	; 2
    3468:	6f 0e       	add	r6, r31
    346a:	71 1c       	adc	r7, r1
    346c:	f8 01       	movw	r30, r16
    346e:	a0 80       	ld	r10, Z
    3470:	b1 80       	ldd	r11, Z+1	; 0x01
    3472:	26 ff       	sbrs	r18, 6
    3474:	03 c0       	rjmp	.+6      	; 0x347c <vfprintf+0x182>
    3476:	65 2d       	mov	r22, r5
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <vfprintf+0x186>
    347c:	6f ef       	ldi	r22, 0xFF	; 255
    347e:	7f ef       	ldi	r23, 0xFF	; 255
    3480:	c5 01       	movw	r24, r10
    3482:	2c 87       	std	Y+12, r18	; 0x0c
    3484:	0e 94 a7 1b 	call	0x374e	; 0x374e <strnlen_P>
    3488:	2c 01       	movw	r4, r24
    348a:	2c 85       	ldd	r18, Y+12	; 0x0c
    348c:	20 68       	ori	r18, 0x80	; 128
    348e:	22 2e       	mov	r2, r18
    3490:	83 01       	movw	r16, r6
    3492:	23 fc       	sbrc	r2, 3
    3494:	1b c0       	rjmp	.+54     	; 0x34cc <vfprintf+0x1d2>
    3496:	83 2d       	mov	r24, r3
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	48 16       	cp	r4, r24
    349c:	59 06       	cpc	r5, r25
    349e:	b0 f4       	brcc	.+44     	; 0x34cc <vfprintf+0x1d2>
    34a0:	b7 01       	movw	r22, r14
    34a2:	80 e2       	ldi	r24, 0x20	; 32
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    34aa:	3a 94       	dec	r3
    34ac:	f4 cf       	rjmp	.-24     	; 0x3496 <vfprintf+0x19c>
    34ae:	f5 01       	movw	r30, r10
    34b0:	27 fc       	sbrc	r2, 7
    34b2:	85 91       	lpm	r24, Z+
    34b4:	27 fe       	sbrs	r2, 7
    34b6:	81 91       	ld	r24, Z+
    34b8:	5f 01       	movw	r10, r30
    34ba:	b7 01       	movw	r22, r14
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    34c2:	31 10       	cpse	r3, r1
    34c4:	3a 94       	dec	r3
    34c6:	f1 e0       	ldi	r31, 0x01	; 1
    34c8:	4f 1a       	sub	r4, r31
    34ca:	51 08       	sbc	r5, r1
    34cc:	41 14       	cp	r4, r1
    34ce:	51 04       	cpc	r5, r1
    34d0:	71 f7       	brne	.-36     	; 0x34ae <vfprintf+0x1b4>
    34d2:	e5 c0       	rjmp	.+458    	; 0x369e <vfprintf+0x3a4>
    34d4:	84 36       	cpi	r24, 0x64	; 100
    34d6:	11 f0       	breq	.+4      	; 0x34dc <vfprintf+0x1e2>
    34d8:	89 36       	cpi	r24, 0x69	; 105
    34da:	39 f5       	brne	.+78     	; 0x352a <vfprintf+0x230>
    34dc:	f8 01       	movw	r30, r16
    34de:	27 ff       	sbrs	r18, 7
    34e0:	07 c0       	rjmp	.+14     	; 0x34f0 <vfprintf+0x1f6>
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	93 81       	ldd	r25, Z+3	; 0x03
    34ea:	0c 5f       	subi	r16, 0xFC	; 252
    34ec:	1f 4f       	sbci	r17, 0xFF	; 255
    34ee:	08 c0       	rjmp	.+16     	; 0x3500 <vfprintf+0x206>
    34f0:	60 81       	ld	r22, Z
    34f2:	71 81       	ldd	r23, Z+1	; 0x01
    34f4:	88 27       	eor	r24, r24
    34f6:	77 fd       	sbrc	r23, 7
    34f8:	80 95       	com	r24
    34fa:	98 2f       	mov	r25, r24
    34fc:	0e 5f       	subi	r16, 0xFE	; 254
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	2f 76       	andi	r18, 0x6F	; 111
    3502:	b2 2e       	mov	r11, r18
    3504:	97 ff       	sbrs	r25, 7
    3506:	09 c0       	rjmp	.+18     	; 0x351a <vfprintf+0x220>
    3508:	90 95       	com	r25
    350a:	80 95       	com	r24
    350c:	70 95       	com	r23
    350e:	61 95       	neg	r22
    3510:	7f 4f       	sbci	r23, 0xFF	; 255
    3512:	8f 4f       	sbci	r24, 0xFF	; 255
    3514:	9f 4f       	sbci	r25, 0xFF	; 255
    3516:	20 68       	ori	r18, 0x80	; 128
    3518:	b2 2e       	mov	r11, r18
    351a:	2a e0       	ldi	r18, 0x0A	; 10
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	a4 01       	movw	r20, r8
    3520:	0e 94 ef 1b 	call	0x37de	; 0x37de <__ultoa_invert>
    3524:	a8 2e       	mov	r10, r24
    3526:	a8 18       	sub	r10, r8
    3528:	44 c0       	rjmp	.+136    	; 0x35b2 <vfprintf+0x2b8>
    352a:	85 37       	cpi	r24, 0x75	; 117
    352c:	29 f4       	brne	.+10     	; 0x3538 <vfprintf+0x23e>
    352e:	2f 7e       	andi	r18, 0xEF	; 239
    3530:	b2 2e       	mov	r11, r18
    3532:	2a e0       	ldi	r18, 0x0A	; 10
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	25 c0       	rjmp	.+74     	; 0x3582 <vfprintf+0x288>
    3538:	f2 2f       	mov	r31, r18
    353a:	f9 7f       	andi	r31, 0xF9	; 249
    353c:	bf 2e       	mov	r11, r31
    353e:	8f 36       	cpi	r24, 0x6F	; 111
    3540:	c1 f0       	breq	.+48     	; 0x3572 <vfprintf+0x278>
    3542:	18 f4       	brcc	.+6      	; 0x354a <vfprintf+0x250>
    3544:	88 35       	cpi	r24, 0x58	; 88
    3546:	79 f0       	breq	.+30     	; 0x3566 <vfprintf+0x26c>
    3548:	b4 c0       	rjmp	.+360    	; 0x36b2 <vfprintf+0x3b8>
    354a:	80 37       	cpi	r24, 0x70	; 112
    354c:	19 f0       	breq	.+6      	; 0x3554 <vfprintf+0x25a>
    354e:	88 37       	cpi	r24, 0x78	; 120
    3550:	21 f0       	breq	.+8      	; 0x355a <vfprintf+0x260>
    3552:	af c0       	rjmp	.+350    	; 0x36b2 <vfprintf+0x3b8>
    3554:	2f 2f       	mov	r18, r31
    3556:	20 61       	ori	r18, 0x10	; 16
    3558:	b2 2e       	mov	r11, r18
    355a:	b4 fe       	sbrs	r11, 4
    355c:	0d c0       	rjmp	.+26     	; 0x3578 <vfprintf+0x27e>
    355e:	8b 2d       	mov	r24, r11
    3560:	84 60       	ori	r24, 0x04	; 4
    3562:	b8 2e       	mov	r11, r24
    3564:	09 c0       	rjmp	.+18     	; 0x3578 <vfprintf+0x27e>
    3566:	24 ff       	sbrs	r18, 4
    3568:	0a c0       	rjmp	.+20     	; 0x357e <vfprintf+0x284>
    356a:	9f 2f       	mov	r25, r31
    356c:	96 60       	ori	r25, 0x06	; 6
    356e:	b9 2e       	mov	r11, r25
    3570:	06 c0       	rjmp	.+12     	; 0x357e <vfprintf+0x284>
    3572:	28 e0       	ldi	r18, 0x08	; 8
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	05 c0       	rjmp	.+10     	; 0x3582 <vfprintf+0x288>
    3578:	20 e1       	ldi	r18, 0x10	; 16
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <vfprintf+0x288>
    357e:	20 e1       	ldi	r18, 0x10	; 16
    3580:	32 e0       	ldi	r19, 0x02	; 2
    3582:	f8 01       	movw	r30, r16
    3584:	b7 fe       	sbrs	r11, 7
    3586:	07 c0       	rjmp	.+14     	; 0x3596 <vfprintf+0x29c>
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	0c 5f       	subi	r16, 0xFC	; 252
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	06 c0       	rjmp	.+12     	; 0x35a2 <vfprintf+0x2a8>
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	0e 5f       	subi	r16, 0xFE	; 254
    35a0:	1f 4f       	sbci	r17, 0xFF	; 255
    35a2:	a4 01       	movw	r20, r8
    35a4:	0e 94 ef 1b 	call	0x37de	; 0x37de <__ultoa_invert>
    35a8:	a8 2e       	mov	r10, r24
    35aa:	a8 18       	sub	r10, r8
    35ac:	fb 2d       	mov	r31, r11
    35ae:	ff 77       	andi	r31, 0x7F	; 127
    35b0:	bf 2e       	mov	r11, r31
    35b2:	b6 fe       	sbrs	r11, 6
    35b4:	0b c0       	rjmp	.+22     	; 0x35cc <vfprintf+0x2d2>
    35b6:	2b 2d       	mov	r18, r11
    35b8:	2e 7f       	andi	r18, 0xFE	; 254
    35ba:	a5 14       	cp	r10, r5
    35bc:	50 f4       	brcc	.+20     	; 0x35d2 <vfprintf+0x2d8>
    35be:	b4 fe       	sbrs	r11, 4
    35c0:	0a c0       	rjmp	.+20     	; 0x35d6 <vfprintf+0x2dc>
    35c2:	b2 fc       	sbrc	r11, 2
    35c4:	08 c0       	rjmp	.+16     	; 0x35d6 <vfprintf+0x2dc>
    35c6:	2b 2d       	mov	r18, r11
    35c8:	2e 7e       	andi	r18, 0xEE	; 238
    35ca:	05 c0       	rjmp	.+10     	; 0x35d6 <vfprintf+0x2dc>
    35cc:	7a 2c       	mov	r7, r10
    35ce:	2b 2d       	mov	r18, r11
    35d0:	03 c0       	rjmp	.+6      	; 0x35d8 <vfprintf+0x2de>
    35d2:	7a 2c       	mov	r7, r10
    35d4:	01 c0       	rjmp	.+2      	; 0x35d8 <vfprintf+0x2de>
    35d6:	75 2c       	mov	r7, r5
    35d8:	24 ff       	sbrs	r18, 4
    35da:	0d c0       	rjmp	.+26     	; 0x35f6 <vfprintf+0x2fc>
    35dc:	fe 01       	movw	r30, r28
    35de:	ea 0d       	add	r30, r10
    35e0:	f1 1d       	adc	r31, r1
    35e2:	80 81       	ld	r24, Z
    35e4:	80 33       	cpi	r24, 0x30	; 48
    35e6:	11 f4       	brne	.+4      	; 0x35ec <vfprintf+0x2f2>
    35e8:	29 7e       	andi	r18, 0xE9	; 233
    35ea:	09 c0       	rjmp	.+18     	; 0x35fe <vfprintf+0x304>
    35ec:	22 ff       	sbrs	r18, 2
    35ee:	06 c0       	rjmp	.+12     	; 0x35fc <vfprintf+0x302>
    35f0:	73 94       	inc	r7
    35f2:	73 94       	inc	r7
    35f4:	04 c0       	rjmp	.+8      	; 0x35fe <vfprintf+0x304>
    35f6:	82 2f       	mov	r24, r18
    35f8:	86 78       	andi	r24, 0x86	; 134
    35fa:	09 f0       	breq	.+2      	; 0x35fe <vfprintf+0x304>
    35fc:	73 94       	inc	r7
    35fe:	23 fd       	sbrc	r18, 3
    3600:	13 c0       	rjmp	.+38     	; 0x3628 <vfprintf+0x32e>
    3602:	20 ff       	sbrs	r18, 0
    3604:	06 c0       	rjmp	.+12     	; 0x3612 <vfprintf+0x318>
    3606:	5a 2c       	mov	r5, r10
    3608:	73 14       	cp	r7, r3
    360a:	18 f4       	brcc	.+6      	; 0x3612 <vfprintf+0x318>
    360c:	53 0c       	add	r5, r3
    360e:	57 18       	sub	r5, r7
    3610:	73 2c       	mov	r7, r3
    3612:	73 14       	cp	r7, r3
    3614:	68 f4       	brcc	.+26     	; 0x3630 <vfprintf+0x336>
    3616:	b7 01       	movw	r22, r14
    3618:	80 e2       	ldi	r24, 0x20	; 32
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	2c 87       	std	Y+12, r18	; 0x0c
    361e:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    3622:	73 94       	inc	r7
    3624:	2c 85       	ldd	r18, Y+12	; 0x0c
    3626:	f5 cf       	rjmp	.-22     	; 0x3612 <vfprintf+0x318>
    3628:	73 14       	cp	r7, r3
    362a:	10 f4       	brcc	.+4      	; 0x3630 <vfprintf+0x336>
    362c:	37 18       	sub	r3, r7
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <vfprintf+0x338>
    3630:	31 2c       	mov	r3, r1
    3632:	24 ff       	sbrs	r18, 4
    3634:	12 c0       	rjmp	.+36     	; 0x365a <vfprintf+0x360>
    3636:	b7 01       	movw	r22, r14
    3638:	80 e3       	ldi	r24, 0x30	; 48
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	2c 87       	std	Y+12, r18	; 0x0c
    363e:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    3642:	2c 85       	ldd	r18, Y+12	; 0x0c
    3644:	22 ff       	sbrs	r18, 2
    3646:	17 c0       	rjmp	.+46     	; 0x3676 <vfprintf+0x37c>
    3648:	21 ff       	sbrs	r18, 1
    364a:	03 c0       	rjmp	.+6      	; 0x3652 <vfprintf+0x358>
    364c:	88 e5       	ldi	r24, 0x58	; 88
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <vfprintf+0x35c>
    3652:	88 e7       	ldi	r24, 0x78	; 120
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	b7 01       	movw	r22, r14
    3658:	0c c0       	rjmp	.+24     	; 0x3672 <vfprintf+0x378>
    365a:	82 2f       	mov	r24, r18
    365c:	86 78       	andi	r24, 0x86	; 134
    365e:	59 f0       	breq	.+22     	; 0x3676 <vfprintf+0x37c>
    3660:	21 fd       	sbrc	r18, 1
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <vfprintf+0x36e>
    3664:	80 e2       	ldi	r24, 0x20	; 32
    3666:	01 c0       	rjmp	.+2      	; 0x366a <vfprintf+0x370>
    3668:	8b e2       	ldi	r24, 0x2B	; 43
    366a:	27 fd       	sbrc	r18, 7
    366c:	8d e2       	ldi	r24, 0x2D	; 45
    366e:	b7 01       	movw	r22, r14
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    3676:	a5 14       	cp	r10, r5
    3678:	38 f4       	brcc	.+14     	; 0x3688 <vfprintf+0x38e>
    367a:	b7 01       	movw	r22, r14
    367c:	80 e3       	ldi	r24, 0x30	; 48
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    3684:	5a 94       	dec	r5
    3686:	f7 cf       	rjmp	.-18     	; 0x3676 <vfprintf+0x37c>
    3688:	aa 94       	dec	r10
    368a:	f4 01       	movw	r30, r8
    368c:	ea 0d       	add	r30, r10
    368e:	f1 1d       	adc	r31, r1
    3690:	80 81       	ld	r24, Z
    3692:	b7 01       	movw	r22, r14
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    369a:	a1 10       	cpse	r10, r1
    369c:	f5 cf       	rjmp	.-22     	; 0x3688 <vfprintf+0x38e>
    369e:	33 20       	and	r3, r3
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <vfprintf+0x3aa>
    36a2:	51 ce       	rjmp	.-862    	; 0x3346 <vfprintf+0x4c>
    36a4:	b7 01       	movw	r22, r14
    36a6:	80 e2       	ldi	r24, 0x20	; 32
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 bd 1b 	call	0x377a	; 0x377a <fputc>
    36ae:	3a 94       	dec	r3
    36b0:	f6 cf       	rjmp	.-20     	; 0x369e <vfprintf+0x3a4>
    36b2:	f7 01       	movw	r30, r14
    36b4:	86 81       	ldd	r24, Z+6	; 0x06
    36b6:	97 81       	ldd	r25, Z+7	; 0x07
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <vfprintf+0x3c4>
    36ba:	8f ef       	ldi	r24, 0xFF	; 255
    36bc:	9f ef       	ldi	r25, 0xFF	; 255
    36be:	2c 96       	adiw	r28, 0x0c	; 12
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	ff 90       	pop	r15
    36d4:	ef 90       	pop	r14
    36d6:	df 90       	pop	r13
    36d8:	cf 90       	pop	r12
    36da:	bf 90       	pop	r11
    36dc:	af 90       	pop	r10
    36de:	9f 90       	pop	r9
    36e0:	8f 90       	pop	r8
    36e2:	7f 90       	pop	r7
    36e4:	6f 90       	pop	r6
    36e6:	5f 90       	pop	r5
    36e8:	4f 90       	pop	r4
    36ea:	3f 90       	pop	r3
    36ec:	2f 90       	pop	r2
    36ee:	08 95       	ret

000036f0 <__eerd_block_m1284p>:
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22

000036f4 <__eerd_blraw_m1284p>:
    36f4:	fc 01       	movw	r30, r24
    36f6:	f9 99       	sbic	0x1f, 1	; 31
    36f8:	fe cf       	rjmp	.-4      	; 0x36f6 <__eerd_blraw_m1284p+0x2>
    36fa:	06 c0       	rjmp	.+12     	; 0x3708 <__eerd_blraw_m1284p+0x14>
    36fc:	f2 bd       	out	0x22, r31	; 34
    36fe:	e1 bd       	out	0x21, r30	; 33
    3700:	f8 9a       	sbi	0x1f, 0	; 31
    3702:	31 96       	adiw	r30, 0x01	; 1
    3704:	00 b4       	in	r0, 0x20	; 32
    3706:	0d 92       	st	X+, r0
    3708:	41 50       	subi	r20, 0x01	; 1
    370a:	50 40       	sbci	r21, 0x00	; 0
    370c:	b8 f7       	brcc	.-18     	; 0x36fc <__eerd_blraw_m1284p+0x8>
    370e:	08 95       	ret

00003710 <__eerd_byte_m1284p>:
    3710:	f9 99       	sbic	0x1f, 1	; 31
    3712:	fe cf       	rjmp	.-4      	; 0x3710 <__eerd_byte_m1284p>
    3714:	92 bd       	out	0x22, r25	; 34
    3716:	81 bd       	out	0x21, r24	; 33
    3718:	f8 9a       	sbi	0x1f, 0	; 31
    371a:	99 27       	eor	r25, r25
    371c:	80 b5       	in	r24, 0x20	; 32
    371e:	08 95       	ret

00003720 <__eerd_dword_m1284p>:
    3720:	a6 e1       	ldi	r26, 0x16	; 22
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	44 e0       	ldi	r20, 0x04	; 4
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <__eerd_blraw_m1284p>

0000372c <__eewr_byte_m1284p>:
    372c:	26 2f       	mov	r18, r22

0000372e <__eewr_r18_m1284p>:
    372e:	f9 99       	sbic	0x1f, 1	; 31
    3730:	fe cf       	rjmp	.-4      	; 0x372e <__eewr_r18_m1284p>
    3732:	1f ba       	out	0x1f, r1	; 31
    3734:	92 bd       	out	0x22, r25	; 34
    3736:	81 bd       	out	0x21, r24	; 33
    3738:	20 bd       	out	0x20, r18	; 32
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	fa 9a       	sbi	0x1f, 2	; 31
    3740:	f9 9a       	sbi	0x1f, 1	; 31
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	01 96       	adiw	r24, 0x01	; 1
    3746:	08 95       	ret

00003748 <__ctype_isfalse>:
    3748:	99 27       	eor	r25, r25
    374a:	88 27       	eor	r24, r24

0000374c <__ctype_istrue>:
    374c:	08 95       	ret

0000374e <strnlen_P>:
    374e:	fc 01       	movw	r30, r24
    3750:	05 90       	lpm	r0, Z+
    3752:	61 50       	subi	r22, 0x01	; 1
    3754:	70 40       	sbci	r23, 0x00	; 0
    3756:	01 10       	cpse	r0, r1
    3758:	d8 f7       	brcc	.-10     	; 0x3750 <strnlen_P+0x2>
    375a:	80 95       	com	r24
    375c:	90 95       	com	r25
    375e:	8e 0f       	add	r24, r30
    3760:	9f 1f       	adc	r25, r31
    3762:	08 95       	ret

00003764 <strnlen>:
    3764:	fc 01       	movw	r30, r24
    3766:	61 50       	subi	r22, 0x01	; 1
    3768:	70 40       	sbci	r23, 0x00	; 0
    376a:	01 90       	ld	r0, Z+
    376c:	01 10       	cpse	r0, r1
    376e:	d8 f7       	brcc	.-10     	; 0x3766 <strnlen+0x2>
    3770:	80 95       	com	r24
    3772:	90 95       	com	r25
    3774:	8e 0f       	add	r24, r30
    3776:	9f 1f       	adc	r25, r31
    3778:	08 95       	ret

0000377a <fputc>:
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	18 2f       	mov	r17, r24
    3784:	09 2f       	mov	r16, r25
    3786:	eb 01       	movw	r28, r22
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	81 fd       	sbrc	r24, 1
    378c:	03 c0       	rjmp	.+6      	; 0x3794 <fputc+0x1a>
    378e:	8f ef       	ldi	r24, 0xFF	; 255
    3790:	9f ef       	ldi	r25, 0xFF	; 255
    3792:	20 c0       	rjmp	.+64     	; 0x37d4 <fputc+0x5a>
    3794:	82 ff       	sbrs	r24, 2
    3796:	10 c0       	rjmp	.+32     	; 0x37b8 <fputc+0x3e>
    3798:	4e 81       	ldd	r20, Y+6	; 0x06
    379a:	5f 81       	ldd	r21, Y+7	; 0x07
    379c:	2c 81       	ldd	r18, Y+4	; 0x04
    379e:	3d 81       	ldd	r19, Y+5	; 0x05
    37a0:	42 17       	cp	r20, r18
    37a2:	53 07       	cpc	r21, r19
    37a4:	7c f4       	brge	.+30     	; 0x37c4 <fputc+0x4a>
    37a6:	e8 81       	ld	r30, Y
    37a8:	f9 81       	ldd	r31, Y+1	; 0x01
    37aa:	9f 01       	movw	r18, r30
    37ac:	2f 5f       	subi	r18, 0xFF	; 255
    37ae:	3f 4f       	sbci	r19, 0xFF	; 255
    37b0:	39 83       	std	Y+1, r19	; 0x01
    37b2:	28 83       	st	Y, r18
    37b4:	10 83       	st	Z, r17
    37b6:	06 c0       	rjmp	.+12     	; 0x37c4 <fputc+0x4a>
    37b8:	e8 85       	ldd	r30, Y+8	; 0x08
    37ba:	f9 85       	ldd	r31, Y+9	; 0x09
    37bc:	81 2f       	mov	r24, r17
    37be:	09 95       	icall
    37c0:	89 2b       	or	r24, r25
    37c2:	29 f7       	brne	.-54     	; 0x378e <fputc+0x14>
    37c4:	2e 81       	ldd	r18, Y+6	; 0x06
    37c6:	3f 81       	ldd	r19, Y+7	; 0x07
    37c8:	2f 5f       	subi	r18, 0xFF	; 255
    37ca:	3f 4f       	sbci	r19, 0xFF	; 255
    37cc:	3f 83       	std	Y+7, r19	; 0x07
    37ce:	2e 83       	std	Y+6, r18	; 0x06
    37d0:	81 2f       	mov	r24, r17
    37d2:	90 2f       	mov	r25, r16
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	08 95       	ret

000037de <__ultoa_invert>:
    37de:	fa 01       	movw	r30, r20
    37e0:	aa 27       	eor	r26, r26
    37e2:	28 30       	cpi	r18, 0x08	; 8
    37e4:	51 f1       	breq	.+84     	; 0x383a <__ultoa_invert+0x5c>
    37e6:	20 31       	cpi	r18, 0x10	; 16
    37e8:	81 f1       	breq	.+96     	; 0x384a <__ultoa_invert+0x6c>
    37ea:	e8 94       	clt
    37ec:	6f 93       	push	r22
    37ee:	6e 7f       	andi	r22, 0xFE	; 254
    37f0:	6e 5f       	subi	r22, 0xFE	; 254
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	8f 4f       	sbci	r24, 0xFF	; 255
    37f6:	9f 4f       	sbci	r25, 0xFF	; 255
    37f8:	af 4f       	sbci	r26, 0xFF	; 255
    37fa:	b1 e0       	ldi	r27, 0x01	; 1
    37fc:	3e d0       	rcall	.+124    	; 0x387a <__ultoa_invert+0x9c>
    37fe:	b4 e0       	ldi	r27, 0x04	; 4
    3800:	3c d0       	rcall	.+120    	; 0x387a <__ultoa_invert+0x9c>
    3802:	67 0f       	add	r22, r23
    3804:	78 1f       	adc	r23, r24
    3806:	89 1f       	adc	r24, r25
    3808:	9a 1f       	adc	r25, r26
    380a:	a1 1d       	adc	r26, r1
    380c:	68 0f       	add	r22, r24
    380e:	79 1f       	adc	r23, r25
    3810:	8a 1f       	adc	r24, r26
    3812:	91 1d       	adc	r25, r1
    3814:	a1 1d       	adc	r26, r1
    3816:	6a 0f       	add	r22, r26
    3818:	71 1d       	adc	r23, r1
    381a:	81 1d       	adc	r24, r1
    381c:	91 1d       	adc	r25, r1
    381e:	a1 1d       	adc	r26, r1
    3820:	20 d0       	rcall	.+64     	; 0x3862 <__ultoa_invert+0x84>
    3822:	09 f4       	brne	.+2      	; 0x3826 <__ultoa_invert+0x48>
    3824:	68 94       	set
    3826:	3f 91       	pop	r19
    3828:	2a e0       	ldi	r18, 0x0A	; 10
    382a:	26 9f       	mul	r18, r22
    382c:	11 24       	eor	r1, r1
    382e:	30 19       	sub	r19, r0
    3830:	30 5d       	subi	r19, 0xD0	; 208
    3832:	31 93       	st	Z+, r19
    3834:	de f6       	brtc	.-74     	; 0x37ec <__ultoa_invert+0xe>
    3836:	cf 01       	movw	r24, r30
    3838:	08 95       	ret
    383a:	46 2f       	mov	r20, r22
    383c:	47 70       	andi	r20, 0x07	; 7
    383e:	40 5d       	subi	r20, 0xD0	; 208
    3840:	41 93       	st	Z+, r20
    3842:	b3 e0       	ldi	r27, 0x03	; 3
    3844:	0f d0       	rcall	.+30     	; 0x3864 <__ultoa_invert+0x86>
    3846:	c9 f7       	brne	.-14     	; 0x383a <__ultoa_invert+0x5c>
    3848:	f6 cf       	rjmp	.-20     	; 0x3836 <__ultoa_invert+0x58>
    384a:	46 2f       	mov	r20, r22
    384c:	4f 70       	andi	r20, 0x0F	; 15
    384e:	40 5d       	subi	r20, 0xD0	; 208
    3850:	4a 33       	cpi	r20, 0x3A	; 58
    3852:	18 f0       	brcs	.+6      	; 0x385a <__ultoa_invert+0x7c>
    3854:	49 5d       	subi	r20, 0xD9	; 217
    3856:	31 fd       	sbrc	r19, 1
    3858:	40 52       	subi	r20, 0x20	; 32
    385a:	41 93       	st	Z+, r20
    385c:	02 d0       	rcall	.+4      	; 0x3862 <__ultoa_invert+0x84>
    385e:	a9 f7       	brne	.-22     	; 0x384a <__ultoa_invert+0x6c>
    3860:	ea cf       	rjmp	.-44     	; 0x3836 <__ultoa_invert+0x58>
    3862:	b4 e0       	ldi	r27, 0x04	; 4
    3864:	a6 95       	lsr	r26
    3866:	97 95       	ror	r25
    3868:	87 95       	ror	r24
    386a:	77 95       	ror	r23
    386c:	67 95       	ror	r22
    386e:	ba 95       	dec	r27
    3870:	c9 f7       	brne	.-14     	; 0x3864 <__ultoa_invert+0x86>
    3872:	00 97       	sbiw	r24, 0x00	; 0
    3874:	61 05       	cpc	r22, r1
    3876:	71 05       	cpc	r23, r1
    3878:	08 95       	ret
    387a:	9b 01       	movw	r18, r22
    387c:	ac 01       	movw	r20, r24
    387e:	0a 2e       	mov	r0, r26
    3880:	06 94       	lsr	r0
    3882:	57 95       	ror	r21
    3884:	47 95       	ror	r20
    3886:	37 95       	ror	r19
    3888:	27 95       	ror	r18
    388a:	ba 95       	dec	r27
    388c:	c9 f7       	brne	.-14     	; 0x3880 <__ultoa_invert+0xa2>
    388e:	62 0f       	add	r22, r18
    3890:	73 1f       	adc	r23, r19
    3892:	84 1f       	adc	r24, r20
    3894:	95 1f       	adc	r25, r21
    3896:	a0 1d       	adc	r26, r0
    3898:	08 95       	ret

0000389a <__muluhisi3>:
    389a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__umulhisi3>
    389e:	a5 9f       	mul	r26, r21
    38a0:	90 0d       	add	r25, r0
    38a2:	b4 9f       	mul	r27, r20
    38a4:	90 0d       	add	r25, r0
    38a6:	a4 9f       	mul	r26, r20
    38a8:	80 0d       	add	r24, r0
    38aa:	91 1d       	adc	r25, r1
    38ac:	11 24       	eor	r1, r1
    38ae:	08 95       	ret

000038b0 <__umulhisi3>:
    38b0:	a2 9f       	mul	r26, r18
    38b2:	b0 01       	movw	r22, r0
    38b4:	b3 9f       	mul	r27, r19
    38b6:	c0 01       	movw	r24, r0
    38b8:	a3 9f       	mul	r26, r19
    38ba:	70 0d       	add	r23, r0
    38bc:	81 1d       	adc	r24, r1
    38be:	11 24       	eor	r1, r1
    38c0:	91 1d       	adc	r25, r1
    38c2:	b2 9f       	mul	r27, r18
    38c4:	70 0d       	add	r23, r0
    38c6:	81 1d       	adc	r24, r1
    38c8:	11 24       	eor	r1, r1
    38ca:	91 1d       	adc	r25, r1
    38cc:	08 95       	ret

000038ce <_exit>:
    38ce:	f8 94       	cli

000038d0 <__stop_program>:
    38d0:	ff cf       	rjmp	.-2      	; 0x38d0 <__stop_program>
