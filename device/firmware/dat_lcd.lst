
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035a  00800100  00004dc2  00004e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080045a  0080045a  000051b0  2**0
                  ALLOC
  3 .stab         0000ceb8  00000000  00000000  000051b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002dff  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00014e67  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ca 00 	jmp	0x194	; 0x194 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_3>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_13>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_20>
      54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      68:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      6c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      70:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_28>
      74:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      78:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      7c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      80:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      84:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      88:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 08       	sbc	r3, r15
      d8:	00 00       	nop
      da:	00 be       	out	0x30, r0	; 48
      dc:	92 24       	eor	r9, r2
      de:	49 12       	cpse	r4, r25
      e0:	3e ab       	std	Y+54, r19	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	2a be       	out	0x3a, r2	; 58
      e6:	cd cc       	rjmp	.-1638   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      e8:	cc 4c       	sbci	r28, 0xCC	; 204
      ea:	3e 00       	.word	0x003e	; ????
      ec:	00 00       	nop
      ee:	80 be       	out	0x30, r8	; 48
      f0:	ab aa       	std	Y+51, r10	; 0x33
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	00 bf       	out	0x30, r16	; 48
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
     102:	00 00       	nop
     104:	08 41       	sbci	r16, 0x18	; 24
     106:	78 d3       	rcall	.+1776   	; 0x7f8 <instruction_read+0xd4>
     108:	bb 43       	sbci	r27, 0x3B	; 59
     10a:	87 d1       	rcall	.+782    	; 0x41a <__vector_28+0x9c>
     10c:	13 3d       	cpi	r17, 0xD3	; 211
     10e:	19 0e       	add	r1, r25
     110:	3c c3       	rjmp	.+1656   	; 0x78a <instruction_read+0x66>
     112:	bd 42       	sbci	r27, 0x2D	; 45
     114:	82 ad       	ldd	r24, Z+58	; 0x3a
     116:	2b 3e       	cpi	r18, 0xEB	; 235
     118:	68 ec       	ldi	r22, 0xC8	; 200
     11a:	82 76       	andi	r24, 0x62	; 98
     11c:	be d9       	rcall	.-3204   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	a9 3e       	cpi	r26, 0xE9	; 233
     122:	4c 80       	ldd	r4, Y+4	; 0x04
     124:	ef ff       	.word	0xffef	; ????
     126:	be 01       	movw	r22, r28
     128:	c4 ff       	sbrs	r28, 4
     12a:	7f 3f       	cpi	r23, 0xFF	; 255
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	00 07       	cpc	r16, r16
     132:	63 42       	sbci	r22, 0x23	; 35
     134:	36 b7       	in	r19, 0x36	; 54
     136:	9b d8       	rcall	.-3786   	; 0xfffff26e <__eeprom_end+0xff7ef26e>
     138:	a7 1a       	sub	r10, r23
     13a:	39 68       	ori	r19, 0x89	; 137
     13c:	56 18       	sub	r5, r6
     13e:	ae ba       	out	0x1e, r10	; 30
     140:	ab 55       	subi	r26, 0x5B	; 91
     142:	8c 1d       	adc	r24, r12
     144:	3c b7       	in	r19, 0x3c	; 60
     146:	cc 57       	subi	r28, 0x7C	; 124
     148:	63 bd       	out	0x23, r22	; 35
     14a:	6d ed       	ldi	r22, 0xDD	; 221
     14c:	fd 75       	andi	r31, 0x5D	; 93
     14e:	3e f6       	brtc	.-114    	; 0xde <__SREG__+0x9f>
     150:	17 72       	andi	r17, 0x27	; 39
     152:	31 bf       	out	0x31, r19	; 49
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	3f 49       	sbci	r19, 0x9F	; 159

00000159 <pstr_inf>:
     159:	49 4e 46                                            INF

0000015c <pstr_inity>:
     15c:	49 4e 49 54 59                                      INITY

00000161 <pstr_nan>:
     161:	4e 41 4e                                            NAN

00000164 <pwr_p10>:
     164:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     174:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000017c <pwr_m10>:
     17c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     18c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e4       	ldi	r29, 0x40	; 64
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	14 e0       	ldi	r17, 0x04	; 4
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	e2 ec       	ldi	r30, 0xC2	; 194
     1a8:	fd e4       	ldi	r31, 0x4D	; 77
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	0b bf       	out	0x3b, r16	; 59
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x14>
     1b0:	07 90       	elpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	aa 35       	cpi	r26, 0x5A	; 90
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0x10>

000001ba <__do_clear_bss>:
     1ba:	14 e0       	ldi	r17, 0x04	; 4
     1bc:	aa e5       	ldi	r26, 0x5A	; 90
     1be:	b4 e0       	ldi	r27, 0x04	; 4
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	a6 36       	cpi	r26, 0x66	; 102
     1c6:	b1 07       	cpc	r27, r17
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 b6 18 	call	0x316c	; 0x316c <main>
     1ce:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <__vector_3>:
    return 0; //should never get here.
}


//---- PIN CHANGE INTERRUPT (PUSHBUTTON PRESSED) ----//
ISR(INT2_vect) {
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	0b b6       	in	r0, 0x3b	; 59
     1e2:	0f 92       	push	r0
     1e4:	2f 93       	push	r18
     1e6:	3f 93       	push	r19
     1e8:	4f 93       	push	r20
     1ea:	5f 93       	push	r21
     1ec:	6f 93       	push	r22
     1ee:	7f 93       	push	r23
     1f0:	8f 93       	push	r24
     1f2:	9f 93       	push	r25
     1f4:	af 93       	push	r26
     1f6:	bf 93       	push	r27
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
    if ((device->button_pressable)&&(device->op_mode!=MD_UPDATE_REQUIRED)&&(device->op_mode!=MD_UPDATE))
     1fc:	e0 91 5e 04 	lds	r30, 0x045E
     200:	f0 91 5f 04 	lds	r31, 0x045F
     204:	df 01       	movw	r26, r30
     206:	af 5f       	subi	r26, 0xFF	; 255
     208:	be 4f       	sbci	r27, 0xFE	; 254
     20a:	8d 91       	ld	r24, X+
     20c:	9c 91       	ld	r25, X
     20e:	89 2b       	or	r24, r25
     210:	31 f1       	breq	.+76     	; 0x25e <__vector_3+0x88>
     212:	80 85       	ldd	r24, Z+8	; 0x08
     214:	91 85       	ldd	r25, Z+9	; 0x09
     216:	06 97       	sbiw	r24, 0x06	; 6
     218:	11 f1       	breq	.+68     	; 0x25e <__vector_3+0x88>
     21a:	80 85       	ldd	r24, Z+8	; 0x08
     21c:	91 85       	ldd	r25, Z+9	; 0x09
     21e:	07 97       	sbiw	r24, 0x07	; 7
     220:	f1 f0       	breq	.+60     	; 0x25e <__vector_3+0x88>
    {
        //increment the op_mode
        device->op_mode++;
     222:	80 85       	ldd	r24, Z+8	; 0x08
     224:	91 85       	ldd	r25, Z+9	; 0x09
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	91 87       	std	Z+9, r25	; 0x09
     22a:	80 87       	std	Z+8, r24	; 0x08
        //loop the op_mode
        if (device->op_mode >= NUM_MODES)
     22c:	80 85       	ldd	r24, Z+8	; 0x08
     22e:	91 85       	ldd	r25, Z+9	; 0x09
     230:	06 97       	sbiw	r24, 0x06	; 6
     232:	14 f0       	brlt	.+4      	; 0x238 <__vector_3+0x62>
            device->op_mode = 0;
     234:	11 86       	std	Z+9, r1	; 0x09
     236:	10 86       	std	Z+8, r1	; 0x08
        //light up the mode LEDs
        sync_leds(device);
     238:	cf 01       	movw	r24, r30
     23a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <sync_leds>
        //debounce the button
        device->button_pressable = 0;
     23e:	e0 91 5e 04 	lds	r30, 0x045E
     242:	f0 91 5f 04 	lds	r31, 0x045F
     246:	ef 5f       	subi	r30, 0xFF	; 255
     248:	fe 4f       	sbci	r31, 0xFE	; 254
     24a:	11 82       	std	Z+1, r1	; 0x01
     24c:	10 82       	st	Z, r1
        //reset the debounce timer
        TCNT1 &= ~(0xFFFF);
     24e:	80 91 84 00 	lds	r24, 0x0084
     252:	90 91 85 00 	lds	r25, 0x0085
     256:	10 92 85 00 	sts	0x0085, r1
     25a:	10 92 84 00 	sts	0x0084, r1
    }
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	7f 91       	pop	r23
     26c:	6f 91       	pop	r22
     26e:	5f 91       	pop	r21
     270:	4f 91       	pop	r20
     272:	3f 91       	pop	r19
     274:	2f 91       	pop	r18
     276:	0f 90       	pop	r0
     278:	0b be       	out	0x3b, r0	; 59
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <__vector_13>:

//---- TIMER INTERRUPT (PUSHBUTTON DEBOUNCE) ----//
ISR(TIMER1_COMPA_vect) {
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	0b b6       	in	r0, 0x3b	; 59
     290:	0f 92       	push	r0
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
    //blink the LEDs when desired
    if (device->blinking)
     2a4:	80 91 5e 04 	lds	r24, 0x045E
     2a8:	90 91 5f 04 	lds	r25, 0x045F
     2ac:	fc 01       	movw	r30, r24
     2ae:	e7 5f       	subi	r30, 0xF7	; 247
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	23 2b       	or	r18, r19
     2b8:	e1 f1       	breq	.+120    	; 0x332 <__vector_13+0xae>
    {
        if (device->blinker1 > -1)
     2ba:	fc 01       	movw	r30, r24
     2bc:	ed 5f       	subi	r30, 0xFD	; 253
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	20 81       	ld	r18, Z
     2c2:	31 81       	ldd	r19, Z+1	; 0x01
     2c4:	37 fd       	sbrc	r19, 7
     2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <__vector_13+0x5c>
            PORTB ^= 1<<device->blinker1;
     2c8:	65 b1       	in	r22, 0x05	; 5
     2ca:	40 81       	ld	r20, Z
     2cc:	51 81       	ldd	r21, Z+1	; 0x01
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	04 2e       	mov	r0, r20
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <__vector_13+0x54>
     2d6:	22 0f       	add	r18, r18
     2d8:	0a 94       	dec	r0
     2da:	ea f7       	brpl	.-6      	; 0x2d6 <__vector_13+0x52>
     2dc:	62 27       	eor	r22, r18
     2de:	65 b9       	out	0x05, r22	; 5

        if (device->blinker2 > -1)
     2e0:	fc 01       	movw	r30, r24
     2e2:	eb 5f       	subi	r30, 0xFB	; 251
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	97 fd       	sbrc	r25, 7
     2ec:	0c c0       	rjmp	.+24     	; 0x306 <__vector_13+0x82>
            PORTB ^= 1<<device->blinker2;
     2ee:	45 b1       	in	r20, 0x05	; 5
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	02 2e       	mov	r0, r18
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <__vector_13+0x7a>
     2fc:	88 0f       	add	r24, r24
     2fe:	0a 94       	dec	r0
     300:	ea f7       	brpl	.-6      	; 0x2fc <__vector_13+0x78>
     302:	48 27       	eor	r20, r24
     304:	45 b9       	out	0x05, r20	; 5

        if (device->blinker3 > -1)
     306:	e0 91 5e 04 	lds	r30, 0x045E
     30a:	f0 91 5f 04 	lds	r31, 0x045F
     30e:	e9 5f       	subi	r30, 0xF9	; 249
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	97 fd       	sbrc	r25, 7
     318:	0c c0       	rjmp	.+24     	; 0x332 <__vector_13+0xae>
            PORTB ^= 1<<device->blinker3;
     31a:	45 b1       	in	r20, 0x05	; 5
     31c:	20 81       	ld	r18, Z
     31e:	31 81       	ldd	r19, Z+1	; 0x01
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 2e       	mov	r0, r18
     326:	01 c0       	rjmp	.+2      	; 0x32a <__vector_13+0xa6>
     328:	88 0f       	add	r24, r24
     32a:	0a 94       	dec	r0
     32c:	ea f7       	brpl	.-6      	; 0x328 <__vector_13+0xa4>
     32e:	48 27       	eor	r20, r24
     330:	45 b9       	out	0x05, r20	; 5
    }

    //reset the debounce timer
    TCNT1 &= ~(0xFFFF);
     332:	80 91 84 00 	lds	r24, 0x0084
     336:	90 91 85 00 	lds	r25, 0x0085
     33a:	10 92 85 00 	sts	0x0085, r1
     33e:	10 92 84 00 	sts	0x0084, r1
    if (device->button_pressable == 0)
     342:	e0 91 5e 04 	lds	r30, 0x045E
     346:	f0 91 5f 04 	lds	r31, 0x045F
     34a:	ef 5f       	subi	r30, 0xFF	; 255
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	89 2b       	or	r24, r25
     354:	21 f4       	brne	.+8      	; 0x35e <__vector_13+0xda>
    {
        //start accepting new button presses
        device->button_pressable = 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	80 83       	st	Z, r24
    }
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0b be       	out	0x3b, r0	; 59
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <__vector_28>:

//---- SERIAL DATABASE UPDATE INTERRUPT ----//
ISR(USART1_RX_vect) {
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	0b b6       	in	r0, 0x3b	; 59
     38a:	0f 92       	push	r0
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31
    //remember the last 3 bytes received (to handle start + end sequences)
    device->serial_history[2] = device->serial_history[1];
     3a4:	80 91 5e 04 	lds	r24, 0x045E
     3a8:	90 91 5f 04 	lds	r25, 0x045F
     3ac:	fc 01       	movw	r30, r24
     3ae:	ef 56       	subi	r30, 0x6F	; 111
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	20 81       	ld	r18, Z
     3b4:	dc 01       	movw	r26, r24
     3b6:	ae 56       	subi	r26, 0x6E	; 110
     3b8:	bf 4f       	sbci	r27, 0xFF	; 255
     3ba:	2c 93       	st	X, r18
    device->serial_history[1] = device->serial_history[0];
     3bc:	dc 01       	movw	r26, r24
     3be:	a0 57       	subi	r26, 0x70	; 112
     3c0:	bf 4f       	sbci	r27, 0xFF	; 255
     3c2:	2c 91       	ld	r18, X
     3c4:	20 83       	st	Z, r18
    //Read most recent value out of the UART buffer
    device->serial_history[0] = UDR1;
     3c6:	20 91 ce 00 	lds	r18, 0x00CE
     3ca:	2c 93       	st	X, r18
    //if a serial update is in progress, write to the receive buffer
    if (device->op_mode==MD_UPDATE)
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 85       	ldd	r18, Z+8	; 0x08
     3d0:	31 85       	ldd	r19, Z+9	; 0x09
     3d2:	27 30       	cpi	r18, 0x07	; 7
     3d4:	31 05       	cpc	r19, r1
     3d6:	61 f4       	brne	.+24     	; 0x3f0 <__vector_28+0x72>
    {
        device->rxBuffer[device->rxWritePos] = device->serial_history[0];
     3d8:	e1 57       	subi	r30, 0x71	; 113
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	30 81       	ld	r19, Z
     3de:	2c 91       	ld	r18, X
     3e0:	dc 01       	movw	r26, r24
     3e2:	a3 0f       	add	r26, r19
     3e4:	b1 1d       	adc	r27, r1
     3e6:	1e 96       	adiw	r26, 0x0e	; 14
     3e8:	2c 93       	st	X, r18
        device->rxWritePos++;
     3ea:	20 81       	ld	r18, Z
     3ec:	2f 5f       	subi	r18, 0xFF	; 255
     3ee:	20 83       	st	Z, r18
    }
    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart(device)){
     3f0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <detectSerialStart>
     3f4:	e0 91 5e 04 	lds	r30, 0x045E
     3f8:	f0 91 5f 04 	lds	r31, 0x045F
     3fc:	89 2b       	or	r24, r25
     3fe:	21 f0       	breq	.+8      	; 0x408 <__vector_28+0x8a>
        device->op_mode = MD_UPDATE;
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	91 87       	std	Z+9, r25	; 0x09
     406:	80 87       	std	Z+8, r24	; 0x08
    }
    //make the receive buffer loop
    if(device->rxWritePos >= RX_BUFFER_SIZE)
     408:	e1 57       	subi	r30, 0x71	; 113
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	80 81       	ld	r24, Z
     40e:	87 fd       	sbrc	r24, 7
    {
        device->rxWritePos = 0;
     410:	10 82       	st	Z, r1
    }
}
     412:	ff 91       	pop	r31
     414:	ef 91       	pop	r30
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	0f 90       	pop	r0
     42c:	0b be       	out	0x3b, r0	; 59
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <__vector_20>:

//---- SERIAL GPS INTERRUPT ----//
ISR(USART0_RX_vect) { 
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	0b b6       	in	r0, 0x3b	; 59
     444:	0f 92       	push	r0
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	ef 93       	push	r30
     45c:	ff 93       	push	r31
        int k;
        //prevent buffer overflow
        if (device->gps_rxCount >= GPS_RX_BUFFER_SIZE)
     45e:	80 91 5e 04 	lds	r24, 0x045E
     462:	90 91 5f 04 	lds	r25, 0x045F
     466:	fc 01       	movw	r30, r24
     468:	ed 56       	subi	r30, 0x6D	; 109
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	20 81       	ld	r18, Z
     46e:	31 81       	ldd	r19, Z+1	; 0x01
     470:	20 35       	cpi	r18, 0x50	; 80
     472:	31 05       	cpc	r19, r1
     474:	7c f0       	brlt	.+30     	; 0x494 <__vector_20+0x5c>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
        {
            for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
                device->gps_rxBuffer[k]='\0';
     47a:	dc 01       	movw	r26, r24
     47c:	a2 0f       	add	r26, r18
     47e:	b3 1f       	adc	r27, r19
     480:	ab 56       	subi	r26, 0x6B	; 107
     482:	bf 4f       	sbci	r27, 0xFF	; 255
     484:	1c 92       	st	X, r1
ISR(USART0_RX_vect) { 
        int k;
        //prevent buffer overflow
        if (device->gps_rxCount >= GPS_RX_BUFFER_SIZE)
        {
            for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	20 35       	cpi	r18, 0x50	; 80
     48c:	31 05       	cpc	r19, r1
     48e:	a9 f7       	brne	.-22     	; 0x47a <__vector_20+0x42>
                device->gps_rxBuffer[k]='\0';

            device->gps_rxCount = 0; 
     490:	11 82       	std	Z+1, r1	; 0x01
     492:	10 82       	st	Z, r1
        }
        //Read value out of the UART buffer
        device->gps_rxBuffer[device->gps_rxCount] = UDR0;
     494:	fc 01       	movw	r30, r24
     496:	ed 56       	subi	r30, 0x6D	; 109
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	20 81       	ld	r18, Z
     49c:	31 81       	ldd	r19, Z+1	; 0x01
     49e:	40 91 c6 00 	lds	r20, 0x00C6
     4a2:	28 0f       	add	r18, r24
     4a4:	39 1f       	adc	r19, r25
     4a6:	d9 01       	movw	r26, r18
     4a8:	ab 56       	subi	r26, 0x6B	; 107
     4aa:	bf 4f       	sbci	r27, 0xFF	; 255
     4ac:	4c 93       	st	X, r20
        device->gps_rxCount ++;
     4ae:	20 81       	ld	r18, Z
     4b0:	31 81       	ldd	r19, Z+1	; 0x01
     4b2:	2f 5f       	subi	r18, 0xFF	; 255
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
     4b6:	31 83       	std	Z+1, r19	; 0x01
     4b8:	20 83       	st	Z, r18
        //start new buffer if receive $
        if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
     4ba:	01 90       	ld	r0, Z+
     4bc:	f0 81       	ld	r31, Z
     4be:	e0 2d       	mov	r30, r0
     4c0:	e8 0f       	add	r30, r24
     4c2:	f9 1f       	adc	r31, r25
     4c4:	ec 56       	subi	r30, 0x6C	; 108
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	20 81       	ld	r18, Z
     4ca:	24 32       	cpi	r18, 0x24	; 36
     4cc:	c9 f4       	brne	.+50     	; 0x500 <__vector_20+0xc8>
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
        {
            for (k=1; k<GPS_RX_BUFFER_SIZE; k++)
                device->gps_rxBuffer[k]='\0'; 
     4d2:	fc 01       	movw	r30, r24
     4d4:	e2 0f       	add	r30, r18
     4d6:	f3 1f       	adc	r31, r19
     4d8:	eb 56       	subi	r30, 0x6B	; 107
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	10 82       	st	Z, r1
        device->gps_rxBuffer[device->gps_rxCount] = UDR0;
        device->gps_rxCount ++;
        //start new buffer if receive $
        if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
        {
            for (k=1; k<GPS_RX_BUFFER_SIZE; k++)
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	20 35       	cpi	r18, 0x50	; 80
     4e4:	31 05       	cpc	r19, r1
     4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__vector_20+0x9a>
                device->gps_rxBuffer[k]='\0'; 

            device->gps_rxBuffer[0] = '$';
     4e8:	fc 01       	movw	r30, r24
     4ea:	eb 56       	subi	r30, 0x6B	; 107
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	24 e2       	ldi	r18, 0x24	; 36
     4f0:	20 83       	st	Z, r18
            device->gps_rxCount = 1; 
     4f2:	fc 01       	movw	r30, r24
     4f4:	ed 56       	subi	r30, 0x6D	; 109
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	31 83       	std	Z+1, r19	; 0x01
     4fe:	20 83       	st	Z, r18
        }
        //carriage return ----> parse the raw sentence data and set the gps struct update trigger
        if ((device->gps_rxBuffer[device->gps_rxCount-1]=='\r')) {
     500:	fc 01       	movw	r30, r24
     502:	ed 56       	subi	r30, 0x6D	; 109
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	01 90       	ld	r0, Z+
     508:	f0 81       	ld	r31, Z
     50a:	e0 2d       	mov	r30, r0
     50c:	e8 0f       	add	r30, r24
     50e:	f9 1f       	adc	r31, r25
     510:	ec 56       	subi	r30, 0x6C	; 108
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	20 81       	ld	r18, Z
     516:	2d 30       	cpi	r18, 0x0D	; 13
     518:	81 f4       	brne	.+32     	; 0x53a <__vector_20+0x102>
            if (tag_check(device))
     51a:	0e 94 b2 05 	call	0xb64	; 0xb64 <tag_check>
     51e:	89 2b       	or	r24, r25
     520:	61 f0       	breq	.+24     	; 0x53a <__vector_20+0x102>
            {
                //no more gps interrupts are needed (or desired) for now
                disable_gps();
     522:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <disable_gps>
                //trigger a gps_data struct update
                device->gps_update_trigger = 1;
     526:	e0 91 5e 04 	lds	r30, 0x045E
     52a:	f0 91 5f 04 	lds	r31, 0x045F
     52e:	e1 50       	subi	r30, 0x01	; 1
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	91 83       	std	Z+1, r25	; 0x01
     538:	80 83       	st	Z, r24
            }
        }
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0b be       	out	0x3b, r0	; 59
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     560:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     562:	81 ee       	ldi	r24, 0xE1	; 225
     564:	94 e0       	ldi	r25, 0x04	; 4
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <datarw+0x6>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <datarw+0xc>
     56c:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     56e:	12 98       	cbi	0x02, 2	; 2
     570:	08 95       	ret

00000572 <letterwrite>:
	return 0;
}

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	11 f4       	brne	.+4      	; 0x57a <letterwrite+0x8>
     576:	16 9a       	sbi	0x02, 6	; 2
     578:	01 c0       	rjmp	.+2      	; 0x57c <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     57a:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     57c:	61 30       	cpi	r22, 0x01	; 1
     57e:	71 05       	cpc	r23, r1
     580:	11 f4       	brne	.+4      	; 0x586 <letterwrite+0x14>
     582:	15 9a       	sbi	0x02, 5	; 2
     584:	01 c0       	rjmp	.+2      	; 0x588 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     586:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     588:	41 30       	cpi	r20, 0x01	; 1
     58a:	51 05       	cpc	r21, r1
     58c:	11 f4       	brne	.+4      	; 0x592 <letterwrite+0x20>
     58e:	14 9a       	sbi	0x02, 4	; 2
     590:	01 c0       	rjmp	.+2      	; 0x594 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     592:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	11 f4       	brne	.+4      	; 0x59e <letterwrite+0x2c>
     59a:	13 9a       	sbi	0x02, 3	; 2
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     59e:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     5a0:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     5a4:	89 ef       	ldi	r24, 0xF9	; 249
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <letterwrite+0x36>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <letterwrite+0x3c>
     5ae:	00 00       	nop
     5b0:	08 95       	ret

000005b2 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     5b2:	10 92 5b 04 	sts	0x045B, r1
     5b6:	10 92 5a 04 	sts	0x045A, r1
    line_num = 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 01 01 	sts	0x0101, r25
     5c2:	80 93 00 01 	sts	0x0100, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     5c6:	81 b1       	in	r24, 0x01	; 1
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	81 b9       	out	0x01, r24	; 1
     5cc:	87 e8       	ldi	r24, 0x87	; 135
     5ce:	93 e1       	ldi	r25, 0x13	; 19
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <lcd_init+0x1e>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <lcd_init+0x24>
     5d6:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     5d8:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     5da:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     5dc:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     5de:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     5e0:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     5e2:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     5e4:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     5e6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     5ea:	81 ee       	ldi	r24, 0xE1	; 225
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <lcd_init+0x3c>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <lcd_init+0x42>
     5f4:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     5f6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     5fa:	89 ef       	ldi	r24, 0xF9	; 249
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <lcd_init+0x4c>
     602:	00 c0       	rjmp	.+0      	; 0x604 <lcd_init+0x52>
     604:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     606:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     60a:	89 ef       	ldi	r24, 0xF9	; 249
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <lcd_init+0x5c>
     612:	00 c0       	rjmp	.+0      	; 0x614 <lcd_init+0x62>
     614:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     616:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     618:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     61a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     61c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     61e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <lcd_init+0x74>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <lcd_init+0x7a>
     62c:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     62e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     630:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     632:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     634:	13 98       	cbi	0x02, 3	; 2
    datarw();
     636:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     63a:	89 ef       	ldi	r24, 0xF9	; 249
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <lcd_init+0x8c>
     642:	00 c0       	rjmp	.+0      	; 0x644 <lcd_init+0x92>
     644:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     646:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     648:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     64a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     64c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     64e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     652:	89 ef       	ldi	r24, 0xF9	; 249
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <lcd_init+0xa4>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <lcd_init+0xaa>
     65c:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     65e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     660:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     662:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     664:	13 98       	cbi	0x02, 3	; 2
    datarw();
     666:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     66a:	89 ef       	ldi	r24, 0xF9	; 249
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <lcd_init+0xbc>
     672:	00 c0       	rjmp	.+0      	; 0x674 <lcd_init+0xc2>
     674:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     676:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     678:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     67a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     67c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     67e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     682:	89 ef       	ldi	r24, 0xF9	; 249
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <lcd_init+0xd4>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <lcd_init+0xda>
     68c:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     68e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     690:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     692:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     694:	13 98       	cbi	0x02, 3	; 2
    datarw();
     696:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     69a:	89 ef       	ldi	r24, 0xF9	; 249
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <lcd_init+0xec>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <lcd_init+0xf2>
     6a4:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     6a6:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     6a8:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     6aa:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     6ac:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     6ae:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6b2:	89 ef       	ldi	r24, 0xF9	; 249
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <lcd_init+0x104>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <lcd_init+0x10a>
     6bc:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     6be:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     6c0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     6c2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     6c4:	13 98       	cbi	0x02, 3	; 2
    datarw();
     6c6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6ca:	89 ef       	ldi	r24, 0xF9	; 249
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <lcd_init+0x11c>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <lcd_init+0x122>
     6d4:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     6d6:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     6d8:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     6da:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     6dc:	13 98       	cbi	0x02, 3	; 2
    datarw();
     6de:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6e2:	89 ef       	ldi	r24, 0xF9	; 249
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_init+0x134>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <lcd_init+0x13a>
     6ec:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     6ee:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     6f0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     6f2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     6f4:	13 98       	cbi	0x02, 3	; 2
    datarw();
     6f6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6fa:	89 ef       	ldi	r24, 0xF9	; 249
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <lcd_init+0x14c>
     702:	00 c0       	rjmp	.+0      	; 0x704 <lcd_init+0x152>
     704:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     706:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     708:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     70a:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     70c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     70e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     712:	89 ef       	ldi	r24, 0xF9	; 249
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <lcd_init+0x164>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <lcd_init+0x16a>
     71c:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	08 95       	ret

00000724 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     72a:	21 b1       	in	r18, 0x01	; 1
     72c:	27 78       	andi	r18, 0x87	; 135
     72e:	21 b9       	out	0x01, r18	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     730:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     732:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     734:	12 9a       	sbi	0x02, 2	; 2
     736:	81 ee       	ldi	r24, 0xE1	; 225
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <instruction_read+0x16>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <instruction_read+0x1c>
     740:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     742:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     744:	22 b1       	in	r18, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     746:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     748:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     74a:	12 98       	cbi	0x02, 2	; 2
     74c:	89 ef       	ldi	r24, 0xF9	; 249
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <instruction_read+0x2c>
     754:	00 c0       	rjmp	.+0      	; 0x756 <instruction_read+0x32>
     756:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     758:	12 9a       	sbi	0x02, 2	; 2
     75a:	81 ee       	ldi	r24, 0xE1	; 225
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <instruction_read+0x3a>
     762:	00 c0       	rjmp	.+0      	; 0x764 <instruction_read+0x40>
     764:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     766:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     768:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     76a:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     76c:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     76e:	20 72       	andi	r18, 0x20	; 32
    address |= value<<6;
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	86 e0       	ldi	r24, 0x06	; 6
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
     778:	8a 95       	dec	r24
     77a:	e1 f7       	brne	.-8      	; 0x774 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     77c:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     77e:	d0 e0       	ldi	r29, 0x00	; 0
     780:	95 e0       	ldi	r25, 0x05	; 5
     782:	cc 0f       	add	r28, r28
     784:	dd 1f       	adc	r29, r29
     786:	9a 95       	dec	r25
     788:	e1 f7       	brne	.-8      	; 0x782 <instruction_read+0x5e>
     78a:	2c 2b       	or	r18, r28
     78c:	3d 2b       	or	r19, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     78e:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     790:	25 2b       	or	r18, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     792:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	54 e0       	ldi	r21, 0x04	; 4
     798:	aa 0f       	add	r26, r26
     79a:	bb 1f       	adc	r27, r27
     79c:	5a 95       	dec	r21
     79e:	e1 f7       	brne	.-8      	; 0x798 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     7a0:	2a 2b       	or	r18, r26
     7a2:	3b 2b       	or	r19, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     7a4:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	73 e0       	ldi	r23, 0x03	; 3
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	7a 95       	dec	r23
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     7b2:	2e 2b       	or	r18, r30
     7b4:	3f 2b       	or	r19, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     7b6:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	66 0f       	add	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	66 0f       	add	r22, r22
     7c0:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     7c2:	26 2b       	or	r18, r22
     7c4:	37 2b       	or	r19, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     7c6:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     7c8:	51 b1       	in	r21, 0x01	; 1
     7ca:	58 67       	ori	r21, 0x78	; 120
     7cc:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     7ce:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     7d0:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     7d2:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	44 0f       	add	r20, r20
     7d8:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     7da:	24 2b       	or	r18, r20
     7dc:	35 2b       	or	r19, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     7de:	16 fb       	bst	r17, 6
     7e0:	88 27       	eor	r24, r24
     7e2:	80 f9       	bld	r24, 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     7e6:	96 95       	lsr	r25
     7e8:	98 2f       	mov	r25, r24
     7ea:	88 27       	eor	r24, r24
     7ec:	97 95       	ror	r25
     7ee:	87 95       	ror	r24
     7f0:	28 2b       	or	r18, r24
     7f2:	39 2b       	or	r19, r25
}
     7f4:	c9 01       	movw	r24, r18
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	08 95       	ret

000007fe <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     7fe:	0e 94 92 03 	call	0x724	; 0x724 <instruction_read>
     802:	9c 01       	movw	r18, r24
     804:	2f 77       	andi	r18, 0x7F	; 127
     806:	33 27       	eor	r19, r19
    return address+1;
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
}
     80c:	c9 01       	movw	r24, r18
     80e:	08 95       	ret

00000810 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     810:	89 2b       	or	r24, r25
     812:	11 f4       	brne	.+4      	; 0x818 <write_db74+0x8>
     814:	16 98       	cbi	0x02, 6	; 2
     816:	01 c0       	rjmp	.+2      	; 0x81a <write_db74+0xa>
    else PORTA |= _BV(DB7);
     818:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     81a:	67 2b       	or	r22, r23
     81c:	11 f4       	brne	.+4      	; 0x822 <write_db74+0x12>
     81e:	15 98       	cbi	0x02, 5	; 2
     820:	01 c0       	rjmp	.+2      	; 0x824 <write_db74+0x14>
    else PORTA |= _BV(DB6);
     822:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     824:	45 2b       	or	r20, r21
     826:	11 f4       	brne	.+4      	; 0x82c <write_db74+0x1c>
     828:	14 98       	cbi	0x02, 4	; 2
     82a:	01 c0       	rjmp	.+2      	; 0x82e <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     82c:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     82e:	23 2b       	or	r18, r19
     830:	11 f4       	brne	.+4      	; 0x836 <write_db74+0x26>
     832:	13 98       	cbi	0x02, 3	; 2
     834:	08 95       	ret
    else PORTA |= _BV(DB4);
     836:	13 9a       	sbi	0x02, 3	; 2
     838:	08 95       	ret

0000083a <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     83a:	cf 93       	push	r28
     83c:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     83e:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     840:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     842:	84 fb       	bst	r24, 4
     844:	22 27       	eor	r18, r18
     846:	20 f9       	bld	r18, 0
     848:	85 fb       	bst	r24, 5
     84a:	44 27       	eor	r20, r20
     84c:	40 f9       	bld	r20, 0
     84e:	86 fb       	bst	r24, 6
     850:	66 27       	eor	r22, r22
     852:	60 f9       	bld	r22, 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	88 1f       	adc	r24, r24
     85c:	88 27       	eor	r24, r24
     85e:	88 1f       	adc	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
     866:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     86a:	2c 2f       	mov	r18, r28
     86c:	21 70       	andi	r18, 0x01	; 1
     86e:	c1 fb       	bst	r28, 1
     870:	44 27       	eor	r20, r20
     872:	40 f9       	bld	r20, 0
     874:	c2 fb       	bst	r28, 2
     876:	66 27       	eor	r22, r22
     878:	60 f9       	bld	r22, 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	c3 fb       	bst	r28, 3
     882:	88 27       	eor	r24, r24
     884:	80 f9       	bld	r24, 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
}
     88c:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     88e:	0c 94 b0 02 	jmp	0x560	; 0x560 <datarw>

00000892 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     898:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     89a:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     89c:	28 2f       	mov	r18, r24
     89e:	22 95       	swap	r18
     8a0:	21 70       	andi	r18, 0x01	; 1
     8a2:	85 fb       	bst	r24, 5
     8a4:	44 27       	eor	r20, r20
     8a6:	40 f9       	bld	r20, 0
     8a8:	86 fb       	bst	r24, 6
     8aa:	66 27       	eor	r22, r22
     8ac:	60 f9       	bld	r22, 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
     8bc:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     8c0:	9e 01       	movw	r18, r28
     8c2:	21 70       	andi	r18, 0x01	; 1
     8c4:	33 27       	eor	r19, r19
     8c6:	4c 2f       	mov	r20, r28
     8c8:	46 95       	lsr	r20
     8ca:	41 70       	andi	r20, 0x01	; 1
     8cc:	c2 fb       	bst	r28, 2
     8ce:	66 27       	eor	r22, r22
     8d0:	60 f9       	bld	r22, 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	c3 fb       	bst	r28, 3
     8d8:	88 27       	eor	r24, r24
     8da:	80 f9       	bld	r24, 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     8e6:	0c 94 b0 02 	jmp	0x560	; 0x560 <datarw>

000008ea <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     8ea:	cf 93       	push	r28
     8ec:	c8 2f       	mov	r28, r24
    chars_written++;
     8ee:	20 91 5a 04 	lds	r18, 0x045A
     8f2:	30 91 5b 04 	lds	r19, 0x045B
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	30 93 5b 04 	sts	0x045B, r19
     8fe:	20 93 5a 04 	sts	0x045A, r18

    if ((chars_written==17)||(mychar=='\n'))
     902:	21 31       	cpi	r18, 0x11	; 17
     904:	31 05       	cpc	r19, r1
     906:	31 f0       	breq	.+12     	; 0x914 <char_write+0x2a>
     908:	8a 30       	cpi	r24, 0x0A	; 10
     90a:	21 f0       	breq	.+8      	; 0x914 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     90c:	8c 2f       	mov	r24, r28
    
}
     90e:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     910:	0c 94 1d 04 	jmp	0x83a	; 0x83a <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     914:	20 91 00 01 	lds	r18, 0x0100
     918:	30 91 01 01 	lds	r19, 0x0101
     91c:	21 30       	cpi	r18, 0x01	; 1
     91e:	31 05       	cpc	r19, r1
     920:	79 f4       	brne	.+30     	; 0x940 <char_write+0x56>
        {
            set_ddram_address(0x40);
     922:	80 e4       	ldi	r24, 0x40	; 64
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 49 04 	call	0x892	; 0x892 <set_ddram_address>
            line_num = 2;
     92a:	22 e0       	ldi	r18, 0x02	; 2
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	30 93 01 01 	sts	0x0101, r19
     932:	20 93 00 01 	sts	0x0100, r18
            chars_written = 0;
     936:	10 92 5b 04 	sts	0x045B, r1
     93a:	10 92 5a 04 	sts	0x045A, r1
     93e:	05 c0       	rjmp	.+10     	; 0x94a <char_write+0x60>
        }
        else if (line_num==2)
     940:	22 30       	cpi	r18, 0x02	; 2
     942:	31 05       	cpc	r19, r1
     944:	11 f4       	brne	.+4      	; 0x94a <char_write+0x60>
        {
            lcd_init();
     946:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
        }
    }

    if (mychar!='\n')
     94a:	ca 30       	cpi	r28, 0x0A	; 10
     94c:	f9 f6       	brne	.-66     	; 0x90c <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	7c 01       	movw	r14, r24
    int i;
    get_current_address();
     960:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
     964:	ce 2d       	mov	r28, r14
     966:	df 2d       	mov	r29, r15
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     968:	8e 01       	movw	r16, r28
     96a:	07 c0       	rjmp	.+14     	; 0x97a <string_write+0x28>
        char_write(mystring[i]);
     96c:	f8 01       	movw	r30, r16
     96e:	81 91       	ld	r24, Z+
     970:	8f 01       	movw	r16, r30
     972:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
        get_current_address();
     976:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
void string_write(char *mystring)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     97a:	f7 01       	movw	r30, r14
     97c:	01 90       	ld	r0, Z+
     97e:	00 20       	and	r0, r0
     980:	e9 f7       	brne	.-6      	; 0x97c <string_write+0x2a>
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	ee 19       	sub	r30, r14
     986:	ff 09       	sbc	r31, r15
    PORTA |= _BV(E);
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
     988:	98 01       	movw	r18, r16
     98a:	2c 1b       	sub	r18, r28
     98c:	3d 0b       	sbc	r19, r29
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     98e:	2e 17       	cp	r18, r30
     990:	3f 07       	cpc	r19, r31
     992:	60 f3       	brcs	.-40     	; 0x96c <string_write+0x1a>
        char_write(mystring[i]);
        get_current_address();
    }
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	18 2f       	mov	r17, r24
     9ac:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     9ae:	cb 01       	movw	r24, r22
     9b0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <malloc>
     9b4:	29 2f       	mov	r18, r25
     9b6:	c8 2f       	mov	r28, r24
     9b8:	d9 2f       	mov	r29, r25
    if (temp==NULL)
     9ba:	20 97       	sbiw	r28, 0x00	; 0
     9bc:	51 f4       	brne	.+20     	; 0x9d2 <string_write_int+0x30>
    {
            lcd_init();
     9be:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
            string_write("bad malloc");
     9c2:	8f e2       	ldi	r24, 0x2F	; 47
     9c4:	91 e0       	ldi	r25, 0x01	; 1
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    if (temp==NULL)
    {
            lcd_init();
            string_write("bad malloc");
     9ce:	0c 94 a9 04 	jmp	0x952	; 0x952 <string_write>
            return;
    }
    sprintf(temp,"%d",num);
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	83 ee       	ldi	r24, 0xE3	; 227
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	2f 93       	push	r18
     9e0:	cf 93       	push	r28
     9e2:	0e 94 c2 23 	call	0x4784	; 0x4784 <sprintf>
    string_write(temp);
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    free(temp);
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	ce 01       	movw	r24, r28
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
            string_write("bad malloc");
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     a02:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <free>

00000a06 <string_write_float>:
}

//write a multi-char float to the LCD as a string with a certain decimal precision
void string_write_float(float num, int dec_digits)
{
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <string_write_float+0x12>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <string_write_float+0x14>
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     a20:	ae 01       	movw	r20, r28
     a22:	4f 5f       	subi	r20, 0xFF	; 255
     a24:	5f 4f       	sbci	r21, 0xFF	; 255
     a26:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <modf>
     a2a:	6b 01       	movw	r12, r22
     a2c:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     a2e:	69 81       	ldd	r22, Y+1	; 0x01
     a30:	7a 81       	ldd	r23, Y+2	; 0x02
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	64 e0       	ldi	r22, 0x04	; 4
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
     a46:	85 e5       	ldi	r24, 0x55	; 85
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     a4e:	b8 01       	movw	r22, r16
     a50:	88 27       	eor	r24, r24
     a52:	77 fd       	sbrc	r23, 7
     a54:	80 95       	com	r24
     a56:	98 2f       	mov	r25, r24
     a58:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__floatsisf>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e2       	ldi	r24, 0x20	; 32
     a66:	91 e4       	ldi	r25, 0x41	; 65
     a68:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <pow>
     a6c:	26 2f       	mov	r18, r22
     a6e:	37 2f       	mov	r19, r23
     a70:	48 2f       	mov	r20, r24
     a72:	59 2f       	mov	r21, r25
     a74:	c7 01       	movw	r24, r14
     a76:	b6 01       	movw	r22, r12
     a78:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
     a7c:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <round>
     a80:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     a84:	7b 01       	movw	r14, r22
     a86:	77 ff       	sbrs	r23, 7
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <string_write_float+0x8a>
     a8a:	f1 94       	neg	r15
     a8c:	e1 94       	neg	r14
     a8e:	f1 08       	sbc	r15, r1
    int digits = 0;

    if (temp!=0)
     a90:	e1 14       	cp	r14, r1
     a92:	f1 04       	cpc	r15, r1
     a94:	a1 f0       	breq	.+40     	; 0xabe <string_write_float+0xb8>
    {
        digits = floor(log10(abs(temp)))+1;
     a96:	b7 01       	movw	r22, r14
     a98:	88 27       	eor	r24, r24
     a9a:	77 fd       	sbrc	r23, 7
     a9c:	80 95       	com	r24
     a9e:	98 2f       	mov	r25, r24
     aa0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__floatsisf>
     aa4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <log10>
     aa8:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <floor>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e8       	ldi	r20, 0x80	; 128
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     ab8:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <string_write_float+0xbc>
    } else {
        digits = 0;
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     ac2:	c1 2c       	mov	r12, r1
     ac4:	d1 2c       	mov	r13, r1
     ac6:	06 1b       	sub	r16, r22
     ac8:	17 0b       	sbc	r17, r23
     aca:	07 c0       	rjmp	.+14     	; 0xada <string_write_float+0xd4>
    {
        string_write("0");
     acc:	86 ee       	ldi	r24, 0xE6	; 230
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	c8 1a       	sub	r12, r24
     ad8:	d8 0a       	sbc	r13, r24
     ada:	c0 16       	cp	r12, r16
     adc:	d1 06       	cpc	r13, r17
     ade:	b4 f3       	brlt	.-20     	; 0xacc <string_write_float+0xc6>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     ae0:	64 e0       	ldi	r22, 0x04	; 4
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	c7 01       	movw	r24, r14
}
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     afe:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <string_write_int>

00000b02 <string_write_numchars>:
}

//write a substring to the LCD
void string_write_numchars(char *mystring, int num_chars)
{
     b02:	cf 92       	push	r12
     b04:	df 92       	push	r13
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	d8 2e       	mov	r13, r24
     b14:	c9 2e       	mov	r12, r25
     b16:	7b 01       	movw	r14, r22
    int i;
    get_current_address();
     b18:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
     b1c:	cd 2d       	mov	r28, r13
     b1e:	dc 2d       	mov	r29, r12
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	13 c0       	rjmp	.+38     	; 0xb4c <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
     b26:	ad 2d       	mov	r26, r13
     b28:	bc 2d       	mov	r27, r12
     b2a:	fd 01       	movw	r30, r26
     b2c:	01 90       	ld	r0, Z+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <string_write_numchars+0x2a>
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	ea 1b       	sub	r30, r26
     b36:	fb 0b       	sbc	r31, r27
     b38:	0e 17       	cp	r16, r30
     b3a:	1f 07       	cpc	r17, r31
     b3c:	50 f4       	brcc	.+20     	; 0xb52 <string_write_numchars+0x50>
            break;
        char_write(mystring[i]);
     b3e:	89 91       	ld	r24, Y+
     b40:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
        get_current_address();
     b44:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     b48:	0f 5f       	subi	r16, 0xFF	; 255
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	0e 15       	cp	r16, r14
     b4e:	1f 05       	cpc	r17, r15
     b50:	54 f3       	brlt	.-44     	; 0xb26 <string_write_numchars+0x24>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret

00000b64 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile DEV_STATE *device){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <tag_check+0x6>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <tag_check+0x8>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <tag_check+0xa>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$GPRMC";
     b72:	26 e0       	ldi	r18, 0x06	; 6
     b74:	e8 e0       	ldi	r30, 0x08	; 8
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	de 01       	movw	r26, r28
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	2a 95       	dec	r18
     b82:	e1 f7       	brne	.-8      	; 0xb7c <tag_check+0x18>
     b84:	fe 01       	movw	r30, r28
     b86:	31 96       	adiw	r30, 0x01	; 1
	int i;
	for (i=0; i<6; i++)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (device->gps_rxBuffer[i] != token[i])
     b8c:	dc 01       	movw	r26, r24
     b8e:	a2 0f       	add	r26, r18
     b90:	b3 1f       	adc	r27, r19
     b92:	ab 56       	subi	r26, 0x6B	; 107
     b94:	bf 4f       	sbci	r27, 0xFF	; 255
     b96:	5c 91       	ld	r21, X
     b98:	41 91       	ld	r20, Z+
     b9a:	54 13       	cpse	r21, r20
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <tag_check+0x4a>

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile DEV_STATE *device){
	char token[6] = "$GPRMC";
	int i;
	for (i=0; i<6; i++)
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	26 30       	cpi	r18, 0x06	; 6
     ba4:	31 05       	cpc	r19, r1
     ba6:	91 f7       	brne	.-28     	; 0xb8c <tag_check+0x28>
	{
		if (device->gps_rxBuffer[i] != token[i])
			return 0;
	}
	return 1;
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <tag_check+0x4e>
	char token[6] = "$GPRMC";
	int i;
	for (i=0; i<6; i++)
	{
		if (device->gps_rxBuffer[i] != token[i])
			return 0;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 1;
}
     bb2:	c9 01       	movw	r24, r18
     bb4:	26 96       	adiw	r28, 0x06	; 6
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <strtok_single+0x10>
    src = in_str;
     bce:	90 93 5d 04 	sts	0x045D, r25
     bd2:	80 93 5c 04 	sts	0x045C, r24

  if (src == NULL)
     bd6:	c0 91 5c 04 	lds	r28, 0x045C
     bda:	d0 91 5d 04 	lds	r29, 0x045D
     bde:	20 97       	sbiw	r28, 0x00	; 0
     be0:	71 f0       	breq	.+28     	; 0xbfe <strtok_single+0x38>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
     be2:	ce 01       	movw	r24, r28
     be4:	0e 94 b4 23 	call	0x4768	; 0x4768 <strpbrk>
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	39 f0       	breq	.+14     	; 0xbfa <strtok_single+0x34>
    *p  = 0;
     bec:	fc 01       	movw	r30, r24
     bee:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
     bf0:	f0 93 5d 04 	sts	0x045D, r31
     bf4:	e0 93 5c 04 	sts	0x045C, r30
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <strtok_single+0x38>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
     bfa:	c0 e0       	ldi	r28, 0x00	; 0
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
     bfe:	ce 01       	movw	r24, r28
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <parse_nmea>:

#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile DEV_STATE *device, volatile char *in_sent, char * volatile *raw_gps_data){
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <parse_nmea+0x1a>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <parse_nmea+0x1c>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <parse_nmea+0x1e>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	6c 01       	movw	r12, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	5a 01       	movw	r10, r20

	int l = 0, m =0, k=0;
	char* token;

	//null out the first raw_gps_data field
	for (m=0; m<GPS_FIELD_LEN; m++)
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
	{
		raw_gps_data[0][m] = '\0';
     c32:	d5 01       	movw	r26, r10
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	e2 0f       	add	r30, r18
     c3a:	f3 1f       	adc	r31, r19
     c3c:	10 82       	st	Z, r1

	int l = 0, m =0, k=0;
	char* token;

	//null out the first raw_gps_data field
	for (m=0; m<GPS_FIELD_LEN; m++)
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	20 31       	cpi	r18, 0x10	; 16
     c44:	31 05       	cpc	r19, r1
     c46:	a9 f7       	brne	.-22     	; 0xc32 <parse_nmea+0x2c>
	{
		raw_gps_data[0][m] = '\0';
	}

	//ditch the first token
	token = strtok_single((char *)in_sent, ",");
     c48:	68 ee       	ldi	r22, 0xE8	; 232
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <strtok_single>
     c50:	4c 01       	movw	r8, r24

	//auto-insert $GPRMC (it passed the tag check already)
	char token2[6] = "$GPRMC";
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	e8 e0       	ldi	r30, 0x08	; 8
     c56:	f1 e0       	ldi	r31, 0x01	; 1
     c58:	de 01       	movw	r26, r28
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	01 90       	ld	r0, Z+
     c5e:	0d 92       	st	X+, r0
     c60:	8a 95       	dec	r24
     c62:	e1 f7       	brne	.-8      	; 0xc5c <parse_nmea+0x56>
	strncpy(raw_gps_data[0],token2,6);
     c64:	f5 01       	movw	r30, r10
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	46 e0       	ldi	r20, 0x06	; 6
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	be 01       	movw	r22, r28
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	0e 94 a5 23 	call	0x474a	; 0x474a <strncpy>
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile DEV_STATE *device, volatile char *in_sent, char * volatile *raw_gps_data){

	int l = 0, m =0, k=0;
     c78:	00 e0       	ldi	r16, 0x00	; 0
     c7a:	10 e0       	ldi	r17, 0x00	; 0
	//auto-insert $GPRMC (it passed the tag check already)
	char token2[6] = "$GPRMC";
	strncpy(raw_gps_data[0],token2,6);

	//copy over the rest of the tokens
	while((token) && (l<NUM_GPS_FIELDS-1)) 
     c7c:	21 c0       	rjmp	.+66     	; 0xcc0 <parse_nmea+0xba>
	{
		l++;
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255

#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile DEV_STATE *device, volatile char *in_sent, char * volatile *raw_gps_data){
     c82:	78 01       	movw	r14, r16
     c84:	ee 0c       	add	r14, r14
     c86:	ff 1c       	adc	r15, r15
     c88:	ea 0c       	add	r14, r10
     c8a:	fb 1c       	adc	r15, r11
	while((token) && (l<NUM_GPS_FIELDS-1)) 
	{
		l++;

		//null out the next raw_gps_data field
		for (m=0; m<GPS_FIELD_LEN; m++)
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
		{
			raw_gps_data[l][m] = '\0';
     c90:	d7 01       	movw	r26, r14
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	10 82       	st	Z, r1
	while((token) && (l<NUM_GPS_FIELDS-1)) 
	{
		l++;

		//null out the next raw_gps_data field
		for (m=0; m<GPS_FIELD_LEN; m++)
     c9c:	2f 5f       	subi	r18, 0xFF	; 255
     c9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ca0:	20 31       	cpi	r18, 0x10	; 16
     ca2:	31 05       	cpc	r19, r1
     ca4:	a9 f7       	brne	.-22     	; 0xc90 <parse_nmea+0x8a>
		{
			raw_gps_data[l][m] = '\0';
		}

		token = strtok_single(NULL, ",");
     ca6:	68 ee       	ldi	r22, 0xE8	; 232
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <strtok_single>
     cb2:	4c 01       	movw	r8, r24
		strcpy(raw_gps_data[l], token);
     cb4:	f7 01       	movw	r30, r14
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	b4 01       	movw	r22, r8
     cbc:	0e 94 9e 23 	call	0x473c	; 0x473c <strcpy>
	//auto-insert $GPRMC (it passed the tag check already)
	char token2[6] = "$GPRMC";
	strncpy(raw_gps_data[0],token2,6);

	//copy over the rest of the tokens
	while((token) && (l<NUM_GPS_FIELDS-1)) 
     cc0:	89 28       	or	r8, r9
     cc2:	19 f0       	breq	.+6      	; 0xcca <parse_nmea+0xc4>
     cc4:	0c 30       	cpi	r16, 0x0C	; 12
     cc6:	11 05       	cpc	r17, r1
     cc8:	d1 f6       	brne	.-76     	; 0xc7e <parse_nmea+0x78>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
		strcpy(raw_gps_data[l], token);
	}

	//clear the rxBuffer
    for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
        device->gps_rxBuffer[k]='\0';
     cce:	f6 01       	movw	r30, r12
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	eb 56       	subi	r30, 0x6B	; 107
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	10 82       	st	Z, r1
		token = strtok_single(NULL, ",");
		strcpy(raw_gps_data[l], token);
	}

	//clear the rxBuffer
    for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	20 35       	cpi	r18, 0x50	; 80
     ce0:	31 05       	cpc	r19, r1
     ce2:	a9 f7       	brne	.-22     	; 0xcce <parse_nmea+0xc8>
        device->gps_rxBuffer[k]='\0';
    device->gps_rxCount = 0;
     ce4:	f6 01       	movw	r30, r12
     ce6:	ed 56       	subi	r30, 0x6D	; 109
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	11 82       	std	Z+1, r1	; 0x01
     cec:	10 82       	st	Z, r1

	return 0;
}
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	26 96       	adiw	r28, 0x06	; 6
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	08 95       	ret

00000d18 <wipe_chars>:
  return ret;
}

//null out part of a string
void wipe_chars(char *str, int num)
{
     d18:	9c 01       	movw	r18, r24
	int i;
	for (i=0; i<num; i++)
     d1a:	fc 01       	movw	r30, r24
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <wipe_chars+0x8>
	{
		str[i] = '\0';
     d1e:	11 92       	st	Z+, r1

  return ret;
}

//null out part of a string
void wipe_chars(char *str, int num)
     d20:	cf 01       	movw	r24, r30
     d22:	82 1b       	sub	r24, r18
     d24:	93 0b       	sbc	r25, r19
{
	int i;
	for (i=0; i<num; i++)
     d26:	86 17       	cp	r24, r22
     d28:	97 07       	cpc	r25, r23
     d2a:	cc f3       	brlt	.-14     	; 0xd1e <wipe_chars+0x6>
	{
		str[i] = '\0';
	}
}
     d2c:	08 95       	ret

00000d2e <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	27 97       	sbiw	r28, 0x07	; 7
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	7c 01       	movw	r14, r24
     d52:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
     d54:	fc 01       	movw	r30, r24
     d56:	80 81       	ld	r24, Z
     d58:	61 81       	ldd	r22, Z+1	; 0x01
     d5a:	77 27       	eor	r23, r23
     d5c:	67 fd       	sbrc	r22, 7
     d5e:	70 95       	com	r23
     d60:	fa e0       	ldi	r31, 0x0A	; 10
     d62:	8f 02       	muls	r24, r31
     d64:	60 0d       	add	r22, r0
     d66:	71 1d       	adc	r23, r1
     d68:	11 24       	eor	r1, r1
     d6a:	60 51       	subi	r22, 0x10	; 16
     d6c:	72 40       	sbci	r23, 0x02	; 2
     d6e:	88 27       	eor	r24, r24
     d70:	77 fd       	sbrc	r23, 7
     d72:	80 95       	com	r24
     d74:	98 2f       	mov	r25, r24
     d76:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__floatsisf>
     d7a:	b6 2e       	mov	r11, r22
     d7c:	c7 2e       	mov	r12, r23
     d7e:	d8 2e       	mov	r13, r24
     d80:	09 2f       	mov	r16, r25

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
     d82:	b7 01       	movw	r22, r14
     d84:	6e 5f       	subi	r22, 0xFE	; 254
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	47 e0       	ldi	r20, 0x07	; 7
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	0e 94 a5 23 	call	0x474a	; 0x474a <strncpy>

	float minutes = strtod(temp,NULL);
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	0e 94 19 22 	call	0x4432	; 0x4432 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e7       	ldi	r20, 0x70	; 112
     da6:	52 e4       	ldi	r21, 0x42	; 66
     da8:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	6b 2d       	mov	r22, r11
     db2:	7c 2d       	mov	r23, r12
     db4:	8d 2d       	mov	r24, r13
     db6:	90 2f       	mov	r25, r16
     db8:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     dbc:	47 2f       	mov	r20, r23
     dbe:	38 2f       	mov	r19, r24
     dc0:	29 2f       	mov	r18, r25
     dc2:	86 2f       	mov	r24, r22
     dc4:	94 2f       	mov	r25, r20
     dc6:	a3 2f       	mov	r26, r19
     dc8:	b2 2f       	mov	r27, r18

	//adjust for N/S indicator
	if (N_indicator == 'S')
     dca:	13 35       	cpi	r17, 0x53	; 83
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <lat2dec+0xa2>
		result *= -1;
     dce:	b0 58       	subi	r27, 0x80	; 128

	return result;

}
     dd0:	68 2f       	mov	r22, r24
     dd2:	79 2f       	mov	r23, r25
     dd4:	8a 2f       	mov	r24, r26
     dd6:	9b 2f       	mov	r25, r27
     dd8:	27 96       	adiw	r28, 0x07	; 7
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	08 95       	ret

00000df8 <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	27 97       	sbiw	r28, 0x07	; 7
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	7c 01       	movw	r14, r24
     e1c:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
     e1e:	fc 01       	movw	r30, r24
     e20:	60 81       	ld	r22, Z
     e22:	81 81       	ldd	r24, Z+1	; 0x01
     e24:	f4 e6       	ldi	r31, 0x64	; 100
     e26:	6f 02       	muls	r22, r31
     e28:	b0 01       	movw	r22, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	9a e0       	ldi	r25, 0x0A	; 10
     e2e:	89 02       	muls	r24, r25
     e30:	60 0d       	add	r22, r0
     e32:	71 1d       	adc	r23, r1
     e34:	11 24       	eor	r1, r1
     e36:	f7 01       	movw	r30, r14
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	68 0f       	add	r22, r24
     e3c:	71 1d       	adc	r23, r1
     e3e:	87 fd       	sbrc	r24, 7
     e40:	7a 95       	dec	r23
     e42:	60 5d       	subi	r22, 0xD0	; 208
     e44:	74 41       	sbci	r23, 0x14	; 20
     e46:	88 27       	eor	r24, r24
     e48:	77 fd       	sbrc	r23, 7
     e4a:	80 95       	com	r24
     e4c:	98 2f       	mov	r25, r24
     e4e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__floatsisf>
     e52:	b6 2e       	mov	r11, r22
     e54:	c7 2e       	mov	r12, r23
     e56:	d8 2e       	mov	r13, r24
     e58:	09 2f       	mov	r16, r25

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
     e5a:	b7 01       	movw	r22, r14
     e5c:	6d 5f       	subi	r22, 0xFD	; 253
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	47 e0       	ldi	r20, 0x07	; 7
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	0e 94 a5 23 	call	0x474a	; 0x474a <strncpy>

	float minutes = strtod(temp,NULL);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 19 22 	call	0x4432	; 0x4432 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e7       	ldi	r20, 0x70	; 112
     e7e:	52 e4       	ldi	r21, 0x42	; 66
     e80:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	6b 2d       	mov	r22, r11
     e8a:	7c 2d       	mov	r23, r12
     e8c:	8d 2d       	mov	r24, r13
     e8e:	90 2f       	mov	r25, r16
     e90:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
     e94:	47 2f       	mov	r20, r23
     e96:	38 2f       	mov	r19, r24
     e98:	29 2f       	mov	r18, r25
     e9a:	86 2f       	mov	r24, r22
     e9c:	94 2f       	mov	r25, r20
     e9e:	a3 2f       	mov	r26, r19
     ea0:	b2 2f       	mov	r27, r18

	//adjust for N/S indicator
	if (E_indicator == 'W')
     ea2:	17 35       	cpi	r17, 0x57	; 87
     ea4:	09 f4       	brne	.+2      	; 0xea8 <lon2dec+0xb0>
		result *= -1;
     ea6:	b0 58       	subi	r27, 0x80	; 128

	return result;
}
     ea8:	68 2f       	mov	r22, r24
     eaa:	79 2f       	mov	r23, r25
     eac:	8a 2f       	mov	r24, r26
     eae:	9b 2f       	mov	r25, r27
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	bf 90       	pop	r11
     ece:	08 95       	ret

00000ed0 <update_user_gps_data>:

//use the raw gps_data fields to populate the GPS_DATA struct
void update_user_gps_data(char * volatile *raw_gps_data, GPS_DATA *gps_data)
{
     ed0:	af 92       	push	r10
     ed2:	bf 92       	push	r11
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	a0 97       	sbiw	r28, 0x20	; 32
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	5c 01       	movw	r10, r24
     ef6:	8b 01       	movw	r16, r22
	float temp;
	double slice;

	//16-point compass 
	char *str_bearings[] = {"N  ", "NNE", "NE ", "ENE", "E  ", "ESE", "SE ", "SSE", "S  ", "SSW", "SW ", "WSW", "W  ", "WNW", "NW ", "NNW"};
     ef8:	80 e2       	ldi	r24, 0x20	; 32
     efa:	ef e0       	ldi	r30, 0x0F	; 15
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	de 01       	movw	r26, r28
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	01 90       	ld	r0, Z+
     f04:	0d 92       	st	X+, r0
     f06:	8a 95       	dec	r24
     f08:	e1 f7       	brne	.-8      	; 0xf02 <update_user_gps_data+0x32>

	wipe_chars(gps_data->msg_type,8);
     f0a:	68 e0       	ldi	r22, 0x08	; 8
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	strcpy(gps_data->msg_type,raw_gps_data[0]);
     f14:	d5 01       	movw	r26, r10
     f16:	6d 91       	ld	r22, X+
     f18:	7c 91       	ld	r23, X
     f1a:	c8 01       	movw	r24, r16
     f1c:	0e 94 9e 23 	call	0x473c	; 0x473c <strcpy>

	//format time
	wipe_chars(gps_data->utc_time,8);
     f20:	68 e0       	ldi	r22, 0x08	; 8
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	c8 01       	movw	r24, r16
     f26:	08 96       	adiw	r24, 0x08	; 8
     f28:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	gps_data->utc_time[0] = raw_gps_data[1][0];
     f2c:	d5 01       	movw	r26, r10
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	ed 91       	ld	r30, X+
     f32:	fc 91       	ld	r31, X
     f34:	13 97       	sbiw	r26, 0x03	; 3
     f36:	80 81       	ld	r24, Z
     f38:	f8 01       	movw	r30, r16
     f3a:	80 87       	std	Z+8, r24	; 0x08
	gps_data->utc_time[1] = raw_gps_data[1][1];
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	ed 91       	ld	r30, X+
     f40:	fc 91       	ld	r31, X
     f42:	13 97       	sbiw	r26, 0x03	; 3
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	d8 01       	movw	r26, r16
     f48:	19 96       	adiw	r26, 0x09	; 9
     f4a:	8c 93       	st	X, r24
     f4c:	19 97       	sbiw	r26, 0x09	; 9
	gps_data->utc_time[2] = ':';
     f4e:	8a e3       	ldi	r24, 0x3A	; 58
     f50:	1a 96       	adiw	r26, 0x0a	; 10
     f52:	8c 93       	st	X, r24
	gps_data->utc_time[3] = raw_gps_data[1][2];
     f54:	d5 01       	movw	r26, r10
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	ed 91       	ld	r30, X+
     f5a:	fc 91       	ld	r31, X
     f5c:	13 97       	sbiw	r26, 0x03	; 3
     f5e:	92 81       	ldd	r25, Z+2	; 0x02
     f60:	f8 01       	movw	r30, r16
     f62:	93 87       	std	Z+11, r25	; 0x0b
	gps_data->utc_time[4] = raw_gps_data[1][3];
     f64:	12 96       	adiw	r26, 0x02	; 2
     f66:	ed 91       	ld	r30, X+
     f68:	fc 91       	ld	r31, X
     f6a:	13 97       	sbiw	r26, 0x03	; 3
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	d8 01       	movw	r26, r16
     f70:	1c 96       	adiw	r26, 0x0c	; 12
     f72:	9c 93       	st	X, r25
     f74:	1c 97       	sbiw	r26, 0x0c	; 12
	gps_data->utc_time[5] = ':';
     f76:	1d 96       	adiw	r26, 0x0d	; 13
     f78:	8c 93       	st	X, r24
	gps_data->utc_time[6] = raw_gps_data[1][4];
     f7a:	d5 01       	movw	r26, r10
     f7c:	12 96       	adiw	r26, 0x02	; 2
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	13 97       	sbiw	r26, 0x03	; 3
     f84:	84 81       	ldd	r24, Z+4	; 0x04
     f86:	f8 01       	movw	r30, r16
     f88:	86 87       	std	Z+14, r24	; 0x0e
	gps_data->utc_time[7] = raw_gps_data[1][5];
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	13 97       	sbiw	r26, 0x03	; 3
     f92:	85 81       	ldd	r24, Z+5	; 0x05
     f94:	d8 01       	movw	r26, r16
     f96:	1f 96       	adiw	r26, 0x0f	; 15
     f98:	8c 93       	st	X, r24

	gps_data->nrw = raw_gps_data[2][0];
     f9a:	d5 01       	movw	r26, r10
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	15 97       	sbiw	r26, 0x05	; 5
     fa4:	80 81       	ld	r24, Z
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 8b       	std	Z+16, r24	; 0x10

	//format latitude
	gps_data->lat = 0;
     faa:	11 8a       	std	Z+17, r1	; 0x11
     fac:	12 8a       	std	Z+18, r1	; 0x12
     fae:	13 8a       	std	Z+19, r1	; 0x13
     fb0:	14 8a       	std	Z+20, r1	; 0x14
	temp = lat2dec(raw_gps_data[3], raw_gps_data[4][0]);
     fb2:	d5 01       	movw	r26, r10
     fb4:	18 96       	adiw	r26, 0x08	; 8
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	19 97       	sbiw	r26, 0x09	; 9
     fbc:	16 96       	adiw	r26, 0x06	; 6
     fbe:	8d 91       	ld	r24, X+
     fc0:	9c 91       	ld	r25, X
     fc2:	17 97       	sbiw	r26, 0x07	; 7
     fc4:	60 81       	ld	r22, Z
     fc6:	0e 94 97 06 	call	0xd2e	; 0xd2e <lat2dec>
     fca:	6b 01       	movw	r12, r22
     fcc:	7c 01       	movw	r14, r24

	//handle invalid latitudes
	if ((temp >= -90)&&(temp <= 90))
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	44 eb       	ldi	r20, 0xB4	; 180
     fd4:	52 ec       	ldi	r21, 0xC2	; 194
     fd6:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__gesf2>
     fda:	87 fd       	sbrc	r24, 7
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <update_user_gps_data+0x12c>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	44 eb       	ldi	r20, 0xB4	; 180
     fe4:	52 e4       	ldi	r21, 0x42	; 66
     fe6:	c7 01       	movw	r24, r14
     fe8:	b6 01       	movw	r22, r12
     fea:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	2c f0       	brlt	.+10     	; 0xffc <update_user_gps_data+0x12c>
		gps_data->lat = temp;
     ff2:	f8 01       	movw	r30, r16
     ff4:	c1 8a       	std	Z+17, r12	; 0x11
     ff6:	d2 8a       	std	Z+18, r13	; 0x12
     ff8:	e3 8a       	std	Z+19, r14	; 0x13
     ffa:	f4 8a       	std	Z+20, r15	; 0x14

	//format longitude
	gps_data->lon = 0;
     ffc:	d8 01       	movw	r26, r16
     ffe:	55 96       	adiw	r26, 0x15	; 21
    1000:	1d 92       	st	X+, r1
    1002:	1d 92       	st	X+, r1
    1004:	1d 92       	st	X+, r1
    1006:	1c 92       	st	X, r1
    1008:	58 97       	sbiw	r26, 0x18	; 24
	temp = lon2dec(raw_gps_data[5], raw_gps_data[6][0]);
    100a:	d5 01       	movw	r26, r10
    100c:	1c 96       	adiw	r26, 0x0c	; 12
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	1d 97       	sbiw	r26, 0x0d	; 13
    1014:	1a 96       	adiw	r26, 0x0a	; 10
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	1b 97       	sbiw	r26, 0x0b	; 11
    101c:	60 81       	ld	r22, Z
    101e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <lon2dec>
    1022:	6b 01       	movw	r12, r22
    1024:	7c 01       	movw	r14, r24

	//handle invalid longitudes
	if ((temp >= -180)&&(temp <= 180))
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	44 e3       	ldi	r20, 0x34	; 52
    102c:	53 ec       	ldi	r21, 0xC3	; 195
    102e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__gesf2>
    1032:	87 fd       	sbrc	r24, 7
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <update_user_gps_data+0x184>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	44 e3       	ldi	r20, 0x34	; 52
    103c:	53 e4       	ldi	r21, 0x43	; 67
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    1046:	18 16       	cp	r1, r24
    1048:	2c f0       	brlt	.+10     	; 0x1054 <update_user_gps_data+0x184>
		gps_data->lon = temp;
    104a:	f8 01       	movw	r30, r16
    104c:	c5 8a       	std	Z+21, r12	; 0x15
    104e:	d6 8a       	std	Z+22, r13	; 0x16
    1050:	e7 8a       	std	Z+23, r14	; 0x17
    1052:	f0 8e       	std	Z+24, r15	; 0x18

	gps_data->speed = 0;
    1054:	d8 01       	movw	r26, r16
    1056:	59 96       	adiw	r26, 0x19	; 25
    1058:	1d 92       	st	X+, r1
    105a:	1d 92       	st	X+, r1
    105c:	1d 92       	st	X+, r1
    105e:	1c 92       	st	X, r1
    1060:	5c 97       	sbiw	r26, 0x1c	; 28
	gps_data->speed = (float)strtod(raw_gps_data[7],NULL);
    1062:	f5 01       	movw	r30, r10
    1064:	86 85       	ldd	r24, Z+14	; 0x0e
    1066:	97 85       	ldd	r25, Z+15	; 0x0f
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	0e 94 19 22 	call	0x4432	; 0x4432 <strtod>
    1070:	d8 01       	movw	r26, r16
    1072:	59 96       	adiw	r26, 0x19	; 25
    1074:	6d 93       	st	X+, r22
    1076:	7d 93       	st	X+, r23
    1078:	8d 93       	st	X+, r24
    107a:	9c 93       	st	X, r25
    107c:	5c 97       	sbiw	r26, 0x1c	; 28

	gps_data->course = 0;
    107e:	f8 01       	movw	r30, r16
    1080:	15 8e       	std	Z+29, r1	; 0x1d
    1082:	16 8e       	std	Z+30, r1	; 0x1e
    1084:	17 8e       	std	Z+31, r1	; 0x1f
    1086:	10 a2       	std	Z+32, r1	; 0x20
	gps_data->course = (float)strtod(raw_gps_data[8],NULL);
    1088:	d5 01       	movw	r26, r10
    108a:	50 96       	adiw	r26, 0x10	; 16
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	51 97       	sbiw	r26, 0x11	; 17
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	0e 94 19 22 	call	0x4432	; 0x4432 <strtod>
    109a:	f8 01       	movw	r30, r16
    109c:	65 8f       	std	Z+29, r22	; 0x1d
    109e:	76 8f       	std	Z+30, r23	; 0x1e
    10a0:	87 8f       	std	Z+31, r24	; 0x1f
    10a2:	90 a3       	std	Z+32, r25	; 0x20

	//format date
	wipe_chars(gps_data->date,8);
    10a4:	68 e0       	ldi	r22, 0x08	; 8
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	c8 01       	movw	r24, r16
    10aa:	81 96       	adiw	r24, 0x21	; 33
    10ac:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	gps_data->date[0] = raw_gps_data[9][2];
    10b0:	d5 01       	movw	r26, r10
    10b2:	52 96       	adiw	r26, 0x12	; 18
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	53 97       	sbiw	r26, 0x13	; 19
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	f8 01       	movw	r30, r16
    10be:	81 a3       	std	Z+33, r24	; 0x21
	gps_data->date[1] = raw_gps_data[9][3];
    10c0:	52 96       	adiw	r26, 0x12	; 18
    10c2:	ed 91       	ld	r30, X+
    10c4:	fc 91       	ld	r31, X
    10c6:	53 97       	sbiw	r26, 0x13	; 19
    10c8:	83 81       	ldd	r24, Z+3	; 0x03
    10ca:	d8 01       	movw	r26, r16
    10cc:	92 96       	adiw	r26, 0x22	; 34
    10ce:	8c 93       	st	X, r24
    10d0:	92 97       	sbiw	r26, 0x22	; 34
	gps_data->date[2] = '/';
    10d2:	8f e2       	ldi	r24, 0x2F	; 47
    10d4:	93 96       	adiw	r26, 0x23	; 35
    10d6:	8c 93       	st	X, r24
	gps_data->date[3] = raw_gps_data[9][0];
    10d8:	d5 01       	movw	r26, r10
    10da:	52 96       	adiw	r26, 0x12	; 18
    10dc:	ed 91       	ld	r30, X+
    10de:	fc 91       	ld	r31, X
    10e0:	53 97       	sbiw	r26, 0x13	; 19
    10e2:	90 81       	ld	r25, Z
    10e4:	f8 01       	movw	r30, r16
    10e6:	94 a3       	std	Z+36, r25	; 0x24
	gps_data->date[4] = raw_gps_data[9][1];
    10e8:	52 96       	adiw	r26, 0x12	; 18
    10ea:	ed 91       	ld	r30, X+
    10ec:	fc 91       	ld	r31, X
    10ee:	53 97       	sbiw	r26, 0x13	; 19
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	d8 01       	movw	r26, r16
    10f4:	95 96       	adiw	r26, 0x25	; 37
    10f6:	9c 93       	st	X, r25
    10f8:	95 97       	sbiw	r26, 0x25	; 37
	gps_data->date[5] = '/';
    10fa:	96 96       	adiw	r26, 0x26	; 38
    10fc:	8c 93       	st	X, r24
	gps_data->date[6] = raw_gps_data[9][4];
    10fe:	d5 01       	movw	r26, r10
    1100:	52 96       	adiw	r26, 0x12	; 18
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	53 97       	sbiw	r26, 0x13	; 19
    1108:	84 81       	ldd	r24, Z+4	; 0x04
    110a:	f8 01       	movw	r30, r16
    110c:	87 a3       	std	Z+39, r24	; 0x27
	gps_data->date[7] = raw_gps_data[9][5];
    110e:	52 96       	adiw	r26, 0x12	; 18
    1110:	ed 91       	ld	r30, X+
    1112:	fc 91       	ld	r31, X
    1114:	53 97       	sbiw	r26, 0x13	; 19
    1116:	85 81       	ldd	r24, Z+5	; 0x05
    1118:	d8 01       	movw	r26, r16
    111a:	98 96       	adiw	r26, 0x28	; 40
    111c:	8c 93       	st	X, r24

	wipe_chars(gps_data->mag_var,8);
    111e:	78 01       	movw	r14, r16
    1120:	b9 e2       	ldi	r27, 0x29	; 41
    1122:	eb 0e       	add	r14, r27
    1124:	f1 1c       	adc	r15, r1
    1126:	68 e0       	ldi	r22, 0x08	; 8
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	c7 01       	movw	r24, r14
    112c:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	strcpy(gps_data->mag_var,raw_gps_data[10]);
    1130:	f5 01       	movw	r30, r10
    1132:	64 89       	ldd	r22, Z+20	; 0x14
    1134:	75 89       	ldd	r23, Z+21	; 0x15
    1136:	c7 01       	movw	r24, r14
    1138:	0e 94 9e 23 	call	0x473c	; 0x473c <strcpy>

	gps_data->mode = raw_gps_data[12][0];
    113c:	d5 01       	movw	r26, r10
    113e:	58 96       	adiw	r26, 0x18	; 24
    1140:	ed 91       	ld	r30, X+
    1142:	fc 91       	ld	r31, X
    1144:	59 97       	sbiw	r26, 0x19	; 25
    1146:	80 81       	ld	r24, Z
    1148:	f8 01       	movw	r30, r16
    114a:	81 ab       	std	Z+49, r24	; 0x31

	wipe_chars(gps_data->checksum,3);
    114c:	63 e0       	ldi	r22, 0x03	; 3
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	c8 01       	movw	r24, r16
    1152:	c2 96       	adiw	r24, 0x32	; 50
    1154:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	gps_data->checksum[0] = raw_gps_data[12][1];
    1158:	d5 01       	movw	r26, r10
    115a:	58 96       	adiw	r26, 0x18	; 24
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	59 97       	sbiw	r26, 0x19	; 25
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	f8 01       	movw	r30, r16
    1166:	82 ab       	std	Z+50, r24	; 0x32
	gps_data->checksum[1] = raw_gps_data[12][2];
    1168:	58 96       	adiw	r26, 0x18	; 24
    116a:	ed 91       	ld	r30, X+
    116c:	fc 91       	ld	r31, X
    116e:	59 97       	sbiw	r26, 0x19	; 25
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	d8 01       	movw	r26, r16
    1174:	d3 96       	adiw	r26, 0x33	; 51
    1176:	8c 93       	st	X, r24
	gps_data->checksum[2] = raw_gps_data[12][3];
    1178:	d5 01       	movw	r26, r10
    117a:	58 96       	adiw	r26, 0x18	; 24
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	59 97       	sbiw	r26, 0x19	; 25
    1182:	83 81       	ldd	r24, Z+3	; 0x03
    1184:	f8 01       	movw	r30, r16
    1186:	84 ab       	std	Z+52, r24	; 0x34

	//compute the course string (16-point compass)
	slice = gps_data->course/360*16;
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	44 eb       	ldi	r20, 0xB4	; 180
    118e:	53 e4       	ldi	r21, 0x43	; 67
    1190:	65 8d       	ldd	r22, Z+29	; 0x1d
    1192:	76 8d       	ldd	r23, Z+30	; 0x1e
    1194:	87 8d       	ldd	r24, Z+31	; 0x1f
    1196:	90 a1       	ldd	r25, Z+32	; 0x20
    1198:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    11a8:	6b 01       	movw	r12, r22
    11aa:	7c 01       	movw	r14, r24

	if ((slice<=0.5)||(slice>=15.5))
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	7d 2d       	mov	r23, r13
    11b6:	9f 2d       	mov	r25, r15
    11b8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	64 f4       	brge	.+24     	; 0x11d8 <update_user_gps_data+0x308>
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	48 e7       	ldi	r20, 0x78	; 120
    11c6:	51 e4       	ldi	r21, 0x41	; 65
    11c8:	6c 2d       	mov	r22, r12
    11ca:	7d 2d       	mov	r23, r13
    11cc:	8e 2d       	mov	r24, r14
    11ce:	9f 2d       	mov	r25, r15
    11d0:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__gesf2>
    11d4:	87 fd       	sbrc	r24, 7
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <update_user_gps_data+0x30e>
	{
		//course is NORTH
		strncpy(gps_data->str_course, str_bearings[0], 3);
    11d8:	69 81       	ldd	r22, Y+1	; 0x01
    11da:	7a 81       	ldd	r23, Y+2	; 0x02
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <update_user_gps_data+0x334>
	} else {
		//course index complies with (int)(slice+0.5) convention
		strncpy(gps_data->str_course, str_bearings[(int)(slice+0.5)], 3);
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	6c 2d       	mov	r22, r12
    11e8:	7d 2d       	mov	r23, r13
    11ea:	8e 2d       	mov	r24, r14
    11ec:	9f 2d       	mov	r25, r15
    11ee:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    11f2:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
    11f6:	fb 01       	movw	r30, r22
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	ec 0f       	add	r30, r28
    11fe:	fd 1f       	adc	r31, r29
    1200:	61 81       	ldd	r22, Z+1	; 0x01
    1202:	72 81       	ldd	r23, Z+2	; 0x02
    1204:	43 e0       	ldi	r20, 0x03	; 3
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	c8 01       	movw	r24, r16
    120a:	8a 5a       	subi	r24, 0xAA	; 170
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
	}

}
    120e:	a0 96       	adiw	r28, 0x20	; 32
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
	{
		//course is NORTH
		strncpy(gps_data->str_course, str_bearings[0], 3);
	} else {
		//course index complies with (int)(slice+0.5) convention
		strncpy(gps_data->str_course, str_bearings[(int)(slice+0.5)], 3);
    122e:	0c 94 a5 23 	jmp	0x474a	; 0x474a <strncpy>

00001232 <calculate_bearings>:
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//calculate the absolute and relative bearings to the nearest station 
int calculate_bearings(GPS_DATA *gps_data, DATABASE *fm_stations)
{
    1232:	2f 92       	push	r2
    1234:	3f 92       	push	r3
    1236:	4f 92       	push	r4
    1238:	5f 92       	push	r5
    123a:	6f 92       	push	r6
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	ee 97       	sbiw	r28, 0x3e	; 62
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	3c 01       	movw	r6, r24
    1268:	2b 01       	movw	r4, r22
	double y, x, bearing, lat1, lat2, lon1, lon2;
	float slice;

	//16-point compass 
	char *str_bearings[] = {"N  ", "NNE", "NE ", "ENE", "E  ", "ESE", "SE ", "SSE", "S  ", "SSW", "SW ", "WSW", "W  ", "WNW", "NW ", "NNW"};
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	ef e0       	ldi	r30, 0x0F	; 15
    126e:	f1 e0       	ldi	r31, 0x01	; 1
    1270:	8e 01       	movw	r16, r28
    1272:	0f 5f       	subi	r16, 0xFF	; 255
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
    1276:	d8 01       	movw	r26, r16
    1278:	01 90       	ld	r0, Z+
    127a:	0d 92       	st	X+, r0
    127c:	8a 95       	dec	r24
    127e:	e1 f7       	brne	.-8      	; 0x1278 <calculate_bearings+0x46>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1280:	2b ed       	ldi	r18, 0xDB	; 219
    1282:	3f e0       	ldi	r19, 0x0F	; 15
    1284:	49 e4       	ldi	r20, 0x49	; 73
    1286:	50 e4       	ldi	r21, 0x40	; 64
    1288:	f3 01       	movw	r30, r6
    128a:	61 89       	ldd	r22, Z+17	; 0x11
    128c:	72 89       	ldd	r23, Z+18	; 0x12
    128e:	83 89       	ldd	r24, Z+19	; 0x13
    1290:	94 89       	ldd	r25, Z+20	; 0x14
    1292:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	44 e3       	ldi	r20, 0x34	; 52
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
    12a2:	69 a7       	std	Y+41, r22	; 0x29
    12a4:	7a a7       	std	Y+42, r23	; 0x2a
    12a6:	8b a7       	std	Y+43, r24	; 0x2b
    12a8:	9c a7       	std	Y+44, r25	; 0x2c
    12aa:	2b ed       	ldi	r18, 0xDB	; 219
    12ac:	3f e0       	ldi	r19, 0x0F	; 15
    12ae:	49 e4       	ldi	r20, 0x49	; 73
    12b0:	50 e4       	ldi	r21, 0x40	; 64
    12b2:	f3 01       	movw	r30, r6
    12b4:	65 89       	ldd	r22, Z+21	; 0x15
    12b6:	76 89       	ldd	r23, Z+22	; 0x16
    12b8:	87 89       	ldd	r24, Z+23	; 0x17
    12ba:	90 8d       	ldd	r25, Z+24	; 0x18
    12bc:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	44 e3       	ldi	r20, 0x34	; 52
    12c6:	53 e4       	ldi	r21, 0x43	; 67
    12c8:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
    12cc:	6f ab       	std	Y+55, r22	; 0x37
    12ce:	78 af       	std	Y+56, r23	; 0x38
    12d0:	89 af       	std	Y+57, r24	; 0x39
    12d2:	9a af       	std	Y+58, r25	; 0x3a
    12d4:	7a a2       	std	Y+34, r7	; 0x22
    12d6:	69 a2       	std	Y+33, r6	; 0x21
    12d8:	5c a2       	std	Y+36, r5	; 0x24
    12da:	4b a2       	std	Y+35, r4	; 0x23
	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);

	int i;
	//calculate bearing parameters for the top NUM_NEAREST nearest stations
	for (i=0; i<NUM_NEAREST; i++)
    12dc:	21 2c       	mov	r2, r1
    12de:	31 2c       	mov	r3, r1
	{

		if (i >= fm_stations->num_stations)
    12e0:	f2 01       	movw	r30, r4
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	28 16       	cp	r2, r24
    12e8:	39 06       	cpc	r3, r25
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <calculate_bearings+0xbc>
    12ec:	76 c1       	rjmp	.+748    	; 0x15da <calculate_bearings+0x3a8>
			return 0;

		lat2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_stations[i][0]].lat);
    12ee:	eb a1       	ldd	r30, Y+35	; 0x23
    12f0:	fc a1       	ldd	r31, Y+36	; 0x24
    12f2:	26 81       	ldd	r18, Z+6	; 0x06
    12f4:	37 81       	ldd	r19, Z+7	; 0x07
    12f6:	fc e1       	ldi	r31, 0x1C	; 28
    12f8:	f2 9f       	mul	r31, r18
    12fa:	c0 01       	movw	r24, r0
    12fc:	f3 9f       	mul	r31, r19
    12fe:	90 0d       	add	r25, r0
    1300:	11 24       	eor	r1, r1
    1302:	f2 01       	movw	r30, r4
    1304:	00 81       	ld	r16, Z
    1306:	11 81       	ldd	r17, Z+1	; 0x01
    1308:	08 0f       	add	r16, r24
    130a:	19 1f       	adc	r17, r25
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    130c:	2b ed       	ldi	r18, 0xDB	; 219
    130e:	3f e0       	ldi	r19, 0x0F	; 15
    1310:	49 e4       	ldi	r20, 0x49	; 73
    1312:	50 e4       	ldi	r21, 0x40	; 64
    1314:	f8 01       	movw	r30, r16
    1316:	64 85       	ldd	r22, Z+12	; 0x0c
    1318:	75 85       	ldd	r23, Z+13	; 0x0d
    131a:	86 85       	ldd	r24, Z+14	; 0x0e
    131c:	97 85       	ldd	r25, Z+15	; 0x0f
    131e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	44 e3       	ldi	r20, 0x34	; 52
    1328:	53 e4       	ldi	r21, 0x43	; 67
    132a:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
    132e:	4b 01       	movw	r8, r22
    1330:	5c 01       	movw	r10, r24
    1332:	2b ed       	ldi	r18, 0xDB	; 219
    1334:	3f e0       	ldi	r19, 0x0F	; 15
    1336:	49 e4       	ldi	r20, 0x49	; 73
    1338:	50 e4       	ldi	r21, 0x40	; 64
    133a:	f8 01       	movw	r30, r16
    133c:	60 89       	ldd	r22, Z+16	; 0x10
    133e:	71 89       	ldd	r23, Z+17	; 0x11
    1340:	82 89       	ldd	r24, Z+18	; 0x12
    1342:	93 89       	ldd	r25, Z+19	; 0x13
    1344:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	44 e3       	ldi	r20, 0x34	; 52
    134e:	53 e4       	ldi	r21, 0x43	; 67
    1350:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>

		lat2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_stations[i][0]].lat);
		lon2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_stations[i][0]].lon);

		//use the Forward Azimuth Formula
		y = sin(lon2 - lon1)*cos(lat2);
    1354:	bf a9       	ldd	r27, Y+55	; 0x37
    1356:	a8 ad       	ldd	r26, Y+56	; 0x38
    1358:	f9 ad       	ldd	r31, Y+57	; 0x39
    135a:	ea ad       	ldd	r30, Y+58	; 0x3a
    135c:	2b 2f       	mov	r18, r27
    135e:	3a 2f       	mov	r19, r26
    1360:	4f 2f       	mov	r20, r31
    1362:	5e 2f       	mov	r21, r30
    1364:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    1368:	16 2f       	mov	r17, r22
    136a:	07 2f       	mov	r16, r23
    136c:	8d a7       	std	Y+45, r24	; 0x2d
    136e:	9e a7       	std	Y+46, r25	; 0x2e
    1370:	a8 01       	movw	r20, r16
    1372:	65 2f       	mov	r22, r21
    1374:	74 2f       	mov	r23, r20
    1376:	0e 94 16 20 	call	0x402c	; 0x402c <sin>
    137a:	6f a7       	std	Y+47, r22	; 0x2f
    137c:	78 ab       	std	Y+48, r23	; 0x30
    137e:	89 ab       	std	Y+49, r24	; 0x31
    1380:	9a ab       	std	Y+50, r25	; 0x32
    1382:	68 2d       	mov	r22, r8
    1384:	79 2d       	mov	r23, r9
    1386:	8a 2d       	mov	r24, r10
    1388:	9b 2d       	mov	r25, r11
    138a:	0e 94 bf 1c 	call	0x397e	; 0x397e <cos>
    138e:	6d a3       	std	Y+37, r22	; 0x25
    1390:	7e a3       	std	Y+38, r23	; 0x26
    1392:	8f a3       	std	Y+39, r24	; 0x27
    1394:	98 a7       	std	Y+40, r25	; 0x28
		x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2 - lon1);
    1396:	59 a5       	ldd	r21, Y+41	; 0x29
    1398:	4a a5       	ldd	r20, Y+42	; 0x2a
    139a:	3b a5       	ldd	r19, Y+43	; 0x2b
    139c:	2c a5       	ldd	r18, Y+44	; 0x2c
    139e:	65 2f       	mov	r22, r21
    13a0:	74 2f       	mov	r23, r20
    13a2:	83 2f       	mov	r24, r19
    13a4:	92 2f       	mov	r25, r18
    13a6:	0e 94 bf 1c 	call	0x397e	; 0x397e <cos>
    13aa:	6b 01       	movw	r12, r22
    13ac:	7c 01       	movw	r14, r24
    13ae:	68 2d       	mov	r22, r8
    13b0:	79 2d       	mov	r23, r9
    13b2:	8a 2d       	mov	r24, r10
    13b4:	9b 2d       	mov	r25, r11
    13b6:	0e 94 16 20 	call	0x402c	; 0x402c <sin>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	b9 a5       	ldd	r27, Y+41	; 0x29
    13c0:	aa a5       	ldd	r26, Y+42	; 0x2a
    13c2:	fb a5       	ldd	r31, Y+43	; 0x2b
    13c4:	ec a5       	ldd	r30, Y+44	; 0x2c
    13c6:	6b 2f       	mov	r22, r27
    13c8:	7a 2f       	mov	r23, r26
    13ca:	8f 2f       	mov	r24, r31
    13cc:	9e 2f       	mov	r25, r30
    13ce:	2b af       	std	Y+59, r18	; 0x3b
    13d0:	3c af       	std	Y+60, r19	; 0x3c
    13d2:	4d af       	std	Y+61, r20	; 0x3d
    13d4:	5e af       	std	Y+62, r21	; 0x3e
    13d6:	0e 94 16 20 	call	0x402c	; 0x402c <sin>
    13da:	6b ab       	std	Y+51, r22	; 0x33
    13dc:	7c ab       	std	Y+52, r23	; 0x34
    13de:	8d ab       	std	Y+53, r24	; 0x35
    13e0:	9e ab       	std	Y+54, r25	; 0x36
    13e2:	ad a5       	ldd	r26, Y+45	; 0x2d
    13e4:	fe a5       	ldd	r31, Y+46	; 0x2e
    13e6:	61 2f       	mov	r22, r17
    13e8:	70 2f       	mov	r23, r16
    13ea:	8a 2f       	mov	r24, r26
    13ec:	9f 2f       	mov	r25, r31
    13ee:	0e 94 bf 1c 	call	0x397e	; 0x397e <cos>
    13f2:	4b 01       	movw	r8, r22
    13f4:	5c 01       	movw	r10, r24
    13f6:	2b ad       	ldd	r18, Y+59	; 0x3b
    13f8:	3c ad       	ldd	r19, Y+60	; 0x3c
    13fa:	4d ad       	ldd	r20, Y+61	; 0x3d
    13fc:	5e ad       	ldd	r21, Y+62	; 0x3e
    13fe:	c7 01       	movw	r24, r14
    1400:	b6 01       	movw	r22, r12
    1402:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1406:	6b 01       	movw	r12, r22
    1408:	7c 01       	movw	r14, r24
    140a:	2d a1       	ldd	r18, Y+37	; 0x25
    140c:	3e a1       	ldd	r19, Y+38	; 0x26
    140e:	4f a1       	ldd	r20, Y+39	; 0x27
    1410:	58 a5       	ldd	r21, Y+40	; 0x28
    1412:	6b a9       	ldd	r22, Y+51	; 0x33
    1414:	7c a9       	ldd	r23, Y+52	; 0x34
    1416:	8d a9       	ldd	r24, Y+53	; 0x35
    1418:	9e a9       	ldd	r25, Y+54	; 0x36
    141a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    141e:	a5 01       	movw	r20, r10
    1420:	94 01       	movw	r18, r8
    1422:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24

		lat2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_stations[i][0]].lat);
		lon2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_stations[i][0]].lon);

		//use the Forward Azimuth Formula
		y = sin(lon2 - lon1)*cos(lat2);
    1436:	2d a1       	ldd	r18, Y+37	; 0x25
    1438:	3e a1       	ldd	r19, Y+38	; 0x26
    143a:	4f a1       	ldd	r20, Y+39	; 0x27
    143c:	58 a5       	ldd	r21, Y+40	; 0x28
    143e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1440:	78 a9       	ldd	r23, Y+48	; 0x30
    1442:	89 a9       	ldd	r24, Y+49	; 0x31
    1444:	9a a9       	ldd	r25, Y+50	; 0x32
    1446:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
		x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2 - lon1);

		//finish computing the absolute bearing to the nearest station
		bearing = to_degrees(atan2(y, x));
    144a:	a7 01       	movw	r20, r14
    144c:	96 01       	movw	r18, r12
    144e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <atan2>
}

//convert an angle from radians to degrees
double to_degrees(double radian_angle)
{
	return 180*radian_angle/(M_PI);
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	44 e3       	ldi	r20, 0x34	; 52
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    145e:	2b ed       	ldi	r18, 0xDB	; 219
    1460:	3f e0       	ldi	r19, 0x0F	; 15
    1462:	49 e4       	ldi	r20, 0x49	; 73
    1464:	50 e4       	ldi	r21, 0x40	; 64
    1466:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
    146a:	6b 01       	movw	r12, r22
    146c:	7c 01       	movw	r14, r24

		//finish computing the absolute bearing to the nearest station
		bearing = to_degrees(atan2(y, x));

		//keep absolute bearing between 0-360
		if (bearing < 0)
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	a9 01       	movw	r20, r18
    1474:	7d 2d       	mov	r23, r13
    1476:	9f 2d       	mov	r25, r15
    1478:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    147c:	87 ff       	sbrs	r24, 7
    147e:	0c c0       	rjmp	.+24     	; 0x1498 <calculate_bearings+0x266>
			bearing += 360;
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	44 eb       	ldi	r20, 0xB4	; 180
    1486:	53 e4       	ldi	r21, 0x43	; 67
    1488:	6c 2d       	mov	r22, r12
    148a:	7d 2d       	mov	r23, r13
    148c:	8e 2d       	mov	r24, r14
    148e:	9f 2d       	mov	r25, r15
    1490:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    1494:	6b 01       	movw	r12, r22
    1496:	7c 01       	movw	r14, r24

		//save bearing into the DEV_STATE struct
		gps_data->abs_bearing_nearest[i] = (float)bearing;
    1498:	8c 2d       	mov	r24, r12
    149a:	9d 2d       	mov	r25, r13
    149c:	ae 2d       	mov	r26, r14
    149e:	bf 2d       	mov	r27, r15
    14a0:	e9 a1       	ldd	r30, Y+33	; 0x21
    14a2:	fa a1       	ldd	r31, Y+34	; 0x22
    14a4:	85 ab       	std	Z+53, r24	; 0x35
    14a6:	96 ab       	std	Z+54, r25	; 0x36
    14a8:	a7 ab       	std	Z+55, r26	; 0x37
    14aa:	b0 af       	std	Z+56, r27	; 0x38

		//compute the relative bearing to nearest station
		gps_data->rel_bearing_nearest[i] = gps_data->abs_bearing_nearest[i] - gps_data->course;
    14ac:	f3 01       	movw	r30, r6
    14ae:	25 8d       	ldd	r18, Z+29	; 0x1d
    14b0:	36 8d       	ldd	r19, Z+30	; 0x1e
    14b2:	47 8d       	ldd	r20, Z+31	; 0x1f
    14b4:	50 a1       	ldd	r21, Z+32	; 0x20
    14b6:	6c 2d       	mov	r22, r12
    14b8:	7d 2d       	mov	r23, r13
    14ba:	8e 2d       	mov	r24, r14
    14bc:	9f 2d       	mov	r25, r15
    14be:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    14c2:	4b 01       	movw	r8, r22
    14c4:	5c 01       	movw	r10, r24

		//keep relative bearing within 0-360
		if (gps_data->rel_bearing_nearest[i] < 0)
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	79 2d       	mov	r23, r9
    14ce:	9b 2d       	mov	r25, r11
    14d0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    14d4:	09 a1       	ldd	r16, Y+33	; 0x21
    14d6:	1a a1       	ldd	r17, Y+34	; 0x22
    14d8:	0f 5b       	subi	r16, 0xBF	; 191
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	87 fd       	sbrc	r24, 7
    14de:	0a c0       	rjmp	.+20     	; 0x14f4 <calculate_bearings+0x2c2>

		//save bearing into the DEV_STATE struct
		gps_data->abs_bearing_nearest[i] = (float)bearing;

		//compute the relative bearing to nearest station
		gps_data->rel_bearing_nearest[i] = gps_data->abs_bearing_nearest[i] - gps_data->course;
    14e0:	88 2d       	mov	r24, r8
    14e2:	99 2d       	mov	r25, r9
    14e4:	aa 2d       	mov	r26, r10
    14e6:	bb 2d       	mov	r27, r11
    14e8:	f8 01       	movw	r30, r16
    14ea:	80 83       	st	Z, r24
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	a2 83       	std	Z+2, r26	; 0x02
    14f0:	b3 83       	std	Z+3, r27	; 0x03
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <calculate_bearings+0x2e0>

		//keep relative bearing within 0-360
		if (gps_data->rel_bearing_nearest[i] < 0)
			gps_data->rel_bearing_nearest[i] += 360;
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	44 eb       	ldi	r20, 0xB4	; 180
    14fa:	53 e4       	ldi	r21, 0x43	; 67
    14fc:	68 2d       	mov	r22, r8
    14fe:	79 2d       	mov	r23, r9
    1500:	8a 2d       	mov	r24, r10
    1502:	9b 2d       	mov	r25, r11
    1504:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    1508:	f8 01       	movw	r30, r16
    150a:	60 83       	st	Z, r22
    150c:	71 83       	std	Z+1, r23	; 0x01
    150e:	82 83       	std	Z+2, r24	; 0x02
    1510:	93 83       	std	Z+3, r25	; 0x03

		//compute the absolute bearing string (16-point compass)
		slice = gps_data->abs_bearing_nearest[i]/360*16;
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	44 eb       	ldi	r20, 0xB4	; 180
    1518:	53 e4       	ldi	r21, 0x43	; 67
    151a:	6c 2d       	mov	r22, r12
    151c:	7d 2d       	mov	r23, r13
    151e:	8e 2d       	mov	r24, r14
    1520:	9f 2d       	mov	r25, r15
    1522:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	51 e4       	ldi	r21, 0x41	; 65
    152e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1532:	7b 01       	movw	r14, r22
    1534:	8c 01       	movw	r16, r24

		if ((slice<=0.5)||(slice>=15.5))
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	7f 2d       	mov	r23, r15
    1540:	91 2f       	mov	r25, r17
    1542:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    1546:	18 16       	cp	r1, r24
    1548:	64 f4       	brge	.+24     	; 0x1562 <calculate_bearings+0x330>
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	48 e7       	ldi	r20, 0x78	; 120
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	6e 2d       	mov	r22, r14
    1554:	7f 2d       	mov	r23, r15
    1556:	80 2f       	mov	r24, r16
    1558:	91 2f       	mov	r25, r17
    155a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__gesf2>
    155e:	87 fd       	sbrc	r24, 7
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <calculate_bearings+0x336>
		{
			//bearing is NORTH
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[0], 3);
    1562:	69 81       	ldd	r22, Y+1	; 0x01
    1564:	7a 81       	ldd	r23, Y+2	; 0x02
    1566:	17 c0       	rjmp	.+46     	; 0x1596 <calculate_bearings+0x364>
		} else {
			//bearing index complies with (int)(slice+0.5) convention
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[(int)(slice+0.5)], 3);
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	6e 2d       	mov	r22, r14
    1572:	7f 2d       	mov	r23, r15
    1574:	80 2f       	mov	r24, r16
    1576:	91 2f       	mov	r25, r17
    1578:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    157c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
    1580:	fb 01       	movw	r30, r22
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	8c 0f       	add	r24, r28
    158c:	9d 1f       	adc	r25, r29
    158e:	e8 0f       	add	r30, r24
    1590:	f9 1f       	adc	r31, r25
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	c1 01       	movw	r24, r2
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	82 0d       	add	r24, r2
    159e:	93 1d       	adc	r25, r3
    15a0:	83 5b       	subi	r24, 0xB3	; 179
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	43 e0       	ldi	r20, 0x03	; 3
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	86 0d       	add	r24, r6
    15aa:	97 1d       	adc	r25, r7
    15ac:	0e 94 a5 23 	call	0x474a	; 0x474a <strncpy>
	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);

	int i;
	//calculate bearing parameters for the top NUM_NEAREST nearest stations
	for (i=0; i<NUM_NEAREST; i++)
    15b0:	9f ef       	ldi	r25, 0xFF	; 255
    15b2:	29 1a       	sub	r2, r25
    15b4:	39 0a       	sbc	r3, r25
    15b6:	e9 a1       	ldd	r30, Y+33	; 0x21
    15b8:	fa a1       	ldd	r31, Y+34	; 0x22
    15ba:	34 96       	adiw	r30, 0x04	; 4
    15bc:	fa a3       	std	Y+34, r31	; 0x22
    15be:	e9 a3       	std	Y+33, r30	; 0x21
    15c0:	8b a1       	ldd	r24, Y+35	; 0x23
    15c2:	9c a1       	ldd	r25, Y+36	; 0x24
    15c4:	04 96       	adiw	r24, 0x04	; 4
    15c6:	9c a3       	std	Y+36, r25	; 0x24
    15c8:	8b a3       	std	Y+35, r24	; 0x23
    15ca:	93 e0       	ldi	r25, 0x03	; 3
    15cc:	29 16       	cp	r2, r25
    15ce:	31 04       	cpc	r3, r1
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <calculate_bearings+0x3a2>
    15d2:	86 ce       	rjmp	.-756    	; 0x12e0 <calculate_bearings+0xae>
			//bearing index complies with (int)(slice+0.5) convention
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[(int)(slice+0.5)], 3);
		}
	}

	return 1;
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <calculate_bearings+0x3ac>
	//calculate bearing parameters for the top NUM_NEAREST nearest stations
	for (i=0; i<NUM_NEAREST; i++)
	{

		if (i >= fm_stations->num_stations)
			return 0;
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[(int)(slice+0.5)], 3);
		}
	}

	return 1;
}
    15de:	c9 01       	movw	r24, r18
    15e0:	ee 96       	adiw	r28, 0x3e	; 62
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	cf 90       	pop	r12
    15fc:	bf 90       	pop	r11
    15fe:	af 90       	pop	r10
    1600:	9f 90       	pop	r9
    1602:	8f 90       	pop	r8
    1604:	7f 90       	pop	r7
    1606:	6f 90       	pop	r6
    1608:	5f 90       	pop	r5
    160a:	4f 90       	pop	r4
    160c:	3f 90       	pop	r3
    160e:	2f 90       	pop	r2
    1610:	08 95       	ret

00001612 <earth_distance>:

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
    1612:	4f 92       	push	r4
    1614:	5f 92       	push	r5
    1616:	6f 92       	push	r6
    1618:	7f 92       	push	r7
    161a:	8f 92       	push	r8
    161c:	9f 92       	push	r9
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	60 97       	sbiw	r28, 0x10	; 16
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	2b 01       	movw	r4, r22
    1644:	3c 01       	movw	r6, r24
    1646:	29 87       	std	Y+9, r18	; 0x09
    1648:	3a 87       	std	Y+10, r19	; 0x0a
    164a:	4b 87       	std	Y+11, r20	; 0x0b
    164c:	5c 87       	std	Y+12, r21	; 0x0c
    164e:	e9 82       	std	Y+1, r14	; 0x01
    1650:	fa 82       	std	Y+2, r15	; 0x02
    1652:	0b 83       	std	Y+3, r16	; 0x03
    1654:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	c8 01       	movw	r24, r16
    165c:	b7 01       	movw	r22, r14
    165e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1662:	2b ed       	ldi	r18, 0xDB	; 219
    1664:	3f e0       	ldi	r19, 0x0F	; 15
    1666:	49 e4       	ldi	r20, 0x49	; 73
    1668:	50 e4       	ldi	r21, 0x40	; 64
    166a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	44 e3       	ldi	r20, 0x34	; 52
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1686:	0e 94 16 20 	call	0x402c	; 0x402c <sin>
    168a:	6d 83       	std	Y+5, r22	; 0x05
    168c:	7e 83       	std	Y+6, r23	; 0x06
    168e:	8f 83       	std	Y+7, r24	; 0x07
    1690:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1692:	2b ed       	ldi	r18, 0xDB	; 219
    1694:	3f e0       	ldi	r19, 0x0F	; 15
    1696:	49 e4       	ldi	r20, 0x49	; 73
    1698:	50 e4       	ldi	r21, 0x40	; 64
    169a:	c3 01       	movw	r24, r6
    169c:	b2 01       	movw	r22, r4
    169e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	44 e3       	ldi	r20, 0x34	; 52
    16a8:	53 e4       	ldi	r21, 0x43	; 67
    16aa:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    16ae:	0e 94 bf 1c 	call	0x397e	; 0x397e <cos>
    16b2:	2b 01       	movw	r4, r22
    16b4:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    16b6:	2b ed       	ldi	r18, 0xDB	; 219
    16b8:	3f e0       	ldi	r19, 0x0F	; 15
    16ba:	49 e4       	ldi	r20, 0x49	; 73
    16bc:	50 e4       	ldi	r21, 0x40	; 64
    16be:	c8 01       	movw	r24, r16
    16c0:	b7 01       	movw	r22, r14
    16c2:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	44 e3       	ldi	r20, 0x34	; 52
    16cc:	53 e4       	ldi	r21, 0x43	; 67
    16ce:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    16d2:	0e 94 bf 1c 	call	0x397e	; 0x397e <cos>
    16d6:	69 83       	std	Y+1, r22	; 0x01
    16d8:	7a 83       	std	Y+2, r23	; 0x02
    16da:	8b 83       	std	Y+3, r24	; 0x03
    16dc:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
    16de:	29 85       	ldd	r18, Y+9	; 0x09
    16e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    16e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    16ee:	2b ed       	ldi	r18, 0xDB	; 219
    16f0:	3f e0       	ldi	r19, 0x0F	; 15
    16f2:	49 e4       	ldi	r20, 0x49	; 73
    16f4:	50 e4       	ldi	r21, 0x40	; 64
    16f6:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	44 e3       	ldi	r20, 0x34	; 52
    1700:	53 e4       	ldi	r21, 0x43	; 67
    1702:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1712:	0e 94 16 20 	call	0x402c	; 0x402c <sin>
    1716:	4b 01       	movw	r8, r22
    1718:	5c 01       	movw	r10, r24
    171a:	2d 81       	ldd	r18, Y+5	; 0x05
    171c:	3e 81       	ldd	r19, Y+6	; 0x06
    171e:	4f 81       	ldd	r20, Y+7	; 0x07
    1720:	58 85       	ldd	r21, Y+8	; 0x08
    1722:	ca 01       	movw	r24, r20
    1724:	b9 01       	movw	r22, r18
    1726:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    172a:	6b 01       	movw	r12, r22
    172c:	7c 01       	movw	r14, r24
    172e:	29 81       	ldd	r18, Y+1	; 0x01
    1730:	3a 81       	ldd	r19, Y+2	; 0x02
    1732:	4b 81       	ldd	r20, Y+3	; 0x03
    1734:	5c 81       	ldd	r21, Y+4	; 0x04
    1736:	c3 01       	movw	r24, r6
    1738:	b2 01       	movw	r22, r4
    173a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    173e:	a5 01       	movw	r20, r10
    1740:	94 01       	movw	r18, r8
    1742:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1746:	a5 01       	movw	r20, r10
    1748:	94 01       	movw	r18, r8
    174a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    174e:	9b 01       	movw	r18, r22
    1750:	ac 01       	movw	r20, r24
    1752:	c7 01       	movw	r24, r14
    1754:	b6 01       	movw	r22, r12
    1756:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    175a:	6b 01       	movw	r12, r22
    175c:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
    175e:	76 2f       	mov	r23, r22
    1760:	27 2f       	mov	r18, r23
    1762:	3d 2d       	mov	r19, r13
    1764:	4e 2d       	mov	r20, r14
    1766:	5f 2d       	mov	r21, r15
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	80 e8       	ldi	r24, 0x80	; 128
    176e:	9f e3       	ldi	r25, 0x3F	; 63
    1770:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <__subsf3>
    1774:	0e 94 20 20 	call	0x4040	; 0x4040 <sqrt>
    1778:	9b 01       	movw	r18, r22
    177a:	ac 01       	movw	r20, r24
    177c:	6c 2d       	mov	r22, r12
    177e:	7d 2d       	mov	r23, r13
    1780:	8e 2d       	mov	r24, r14
    1782:	9f 2d       	mov	r25, r15
    1784:	2d 87       	std	Y+13, r18	; 0x0d
    1786:	3e 87       	std	Y+14, r19	; 0x0e
    1788:	4f 87       	std	Y+15, r20	; 0x0f
    178a:	58 8b       	std	Y+16, r21	; 0x10
    178c:	0e 94 20 20 	call	0x4040	; 0x4040 <sqrt>
    1790:	2d 85       	ldd	r18, Y+13	; 0x0d
    1792:	3e 85       	ldd	r19, Y+14	; 0x0e
    1794:	4f 85       	ldd	r20, Y+15	; 0x0f
    1796:	58 89       	ldd	r21, Y+16	; 0x10
    1798:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <atan2>
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    double distance = R*c;
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	38 e1       	ldi	r19, 0x18	; 24
    17a8:	47 ec       	ldi	r20, 0xC7	; 199
    17aa:	55 e4       	ldi	r21, 0x45	; 69
    17ac:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>

    return (float)distance;
}
    17b0:	60 96       	adiw	r28, 0x10	; 16
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	08 95       	ret

000017de <my_distance_to_station>:
    return fm_stations->nearest_stations[0][0];
}

//find the distance from the user to a particular station
float my_distance_to_station(GPS_DATA * gps_data, STATION *all_stations, int station_index)
{
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
    17ee:	ec e1       	ldi	r30, 0x1C	; 28
    17f0:	e4 9f       	mul	r30, r20
    17f2:	90 01       	movw	r18, r0
    17f4:	e5 9f       	mul	r30, r21
    17f6:	30 0d       	add	r19, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	62 0f       	add	r22, r18
    17fc:	73 1f       	adc	r23, r19
    17fe:	fb 01       	movw	r30, r22
    1800:	a0 88       	ldd	r10, Z+16	; 0x10
    1802:	b1 88       	ldd	r11, Z+17	; 0x11
    1804:	c2 88       	ldd	r12, Z+18	; 0x12
    1806:	d3 88       	ldd	r13, Z+19	; 0x13
    1808:	e4 84       	ldd	r14, Z+12	; 0x0c
    180a:	f5 84       	ldd	r15, Z+13	; 0x0d
    180c:	06 85       	ldd	r16, Z+14	; 0x0e
    180e:	17 85       	ldd	r17, Z+15	; 0x0f
    1810:	fc 01       	movw	r30, r24
    1812:	25 89       	ldd	r18, Z+21	; 0x15
    1814:	36 89       	ldd	r19, Z+22	; 0x16
    1816:	47 89       	ldd	r20, Z+23	; 0x17
    1818:	50 8d       	ldd	r21, Z+24	; 0x18
    181a:	61 89       	ldd	r22, Z+17	; 0x11
    181c:	72 89       	ldd	r23, Z+18	; 0x12
    181e:	83 89       	ldd	r24, Z+19	; 0x13
    1820:	94 89       	ldd	r25, Z+20	; 0x14
    1822:	0e 94 09 0b 	call	0x1612	; 0x1612 <earth_distance>
}
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	08 95       	ret

00001838 <get_nearest_stations>:

}

//find the closest station (index) to a lat/lon coordinate pair
int get_nearest_stations(DATABASE *fm_stations, float lat, float lon)
{
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	ac 97       	sbiw	r28, 0x2c	; 44
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	9c 8b       	std	Y+20, r25	; 0x14
    186e:	8b 8b       	std	Y+19, r24	; 0x13
    1870:	4d a3       	std	Y+37, r20	; 0x25
    1872:	5e a3       	std	Y+38, r21	; 0x26
    1874:	6f a3       	std	Y+39, r22	; 0x27
    1876:	78 a7       	std	Y+40, r23	; 0x28
    1878:	09 a7       	std	Y+41, r16	; 0x29
    187a:	1a a7       	std	Y+42, r17	; 0x2a
    187c:	2b a7       	std	Y+43, r18	; 0x2b
    187e:	3c a7       	std	Y+44, r19	; 0x2c
    int minIndices[3];

    //clear out nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1880:	2f ef       	ldi	r18, 0xFF	; 255
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	dc 01       	movw	r26, r24
    1886:	17 96       	adiw	r26, 0x07	; 7
    1888:	3c 93       	st	X, r19
    188a:	2e 93       	st	-X, r18
    188c:	16 97       	sbiw	r26, 0x06	; 6
        fm_stations->nearest_stations[i][1] = -1;
    188e:	19 96       	adiw	r26, 0x09	; 9
    1890:	3c 93       	st	X, r19
    1892:	2e 93       	st	-X, r18
    1894:	18 97       	sbiw	r26, 0x08	; 8
        minDistances[i] = -1;
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e8       	ldi	r26, 0x80	; 128
    189c:	bf eb       	ldi	r27, 0xBF	; 191
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	ab 83       	std	Y+3, r26	; 0x03
    18a4:	bc 83       	std	Y+4, r27	; 0x04
        minIndices[i] = -1;
    18a6:	3e 87       	std	Y+14, r19	; 0x0e
    18a8:	2d 87       	std	Y+13, r18	; 0x0d
    int minIndices[3];

    //clear out nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    18aa:	eb 89       	ldd	r30, Y+19	; 0x13
    18ac:	fc 89       	ldd	r31, Y+20	; 0x14
    18ae:	33 87       	std	Z+11, r19	; 0x0b
    18b0:	22 87       	std	Z+10, r18	; 0x0a
        fm_stations->nearest_stations[i][1] = -1;
    18b2:	35 87       	std	Z+13, r19	; 0x0d
    18b4:	24 87       	std	Z+12, r18	; 0x0c
        minDistances[i] = -1;
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	af 83       	std	Y+7, r26	; 0x07
    18bc:	b8 87       	std	Y+8, r27	; 0x08
        minIndices[i] = -1;
    18be:	38 8b       	std	Y+16, r19	; 0x10
    18c0:	2f 87       	std	Y+15, r18	; 0x0f
    int minIndices[3];

    //clear out nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    18c2:	37 87       	std	Z+15, r19	; 0x0f
    18c4:	26 87       	std	Z+14, r18	; 0x0e
        fm_stations->nearest_stations[i][1] = -1;
    18c6:	31 8b       	std	Z+17, r19	; 0x11
    18c8:	20 8b       	std	Z+16, r18	; 0x10
        minDistances[i] = -1;
    18ca:	89 87       	std	Y+9, r24	; 0x09
    18cc:	9a 87       	std	Y+10, r25	; 0x0a
    18ce:	ab 87       	std	Y+11, r26	; 0x0b
    18d0:	bc 87       	std	Y+12, r27	; 0x0c
        minIndices[i] = -1;
    }

    //compute earth distance to all stations --> remember top 3 min distances
    for (i=0; i<fm_stations->num_stations; i++)
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	9c a3       	std	Y+36, r25	; 0x24
    18d8:	8b a3       	std	Y+35, r24	; 0x23
    18da:	1d 8a       	std	Y+21, r1	; 0x15
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	9e 8b       	std	Y+22, r25	; 0x16
    18e0:	ab 81       	ldd	r26, Y+3	; 0x03
    18e2:	af 8b       	std	Y+23, r26	; 0x17
    18e4:	bc 81       	ldd	r27, Y+4	; 0x04
    18e6:	b8 8f       	std	Y+24, r27	; 0x18
    18e8:	91 2c       	mov	r9, r1
    18ea:	8e 80       	ldd	r8, Y+6	; 0x06
    18ec:	3f 80       	ldd	r3, Y+7	; 0x07
    18ee:	28 84       	ldd	r2, Y+8	; 0x08
    18f0:	1d 8e       	std	Y+29, r1	; 0x1d
    18f2:	ea 85       	ldd	r30, Y+10	; 0x0a
    18f4:	ee 8f       	std	Y+30, r30	; 0x1e
    18f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    18f8:	ff 8f       	std	Y+31, r31	; 0x1f
    18fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    18fc:	88 a3       	std	Y+32, r24	; 0x20
    18fe:	62 2e       	mov	r6, r18
    1900:	78 88       	ldd	r7, Y+16	; 0x10
    1902:	2b 8f       	std	Y+27, r18	; 0x1b
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	9c 8f       	std	Y+28, r25	; 0x1c
    1908:	1a a2       	std	Y+34, r1	; 0x22
    190a:	19 a2       	std	Y+33, r1	; 0x21
    190c:	af ef       	ldi	r26, 0xFF	; 255
    190e:	bf ef       	ldi	r27, 0xFF	; 255
    1910:	ba 8f       	std	Y+26, r27	; 0x1a
    1912:	a9 8f       	std	Y+25, r26	; 0x19
    1914:	41 2c       	mov	r4, r1
    1916:	51 2c       	mov	r5, r1
    1918:	bc c0       	rjmp	.+376    	; 0x1a92 <get_nearest_stations+0x25a>
    {
        float temp = earth_distance(lat, lon, fm_stations->all_stations[i].lat, fm_stations->all_stations[i].lon);
    191a:	ab 89       	ldd	r26, Y+19	; 0x13
    191c:	bc 89       	ldd	r27, Y+20	; 0x14
    191e:	ed 91       	ld	r30, X+
    1920:	fc 91       	ld	r31, X
    1922:	29 a1       	ldd	r18, Y+33	; 0x21
    1924:	3a a1       	ldd	r19, Y+34	; 0x22
    1926:	e2 0f       	add	r30, r18
    1928:	f3 1f       	adc	r31, r19
    192a:	a0 88       	ldd	r10, Z+16	; 0x10
    192c:	b1 88       	ldd	r11, Z+17	; 0x11
    192e:	c2 88       	ldd	r12, Z+18	; 0x12
    1930:	d3 88       	ldd	r13, Z+19	; 0x13
    1932:	e4 84       	ldd	r14, Z+12	; 0x0c
    1934:	f5 84       	ldd	r15, Z+13	; 0x0d
    1936:	06 85       	ldd	r16, Z+14	; 0x0e
    1938:	17 85       	ldd	r17, Z+15	; 0x0f
    193a:	29 a5       	ldd	r18, Y+41	; 0x29
    193c:	3a a5       	ldd	r19, Y+42	; 0x2a
    193e:	4b a5       	ldd	r20, Y+43	; 0x2b
    1940:	5c a5       	ldd	r21, Y+44	; 0x2c
    1942:	6d a1       	ldd	r22, Y+37	; 0x25
    1944:	7e a1       	ldd	r23, Y+38	; 0x26
    1946:	8f a1       	ldd	r24, Y+39	; 0x27
    1948:	98 a5       	ldd	r25, Y+40	; 0x28
    194a:	0e 94 09 0b 	call	0x1612	; 0x1612 <earth_distance>
    194e:	7b 01       	movw	r14, r22
    1950:	8c 01       	movw	r16, r24

        if ((temp < minDistances[0])||(minDistances[0]==-1))
    1952:	7d 89       	ldd	r23, Y+21	; 0x15
    1954:	6e 89       	ldd	r22, Y+22	; 0x16
    1956:	9f 89       	ldd	r25, Y+23	; 0x17
    1958:	88 8d       	ldd	r24, Y+24	; 0x18
    195a:	27 2f       	mov	r18, r23
    195c:	36 2f       	mov	r19, r22
    195e:	49 2f       	mov	r20, r25
    1960:	58 2f       	mov	r21, r24
    1962:	6e 2d       	mov	r22, r14
    1964:	7f 2d       	mov	r23, r15
    1966:	80 2f       	mov	r24, r16
    1968:	91 2f       	mov	r25, r17
    196a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    196e:	87 fd       	sbrc	r24, 7
    1970:	5c c0       	rjmp	.+184    	; 0x1a2a <get_nearest_stations+0x1f2>
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f eb       	ldi	r21, 0xBF	; 191
    197a:	bd 89       	ldd	r27, Y+21	; 0x15
    197c:	ae 89       	ldd	r26, Y+22	; 0x16
    197e:	ff 89       	ldd	r31, Y+23	; 0x17
    1980:	e8 8d       	ldd	r30, Y+24	; 0x18
    1982:	6b 2f       	mov	r22, r27
    1984:	7a 2f       	mov	r23, r26
    1986:	8f 2f       	mov	r24, r31
    1988:	9e 2f       	mov	r25, r30
    198a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <get_nearest_stations+0x15c>
    1992:	4b c0       	rjmp	.+150    	; 0x1a2a <get_nearest_stations+0x1f2>
        	minIndices[2] = minIndices[1];
        	minDistances[1] = minDistances[0];
        	minIndices[1] = minIndices[0];
        	minDistances[0] = temp;
        	minIndices[0] = i;
        } else if ((temp < minDistances[1])||(minDistances[1]==-1))
    1994:	b4 01       	movw	r22, r8
    1996:	c1 01       	movw	r24, r2
    1998:	27 2f       	mov	r18, r23
    199a:	38 2d       	mov	r19, r8
    199c:	49 2f       	mov	r20, r25
    199e:	52 2d       	mov	r21, r2
    19a0:	6e 2d       	mov	r22, r14
    19a2:	7f 2d       	mov	r23, r15
    19a4:	80 2f       	mov	r24, r16
    19a6:	91 2f       	mov	r25, r17
    19a8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    19ac:	87 fd       	sbrc	r24, 7
    19ae:	4e c0       	rjmp	.+156    	; 0x1a4c <get_nearest_stations+0x214>
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f eb       	ldi	r21, 0xBF	; 191
    19b8:	d4 01       	movw	r26, r8
    19ba:	f1 01       	movw	r30, r2
    19bc:	6b 2f       	mov	r22, r27
    19be:	78 2d       	mov	r23, r8
    19c0:	8f 2f       	mov	r24, r31
    19c2:	92 2d       	mov	r25, r2
    19c4:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <get_nearest_stations+0x196>
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <get_nearest_stations+0x214>
        {
        	minDistances[2] = minDistances[1];
        	minIndices[2] = minIndices[1];
        	minDistances[1] = temp;
        	minIndices[1] = i;
        } else if ((temp < minDistances[2])||(minDistances[2]==-1))
    19ce:	7d 8d       	ldd	r23, Y+29	; 0x1d
    19d0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    19d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19d4:	88 a1       	ldd	r24, Y+32	; 0x20
    19d6:	27 2f       	mov	r18, r23
    19d8:	36 2f       	mov	r19, r22
    19da:	49 2f       	mov	r20, r25
    19dc:	58 2f       	mov	r21, r24
    19de:	6e 2d       	mov	r22, r14
    19e0:	7f 2d       	mov	r23, r15
    19e2:	80 2f       	mov	r24, r16
    19e4:	91 2f       	mov	r25, r17
    19e6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    19ea:	87 fd       	sbrc	r24, 7
    19ec:	10 c0       	rjmp	.+32     	; 0x1a0e <get_nearest_stations+0x1d6>
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f eb       	ldi	r21, 0xBF	; 191
    19f6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    19f8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    19fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    19fc:	e8 a1       	ldd	r30, Y+32	; 0x20
    19fe:	6b 2f       	mov	r22, r27
    1a00:	7a 2f       	mov	r23, r26
    1a02:	8f 2f       	mov	r24, r31
    1a04:	9e 2f       	mov	r25, r30
    1a06:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	22 c0       	rjmp	.+68     	; 0x1a52 <get_nearest_stations+0x21a>
    1a0e:	96 2d       	mov	r25, r6
    1a10:	87 2d       	mov	r24, r7
    1a12:	32 01       	movw	r6, r4
    1a14:	5e 2d       	mov	r21, r14
    1a16:	4f 2d       	mov	r20, r15
    1a18:	30 2f       	mov	r19, r16
    1a1a:	21 2f       	mov	r18, r17
    1a1c:	e9 2c       	mov	r14, r9
    1a1e:	f8 2c       	mov	r15, r8
    1a20:	03 2d       	mov	r16, r3
    1a22:	12 2d       	mov	r17, r2
        {
        	minDistances[2] = temp;
    1a24:	4a 01       	movw	r8, r20
    1a26:	19 01       	movw	r2, r18
    1a28:	20 c0       	rjmp	.+64     	; 0x1a6a <get_nearest_stations+0x232>
        if ((temp < minDistances[0])||(minDistances[0]==-1))
        {
        	minDistances[2] = minDistances[1];
        	minIndices[2] = minIndices[1];
        	minDistances[1] = minDistances[0];
        	minIndices[1] = minIndices[0];
    1a2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    //compute earth distance to all stations --> remember top 3 min distances
    for (i=0; i<fm_stations->num_stations; i++)
    {
        float temp = earth_distance(lat, lon, fm_stations->all_stations[i].lat, fm_stations->all_stations[i].lon);

        if ((temp < minDistances[0])||(minDistances[0]==-1))
    1a2e:	4b 8e       	std	Y+27, r4	; 0x1b
    1a30:	5c 8e       	std	Y+28, r5	; 0x1c
    1a32:	5d 89       	ldd	r21, Y+21	; 0x15
    1a34:	4e 89       	ldd	r20, Y+22	; 0x16
    1a36:	3f 89       	ldd	r19, Y+23	; 0x17
    1a38:	28 8d       	ldd	r18, Y+24	; 0x18
        {
        	minDistances[2] = minDistances[1];
        	minIndices[2] = minIndices[1];
        	minDistances[1] = minDistances[0];
        	minIndices[1] = minIndices[0];
        	minDistances[0] = temp;
    1a3a:	ed 8a       	std	Y+21, r14	; 0x15
    1a3c:	fe 8a       	std	Y+22, r15	; 0x16
    1a3e:	0f 8b       	std	Y+23, r16	; 0x17
    1a40:	18 8f       	std	Y+24, r17	; 0x18

        if ((temp < minDistances[0])||(minDistances[0]==-1))
        {
        	minDistances[2] = minDistances[1];
        	minIndices[2] = minIndices[1];
        	minDistances[1] = minDistances[0];
    1a42:	e5 2e       	mov	r14, r21
    1a44:	f4 2e       	mov	r15, r20
    1a46:	03 2f       	mov	r16, r19
    1a48:	12 2f       	mov	r17, r18
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <get_nearest_stations+0x232>
        	minIndices[1] = minIndices[0];
        	minDistances[0] = temp;
        	minIndices[0] = i;
        } else if ((temp < minDistances[1])||(minDistances[1]==-1))
    1a4c:	94 2d       	mov	r25, r4
    1a4e:	85 2d       	mov	r24, r5
    1a50:	0c c0       	rjmp	.+24     	; 0x1a6a <get_nearest_stations+0x232>
        {
        	minDistances[2] = minDistances[1];
        	minIndices[2] = minIndices[1];
        	minDistances[1] = temp;
        	minIndices[1] = i;
        } else if ((temp < minDistances[2])||(minDistances[2]==-1))
    1a52:	96 2d       	mov	r25, r6
    1a54:	87 2d       	mov	r24, r7
    1a56:	69 8c       	ldd	r6, Y+25	; 0x19
    1a58:	7a 8c       	ldd	r7, Y+26	; 0x1a
    1a5a:	e9 2c       	mov	r14, r9
    1a5c:	f8 2c       	mov	r15, r8
    1a5e:	03 2d       	mov	r16, r3
    1a60:	12 2d       	mov	r17, r2
    1a62:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1a64:	8e 8c       	ldd	r8, Y+30	; 0x1e
    1a66:	3f 8c       	ldd	r3, Y+31	; 0x1f
    1a68:	28 a0       	ldd	r2, Y+32	; 0x20
        minDistances[i] = -1;
        minIndices[i] = -1;
    }

    //compute earth distance to all stations --> remember top 3 min distances
    for (i=0; i<fm_stations->num_stations; i++)
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	43 1a       	sub	r4, r19
    1a6e:	53 0a       	sbc	r5, r19
    1a70:	a9 a1       	ldd	r26, Y+33	; 0x21
    1a72:	ba a1       	ldd	r27, Y+34	; 0x22
    1a74:	5c 96       	adiw	r26, 0x1c	; 28
    1a76:	ba a3       	std	Y+34, r27	; 0x22
    1a78:	a9 a3       	std	Y+33, r26	; 0x21
    1a7a:	69 8e       	std	Y+25, r6	; 0x19
    1a7c:	7a 8e       	std	Y+26, r7	; 0x1a
    1a7e:	69 2e       	mov	r6, r25
    1a80:	78 2e       	mov	r7, r24
    1a82:	9d 8e       	std	Y+29, r9	; 0x1d
    1a84:	8e 8e       	std	Y+30, r8	; 0x1e
    1a86:	3f 8e       	std	Y+31, r3	; 0x1f
    1a88:	28 a2       	std	Y+32, r2	; 0x20
    1a8a:	9e 2c       	mov	r9, r14
    1a8c:	8f 2c       	mov	r8, r15
    1a8e:	30 2e       	mov	r3, r16
    1a90:	21 2e       	mov	r2, r17
    1a92:	eb a1       	ldd	r30, Y+35	; 0x23
    1a94:	fc a1       	ldd	r31, Y+36	; 0x24
    1a96:	4e 16       	cp	r4, r30
    1a98:	5f 06       	cpc	r5, r31
    1a9a:	0c f4       	brge	.+2      	; 0x1a9e <get_nearest_stations+0x266>
    1a9c:	3e cf       	rjmp	.-388    	; 0x191a <get_nearest_stations+0xe2>
    1a9e:	5d 89       	ldd	r21, Y+21	; 0x15
    1aa0:	4e 89       	ldd	r20, Y+22	; 0x16
    1aa2:	3f 89       	ldd	r19, Y+23	; 0x17
    1aa4:	28 8d       	ldd	r18, Y+24	; 0x18
    1aa6:	85 2f       	mov	r24, r21
    1aa8:	94 2f       	mov	r25, r20
    1aaa:	a3 2f       	mov	r26, r19
    1aac:	b2 2f       	mov	r27, r18
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	ab 83       	std	Y+3, r26	; 0x03
    1ab4:	bc 83       	std	Y+4, r27	; 0x04
    1ab6:	a4 01       	movw	r20, r8
    1ab8:	91 01       	movw	r18, r2
    1aba:	85 2f       	mov	r24, r21
    1abc:	98 2d       	mov	r25, r8
    1abe:	a3 2f       	mov	r26, r19
    1ac0:	b2 2d       	mov	r27, r2
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	af 83       	std	Y+7, r26	; 0x07
    1ac8:	b8 87       	std	Y+8, r27	; 0x08
    1aca:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1acc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1ace:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1ad0:	28 a1       	ldd	r18, Y+32	; 0x20
    1ad2:	85 2f       	mov	r24, r21
    1ad4:	94 2f       	mov	r25, r20
    1ad6:	a3 2f       	mov	r26, r19
    1ad8:	b2 2f       	mov	r27, r18
    1ada:	89 87       	std	Y+9, r24	; 0x09
    1adc:	9a 87       	std	Y+10, r25	; 0x0a
    1ade:	ab 87       	std	Y+11, r26	; 0x0b
    1ae0:	bc 87       	std	Y+12, r27	; 0x0c
    1ae2:	6f 86       	std	Y+15, r6	; 0x0f
    1ae4:	78 8a       	std	Y+16, r7	; 0x10
    1ae6:	29 8d       	ldd	r18, Y+25	; 0x19
    1ae8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1aea:	3a 8b       	std	Y+18, r19	; 0x12
    1aec:	29 8b       	std	Y+17, r18	; 0x11
    1aee:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1af0:	3d 87       	std	Y+13, r19	; 0x0d
    1af2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1af4:	8e 87       	std	Y+14, r24	; 0x0e
    1af6:	7e 01       	movw	r14, r28
    1af8:	9d e0       	ldi	r25, 0x0D	; 13
    1afa:	e9 0e       	add	r14, r25
    1afc:	f1 1c       	adc	r15, r1
    1afe:	0b 89       	ldd	r16, Y+19	; 0x13
    1b00:	1c 89       	ldd	r17, Y+20	; 0x14
    1b02:	88 24       	eor	r8, r8
    1b04:	83 94       	inc	r8
    1b06:	91 2c       	mov	r9, r1
    1b08:	8c 0e       	add	r8, r28
    1b0a:	9d 1e       	adc	r9, r29
	}

}

//find the closest station (index) to a lat/lon coordinate pair
int get_nearest_stations(DATABASE *fm_stations, float lat, float lon)
    1b0c:	3e 01       	movw	r6, r28
    1b0e:	a3 e1       	ldi	r26, 0x13	; 19
    1b10:	6a 0e       	add	r6, r26
    1b12:	71 1c       	adc	r7, r1
        }
    }

    for (i=0; i<NUM_NEAREST; i++)
    {
    	fm_stations->nearest_stations[i][0] = minIndices[i];
    1b14:	f7 01       	movw	r30, r14
    1b16:	81 91       	ld	r24, Z+
    1b18:	91 91       	ld	r25, Z+
    1b1a:	7f 01       	movw	r14, r30
    1b1c:	d8 01       	movw	r26, r16
    1b1e:	17 96       	adiw	r26, 0x07	; 7
    1b20:	9c 93       	st	X, r25
    1b22:	8e 93       	st	-X, r24
    1b24:	16 97       	sbiw	r26, 0x06	; 6
        fm_stations->nearest_stations[i][1] = (int)minDistances[i];
    1b26:	f4 01       	movw	r30, r8
    1b28:	61 91       	ld	r22, Z+
    1b2a:	71 91       	ld	r23, Z+
    1b2c:	81 91       	ld	r24, Z+
    1b2e:	91 91       	ld	r25, Z+
    1b30:	4f 01       	movw	r8, r30
    1b32:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
    1b36:	d8 01       	movw	r26, r16
    1b38:	19 96       	adiw	r26, 0x09	; 9
    1b3a:	7c 93       	st	X, r23
    1b3c:	6e 93       	st	-X, r22
    1b3e:	18 97       	sbiw	r26, 0x08	; 8
    1b40:	0c 5f       	subi	r16, 0xFC	; 252
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
        	minDistances[2] = temp;
        	minIndices[2] = i;
        }
    }

    for (i=0; i<NUM_NEAREST; i++)
    1b44:	e6 14       	cp	r14, r6
    1b46:	f7 04       	cpc	r15, r7
    1b48:	29 f7       	brne	.-54     	; 0x1b14 <get_nearest_stations+0x2dc>
        fm_stations->nearest_stations[i][1] = (int)minDistances[i];
    }

    //return closest station index
    return fm_stations->nearest_stations[0][0];
}
    1b4a:	eb 89       	ldd	r30, Y+19	; 0x13
    1b4c:	fc 89       	ldd	r31, Y+20	; 0x14
    1b4e:	86 81       	ldd	r24, Z+6	; 0x06
    1b50:	97 81       	ldd	r25, Z+7	; 0x07
    1b52:	ac 96       	adiw	r28, 0x2c	; 44
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	bf 90       	pop	r11
    1b70:	af 90       	pop	r10
    1b72:	9f 90       	pop	r9
    1b74:	8f 90       	pop	r8
    1b76:	7f 90       	pop	r7
    1b78:	6f 90       	pop	r6
    1b7a:	5f 90       	pop	r5
    1b7c:	4f 90       	pop	r4
    1b7e:	3f 90       	pop	r3
    1b80:	2f 90       	pop	r2
    1b82:	08 95       	ret

00001b84 <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1b84:	2b ed       	ldi	r18, 0xDB	; 219
    1b86:	3f e0       	ldi	r19, 0x0F	; 15
    1b88:	49 e4       	ldi	r20, 0x49	; 73
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	44 e3       	ldi	r20, 0x34	; 52
    1b96:	53 e4       	ldi	r21, 0x43	; 67
    1b98:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
}
    1b9c:	08 95       	ret

00001b9e <to_degrees>:

//convert an angle from radians to degrees
double to_degrees(double radian_angle)
{
	return 180*radian_angle/(M_PI);
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	44 e3       	ldi	r20, 0x34	; 52
    1ba4:	53 e4       	ldi	r21, 0x43	; 67
    1ba6:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    1baa:	2b ed       	ldi	r18, 0xDB	; 219
    1bac:	3f e0       	ldi	r19, 0x0F	; 15
    1bae:	49 e4       	ldi	r20, 0x49	; 73
    1bb0:	50 e4       	ldi	r21, 0x40	; 64
    1bb2:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__divsf3>
}
    1bb6:	08 95       	ret

00001bb8 <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
{
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	ec 01       	movw	r28, r24
    1bc6:	fc 01       	movw	r30, r24
    int i;

    //message param should not contain nulls
    for (i=0; i<4; i++)
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (gps_data->msg_type[i]=='\0')
    1bcc:	21 91       	ld	r18, Z+
    1bce:	22 23       	and	r18, r18
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <gps_locked+0x1c>
    1bd2:	45 c0       	rjmp	.+138    	; 0x1c5e <gps_locked+0xa6>
int gps_locked(GPS_DATA *gps_data)
{
    int i;

    //message param should not contain nulls
    for (i=0; i<4; i++)
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	84 30       	cpi	r24, 0x04	; 4
    1bd8:	91 05       	cpc	r25, r1
    1bda:	c1 f7       	brne	.-16     	; 0x1bcc <gps_locked+0x14>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
{
	return 180*radian_angle/(M_PI);
}

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
    1be0:	fe 01       	movw	r30, r28
    1be2:	e8 0f       	add	r30, r24
    1be4:	f9 1f       	adc	r31, r25
    }

    //time param should not contain nulls
    for (i=0; i<4; i++)
    {
        if (gps_data->utc_time[i]=='\0')
    1be6:	20 85       	ldd	r18, Z+8	; 0x08
    1be8:	22 23       	and	r18, r18
    1bea:	c9 f1       	breq	.+114    	; 0x1c5e <gps_locked+0xa6>
        if (gps_data->msg_type[i]=='\0')
            return 0;
    }

    //time param should not contain nulls
    for (i=0; i<4; i++)
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	b1 f7       	brne	.-20     	; 0x1be0 <gps_locked+0x28>
        if (gps_data->utc_time[i]=='\0')
            return 0;
    }

    //lat and lon should not be 0,0
    if ((gps_data->lat==0)||(gps_data->lon==0))
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	69 89       	ldd	r22, Y+17	; 0x11
    1bfc:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	51 f1       	breq	.+84     	; 0x1c5e <gps_locked+0xa6>
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	a9 01       	movw	r20, r18
    1c10:	6d 89       	ldd	r22, Y+21	; 0x15
    1c12:	7e 89       	ldd	r23, Y+22	; 0x16
    1c14:	8f 89       	ldd	r24, Y+23	; 0x17
    1c16:	98 8d       	ldd	r25, Y+24	; 0x18
    1c18:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	f9 f0       	breq	.+62     	; 0x1c5e <gps_locked+0xa6>
        return 0;

    //checksum should exist
    if (gps_data->checksum[0] != '*')
    1c20:	8a a9       	ldd	r24, Y+50	; 0x32
    1c22:	8a 32       	cpi	r24, 0x2A	; 42
    1c24:	e1 f4       	brne	.+56     	; 0x1c5e <gps_locked+0xa6>
        return 0;

    //course should be between 0 and 360
    if ((gps_data->course < 0)||(gps_data->course>=360))
    1c26:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1c28:	de 8c       	ldd	r13, Y+30	; 0x1e
    1c2a:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1c2c:	f8 a0       	ldd	r15, Y+32	; 0x20
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	a9 01       	movw	r20, r18
    1c34:	c7 01       	movw	r24, r14
    1c36:	b6 01       	movw	r22, r12
    1c38:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    1c3c:	87 fd       	sbrc	r24, 7
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <gps_locked+0xa6>
    1c40:	c1 e0       	ldi	r28, 0x01	; 1
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	44 eb       	ldi	r20, 0xB4	; 180
    1c48:	53 e4       	ldi	r21, 0x43	; 67
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	b6 01       	movw	r22, r12
    1c4e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__gesf2>
    1c52:	87 fd       	sbrc	r24, 7
    1c54:	c0 e0       	ldi	r28, 0x00	; 0
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	2c 27       	eor	r18, r28

    //message param should not contain nulls
    for (i=0; i<4; i++)
    {
        if (gps_data->msg_type[i]=='\0')
            return 0;
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <gps_locked+0xaa>
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    if ((gps_data->course < 0)||(gps_data->course>=360))
    	return 0;

    return 1;

    1c62:	c9 01       	movw	r24, r18
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	df 90       	pop	r13
    1c6e:	cf 90       	pop	r12
    1c70:	08 95       	ret

00001c72 <my_eeprom_read_int>:
#include "lcd.h"

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1c72:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__eerd_byte_m1284p>
    return (temp_num);
}
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	08 95       	ret

00001c7a <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    1c7a:	0c 94 09 26 	jmp	0x4c12	; 0x4c12 <__eerd_byte_m1284p>

00001c7e <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1c7e:	0c 94 11 26 	jmp	0x4c22	; 0x4c22 <__eerd_dword_m1284p>

00001c82 <my_eeprom_read_string>:
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    1c82:	0c 94 f9 25 	jmp	0x4bf2	; 0x4bf2 <__eerd_block_m1284p>

00001c86 <database_load>:
}

//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	ec 01       	movw	r28, r24
#include "lcd.h"

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 09 26 	call	0x4c12	; 0x4c12 <__eerd_byte_m1284p>
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
    1ca2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	19 f0       	breq	.+6      	; 0x1cae <database_load+0x28>
//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);
    1ca8:	9b 83       	std	Y+3, r25	; 0x03
    1caa:	8a 83       	std	Y+2, r24	; 0x02
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <database_load+0x2c>

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
        fm_stations->num_stations = 0;
    1cae:	1b 82       	std	Y+3, r1	; 0x03
    1cb0:	1a 82       	std	Y+2, r1	; 0x02

    fm_stations->nearest_station = -1;
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	9d 83       	std	Y+5, r25	; 0x05
    1cb8:	8c 83       	std	Y+4, r24	; 0x04

    //initialize nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1cba:	9f 83       	std	Y+7, r25	; 0x07
    1cbc:	8e 83       	std	Y+6, r24	; 0x06
        fm_stations->nearest_stations[i][1] = -1;
    1cbe:	99 87       	std	Y+9, r25	; 0x09
    1cc0:	88 87       	std	Y+8, r24	; 0x08
    fm_stations->nearest_station = -1;

    //initialize nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1cc2:	9b 87       	std	Y+11, r25	; 0x0b
    1cc4:	8a 87       	std	Y+10, r24	; 0x0a
        fm_stations->nearest_stations[i][1] = -1;
    1cc6:	9d 87       	std	Y+13, r25	; 0x0d
    1cc8:	8c 87       	std	Y+12, r24	; 0x0c
    fm_stations->nearest_station = -1;

    //initialize nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1cca:	9f 87       	std	Y+15, r25	; 0x0f
    1ccc:	8e 87       	std	Y+14, r24	; 0x0e
        fm_stations->nearest_stations[i][1] = -1;
    1cce:	99 8b       	std	Y+17, r25	; 0x11
    1cd0:	88 8b       	std	Y+16, r24	; 0x10
    1cd2:	2f e9       	ldi	r18, 0x9F	; 159
    1cd4:	46 e8       	ldi	r20, 0x86	; 134
    1cd6:	51 e0       	ldi	r21, 0x01	; 1
    1cd8:	21 50       	subi	r18, 0x01	; 1
    1cda:	40 40       	sbci	r20, 0x00	; 0
    1cdc:	50 40       	sbci	r21, 0x00	; 0
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <database_load+0x52>
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <database_load+0x5c>
    1ce2:	00 00       	nop
    }

    _delay_ms(500);
    lcd_init();
    1ce4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("importing ");
    1ce8:	8a e2       	ldi	r24, 0x2A	; 42
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_int(fm_stations->num_stations,3);
    1cf0:	63 e0       	ldi	r22, 0x03	; 3
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    string_write("\nstations...");
    1cfc:	85 e3       	ldi	r24, 0x35	; 53
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //allocate memory for all the station structures
    fm_stations->all_stations = (STATION *)malloc(fm_stations->num_stations*sizeof(STATION));
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	9b 81       	ldd	r25, Y+3	; 0x03
    1d08:	2c e1       	ldi	r18, 0x1C	; 28
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	2e 9f       	mul	r18, r30
    1d0e:	c0 01       	movw	r24, r0
    1d10:	2f 9f       	mul	r18, r31
    1d12:	90 0d       	add	r25, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <malloc>
    1d1a:	99 83       	std	Y+1, r25	; 0x01
    1d1c:	88 83       	st	Y, r24
    if (fm_stations->all_stations == NULL)
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <database_load+0x9e>
    1d22:	4b c0       	rjmp	.+150    	; 0x1dba <database_load+0x134>
    {
            lcd_init();
    1d24:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
            string_write("bad malloc");
    1d28:	8f e2       	ldi	r24, 0x2F	; 47
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            //database failed to load
            return 0;
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4e c0       	rjmp	.+156    	; 0x1dd2 <database_load+0x14c>
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
}

//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
    1d36:	b8 01       	movw	r22, r16
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
    1d3c:	88 81       	ld	r24, Y
    1d3e:	99 81       	ldd	r25, Y+1	; 0x01
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    1d40:	48 e0       	ldi	r20, 0x08	; 8
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	80 0f       	add	r24, r16
    1d46:	91 1f       	adc	r25, r17
    1d48:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <__eerd_block_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    1d4c:	e8 80       	ld	r14, Y
    1d4e:	f9 80       	ldd	r15, Y+1	; 0x01
    1d50:	e0 0e       	add	r14, r16
    1d52:	f1 1e       	adc	r15, r17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d54:	c8 01       	movw	r24, r16
    1d56:	09 96       	adiw	r24, 0x09	; 9
    1d58:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__eerd_dword_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	60 87       	std	Z+8, r22	; 0x08
    1d60:	71 87       	std	Z+9, r23	; 0x09
    1d62:	82 87       	std	Z+10, r24	; 0x0a
    1d64:	93 87       	std	Z+11, r25	; 0x0b
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d66:	c8 01       	movw	r24, r16
    1d68:	0d 96       	adiw	r24, 0x0d	; 13
    1d6a:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__eerd_dword_m1284p>
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
    1d6e:	f7 01       	movw	r30, r14
    1d70:	64 87       	std	Z+12, r22	; 0x0c
    1d72:	75 87       	std	Z+13, r23	; 0x0d
    1d74:	86 87       	std	Z+14, r24	; 0x0e
    1d76:	97 87       	std	Z+15, r25	; 0x0f
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d78:	c8 01       	movw	r24, r16
    1d7a:	41 96       	adiw	r24, 0x11	; 17
    1d7c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
    1d80:	f7 01       	movw	r30, r14
    1d82:	60 8b       	std	Z+16, r22	; 0x10
    1d84:	71 8b       	std	Z+17, r23	; 0x11
    1d86:	82 8b       	std	Z+18, r24	; 0x12
    1d88:	93 8b       	std	Z+19, r25	; 0x13
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	45 96       	adiw	r24, 0x15	; 21
    1d8e:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
    1d92:	f7 01       	movw	r30, r14
    1d94:	64 8b       	std	Z+20, r22	; 0x14
    1d96:	75 8b       	std	Z+21, r23	; 0x15
    1d98:	86 8b       	std	Z+22, r24	; 0x16
    1d9a:	97 8b       	std	Z+23, r25	; 0x17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	49 96       	adiw	r24, 0x19	; 25
    1da0:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__eerd_dword_m1284p>
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    1da4:	f7 01       	movw	r30, r14
    1da6:	60 8f       	std	Z+24, r22	; 0x18
    1da8:	71 8f       	std	Z+25, r23	; 0x19
    1daa:	82 8f       	std	Z+26, r24	; 0x1a
    1dac:	93 8f       	std	Z+27, r25	; 0x1b
            //database failed to load
            return 0;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    1dae:	ff ef       	ldi	r31, 0xFF	; 255
    1db0:	cf 1a       	sub	r12, r31
    1db2:	df 0a       	sbc	r13, r31
    1db4:	04 5e       	subi	r16, 0xE4	; 228
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <database_load+0x13c>
    string_write_int(fm_stations->num_stations,3);
    string_write("\nstations...");

    //allocate memory for all the station structures
    fm_stations->all_stations = (STATION *)malloc(fm_stations->num_stations*sizeof(STATION));
    if (fm_stations->all_stations == NULL)
    1dba:	00 e0       	ldi	r16, 0x00	; 0
    1dbc:	10 e0       	ldi	r17, 0x00	; 0
    1dbe:	c1 2c       	mov	r12, r1
    1dc0:	d1 2c       	mov	r13, r1
            //database failed to load
            return 0;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	c8 16       	cp	r12, r24
    1dc8:	d9 06       	cpc	r13, r25
    1dca:	0c f4       	brge	.+2      	; 0x1dce <database_load+0x148>
    1dcc:	b4 cf       	rjmp	.-152    	; 0x1d36 <database_load+0xb0>
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }

    //database loaded successfully
    return 1;
    1dce:	21 e0       	ldi	r18, 0x01	; 1
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
}
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	df 90       	pop	r13
    1de2:	cf 90       	pop	r12
    1de4:	08 95       	ret

00001de6 <database_free>:

//free the FM Stations database from program memory
int database_free(DATABASE *fm_stations)
{
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	ec 01       	movw	r28, r24

    free(fm_stations->all_stations);
    1dec:	88 81       	ld	r24, Y
    1dee:	99 81       	ldd	r25, Y+1	; 0x01
    1df0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <free>
    fm_stations->all_stations = NULL;
    1df4:	19 82       	std	Y+1, r1	; 0x01
    1df6:	18 82       	st	Y, r1

    return 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	08 95       	ret

00001e02 <sync_leds>:

//synchronize op mode LEDs
void sync_leds(volatile DEV_STATE *device)
{
    //light up the mode LEDs
    switch (device->op_mode)
    1e02:	fc 01       	movw	r30, r24
    1e04:	80 85       	ldd	r24, Z+8	; 0x08
    1e06:	91 85       	ldd	r25, Z+9	; 0x09
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	a9 f0       	breq	.+42     	; 0x1e38 <sync_leds+0x36>
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <sync_leds+0x18>
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	51 f0       	breq	.+20     	; 0x1e28 <sync_leds+0x26>
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	19 f5       	brne	.+70     	; 0x1e5e <sync_leds+0x5c>
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <sync_leds+0x2e>
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	a9 f0       	breq	.+42     	; 0x1e4a <sync_leds+0x48>
    1e20:	7c f0       	brlt	.+30     	; 0x1e40 <sync_leds+0x3e>
    1e22:	05 97       	sbiw	r24, 0x05	; 5
    1e24:	e1 f4       	brne	.+56     	; 0x1e5e <sync_leds+0x5c>
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <sync_leds+0x52>
    {
        case 0:
            PORTB |= 1<<PB0;
    1e28:	28 9a       	sbi	0x05, 0	; 5
            PORTB &= ~((1<<PB3)|(1<<PB1));
    1e2a:	85 b1       	in	r24, 0x05	; 5
    1e2c:	85 7f       	andi	r24, 0xF5	; 245
    1e2e:	19 c0       	rjmp	.+50     	; 0x1e62 <sync_leds+0x60>
        break;
        case 1:
            PORTB |= 1<<PB1;
    1e30:	29 9a       	sbi	0x05, 1	; 5
            PORTB &= ~((1<<PB3)|(1<<PB0));
    1e32:	85 b1       	in	r24, 0x05	; 5
    1e34:	86 7f       	andi	r24, 0xF6	; 246
    1e36:	15 c0       	rjmp	.+42     	; 0x1e62 <sync_leds+0x60>
        break;
        case 2:
            PORTB |= 1<<PB3;
    1e38:	2b 9a       	sbi	0x05, 3	; 5
            PORTB &= ~((1<<PB1)|(1<<PB0));
    1e3a:	85 b1       	in	r24, 0x05	; 5
    1e3c:	8c 7f       	andi	r24, 0xFC	; 252
    1e3e:	11 c0       	rjmp	.+34     	; 0x1e62 <sync_leds+0x60>
        break;
        case 3:
            PORTB |= ((1<<PB1)|(1<<PB0));
    1e40:	85 b1       	in	r24, 0x05	; 5
    1e42:	83 60       	ori	r24, 0x03	; 3
    1e44:	85 b9       	out	0x05, r24	; 5
            PORTB &= ~(1<<PB3);
    1e46:	2b 98       	cbi	0x05, 3	; 5
        break;
    1e48:	08 95       	ret
        case 4:
            PORTB |= ((1<<PB3)|(1<<PB1));
    1e4a:	85 b1       	in	r24, 0x05	; 5
    1e4c:	8a 60       	ori	r24, 0x0A	; 10
    1e4e:	85 b9       	out	0x05, r24	; 5
            PORTB &= ~(1<<PB0);
    1e50:	28 98       	cbi	0x05, 0	; 5
        break;
    1e52:	08 95       	ret
        case 5:
            PORTB |= ((1<<PB3)|(1<<PB0));
    1e54:	85 b1       	in	r24, 0x05	; 5
    1e56:	89 60       	ori	r24, 0x09	; 9
    1e58:	85 b9       	out	0x05, r24	; 5
            PORTB &= ~(1<<PB1);
    1e5a:	29 98       	cbi	0x05, 1	; 5
        break;
    1e5c:	08 95       	ret
        default:
            PORTB |= ((1<<PB3)|(1<<PB1)|(1<<PB0));
    1e5e:	85 b1       	in	r24, 0x05	; 5
    1e60:	8b 60       	ori	r24, 0x0B	; 11
    1e62:	85 b9       	out	0x05, r24	; 5
    1e64:	08 95       	ret

00001e66 <InitUSART>:

//Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
    1e66:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
    1e6a:	8c e0       	ldi	r24, 0x0C	; 12
    1e6c:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
    1e70:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
    1e74:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    1e78:	e9 ec       	ldi	r30, 0xC9	; 201
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 6d       	ori	r24, 0xD8	; 216
    1e80:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    1e82:	e1 ec       	ldi	r30, 0xC1	; 193
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	88 6d       	ori	r24, 0xD8	; 216
    1e8a:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
    1e8c:	e8 ec       	ldi	r30, 0xC8	; 200
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	82 60       	ori	r24, 0x02	; 2
    1e94:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
    1e96:	e0 ec       	ldi	r30, 0xC0	; 192
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	82 60       	ori	r24, 0x02	; 2
    1e9e:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
    1ea0:	ea ec       	ldi	r30, 0xCA	; 202
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	8e 60       	ori	r24, 0x0E	; 14
    1ea8:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    1eaa:	e2 ec       	ldi	r30, 0xC2	; 194
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	86 60       	ori	r24, 0x06	; 6
    1eb2:	80 83       	st	Z, r24
    1eb4:	08 95       	ret

00001eb6 <InitINT>:

//Set Up External Interrupt 2
void InitINT(void)
{
    //trigger external interrupt 2 on falling edge
    EICRA |= (1 << ISC21);
    1eb6:	e9 e6       	ldi	r30, 0x69	; 105
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 62       	ori	r24, 0x20	; 32
    1ebe:	80 83       	st	Z, r24
    EICRA &= ~(1<<ISC20);
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8f 7e       	andi	r24, 0xEF	; 239
    1ec4:	80 83       	st	Z, r24

    //enable external interrupt 2 
    EIMSK |= (1 << INT2);
    1ec6:	ea 9a       	sbi	0x1d, 2	; 29

    //set Port B Pin 2 as Input
    DDRB &= ~(1<<PB2);
    1ec8:	22 98       	cbi	0x04, 2	; 4
    //enable pull-up resistor
    PORTB |= (1<<PB2);
    1eca:	2a 9a       	sbi	0x05, 2	; 5

    //enable PB0, PB1, PB3 as Outputs
    DDRB |= ((1<<PB0)|(1<<PB1)|(1<<PB3));
    1ecc:	84 b1       	in	r24, 0x04	; 4
    1ece:	8b 60       	ori	r24, 0x0B	; 11
    1ed0:	84 b9       	out	0x04, r24	; 4

    //turn on the first LED
    PORTB |= (1<<PB0);
    1ed2:	28 9a       	sbi	0x05, 0	; 5


    //SET UP TIMER FOR DEBOUNCING

    //set normal output compare modes
    TCCR1A &= ~((1<<COM1A1)|(1<<COM1A0));
    1ed4:	e0 e8       	ldi	r30, 0x80	; 128
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 73       	andi	r24, 0x3F	; 63
    1edc:	80 83       	st	Z, r24
    
    //prescale the default clock by /1024
    TCCR1B |= ((1<<CS12)|(1<<CS10));
    1ede:	e1 e8       	ldi	r30, 0x81	; 129
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	85 60       	ori	r24, 0x05	; 5
    1ee6:	80 83       	st	Z, r24
    TCCR1B &= ~((1<<CS11));
    1ee8:	80 81       	ld	r24, Z
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	80 83       	st	Z, r24

    //set the max internal counter value
    uint8_t debounce_delay = 122; //roughly 1/8th of a second
    OCR1AH &= ~(0xFF);
    1eee:	e9 e8       	ldi	r30, 0x89	; 137
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	10 82       	st	Z, r1
    OCR1AL |= 0xFF;
    1ef6:	e8 e8       	ldi	r30, 0x88	; 136
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8f ef       	ldi	r24, 0xFF	; 255
    1efe:	80 83       	st	Z, r24
    OCR1AL &= debounce_delay;
    1f00:	80 81       	ld	r24, Z
    1f02:	8a 77       	andi	r24, 0x7A	; 122
    1f04:	80 83       	st	Z, r24

    //enable the timer interrupt
    TIMSK1 |= (1<<OCIE1A);
    1f06:	ef e6       	ldi	r30, 0x6F	; 111
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	82 60       	ori	r24, 0x02	; 2
    1f0e:	80 83       	st	Z, r24
    1f10:	08 95       	ret

00001f12 <disable_gps>:
}

//turn off GPS intterupts, receiver, and transmitter
void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0)); // 
    1f12:	e1 ec       	ldi	r30, 0xC1	; 193
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	87 72       	andi	r24, 0x27	; 39
    1f1a:	80 83       	st	Z, r24
    1f1c:	08 95       	ret

00001f1e <enable_gps>:
}

//turn on GPS interrupts, receiver, and transmitter
void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0); //
    1f1e:	e1 ec       	ldi	r30, 0xC1	; 193
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	88 6d       	ori	r24, 0xD8	; 216
    1f26:	80 83       	st	Z, r24
    1f28:	08 95       	ret

00001f2a <prepare_device>:
    TIMSK1 |= (1<<OCIE1A);
}

//set up GPIO, initialize interrupts, serial comm, and LCD
int prepare_device(volatile DEV_STATE *device)
{
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    int i, j;
    DDRB = 0xFF;
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
    1f36:	84 b9       	out	0x04, r24	; 4

    cli();
    1f38:	f8 94       	cli

    //Init usart
    InitUSART();
    1f3a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <InitUSART>

    //Enable Pin Change Interrupts (for the pushbutton)
    InitINT();
    1f3e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <InitINT>

    //Enable GPS Interrupts
    enable_gps();
    1f42:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enable_gps>

    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
    1f46:	78 94       	sei

    //blink PB0 during the startup sequence
    device->blinking = 1;
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e7 5f       	subi	r30, 0xF7	; 247
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	01 e0       	ldi	r16, 0x01	; 1
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	11 83       	std	Z+1, r17	; 0x01
    1f54:	00 83       	st	Z, r16
    device->blinker1 = 0;
    1f56:	fe 01       	movw	r30, r28
    1f58:	ed 5f       	subi	r30, 0xFD	; 253
    1f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5c:	11 82       	std	Z+1, r1	; 0x01
    1f5e:	10 82       	st	Z, r1
    device->blinker2 = -2;
    1f60:	fe 01       	movw	r30, r28
    1f62:	eb 5f       	subi	r30, 0xFB	; 251
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	8e ef       	ldi	r24, 0xFE	; 254
    1f68:	9f ef       	ldi	r25, 0xFF	; 255
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
    device->blinker3 = -2;
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e9 5f       	subi	r30, 0xF9	; 249
    1f72:	fe 4f       	sbci	r31, 0xFE	; 254
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24

    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
    1f78:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    1f7c:	2f e3       	ldi	r18, 0x3F	; 63
    1f7e:	8d e0       	ldi	r24, 0x0D	; 13
    1f80:	93 e0       	ldi	r25, 0x03	; 3
    1f82:	21 50       	subi	r18, 0x01	; 1
    1f84:	80 40       	sbci	r24, 0x00	; 0
    1f86:	90 40       	sbci	r25, 0x00	; 0
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <prepare_device+0x58>
    1f8a:	00 c0       	rjmp	.+0      	; 0x1f8c <prepare_device+0x62>
    1f8c:	00 00       	nop
    _delay_ms(1000);

    //choose starting DEV_STATE params
    device->serial_timer = 0;
    1f8e:	18 82       	st	Y, r1
    1f90:	19 82       	std	Y+1, r1	; 0x01
    1f92:	1a 82       	std	Y+2, r1	; 0x02
    1f94:	1b 82       	std	Y+3, r1	; 0x03
    device->updating = 0;
    1f96:	1d 82       	std	Y+5, r1	; 0x05
    1f98:	1c 82       	std	Y+4, r1	; 0x04
    device->eeprom_index = 0;
    1f9a:	1f 82       	std	Y+7, r1	; 0x07
    1f9c:	1e 82       	std	Y+6, r1	; 0x06
    device->op_mode = MD_NORMAL;
    1f9e:	19 86       	std	Y+9, r1	; 0x09
    1fa0:	18 86       	std	Y+8, r1	; 0x08
    device->op_mode_prior = MD_NORMAL;
    1fa2:	1b 86       	std	Y+11, r1	; 0x0b
    1fa4:	1a 86       	std	Y+10, r1	; 0x0a
    device->serialStartChar = '$';
    1fa6:	84 e2       	ldi	r24, 0x24	; 36
    1fa8:	8c 87       	std	Y+12, r24	; 0x0c
    device->serialEndChar = '^';
    1faa:	8e e5       	ldi	r24, 0x5E	; 94
    1fac:	8d 87       	std	Y+13, r24	; 0x0d

    device->rxReadPos = 0;
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e2 57       	subi	r30, 0x72	; 114
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	10 82       	st	Z, r1
    device->rxWritePos = 0;
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e1 57       	subi	r30, 0x71	; 113
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	10 82       	st	Z, r1
    device->gps_update_trigger = 0;
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e1 50       	subi	r30, 0x01	; 1
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	11 82       	std	Z+1, r1	; 0x01
    1fc6:	10 82       	st	Z, r1
    device->button_pressable = 1;
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ef 5f       	subi	r30, 0xFF	; 255
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	11 83       	std	Z+1, r17	; 0x01
    1fd0:	00 83       	st	Z, r16

    for (i=0; i<3; i++)
    {
        device->serial_history[i] = 'K';
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e0 57       	subi	r30, 0x70	; 112
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	8b e4       	ldi	r24, 0x4B	; 75
    1fda:	80 83       	st	Z, r24
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ef 56       	subi	r30, 0x6F	; 111
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 83       	st	Z, r24
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ee 56       	subi	r30, 0x6E	; 110
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 83       	st	Z, r24
    }

    device->gps_rxCount = 0;
    1fec:	fe 01       	movw	r30, r28
    1fee:	ed 56       	subi	r30, 0x6D	; 109
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	11 82       	std	Z+1, r1	; 0x01
    1ff4:	10 82       	st	Z, r1

    for (i=0; i<RX_BUFFER_SIZE; i++)
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e8 0f       	add	r30, r24
    1ffe:	f9 1f       	adc	r31, r25
    2000:	16 86       	std	Z+14, r1	; 0x0e
        device->serial_history[i] = 'K';
    }

    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	80 38       	cpi	r24, 0x80	; 128
    2006:	91 05       	cpc	r25, r1
    2008:	c1 f7       	brne	.-16     	; 0x1ffa <prepare_device+0xd0>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
        device->gps_rxBuffer[i] = '\0';
    200e:	fe 01       	movw	r30, r28
    2010:	e8 0f       	add	r30, r24
    2012:	f9 1f       	adc	r31, r25
    2014:	eb 56       	subi	r30, 0x6B	; 107
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	10 82       	st	Z, r1
    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
        device->rxBuffer[i] = '\0';

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	80 35       	cpi	r24, 0x50	; 80
    201e:	91 05       	cpc	r25, r1
    2020:	b1 f7       	brne	.-20     	; 0x200e <prepare_device+0xe4>
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	10 e0       	ldi	r17, 0x00	; 0
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(GPS_FIELD_LEN*sizeof(char));
    2026:	80 e1       	ldi	r24, 0x10	; 16
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <malloc>
    202e:	9c 01       	movw	r18, r24
    2030:	f8 01       	movw	r30, r16
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	ec 0f       	add	r30, r28
    2038:	fd 1f       	adc	r31, r29
    203a:	eb 51       	subi	r30, 0x1B	; 27
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	31 83       	std	Z+1, r19	; 0x01
    2040:	20 83       	st	Z, r18
        if (device->raw_gps_data[i] == NULL)
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	89 2b       	or	r24, r25
    2048:	49 f4       	brne	.+18     	; 0x205c <prepare_device+0x132>
        {
            lcd_init();
    204a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
            string_write("bad malloc");
    204e:	8f e2       	ldi	r24, 0x2F	; 47
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            return 0;
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <prepare_device+0x15a>

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(GPS_FIELD_LEN*sizeof(char));
        if (device->raw_gps_data[i] == NULL)
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
            return 0;
        } else {
            //null out each of the raw gps data strings
            for (j=0; j<GPS_FIELD_LEN; j++)
            {
                device->raw_gps_data[i][j] = '\0';
    2060:	df 01       	movw	r26, r30
    2062:	ed 91       	ld	r30, X+
    2064:	fc 91       	ld	r31, X
    2066:	11 97       	sbiw	r26, 0x01	; 1
    2068:	e8 0f       	add	r30, r24
    206a:	f9 1f       	adc	r31, r25
    206c:	10 82       	st	Z, r1
            lcd_init();
            string_write("bad malloc");
            return 0;
        } else {
            //null out each of the raw gps data strings
            for (j=0; j<GPS_FIELD_LEN; j++)
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	80 31       	cpi	r24, 0x10	; 16
    2072:	91 05       	cpc	r25, r1
    2074:	b1 f7       	brne	.-20     	; 0x2062 <prepare_device+0x138>

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    2076:	0f 5f       	subi	r16, 0xFF	; 255
    2078:	1f 4f       	sbci	r17, 0xFF	; 255
    207a:	0d 30       	cpi	r16, 0x0D	; 13
    207c:	11 05       	cpc	r17, r1
    207e:	99 f6       	brne	.-90     	; 0x2026 <prepare_device+0xfc>
                device->raw_gps_data[i][j] = '\0';
            }
        }
    }

    return 1;
    2080:	21 e0       	ldi	r18, 0x01	; 1
    2082:	30 e0       	ldi	r19, 0x00	; 0
}
    2084:	c9 01       	movw	r24, r18
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <sync_gps_data>:
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0); //
}

//parse available GPS data and pull formatted params into the GPS_DATA struct
void sync_gps_data(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	7b 01       	movw	r14, r22
    if (device->gps_update_trigger)
    209e:	ec 01       	movw	r28, r24
    20a0:	c1 50       	subi	r28, 0x01	; 1
    20a2:	df 4f       	sbci	r29, 0xFF	; 255
    20a4:	28 81       	ld	r18, Y
    20a6:	39 81       	ldd	r19, Y+1	; 0x01
    20a8:	23 2b       	or	r18, r19
    20aa:	d9 f0       	breq	.+54     	; 0x20e2 <sync_gps_data+0x52>
    {
        //strip off the rxBuffer carriage return and replace with ,
        device->gps_rxBuffer[device->gps_rxCount-1] = ',';
    20ac:	fc 01       	movw	r30, r24
    20ae:	ed 56       	subi	r30, 0x6D	; 109
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	01 90       	ld	r0, Z+
    20b4:	f0 81       	ld	r31, Z
    20b6:	e0 2d       	mov	r30, r0
    20b8:	e8 0f       	add	r30, r24
    20ba:	f9 1f       	adc	r31, r25
    20bc:	ec 56       	subi	r30, 0x6C	; 108
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	2c e2       	ldi	r18, 0x2C	; 44
    20c2:	20 83       	st	Z, r18
        //parse the sentence and populate the raw_gps_data fields
        parse_nmea(device, device->gps_rxBuffer, device->raw_gps_data);
    20c4:	8c 01       	movw	r16, r24
    20c6:	0b 51       	subi	r16, 0x1B	; 27
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	bc 01       	movw	r22, r24
    20cc:	6b 56       	subi	r22, 0x6B	; 107
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	a8 01       	movw	r20, r16
    20d2:	0e 94 03 06 	call	0xc06	; 0xc06 <parse_nmea>
        //use the raw raw_gps_data fields to populate the GPS_DATA struct
        update_user_gps_data(device->raw_gps_data, gps_data);
    20d6:	b7 01       	movw	r22, r14
    20d8:	c8 01       	movw	r24, r16
    20da:	0e 94 68 07 	call	0xed0	; 0xed0 <update_user_gps_data>
        device->gps_update_trigger = 0;
    20de:	19 82       	std	Y+1, r1	; 0x01
    20e0:	18 82       	st	Y, r1
    }
}
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	08 95       	ret

000020f0 <detectSerialStart>:

//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(volatile DEV_STATE *device)
{
    20f0:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialStartChar)&&(device->serial_history[1]==device->serialStartChar)&&(device->serial_history[2]==device->serialStartChar))
    20f2:	dc 01       	movw	r26, r24
    20f4:	a0 57       	subi	r26, 0x70	; 112
    20f6:	bf 4f       	sbci	r27, 0xFF	; 255
    20f8:	9c 91       	ld	r25, X
    20fa:	84 85       	ldd	r24, Z+12	; 0x0c
    20fc:	98 13       	cpse	r25, r24
    20fe:	10 c0       	rjmp	.+32     	; 0x2120 <detectSerialStart+0x30>
    2100:	df 01       	movw	r26, r30
    2102:	af 56       	subi	r26, 0x6F	; 111
    2104:	bf 4f       	sbci	r27, 0xFF	; 255
    2106:	9c 91       	ld	r25, X
    2108:	84 85       	ldd	r24, Z+12	; 0x0c
    210a:	98 13       	cpse	r25, r24
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <detectSerialStart+0x30>
    210e:	df 01       	movw	r26, r30
    2110:	ae 56       	subi	r26, 0x6E	; 110
    2112:	bf 4f       	sbci	r27, 0xFF	; 255
    2114:	9c 91       	ld	r25, X
    2116:	84 85       	ldd	r24, Z+12	; 0x0c
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	98 17       	cp	r25, r24
    211e:	11 f0       	breq	.+4      	; 0x2124 <detectSerialStart+0x34>
        return 1;
    else
        return 0;
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
}
    2124:	c9 01       	movw	r24, r18
    2126:	08 95       	ret

00002128 <detectSerialEnd>:

//catch the serial update end sequence
int detectSerialEnd(volatile DEV_STATE *device)
{
    2128:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialEndChar)&&(device->serial_history[1]==device->serialEndChar)&&(device->serial_history[2]==device->serialEndChar))
    212a:	dc 01       	movw	r26, r24
    212c:	a0 57       	subi	r26, 0x70	; 112
    212e:	bf 4f       	sbci	r27, 0xFF	; 255
    2130:	9c 91       	ld	r25, X
    2132:	85 85       	ldd	r24, Z+13	; 0x0d
    2134:	98 13       	cpse	r25, r24
    2136:	10 c0       	rjmp	.+32     	; 0x2158 <detectSerialEnd+0x30>
    2138:	df 01       	movw	r26, r30
    213a:	af 56       	subi	r26, 0x6F	; 111
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	9c 91       	ld	r25, X
    2140:	85 85       	ldd	r24, Z+13	; 0x0d
    2142:	98 13       	cpse	r25, r24
    2144:	09 c0       	rjmp	.+18     	; 0x2158 <detectSerialEnd+0x30>
    2146:	df 01       	movw	r26, r30
    2148:	ae 56       	subi	r26, 0x6E	; 110
    214a:	bf 4f       	sbci	r27, 0xFF	; 255
    214c:	9c 91       	ld	r25, X
    214e:	85 85       	ldd	r24, Z+13	; 0x0d
    2150:	21 e0       	ldi	r18, 0x01	; 1
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	98 17       	cp	r25, r24
    2156:	11 f0       	breq	.+4      	; 0x215c <detectSerialEnd+0x34>
        return 1;
    else
        return 0;
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
}
    215c:	c9 01       	movw	r24, r18
    215e:	08 95       	ret

00002160 <getChar>:
//read a char from the serial update buffer
char getChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    
    ret = device->rxBuffer[device->rxReadPos];
    2160:	fc 01       	movw	r30, r24
    2162:	e2 57       	subi	r30, 0x72	; 114
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	20 81       	ld	r18, Z
    2168:	dc 01       	movw	r26, r24
    216a:	a2 0f       	add	r26, r18
    216c:	b1 1d       	adc	r27, r1
    216e:	1e 96       	adiw	r26, 0x0e	; 14
    2170:	8c 91       	ld	r24, X
     
    device->rxReadPos++;
    2172:	90 81       	ld	r25, Z
    2174:	9f 5f       	subi	r25, 0xFF	; 255
    2176:	90 83       	st	Z, r25
     
    if(device->rxReadPos >= RX_BUFFER_SIZE)
    2178:	90 81       	ld	r25, Z
    217a:	97 fd       	sbrc	r25, 7
    {
        device->rxReadPos = 0;
    217c:	10 82       	st	Z, r1
    }
    
    return ret;
}
    217e:	08 95       	ret

00002180 <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
     
    if(device->rxReadPos != device->rxWritePos)
    2180:	fc 01       	movw	r30, r24
    2182:	e2 57       	subi	r30, 0x72	; 114
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	30 81       	ld	r19, Z
    2188:	dc 01       	movw	r26, r24
    218a:	a1 57       	subi	r26, 0x71	; 113
    218c:	bf 4f       	sbci	r27, 0xFF	; 255
    218e:	2c 91       	ld	r18, X
    2190:	32 17       	cp	r19, r18
    2192:	31 f0       	breq	.+12     	; 0x21a0 <peekChar+0x20>
    {
        ret = device->rxBuffer[device->rxReadPos];
    2194:	20 81       	ld	r18, Z
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f1 1d       	adc	r31, r1
    219c:	86 85       	ldd	r24, Z+14	; 0x0e
    219e:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = device->rxBuffer[device->rxReadPos];
    }
     
    return ret;
}
    21a2:	08 95       	ret

000021a4 <terminate_serial>:

//terminate the serial update with a certain status
int terminate_serial(volatile DEV_STATE *device, DATABASE *fm_stations, int flag)
{
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	fc 01       	movw	r30, r24
    21ae:	8b 01       	movw	r16, r22
    21b0:	ea 01       	movw	r28, r20
    device->op_mode = MD_NORMAL;
    21b2:	11 86       	std	Z+9, r1	; 0x09
    21b4:	10 86       	std	Z+8, r1	; 0x08
    device->op_mode_prior = MD_NORMAL;
    21b6:	13 86       	std	Z+11, r1	; 0x0b
    21b8:	12 86       	std	Z+10, r1	; 0x0a
    device->updating = 0;
    21ba:	15 82       	std	Z+5, r1	; 0x05
    21bc:	14 82       	std	Z+4, r1	; 0x04
    device->serial_timer = 0;
    21be:	10 82       	st	Z, r1
    21c0:	11 82       	std	Z+1, r1	; 0x01
    21c2:	12 82       	std	Z+2, r1	; 0x02
    21c4:	13 82       	std	Z+3, r1	; 0x03

    //turn off the blinking update LEDs
    device->blinking = 0;
    21c6:	dc 01       	movw	r26, r24
    21c8:	a7 5f       	subi	r26, 0xF7	; 247
    21ca:	be 4f       	sbci	r27, 0xFE	; 254
    21cc:	11 96       	adiw	r26, 0x01	; 1
    21ce:	1c 92       	st	X, r1
    21d0:	1e 92       	st	-X, r1
    sync_leds(device);
    21d2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <sync_leds>

    lcd_init();
    21d6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    if (flag==FL_SUCCESS)
    21da:	20 97       	sbiw	r28, 0x00	; 0
    21dc:	19 f4       	brne	.+6      	; 0x21e4 <terminate_serial+0x40>
        string_write("reading\ndatabase ...");
    21de:	82 e4       	ldi	r24, 0x42	; 66
    21e0:	92 e0       	ldi	r25, 0x02	; 2
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <terminate_serial+0x44>
    else
        string_write("ERROR:\ntimeout ...");
    21e4:	87 e5       	ldi	r24, 0x57	; 87
    21e6:	92 e0       	ldi	r25, 0x02	; 2
    21e8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //import the new database
    database_load(fm_stations);
    21ec:	c8 01       	movw	r24, r16
    21ee:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <database_load>
    21f2:	2f e3       	ldi	r18, 0x3F	; 63
    21f4:	8d e0       	ldi	r24, 0x0D	; 13
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	21 50       	subi	r18, 0x01	; 1
    21fa:	80 40       	sbci	r24, 0x00	; 0
    21fc:	90 40       	sbci	r25, 0x00	; 0
    21fe:	e1 f7       	brne	.-8      	; 0x21f8 <terminate_serial+0x54>
    2200:	00 c0       	rjmp	.+0      	; 0x2202 <terminate_serial+0x5e>
    2202:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
    2204:	21 97       	sbiw	r28, 0x01	; 1
    2206:	21 f4       	brne	.+8      	; 0x2210 <terminate_serial+0x6c>
        string_write("\nupdate failed\n");
    2208:	8a e6       	ldi	r24, 0x6A	; 106
    220a:	92 e0       	ldi	r25, 0x02	; 2
    220c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2210:	2f e9       	ldi	r18, 0x9F	; 159
    2212:	86 e8       	ldi	r24, 0x86	; 134
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	21 50       	subi	r18, 0x01	; 1
    2218:	80 40       	sbci	r24, 0x00	; 0
    221a:	90 40       	sbci	r25, 0x00	; 0
    221c:	e1 f7       	brne	.-8      	; 0x2216 <terminate_serial+0x72>
    221e:	00 c0       	rjmp	.+0      	; 0x2220 <terminate_serial+0x7c>
    2220:	00 00       	nop

    _delay_ms(500);
    return 1;
}
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	08 95       	ret

00002230 <wipe_eeprom>:

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(volatile DEV_STATE *device)
{
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	8c 01       	movw	r16, r24
    int i;
    lcd_init();
    223a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("wiping \nmemory...");
    223e:	8a e7       	ldi	r24, 0x7A	; 122
    2240:	92 e0       	ldi	r25, 0x02	; 2
    2242:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    2246:	c0 e0       	ldi	r28, 0x00	; 0
    2248:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (device->op_mode != device->op_mode_prior) return;
    224a:	f8 01       	movw	r30, r16
    224c:	20 85       	ldd	r18, Z+8	; 0x08
    224e:	31 85       	ldd	r19, Z+9	; 0x09
    2250:	82 85       	ldd	r24, Z+10	; 0x0a
    2252:	93 85       	ldd	r25, Z+11	; 0x0b
    2254:	28 17       	cp	r18, r24
    2256:	39 07       	cpc	r19, r25
    2258:	49 f4       	brne	.+18     	; 0x226c <wipe_eeprom+0x3c>
        eeprom_write_byte((uint8_t *)i,255);
    225a:	6f ef       	ldi	r22, 0xFF	; 255
    225c:	ce 01       	movw	r24, r28
    225e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__eewr_byte_m1284p>
void wipe_eeprom(volatile DEV_STATE *device)
{
    int i;
    lcd_init();
    string_write("wiping \nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    2262:	21 96       	adiw	r28, 0x01	; 1
    2264:	c1 3f       	cpi	r28, 0xF1	; 241
    2266:	fa e0       	ldi	r31, 0x0A	; 10
    2268:	df 07       	cpc	r29, r31
    226a:	79 f7       	brne	.-34     	; 0x224a <wipe_eeprom+0x1a>
    {
        if (device->op_mode != device->op_mode_prior) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	08 95       	ret

00002276 <wait_for_update>:

}

//hold device state and wait for database update
void wait_for_update(volatile DEV_STATE *device)
{
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	ec 01       	movw	r28, r24
    lcd_init();
    227c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("update required\n...feed me...");
    2280:	8c e8       	ldi	r24, 0x8C	; 140
    2282:	92 e0       	ldi	r25, 0x02	; 2
    2284:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    while (1)
    {
        if (device->op_mode != device->op_mode_prior) return;
    2288:	28 85       	ldd	r18, Y+8	; 0x08
    228a:	39 85       	ldd	r19, Y+9	; 0x09
    228c:	8a 85       	ldd	r24, Y+10	; 0x0a
    228e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	c9 f3       	breq	.-14     	; 0x2288 <wait_for_update+0x12>
    }
}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	8c 01       	movw	r16, r24
    22ac:	7b 01       	movw	r14, r22
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*fm_stations->num_stations; i++)
    22ae:	c0 e0       	ldi	r28, 0x00	; 0
    22b0:	d0 e0       	ldi	r29, 0x00	; 0
    22b2:	9c e1       	ldi	r25, 0x1C	; 28
    22b4:	d9 2e       	mov	r13, r25
    22b6:	17 c0       	rjmp	.+46     	; 0x22e6 <print_eeprom_station_contents+0x4a>
    {
        if (device->op_mode != device->op_mode_prior) return;
    22b8:	f8 01       	movw	r30, r16
    22ba:	20 85       	ldd	r18, Z+8	; 0x08
    22bc:	31 85       	ldd	r19, Z+9	; 0x09
    22be:	82 85       	ldd	r24, Z+10	; 0x0a
    22c0:	93 85       	ldd	r25, Z+11	; 0x0b
    22c2:	28 17       	cp	r18, r24
    22c4:	39 07       	cpc	r19, r25
    22c6:	d1 f4       	brne	.+52     	; 0x22fc <print_eeprom_station_contents+0x60>
        one_byte = my_eeprom_read_char(start+i);
    22c8:	21 96       	adiw	r28, 0x01	; 1
    22ca:	ce 01       	movw	r24, r28
    22cc:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <my_eeprom_read_char>
        if (one_byte == '\0')
    22d0:	81 11       	cpse	r24, r1
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <print_eeprom_station_contents+0x3a>
            one_byte = '?';
    22d4:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    22d6:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    22da:	87 ea       	ldi	r24, 0xA7	; 167
    22dc:	91 e6       	ldi	r25, 0x61	; 97
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <print_eeprom_station_contents+0x42>
    22e2:	00 c0       	rjmp	.+0      	; 0x22e4 <print_eeprom_station_contents+0x48>
    22e4:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*fm_stations->num_stations; i++)
    22e6:	f7 01       	movw	r30, r14
    22e8:	22 81       	ldd	r18, Z+2	; 0x02
    22ea:	33 81       	ldd	r19, Z+3	; 0x03
    22ec:	d2 9e       	mul	r13, r18
    22ee:	c0 01       	movw	r24, r0
    22f0:	d3 9e       	mul	r13, r19
    22f2:	90 0d       	add	r25, r0
    22f4:	11 24       	eor	r1, r1
    22f6:	c8 17       	cp	r28, r24
    22f8:	d9 07       	cpc	r29, r25
    22fa:	f4 f2       	brlt	.-68     	; 0x22b8 <print_eeprom_station_contents+0x1c>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	08 95       	ret

0000230c <print_eeprom_contents>:

//print the EEPROM contents for an address range
void print_eeprom_contents(volatile DEV_STATE *device, DATABASE *fm_stations, int start_addr, int end_addr)
{
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	00 d0       	rcall	.+0      	; 0x231e <print_eeprom_contents+0x12>
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	7c 01       	movw	r14, r24
    2324:	89 01       	movw	r16, r18
    int i=0;
    char one_byte;

    if (end_addr == -1)
    2326:	2f 3f       	cpi	r18, 0xFF	; 255
    2328:	8f ef       	ldi	r24, 0xFF	; 255
    232a:	38 07       	cpc	r19, r24
    232c:	59 f4       	brne	.+22     	; 0x2344 <print_eeprom_contents+0x38>
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;
    232e:	fb 01       	movw	r30, r22
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	2c e1       	ldi	r18, 0x1C	; 28
    2336:	28 9f       	mul	r18, r24
    2338:	80 01       	movw	r16, r0
    233a:	29 9f       	mul	r18, r25
    233c:	10 0d       	add	r17, r0
    233e:	11 24       	eor	r1, r1
    2340:	0f 5f       	subi	r16, 0xFF	; 255
    2342:	1f 4f       	sbci	r17, 0xFF	; 255

    lcd_init();
    2344:	49 83       	std	Y+1, r20	; 0x01
    2346:	5a 83       	std	Y+2, r21	; 0x02
    2348:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
    234c:	49 81       	ldd	r20, Y+1	; 0x01
    234e:	c4 2e       	mov	r12, r20
    2350:	5a 81       	ldd	r21, Y+2	; 0x02
    2352:	d5 2e       	mov	r13, r21
    2354:	19 c0       	rjmp	.+50     	; 0x2388 <print_eeprom_contents+0x7c>
    {
        if (device->op_mode != device->op_mode_prior) return;
    2356:	f7 01       	movw	r30, r14
    2358:	20 85       	ldd	r18, Z+8	; 0x08
    235a:	31 85       	ldd	r19, Z+9	; 0x09
    235c:	82 85       	ldd	r24, Z+10	; 0x0a
    235e:	93 85       	ldd	r25, Z+11	; 0x0b
    2360:	28 17       	cp	r18, r24
    2362:	39 07       	cpc	r19, r25
    2364:	a1 f4       	brne	.+40     	; 0x238e <print_eeprom_contents+0x82>
        one_byte = my_eeprom_read_char(i);
    2366:	c6 01       	movw	r24, r12
    2368:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <my_eeprom_read_char>
        if (one_byte == '\0')
    236c:	81 11       	cpse	r24, r1
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <print_eeprom_contents+0x66>
            one_byte = '?';
    2370:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    2372:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2376:	87 ea       	ldi	r24, 0xA7	; 167
    2378:	91 e6       	ldi	r25, 0x61	; 97
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <print_eeprom_contents+0x6e>
    237e:	00 c0       	rjmp	.+0      	; 0x2380 <print_eeprom_contents+0x74>
    2380:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
    2382:	9f ef       	ldi	r25, 0xFF	; 255
    2384:	c9 1a       	sub	r12, r25
    2386:	d9 0a       	sbc	r13, r25
    2388:	c0 16       	cp	r12, r16
    238a:	d1 06       	cpc	r13, r17
    238c:	24 f3       	brlt	.-56     	; 0x2356 <print_eeprom_contents+0x4a>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	08 95       	ret

000023a4 <print_callsign>:
    }
}

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	8c 01       	movw	r16, r24
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    23b2:	8c e1       	ldi	r24, 0x1C	; 28
    23b4:	86 9f       	mul	r24, r22
    23b6:	70 01       	movw	r14, r0
    23b8:	87 9f       	mul	r24, r23
    23ba:	f0 0c       	add	r15, r0
    23bc:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    23be:	c0 e0       	ldi	r28, 0x00	; 0
    23c0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    23c2:	d8 01       	movw	r26, r16
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	ee 0d       	add	r30, r14
    23ca:	ff 1d       	adc	r31, r15
    23cc:	ec 0f       	add	r30, r28
    23ce:	fd 1f       	adc	r31, r29
    23d0:	80 81       	ld	r24, Z
    23d2:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    23d6:	21 96       	adiw	r28, 0x01	; 1
    23d8:	c8 30       	cpi	r28, 0x08	; 8
    23da:	d1 05       	cpc	r29, r1
    23dc:	91 f7       	brne	.-28     	; 0x23c2 <print_callsign+0x1e>
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    }
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	08 95       	ret

000023ec <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	ec 01       	movw	r28, r24
    23fe:	7b 01       	movw	r14, r22
    if (device->op_mode != device->op_mode_prior) return;
    2400:	28 85       	ldd	r18, Y+8	; 0x08
    2402:	39 85       	ldd	r19, Y+9	; 0x09
    2404:	8a 85       	ldd	r24, Y+10	; 0x0a
    2406:	9b 85       	ldd	r25, Y+11	; 0x0b
    2408:	28 17       	cp	r18, r24
    240a:	39 07       	cpc	r19, r25
    240c:	09 f0       	breq	.+2      	; 0x2410 <print_all_callsigns+0x24>
    240e:	4d c0       	rjmp	.+154    	; 0x24aa <print_all_callsigns+0xbe>
    int i;
    lcd_init();
    2410:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    2414:	63 e0       	ldi	r22, 0x03	; 3
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	f7 01       	movw	r30, r14
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    string_write(" known\nstations");
    2422:	8a ea       	ldi	r24, 0xAA	; 170
    2424:	92 e0       	ldi	r25, 0x02	; 2
    2426:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    242a:	ff e7       	ldi	r31, 0x7F	; 127
    242c:	2a e1       	ldi	r18, 0x1A	; 26
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	f1 50       	subi	r31, 0x01	; 1
    2432:	20 40       	sbci	r18, 0x00	; 0
    2434:	80 40       	sbci	r24, 0x00	; 0
    2436:	e1 f7       	brne	.-8      	; 0x2430 <print_all_callsigns+0x44>
    2438:	00 c0       	rjmp	.+0      	; 0x243a <print_all_callsigns+0x4e>
    243a:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    243c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    char_write('\n');
    2440:	8a e0       	ldi	r24, 0x0A	; 10
    2442:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    for (i=0; i<fm_stations->num_stations; i++)
    2446:	00 e0       	ldi	r16, 0x00	; 0
    2448:	10 e0       	ldi	r17, 0x00	; 0
    244a:	29 c0       	rjmp	.+82     	; 0x249e <print_all_callsigns+0xb2>
    {
        if (device->op_mode != device->op_mode_prior) return;
    244c:	28 85       	ldd	r18, Y+8	; 0x08
    244e:	39 85       	ldd	r19, Y+9	; 0x09
    2450:	8a 85       	ldd	r24, Y+10	; 0x0a
    2452:	9b 85       	ldd	r25, Y+11	; 0x0b
    2454:	28 17       	cp	r18, r24
    2456:	39 07       	cpc	r19, r25
    2458:	41 f5       	brne	.+80     	; 0x24aa <print_all_callsigns+0xbe>

        char_write('\n'); string_write_int(i+1,3); string_write(": "); print_callsign(fm_stations, i);
    245a:	8a e0       	ldi	r24, 0x0A	; 10
    245c:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2460:	68 01       	movw	r12, r16
    2462:	9f ef       	ldi	r25, 0xFF	; 255
    2464:	c9 1a       	sub	r12, r25
    2466:	d9 0a       	sbc	r13, r25
    2468:	63 e0       	ldi	r22, 0x03	; 3
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	c6 01       	movw	r24, r12
    246e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    2472:	87 e5       	ldi	r24, 0x57	; 87
    2474:	94 e0       	ldi	r25, 0x04	; 4
    2476:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    247a:	b8 01       	movw	r22, r16
    247c:	c7 01       	movw	r24, r14
    247e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <print_callsign>

        if (device->op_mode != device->op_mode_prior) return;
    2482:	28 85       	ldd	r18, Y+8	; 0x08
    2484:	39 85       	ldd	r19, Y+9	; 0x09
    2486:	8a 85       	ldd	r24, Y+10	; 0x0a
    2488:	9b 85       	ldd	r25, Y+11	; 0x0b
    248a:	28 17       	cp	r18, r24
    248c:	39 07       	cpc	r19, r25
    248e:	69 f4       	brne	.+26     	; 0x24aa <print_all_callsigns+0xbe>
    2490:	e3 e2       	ldi	r30, 0x23	; 35
    2492:	f4 ef       	ldi	r31, 0xF4	; 244
    2494:	31 97       	sbiw	r30, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <print_all_callsigns+0xa8>
    2498:	00 c0       	rjmp	.+0      	; 0x249a <print_all_callsigns+0xae>
    249a:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    char_write('\n');

    for (i=0; i<fm_stations->num_stations; i++)
    249c:	86 01       	movw	r16, r12
    249e:	f7 01       	movw	r30, r14
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	08 17       	cp	r16, r24
    24a6:	19 07       	cpc	r17, r25
    24a8:	8c f2       	brlt	.-94     	; 0x244c <print_all_callsigns+0x60>

        if (device->op_mode != device->op_mode_prior) return;

        _delay_ms(250);   
    }
}
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	df 90       	pop	r13
    24b8:	cf 90       	pop	r12
    24ba:	08 95       	ret

000024bc <list_nearest_stations>:

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
{
    24bc:	5f 92       	push	r5
    24be:	6f 92       	push	r6
    24c0:	7f 92       	push	r7
    24c2:	8f 92       	push	r8
    24c4:	9f 92       	push	r9
    24c6:	af 92       	push	r10
    24c8:	bf 92       	push	r11
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	5c 01       	movw	r10, r24
    24dc:	eb 01       	movw	r28, r22
    24de:	7a 01       	movw	r14, r20
    int i, j;
    lcd_init();
    24e0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Listing Nearest\nStations:");
    24e4:	8a eb       	ldi	r24, 0xBA	; 186
    24e6:	92 e0       	ldi	r25, 0x02	; 2
    24e8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    24ec:	2f e3       	ldi	r18, 0x3F	; 63
    24ee:	8d e0       	ldi	r24, 0x0D	; 13
    24f0:	93 e0       	ldi	r25, 0x03	; 3
    24f2:	21 50       	subi	r18, 0x01	; 1
    24f4:	80 40       	sbci	r24, 0x00	; 0
    24f6:	90 40       	sbci	r25, 0x00	; 0
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <list_nearest_stations+0x36>
    24fa:	00 c0       	rjmp	.+0      	; 0x24fc <list_nearest_stations+0x40>
    24fc:	00 00       	nop
    _delay_ms(1000);

    //calculate the nearest stations
    fm_stations->nearest_station = get_nearest_stations(fm_stations, gps_data->lat, gps_data->lon);
    24fe:	f7 01       	movw	r30, r14
    2500:	05 89       	ldd	r16, Z+21	; 0x15
    2502:	16 89       	ldd	r17, Z+22	; 0x16
    2504:	27 89       	ldd	r18, Z+23	; 0x17
    2506:	30 8d       	ldd	r19, Z+24	; 0x18
    2508:	41 89       	ldd	r20, Z+17	; 0x11
    250a:	52 89       	ldd	r21, Z+18	; 0x12
    250c:	63 89       	ldd	r22, Z+19	; 0x13
    250e:	74 89       	ldd	r23, Z+20	; 0x14
    2510:	ce 01       	movw	r24, r28
    2512:	0e 94 1c 0c 	call	0x1838	; 0x1838 <get_nearest_stations>
    2516:	9d 83       	std	Y+5, r25	; 0x05
    2518:	8c 83       	std	Y+4, r24	; 0x04

    //calculate bearings to nearest stations
    calculate_bearings(gps_data, fm_stations);
    251a:	be 01       	movw	r22, r28
    251c:	c7 01       	movw	r24, r14
    251e:	0e 94 19 09 	call	0x1232	; 0x1232 <calculate_bearings>
    2522:	87 01       	movw	r16, r14
    2524:	6e 01       	movw	r12, r28
    2526:	47 01       	movw	r8, r14

    for (i=0; i<NUM_NEAREST; i++)
    2528:	61 2c       	mov	r6, r1
    252a:	71 2c       	mov	r7, r1

        if (device->op_mode != device->op_mode_prior) return;

        lcd_init();
        //print station callsign and distance
        print_callsign(fm_stations, fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
    252c:	2c e1       	ldi	r18, 0x1C	; 28
    252e:	52 2e       	mov	r5, r18
    //calculate bearings to nearest stations
    calculate_bearings(gps_data, fm_stations);

    for (i=0; i<NUM_NEAREST; i++)
    {
        if (i >= fm_stations->num_stations)
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	9b 81       	ldd	r25, Y+3	; 0x03
    2534:	68 16       	cp	r6, r24
    2536:	79 06       	cpc	r7, r25
    2538:	0c f0       	brlt	.+2      	; 0x253c <list_nearest_stations+0x80>
    253a:	a1 c0       	rjmp	.+322    	; 0x267e <list_nearest_stations+0x1c2>
            break;

        if (device->op_mode != device->op_mode_prior) return;
    253c:	f5 01       	movw	r30, r10
    253e:	20 85       	ldd	r18, Z+8	; 0x08
    2540:	31 85       	ldd	r19, Z+9	; 0x09
    2542:	82 85       	ldd	r24, Z+10	; 0x0a
    2544:	93 85       	ldd	r25, Z+11	; 0x0b
    2546:	28 17       	cp	r18, r24
    2548:	39 07       	cpc	r19, r25
    254a:	09 f0       	breq	.+2      	; 0x254e <list_nearest_stations+0x92>
    254c:	98 c0       	rjmp	.+304    	; 0x267e <list_nearest_stations+0x1c2>

        lcd_init();
    254e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
        //print station callsign and distance
        print_callsign(fm_stations, fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
    2552:	f6 01       	movw	r30, r12
    2554:	66 81       	ldd	r22, Z+6	; 0x06
    2556:	77 81       	ldd	r23, Z+7	; 0x07
    2558:	ce 01       	movw	r24, r28
    255a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <print_callsign>
    255e:	8c ef       	ldi	r24, 0xFC	; 252
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2566:	f6 01       	movw	r30, r12
    2568:	26 81       	ldd	r18, Z+6	; 0x06
    256a:	37 81       	ldd	r19, Z+7	; 0x07
    256c:	52 9e       	mul	r5, r18
    256e:	c0 01       	movw	r24, r0
    2570:	53 9e       	mul	r5, r19
    2572:	90 0d       	add	r25, r0
    2574:	11 24       	eor	r1, r1
    2576:	e8 81       	ld	r30, Y
    2578:	f9 81       	ldd	r31, Y+1	; 0x01
    257a:	e8 0f       	add	r30, r24
    257c:	f9 1f       	adc	r31, r25
    257e:	60 85       	ldd	r22, Z+8	; 0x08
    2580:	71 85       	ldd	r23, Z+9	; 0x09
    2582:	82 85       	ldd	r24, Z+10	; 0x0a
    2584:	93 85       	ldd	r25, Z+11	; 0x0b
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    258e:	8c e6       	ldi	r24, 0x6C	; 108
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
        string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_stations[i][0]),2); string_write(" km, ");
    2596:	f6 01       	movw	r30, r12
    2598:	46 81       	ldd	r20, Z+6	; 0x06
    259a:	57 81       	ldd	r21, Z+7	; 0x07
    259c:	68 81       	ld	r22, Y
    259e:	79 81       	ldd	r23, Y+1	; 0x01
    25a0:	c7 01       	movw	r24, r14
    25a2:	0e 94 ef 0b 	call	0x17de	; 0x17de <my_distance_to_station>
    25a6:	42 e0       	ldi	r20, 0x02	; 2
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    25ae:	84 ed       	ldi	r24, 0xD4	; 212
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    25b6:	f8 01       	movw	r30, r16
    25b8:	e3 5b       	subi	r30, 0xB3	; 179
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
        print_callsign(fm_stations, fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
        string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_stations[i][0]),2); string_write(" km, ");

        //write out the absolute bearing chars
        for (j=0; j<3; j++)
            char_write(gps_data->str_abs_bearing_nearest[i][j]);
    25bc:	80 81       	ld	r24, Z
    25be:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    25c2:	f8 01       	movw	r30, r16
    25c4:	e2 5b       	subi	r30, 0xB2	; 178
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
        print_callsign(fm_stations, fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
        string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_stations[i][0]),2); string_write(" km, ");

        //write out the absolute bearing chars
        for (j=0; j<3; j++)
            char_write(gps_data->str_abs_bearing_nearest[i][j]);
    25c8:	80 81       	ld	r24, Z
    25ca:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    25ce:	f8 01       	movw	r30, r16
    25d0:	e1 5b       	subi	r30, 0xB1	; 177
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
        print_callsign(fm_stations, fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
        string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_stations[i][0]),2); string_write(" km, ");

        //write out the absolute bearing chars
        for (j=0; j<3; j++)
            char_write(gps_data->str_abs_bearing_nearest[i][j]);
    25d4:	80 81       	ld	r24, Z
    25d6:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    25da:	ff e7       	ldi	r31, 0x7F	; 127
    25dc:	2a e1       	ldi	r18, 0x1A	; 26
    25de:	86 e0       	ldi	r24, 0x06	; 6
    25e0:	f1 50       	subi	r31, 0x01	; 1
    25e2:	20 40       	sbci	r18, 0x00	; 0
    25e4:	80 40       	sbci	r24, 0x00	; 0
    25e6:	e1 f7       	brne	.-8      	; 0x25e0 <list_nearest_stations+0x124>
    25e8:	00 c0       	rjmp	.+0      	; 0x25ea <list_nearest_stations+0x12e>
    25ea:	00 00       	nop

        _delay_ms(2000);

        if (device->op_mode != device->op_mode_prior) return;
    25ec:	f5 01       	movw	r30, r10
    25ee:	20 85       	ldd	r18, Z+8	; 0x08
    25f0:	31 85       	ldd	r19, Z+9	; 0x09
    25f2:	82 85       	ldd	r24, Z+10	; 0x0a
    25f4:	93 85       	ldd	r25, Z+11	; 0x0b
    25f6:	28 17       	cp	r18, r24
    25f8:	39 07       	cpc	r19, r25
    25fa:	09 f0       	breq	.+2      	; 0x25fe <list_nearest_stations+0x142>
    25fc:	40 c0       	rjmp	.+128    	; 0x267e <list_nearest_stations+0x1c2>

        lcd_init();
    25fe:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

        //print bearings to the screen
        string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest[i],1); char_write(DEG_SYMBOL); char_write('\n');
    2602:	8a ed       	ldi	r24, 0xDA	; 218
    2604:	92 e0       	ldi	r25, 0x02	; 2
    2606:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    260a:	f4 01       	movw	r30, r8
    260c:	65 a9       	ldd	r22, Z+53	; 0x35
    260e:	76 a9       	ldd	r23, Z+54	; 0x36
    2610:	87 a9       	ldd	r24, Z+55	; 0x37
    2612:	90 ad       	ldd	r25, Z+56	; 0x38
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    261c:	8f ed       	ldi	r24, 0xDF	; 223
    261e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2622:	8a e0       	ldi	r24, 0x0A	; 10
    2624:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
        string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[i],1); char_write(DEG_SYMBOL);
    2628:	83 ee       	ldi	r24, 0xE3	; 227
    262a:	92 e0       	ldi	r25, 0x02	; 2
    262c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    2630:	f4 01       	movw	r30, r8
    2632:	ef 5b       	subi	r30, 0xBF	; 191
    2634:	ff 4f       	sbci	r31, 0xFF	; 255

        lcd_init();

        //print bearings to the screen
        string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest[i],1); char_write(DEG_SYMBOL); char_write('\n');
        string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[i],1); char_write(DEG_SYMBOL);
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2646:	8f ed       	ldi	r24, 0xDF	; 223
    2648:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    264c:	ff e7       	ldi	r31, 0x7F	; 127
    264e:	2a e1       	ldi	r18, 0x1A	; 26
    2650:	86 e0       	ldi	r24, 0x06	; 6
    2652:	f1 50       	subi	r31, 0x01	; 1
    2654:	20 40       	sbci	r18, 0x00	; 0
    2656:	80 40       	sbci	r24, 0x00	; 0
    2658:	e1 f7       	brne	.-8      	; 0x2652 <list_nearest_stations+0x196>
    265a:	00 c0       	rjmp	.+0      	; 0x265c <list_nearest_stations+0x1a0>
    265c:	00 00       	nop
    fm_stations->nearest_station = get_nearest_stations(fm_stations, gps_data->lat, gps_data->lon);

    //calculate bearings to nearest stations
    calculate_bearings(gps_data, fm_stations);

    for (i=0; i<NUM_NEAREST; i++)
    265e:	9f ef       	ldi	r25, 0xFF	; 255
    2660:	69 1a       	sub	r6, r25
    2662:	79 0a       	sbc	r7, r25
    2664:	e4 e0       	ldi	r30, 0x04	; 4
    2666:	8e 0e       	add	r8, r30
    2668:	91 1c       	adc	r9, r1
    266a:	f4 e0       	ldi	r31, 0x04	; 4
    266c:	cf 0e       	add	r12, r31
    266e:	d1 1c       	adc	r13, r1
    2670:	0d 5f       	subi	r16, 0xFD	; 253
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	23 e0       	ldi	r18, 0x03	; 3
    2676:	62 16       	cp	r6, r18
    2678:	71 04       	cpc	r7, r1
    267a:	09 f0       	breq	.+2      	; 0x267e <list_nearest_stations+0x1c2>
    267c:	59 cf       	rjmp	.-334    	; 0x2530 <list_nearest_stations+0x74>
        string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[i],1); char_write(DEG_SYMBOL);

        _delay_ms(2000);
    }

}
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	7f 90       	pop	r7
    2698:	6f 90       	pop	r6
    269a:	5f 90       	pop	r5
    269c:	08 95       	ret

0000269e <show_nearest_station>:
    }
}

//compute the nearest station and display pertinent, formatted info
void show_nearest_station(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
{
    269e:	cf 92       	push	r12
    26a0:	df 92       	push	r13
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	6c 01       	movw	r12, r24
    26b0:	7b 01       	movw	r14, r22
    26b2:	ea 01       	movw	r28, r20
    int i;
    if (device->op_mode != device->op_mode_prior) return;
    26b4:	dc 01       	movw	r26, r24
    26b6:	18 96       	adiw	r26, 0x08	; 8
    26b8:	2d 91       	ld	r18, X+
    26ba:	3c 91       	ld	r19, X
    26bc:	19 97       	sbiw	r26, 0x09	; 9
    26be:	1a 96       	adiw	r26, 0x0a	; 10
    26c0:	8d 91       	ld	r24, X+
    26c2:	9c 91       	ld	r25, X
    26c4:	1b 97       	sbiw	r26, 0x0b	; 11
    26c6:	28 17       	cp	r18, r24
    26c8:	39 07       	cpc	r19, r25
    26ca:	09 f0       	breq	.+2      	; 0x26ce <show_nearest_station+0x30>
    26cc:	c4 c0       	rjmp	.+392    	; 0x2856 <show_nearest_station+0x1b8>
    lcd_init();
    26ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Finding Nearest\nStation...");
    26d2:	8c ee       	ldi	r24, 0xEC	; 236
    26d4:	92 e0       	ldi	r25, 0x02	; 2
    26d6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    26da:	bf e9       	ldi	r27, 0x9F	; 159
    26dc:	e6 e8       	ldi	r30, 0x86	; 134
    26de:	f1 e0       	ldi	r31, 0x01	; 1
    26e0:	b1 50       	subi	r27, 0x01	; 1
    26e2:	e0 40       	sbci	r30, 0x00	; 0
    26e4:	f0 40       	sbci	r31, 0x00	; 0
    26e6:	e1 f7       	brne	.-8      	; 0x26e0 <show_nearest_station+0x42>
    26e8:	00 c0       	rjmp	.+0      	; 0x26ea <show_nearest_station+0x4c>
    26ea:	00 00       	nop
    _delay_ms(500);

    lcd_init();
    26ec:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    //calculate the nearest stations
    fm_stations->nearest_station = get_nearest_stations(fm_stations, gps_data->lat, gps_data->lon);
    26f0:	0d 89       	ldd	r16, Y+21	; 0x15
    26f2:	1e 89       	ldd	r17, Y+22	; 0x16
    26f4:	2f 89       	ldd	r18, Y+23	; 0x17
    26f6:	38 8d       	ldd	r19, Y+24	; 0x18
    26f8:	49 89       	ldd	r20, Y+17	; 0x11
    26fa:	5a 89       	ldd	r21, Y+18	; 0x12
    26fc:	6b 89       	ldd	r22, Y+19	; 0x13
    26fe:	7c 89       	ldd	r23, Y+20	; 0x14
    2700:	c7 01       	movw	r24, r14
    2702:	0e 94 1c 0c 	call	0x1838	; 0x1838 <get_nearest_stations>
    2706:	d7 01       	movw	r26, r14
    2708:	15 96       	adiw	r26, 0x05	; 5
    270a:	9c 93       	st	X, r25
    270c:	8e 93       	st	-X, r24
    270e:	14 97       	sbiw	r26, 0x04	; 4

    //calculate bearings to nearest station
    calculate_bearings(gps_data, fm_stations);
    2710:	b7 01       	movw	r22, r14
    2712:	ce 01       	movw	r24, r28
    2714:	0e 94 19 09 	call	0x1232	; 0x1232 <calculate_bearings>

    //print formatted info to the display
    print_callsign(fm_stations, fm_stations->nearest_station); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_station].freq,1); string_write("\n");
    2718:	f7 01       	movw	r30, r14
    271a:	64 81       	ldd	r22, Z+4	; 0x04
    271c:	75 81       	ldd	r23, Z+5	; 0x05
    271e:	c7 01       	movw	r24, r14
    2720:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <print_callsign>
    2724:	8c ef       	ldi	r24, 0xFC	; 252
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    272c:	d7 01       	movw	r26, r14
    272e:	14 96       	adiw	r26, 0x04	; 4
    2730:	2d 91       	ld	r18, X+
    2732:	3c 91       	ld	r19, X
    2734:	15 97       	sbiw	r26, 0x05	; 5
    2736:	4c e1       	ldi	r20, 0x1C	; 28
    2738:	42 9f       	mul	r20, r18
    273a:	c0 01       	movw	r24, r0
    273c:	43 9f       	mul	r20, r19
    273e:	90 0d       	add	r25, r0
    2740:	11 24       	eor	r1, r1
    2742:	ed 91       	ld	r30, X+
    2744:	fc 91       	ld	r31, X
    2746:	e8 0f       	add	r30, r24
    2748:	f9 1f       	adc	r31, r25
    274a:	60 85       	ldd	r22, Z+8	; 0x08
    274c:	71 85       	ldd	r23, Z+9	; 0x09
    274e:	82 85       	ldd	r24, Z+10	; 0x0a
    2750:	93 85       	ldd	r25, Z+11	; 0x0b
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    275a:	8c e6       	ldi	r24, 0x6C	; 108
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_station),2); string_write(" km, ");
    2762:	f7 01       	movw	r30, r14
    2764:	44 81       	ldd	r20, Z+4	; 0x04
    2766:	55 81       	ldd	r21, Z+5	; 0x05
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	ce 01       	movw	r24, r28
    276e:	0e 94 ef 0b 	call	0x17de	; 0x17de <my_distance_to_station>
    2772:	42 e0       	ldi	r20, 0x02	; 2
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    277a:	84 ed       	ldi	r24, 0xD4	; 212
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //write out the absolute bearing chars
    for (i=0; i<3; i++)
        char_write(gps_data->str_abs_bearing_nearest[0][i]);
    2782:	fe 01       	movw	r30, r28
    2784:	e3 5b       	subi	r30, 0xB3	; 179
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    278e:	fe 01       	movw	r30, r28
    2790:	e2 5b       	subi	r30, 0xB2	; 178
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    279a:	fe 01       	movw	r30, r28
    279c:	e1 5b       	subi	r30, 0xB1	; 177
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    if (device->op_mode != device->op_mode_prior) return;
    27a6:	d6 01       	movw	r26, r12
    27a8:	18 96       	adiw	r26, 0x08	; 8
    27aa:	2d 91       	ld	r18, X+
    27ac:	3c 91       	ld	r19, X
    27ae:	19 97       	sbiw	r26, 0x09	; 9
    27b0:	1a 96       	adiw	r26, 0x0a	; 10
    27b2:	8d 91       	ld	r24, X+
    27b4:	9c 91       	ld	r25, X
    27b6:	1b 97       	sbiw	r26, 0x0b	; 11
    27b8:	28 17       	cp	r18, r24
    27ba:	39 07       	cpc	r19, r25
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <show_nearest_station+0x122>
    27be:	4b c0       	rjmp	.+150    	; 0x2856 <show_nearest_station+0x1b8>
    27c0:	bf eb       	ldi	r27, 0xBF	; 191
    27c2:	e7 e2       	ldi	r30, 0x27	; 39
    27c4:	f9 e0       	ldi	r31, 0x09	; 9
    27c6:	b1 50       	subi	r27, 0x01	; 1
    27c8:	e0 40       	sbci	r30, 0x00	; 0
    27ca:	f0 40       	sbci	r31, 0x00	; 0
    27cc:	e1 f7       	brne	.-8      	; 0x27c6 <show_nearest_station+0x128>
    27ce:	00 c0       	rjmp	.+0      	; 0x27d0 <show_nearest_station+0x132>
    27d0:	00 00       	nop

    _delay_ms(3000);

    if (device->op_mode != device->op_mode_prior) return;
    27d2:	d6 01       	movw	r26, r12
    27d4:	18 96       	adiw	r26, 0x08	; 8
    27d6:	2d 91       	ld	r18, X+
    27d8:	3c 91       	ld	r19, X
    27da:	19 97       	sbiw	r26, 0x09	; 9
    27dc:	1a 96       	adiw	r26, 0x0a	; 10
    27de:	8d 91       	ld	r24, X+
    27e0:	9c 91       	ld	r25, X
    27e2:	1b 97       	sbiw	r26, 0x0b	; 11
    27e4:	28 17       	cp	r18, r24
    27e6:	39 07       	cpc	r19, r25
    27e8:	b1 f5       	brne	.+108    	; 0x2856 <show_nearest_station+0x1b8>

    lcd_init();
    27ea:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    //print bearings to the screen
    string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest[0],1); char_write(DEG_SYMBOL); char_write('\n');
    27ee:	8a ed       	ldi	r24, 0xDA	; 218
    27f0:	92 e0       	ldi	r25, 0x02	; 2
    27f2:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    27f6:	6d a9       	ldd	r22, Y+53	; 0x35
    27f8:	7e a9       	ldd	r23, Y+54	; 0x36
    27fa:	8f a9       	ldd	r24, Y+55	; 0x37
    27fc:	98 ad       	ldd	r25, Y+56	; 0x38
    27fe:	41 e0       	ldi	r20, 0x01	; 1
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2806:	8f ed       	ldi	r24, 0xDF	; 223
    2808:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    280c:	8a e0       	ldi	r24, 0x0A	; 10
    280e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[0],1); char_write(DEG_SYMBOL);
    2812:	83 ee       	ldi	r24, 0xE3	; 227
    2814:	92 e0       	ldi	r25, 0x02	; 2
    2816:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    281a:	cf 5b       	subi	r28, 0xBF	; 191
    281c:	df 4f       	sbci	r29, 0xFF	; 255
    281e:	68 81       	ld	r22, Y
    2820:	79 81       	ldd	r23, Y+1	; 0x01
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    282e:	8f ed       	ldi	r24, 0xDF	; 223
    2830:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    if (device->op_mode != device->op_mode_prior) return;
    2834:	f6 01       	movw	r30, r12
    2836:	20 85       	ldd	r18, Z+8	; 0x08
    2838:	31 85       	ldd	r19, Z+9	; 0x09
    283a:	82 85       	ldd	r24, Z+10	; 0x0a
    283c:	93 85       	ldd	r25, Z+11	; 0x0b
    283e:	28 17       	cp	r18, r24
    2840:	39 07       	cpc	r19, r25
    2842:	49 f4       	brne	.+18     	; 0x2856 <show_nearest_station+0x1b8>
    2844:	ff eb       	ldi	r31, 0xBF	; 191
    2846:	27 e2       	ldi	r18, 0x27	; 39
    2848:	89 e0       	ldi	r24, 0x09	; 9
    284a:	f1 50       	subi	r31, 0x01	; 1
    284c:	20 40       	sbci	r18, 0x00	; 0
    284e:	80 40       	sbci	r24, 0x00	; 0
    2850:	e1 f7       	brne	.-8      	; 0x284a <show_nearest_station+0x1ac>
    2852:	00 c0       	rjmp	.+0      	; 0x2854 <show_nearest_station+0x1b6>
    2854:	00 00       	nop

    _delay_ms(3000);
}
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	08 95       	ret

00002868 <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(volatile DEV_STATE *device, DATABASE *fm_stations, int index)
{
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24
    287a:	8b 01       	movw	r16, r22
    287c:	6a 01       	movw	r12, r20
    string_write_int(index+1,3); string_write(": "); print_callsign(fm_stations, index); _delay_ms(250); string_write("\n"); 
    287e:	63 e0       	ldi	r22, 0x03	; 3
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	ca 01       	movw	r24, r20
    2884:	01 96       	adiw	r24, 0x01	; 1
    2886:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    288a:	87 e5       	ldi	r24, 0x57	; 87
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2892:	b6 01       	movw	r22, r12
    2894:	c8 01       	movw	r24, r16
    2896:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <print_callsign>
    289a:	83 e2       	ldi	r24, 0x23	; 35
    289c:	94 ef       	ldi	r25, 0xF4	; 244
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <print_station+0x36>
    28a2:	00 c0       	rjmp	.+0      	; 0x28a4 <print_station+0x3c>
    28a4:	00 00       	nop
    28a6:	8c e6       	ldi	r24, 0x6C	; 108
    28a8:	91 e0       	ldi	r25, 0x01	; 1
    28aa:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    28ae:	88 85       	ldd	r24, Y+8	; 0x08
    28b0:	99 85       	ldd	r25, Y+9	; 0x09
    28b2:	07 97       	sbiw	r24, 0x07	; 7
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <print_station+0x50>
    28b6:	a1 c0       	rjmp	.+322    	; 0x29fa <print_station+0x192>
        return;
    string_write("freq: "); string_write_float(fm_stations->all_stations[index].freq,1); _delay_ms(250); string_write("\n");
    28b8:	87 e0       	ldi	r24, 0x07	; 7
    28ba:	93 e0       	ldi	r25, 0x03	; 3
    28bc:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    28c0:	8c e1       	ldi	r24, 0x1C	; 28
    28c2:	8c 9d       	mul	r24, r12
    28c4:	70 01       	movw	r14, r0
    28c6:	8d 9d       	mul	r24, r13
    28c8:	f0 0c       	add	r15, r0
    28ca:	11 24       	eor	r1, r1
    28cc:	d8 01       	movw	r26, r16
    28ce:	ed 91       	ld	r30, X+
    28d0:	fc 91       	ld	r31, X
    28d2:	ee 0d       	add	r30, r14
    28d4:	ff 1d       	adc	r31, r15
    28d6:	60 85       	ldd	r22, Z+8	; 0x08
    28d8:	71 85       	ldd	r23, Z+9	; 0x09
    28da:	82 85       	ldd	r24, Z+10	; 0x0a
    28dc:	93 85       	ldd	r25, Z+11	; 0x0b
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    28e6:	83 e2       	ldi	r24, 0x23	; 35
    28e8:	94 ef       	ldi	r25, 0xF4	; 244
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <print_station+0x82>
    28ee:	00 c0       	rjmp	.+0      	; 0x28f0 <print_station+0x88>
    28f0:	00 00       	nop
    28f2:	8c e6       	ldi	r24, 0x6C	; 108
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    28fa:	88 85       	ldd	r24, Y+8	; 0x08
    28fc:	99 85       	ldd	r25, Y+9	; 0x09
    28fe:	07 97       	sbiw	r24, 0x07	; 7
    2900:	09 f4       	brne	.+2      	; 0x2904 <print_station+0x9c>
    2902:	7b c0       	rjmp	.+246    	; 0x29fa <print_station+0x192>
        return;
    string_write("lat: "); string_write_float(fm_stations->all_stations[index].lat,4); _delay_ms(250); string_write("\n");
    2904:	8e e0       	ldi	r24, 0x0E	; 14
    2906:	93 e0       	ldi	r25, 0x03	; 3
    2908:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    290c:	d8 01       	movw	r26, r16
    290e:	ed 91       	ld	r30, X+
    2910:	fc 91       	ld	r31, X
    2912:	ee 0d       	add	r30, r14
    2914:	ff 1d       	adc	r31, r15
    2916:	64 85       	ldd	r22, Z+12	; 0x0c
    2918:	75 85       	ldd	r23, Z+13	; 0x0d
    291a:	86 85       	ldd	r24, Z+14	; 0x0e
    291c:	97 85       	ldd	r25, Z+15	; 0x0f
    291e:	44 e0       	ldi	r20, 0x04	; 4
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2926:	83 e2       	ldi	r24, 0x23	; 35
    2928:	94 ef       	ldi	r25, 0xF4	; 244
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <print_station+0xc2>
    292e:	00 c0       	rjmp	.+0      	; 0x2930 <print_station+0xc8>
    2930:	00 00       	nop
    2932:	8c e6       	ldi	r24, 0x6C	; 108
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    293a:	88 85       	ldd	r24, Y+8	; 0x08
    293c:	99 85       	ldd	r25, Y+9	; 0x09
    293e:	07 97       	sbiw	r24, 0x07	; 7
    2940:	09 f4       	brne	.+2      	; 0x2944 <print_station+0xdc>
    2942:	5b c0       	rjmp	.+182    	; 0x29fa <print_station+0x192>
        return;
    string_write("lon: "); string_write_float(fm_stations->all_stations[index].lon,4); _delay_ms(250); string_write("\n");
    2944:	84 e1       	ldi	r24, 0x14	; 20
    2946:	93 e0       	ldi	r25, 0x03	; 3
    2948:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    294c:	d8 01       	movw	r26, r16
    294e:	ed 91       	ld	r30, X+
    2950:	fc 91       	ld	r31, X
    2952:	ee 0d       	add	r30, r14
    2954:	ff 1d       	adc	r31, r15
    2956:	60 89       	ldd	r22, Z+16	; 0x10
    2958:	71 89       	ldd	r23, Z+17	; 0x11
    295a:	82 89       	ldd	r24, Z+18	; 0x12
    295c:	93 89       	ldd	r25, Z+19	; 0x13
    295e:	44 e0       	ldi	r20, 0x04	; 4
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2966:	83 e2       	ldi	r24, 0x23	; 35
    2968:	94 ef       	ldi	r25, 0xF4	; 244
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <print_station+0x102>
    296e:	00 c0       	rjmp	.+0      	; 0x2970 <print_station+0x108>
    2970:	00 00       	nop
    2972:	8c e6       	ldi	r24, 0x6C	; 108
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    297a:	88 85       	ldd	r24, Y+8	; 0x08
    297c:	99 85       	ldd	r25, Y+9	; 0x09
    297e:	07 97       	sbiw	r24, 0x07	; 7
    2980:	e1 f1       	breq	.+120    	; 0x29fa <print_station+0x192>
        return;
    string_write("erp: "); string_write_float(fm_stations->all_stations[index].erp,1); _delay_ms(250); string_write("\n");
    2982:	8a e1       	ldi	r24, 0x1A	; 26
    2984:	93 e0       	ldi	r25, 0x03	; 3
    2986:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    298a:	d8 01       	movw	r26, r16
    298c:	ed 91       	ld	r30, X+
    298e:	fc 91       	ld	r31, X
    2990:	ee 0d       	add	r30, r14
    2992:	ff 1d       	adc	r31, r15
    2994:	64 89       	ldd	r22, Z+20	; 0x14
    2996:	75 89       	ldd	r23, Z+21	; 0x15
    2998:	86 89       	ldd	r24, Z+22	; 0x16
    299a:	97 89       	ldd	r25, Z+23	; 0x17
    299c:	41 e0       	ldi	r20, 0x01	; 1
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    29a4:	83 e2       	ldi	r24, 0x23	; 35
    29a6:	94 ef       	ldi	r25, 0xF4	; 244
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <print_station+0x140>
    29ac:	00 c0       	rjmp	.+0      	; 0x29ae <print_station+0x146>
    29ae:	00 00       	nop
    29b0:	8c e6       	ldi	r24, 0x6C	; 108
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    29b8:	88 85       	ldd	r24, Y+8	; 0x08
    29ba:	99 85       	ldd	r25, Y+9	; 0x09
    29bc:	07 97       	sbiw	r24, 0x07	; 7
    29be:	e9 f0       	breq	.+58     	; 0x29fa <print_station+0x192>
        return;
    string_write("haat: "); string_write_float(fm_stations->all_stations[index].haat,0); _delay_ms(250); string_write("\n");
    29c0:	80 e2       	ldi	r24, 0x20	; 32
    29c2:	93 e0       	ldi	r25, 0x03	; 3
    29c4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    29c8:	d8 01       	movw	r26, r16
    29ca:	ed 91       	ld	r30, X+
    29cc:	fc 91       	ld	r31, X
    29ce:	ee 0d       	add	r30, r14
    29d0:	ff 1d       	adc	r31, r15
    29d2:	60 8d       	ldd	r22, Z+24	; 0x18
    29d4:	71 8d       	ldd	r23, Z+25	; 0x19
    29d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    29d8:	93 8d       	ldd	r25, Z+27	; 0x1b
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    29e2:	83 e2       	ldi	r24, 0x23	; 35
    29e4:	94 ef       	ldi	r25, 0xF4	; 244
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <print_station+0x17e>
    29ea:	00 c0       	rjmp	.+0      	; 0x29ec <print_station+0x184>
    29ec:	00 00       	nop
    29ee:	8c e6       	ldi	r24, 0x6C	; 108
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    29f6:	88 85       	ldd	r24, Y+8	; 0x08
    29f8:	99 85       	ldd	r25, Y+9	; 0x09
        return;
}
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
    2a02:	ff 90       	pop	r15
    2a04:	ef 90       	pop	r14
    2a06:	df 90       	pop	r13
    2a08:	cf 90       	pop	r12
    2a0a:	08 95       	ret

00002a0c <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	ec 01       	movw	r28, r24
    2a1a:	7b 01       	movw	r14, r22
    if (device->op_mode != device->op_mode_prior) return;
    2a1c:	28 85       	ldd	r18, Y+8	; 0x08
    2a1e:	39 85       	ldd	r19, Y+9	; 0x09
    2a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a24:	28 17       	cp	r18, r24
    2a26:	39 07       	cpc	r19, r25
    2a28:	e1 f5       	brne	.+120    	; 0x2aa2 <print_all_known_stations+0x96>
    int i;
    lcd_init();
    2a2a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    2a2e:	63 e0       	ldi	r22, 0x03	; 3
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	f7 01       	movw	r30, r14
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    string_write(" known\nstations");
    2a3c:	8a ea       	ldi	r24, 0xAA	; 170
    2a3e:	92 e0       	ldi	r25, 0x02	; 2
    2a40:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2a44:	ff e7       	ldi	r31, 0x7F	; 127
    2a46:	2a e1       	ldi	r18, 0x1A	; 26
    2a48:	86 e0       	ldi	r24, 0x06	; 6
    2a4a:	f1 50       	subi	r31, 0x01	; 1
    2a4c:	20 40       	sbci	r18, 0x00	; 0
    2a4e:	80 40       	sbci	r24, 0x00	; 0
    2a50:	e1 f7       	brne	.-8      	; 0x2a4a <print_all_known_stations+0x3e>
    2a52:	00 c0       	rjmp	.+0      	; 0x2a54 <print_all_known_stations+0x48>
    2a54:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    2a56:	00 e0       	ldi	r16, 0x00	; 0
    2a58:	10 e0       	ldi	r17, 0x00	; 0
    2a5a:	1d c0       	rjmp	.+58     	; 0x2a96 <print_all_known_stations+0x8a>
    {
        if (device->op_mode != device->op_mode_prior) return;
    2a5c:	28 85       	ldd	r18, Y+8	; 0x08
    2a5e:	39 85       	ldd	r19, Y+9	; 0x09
    2a60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a64:	28 17       	cp	r18, r24
    2a66:	39 07       	cpc	r19, r25
    2a68:	e1 f4       	brne	.+56     	; 0x2aa2 <print_all_known_stations+0x96>

        lcd_init();
    2a6a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
        print_station(device, fm_stations, i);
    2a6e:	a8 01       	movw	r20, r16
    2a70:	b7 01       	movw	r22, r14
    2a72:	ce 01       	movw	r24, r28
    2a74:	0e 94 34 14 	call	0x2868	; 0x2868 <print_station>

        if (device->op_mode != device->op_mode_prior) return;
    2a78:	28 85       	ldd	r18, Y+8	; 0x08
    2a7a:	39 85       	ldd	r19, Y+9	; 0x09
    2a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a80:	28 17       	cp	r18, r24
    2a82:	39 07       	cpc	r19, r25
    2a84:	71 f4       	brne	.+28     	; 0x2aa2 <print_all_known_stations+0x96>
    2a86:	ef e4       	ldi	r30, 0x4F	; 79
    2a88:	f3 ec       	ldi	r31, 0xC3	; 195
    2a8a:	31 97       	sbiw	r30, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <print_all_known_stations+0x7e>
    2a8e:	00 c0       	rjmp	.+0      	; 0x2a90 <print_all_known_stations+0x84>
    2a90:	00 00       	nop
    string_write_int(fm_stations->num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    2a92:	0f 5f       	subi	r16, 0xFF	; 255
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	f7 01       	movw	r30, r14
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	08 17       	cp	r16, r24
    2a9e:	19 07       	cpc	r17, r25
    2aa0:	ec f2       	brlt	.-70     	; 0x2a5c <print_all_known_stations+0x50>

        if (device->op_mode != device->op_mode_prior) return;

        _delay_ms(200);   
    }
}
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	08 95       	ret

00002ab0 <print_gps_data>:
        return;
}

//print the formatted data stored in the GPS_DATA struct to the screen
void print_gps_data(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2ab0:	6f 92       	push	r6
    2ab2:	7f 92       	push	r7
    2ab4:	8f 92       	push	r8
    2ab6:	9f 92       	push	r9
    2ab8:	af 92       	push	r10
    2aba:	bf 92       	push	r11
    2abc:	cf 92       	push	r12
    2abe:	df 92       	push	r13
    2ac0:	ef 92       	push	r14
    2ac2:	ff 92       	push	r15
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	7c 01       	movw	r14, r24
    2ace:	8b 01       	movw	r16, r22
    if (device->op_mode != device->op_mode_prior) return;
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	20 85       	ldd	r18, Z+8	; 0x08
    2ad4:	31 85       	ldd	r19, Z+9	; 0x09
    2ad6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ad8:	93 85       	ldd	r25, Z+11	; 0x0b
    2ada:	28 17       	cp	r18, r24
    2adc:	39 07       	cpc	r19, r25
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <print_gps_data+0x32>
    2ae0:	d3 c0       	rjmp	.+422    	; 0x2c88 <print_gps_data+0x1d8>
    lcd_init();
    2ae2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Latest\nGPS Data:");
    2ae6:	87 e2       	ldi	r24, 0x27	; 39
    2ae8:	93 e0       	ldi	r25, 0x03	; 3
    2aea:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2aee:	ff e3       	ldi	r31, 0x3F	; 63
    2af0:	2d e0       	ldi	r18, 0x0D	; 13
    2af2:	83 e0       	ldi	r24, 0x03	; 3
    2af4:	f1 50       	subi	r31, 0x01	; 1
    2af6:	20 40       	sbci	r18, 0x00	; 0
    2af8:	80 40       	sbci	r24, 0x00	; 0
    2afa:	e1 f7       	brne	.-8      	; 0x2af4 <print_gps_data+0x44>
    2afc:	00 c0       	rjmp	.+0      	; 0x2afe <print_gps_data+0x4e>
    2afe:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    2b00:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
    2b04:	c0 e0       	ldi	r28, 0x00	; 0
    2b06:	d0 e0       	ldi	r29, 0x00	; 0
                string_write_numchars(gps_data->msg_type,8);
            break;

            case 1:
                string_write("Time: ");
                string_write_numchars(gps_data->utc_time,8);
    2b08:	38 01       	movw	r6, r16
    2b0a:	98 e0       	ldi	r25, 0x08	; 8
    2b0c:	69 0e       	add	r6, r25
    2b0e:	71 1c       	adc	r7, r1
                string_write_numchars(gps_data->date,8);
            break;

            case 8:
                string_write("MagVar: ");
                string_write_numchars(gps_data->mag_var,8);
    2b10:	68 01       	movw	r12, r16
    2b12:	e9 e2       	ldi	r30, 0x29	; 41
    2b14:	ce 0e       	add	r12, r30
    2b16:	d1 1c       	adc	r13, r1
                string_write_float(gps_data->course,1);
            break;

            case 7:
                string_write("Date: ");
                string_write_numchars(gps_data->date,8);
    2b18:	58 01       	movw	r10, r16
    2b1a:	f1 e2       	ldi	r31, 0x21	; 33
    2b1c:	af 0e       	add	r10, r31
    2b1e:	b1 1c       	adc	r11, r1
                char_write(gps_data->mode);
            break;

            case 10:
                string_write("Checksum: ");
                string_write_numchars(gps_data->checksum,3);
    2b20:	48 01       	movw	r8, r16
    2b22:	22 e3       	ldi	r18, 0x32	; 50
    2b24:	82 0e       	add	r8, r18
    2b26:	91 1c       	adc	r9, r1
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    {

        if (i>0)
    2b28:	20 97       	sbiw	r28, 0x00	; 0
    2b2a:	31 f1       	breq	.+76     	; 0x2b78 <print_gps_data+0xc8>
            string_write("\n");
    2b2c:	8c e6       	ldi	r24, 0x6C	; 108
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

        switch (i)
    2b34:	c6 30       	cpi	r28, 0x06	; 6
    2b36:	d1 05       	cpc	r29, r1
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <print_gps_data+0x8c>
    2b3a:	60 c0       	rjmp	.+192    	; 0x2bfc <print_gps_data+0x14c>
    2b3c:	7c f4       	brge	.+30     	; 0x2b5c <print_gps_data+0xac>
    2b3e:	c3 30       	cpi	r28, 0x03	; 3
    2b40:	d1 05       	cpc	r29, r1
    2b42:	89 f1       	breq	.+98     	; 0x2ba6 <print_gps_data+0xf6>
    2b44:	24 f4       	brge	.+8      	; 0x2b4e <print_gps_data+0x9e>
    2b46:	c2 30       	cpi	r28, 0x02	; 2
    2b48:	d1 05       	cpc	r29, r1
    2b4a:	f1 f4       	brne	.+60     	; 0x2b88 <print_gps_data+0xd8>
    2b4c:	25 c0       	rjmp	.+74     	; 0x2b98 <print_gps_data+0xe8>
    2b4e:	c4 30       	cpi	r28, 0x04	; 4
    2b50:	d1 05       	cpc	r29, r1
    2b52:	99 f1       	breq	.+102    	; 0x2bba <print_gps_data+0x10a>
    2b54:	c5 30       	cpi	r28, 0x05	; 5
    2b56:	d1 05       	cpc	r29, r1
    2b58:	b9 f4       	brne	.+46     	; 0x2b88 <print_gps_data+0xd8>
    2b5a:	3e c0       	rjmp	.+124    	; 0x2bd8 <print_gps_data+0x128>
    2b5c:	c8 30       	cpi	r28, 0x08	; 8
    2b5e:	d1 05       	cpc	r29, r1
    2b60:	09 f4       	brne	.+2      	; 0x2b64 <print_gps_data+0xb4>
    2b62:	62 c0       	rjmp	.+196    	; 0x2c28 <print_gps_data+0x178>
    2b64:	0c f4       	brge	.+2      	; 0x2b68 <print_gps_data+0xb8>
    2b66:	58 c0       	rjmp	.+176    	; 0x2c18 <print_gps_data+0x168>
    2b68:	c9 30       	cpi	r28, 0x09	; 9
    2b6a:	d1 05       	cpc	r29, r1
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <print_gps_data+0xc0>
    2b6e:	64 c0       	rjmp	.+200    	; 0x2c38 <print_gps_data+0x188>
    2b70:	ca 30       	cpi	r28, 0x0A	; 10
    2b72:	d1 05       	cpc	r29, r1
    2b74:	49 f4       	brne	.+18     	; 0x2b88 <print_gps_data+0xd8>
    2b76:	69 c0       	rjmp	.+210    	; 0x2c4a <print_gps_data+0x19a>
        {
            case 0:
                string_write("Message: "); 
    2b78:	88 e3       	ldi	r24, 0x38	; 56
    2b7a:	93 e0       	ldi	r25, 0x03	; 3
    2b7c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->msg_type,8);
    2b80:	68 e0       	ldi	r22, 0x08	; 8
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	c8 01       	movw	r24, r16
    2b86:	68 c0       	rjmp	.+208    	; 0x2c58 <print_gps_data+0x1a8>
            break;

            case 1:
                string_write("Time: ");
    2b88:	82 e4       	ldi	r24, 0x42	; 66
    2b8a:	93 e0       	ldi	r25, 0x03	; 3
    2b8c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->utc_time,8);
    2b90:	68 e0       	ldi	r22, 0x08	; 8
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	c3 01       	movw	r24, r6
    2b96:	60 c0       	rjmp	.+192    	; 0x2c58 <print_gps_data+0x1a8>
            break;

            case 2:
                string_write("NRW: ");
    2b98:	89 e4       	ldi	r24, 0x49	; 73
    2b9a:	93 e0       	ldi	r25, 0x03	; 3
    2b9c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                char_write(gps_data->nrw);
    2ba0:	f8 01       	movw	r30, r16
    2ba2:	80 89       	ldd	r24, Z+16	; 0x10
    2ba4:	4f c0       	rjmp	.+158    	; 0x2c44 <print_gps_data+0x194>
            break;

            case 3:
                string_write("Lat: ");
    2ba6:	8f e4       	ldi	r24, 0x4F	; 79
    2ba8:	93 e0       	ldi	r25, 0x03	; 3
    2baa:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->lat,4); char_write(DEG_SYMBOL);
    2bae:	f8 01       	movw	r30, r16
    2bb0:	61 89       	ldd	r22, Z+17	; 0x11
    2bb2:	72 89       	ldd	r23, Z+18	; 0x12
    2bb4:	83 89       	ldd	r24, Z+19	; 0x13
    2bb6:	94 89       	ldd	r25, Z+20	; 0x14
    2bb8:	09 c0       	rjmp	.+18     	; 0x2bcc <print_gps_data+0x11c>
            break;

            case 4:
                string_write("Lon: ");
    2bba:	85 e5       	ldi	r24, 0x55	; 85
    2bbc:	93 e0       	ldi	r25, 0x03	; 3
    2bbe:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->lon,4); char_write(DEG_SYMBOL);
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	65 89       	ldd	r22, Z+21	; 0x15
    2bc6:	76 89       	ldd	r23, Z+22	; 0x16
    2bc8:	87 89       	ldd	r24, Z+23	; 0x17
    2bca:	90 8d       	ldd	r25, Z+24	; 0x18
    2bcc:	44 e0       	ldi	r20, 0x04	; 4
    2bce:	50 e0       	ldi	r21, 0x00	; 0
    2bd0:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2bd4:	8f ed       	ldi	r24, 0xDF	; 223
    2bd6:	36 c0       	rjmp	.+108    	; 0x2c44 <print_gps_data+0x194>
            break;

            case 5:
                string_write("Speed: ");
    2bd8:	82 eb       	ldi	r24, 0xB2	; 178
    2bda:	91 e0       	ldi	r25, 0x01	; 1
    2bdc:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->speed,1); string_write(" kts");
    2be0:	f8 01       	movw	r30, r16
    2be2:	61 8d       	ldd	r22, Z+25	; 0x19
    2be4:	72 8d       	ldd	r23, Z+26	; 0x1a
    2be6:	83 8d       	ldd	r24, Z+27	; 0x1b
    2be8:	94 8d       	ldd	r25, Z+28	; 0x1c
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2bf2:	8b e5       	ldi	r24, 0x5B	; 91
    2bf4:	93 e0       	ldi	r25, 0x03	; 3
    2bf6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            break;
    2bfa:	30 c0       	rjmp	.+96     	; 0x2c5c <print_gps_data+0x1ac>

            case 6:
                string_write("Course: ");
    2bfc:	80 e6       	ldi	r24, 0x60	; 96
    2bfe:	93 e0       	ldi	r25, 0x03	; 3
    2c00:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->course,1);
    2c04:	f8 01       	movw	r30, r16
    2c06:	65 8d       	ldd	r22, Z+29	; 0x1d
    2c08:	76 8d       	ldd	r23, Z+30	; 0x1e
    2c0a:	87 8d       	ldd	r24, Z+31	; 0x1f
    2c0c:	90 a1       	ldd	r25, Z+32	; 0x20
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
            break;
    2c16:	22 c0       	rjmp	.+68     	; 0x2c5c <print_gps_data+0x1ac>

            case 7:
                string_write("Date: ");
    2c18:	89 e6       	ldi	r24, 0x69	; 105
    2c1a:	93 e0       	ldi	r25, 0x03	; 3
    2c1c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->date,8);
    2c20:	68 e0       	ldi	r22, 0x08	; 8
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	c5 01       	movw	r24, r10
    2c26:	18 c0       	rjmp	.+48     	; 0x2c58 <print_gps_data+0x1a8>
            break;

            case 8:
                string_write("MagVar: ");
    2c28:	80 e7       	ldi	r24, 0x70	; 112
    2c2a:	93 e0       	ldi	r25, 0x03	; 3
    2c2c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->mag_var,8);
    2c30:	68 e0       	ldi	r22, 0x08	; 8
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	c6 01       	movw	r24, r12
    2c36:	10 c0       	rjmp	.+32     	; 0x2c58 <print_gps_data+0x1a8>
            break;

            case 9:
                string_write("Mode: ");
    2c38:	89 e7       	ldi	r24, 0x79	; 121
    2c3a:	93 e0       	ldi	r25, 0x03	; 3
    2c3c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                char_write(gps_data->mode);
    2c40:	f8 01       	movw	r30, r16
    2c42:	81 a9       	ldd	r24, Z+49	; 0x31
    2c44:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
            break;
    2c48:	09 c0       	rjmp	.+18     	; 0x2c5c <print_gps_data+0x1ac>

            case 10:
                string_write("Checksum: ");
    2c4a:	80 e8       	ldi	r24, 0x80	; 128
    2c4c:	93 e0       	ldi	r25, 0x03	; 3
    2c4e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->checksum,3);
    2c52:	63 e0       	ldi	r22, 0x03	; 3
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	c4 01       	movw	r24, r8
    2c58:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    2c5c:	ff e9       	ldi	r31, 0x9F	; 159
    2c5e:	26 e8       	ldi	r18, 0x86	; 134
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	f1 50       	subi	r31, 0x01	; 1
    2c64:	20 40       	sbci	r18, 0x00	; 0
    2c66:	80 40       	sbci	r24, 0x00	; 0
    2c68:	e1 f7       	brne	.-8      	; 0x2c62 <print_gps_data+0x1b2>
    2c6a:	00 c0       	rjmp	.+0      	; 0x2c6c <print_gps_data+0x1bc>
    2c6c:	00 00       	nop
            break;
        }

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    2c6e:	f7 01       	movw	r30, r14
    2c70:	20 85       	ldd	r18, Z+8	; 0x08
    2c72:	31 85       	ldd	r19, Z+9	; 0x09
    2c74:	82 85       	ldd	r24, Z+10	; 0x0a
    2c76:	93 85       	ldd	r25, Z+11	; 0x0b
    2c78:	28 17       	cp	r18, r24
    2c7a:	39 07       	cpc	r19, r25
    2c7c:	29 f4       	brne	.+10     	; 0x2c88 <print_gps_data+0x1d8>
    lcd_init();
    string_write("Latest\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    2c7e:	21 96       	adiw	r28, 0x01	; 1
    2c80:	cb 30       	cpi	r28, 0x0B	; 11
    2c82:	d1 05       	cpc	r29, r1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <print_gps_data+0x1d8>
    2c86:	50 cf       	rjmp	.-352    	; 0x2b28 <print_gps_data+0x78>
        }

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    }
}
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ff 90       	pop	r15
    2c92:	ef 90       	pop	r14
    2c94:	df 90       	pop	r13
    2c96:	cf 90       	pop	r12
    2c98:	bf 90       	pop	r11
    2c9a:	af 90       	pop	r10
    2c9c:	9f 90       	pop	r9
    2c9e:	8f 90       	pop	r8
    2ca0:	7f 90       	pop	r7
    2ca2:	6f 90       	pop	r6
    2ca4:	08 95       	ret

00002ca6 <print_gps_data_concise>:

//print a concise version of the formatted GPS data to the screen
void print_gps_data_concise(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	8c 01       	movw	r16, r24
    2cb0:	eb 01       	movw	r28, r22
    int i;
    if (device->op_mode != device->op_mode_prior) return;
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	20 85       	ldd	r18, Z+8	; 0x08
    2cb6:	31 85       	ldd	r19, Z+9	; 0x09
    2cb8:	82 85       	ldd	r24, Z+10	; 0x0a
    2cba:	93 85       	ldd	r25, Z+11	; 0x0b
    2cbc:	28 17       	cp	r18, r24
    2cbe:	39 07       	cpc	r19, r25
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <print_gps_data_concise+0x1e>
    2cc2:	a0 c0       	rjmp	.+320    	; 0x2e04 <print_gps_data_concise+0x15e>

    lcd_init();
    2cc4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Date: ");
    2cc8:	89 e6       	ldi	r24, 0x69	; 105
    2cca:	93 e0       	ldi	r25, 0x03	; 3
    2ccc:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_numchars(gps_data->date,8); char_write('\n');
    2cd0:	68 e0       	ldi	r22, 0x08	; 8
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	81 96       	adiw	r24, 0x21	; 33
    2cd8:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    2cdc:	8a e0       	ldi	r24, 0x0A	; 10
    2cde:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    string_write("UTC: ");
    2ce2:	89 e5       	ldi	r24, 0x59	; 89
    2ce4:	91 e0       	ldi	r25, 0x01	; 1
    2ce6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_numchars(gps_data->utc_time,8);
    2cea:	68 e0       	ldi	r22, 0x08	; 8
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	ce 01       	movw	r24, r28
    2cf0:	08 96       	adiw	r24, 0x08	; 8
    2cf2:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    2cf6:	ff e7       	ldi	r31, 0x7F	; 127
    2cf8:	2a e1       	ldi	r18, 0x1A	; 26
    2cfa:	86 e0       	ldi	r24, 0x06	; 6
    2cfc:	f1 50       	subi	r31, 0x01	; 1
    2cfe:	20 40       	sbci	r18, 0x00	; 0
    2d00:	80 40       	sbci	r24, 0x00	; 0
    2d02:	e1 f7       	brne	.-8      	; 0x2cfc <print_gps_data_concise+0x56>
    2d04:	00 c0       	rjmp	.+0      	; 0x2d06 <print_gps_data_concise+0x60>
    2d06:	00 00       	nop
    _delay_ms(2000);

    if (device->op_mode != device->op_mode_prior) return;
    2d08:	f8 01       	movw	r30, r16
    2d0a:	20 85       	ldd	r18, Z+8	; 0x08
    2d0c:	31 85       	ldd	r19, Z+9	; 0x09
    2d0e:	82 85       	ldd	r24, Z+10	; 0x0a
    2d10:	93 85       	ldd	r25, Z+11	; 0x0b
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <print_gps_data_concise+0x74>
    2d18:	75 c0       	rjmp	.+234    	; 0x2e04 <print_gps_data_concise+0x15e>

    lcd_init();
    2d1a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Lat: ");
    2d1e:	8f e4       	ldi	r24, 0x4F	; 79
    2d20:	93 e0       	ldi	r25, 0x03	; 3
    2d22:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->lat,4);  char_write(DEG_SYMBOL); char_write('\n');
    2d26:	69 89       	ldd	r22, Y+17	; 0x11
    2d28:	7a 89       	ldd	r23, Y+18	; 0x12
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	44 e0       	ldi	r20, 0x04	; 4
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2d36:	8f ed       	ldi	r24, 0xDF	; 223
    2d38:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2d3c:	8a e0       	ldi	r24, 0x0A	; 10
    2d3e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    string_write("Lon: ");
    2d42:	85 e5       	ldi	r24, 0x55	; 85
    2d44:	93 e0       	ldi	r25, 0x03	; 3
    2d46:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->lon,4);  char_write(DEG_SYMBOL);
    2d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d50:	98 8d       	ldd	r25, Y+24	; 0x18
    2d52:	44 e0       	ldi	r20, 0x04	; 4
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2d5a:	8f ed       	ldi	r24, 0xDF	; 223
    2d5c:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2d60:	ff e7       	ldi	r31, 0x7F	; 127
    2d62:	2a e1       	ldi	r18, 0x1A	; 26
    2d64:	86 e0       	ldi	r24, 0x06	; 6
    2d66:	f1 50       	subi	r31, 0x01	; 1
    2d68:	20 40       	sbci	r18, 0x00	; 0
    2d6a:	80 40       	sbci	r24, 0x00	; 0
    2d6c:	e1 f7       	brne	.-8      	; 0x2d66 <print_gps_data_concise+0xc0>
    2d6e:	00 c0       	rjmp	.+0      	; 0x2d70 <print_gps_data_concise+0xca>
    2d70:	00 00       	nop
    _delay_ms(2000);

    if (device->op_mode != device->op_mode_prior) return;
    2d72:	f8 01       	movw	r30, r16
    2d74:	20 85       	ldd	r18, Z+8	; 0x08
    2d76:	31 85       	ldd	r19, Z+9	; 0x09
    2d78:	82 85       	ldd	r24, Z+10	; 0x0a
    2d7a:	93 85       	ldd	r25, Z+11	; 0x0b
    2d7c:	28 17       	cp	r18, r24
    2d7e:	39 07       	cpc	r19, r25
    2d80:	09 f0       	breq	.+2      	; 0x2d84 <print_gps_data_concise+0xde>
    2d82:	40 c0       	rjmp	.+128    	; 0x2e04 <print_gps_data_concise+0x15e>

    lcd_init();
    2d84:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("CMG: ");
    2d88:	8b ea       	ldi	r24, 0xAB	; 171
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->course,1); char_write(DEG_SYMBOL); string_write(" ");
    2d90:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d92:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2d94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d96:	98 a1       	ldd	r25, Y+32	; 0x20
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2da0:	8f ed       	ldi	r24, 0xDF	; 223
    2da2:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2da6:	8c ef       	ldi	r24, 0xFC	; 252
    2da8:	91 e0       	ldi	r25, 0x01	; 1
    2daa:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //write out the absolute bearing chars
    for (i=0; i<3; i++)
        char_write(gps_data->str_course[i]);
    2dae:	fe 01       	movw	r30, r28
    2db0:	ea 5a       	subi	r30, 0xAA	; 170
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e9 5a       	subi	r30, 0xA9	; 169
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e8 5a       	subi	r30, 0xA8	; 168
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    string_write("\nSpeed: ");
    2dd2:	81 eb       	ldi	r24, 0xB1	; 177
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->speed,1);  string_write(" kts");
    2dda:	69 8d       	ldd	r22, Y+25	; 0x19
    2ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2dea:	8b e5       	ldi	r24, 0x5B	; 91
    2dec:	93 e0       	ldi	r25, 0x03	; 3
    2dee:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2df2:	ff e7       	ldi	r31, 0x7F	; 127
    2df4:	2a e1       	ldi	r18, 0x1A	; 26
    2df6:	86 e0       	ldi	r24, 0x06	; 6
    2df8:	f1 50       	subi	r31, 0x01	; 1
    2dfa:	20 40       	sbci	r18, 0x00	; 0
    2dfc:	80 40       	sbci	r24, 0x00	; 0
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <print_gps_data_concise+0x152>
    2e00:	00 c0       	rjmp	.+0      	; 0x2e02 <print_gps_data_concise+0x15c>
    2e02:	00 00       	nop
    _delay_ms(2000);
}
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(volatile DEV_STATE *device)
{
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	8c 01       	movw	r16, r24
    if (device->op_mode != device->op_mode_prior) return;
    2e18:	fc 01       	movw	r30, r24
    2e1a:	20 85       	ldd	r18, Z+8	; 0x08
    2e1c:	31 85       	ldd	r19, Z+9	; 0x09
    2e1e:	82 85       	ldd	r24, Z+10	; 0x0a
    2e20:	93 85       	ldd	r25, Z+11	; 0x0b
    2e22:	28 17       	cp	r18, r24
    2e24:	39 07       	cpc	r19, r25
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <print_raw_gps_data+0x1c>
    2e28:	8f c0       	rjmp	.+286    	; 0x2f48 <print_raw_gps_data+0x13a>

    lcd_init();
    2e2a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Raw\nGPS Data:");
    2e2e:	8b e8       	ldi	r24, 0x8B	; 139
    2e30:	93 e0       	ldi	r25, 0x03	; 3
    2e32:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2e36:	ff e3       	ldi	r31, 0x3F	; 63
    2e38:	2d e0       	ldi	r18, 0x0D	; 13
    2e3a:	83 e0       	ldi	r24, 0x03	; 3
    2e3c:	f1 50       	subi	r31, 0x01	; 1
    2e3e:	20 40       	sbci	r18, 0x00	; 0
    2e40:	80 40       	sbci	r24, 0x00	; 0
    2e42:	e1 f7       	brne	.-8      	; 0x2e3c <print_raw_gps_data+0x2e>
    2e44:	00 c0       	rjmp	.+0      	; 0x2e46 <print_raw_gps_data+0x38>
    2e46:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    2e48:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    int i=0;
    for (i=0; i<13; i++)
    2e4c:	c0 e0       	ldi	r28, 0x00	; 0
    2e4e:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
    2e50:	20 97       	sbiw	r28, 0x00	; 0
    2e52:	61 f1       	breq	.+88     	; 0x2eac <print_raw_gps_data+0x9e>
            string_write("\n");
    2e54:	8c e6       	ldi	r24, 0x6C	; 108
    2e56:	91 e0       	ldi	r25, 0x01	; 1
    2e58:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

        switch (i)
    2e5c:	c7 30       	cpi	r28, 0x07	; 7
    2e5e:	d1 05       	cpc	r29, r1
    2e60:	d1 f1       	breq	.+116    	; 0x2ed6 <print_raw_gps_data+0xc8>
    2e62:	94 f4       	brge	.+36     	; 0x2e88 <print_raw_gps_data+0x7a>
    2e64:	c4 30       	cpi	r28, 0x04	; 4
    2e66:	d1 05       	cpc	r29, r1
    2e68:	69 f1       	breq	.+90     	; 0x2ec4 <print_raw_gps_data+0xb6>
    2e6a:	3c f4       	brge	.+14     	; 0x2e7a <print_raw_gps_data+0x6c>
    2e6c:	c2 30       	cpi	r28, 0x02	; 2
    2e6e:	d1 05       	cpc	r29, r1
    2e70:	19 f1       	breq	.+70     	; 0x2eb8 <print_raw_gps_data+0xaa>
    2e72:	c3 30       	cpi	r28, 0x03	; 3
    2e74:	d1 05       	cpc	r29, r1
    2e76:	e9 f4       	brne	.+58     	; 0x2eb2 <print_raw_gps_data+0xa4>
    2e78:	22 c0       	rjmp	.+68     	; 0x2ebe <print_raw_gps_data+0xb0>
    2e7a:	c5 30       	cpi	r28, 0x05	; 5
    2e7c:	d1 05       	cpc	r29, r1
    2e7e:	29 f1       	breq	.+74     	; 0x2eca <print_raw_gps_data+0xbc>
    2e80:	c6 30       	cpi	r28, 0x06	; 6
    2e82:	d1 05       	cpc	r29, r1
    2e84:	b1 f4       	brne	.+44     	; 0x2eb2 <print_raw_gps_data+0xa4>
    2e86:	24 c0       	rjmp	.+72     	; 0x2ed0 <print_raw_gps_data+0xc2>
    2e88:	ca 30       	cpi	r28, 0x0A	; 10
    2e8a:	d1 05       	cpc	r29, r1
    2e8c:	69 f1       	breq	.+90     	; 0x2ee8 <print_raw_gps_data+0xda>
    2e8e:	3c f4       	brge	.+14     	; 0x2e9e <print_raw_gps_data+0x90>
    2e90:	c8 30       	cpi	r28, 0x08	; 8
    2e92:	d1 05       	cpc	r29, r1
    2e94:	19 f1       	breq	.+70     	; 0x2edc <print_raw_gps_data+0xce>
    2e96:	c9 30       	cpi	r28, 0x09	; 9
    2e98:	d1 05       	cpc	r29, r1
    2e9a:	59 f4       	brne	.+22     	; 0x2eb2 <print_raw_gps_data+0xa4>
    2e9c:	22 c0       	rjmp	.+68     	; 0x2ee2 <print_raw_gps_data+0xd4>
    2e9e:	cb 30       	cpi	r28, 0x0B	; 11
    2ea0:	d1 05       	cpc	r29, r1
    2ea2:	29 f1       	breq	.+74     	; 0x2eee <print_raw_gps_data+0xe0>
    2ea4:	cc 30       	cpi	r28, 0x0C	; 12
    2ea6:	d1 05       	cpc	r29, r1
    2ea8:	21 f4       	brne	.+8      	; 0x2eb2 <print_raw_gps_data+0xa4>
    2eaa:	24 c0       	rjmp	.+72     	; 0x2ef4 <print_raw_gps_data+0xe6>
        {
            case 0:
                string_write("Message");
    2eac:	89 e9       	ldi	r24, 0x99	; 153
    2eae:	93 e0       	ldi	r25, 0x03	; 3
    2eb0:	23 c0       	rjmp	.+70     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 1:
                string_write("Time");
    2eb2:	81 ea       	ldi	r24, 0xA1	; 161
    2eb4:	93 e0       	ldi	r25, 0x03	; 3
    2eb6:	20 c0       	rjmp	.+64     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 2:
                string_write("NRW");
    2eb8:	86 ea       	ldi	r24, 0xA6	; 166
    2eba:	93 e0       	ldi	r25, 0x03	; 3
    2ebc:	1d c0       	rjmp	.+58     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 3:
                string_write("Lat");
    2ebe:	8a ea       	ldi	r24, 0xAA	; 170
    2ec0:	93 e0       	ldi	r25, 0x03	; 3
    2ec2:	1a c0       	rjmp	.+52     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 4:
                string_write("N/S");
    2ec4:	8e ea       	ldi	r24, 0xAE	; 174
    2ec6:	93 e0       	ldi	r25, 0x03	; 3
    2ec8:	17 c0       	rjmp	.+46     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 5:
                string_write("Lon");
    2eca:	82 eb       	ldi	r24, 0xB2	; 178
    2ecc:	93 e0       	ldi	r25, 0x03	; 3
    2ece:	14 c0       	rjmp	.+40     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 6:
                string_write("E/W");
    2ed0:	86 eb       	ldi	r24, 0xB6	; 182
    2ed2:	93 e0       	ldi	r25, 0x03	; 3
    2ed4:	11 c0       	rjmp	.+34     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 7:
                string_write("Speed");
    2ed6:	8a eb       	ldi	r24, 0xBA	; 186
    2ed8:	93 e0       	ldi	r25, 0x03	; 3
    2eda:	0e c0       	rjmp	.+28     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 8:
                string_write("Course");
    2edc:	80 ec       	ldi	r24, 0xC0	; 192
    2ede:	93 e0       	ldi	r25, 0x03	; 3
    2ee0:	0b c0       	rjmp	.+22     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 9:
                string_write("Date");
    2ee2:	87 ec       	ldi	r24, 0xC7	; 199
    2ee4:	93 e0       	ldi	r25, 0x03	; 3
    2ee6:	08 c0       	rjmp	.+16     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 10:
                string_write("MagVar");
    2ee8:	8c ec       	ldi	r24, 0xCC	; 204
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	05 c0       	rjmp	.+10     	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 11:
                string_write("Mode");
    2eee:	83 ed       	ldi	r24, 0xD3	; 211
    2ef0:	93 e0       	ldi	r25, 0x03	; 3
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <print_raw_gps_data+0xea>
            break;

            case 12:
                string_write("Checksum");
    2ef4:	88 ed       	ldi	r24, 0xD8	; 216
    2ef6:	93 e0       	ldi	r25, 0x03	; 3
    2ef8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            break;
        }

        string_write(": ");
    2efc:	87 e5       	ldi	r24, 0x57	; 87
    2efe:	94 e0       	ldi	r25, 0x04	; 4
    2f00:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
        string_write(device->raw_gps_data[i]);
    2f04:	ce 01       	movw	r24, r28
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	80 0f       	add	r24, r16
    2f0c:	91 1f       	adc	r25, r17
    2f0e:	fc 01       	movw	r30, r24
    2f10:	eb 51       	subi	r30, 0x1B	; 27
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2f1c:	9f e9       	ldi	r25, 0x9F	; 159
    2f1e:	e6 e8       	ldi	r30, 0x86	; 134
    2f20:	f1 e0       	ldi	r31, 0x01	; 1
    2f22:	91 50       	subi	r25, 0x01	; 1
    2f24:	e0 40       	sbci	r30, 0x00	; 0
    2f26:	f0 40       	sbci	r31, 0x00	; 0
    2f28:	e1 f7       	brne	.-8      	; 0x2f22 <print_raw_gps_data+0x114>
    2f2a:	00 c0       	rjmp	.+0      	; 0x2f2c <print_raw_gps_data+0x11e>
    2f2c:	00 00       	nop

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    2f2e:	f8 01       	movw	r30, r16
    2f30:	20 85       	ldd	r18, Z+8	; 0x08
    2f32:	31 85       	ldd	r19, Z+9	; 0x09
    2f34:	82 85       	ldd	r24, Z+10	; 0x0a
    2f36:	93 85       	ldd	r25, Z+11	; 0x0b
    2f38:	28 17       	cp	r18, r24
    2f3a:	39 07       	cpc	r19, r25
    2f3c:	29 f4       	brne	.+10     	; 0x2f48 <print_raw_gps_data+0x13a>
    lcd_init();
    string_write("Raw\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
    2f3e:	21 96       	adiw	r28, 0x01	; 1
    2f40:	cd 30       	cpi	r28, 0x0D	; 13
    2f42:	d1 05       	cpc	r29, r1
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <print_raw_gps_data+0x13a>
    2f46:	84 cf       	rjmp	.-248    	; 0x2e50 <print_raw_gps_data+0x42>
        string_write(device->raw_gps_data[i]);

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    }
}
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	1f 91       	pop	r17
    2f4e:	0f 91       	pop	r16
    2f50:	08 95       	ret

00002f52 <test_earth_distance>:

//crosscheck the earth-distance formula with a few known distances
void test_earth_distance(void)
{
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    lcd_init();
    2f62:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Calculating\nEarth Distances");
    2f66:	81 ee       	ldi	r24, 0xE1	; 225
    2f68:	93 e0       	ldi	r25, 0x03	; 3
    2f6a:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2f6e:	2f e7       	ldi	r18, 0x7F	; 127
    2f70:	8a e1       	ldi	r24, 0x1A	; 26
    2f72:	96 e0       	ldi	r25, 0x06	; 6
    2f74:	21 50       	subi	r18, 0x01	; 1
    2f76:	80 40       	sbci	r24, 0x00	; 0
    2f78:	90 40       	sbci	r25, 0x00	; 0
    2f7a:	e1 f7       	brne	.-8      	; 0x2f74 <test_earth_distance+0x22>
    2f7c:	00 c0       	rjmp	.+0      	; 0x2f7e <test_earth_distance+0x2c>
    2f7e:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    2f80:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Denver -> NYC:\n");
    2f84:	8d ef       	ldi	r24, 0xFD	; 253
    2f86:	93 e0       	ldi	r25, 0x03	; 3
    2f88:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    2f8c:	a1 2c       	mov	r10, r1
    2f8e:	b1 2c       	mov	r11, r1
    2f90:	40 ed       	ldi	r20, 0xD0	; 208
    2f92:	c4 2e       	mov	r12, r20
    2f94:	42 ec       	ldi	r20, 0xC2	; 194
    2f96:	d4 2e       	mov	r13, r20
    2f98:	e1 2c       	mov	r14, r1
    2f9a:	f1 2c       	mov	r15, r1
    2f9c:	0c e1       	ldi	r16, 0x1C	; 28
    2f9e:	12 e4       	ldi	r17, 0x42	; 66
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	44 e9       	ldi	r20, 0x94	; 148
    2fa6:	52 ec       	ldi	r21, 0xC2	; 194
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	80 e2       	ldi	r24, 0x20	; 32
    2fae:	92 e4       	ldi	r25, 0x42	; 66
    2fb0:	0e 94 09 0b 	call	0x1612	; 0x1612 <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2fbc:	8d e0       	ldi	r24, 0x0D	; 13
    2fbe:	94 e0       	ldi	r25, 0x04	; 4
    2fc0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2fc4:	2f e1       	ldi	r18, 0x1F	; 31
    2fc6:	81 ea       	ldi	r24, 0xA1	; 161
    2fc8:	97 e0       	ldi	r25, 0x07	; 7
    2fca:	21 50       	subi	r18, 0x01	; 1
    2fcc:	80 40       	sbci	r24, 0x00	; 0
    2fce:	90 40       	sbci	r25, 0x00	; 0
    2fd0:	e1 f7       	brne	.-8      	; 0x2fca <test_earth_distance+0x78>
    2fd2:	00 c0       	rjmp	.+0      	; 0x2fd4 <test_earth_distance+0x82>
    2fd4:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    2fd6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("North KC -> KC:\n");
    2fda:	81 e1       	ldi	r24, 0x11	; 17
    2fdc:	94 e0       	ldi	r25, 0x04	; 4
    2fde:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    2fe2:	65 e3       	ldi	r22, 0x35	; 53
    2fe4:	a6 2e       	mov	r10, r22
    2fe6:	6e e1       	ldi	r22, 0x1E	; 30
    2fe8:	b6 2e       	mov	r11, r22
    2fea:	6d eb       	ldi	r22, 0xBD	; 189
    2fec:	c6 2e       	mov	r12, r22
    2fee:	62 ec       	ldi	r22, 0xC2	; 194
    2ff0:	d6 2e       	mov	r13, r22
    2ff2:	12 e3       	ldi	r17, 0x32	; 50
    2ff4:	e1 2e       	mov	r14, r17
    2ff6:	15 e5       	ldi	r17, 0x55	; 85
    2ff8:	f1 2e       	mov	r15, r17
    2ffa:	0c e1       	ldi	r16, 0x1C	; 28
    2ffc:	12 e4       	ldi	r17, 0x42	; 66
    2ffe:	22 e4       	ldi	r18, 0x42	; 66
    3000:	30 e2       	ldi	r19, 0x20	; 32
    3002:	4d eb       	ldi	r20, 0xBD	; 189
    3004:	52 ec       	ldi	r21, 0xC2	; 194
    3006:	65 e2       	ldi	r22, 0x25	; 37
    3008:	76 e8       	ldi	r23, 0x86	; 134
    300a:	8c e1       	ldi	r24, 0x1C	; 28
    300c:	92 e4       	ldi	r25, 0x42	; 66
    300e:	0e 94 09 0b 	call	0x1612	; 0x1612 <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    301a:	8d e0       	ldi	r24, 0x0D	; 13
    301c:	94 e0       	ldi	r25, 0x04	; 4
    301e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3022:	2f e1       	ldi	r18, 0x1F	; 31
    3024:	81 ea       	ldi	r24, 0xA1	; 161
    3026:	97 e0       	ldi	r25, 0x07	; 7
    3028:	21 50       	subi	r18, 0x01	; 1
    302a:	80 40       	sbci	r24, 0x00	; 0
    302c:	90 40       	sbci	r25, 0x00	; 0
    302e:	e1 f7       	brne	.-8      	; 0x3028 <test_earth_distance+0xd6>
    3030:	00 c0       	rjmp	.+0      	; 0x3032 <test_earth_distance+0xe0>
    3032:	00 00       	nop
    _delay_ms(2500);

    //just for reference, UMaine coords are: 44.900 -68.667
}
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	df 90       	pop	r13
    303e:	cf 90       	pop	r12
    3040:	bf 90       	pop	r11
    3042:	af 90       	pop	r10
    3044:	08 95       	ret

00003046 <check_database_integrity>:
    3046:	cf 92       	push	r12
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	ec 01       	movw	r28, r24
    3058:	2a 81       	ldd	r18, Y+2	; 0x02
    305a:	3b 81       	ldd	r19, Y+3	; 0x03
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	00 e0       	ldi	r16, 0x00	; 0
    3062:	10 e0       	ldi	r17, 0x00	; 0
    3064:	71 c0       	rjmp	.+226    	; 0x3148 <check_database_integrity+0x102>
    3066:	c8 80       	ld	r12, Y
    3068:	d9 80       	ldd	r13, Y+1	; 0x01
    306a:	c8 0e       	add	r12, r24
    306c:	d9 1e       	adc	r13, r25
    306e:	f6 01       	movw	r30, r12
    3070:	e1 2c       	mov	r14, r1
    3072:	f1 2c       	mov	r15, r1
    3074:	41 91       	ld	r20, Z+
    3076:	40 52       	subi	r20, 0x20	; 32
    3078:	4f 35       	cpi	r20, 0x5F	; 95
    307a:	08 f4       	brcc	.+2      	; 0x307e <check_database_integrity+0x38>
    307c:	5a c0       	rjmp	.+180    	; 0x3132 <check_database_integrity+0xec>
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9b 8b       	std	Y+19, r25	; 0x13
    3084:	8a 8b       	std	Y+18, r24	; 0x12
    3086:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    308a:	82 e2       	ldi	r24, 0x22	; 34
    308c:	94 e0       	ldi	r25, 0x04	; 4
    308e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3092:	2f e7       	ldi	r18, 0x7F	; 127
    3094:	4a e1       	ldi	r20, 0x1A	; 26
    3096:	86 e0       	ldi	r24, 0x06	; 6
    3098:	21 50       	subi	r18, 0x01	; 1
    309a:	40 40       	sbci	r20, 0x00	; 0
    309c:	80 40       	sbci	r24, 0x00	; 0
    309e:	e1 f7       	brne	.-8      	; 0x3098 <check_database_integrity+0x52>
    30a0:	00 c0       	rjmp	.+0      	; 0x30a2 <check_database_integrity+0x5c>
    30a2:	00 00       	nop
    30a4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    30a8:	86 e3       	ldi	r24, 0x36	; 54
    30aa:	94 e0       	ldi	r25, 0x04	; 4
    30ac:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    30b0:	9f e9       	ldi	r25, 0x9F	; 159
    30b2:	26 e8       	ldi	r18, 0x86	; 134
    30b4:	41 e0       	ldi	r20, 0x01	; 1
    30b6:	91 50       	subi	r25, 0x01	; 1
    30b8:	20 40       	sbci	r18, 0x00	; 0
    30ba:	40 40       	sbci	r20, 0x00	; 0
    30bc:	e1 f7       	brne	.-8      	; 0x30b6 <check_database_integrity+0x70>
    30be:	00 c0       	rjmp	.+0      	; 0x30c0 <check_database_integrity+0x7a>
    30c0:	00 00       	nop
    30c2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    30c6:	8c e4       	ldi	r24, 0x4C	; 76
    30c8:	94 e0       	ldi	r25, 0x04	; 4
    30ca:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    30ce:	63 e0       	ldi	r22, 0x03	; 3
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	c8 01       	movw	r24, r16
    30d4:	01 96       	adiw	r24, 0x01	; 1
    30d6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    30da:	86 e5       	ldi	r24, 0x56	; 86
    30dc:	94 e0       	ldi	r25, 0x04	; 4
    30de:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    30e2:	87 e2       	ldi	r24, 0x27	; 39
    30e4:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    30e8:	f6 01       	movw	r30, r12
    30ea:	ee 0d       	add	r30, r14
    30ec:	ff 1d       	adc	r31, r15
    30ee:	80 81       	ld	r24, Z
    30f0:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    30f4:	87 e2       	ldi	r24, 0x27	; 39
    30f6:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    30fa:	8a e0       	ldi	r24, 0x0A	; 10
    30fc:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    3100:	8f e7       	ldi	r24, 0x7F	; 127
    3102:	9a e1       	ldi	r25, 0x1A	; 26
    3104:	26 e0       	ldi	r18, 0x06	; 6
    3106:	81 50       	subi	r24, 0x01	; 1
    3108:	90 40       	sbci	r25, 0x00	; 0
    310a:	20 40       	sbci	r18, 0x00	; 0
    310c:	e1 f7       	brne	.-8      	; 0x3106 <check_database_integrity+0xc0>
    310e:	00 c0       	rjmp	.+0      	; 0x3110 <check_database_integrity+0xca>
    3110:	00 00       	nop
    3112:	b8 01       	movw	r22, r16
    3114:	ce 01       	movw	r24, r28
    3116:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <print_callsign>
    311a:	4f ef       	ldi	r20, 0xFF	; 255
    311c:	84 e3       	ldi	r24, 0x34	; 52
    311e:	9c e0       	ldi	r25, 0x0C	; 12
    3120:	41 50       	subi	r20, 0x01	; 1
    3122:	80 40       	sbci	r24, 0x00	; 0
    3124:	90 40       	sbci	r25, 0x00	; 0
    3126:	e1 f7       	brne	.-8      	; 0x3120 <check_database_integrity+0xda>
    3128:	00 c0       	rjmp	.+0      	; 0x312a <check_database_integrity+0xe4>
    312a:	00 00       	nop
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	13 c0       	rjmp	.+38     	; 0x3158 <check_database_integrity+0x112>
    3132:	4f ef       	ldi	r20, 0xFF	; 255
    3134:	e4 1a       	sub	r14, r20
    3136:	f4 0a       	sbc	r15, r20
    3138:	48 e0       	ldi	r20, 0x08	; 8
    313a:	e4 16       	cp	r14, r20
    313c:	f1 04       	cpc	r15, r1
    313e:	09 f0       	breq	.+2      	; 0x3142 <check_database_integrity+0xfc>
    3140:	99 cf       	rjmp	.-206    	; 0x3074 <check_database_integrity+0x2e>
    3142:	0f 5f       	subi	r16, 0xFF	; 255
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	4c 96       	adiw	r24, 0x1c	; 28
    3148:	02 17       	cp	r16, r18
    314a:	13 07       	cpc	r17, r19
    314c:	0c f4       	brge	.+2      	; 0x3150 <check_database_integrity+0x10a>
    314e:	8b cf       	rjmp	.-234    	; 0x3066 <check_database_integrity+0x20>
    3150:	1b 8a       	std	Y+19, r1	; 0x13
    3152:	1a 8a       	std	Y+18, r1	; 0x12
    3154:	21 e0       	ldi	r18, 0x01	; 1
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	c9 01       	movw	r24, r18
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	1f 91       	pop	r17
    3160:	0f 91       	pop	r16
    3162:	ff 90       	pop	r15
    3164:	ef 90       	pop	r14
    3166:	df 90       	pop	r13
    3168:	cf 90       	pop	r12
    316a:	08 95       	ret

0000316c <main>:
    316c:	2f 92       	push	r2
    316e:	3f 92       	push	r3
    3170:	4f 92       	push	r4
    3172:	5f 92       	push	r5
    3174:	6f 92       	push	r6
    3176:	7f 92       	push	r7
    3178:	8f 92       	push	r8
    317a:	9f 92       	push	r9
    317c:	af 92       	push	r10
    317e:	bf 92       	push	r11
    3180:	cf 92       	push	r12
    3182:	df 92       	push	r13
    3184:	ef 92       	push	r14
    3186:	ff 92       	push	r15
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	00 d0       	rcall	.+0      	; 0x3192 <main+0x26>
    3192:	1f 92       	push	r1
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	8b e0       	ldi	r24, 0x0B	; 11
    319a:	91 e0       	ldi	r25, 0x01	; 1
    319c:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <malloc>
    31a0:	90 93 5f 04 	sts	0x045F, r25
    31a4:	80 93 5e 04 	sts	0x045E, r24
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	39 f4       	brne	.+14     	; 0x31ba <main+0x4e>
    31ac:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    31b0:	8f e2       	ldi	r24, 0x2F	; 47
    31b2:	91 e0       	ldi	r25, 0x01	; 1
    31b4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    31b8:	ff c2       	rjmp	.+1534   	; 0x37b8 <main+0x64c>
    31ba:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <prepare_device>
    31be:	89 2b       	or	r24, r25
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <main+0x58>
    31c2:	fa c2       	rjmp	.+1524   	; 0x37b8 <main+0x64c>
    31c4:	89 e5       	ldi	r24, 0x59	; 89
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <malloc>
    31cc:	8a 83       	std	Y+2, r24	; 0x02
    31ce:	9b 83       	std	Y+3, r25	; 0x03
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	89 2b       	or	r24, r25
    31d6:	51 f3       	breq	.-44     	; 0x31ac <main+0x40>
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a0 e8       	ldi	r26, 0x80	; 128
    31de:	bf eb       	ldi	r27, 0xBF	; 191
    31e0:	ea 81       	ldd	r30, Y+2	; 0x02
    31e2:	fb 81       	ldd	r31, Y+3	; 0x03
    31e4:	85 ab       	std	Z+53, r24	; 0x35
    31e6:	96 ab       	std	Z+54, r25	; 0x36
    31e8:	a7 ab       	std	Z+55, r26	; 0x37
    31ea:	b0 af       	std	Z+56, r27	; 0x38
    31ec:	ef 5b       	subi	r30, 0xBF	; 191
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 83       	st	Z, r24
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	a2 83       	std	Z+2, r26	; 0x02
    31f6:	b3 83       	std	Z+3, r27	; 0x03
    31f8:	ea 81       	ldd	r30, Y+2	; 0x02
    31fa:	fb 81       	ldd	r31, Y+3	; 0x03
    31fc:	e3 5b       	subi	r30, 0xB3	; 179
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	2f ef       	ldi	r18, 0xFF	; 255
    3202:	20 83       	st	Z, r18
    3204:	ea 81       	ldd	r30, Y+2	; 0x02
    3206:	fb 81       	ldd	r31, Y+3	; 0x03
    3208:	e2 5b       	subi	r30, 0xB2	; 178
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	20 83       	st	Z, r18
    320e:	ea 81       	ldd	r30, Y+2	; 0x02
    3210:	fb 81       	ldd	r31, Y+3	; 0x03
    3212:	e1 5b       	subi	r30, 0xB1	; 177
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	20 83       	st	Z, r18
    3218:	ea 81       	ldd	r30, Y+2	; 0x02
    321a:	fb 81       	ldd	r31, Y+3	; 0x03
    321c:	81 af       	std	Z+57, r24	; 0x39
    321e:	92 af       	std	Z+58, r25	; 0x3a
    3220:	a3 af       	std	Z+59, r26	; 0x3b
    3222:	b4 af       	std	Z+60, r27	; 0x3c
    3224:	eb 5b       	subi	r30, 0xBB	; 187
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 83       	st	Z, r24
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	a2 83       	std	Z+2, r26	; 0x02
    322e:	b3 83       	std	Z+3, r27	; 0x03
    3230:	ea 81       	ldd	r30, Y+2	; 0x02
    3232:	fb 81       	ldd	r31, Y+3	; 0x03
    3234:	e0 5b       	subi	r30, 0xB0	; 176
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	20 83       	st	Z, r18
    323a:	ea 81       	ldd	r30, Y+2	; 0x02
    323c:	fb 81       	ldd	r31, Y+3	; 0x03
    323e:	ef 5a       	subi	r30, 0xAF	; 175
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	20 83       	st	Z, r18
    3244:	ea 81       	ldd	r30, Y+2	; 0x02
    3246:	fb 81       	ldd	r31, Y+3	; 0x03
    3248:	ee 5a       	subi	r30, 0xAE	; 174
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	20 83       	st	Z, r18
    324e:	ea 81       	ldd	r30, Y+2	; 0x02
    3250:	fb 81       	ldd	r31, Y+3	; 0x03
    3252:	fd 96       	adiw	r30, 0x3d	; 61
    3254:	80 83       	st	Z, r24
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	a2 83       	std	Z+2, r26	; 0x02
    325a:	b3 83       	std	Z+3, r27	; 0x03
    325c:	ea 81       	ldd	r30, Y+2	; 0x02
    325e:	fb 81       	ldd	r31, Y+3	; 0x03
    3260:	e7 5b       	subi	r30, 0xB7	; 183
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 83       	st	Z, r24
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	a2 83       	std	Z+2, r26	; 0x02
    326a:	b3 83       	std	Z+3, r27	; 0x03
    326c:	ea 81       	ldd	r30, Y+2	; 0x02
    326e:	fb 81       	ldd	r31, Y+3	; 0x03
    3270:	ed 5a       	subi	r30, 0xAD	; 173
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	20 83       	st	Z, r18
    3276:	ea 81       	ldd	r30, Y+2	; 0x02
    3278:	fb 81       	ldd	r31, Y+3	; 0x03
    327a:	ec 5a       	subi	r30, 0xAC	; 172
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	20 83       	st	Z, r18
    3280:	ea 81       	ldd	r30, Y+2	; 0x02
    3282:	fb 81       	ldd	r31, Y+3	; 0x03
    3284:	eb 5a       	subi	r30, 0xAB	; 171
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	20 83       	st	Z, r18
    328a:	84 e1       	ldi	r24, 0x14	; 20
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <malloc>
    3292:	8c 01       	movw	r16, r24
    3294:	00 97       	sbiw	r24, 0x00	; 0
    3296:	09 f4       	brne	.+2      	; 0x329a <main+0x12e>
    3298:	89 cf       	rjmp	.-238    	; 0x31ac <main+0x40>
    329a:	8a e3       	ldi	r24, 0x3A	; 58
    329c:	91 e0       	ldi	r25, 0x01	; 1
    329e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    32a2:	c8 01       	movw	r24, r16
    32a4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <database_load>
    32a8:	ff e3       	ldi	r31, 0x3F	; 63
    32aa:	2d e0       	ldi	r18, 0x0D	; 13
    32ac:	83 e0       	ldi	r24, 0x03	; 3
    32ae:	f1 50       	subi	r31, 0x01	; 1
    32b0:	20 40       	sbci	r18, 0x00	; 0
    32b2:	80 40       	sbci	r24, 0x00	; 0
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <main+0x142>
    32b6:	00 c0       	rjmp	.+0      	; 0x32b8 <main+0x14c>
    32b8:	00 00       	nop
    32ba:	e0 91 5e 04 	lds	r30, 0x045E
    32be:	f0 91 5f 04 	lds	r31, 0x045F
    32c2:	e7 5f       	subi	r30, 0xF7	; 247
    32c4:	fe 4f       	sbci	r31, 0xFE	; 254
    32c6:	11 82       	std	Z+1, r1	; 0x01
    32c8:	10 82       	st	Z, r1
    32ca:	2a 80       	ldd	r2, Y+2	; 0x02
    32cc:	3b 80       	ldd	r3, Y+3	; 0x03
    32ce:	96 e5       	ldi	r25, 0x56	; 86
    32d0:	29 0e       	add	r2, r25
    32d2:	31 1c       	adc	r3, r1
    32d4:	4a 80       	ldd	r4, Y+2	; 0x02
    32d6:	5b 80       	ldd	r5, Y+3	; 0x03
    32d8:	a7 e5       	ldi	r26, 0x57	; 87
    32da:	4a 0e       	add	r4, r26
    32dc:	51 1c       	adc	r5, r1
    32de:	6a 80       	ldd	r6, Y+2	; 0x02
    32e0:	7b 80       	ldd	r7, Y+3	; 0x03
    32e2:	b8 e5       	ldi	r27, 0x58	; 88
    32e4:	6b 0e       	add	r6, r27
    32e6:	71 1c       	adc	r7, r1
    32e8:	93 e0       	ldi	r25, 0x03	; 3
    32ea:	a9 2e       	mov	r10, r25
    32ec:	b1 2c       	mov	r11, r1
    32ee:	26 e0       	ldi	r18, 0x06	; 6
    32f0:	c2 2e       	mov	r12, r18
    32f2:	d1 2c       	mov	r13, r1
    32f4:	8a 80       	ldd	r8, Y+2	; 0x02
    32f6:	9b 80       	ldd	r9, Y+3	; 0x03
    32f8:	e8 e0       	ldi	r30, 0x08	; 8
    32fa:	8e 0e       	add	r8, r30
    32fc:	91 1c       	adc	r9, r1
    32fe:	80 91 5e 04 	lds	r24, 0x045E
    3302:	90 91 5f 04 	lds	r25, 0x045F
    3306:	dc 01       	movw	r26, r24
    3308:	18 96       	adiw	r26, 0x08	; 8
    330a:	2d 91       	ld	r18, X+
    330c:	3c 91       	ld	r19, X
    330e:	19 97       	sbiw	r26, 0x09	; 9
    3310:	1b 96       	adiw	r26, 0x0b	; 11
    3312:	3c 93       	st	X, r19
    3314:	2e 93       	st	-X, r18
    3316:	1a 97       	sbiw	r26, 0x0a	; 10
    3318:	fc 01       	movw	r30, r24
    331a:	e7 5f       	subi	r30, 0xF7	; 247
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	20 81       	ld	r18, Z
    3320:	31 81       	ldd	r19, Z+1	; 0x01
    3322:	23 2b       	or	r18, r19
    3324:	11 f4       	brne	.+4      	; 0x332a <main+0x1be>
    3326:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <sync_leds>
    332a:	80 91 5e 04 	lds	r24, 0x045E
    332e:	90 91 5f 04 	lds	r25, 0x045F
    3332:	fc 01       	movw	r30, r24
    3334:	20 85       	ldd	r18, Z+8	; 0x08
    3336:	31 85       	ldd	r19, Z+9	; 0x09
    3338:	23 30       	cpi	r18, 0x03	; 3
    333a:	31 05       	cpc	r19, r1
    333c:	09 f4       	brne	.+2      	; 0x3340 <main+0x1d4>
    333e:	e6 c0       	rjmp	.+460    	; 0x350c <main+0x3a0>
    3340:	4c f4       	brge	.+18     	; 0x3354 <main+0x1e8>
    3342:	21 30       	cpi	r18, 0x01	; 1
    3344:	31 05       	cpc	r19, r1
    3346:	09 f4       	brne	.+2      	; 0x334a <main+0x1de>
    3348:	76 c0       	rjmp	.+236    	; 0x3436 <main+0x2ca>
    334a:	0c f0       	brlt	.+2      	; 0x334e <main+0x1e2>
    334c:	c8 c0       	rjmp	.+400    	; 0x34de <main+0x372>
    334e:	23 2b       	or	r18, r19
    3350:	79 f0       	breq	.+30     	; 0x3370 <main+0x204>
    3352:	d5 cf       	rjmp	.-86     	; 0x32fe <main+0x192>
    3354:	25 30       	cpi	r18, 0x05	; 5
    3356:	31 05       	cpc	r19, r1
    3358:	09 f4       	brne	.+2      	; 0x335c <main+0x1f0>
    335a:	4c c1       	rjmp	.+664    	; 0x35f4 <main+0x488>
    335c:	0c f4       	brge	.+2      	; 0x3360 <main+0x1f4>
    335e:	fe c0       	rjmp	.+508    	; 0x355c <main+0x3f0>
    3360:	26 30       	cpi	r18, 0x06	; 6
    3362:	31 05       	cpc	r19, r1
    3364:	09 f4       	brne	.+2      	; 0x3368 <main+0x1fc>
    3366:	63 c1       	rjmp	.+710    	; 0x362e <main+0x4c2>
    3368:	27 30       	cpi	r18, 0x07	; 7
    336a:	31 05       	cpc	r19, r1
    336c:	41 f6       	brne	.-112    	; 0x32fe <main+0x192>
    336e:	62 c1       	rjmp	.+708    	; 0x3634 <main+0x4c8>
    3370:	d8 01       	movw	r26, r16
    3372:	12 96       	adiw	r26, 0x02	; 2
    3374:	2d 91       	ld	r18, X+
    3376:	3c 91       	ld	r19, X
    3378:	13 97       	sbiw	r26, 0x03	; 3
    337a:	12 16       	cp	r1, r18
    337c:	13 06       	cpc	r1, r19
    337e:	14 f0       	brlt	.+4      	; 0x3384 <main+0x218>
    3380:	fc 01       	movw	r30, r24
    3382:	d3 c1       	rjmp	.+934    	; 0x372a <main+0x5be>
    3384:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enable_gps>
    3388:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    338c:	8e e4       	ldi	r24, 0x4E	; 78
    338e:	91 e0       	ldi	r25, 0x01	; 1
    3390:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3394:	83 e2       	ldi	r24, 0x23	; 35
    3396:	94 ef       	ldi	r25, 0xF4	; 244
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <main+0x22c>
    339c:	00 c0       	rjmp	.+0      	; 0x339e <main+0x232>
    339e:	00 00       	nop
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	9b 81       	ldd	r25, Y+3	; 0x03
    33a4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <gps_locked>
    33a8:	89 2b       	or	r24, r25
    33aa:	91 f0       	breq	.+36     	; 0x33d0 <main+0x264>
    33ac:	89 e5       	ldi	r24, 0x59	; 89
    33ae:	91 e0       	ldi	r25, 0x01	; 1
    33b0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    33b4:	68 e0       	ldi	r22, 0x08	; 8
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	c4 01       	movw	r24, r8
    33ba:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    33be:	9f ee       	ldi	r25, 0xEF	; 239
    33c0:	a9 e4       	ldi	r26, 0x49	; 73
    33c2:	b2 e0       	ldi	r27, 0x02	; 2
    33c4:	91 50       	subi	r25, 0x01	; 1
    33c6:	a0 40       	sbci	r26, 0x00	; 0
    33c8:	b0 40       	sbci	r27, 0x00	; 0
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <main+0x258>
    33cc:	00 c0       	rjmp	.+0      	; 0x33ce <main+0x262>
    33ce:	00 00       	nop
    33d0:	80 91 5e 04 	lds	r24, 0x045E
    33d4:	90 91 5f 04 	lds	r25, 0x045F
    33d8:	fc 01       	movw	r30, r24
    33da:	40 85       	ldd	r20, Z+8	; 0x08
    33dc:	51 85       	ldd	r21, Z+9	; 0x09
    33de:	22 85       	ldd	r18, Z+10	; 0x0a
    33e0:	33 85       	ldd	r19, Z+11	; 0x0b
    33e2:	42 17       	cp	r20, r18
    33e4:	53 07       	cpc	r21, r19
    33e6:	09 f0       	breq	.+2      	; 0x33ea <main+0x27e>
    33e8:	8a cf       	rjmp	.-236    	; 0x32fe <main+0x192>
    33ea:	6a 81       	ldd	r22, Y+2	; 0x02
    33ec:	7b 81       	ldd	r23, Y+3	; 0x03
    33ee:	0e 94 48 10 	call	0x2090	; 0x2090 <sync_gps_data>
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
    33f6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <gps_locked>
    33fa:	89 2b       	or	r24, r25
    33fc:	51 f0       	breq	.+20     	; 0x3412 <main+0x2a6>
    33fe:	4a 81       	ldd	r20, Y+2	; 0x02
    3400:	5b 81       	ldd	r21, Y+3	; 0x03
    3402:	b8 01       	movw	r22, r16
    3404:	80 91 5e 04 	lds	r24, 0x045E
    3408:	90 91 5f 04 	lds	r25, 0x045F
    340c:	0e 94 4f 13 	call	0x269e	; 0x269e <show_nearest_station>
    3410:	76 cf       	rjmp	.-276    	; 0x32fe <main+0x192>
    3412:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3416:	8f e5       	ldi	r24, 0x5F	; 95
    3418:	91 e0       	ldi	r25, 0x01	; 1
    341a:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    341e:	8e e6       	ldi	r24, 0x6E	; 110
    3420:	91 e0       	ldi	r25, 0x01	; 1
    3422:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3426:	ff e7       	ldi	r31, 0x7F	; 127
    3428:	2a e1       	ldi	r18, 0x1A	; 26
    342a:	86 e0       	ldi	r24, 0x06	; 6
    342c:	f1 50       	subi	r31, 0x01	; 1
    342e:	20 40       	sbci	r18, 0x00	; 0
    3430:	80 40       	sbci	r24, 0x00	; 0
    3432:	e1 f7       	brne	.-8      	; 0x342c <main+0x2c0>
    3434:	8a c1       	rjmp	.+788    	; 0x374a <main+0x5de>
    3436:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    343a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enable_gps>
    343e:	6a 81       	ldd	r22, Y+2	; 0x02
    3440:	7b 81       	ldd	r23, Y+3	; 0x03
    3442:	80 91 5e 04 	lds	r24, 0x045E
    3446:	90 91 5f 04 	lds	r25, 0x045F
    344a:	0e 94 48 10 	call	0x2090	; 0x2090 <sync_gps_data>
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	9b 81       	ldd	r25, Y+3	; 0x03
    3452:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <gps_locked>
    3456:	89 2b       	or	r24, r25
    3458:	81 f1       	breq	.+96     	; 0x34ba <main+0x34e>
    345a:	8c e7       	ldi	r24, 0x7C	; 124
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3462:	aa 81       	ldd	r26, Y+2	; 0x02
    3464:	bb 81       	ldd	r27, Y+3	; 0x03
    3466:	51 96       	adiw	r26, 0x11	; 17
    3468:	6d 91       	ld	r22, X+
    346a:	7d 91       	ld	r23, X+
    346c:	8d 91       	ld	r24, X+
    346e:	9c 91       	ld	r25, X
    3470:	54 97       	sbiw	r26, 0x14	; 20
    3472:	43 e0       	ldi	r20, 0x03	; 3
    3474:	50 e0       	ldi	r21, 0x00	; 0
    3476:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    347a:	87 ed       	ldi	r24, 0xD7	; 215
    347c:	92 e0       	ldi	r25, 0x02	; 2
    347e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3482:	ea 81       	ldd	r30, Y+2	; 0x02
    3484:	fb 81       	ldd	r31, Y+3	; 0x03
    3486:	65 89       	ldd	r22, Z+21	; 0x15
    3488:	76 89       	ldd	r23, Z+22	; 0x16
    348a:	87 89       	ldd	r24, Z+23	; 0x17
    348c:	90 8d       	ldd	r25, Z+24	; 0x18
    348e:	43 e0       	ldi	r20, 0x03	; 3
    3490:	50 e0       	ldi	r21, 0x00	; 0
    3492:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    3496:	ff e7       	ldi	r31, 0x7F	; 127
    3498:	2a e1       	ldi	r18, 0x1A	; 26
    349a:	86 e0       	ldi	r24, 0x06	; 6
    349c:	f1 50       	subi	r31, 0x01	; 1
    349e:	20 40       	sbci	r18, 0x00	; 0
    34a0:	80 40       	sbci	r24, 0x00	; 0
    34a2:	e1 f7       	brne	.-8      	; 0x349c <main+0x330>
    34a4:	00 c0       	rjmp	.+0      	; 0x34a6 <main+0x33a>
    34a6:	00 00       	nop
    34a8:	6a 81       	ldd	r22, Y+2	; 0x02
    34aa:	7b 81       	ldd	r23, Y+3	; 0x03
    34ac:	80 91 5e 04 	lds	r24, 0x045E
    34b0:	90 91 5f 04 	lds	r25, 0x045F
    34b4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <print_gps_data_concise>
    34b8:	22 cf       	rjmp	.-444    	; 0x32fe <main+0x192>
    34ba:	8f e5       	ldi	r24, 0x5F	; 95
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    34c2:	8e e6       	ldi	r24, 0x6E	; 110
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    34ca:	9f e7       	ldi	r25, 0x7F	; 127
    34cc:	aa e1       	ldi	r26, 0x1A	; 26
    34ce:	b6 e0       	ldi	r27, 0x06	; 6
    34d0:	91 50       	subi	r25, 0x01	; 1
    34d2:	a0 40       	sbci	r26, 0x00	; 0
    34d4:	b0 40       	sbci	r27, 0x00	; 0
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <main+0x364>
    34d8:	00 c0       	rjmp	.+0      	; 0x34da <main+0x36e>
    34da:	00 00       	nop
    34dc:	38 c0       	rjmp	.+112    	; 0x354e <main+0x3e2>
    34de:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    34e2:	86 e8       	ldi	r24, 0x86	; 134
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    34ea:	ef e7       	ldi	r30, 0x7F	; 127
    34ec:	fa e1       	ldi	r31, 0x1A	; 26
    34ee:	26 e0       	ldi	r18, 0x06	; 6
    34f0:	e1 50       	subi	r30, 0x01	; 1
    34f2:	f0 40       	sbci	r31, 0x00	; 0
    34f4:	20 40       	sbci	r18, 0x00	; 0
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <main+0x384>
    34f8:	00 c0       	rjmp	.+0      	; 0x34fa <main+0x38e>
    34fa:	00 00       	nop
    34fc:	b8 01       	movw	r22, r16
    34fe:	80 91 5e 04 	lds	r24, 0x045E
    3502:	90 91 5f 04 	lds	r25, 0x045F
    3506:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <print_all_known_stations>
    350a:	f9 ce       	rjmp	.-526    	; 0x32fe <main+0x192>
    350c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3510:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enable_gps>
    3514:	6a 81       	ldd	r22, Y+2	; 0x02
    3516:	7b 81       	ldd	r23, Y+3	; 0x03
    3518:	80 91 5e 04 	lds	r24, 0x045E
    351c:	90 91 5f 04 	lds	r25, 0x045F
    3520:	0e 94 48 10 	call	0x2090	; 0x2090 <sync_gps_data>
    3524:	8b e9       	ldi	r24, 0x9B	; 155
    3526:	91 e0       	ldi	r25, 0x01	; 1
    3528:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    352c:	8f e9       	ldi	r24, 0x9F	; 159
    352e:	96 e8       	ldi	r25, 0x86	; 134
    3530:	a1 e0       	ldi	r26, 0x01	; 1
    3532:	81 50       	subi	r24, 0x01	; 1
    3534:	90 40       	sbci	r25, 0x00	; 0
    3536:	a0 40       	sbci	r26, 0x00	; 0
    3538:	e1 f7       	brne	.-8      	; 0x3532 <main+0x3c6>
    353a:	00 c0       	rjmp	.+0      	; 0x353c <main+0x3d0>
    353c:	00 00       	nop
    353e:	6a 81       	ldd	r22, Y+2	; 0x02
    3540:	7b 81       	ldd	r23, Y+3	; 0x03
    3542:	80 91 5e 04 	lds	r24, 0x045E
    3546:	90 91 5f 04 	lds	r25, 0x045F
    354a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <print_gps_data>
    354e:	80 91 5e 04 	lds	r24, 0x045E
    3552:	90 91 5f 04 	lds	r25, 0x045F
    3556:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <print_raw_gps_data>
    355a:	d1 ce       	rjmp	.-606    	; 0x32fe <main+0x192>
    355c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3560:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enable_gps>
    3564:	6a 81       	ldd	r22, Y+2	; 0x02
    3566:	7b 81       	ldd	r23, Y+3	; 0x03
    3568:	80 91 5e 04 	lds	r24, 0x045E
    356c:	90 91 5f 04 	lds	r25, 0x045F
    3570:	0e 94 48 10 	call	0x2090	; 0x2090 <sync_gps_data>
    3574:	83 ea       	ldi	r24, 0xA3	; 163
    3576:	91 e0       	ldi	r25, 0x01	; 1
    3578:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    357c:	e3 e2       	ldi	r30, 0x23	; 35
    357e:	f4 ef       	ldi	r31, 0xF4	; 244
    3580:	31 97       	sbiw	r30, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <main+0x414>
    3584:	00 c0       	rjmp	.+0      	; 0x3586 <main+0x41a>
    3586:	00 00       	nop
    3588:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    358c:	8b ea       	ldi	r24, 0xAB	; 171
    358e:	91 e0       	ldi	r25, 0x01	; 1
    3590:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3594:	aa 81       	ldd	r26, Y+2	; 0x02
    3596:	bb 81       	ldd	r27, Y+3	; 0x03
    3598:	5d 96       	adiw	r26, 0x1d	; 29
    359a:	6d 91       	ld	r22, X+
    359c:	7d 91       	ld	r23, X+
    359e:	8d 91       	ld	r24, X+
    35a0:	9c 91       	ld	r25, X
    35a2:	90 97       	sbiw	r26, 0x20	; 32
    35a4:	41 e0       	ldi	r20, 0x01	; 1
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    35ac:	8f ed       	ldi	r24, 0xDF	; 223
    35ae:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    35b2:	8c ef       	ldi	r24, 0xFC	; 252
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    35ba:	f1 01       	movw	r30, r2
    35bc:	80 81       	ld	r24, Z
    35be:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    35c2:	d2 01       	movw	r26, r4
    35c4:	8c 91       	ld	r24, X
    35c6:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    35ca:	f3 01       	movw	r30, r6
    35cc:	80 81       	ld	r24, Z
    35ce:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    35d2:	81 eb       	ldi	r24, 0xB1	; 177
    35d4:	91 e0       	ldi	r25, 0x01	; 1
    35d6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    35da:	aa 81       	ldd	r26, Y+2	; 0x02
    35dc:	bb 81       	ldd	r27, Y+3	; 0x03
    35de:	59 96       	adiw	r26, 0x19	; 25
    35e0:	6d 91       	ld	r22, X+
    35e2:	7d 91       	ld	r23, X+
    35e4:	8d 91       	ld	r24, X+
    35e6:	9c 91       	ld	r25, X
    35e8:	5c 97       	sbiw	r26, 0x1c	; 28
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    35f2:	a4 c0       	rjmp	.+328    	; 0x373c <main+0x5d0>
    35f4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    35f8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enable_gps>
    35fc:	6a 81       	ldd	r22, Y+2	; 0x02
    35fe:	7b 81       	ldd	r23, Y+3	; 0x03
    3600:	80 91 5e 04 	lds	r24, 0x045E
    3604:	90 91 5f 04 	lds	r25, 0x045F
    3608:	0e 94 48 10 	call	0x2090	; 0x2090 <sync_gps_data>
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	9b 81       	ldd	r25, Y+3	; 0x03
    3610:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <gps_locked>
    3614:	89 2b       	or	r24, r25
    3616:	09 f4       	brne	.+2      	; 0x361a <main+0x4ae>
    3618:	fc ce       	rjmp	.-520    	; 0x3412 <main+0x2a6>
    361a:	4a 81       	ldd	r20, Y+2	; 0x02
    361c:	5b 81       	ldd	r21, Y+3	; 0x03
    361e:	b8 01       	movw	r22, r16
    3620:	80 91 5e 04 	lds	r24, 0x045E
    3624:	90 91 5f 04 	lds	r25, 0x045F
    3628:	0e 94 5e 12 	call	0x24bc	; 0x24bc <list_nearest_stations>
    362c:	68 ce       	rjmp	.-816    	; 0x32fe <main+0x192>
    362e:	0e 94 3b 11 	call	0x2276	; 0x2276 <wait_for_update>
    3632:	65 ce       	rjmp	.-822    	; 0x32fe <main+0x192>
    3634:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <disable_gps>
    3638:	e0 91 5e 04 	lds	r30, 0x045E
    363c:	f0 91 5f 04 	lds	r31, 0x045F
    3640:	df 01       	movw	r26, r30
    3642:	a7 5f       	subi	r26, 0xF7	; 247
    3644:	be 4f       	sbci	r27, 0xFE	; 254
    3646:	ee 24       	eor	r14, r14
    3648:	e3 94       	inc	r14
    364a:	f1 2c       	mov	r15, r1
    364c:	11 96       	adiw	r26, 0x01	; 1
    364e:	fc 92       	st	X, r15
    3650:	ee 92       	st	-X, r14
    3652:	df 01       	movw	r26, r30
    3654:	ad 5f       	subi	r26, 0xFD	; 253
    3656:	be 4f       	sbci	r27, 0xFE	; 254
    3658:	11 96       	adiw	r26, 0x01	; 1
    365a:	1c 92       	st	X, r1
    365c:	1e 92       	st	-X, r1
    365e:	df 01       	movw	r26, r30
    3660:	ab 5f       	subi	r26, 0xFB	; 251
    3662:	be 4f       	sbci	r27, 0xFE	; 254
    3664:	11 96       	adiw	r26, 0x01	; 1
    3666:	fc 92       	st	X, r15
    3668:	ee 92       	st	-X, r14
    366a:	df 01       	movw	r26, r30
    366c:	a9 5f       	subi	r26, 0xF9	; 249
    366e:	be 4f       	sbci	r27, 0xFE	; 254
    3670:	11 96       	adiw	r26, 0x01	; 1
    3672:	bc 92       	st	X, r11
    3674:	ae 92       	st	-X, r10
    3676:	84 81       	ldd	r24, Z+4	; 0x04
    3678:	95 81       	ldd	r25, Z+5	; 0x05
    367a:	89 2b       	or	r24, r25
    367c:	b1 f4       	brne	.+44     	; 0x36aa <main+0x53e>
    367e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3682:	8a eb       	ldi	r24, 0xBA	; 186
    3684:	91 e0       	ldi	r25, 0x01	; 1
    3686:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    368a:	e0 91 5e 04 	lds	r30, 0x045E
    368e:	f0 91 5f 04 	lds	r31, 0x045F
    3692:	f5 82       	std	Z+5, r15	; 0x05
    3694:	e4 82       	std	Z+4, r14	; 0x04
    3696:	d8 01       	movw	r26, r16
    3698:	53 96       	adiw	r26, 0x13	; 19
    369a:	1c 92       	st	X, r1
    369c:	1e 92       	st	-X, r1
    369e:	52 97       	sbiw	r26, 0x12	; 18
    36a0:	17 82       	std	Z+7, r1	; 0x07
    36a2:	16 82       	std	Z+6, r1	; 0x06
    36a4:	c8 01       	movw	r24, r16
    36a6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <database_free>
    36aa:	e0 90 5e 04 	lds	r14, 0x045E
    36ae:	f0 90 5f 04 	lds	r15, 0x045F
    36b2:	f7 01       	movw	r30, r14
    36b4:	e2 57       	subi	r30, 0x72	; 114
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	90 81       	ld	r25, Z
    36ba:	f7 01       	movw	r30, r14
    36bc:	e1 57       	subi	r30, 0x71	; 113
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	98 17       	cp	r25, r24
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <main+0x55c>
    36c6:	52 c0       	rjmp	.+164    	; 0x376c <main+0x600>
    36c8:	f7 01       	movw	r30, r14
    36ca:	10 82       	st	Z, r1
    36cc:	11 82       	std	Z+1, r1	; 0x01
    36ce:	12 82       	std	Z+2, r1	; 0x02
    36d0:	13 82       	std	Z+3, r1	; 0x03
    36d2:	c7 01       	movw	r24, r14
    36d4:	0e 94 b0 10 	call	0x2160	; 0x2160 <getChar>
    36d8:	68 2f       	mov	r22, r24
    36da:	80 91 5e 04 	lds	r24, 0x045E
    36de:	90 91 5f 04 	lds	r25, 0x045F
    36e2:	69 83       	std	Y+1, r22	; 0x01
    36e4:	0e 94 94 10 	call	0x2128	; 0x2128 <detectSerialEnd>
    36e8:	e0 91 5e 04 	lds	r30, 0x045E
    36ec:	f0 91 5f 04 	lds	r31, 0x045F
    36f0:	69 81       	ldd	r22, Y+1	; 0x01
    36f2:	89 2b       	or	r24, r25
    36f4:	69 f1       	breq	.+90     	; 0x3750 <main+0x5e4>
    36f6:	40 e0       	ldi	r20, 0x00	; 0
    36f8:	50 e0       	ldi	r21, 0x00	; 0
    36fa:	b8 01       	movw	r22, r16
    36fc:	cf 01       	movw	r24, r30
    36fe:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <terminate_serial>
    3702:	c8 01       	movw	r24, r16
    3704:	0e 94 23 18 	call	0x3046	; 0x3046 <check_database_integrity>
    3708:	d8 01       	movw	r26, r16
    370a:	52 96       	adiw	r26, 0x12	; 18
    370c:	8d 91       	ld	r24, X+
    370e:	9c 91       	ld	r25, X
    3710:	53 97       	sbiw	r26, 0x13	; 19
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	69 f4       	brne	.+26     	; 0x3730 <main+0x5c4>
    3716:	80 91 5e 04 	lds	r24, 0x045E
    371a:	90 91 5f 04 	lds	r25, 0x045F
    371e:	0e 94 18 11 	call	0x2230	; 0x2230 <wipe_eeprom>
    3722:	e0 91 5e 04 	lds	r30, 0x045E
    3726:	f0 91 5f 04 	lds	r31, 0x045F
    372a:	d1 86       	std	Z+9, r13	; 0x09
    372c:	c0 86       	std	Z+8, r12	; 0x08
    372e:	e7 cd       	rjmp	.-1074   	; 0x32fe <main+0x192>
    3730:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3734:	83 ed       	ldi	r24, 0xD3	; 211
    3736:	91 e0       	ldi	r25, 0x01	; 1
    3738:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    373c:	bf e3       	ldi	r27, 0x3F	; 63
    373e:	ed e0       	ldi	r30, 0x0D	; 13
    3740:	f3 e0       	ldi	r31, 0x03	; 3
    3742:	b1 50       	subi	r27, 0x01	; 1
    3744:	e0 40       	sbci	r30, 0x00	; 0
    3746:	f0 40       	sbci	r31, 0x00	; 0
    3748:	e1 f7       	brne	.-8      	; 0x3742 <main+0x5d6>
    374a:	00 c0       	rjmp	.+0      	; 0x374c <main+0x5e0>
    374c:	00 00       	nop
    374e:	d7 cd       	rjmp	.-1106   	; 0x32fe <main+0x192>
    3750:	86 81       	ldd	r24, Z+6	; 0x06
    3752:	97 81       	ldd	r25, Z+7	; 0x07
    3754:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__eewr_byte_m1284p>
    3758:	e0 91 5e 04 	lds	r30, 0x045E
    375c:	f0 91 5f 04 	lds	r31, 0x045F
    3760:	86 81       	ldd	r24, Z+6	; 0x06
    3762:	97 81       	ldd	r25, Z+7	; 0x07
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	97 83       	std	Z+7, r25	; 0x07
    3768:	86 83       	std	Z+6, r24	; 0x06
    376a:	c9 cd       	rjmp	.-1134   	; 0x32fe <main+0x192>
    376c:	d7 01       	movw	r26, r14
    376e:	6d 91       	ld	r22, X+
    3770:	7d 91       	ld	r23, X+
    3772:	8d 91       	ld	r24, X+
    3774:	9c 91       	ld	r25, X
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e8       	ldi	r20, 0x80	; 128
    377c:	5f e3       	ldi	r21, 0x3F	; 63
    377e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__addsf3>
    3782:	ab 01       	movw	r20, r22
    3784:	bc 01       	movw	r22, r24
    3786:	f7 01       	movw	r30, r14
    3788:	40 83       	st	Z, r20
    378a:	51 83       	std	Z+1, r21	; 0x01
    378c:	62 83       	std	Z+2, r22	; 0x02
    378e:	73 83       	std	Z+3, r23	; 0x03
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e5       	ldi	r19, 0x50	; 80
    379c:	43 e4       	ldi	r20, 0x43	; 67
    379e:	57 e4       	ldi	r21, 0x47	; 71
    37a0:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <__gesf2>
    37a4:	18 16       	cp	r1, r24
    37a6:	0c f0       	brlt	.+2      	; 0x37aa <main+0x63e>
    37a8:	aa cd       	rjmp	.-1196   	; 0x32fe <main+0x192>
    37aa:	41 e0       	ldi	r20, 0x01	; 1
    37ac:	50 e0       	ldi	r21, 0x00	; 0
    37ae:	b8 01       	movw	r22, r16
    37b0:	c7 01       	movw	r24, r14
    37b2:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <terminate_serial>
    37b6:	af cf       	rjmp	.-162    	; 0x3716 <main+0x5aa>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	ff 90       	pop	r15
    37cc:	ef 90       	pop	r14
    37ce:	df 90       	pop	r13
    37d0:	cf 90       	pop	r12
    37d2:	bf 90       	pop	r11
    37d4:	af 90       	pop	r10
    37d6:	9f 90       	pop	r9
    37d8:	8f 90       	pop	r8
    37da:	7f 90       	pop	r7
    37dc:	6f 90       	pop	r6
    37de:	5f 90       	pop	r5
    37e0:	4f 90       	pop	r4
    37e2:	3f 90       	pop	r3
    37e4:	2f 90       	pop	r2
    37e6:	08 95       	ret

000037e8 <__subsf3>:
    37e8:	50 58       	subi	r21, 0x80	; 128

000037ea <__addsf3>:
    37ea:	bb 27       	eor	r27, r27
    37ec:	aa 27       	eor	r26, r26
    37ee:	0e d0       	rcall	.+28     	; 0x380c <__addsf3x>
    37f0:	63 c2       	rjmp	.+1222   	; 0x3cb8 <__fp_round>
    37f2:	2c d2       	rcall	.+1112   	; 0x3c4c <__fp_pscA>
    37f4:	30 f0       	brcs	.+12     	; 0x3802 <__addsf3+0x18>
    37f6:	31 d2       	rcall	.+1122   	; 0x3c5a <__fp_pscB>
    37f8:	20 f0       	brcs	.+8      	; 0x3802 <__addsf3+0x18>
    37fa:	31 f4       	brne	.+12     	; 0x3808 <__addsf3+0x1e>
    37fc:	9f 3f       	cpi	r25, 0xFF	; 255
    37fe:	11 f4       	brne	.+4      	; 0x3804 <__addsf3+0x1a>
    3800:	1e f4       	brtc	.+6      	; 0x3808 <__addsf3+0x1e>
    3802:	fc c1       	rjmp	.+1016   	; 0x3bfc <__fp_nan>
    3804:	0e f4       	brtc	.+2      	; 0x3808 <__addsf3+0x1e>
    3806:	e0 95       	com	r30
    3808:	e7 fb       	bst	r30, 7
    380a:	c9 c1       	rjmp	.+914    	; 0x3b9e <__fp_inf>

0000380c <__addsf3x>:
    380c:	e9 2f       	mov	r30, r25
    380e:	76 d2       	rcall	.+1260   	; 0x3cfc <__fp_split3>
    3810:	80 f3       	brcs	.-32     	; 0x37f2 <__addsf3+0x8>
    3812:	ba 17       	cp	r27, r26
    3814:	62 07       	cpc	r22, r18
    3816:	73 07       	cpc	r23, r19
    3818:	84 07       	cpc	r24, r20
    381a:	95 07       	cpc	r25, r21
    381c:	18 f0       	brcs	.+6      	; 0x3824 <__addsf3x+0x18>
    381e:	71 f4       	brne	.+28     	; 0x383c <__addsf3x+0x30>
    3820:	9e f5       	brtc	.+102    	; 0x3888 <__addsf3x+0x7c>
    3822:	a5 c2       	rjmp	.+1354   	; 0x3d6e <__fp_zero>
    3824:	0e f4       	brtc	.+2      	; 0x3828 <__addsf3x+0x1c>
    3826:	e0 95       	com	r30
    3828:	0b 2e       	mov	r0, r27
    382a:	ba 2f       	mov	r27, r26
    382c:	a0 2d       	mov	r26, r0
    382e:	0b 01       	movw	r0, r22
    3830:	b9 01       	movw	r22, r18
    3832:	90 01       	movw	r18, r0
    3834:	0c 01       	movw	r0, r24
    3836:	ca 01       	movw	r24, r20
    3838:	a0 01       	movw	r20, r0
    383a:	11 24       	eor	r1, r1
    383c:	ff 27       	eor	r31, r31
    383e:	59 1b       	sub	r21, r25
    3840:	99 f0       	breq	.+38     	; 0x3868 <__addsf3x+0x5c>
    3842:	59 3f       	cpi	r21, 0xF9	; 249
    3844:	50 f4       	brcc	.+20     	; 0x385a <__addsf3x+0x4e>
    3846:	50 3e       	cpi	r21, 0xE0	; 224
    3848:	68 f1       	brcs	.+90     	; 0x38a4 <__addsf3x+0x98>
    384a:	1a 16       	cp	r1, r26
    384c:	f0 40       	sbci	r31, 0x00	; 0
    384e:	a2 2f       	mov	r26, r18
    3850:	23 2f       	mov	r18, r19
    3852:	34 2f       	mov	r19, r20
    3854:	44 27       	eor	r20, r20
    3856:	58 5f       	subi	r21, 0xF8	; 248
    3858:	f3 cf       	rjmp	.-26     	; 0x3840 <__addsf3x+0x34>
    385a:	46 95       	lsr	r20
    385c:	37 95       	ror	r19
    385e:	27 95       	ror	r18
    3860:	a7 95       	ror	r26
    3862:	f0 40       	sbci	r31, 0x00	; 0
    3864:	53 95       	inc	r21
    3866:	c9 f7       	brne	.-14     	; 0x385a <__addsf3x+0x4e>
    3868:	7e f4       	brtc	.+30     	; 0x3888 <__addsf3x+0x7c>
    386a:	1f 16       	cp	r1, r31
    386c:	ba 0b       	sbc	r27, r26
    386e:	62 0b       	sbc	r22, r18
    3870:	73 0b       	sbc	r23, r19
    3872:	84 0b       	sbc	r24, r20
    3874:	ba f0       	brmi	.+46     	; 0x38a4 <__addsf3x+0x98>
    3876:	91 50       	subi	r25, 0x01	; 1
    3878:	a1 f0       	breq	.+40     	; 0x38a2 <__addsf3x+0x96>
    387a:	ff 0f       	add	r31, r31
    387c:	bb 1f       	adc	r27, r27
    387e:	66 1f       	adc	r22, r22
    3880:	77 1f       	adc	r23, r23
    3882:	88 1f       	adc	r24, r24
    3884:	c2 f7       	brpl	.-16     	; 0x3876 <__addsf3x+0x6a>
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <__addsf3x+0x98>
    3888:	ba 0f       	add	r27, r26
    388a:	62 1f       	adc	r22, r18
    388c:	73 1f       	adc	r23, r19
    388e:	84 1f       	adc	r24, r20
    3890:	48 f4       	brcc	.+18     	; 0x38a4 <__addsf3x+0x98>
    3892:	87 95       	ror	r24
    3894:	77 95       	ror	r23
    3896:	67 95       	ror	r22
    3898:	b7 95       	ror	r27
    389a:	f7 95       	ror	r31
    389c:	9e 3f       	cpi	r25, 0xFE	; 254
    389e:	08 f0       	brcs	.+2      	; 0x38a2 <__addsf3x+0x96>
    38a0:	b3 cf       	rjmp	.-154    	; 0x3808 <__addsf3+0x1e>
    38a2:	93 95       	inc	r25
    38a4:	88 0f       	add	r24, r24
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <__addsf3x+0x9e>
    38a8:	99 27       	eor	r25, r25
    38aa:	ee 0f       	add	r30, r30
    38ac:	97 95       	ror	r25
    38ae:	87 95       	ror	r24
    38b0:	08 95       	ret
    38b2:	cc d1       	rcall	.+920    	; 0x3c4c <__fp_pscA>
    38b4:	58 f0       	brcs	.+22     	; 0x38cc <__addsf3x+0xc0>
    38b6:	80 e8       	ldi	r24, 0x80	; 128
    38b8:	91 e0       	ldi	r25, 0x01	; 1
    38ba:	09 f4       	brne	.+2      	; 0x38be <__addsf3x+0xb2>
    38bc:	9e ef       	ldi	r25, 0xFE	; 254
    38be:	cd d1       	rcall	.+922    	; 0x3c5a <__fp_pscB>
    38c0:	28 f0       	brcs	.+10     	; 0x38cc <__addsf3x+0xc0>
    38c2:	40 e8       	ldi	r20, 0x80	; 128
    38c4:	51 e0       	ldi	r21, 0x01	; 1
    38c6:	59 f4       	brne	.+22     	; 0x38de <atan2+0xe>
    38c8:	5e ef       	ldi	r21, 0xFE	; 254
    38ca:	09 c0       	rjmp	.+18     	; 0x38de <atan2+0xe>
    38cc:	97 c1       	rjmp	.+814    	; 0x3bfc <__fp_nan>
    38ce:	4f c2       	rjmp	.+1182   	; 0x3d6e <__fp_zero>

000038d0 <atan2>:
    38d0:	e9 2f       	mov	r30, r25
    38d2:	e0 78       	andi	r30, 0x80	; 128
    38d4:	13 d2       	rcall	.+1062   	; 0x3cfc <__fp_split3>
    38d6:	68 f3       	brcs	.-38     	; 0x38b2 <__addsf3x+0xa6>
    38d8:	09 2e       	mov	r0, r25
    38da:	05 2a       	or	r0, r21
    38dc:	c1 f3       	breq	.-16     	; 0x38ce <__addsf3x+0xc2>
    38de:	26 17       	cp	r18, r22
    38e0:	37 07       	cpc	r19, r23
    38e2:	48 07       	cpc	r20, r24
    38e4:	59 07       	cpc	r21, r25
    38e6:	38 f0       	brcs	.+14     	; 0x38f6 <atan2+0x26>
    38e8:	0e 2e       	mov	r0, r30
    38ea:	07 f8       	bld	r0, 7
    38ec:	e0 25       	eor	r30, r0
    38ee:	69 f0       	breq	.+26     	; 0x390a <atan2+0x3a>
    38f0:	e0 25       	eor	r30, r0
    38f2:	e0 64       	ori	r30, 0x40	; 64
    38f4:	0a c0       	rjmp	.+20     	; 0x390a <atan2+0x3a>
    38f6:	ef 63       	ori	r30, 0x3F	; 63
    38f8:	07 f8       	bld	r0, 7
    38fa:	00 94       	com	r0
    38fc:	07 fa       	bst	r0, 7
    38fe:	db 01       	movw	r26, r22
    3900:	b9 01       	movw	r22, r18
    3902:	9d 01       	movw	r18, r26
    3904:	dc 01       	movw	r26, r24
    3906:	ca 01       	movw	r24, r20
    3908:	ad 01       	movw	r20, r26
    390a:	ef 93       	push	r30
    390c:	4a d0       	rcall	.+148    	; 0x39a2 <__divsf3_pse>
    390e:	d4 d1       	rcall	.+936    	; 0x3cb8 <__fp_round>
    3910:	0a d0       	rcall	.+20     	; 0x3926 <atan>
    3912:	5f 91       	pop	r21
    3914:	55 23       	and	r21, r21
    3916:	31 f0       	breq	.+12     	; 0x3924 <atan2+0x54>
    3918:	2b ed       	ldi	r18, 0xDB	; 219
    391a:	3f e0       	ldi	r19, 0x0F	; 15
    391c:	49 e4       	ldi	r20, 0x49	; 73
    391e:	50 fd       	sbrc	r21, 0
    3920:	49 ec       	ldi	r20, 0xC9	; 201
    3922:	63 cf       	rjmp	.-314    	; 0x37ea <__addsf3>
    3924:	08 95       	ret

00003926 <atan>:
    3926:	df 93       	push	r29
    3928:	dd 27       	eor	r29, r29
    392a:	b9 2f       	mov	r27, r25
    392c:	bf 77       	andi	r27, 0x7F	; 127
    392e:	40 e8       	ldi	r20, 0x80	; 128
    3930:	5f e3       	ldi	r21, 0x3F	; 63
    3932:	16 16       	cp	r1, r22
    3934:	17 06       	cpc	r1, r23
    3936:	48 07       	cpc	r20, r24
    3938:	5b 07       	cpc	r21, r27
    393a:	10 f4       	brcc	.+4      	; 0x3940 <atan+0x1a>
    393c:	d9 2f       	mov	r29, r25
    393e:	22 d2       	rcall	.+1092   	; 0x3d84 <inverse>
    3940:	9f 93       	push	r25
    3942:	8f 93       	push	r24
    3944:	7f 93       	push	r23
    3946:	6f 93       	push	r22
    3948:	b9 d3       	rcall	.+1906   	; 0x40bc <square>
    394a:	ec e8       	ldi	r30, 0x8C	; 140
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	59 d1       	rcall	.+690    	; 0x3c02 <__fp_powser>
    3950:	b3 d1       	rcall	.+870    	; 0x3cb8 <__fp_round>
    3952:	2f 91       	pop	r18
    3954:	3f 91       	pop	r19
    3956:	4f 91       	pop	r20
    3958:	5f 91       	pop	r21
    395a:	a5 d2       	rcall	.+1354   	; 0x3ea6 <__mulsf3x>
    395c:	dd 23       	and	r29, r29
    395e:	49 f0       	breq	.+18     	; 0x3972 <atan+0x4c>
    3960:	90 58       	subi	r25, 0x80	; 128
    3962:	a2 ea       	ldi	r26, 0xA2	; 162
    3964:	2a ed       	ldi	r18, 0xDA	; 218
    3966:	3f e0       	ldi	r19, 0x0F	; 15
    3968:	49 ec       	ldi	r20, 0xC9	; 201
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	d0 78       	andi	r29, 0x80	; 128
    396e:	5d 27       	eor	r21, r29
    3970:	4d df       	rcall	.-358    	; 0x380c <__addsf3x>
    3972:	df 91       	pop	r29
    3974:	a1 c1       	rjmp	.+834    	; 0x3cb8 <__fp_round>

00003976 <__cmpsf2>:
    3976:	ef d0       	rcall	.+478    	; 0x3b56 <__fp_cmp>
    3978:	08 f4       	brcc	.+2      	; 0x397c <__cmpsf2+0x6>
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	08 95       	ret

0000397e <cos>:
    397e:	75 d1       	rcall	.+746    	; 0x3c6a <__fp_rempio2>
    3980:	e3 95       	inc	r30
    3982:	ab c1       	rjmp	.+854    	; 0x3cda <__fp_sinus>

00003984 <__divsf3>:
    3984:	0c d0       	rcall	.+24     	; 0x399e <__divsf3x>
    3986:	98 c1       	rjmp	.+816    	; 0x3cb8 <__fp_round>
    3988:	68 d1       	rcall	.+720    	; 0x3c5a <__fp_pscB>
    398a:	40 f0       	brcs	.+16     	; 0x399c <__divsf3+0x18>
    398c:	5f d1       	rcall	.+702    	; 0x3c4c <__fp_pscA>
    398e:	30 f0       	brcs	.+12     	; 0x399c <__divsf3+0x18>
    3990:	21 f4       	brne	.+8      	; 0x399a <__divsf3+0x16>
    3992:	5f 3f       	cpi	r21, 0xFF	; 255
    3994:	19 f0       	breq	.+6      	; 0x399c <__divsf3+0x18>
    3996:	03 c1       	rjmp	.+518    	; 0x3b9e <__fp_inf>
    3998:	51 11       	cpse	r21, r1
    399a:	ea c1       	rjmp	.+980    	; 0x3d70 <__fp_szero>
    399c:	2f c1       	rjmp	.+606    	; 0x3bfc <__fp_nan>

0000399e <__divsf3x>:
    399e:	ae d1       	rcall	.+860    	; 0x3cfc <__fp_split3>
    39a0:	98 f3       	brcs	.-26     	; 0x3988 <__divsf3+0x4>

000039a2 <__divsf3_pse>:
    39a2:	99 23       	and	r25, r25
    39a4:	c9 f3       	breq	.-14     	; 0x3998 <__divsf3+0x14>
    39a6:	55 23       	and	r21, r21
    39a8:	b1 f3       	breq	.-20     	; 0x3996 <__divsf3+0x12>
    39aa:	95 1b       	sub	r25, r21
    39ac:	55 0b       	sbc	r21, r21
    39ae:	bb 27       	eor	r27, r27
    39b0:	aa 27       	eor	r26, r26
    39b2:	62 17       	cp	r22, r18
    39b4:	73 07       	cpc	r23, r19
    39b6:	84 07       	cpc	r24, r20
    39b8:	38 f0       	brcs	.+14     	; 0x39c8 <__divsf3_pse+0x26>
    39ba:	9f 5f       	subi	r25, 0xFF	; 255
    39bc:	5f 4f       	sbci	r21, 0xFF	; 255
    39be:	22 0f       	add	r18, r18
    39c0:	33 1f       	adc	r19, r19
    39c2:	44 1f       	adc	r20, r20
    39c4:	aa 1f       	adc	r26, r26
    39c6:	a9 f3       	breq	.-22     	; 0x39b2 <__divsf3_pse+0x10>
    39c8:	33 d0       	rcall	.+102    	; 0x3a30 <__divsf3_pse+0x8e>
    39ca:	0e 2e       	mov	r0, r30
    39cc:	3a f0       	brmi	.+14     	; 0x39dc <__divsf3_pse+0x3a>
    39ce:	e0 e8       	ldi	r30, 0x80	; 128
    39d0:	30 d0       	rcall	.+96     	; 0x3a32 <__divsf3_pse+0x90>
    39d2:	91 50       	subi	r25, 0x01	; 1
    39d4:	50 40       	sbci	r21, 0x00	; 0
    39d6:	e6 95       	lsr	r30
    39d8:	00 1c       	adc	r0, r0
    39da:	ca f7       	brpl	.-14     	; 0x39ce <__divsf3_pse+0x2c>
    39dc:	29 d0       	rcall	.+82     	; 0x3a30 <__divsf3_pse+0x8e>
    39de:	fe 2f       	mov	r31, r30
    39e0:	27 d0       	rcall	.+78     	; 0x3a30 <__divsf3_pse+0x8e>
    39e2:	66 0f       	add	r22, r22
    39e4:	77 1f       	adc	r23, r23
    39e6:	88 1f       	adc	r24, r24
    39e8:	bb 1f       	adc	r27, r27
    39ea:	26 17       	cp	r18, r22
    39ec:	37 07       	cpc	r19, r23
    39ee:	48 07       	cpc	r20, r24
    39f0:	ab 07       	cpc	r26, r27
    39f2:	b0 e8       	ldi	r27, 0x80	; 128
    39f4:	09 f0       	breq	.+2      	; 0x39f8 <__divsf3_pse+0x56>
    39f6:	bb 0b       	sbc	r27, r27
    39f8:	80 2d       	mov	r24, r0
    39fa:	bf 01       	movw	r22, r30
    39fc:	ff 27       	eor	r31, r31
    39fe:	93 58       	subi	r25, 0x83	; 131
    3a00:	5f 4f       	sbci	r21, 0xFF	; 255
    3a02:	2a f0       	brmi	.+10     	; 0x3a0e <__divsf3_pse+0x6c>
    3a04:	9e 3f       	cpi	r25, 0xFE	; 254
    3a06:	51 05       	cpc	r21, r1
    3a08:	68 f0       	brcs	.+26     	; 0x3a24 <__divsf3_pse+0x82>
    3a0a:	c9 c0       	rjmp	.+402    	; 0x3b9e <__fp_inf>
    3a0c:	b1 c1       	rjmp	.+866    	; 0x3d70 <__fp_szero>
    3a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a10:	ec f3       	brlt	.-6      	; 0x3a0c <__divsf3_pse+0x6a>
    3a12:	98 3e       	cpi	r25, 0xE8	; 232
    3a14:	dc f3       	brlt	.-10     	; 0x3a0c <__divsf3_pse+0x6a>
    3a16:	86 95       	lsr	r24
    3a18:	77 95       	ror	r23
    3a1a:	67 95       	ror	r22
    3a1c:	b7 95       	ror	r27
    3a1e:	f7 95       	ror	r31
    3a20:	9f 5f       	subi	r25, 0xFF	; 255
    3a22:	c9 f7       	brne	.-14     	; 0x3a16 <__divsf3_pse+0x74>
    3a24:	88 0f       	add	r24, r24
    3a26:	91 1d       	adc	r25, r1
    3a28:	96 95       	lsr	r25
    3a2a:	87 95       	ror	r24
    3a2c:	97 f9       	bld	r25, 7
    3a2e:	08 95       	ret
    3a30:	e1 e0       	ldi	r30, 0x01	; 1
    3a32:	66 0f       	add	r22, r22
    3a34:	77 1f       	adc	r23, r23
    3a36:	88 1f       	adc	r24, r24
    3a38:	bb 1f       	adc	r27, r27
    3a3a:	62 17       	cp	r22, r18
    3a3c:	73 07       	cpc	r23, r19
    3a3e:	84 07       	cpc	r24, r20
    3a40:	ba 07       	cpc	r27, r26
    3a42:	20 f0       	brcs	.+8      	; 0x3a4c <__divsf3_pse+0xaa>
    3a44:	62 1b       	sub	r22, r18
    3a46:	73 0b       	sbc	r23, r19
    3a48:	84 0b       	sbc	r24, r20
    3a4a:	ba 0b       	sbc	r27, r26
    3a4c:	ee 1f       	adc	r30, r30
    3a4e:	88 f7       	brcc	.-30     	; 0x3a32 <__divsf3_pse+0x90>
    3a50:	e0 95       	com	r30
    3a52:	08 95       	ret

00003a54 <__fixsfsi>:
    3a54:	04 d0       	rcall	.+8      	; 0x3a5e <__fixunssfsi>
    3a56:	68 94       	set
    3a58:	b1 11       	cpse	r27, r1
    3a5a:	8a c1       	rjmp	.+788    	; 0x3d70 <__fp_szero>
    3a5c:	08 95       	ret

00003a5e <__fixunssfsi>:
    3a5e:	56 d1       	rcall	.+684    	; 0x3d0c <__fp_splitA>
    3a60:	88 f0       	brcs	.+34     	; 0x3a84 <__fixunssfsi+0x26>
    3a62:	9f 57       	subi	r25, 0x7F	; 127
    3a64:	90 f0       	brcs	.+36     	; 0x3a8a <__fixunssfsi+0x2c>
    3a66:	b9 2f       	mov	r27, r25
    3a68:	99 27       	eor	r25, r25
    3a6a:	b7 51       	subi	r27, 0x17	; 23
    3a6c:	a0 f0       	brcs	.+40     	; 0x3a96 <__fixunssfsi+0x38>
    3a6e:	d1 f0       	breq	.+52     	; 0x3aa4 <__fixunssfsi+0x46>
    3a70:	66 0f       	add	r22, r22
    3a72:	77 1f       	adc	r23, r23
    3a74:	88 1f       	adc	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	1a f0       	brmi	.+6      	; 0x3a80 <__fixunssfsi+0x22>
    3a7a:	ba 95       	dec	r27
    3a7c:	c9 f7       	brne	.-14     	; 0x3a70 <__fixunssfsi+0x12>
    3a7e:	12 c0       	rjmp	.+36     	; 0x3aa4 <__fixunssfsi+0x46>
    3a80:	b1 30       	cpi	r27, 0x01	; 1
    3a82:	81 f0       	breq	.+32     	; 0x3aa4 <__fixunssfsi+0x46>
    3a84:	74 d1       	rcall	.+744    	; 0x3d6e <__fp_zero>
    3a86:	b1 e0       	ldi	r27, 0x01	; 1
    3a88:	08 95       	ret
    3a8a:	71 c1       	rjmp	.+738    	; 0x3d6e <__fp_zero>
    3a8c:	67 2f       	mov	r22, r23
    3a8e:	78 2f       	mov	r23, r24
    3a90:	88 27       	eor	r24, r24
    3a92:	b8 5f       	subi	r27, 0xF8	; 248
    3a94:	39 f0       	breq	.+14     	; 0x3aa4 <__fixunssfsi+0x46>
    3a96:	b9 3f       	cpi	r27, 0xF9	; 249
    3a98:	cc f3       	brlt	.-14     	; 0x3a8c <__fixunssfsi+0x2e>
    3a9a:	86 95       	lsr	r24
    3a9c:	77 95       	ror	r23
    3a9e:	67 95       	ror	r22
    3aa0:	b3 95       	inc	r27
    3aa2:	d9 f7       	brne	.-10     	; 0x3a9a <__fixunssfsi+0x3c>
    3aa4:	3e f4       	brtc	.+14     	; 0x3ab4 <__fixunssfsi+0x56>
    3aa6:	90 95       	com	r25
    3aa8:	80 95       	com	r24
    3aaa:	70 95       	com	r23
    3aac:	61 95       	neg	r22
    3aae:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab4:	08 95       	ret

00003ab6 <__floatunsisf>:
    3ab6:	e8 94       	clt
    3ab8:	09 c0       	rjmp	.+18     	; 0x3acc <__floatsisf+0x12>

00003aba <__floatsisf>:
    3aba:	97 fb       	bst	r25, 7
    3abc:	3e f4       	brtc	.+14     	; 0x3acc <__floatsisf+0x12>
    3abe:	90 95       	com	r25
    3ac0:	80 95       	com	r24
    3ac2:	70 95       	com	r23
    3ac4:	61 95       	neg	r22
    3ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aca:	9f 4f       	sbci	r25, 0xFF	; 255
    3acc:	99 23       	and	r25, r25
    3ace:	a9 f0       	breq	.+42     	; 0x3afa <__floatsisf+0x40>
    3ad0:	f9 2f       	mov	r31, r25
    3ad2:	96 e9       	ldi	r25, 0x96	; 150
    3ad4:	bb 27       	eor	r27, r27
    3ad6:	93 95       	inc	r25
    3ad8:	f6 95       	lsr	r31
    3ada:	87 95       	ror	r24
    3adc:	77 95       	ror	r23
    3ade:	67 95       	ror	r22
    3ae0:	b7 95       	ror	r27
    3ae2:	f1 11       	cpse	r31, r1
    3ae4:	f8 cf       	rjmp	.-16     	; 0x3ad6 <__floatsisf+0x1c>
    3ae6:	fa f4       	brpl	.+62     	; 0x3b26 <__floatsisf+0x6c>
    3ae8:	bb 0f       	add	r27, r27
    3aea:	11 f4       	brne	.+4      	; 0x3af0 <__floatsisf+0x36>
    3aec:	60 ff       	sbrs	r22, 0
    3aee:	1b c0       	rjmp	.+54     	; 0x3b26 <__floatsisf+0x6c>
    3af0:	6f 5f       	subi	r22, 0xFF	; 255
    3af2:	7f 4f       	sbci	r23, 0xFF	; 255
    3af4:	8f 4f       	sbci	r24, 0xFF	; 255
    3af6:	9f 4f       	sbci	r25, 0xFF	; 255
    3af8:	16 c0       	rjmp	.+44     	; 0x3b26 <__floatsisf+0x6c>
    3afa:	88 23       	and	r24, r24
    3afc:	11 f0       	breq	.+4      	; 0x3b02 <__floatsisf+0x48>
    3afe:	96 e9       	ldi	r25, 0x96	; 150
    3b00:	11 c0       	rjmp	.+34     	; 0x3b24 <__floatsisf+0x6a>
    3b02:	77 23       	and	r23, r23
    3b04:	21 f0       	breq	.+8      	; 0x3b0e <__floatsisf+0x54>
    3b06:	9e e8       	ldi	r25, 0x8E	; 142
    3b08:	87 2f       	mov	r24, r23
    3b0a:	76 2f       	mov	r23, r22
    3b0c:	05 c0       	rjmp	.+10     	; 0x3b18 <__floatsisf+0x5e>
    3b0e:	66 23       	and	r22, r22
    3b10:	71 f0       	breq	.+28     	; 0x3b2e <__floatsisf+0x74>
    3b12:	96 e8       	ldi	r25, 0x86	; 134
    3b14:	86 2f       	mov	r24, r22
    3b16:	70 e0       	ldi	r23, 0x00	; 0
    3b18:	60 e0       	ldi	r22, 0x00	; 0
    3b1a:	2a f0       	brmi	.+10     	; 0x3b26 <__floatsisf+0x6c>
    3b1c:	9a 95       	dec	r25
    3b1e:	66 0f       	add	r22, r22
    3b20:	77 1f       	adc	r23, r23
    3b22:	88 1f       	adc	r24, r24
    3b24:	da f7       	brpl	.-10     	; 0x3b1c <__floatsisf+0x62>
    3b26:	88 0f       	add	r24, r24
    3b28:	96 95       	lsr	r25
    3b2a:	87 95       	ror	r24
    3b2c:	97 f9       	bld	r25, 7
    3b2e:	08 95       	ret

00003b30 <floor>:
    3b30:	07 d1       	rcall	.+526    	; 0x3d40 <__fp_trunc>
    3b32:	80 f0       	brcs	.+32     	; 0x3b54 <floor+0x24>
    3b34:	9f 37       	cpi	r25, 0x7F	; 127
    3b36:	40 f4       	brcc	.+16     	; 0x3b48 <floor+0x18>
    3b38:	91 11       	cpse	r25, r1
    3b3a:	0e f0       	brts	.+2      	; 0x3b3e <floor+0xe>
    3b3c:	19 c1       	rjmp	.+562    	; 0x3d70 <__fp_szero>
    3b3e:	60 e0       	ldi	r22, 0x00	; 0
    3b40:	70 e0       	ldi	r23, 0x00	; 0
    3b42:	80 e8       	ldi	r24, 0x80	; 128
    3b44:	9f eb       	ldi	r25, 0xBF	; 191
    3b46:	08 95       	ret
    3b48:	26 f4       	brtc	.+8      	; 0x3b52 <floor+0x22>
    3b4a:	1b 16       	cp	r1, r27
    3b4c:	61 1d       	adc	r22, r1
    3b4e:	71 1d       	adc	r23, r1
    3b50:	81 1d       	adc	r24, r1
    3b52:	2b c0       	rjmp	.+86     	; 0x3baa <__fp_mintl>
    3b54:	45 c0       	rjmp	.+138    	; 0x3be0 <__fp_mpack>

00003b56 <__fp_cmp>:
    3b56:	99 0f       	add	r25, r25
    3b58:	00 08       	sbc	r0, r0
    3b5a:	55 0f       	add	r21, r21
    3b5c:	aa 0b       	sbc	r26, r26
    3b5e:	e0 e8       	ldi	r30, 0x80	; 128
    3b60:	fe ef       	ldi	r31, 0xFE	; 254
    3b62:	16 16       	cp	r1, r22
    3b64:	17 06       	cpc	r1, r23
    3b66:	e8 07       	cpc	r30, r24
    3b68:	f9 07       	cpc	r31, r25
    3b6a:	c0 f0       	brcs	.+48     	; 0x3b9c <__fp_cmp+0x46>
    3b6c:	12 16       	cp	r1, r18
    3b6e:	13 06       	cpc	r1, r19
    3b70:	e4 07       	cpc	r30, r20
    3b72:	f5 07       	cpc	r31, r21
    3b74:	98 f0       	brcs	.+38     	; 0x3b9c <__fp_cmp+0x46>
    3b76:	62 1b       	sub	r22, r18
    3b78:	73 0b       	sbc	r23, r19
    3b7a:	84 0b       	sbc	r24, r20
    3b7c:	95 0b       	sbc	r25, r21
    3b7e:	39 f4       	brne	.+14     	; 0x3b8e <__fp_cmp+0x38>
    3b80:	0a 26       	eor	r0, r26
    3b82:	61 f0       	breq	.+24     	; 0x3b9c <__fp_cmp+0x46>
    3b84:	23 2b       	or	r18, r19
    3b86:	24 2b       	or	r18, r20
    3b88:	25 2b       	or	r18, r21
    3b8a:	21 f4       	brne	.+8      	; 0x3b94 <__fp_cmp+0x3e>
    3b8c:	08 95       	ret
    3b8e:	0a 26       	eor	r0, r26
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <__fp_cmp+0x3e>
    3b92:	a1 40       	sbci	r26, 0x01	; 1
    3b94:	a6 95       	lsr	r26
    3b96:	8f ef       	ldi	r24, 0xFF	; 255
    3b98:	81 1d       	adc	r24, r1
    3b9a:	81 1d       	adc	r24, r1
    3b9c:	08 95       	ret

00003b9e <__fp_inf>:
    3b9e:	97 f9       	bld	r25, 7
    3ba0:	9f 67       	ori	r25, 0x7F	; 127
    3ba2:	80 e8       	ldi	r24, 0x80	; 128
    3ba4:	70 e0       	ldi	r23, 0x00	; 0
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	08 95       	ret

00003baa <__fp_mintl>:
    3baa:	88 23       	and	r24, r24
    3bac:	71 f4       	brne	.+28     	; 0x3bca <__fp_mintl+0x20>
    3bae:	77 23       	and	r23, r23
    3bb0:	21 f0       	breq	.+8      	; 0x3bba <__fp_mintl+0x10>
    3bb2:	98 50       	subi	r25, 0x08	; 8
    3bb4:	87 2b       	or	r24, r23
    3bb6:	76 2f       	mov	r23, r22
    3bb8:	07 c0       	rjmp	.+14     	; 0x3bc8 <__fp_mintl+0x1e>
    3bba:	66 23       	and	r22, r22
    3bbc:	11 f4       	brne	.+4      	; 0x3bc2 <__fp_mintl+0x18>
    3bbe:	99 27       	eor	r25, r25
    3bc0:	0d c0       	rjmp	.+26     	; 0x3bdc <__fp_mintl+0x32>
    3bc2:	90 51       	subi	r25, 0x10	; 16
    3bc4:	86 2b       	or	r24, r22
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	60 e0       	ldi	r22, 0x00	; 0
    3bca:	2a f0       	brmi	.+10     	; 0x3bd6 <__fp_mintl+0x2c>
    3bcc:	9a 95       	dec	r25
    3bce:	66 0f       	add	r22, r22
    3bd0:	77 1f       	adc	r23, r23
    3bd2:	88 1f       	adc	r24, r24
    3bd4:	da f7       	brpl	.-10     	; 0x3bcc <__fp_mintl+0x22>
    3bd6:	88 0f       	add	r24, r24
    3bd8:	96 95       	lsr	r25
    3bda:	87 95       	ror	r24
    3bdc:	97 f9       	bld	r25, 7
    3bde:	08 95       	ret

00003be0 <__fp_mpack>:
    3be0:	9f 3f       	cpi	r25, 0xFF	; 255
    3be2:	31 f0       	breq	.+12     	; 0x3bf0 <__fp_mpack_finite+0xc>

00003be4 <__fp_mpack_finite>:
    3be4:	91 50       	subi	r25, 0x01	; 1
    3be6:	20 f4       	brcc	.+8      	; 0x3bf0 <__fp_mpack_finite+0xc>
    3be8:	87 95       	ror	r24
    3bea:	77 95       	ror	r23
    3bec:	67 95       	ror	r22
    3bee:	b7 95       	ror	r27
    3bf0:	88 0f       	add	r24, r24
    3bf2:	91 1d       	adc	r25, r1
    3bf4:	96 95       	lsr	r25
    3bf6:	87 95       	ror	r24
    3bf8:	97 f9       	bld	r25, 7
    3bfa:	08 95       	ret

00003bfc <__fp_nan>:
    3bfc:	9f ef       	ldi	r25, 0xFF	; 255
    3bfe:	80 ec       	ldi	r24, 0xC0	; 192
    3c00:	08 95       	ret

00003c02 <__fp_powser>:
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	1f 93       	push	r17
    3c08:	0f 93       	push	r16
    3c0a:	ff 92       	push	r15
    3c0c:	ef 92       	push	r14
    3c0e:	df 92       	push	r13
    3c10:	7b 01       	movw	r14, r22
    3c12:	8c 01       	movw	r16, r24
    3c14:	68 94       	set
    3c16:	05 c0       	rjmp	.+10     	; 0x3c22 <__fp_powser+0x20>
    3c18:	da 2e       	mov	r13, r26
    3c1a:	ef 01       	movw	r28, r30
    3c1c:	44 d1       	rcall	.+648    	; 0x3ea6 <__mulsf3x>
    3c1e:	fe 01       	movw	r30, r28
    3c20:	e8 94       	clt
    3c22:	a5 91       	lpm	r26, Z+
    3c24:	25 91       	lpm	r18, Z+
    3c26:	35 91       	lpm	r19, Z+
    3c28:	45 91       	lpm	r20, Z+
    3c2a:	55 91       	lpm	r21, Z+
    3c2c:	ae f3       	brts	.-22     	; 0x3c18 <__fp_powser+0x16>
    3c2e:	ef 01       	movw	r28, r30
    3c30:	ed dd       	rcall	.-1062   	; 0x380c <__addsf3x>
    3c32:	fe 01       	movw	r30, r28
    3c34:	97 01       	movw	r18, r14
    3c36:	a8 01       	movw	r20, r16
    3c38:	da 94       	dec	r13
    3c3a:	79 f7       	brne	.-34     	; 0x3c1a <__fp_powser+0x18>
    3c3c:	df 90       	pop	r13
    3c3e:	ef 90       	pop	r14
    3c40:	ff 90       	pop	r15
    3c42:	0f 91       	pop	r16
    3c44:	1f 91       	pop	r17
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <__fp_pscA>:
    3c4c:	00 24       	eor	r0, r0
    3c4e:	0a 94       	dec	r0
    3c50:	16 16       	cp	r1, r22
    3c52:	17 06       	cpc	r1, r23
    3c54:	18 06       	cpc	r1, r24
    3c56:	09 06       	cpc	r0, r25
    3c58:	08 95       	ret

00003c5a <__fp_pscB>:
    3c5a:	00 24       	eor	r0, r0
    3c5c:	0a 94       	dec	r0
    3c5e:	12 16       	cp	r1, r18
    3c60:	13 06       	cpc	r1, r19
    3c62:	14 06       	cpc	r1, r20
    3c64:	05 06       	cpc	r0, r21
    3c66:	08 95       	ret
    3c68:	c9 cf       	rjmp	.-110    	; 0x3bfc <__fp_nan>

00003c6a <__fp_rempio2>:
    3c6a:	50 d0       	rcall	.+160    	; 0x3d0c <__fp_splitA>
    3c6c:	e8 f3       	brcs	.-6      	; 0x3c68 <__fp_pscB+0xe>
    3c6e:	e8 94       	clt
    3c70:	e0 e0       	ldi	r30, 0x00	; 0
    3c72:	bb 27       	eor	r27, r27
    3c74:	9f 57       	subi	r25, 0x7F	; 127
    3c76:	f0 f0       	brcs	.+60     	; 0x3cb4 <__fp_rempio2+0x4a>
    3c78:	2a ed       	ldi	r18, 0xDA	; 218
    3c7a:	3f e0       	ldi	r19, 0x0F	; 15
    3c7c:	49 ec       	ldi	r20, 0xC9	; 201
    3c7e:	06 c0       	rjmp	.+12     	; 0x3c8c <__fp_rempio2+0x22>
    3c80:	ee 0f       	add	r30, r30
    3c82:	bb 0f       	add	r27, r27
    3c84:	66 1f       	adc	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	88 1f       	adc	r24, r24
    3c8a:	28 f0       	brcs	.+10     	; 0x3c96 <__fp_rempio2+0x2c>
    3c8c:	b2 3a       	cpi	r27, 0xA2	; 162
    3c8e:	62 07       	cpc	r22, r18
    3c90:	73 07       	cpc	r23, r19
    3c92:	84 07       	cpc	r24, r20
    3c94:	28 f0       	brcs	.+10     	; 0x3ca0 <__fp_rempio2+0x36>
    3c96:	b2 5a       	subi	r27, 0xA2	; 162
    3c98:	62 0b       	sbc	r22, r18
    3c9a:	73 0b       	sbc	r23, r19
    3c9c:	84 0b       	sbc	r24, r20
    3c9e:	e3 95       	inc	r30
    3ca0:	9a 95       	dec	r25
    3ca2:	72 f7       	brpl	.-36     	; 0x3c80 <__fp_rempio2+0x16>
    3ca4:	80 38       	cpi	r24, 0x80	; 128
    3ca6:	30 f4       	brcc	.+12     	; 0x3cb4 <__fp_rempio2+0x4a>
    3ca8:	9a 95       	dec	r25
    3caa:	bb 0f       	add	r27, r27
    3cac:	66 1f       	adc	r22, r22
    3cae:	77 1f       	adc	r23, r23
    3cb0:	88 1f       	adc	r24, r24
    3cb2:	d2 f7       	brpl	.-12     	; 0x3ca8 <__fp_rempio2+0x3e>
    3cb4:	90 48       	sbci	r25, 0x80	; 128
    3cb6:	96 cf       	rjmp	.-212    	; 0x3be4 <__fp_mpack_finite>

00003cb8 <__fp_round>:
    3cb8:	09 2e       	mov	r0, r25
    3cba:	03 94       	inc	r0
    3cbc:	00 0c       	add	r0, r0
    3cbe:	11 f4       	brne	.+4      	; 0x3cc4 <__fp_round+0xc>
    3cc0:	88 23       	and	r24, r24
    3cc2:	52 f0       	brmi	.+20     	; 0x3cd8 <__fp_round+0x20>
    3cc4:	bb 0f       	add	r27, r27
    3cc6:	40 f4       	brcc	.+16     	; 0x3cd8 <__fp_round+0x20>
    3cc8:	bf 2b       	or	r27, r31
    3cca:	11 f4       	brne	.+4      	; 0x3cd0 <__fp_round+0x18>
    3ccc:	60 ff       	sbrs	r22, 0
    3cce:	04 c0       	rjmp	.+8      	; 0x3cd8 <__fp_round+0x20>
    3cd0:	6f 5f       	subi	r22, 0xFF	; 255
    3cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd8:	08 95       	ret

00003cda <__fp_sinus>:
    3cda:	ef 93       	push	r30
    3cdc:	e0 ff       	sbrs	r30, 0
    3cde:	06 c0       	rjmp	.+12     	; 0x3cec <__fp_sinus+0x12>
    3ce0:	a2 ea       	ldi	r26, 0xA2	; 162
    3ce2:	2a ed       	ldi	r18, 0xDA	; 218
    3ce4:	3f e0       	ldi	r19, 0x0F	; 15
    3ce6:	49 ec       	ldi	r20, 0xC9	; 201
    3ce8:	5f eb       	ldi	r21, 0xBF	; 191
    3cea:	90 dd       	rcall	.-1248   	; 0x380c <__addsf3x>
    3cec:	e5 df       	rcall	.-54     	; 0x3cb8 <__fp_round>
    3cee:	0f 90       	pop	r0
    3cf0:	03 94       	inc	r0
    3cf2:	01 fc       	sbrc	r0, 1
    3cf4:	90 58       	subi	r25, 0x80	; 128
    3cf6:	e9 eb       	ldi	r30, 0xB9	; 185
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	1b c2       	rjmp	.+1078   	; 0x4132 <__fp_powsodd>

00003cfc <__fp_split3>:
    3cfc:	57 fd       	sbrc	r21, 7
    3cfe:	90 58       	subi	r25, 0x80	; 128
    3d00:	44 0f       	add	r20, r20
    3d02:	55 1f       	adc	r21, r21
    3d04:	59 f0       	breq	.+22     	; 0x3d1c <__fp_splitA+0x10>
    3d06:	5f 3f       	cpi	r21, 0xFF	; 255
    3d08:	71 f0       	breq	.+28     	; 0x3d26 <__fp_splitA+0x1a>
    3d0a:	47 95       	ror	r20

00003d0c <__fp_splitA>:
    3d0c:	88 0f       	add	r24, r24
    3d0e:	97 fb       	bst	r25, 7
    3d10:	99 1f       	adc	r25, r25
    3d12:	61 f0       	breq	.+24     	; 0x3d2c <__fp_splitA+0x20>
    3d14:	9f 3f       	cpi	r25, 0xFF	; 255
    3d16:	79 f0       	breq	.+30     	; 0x3d36 <__fp_splitA+0x2a>
    3d18:	87 95       	ror	r24
    3d1a:	08 95       	ret
    3d1c:	12 16       	cp	r1, r18
    3d1e:	13 06       	cpc	r1, r19
    3d20:	14 06       	cpc	r1, r20
    3d22:	55 1f       	adc	r21, r21
    3d24:	f2 cf       	rjmp	.-28     	; 0x3d0a <__fp_split3+0xe>
    3d26:	46 95       	lsr	r20
    3d28:	f1 df       	rcall	.-30     	; 0x3d0c <__fp_splitA>
    3d2a:	08 c0       	rjmp	.+16     	; 0x3d3c <__fp_splitA+0x30>
    3d2c:	16 16       	cp	r1, r22
    3d2e:	17 06       	cpc	r1, r23
    3d30:	18 06       	cpc	r1, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	f1 cf       	rjmp	.-30     	; 0x3d18 <__fp_splitA+0xc>
    3d36:	86 95       	lsr	r24
    3d38:	71 05       	cpc	r23, r1
    3d3a:	61 05       	cpc	r22, r1
    3d3c:	08 94       	sec
    3d3e:	08 95       	ret

00003d40 <__fp_trunc>:
    3d40:	e5 df       	rcall	.-54     	; 0x3d0c <__fp_splitA>
    3d42:	a0 f0       	brcs	.+40     	; 0x3d6c <__fp_trunc+0x2c>
    3d44:	be e7       	ldi	r27, 0x7E	; 126
    3d46:	b9 17       	cp	r27, r25
    3d48:	88 f4       	brcc	.+34     	; 0x3d6c <__fp_trunc+0x2c>
    3d4a:	bb 27       	eor	r27, r27
    3d4c:	9f 38       	cpi	r25, 0x8F	; 143
    3d4e:	60 f4       	brcc	.+24     	; 0x3d68 <__fp_trunc+0x28>
    3d50:	16 16       	cp	r1, r22
    3d52:	b1 1d       	adc	r27, r1
    3d54:	67 2f       	mov	r22, r23
    3d56:	78 2f       	mov	r23, r24
    3d58:	88 27       	eor	r24, r24
    3d5a:	98 5f       	subi	r25, 0xF8	; 248
    3d5c:	f7 cf       	rjmp	.-18     	; 0x3d4c <__fp_trunc+0xc>
    3d5e:	86 95       	lsr	r24
    3d60:	77 95       	ror	r23
    3d62:	67 95       	ror	r22
    3d64:	b1 1d       	adc	r27, r1
    3d66:	93 95       	inc	r25
    3d68:	96 39       	cpi	r25, 0x96	; 150
    3d6a:	c8 f3       	brcs	.-14     	; 0x3d5e <__fp_trunc+0x1e>
    3d6c:	08 95       	ret

00003d6e <__fp_zero>:
    3d6e:	e8 94       	clt

00003d70 <__fp_szero>:
    3d70:	bb 27       	eor	r27, r27
    3d72:	66 27       	eor	r22, r22
    3d74:	77 27       	eor	r23, r23
    3d76:	cb 01       	movw	r24, r22
    3d78:	97 f9       	bld	r25, 7
    3d7a:	08 95       	ret

00003d7c <__gesf2>:
    3d7c:	ec de       	rcall	.-552    	; 0x3b56 <__fp_cmp>
    3d7e:	08 f4       	brcc	.+2      	; 0x3d82 <__gesf2+0x6>
    3d80:	8f ef       	ldi	r24, 0xFF	; 255
    3d82:	08 95       	ret

00003d84 <inverse>:
    3d84:	9b 01       	movw	r18, r22
    3d86:	ac 01       	movw	r20, r24
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	70 e0       	ldi	r23, 0x00	; 0
    3d8c:	80 e8       	ldi	r24, 0x80	; 128
    3d8e:	9f e3       	ldi	r25, 0x3F	; 63
    3d90:	f9 cd       	rjmp	.-1038   	; 0x3984 <__divsf3>

00003d92 <log10>:
    3d92:	0a d0       	rcall	.+20     	; 0x3da8 <log>
    3d94:	29 ed       	ldi	r18, 0xD9	; 217
    3d96:	3b e5       	ldi	r19, 0x5B	; 91
    3d98:	4e ed       	ldi	r20, 0xDE	; 222
    3d9a:	5e e3       	ldi	r21, 0x3E	; 62
    3d9c:	78 c0       	rjmp	.+240    	; 0x3e8e <__mulsf3>
    3d9e:	0e f0       	brts	.+2      	; 0x3da2 <log10+0x10>
    3da0:	1f cf       	rjmp	.-450    	; 0x3be0 <__fp_mpack>
    3da2:	2c cf       	rjmp	.-424    	; 0x3bfc <__fp_nan>
    3da4:	68 94       	set
    3da6:	fb ce       	rjmp	.-522    	; 0x3b9e <__fp_inf>

00003da8 <log>:
    3da8:	b1 df       	rcall	.-158    	; 0x3d0c <__fp_splitA>
    3daa:	c8 f3       	brcs	.-14     	; 0x3d9e <log10+0xc>
    3dac:	99 23       	and	r25, r25
    3dae:	d1 f3       	breq	.-12     	; 0x3da4 <log10+0x12>
    3db0:	c6 f3       	brts	.-16     	; 0x3da2 <log10+0x10>
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	1f 93       	push	r17
    3db8:	0f 93       	push	r16
    3dba:	ff 92       	push	r15
    3dbc:	c9 2f       	mov	r28, r25
    3dbe:	dd 27       	eor	r29, r29
    3dc0:	88 23       	and	r24, r24
    3dc2:	2a f0       	brmi	.+10     	; 0x3dce <log+0x26>
    3dc4:	21 97       	sbiw	r28, 0x01	; 1
    3dc6:	66 0f       	add	r22, r22
    3dc8:	77 1f       	adc	r23, r23
    3dca:	88 1f       	adc	r24, r24
    3dcc:	da f7       	brpl	.-10     	; 0x3dc4 <log+0x1c>
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	40 e8       	ldi	r20, 0x80	; 128
    3dd4:	5f eb       	ldi	r21, 0xBF	; 191
    3dd6:	9f e3       	ldi	r25, 0x3F	; 63
    3dd8:	88 39       	cpi	r24, 0x98	; 152
    3dda:	20 f0       	brcs	.+8      	; 0x3de4 <log+0x3c>
    3ddc:	80 3e       	cpi	r24, 0xE0	; 224
    3dde:	30 f0       	brcs	.+12     	; 0x3dec <log+0x44>
    3de0:	21 96       	adiw	r28, 0x01	; 1
    3de2:	8f 77       	andi	r24, 0x7F	; 127
    3de4:	02 dd       	rcall	.-1532   	; 0x37ea <__addsf3>
    3de6:	e7 ed       	ldi	r30, 0xD7	; 215
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	03 c0       	rjmp	.+6      	; 0x3df2 <log+0x4a>
    3dec:	fe dc       	rcall	.-1540   	; 0x37ea <__addsf3>
    3dee:	e4 e0       	ldi	r30, 0x04	; 4
    3df0:	f1 e0       	ldi	r31, 0x01	; 1
    3df2:	07 df       	rcall	.-498    	; 0x3c02 <__fp_powser>
    3df4:	8b 01       	movw	r16, r22
    3df6:	be 01       	movw	r22, r28
    3df8:	ec 01       	movw	r28, r24
    3dfa:	fb 2e       	mov	r15, r27
    3dfc:	6f 57       	subi	r22, 0x7F	; 127
    3dfe:	71 09       	sbc	r23, r1
    3e00:	75 95       	asr	r23
    3e02:	77 1f       	adc	r23, r23
    3e04:	88 0b       	sbc	r24, r24
    3e06:	99 0b       	sbc	r25, r25
    3e08:	58 de       	rcall	.-848    	; 0x3aba <__floatsisf>
    3e0a:	28 e1       	ldi	r18, 0x18	; 24
    3e0c:	32 e7       	ldi	r19, 0x72	; 114
    3e0e:	41 e3       	ldi	r20, 0x31	; 49
    3e10:	5f e3       	ldi	r21, 0x3F	; 63
    3e12:	49 d0       	rcall	.+146    	; 0x3ea6 <__mulsf3x>
    3e14:	af 2d       	mov	r26, r15
    3e16:	98 01       	movw	r18, r16
    3e18:	ae 01       	movw	r20, r28
    3e1a:	ff 90       	pop	r15
    3e1c:	0f 91       	pop	r16
    3e1e:	1f 91       	pop	r17
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	f3 dc       	rcall	.-1562   	; 0x380c <__addsf3x>
    3e26:	48 cf       	rjmp	.-368    	; 0x3cb8 <__fp_round>

00003e28 <modf>:
    3e28:	fa 01       	movw	r30, r20
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	aa 0f       	add	r26, r26
    3e2e:	bb 1f       	adc	r27, r27
    3e30:	9b 01       	movw	r18, r22
    3e32:	ac 01       	movw	r20, r24
    3e34:	bf 57       	subi	r27, 0x7F	; 127
    3e36:	28 f4       	brcc	.+10     	; 0x3e42 <modf+0x1a>
    3e38:	22 27       	eor	r18, r18
    3e3a:	33 27       	eor	r19, r19
    3e3c:	44 27       	eor	r20, r20
    3e3e:	50 78       	andi	r21, 0x80	; 128
    3e40:	1f c0       	rjmp	.+62     	; 0x3e80 <modf+0x58>
    3e42:	b7 51       	subi	r27, 0x17	; 23
    3e44:	88 f4       	brcc	.+34     	; 0x3e68 <modf+0x40>
    3e46:	ab 2f       	mov	r26, r27
    3e48:	00 24       	eor	r0, r0
    3e4a:	46 95       	lsr	r20
    3e4c:	37 95       	ror	r19
    3e4e:	27 95       	ror	r18
    3e50:	01 1c       	adc	r0, r1
    3e52:	a3 95       	inc	r26
    3e54:	d2 f3       	brmi	.-12     	; 0x3e4a <modf+0x22>
    3e56:	00 20       	and	r0, r0
    3e58:	69 f0       	breq	.+26     	; 0x3e74 <modf+0x4c>
    3e5a:	22 0f       	add	r18, r18
    3e5c:	33 1f       	adc	r19, r19
    3e5e:	44 1f       	adc	r20, r20
    3e60:	b3 95       	inc	r27
    3e62:	da f3       	brmi	.-10     	; 0x3e5a <modf+0x32>
    3e64:	0d d0       	rcall	.+26     	; 0x3e80 <modf+0x58>
    3e66:	c0 cc       	rjmp	.-1664   	; 0x37e8 <__subsf3>
    3e68:	61 30       	cpi	r22, 0x01	; 1
    3e6a:	71 05       	cpc	r23, r1
    3e6c:	a0 e8       	ldi	r26, 0x80	; 128
    3e6e:	8a 07       	cpc	r24, r26
    3e70:	b9 46       	sbci	r27, 0x69	; 105
    3e72:	30 f4       	brcc	.+12     	; 0x3e80 <modf+0x58>
    3e74:	9b 01       	movw	r18, r22
    3e76:	ac 01       	movw	r20, r24
    3e78:	66 27       	eor	r22, r22
    3e7a:	77 27       	eor	r23, r23
    3e7c:	88 27       	eor	r24, r24
    3e7e:	90 78       	andi	r25, 0x80	; 128
    3e80:	30 96       	adiw	r30, 0x00	; 0
    3e82:	21 f0       	breq	.+8      	; 0x3e8c <modf+0x64>
    3e84:	20 83       	st	Z, r18
    3e86:	31 83       	std	Z+1, r19	; 0x01
    3e88:	42 83       	std	Z+2, r20	; 0x02
    3e8a:	53 83       	std	Z+3, r21	; 0x03
    3e8c:	08 95       	ret

00003e8e <__mulsf3>:
    3e8e:	0b d0       	rcall	.+22     	; 0x3ea6 <__mulsf3x>
    3e90:	13 cf       	rjmp	.-474    	; 0x3cb8 <__fp_round>
    3e92:	dc de       	rcall	.-584    	; 0x3c4c <__fp_pscA>
    3e94:	28 f0       	brcs	.+10     	; 0x3ea0 <__mulsf3+0x12>
    3e96:	e1 de       	rcall	.-574    	; 0x3c5a <__fp_pscB>
    3e98:	18 f0       	brcs	.+6      	; 0x3ea0 <__mulsf3+0x12>
    3e9a:	95 23       	and	r25, r21
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <__mulsf3+0x12>
    3e9e:	7f ce       	rjmp	.-770    	; 0x3b9e <__fp_inf>
    3ea0:	ad ce       	rjmp	.-678    	; 0x3bfc <__fp_nan>
    3ea2:	11 24       	eor	r1, r1
    3ea4:	65 cf       	rjmp	.-310    	; 0x3d70 <__fp_szero>

00003ea6 <__mulsf3x>:
    3ea6:	2a df       	rcall	.-428    	; 0x3cfc <__fp_split3>
    3ea8:	a0 f3       	brcs	.-24     	; 0x3e92 <__mulsf3+0x4>

00003eaa <__mulsf3_pse>:
    3eaa:	95 9f       	mul	r25, r21
    3eac:	d1 f3       	breq	.-12     	; 0x3ea2 <__mulsf3+0x14>
    3eae:	95 0f       	add	r25, r21
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	55 1f       	adc	r21, r21
    3eb4:	62 9f       	mul	r22, r18
    3eb6:	f0 01       	movw	r30, r0
    3eb8:	72 9f       	mul	r23, r18
    3eba:	bb 27       	eor	r27, r27
    3ebc:	f0 0d       	add	r31, r0
    3ebe:	b1 1d       	adc	r27, r1
    3ec0:	63 9f       	mul	r22, r19
    3ec2:	aa 27       	eor	r26, r26
    3ec4:	f0 0d       	add	r31, r0
    3ec6:	b1 1d       	adc	r27, r1
    3ec8:	aa 1f       	adc	r26, r26
    3eca:	64 9f       	mul	r22, r20
    3ecc:	66 27       	eor	r22, r22
    3ece:	b0 0d       	add	r27, r0
    3ed0:	a1 1d       	adc	r26, r1
    3ed2:	66 1f       	adc	r22, r22
    3ed4:	82 9f       	mul	r24, r18
    3ed6:	22 27       	eor	r18, r18
    3ed8:	b0 0d       	add	r27, r0
    3eda:	a1 1d       	adc	r26, r1
    3edc:	62 1f       	adc	r22, r18
    3ede:	73 9f       	mul	r23, r19
    3ee0:	b0 0d       	add	r27, r0
    3ee2:	a1 1d       	adc	r26, r1
    3ee4:	62 1f       	adc	r22, r18
    3ee6:	83 9f       	mul	r24, r19
    3ee8:	a0 0d       	add	r26, r0
    3eea:	61 1d       	adc	r22, r1
    3eec:	22 1f       	adc	r18, r18
    3eee:	74 9f       	mul	r23, r20
    3ef0:	33 27       	eor	r19, r19
    3ef2:	a0 0d       	add	r26, r0
    3ef4:	61 1d       	adc	r22, r1
    3ef6:	23 1f       	adc	r18, r19
    3ef8:	84 9f       	mul	r24, r20
    3efa:	60 0d       	add	r22, r0
    3efc:	21 1d       	adc	r18, r1
    3efe:	82 2f       	mov	r24, r18
    3f00:	76 2f       	mov	r23, r22
    3f02:	6a 2f       	mov	r22, r26
    3f04:	11 24       	eor	r1, r1
    3f06:	9f 57       	subi	r25, 0x7F	; 127
    3f08:	50 40       	sbci	r21, 0x00	; 0
    3f0a:	8a f0       	brmi	.+34     	; 0x3f2e <__mulsf3_pse+0x84>
    3f0c:	e1 f0       	breq	.+56     	; 0x3f46 <__mulsf3_pse+0x9c>
    3f0e:	88 23       	and	r24, r24
    3f10:	4a f0       	brmi	.+18     	; 0x3f24 <__mulsf3_pse+0x7a>
    3f12:	ee 0f       	add	r30, r30
    3f14:	ff 1f       	adc	r31, r31
    3f16:	bb 1f       	adc	r27, r27
    3f18:	66 1f       	adc	r22, r22
    3f1a:	77 1f       	adc	r23, r23
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	91 50       	subi	r25, 0x01	; 1
    3f20:	50 40       	sbci	r21, 0x00	; 0
    3f22:	a9 f7       	brne	.-22     	; 0x3f0e <__mulsf3_pse+0x64>
    3f24:	9e 3f       	cpi	r25, 0xFE	; 254
    3f26:	51 05       	cpc	r21, r1
    3f28:	70 f0       	brcs	.+28     	; 0x3f46 <__mulsf3_pse+0x9c>
    3f2a:	39 ce       	rjmp	.-910    	; 0x3b9e <__fp_inf>
    3f2c:	21 cf       	rjmp	.-446    	; 0x3d70 <__fp_szero>
    3f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    3f30:	ec f3       	brlt	.-6      	; 0x3f2c <__mulsf3_pse+0x82>
    3f32:	98 3e       	cpi	r25, 0xE8	; 232
    3f34:	dc f3       	brlt	.-10     	; 0x3f2c <__mulsf3_pse+0x82>
    3f36:	86 95       	lsr	r24
    3f38:	77 95       	ror	r23
    3f3a:	67 95       	ror	r22
    3f3c:	b7 95       	ror	r27
    3f3e:	f7 95       	ror	r31
    3f40:	e7 95       	ror	r30
    3f42:	9f 5f       	subi	r25, 0xFF	; 255
    3f44:	c1 f7       	brne	.-16     	; 0x3f36 <__mulsf3_pse+0x8c>
    3f46:	fe 2b       	or	r31, r30
    3f48:	88 0f       	add	r24, r24
    3f4a:	91 1d       	adc	r25, r1
    3f4c:	96 95       	lsr	r25
    3f4e:	87 95       	ror	r24
    3f50:	97 f9       	bld	r25, 7
    3f52:	08 95       	ret

00003f54 <pow>:
    3f54:	fa 01       	movw	r30, r20
    3f56:	ee 0f       	add	r30, r30
    3f58:	ff 1f       	adc	r31, r31
    3f5a:	30 96       	adiw	r30, 0x00	; 0
    3f5c:	21 05       	cpc	r18, r1
    3f5e:	31 05       	cpc	r19, r1
    3f60:	99 f1       	breq	.+102    	; 0x3fc8 <pow+0x74>
    3f62:	61 15       	cp	r22, r1
    3f64:	71 05       	cpc	r23, r1
    3f66:	61 f4       	brne	.+24     	; 0x3f80 <pow+0x2c>
    3f68:	80 38       	cpi	r24, 0x80	; 128
    3f6a:	bf e3       	ldi	r27, 0x3F	; 63
    3f6c:	9b 07       	cpc	r25, r27
    3f6e:	49 f1       	breq	.+82     	; 0x3fc2 <pow+0x6e>
    3f70:	68 94       	set
    3f72:	90 38       	cpi	r25, 0x80	; 128
    3f74:	81 05       	cpc	r24, r1
    3f76:	61 f0       	breq	.+24     	; 0x3f90 <pow+0x3c>
    3f78:	80 38       	cpi	r24, 0x80	; 128
    3f7a:	bf ef       	ldi	r27, 0xFF	; 255
    3f7c:	9b 07       	cpc	r25, r27
    3f7e:	41 f0       	breq	.+16     	; 0x3f90 <pow+0x3c>
    3f80:	99 23       	and	r25, r25
    3f82:	42 f5       	brpl	.+80     	; 0x3fd4 <pow+0x80>
    3f84:	ff 3f       	cpi	r31, 0xFF	; 255
    3f86:	e1 05       	cpc	r30, r1
    3f88:	31 05       	cpc	r19, r1
    3f8a:	21 05       	cpc	r18, r1
    3f8c:	11 f1       	breq	.+68     	; 0x3fd2 <pow+0x7e>
    3f8e:	e8 94       	clt
    3f90:	08 94       	sec
    3f92:	e7 95       	ror	r30
    3f94:	d9 01       	movw	r26, r18
    3f96:	aa 23       	and	r26, r26
    3f98:	29 f4       	brne	.+10     	; 0x3fa4 <pow+0x50>
    3f9a:	ab 2f       	mov	r26, r27
    3f9c:	be 2f       	mov	r27, r30
    3f9e:	f8 5f       	subi	r31, 0xF8	; 248
    3fa0:	d0 f3       	brcs	.-12     	; 0x3f96 <pow+0x42>
    3fa2:	10 c0       	rjmp	.+32     	; 0x3fc4 <pow+0x70>
    3fa4:	ff 5f       	subi	r31, 0xFF	; 255
    3fa6:	70 f4       	brcc	.+28     	; 0x3fc4 <pow+0x70>
    3fa8:	a6 95       	lsr	r26
    3faa:	e0 f7       	brcc	.-8      	; 0x3fa4 <pow+0x50>
    3fac:	f7 39       	cpi	r31, 0x97	; 151
    3fae:	50 f0       	brcs	.+20     	; 0x3fc4 <pow+0x70>
    3fb0:	19 f0       	breq	.+6      	; 0x3fb8 <pow+0x64>
    3fb2:	ff 3a       	cpi	r31, 0xAF	; 175
    3fb4:	38 f4       	brcc	.+14     	; 0x3fc4 <pow+0x70>
    3fb6:	9f 77       	andi	r25, 0x7F	; 127
    3fb8:	9f 93       	push	r25
    3fba:	0c d0       	rcall	.+24     	; 0x3fd4 <pow+0x80>
    3fbc:	0f 90       	pop	r0
    3fbe:	07 fc       	sbrc	r0, 7
    3fc0:	90 58       	subi	r25, 0x80	; 128
    3fc2:	08 95       	ret
    3fc4:	3e f0       	brts	.+14     	; 0x3fd4 <pow+0x80>
    3fc6:	1a ce       	rjmp	.-972    	; 0x3bfc <__fp_nan>
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	80 e8       	ldi	r24, 0x80	; 128
    3fce:	9f e3       	ldi	r25, 0x3F	; 63
    3fd0:	08 95       	ret
    3fd2:	4f e7       	ldi	r20, 0x7F	; 127
    3fd4:	9f 77       	andi	r25, 0x7F	; 127
    3fd6:	5f 93       	push	r21
    3fd8:	4f 93       	push	r20
    3fda:	3f 93       	push	r19
    3fdc:	2f 93       	push	r18
    3fde:	e4 de       	rcall	.-568    	; 0x3da8 <log>
    3fe0:	2f 91       	pop	r18
    3fe2:	3f 91       	pop	r19
    3fe4:	4f 91       	pop	r20
    3fe6:	5f 91       	pop	r21
    3fe8:	52 df       	rcall	.-348    	; 0x3e8e <__mulsf3>
    3fea:	70 c0       	rjmp	.+224    	; 0x40cc <exp>

00003fec <round>:
    3fec:	8f de       	rcall	.-738    	; 0x3d0c <__fp_splitA>
    3fee:	e0 f0       	brcs	.+56     	; 0x4028 <round+0x3c>
    3ff0:	9e 37       	cpi	r25, 0x7E	; 126
    3ff2:	d8 f0       	brcs	.+54     	; 0x402a <round+0x3e>
    3ff4:	96 39       	cpi	r25, 0x96	; 150
    3ff6:	b8 f4       	brcc	.+46     	; 0x4026 <round+0x3a>
    3ff8:	9e 38       	cpi	r25, 0x8E	; 142
    3ffa:	48 f4       	brcc	.+18     	; 0x400e <round+0x22>
    3ffc:	67 2f       	mov	r22, r23
    3ffe:	78 2f       	mov	r23, r24
    4000:	88 27       	eor	r24, r24
    4002:	98 5f       	subi	r25, 0xF8	; 248
    4004:	f9 cf       	rjmp	.-14     	; 0x3ff8 <round+0xc>
    4006:	86 95       	lsr	r24
    4008:	77 95       	ror	r23
    400a:	67 95       	ror	r22
    400c:	93 95       	inc	r25
    400e:	95 39       	cpi	r25, 0x95	; 149
    4010:	d0 f3       	brcs	.-12     	; 0x4006 <round+0x1a>
    4012:	b6 2f       	mov	r27, r22
    4014:	b1 70       	andi	r27, 0x01	; 1
    4016:	6b 0f       	add	r22, r27
    4018:	71 1d       	adc	r23, r1
    401a:	81 1d       	adc	r24, r1
    401c:	20 f4       	brcc	.+8      	; 0x4026 <round+0x3a>
    401e:	87 95       	ror	r24
    4020:	77 95       	ror	r23
    4022:	67 95       	ror	r22
    4024:	93 95       	inc	r25
    4026:	c1 cd       	rjmp	.-1150   	; 0x3baa <__fp_mintl>
    4028:	db cd       	rjmp	.-1098   	; 0x3be0 <__fp_mpack>
    402a:	a2 ce       	rjmp	.-700    	; 0x3d70 <__fp_szero>

0000402c <sin>:
    402c:	9f 93       	push	r25
    402e:	1d de       	rcall	.-966    	; 0x3c6a <__fp_rempio2>
    4030:	0f 90       	pop	r0
    4032:	07 fc       	sbrc	r0, 7
    4034:	ee 5f       	subi	r30, 0xFE	; 254
    4036:	51 ce       	rjmp	.-862    	; 0x3cda <__fp_sinus>
    4038:	11 f4       	brne	.+4      	; 0x403e <sin+0x12>
    403a:	0e f4       	brtc	.+2      	; 0x403e <sin+0x12>
    403c:	df cd       	rjmp	.-1090   	; 0x3bfc <__fp_nan>
    403e:	d0 cd       	rjmp	.-1120   	; 0x3be0 <__fp_mpack>

00004040 <sqrt>:
    4040:	65 de       	rcall	.-822    	; 0x3d0c <__fp_splitA>
    4042:	d0 f3       	brcs	.-12     	; 0x4038 <sin+0xc>
    4044:	99 23       	and	r25, r25
    4046:	d9 f3       	breq	.-10     	; 0x403e <sin+0x12>
    4048:	ce f3       	brts	.-14     	; 0x403c <sin+0x10>
    404a:	9f 57       	subi	r25, 0x7F	; 127
    404c:	55 0b       	sbc	r21, r21
    404e:	87 ff       	sbrs	r24, 7
    4050:	69 d0       	rcall	.+210    	; 0x4124 <__fp_norm2>
    4052:	00 24       	eor	r0, r0
    4054:	a0 e6       	ldi	r26, 0x60	; 96
    4056:	40 ea       	ldi	r20, 0xA0	; 160
    4058:	90 01       	movw	r18, r0
    405a:	80 58       	subi	r24, 0x80	; 128
    405c:	56 95       	lsr	r21
    405e:	97 95       	ror	r25
    4060:	28 f4       	brcc	.+10     	; 0x406c <sqrt+0x2c>
    4062:	80 5c       	subi	r24, 0xC0	; 192
    4064:	66 0f       	add	r22, r22
    4066:	77 1f       	adc	r23, r23
    4068:	88 1f       	adc	r24, r24
    406a:	20 f0       	brcs	.+8      	; 0x4074 <sqrt+0x34>
    406c:	26 17       	cp	r18, r22
    406e:	37 07       	cpc	r19, r23
    4070:	48 07       	cpc	r20, r24
    4072:	30 f4       	brcc	.+12     	; 0x4080 <sqrt+0x40>
    4074:	62 1b       	sub	r22, r18
    4076:	73 0b       	sbc	r23, r19
    4078:	84 0b       	sbc	r24, r20
    407a:	20 29       	or	r18, r0
    407c:	31 29       	or	r19, r1
    407e:	4a 2b       	or	r20, r26
    4080:	a6 95       	lsr	r26
    4082:	17 94       	ror	r1
    4084:	07 94       	ror	r0
    4086:	20 25       	eor	r18, r0
    4088:	31 25       	eor	r19, r1
    408a:	4a 27       	eor	r20, r26
    408c:	58 f7       	brcc	.-42     	; 0x4064 <sqrt+0x24>
    408e:	66 0f       	add	r22, r22
    4090:	77 1f       	adc	r23, r23
    4092:	88 1f       	adc	r24, r24
    4094:	20 f0       	brcs	.+8      	; 0x409e <sqrt+0x5e>
    4096:	26 17       	cp	r18, r22
    4098:	37 07       	cpc	r19, r23
    409a:	48 07       	cpc	r20, r24
    409c:	30 f4       	brcc	.+12     	; 0x40aa <sqrt+0x6a>
    409e:	62 0b       	sbc	r22, r18
    40a0:	73 0b       	sbc	r23, r19
    40a2:	84 0b       	sbc	r24, r20
    40a4:	20 0d       	add	r18, r0
    40a6:	31 1d       	adc	r19, r1
    40a8:	41 1d       	adc	r20, r1
    40aa:	a0 95       	com	r26
    40ac:	81 f7       	brne	.-32     	; 0x408e <sqrt+0x4e>
    40ae:	b9 01       	movw	r22, r18
    40b0:	84 2f       	mov	r24, r20
    40b2:	91 58       	subi	r25, 0x81	; 129
    40b4:	88 0f       	add	r24, r24
    40b6:	96 95       	lsr	r25
    40b8:	87 95       	ror	r24
    40ba:	08 95       	ret

000040bc <square>:
    40bc:	9b 01       	movw	r18, r22
    40be:	ac 01       	movw	r20, r24
    40c0:	e6 ce       	rjmp	.-564    	; 0x3e8e <__mulsf3>
    40c2:	19 f4       	brne	.+6      	; 0x40ca <square+0xe>
    40c4:	0e f0       	brts	.+2      	; 0x40c8 <square+0xc>
    40c6:	6b cd       	rjmp	.-1322   	; 0x3b9e <__fp_inf>
    40c8:	52 ce       	rjmp	.-860    	; 0x3d6e <__fp_zero>
    40ca:	98 cd       	rjmp	.-1232   	; 0x3bfc <__fp_nan>

000040cc <exp>:
    40cc:	1f de       	rcall	.-962    	; 0x3d0c <__fp_splitA>
    40ce:	c8 f3       	brcs	.-14     	; 0x40c2 <square+0x6>
    40d0:	96 38       	cpi	r25, 0x86	; 134
    40d2:	c0 f7       	brcc	.-16     	; 0x40c4 <square+0x8>
    40d4:	07 f8       	bld	r0, 7
    40d6:	0f 92       	push	r0
    40d8:	e8 94       	clt
    40da:	2b e3       	ldi	r18, 0x3B	; 59
    40dc:	3a ea       	ldi	r19, 0xAA	; 170
    40de:	48 eb       	ldi	r20, 0xB8	; 184
    40e0:	5f e7       	ldi	r21, 0x7F	; 127
    40e2:	e3 de       	rcall	.-570    	; 0x3eaa <__mulsf3_pse>
    40e4:	0f 92       	push	r0
    40e6:	0f 92       	push	r0
    40e8:	0f 92       	push	r0
    40ea:	4d b7       	in	r20, 0x3d	; 61
    40ec:	5e b7       	in	r21, 0x3e	; 62
    40ee:	0f 92       	push	r0
    40f0:	9b de       	rcall	.-714    	; 0x3e28 <modf>
    40f2:	e1 e3       	ldi	r30, 0x31	; 49
    40f4:	f1 e0       	ldi	r31, 0x01	; 1
    40f6:	85 dd       	rcall	.-1270   	; 0x3c02 <__fp_powser>
    40f8:	4f 91       	pop	r20
    40fa:	5f 91       	pop	r21
    40fc:	ef 91       	pop	r30
    40fe:	ff 91       	pop	r31
    4100:	e5 95       	asr	r30
    4102:	ee 1f       	adc	r30, r30
    4104:	ff 1f       	adc	r31, r31
    4106:	49 f0       	breq	.+18     	; 0x411a <__stack+0x1b>
    4108:	fe 57       	subi	r31, 0x7E	; 126
    410a:	e0 68       	ori	r30, 0x80	; 128
    410c:	44 27       	eor	r20, r20
    410e:	ee 0f       	add	r30, r30
    4110:	44 1f       	adc	r20, r20
    4112:	fa 95       	dec	r31
    4114:	e1 f7       	brne	.-8      	; 0x410e <__stack+0xf>
    4116:	41 95       	neg	r20
    4118:	55 0b       	sbc	r21, r21
    411a:	1e d0       	rcall	.+60     	; 0x4158 <ldexp>
    411c:	0f 90       	pop	r0
    411e:	07 fe       	sbrs	r0, 7
    4120:	31 ce       	rjmp	.-926    	; 0x3d84 <inverse>
    4122:	08 95       	ret

00004124 <__fp_norm2>:
    4124:	91 50       	subi	r25, 0x01	; 1
    4126:	50 40       	sbci	r21, 0x00	; 0
    4128:	66 0f       	add	r22, r22
    412a:	77 1f       	adc	r23, r23
    412c:	88 1f       	adc	r24, r24
    412e:	d2 f7       	brpl	.-12     	; 0x4124 <__fp_norm2>
    4130:	08 95       	ret

00004132 <__fp_powsodd>:
    4132:	9f 93       	push	r25
    4134:	8f 93       	push	r24
    4136:	7f 93       	push	r23
    4138:	6f 93       	push	r22
    413a:	ff 93       	push	r31
    413c:	ef 93       	push	r30
    413e:	9b 01       	movw	r18, r22
    4140:	ac 01       	movw	r20, r24
    4142:	a5 de       	rcall	.-694    	; 0x3e8e <__mulsf3>
    4144:	ef 91       	pop	r30
    4146:	ff 91       	pop	r31
    4148:	5c dd       	rcall	.-1352   	; 0x3c02 <__fp_powser>
    414a:	2f 91       	pop	r18
    414c:	3f 91       	pop	r19
    414e:	4f 91       	pop	r20
    4150:	5f 91       	pop	r21
    4152:	9d ce       	rjmp	.-710    	; 0x3e8e <__mulsf3>
    4154:	24 cd       	rjmp	.-1464   	; 0x3b9e <__fp_inf>
    4156:	44 cd       	rjmp	.-1400   	; 0x3be0 <__fp_mpack>

00004158 <ldexp>:
    4158:	d9 dd       	rcall	.-1102   	; 0x3d0c <__fp_splitA>
    415a:	e8 f3       	brcs	.-6      	; 0x4156 <__fp_powsodd+0x24>
    415c:	99 23       	and	r25, r25
    415e:	d9 f3       	breq	.-10     	; 0x4156 <__fp_powsodd+0x24>
    4160:	94 0f       	add	r25, r20
    4162:	51 1d       	adc	r21, r1
    4164:	bb f3       	brvs	.-18     	; 0x4154 <__fp_powsodd+0x22>
    4166:	91 50       	subi	r25, 0x01	; 1
    4168:	50 40       	sbci	r21, 0x00	; 0
    416a:	94 f0       	brlt	.+36     	; 0x4190 <ldexp+0x38>
    416c:	59 f0       	breq	.+22     	; 0x4184 <ldexp+0x2c>
    416e:	88 23       	and	r24, r24
    4170:	32 f0       	brmi	.+12     	; 0x417e <ldexp+0x26>
    4172:	66 0f       	add	r22, r22
    4174:	77 1f       	adc	r23, r23
    4176:	88 1f       	adc	r24, r24
    4178:	91 50       	subi	r25, 0x01	; 1
    417a:	50 40       	sbci	r21, 0x00	; 0
    417c:	c1 f7       	brne	.-16     	; 0x416e <ldexp+0x16>
    417e:	9e 3f       	cpi	r25, 0xFE	; 254
    4180:	51 05       	cpc	r21, r1
    4182:	44 f7       	brge	.-48     	; 0x4154 <__fp_powsodd+0x22>
    4184:	88 0f       	add	r24, r24
    4186:	91 1d       	adc	r25, r1
    4188:	96 95       	lsr	r25
    418a:	87 95       	ror	r24
    418c:	97 f9       	bld	r25, 7
    418e:	08 95       	ret
    4190:	5f 3f       	cpi	r21, 0xFF	; 255
    4192:	ac f0       	brlt	.+42     	; 0x41be <ldexp+0x66>
    4194:	98 3e       	cpi	r25, 0xE8	; 232
    4196:	9c f0       	brlt	.+38     	; 0x41be <ldexp+0x66>
    4198:	bb 27       	eor	r27, r27
    419a:	86 95       	lsr	r24
    419c:	77 95       	ror	r23
    419e:	67 95       	ror	r22
    41a0:	b7 95       	ror	r27
    41a2:	08 f4       	brcc	.+2      	; 0x41a6 <ldexp+0x4e>
    41a4:	b1 60       	ori	r27, 0x01	; 1
    41a6:	93 95       	inc	r25
    41a8:	c1 f7       	brne	.-16     	; 0x419a <ldexp+0x42>
    41aa:	bb 0f       	add	r27, r27
    41ac:	58 f7       	brcc	.-42     	; 0x4184 <ldexp+0x2c>
    41ae:	11 f4       	brne	.+4      	; 0x41b4 <ldexp+0x5c>
    41b0:	60 ff       	sbrs	r22, 0
    41b2:	e8 cf       	rjmp	.-48     	; 0x4184 <ldexp+0x2c>
    41b4:	6f 5f       	subi	r22, 0xFF	; 255
    41b6:	7f 4f       	sbci	r23, 0xFF	; 255
    41b8:	8f 4f       	sbci	r24, 0xFF	; 255
    41ba:	9f 4f       	sbci	r25, 0xFF	; 255
    41bc:	e3 cf       	rjmp	.-58     	; 0x4184 <ldexp+0x2c>
    41be:	d8 cd       	rjmp	.-1104   	; 0x3d70 <__fp_szero>

000041c0 <malloc>:
    41c0:	0f 93       	push	r16
    41c2:	1f 93       	push	r17
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	82 30       	cpi	r24, 0x02	; 2
    41ca:	91 05       	cpc	r25, r1
    41cc:	10 f4       	brcc	.+4      	; 0x41d2 <malloc+0x12>
    41ce:	82 e0       	ldi	r24, 0x02	; 2
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	e0 91 62 04 	lds	r30, 0x0462
    41d6:	f0 91 63 04 	lds	r31, 0x0463
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	c0 e0       	ldi	r28, 0x00	; 0
    41e0:	d0 e0       	ldi	r29, 0x00	; 0
    41e2:	23 c0       	rjmp	.+70     	; 0x422a <malloc+0x6a>
    41e4:	40 81       	ld	r20, Z
    41e6:	51 81       	ldd	r21, Z+1	; 0x01
    41e8:	48 17       	cp	r20, r24
    41ea:	59 07       	cpc	r21, r25
    41ec:	a8 f0       	brcs	.+42     	; 0x4218 <malloc+0x58>
    41ee:	48 17       	cp	r20, r24
    41f0:	59 07       	cpc	r21, r25
    41f2:	61 f4       	brne	.+24     	; 0x420c <malloc+0x4c>
    41f4:	82 81       	ldd	r24, Z+2	; 0x02
    41f6:	93 81       	ldd	r25, Z+3	; 0x03
    41f8:	20 97       	sbiw	r28, 0x00	; 0
    41fa:	19 f0       	breq	.+6      	; 0x4202 <malloc+0x42>
    41fc:	9b 83       	std	Y+3, r25	; 0x03
    41fe:	8a 83       	std	Y+2, r24	; 0x02
    4200:	2e c0       	rjmp	.+92     	; 0x425e <malloc+0x9e>
    4202:	90 93 63 04 	sts	0x0463, r25
    4206:	80 93 62 04 	sts	0x0462, r24
    420a:	29 c0       	rjmp	.+82     	; 0x425e <malloc+0x9e>
    420c:	21 15       	cp	r18, r1
    420e:	31 05       	cpc	r19, r1
    4210:	29 f0       	breq	.+10     	; 0x421c <malloc+0x5c>
    4212:	42 17       	cp	r20, r18
    4214:	53 07       	cpc	r21, r19
    4216:	10 f0       	brcs	.+4      	; 0x421c <malloc+0x5c>
    4218:	a9 01       	movw	r20, r18
    421a:	02 c0       	rjmp	.+4      	; 0x4220 <malloc+0x60>
    421c:	be 01       	movw	r22, r28
    421e:	df 01       	movw	r26, r30
    4220:	02 81       	ldd	r16, Z+2	; 0x02
    4222:	13 81       	ldd	r17, Z+3	; 0x03
    4224:	ef 01       	movw	r28, r30
    4226:	9a 01       	movw	r18, r20
    4228:	f8 01       	movw	r30, r16
    422a:	30 97       	sbiw	r30, 0x00	; 0
    422c:	d9 f6       	brne	.-74     	; 0x41e4 <malloc+0x24>
    422e:	21 15       	cp	r18, r1
    4230:	31 05       	cpc	r19, r1
    4232:	09 f1       	breq	.+66     	; 0x4276 <malloc+0xb6>
    4234:	28 1b       	sub	r18, r24
    4236:	39 0b       	sbc	r19, r25
    4238:	24 30       	cpi	r18, 0x04	; 4
    423a:	31 05       	cpc	r19, r1
    423c:	90 f4       	brcc	.+36     	; 0x4262 <malloc+0xa2>
    423e:	12 96       	adiw	r26, 0x02	; 2
    4240:	8d 91       	ld	r24, X+
    4242:	9c 91       	ld	r25, X
    4244:	13 97       	sbiw	r26, 0x03	; 3
    4246:	61 15       	cp	r22, r1
    4248:	71 05       	cpc	r23, r1
    424a:	21 f0       	breq	.+8      	; 0x4254 <malloc+0x94>
    424c:	fb 01       	movw	r30, r22
    424e:	93 83       	std	Z+3, r25	; 0x03
    4250:	82 83       	std	Z+2, r24	; 0x02
    4252:	04 c0       	rjmp	.+8      	; 0x425c <malloc+0x9c>
    4254:	90 93 63 04 	sts	0x0463, r25
    4258:	80 93 62 04 	sts	0x0462, r24
    425c:	fd 01       	movw	r30, r26
    425e:	32 96       	adiw	r30, 0x02	; 2
    4260:	44 c0       	rjmp	.+136    	; 0x42ea <malloc+0x12a>
    4262:	fd 01       	movw	r30, r26
    4264:	e2 0f       	add	r30, r18
    4266:	f3 1f       	adc	r31, r19
    4268:	81 93       	st	Z+, r24
    426a:	91 93       	st	Z+, r25
    426c:	22 50       	subi	r18, 0x02	; 2
    426e:	31 09       	sbc	r19, r1
    4270:	2d 93       	st	X+, r18
    4272:	3c 93       	st	X, r19
    4274:	3a c0       	rjmp	.+116    	; 0x42ea <malloc+0x12a>
    4276:	20 91 60 04 	lds	r18, 0x0460
    427a:	30 91 61 04 	lds	r19, 0x0461
    427e:	23 2b       	or	r18, r19
    4280:	41 f4       	brne	.+16     	; 0x4292 <malloc+0xd2>
    4282:	20 91 04 01 	lds	r18, 0x0104
    4286:	30 91 05 01 	lds	r19, 0x0105
    428a:	30 93 61 04 	sts	0x0461, r19
    428e:	20 93 60 04 	sts	0x0460, r18
    4292:	20 91 02 01 	lds	r18, 0x0102
    4296:	30 91 03 01 	lds	r19, 0x0103
    429a:	21 15       	cp	r18, r1
    429c:	31 05       	cpc	r19, r1
    429e:	41 f4       	brne	.+16     	; 0x42b0 <malloc+0xf0>
    42a0:	2d b7       	in	r18, 0x3d	; 61
    42a2:	3e b7       	in	r19, 0x3e	; 62
    42a4:	40 91 06 01 	lds	r20, 0x0106
    42a8:	50 91 07 01 	lds	r21, 0x0107
    42ac:	24 1b       	sub	r18, r20
    42ae:	35 0b       	sbc	r19, r21
    42b0:	e0 91 60 04 	lds	r30, 0x0460
    42b4:	f0 91 61 04 	lds	r31, 0x0461
    42b8:	e2 17       	cp	r30, r18
    42ba:	f3 07       	cpc	r31, r19
    42bc:	a0 f4       	brcc	.+40     	; 0x42e6 <malloc+0x126>
    42be:	2e 1b       	sub	r18, r30
    42c0:	3f 0b       	sbc	r19, r31
    42c2:	28 17       	cp	r18, r24
    42c4:	39 07       	cpc	r19, r25
    42c6:	78 f0       	brcs	.+30     	; 0x42e6 <malloc+0x126>
    42c8:	ac 01       	movw	r20, r24
    42ca:	4e 5f       	subi	r20, 0xFE	; 254
    42cc:	5f 4f       	sbci	r21, 0xFF	; 255
    42ce:	24 17       	cp	r18, r20
    42d0:	35 07       	cpc	r19, r21
    42d2:	48 f0       	brcs	.+18     	; 0x42e6 <malloc+0x126>
    42d4:	4e 0f       	add	r20, r30
    42d6:	5f 1f       	adc	r21, r31
    42d8:	50 93 61 04 	sts	0x0461, r21
    42dc:	40 93 60 04 	sts	0x0460, r20
    42e0:	81 93       	st	Z+, r24
    42e2:	91 93       	st	Z+, r25
    42e4:	02 c0       	rjmp	.+4      	; 0x42ea <malloc+0x12a>
    42e6:	e0 e0       	ldi	r30, 0x00	; 0
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	cf 01       	movw	r24, r30
    42ec:	df 91       	pop	r29
    42ee:	cf 91       	pop	r28
    42f0:	1f 91       	pop	r17
    42f2:	0f 91       	pop	r16
    42f4:	08 95       	ret

000042f6 <free>:
    42f6:	ef 92       	push	r14
    42f8:	ff 92       	push	r15
    42fa:	0f 93       	push	r16
    42fc:	1f 93       	push	r17
    42fe:	cf 93       	push	r28
    4300:	df 93       	push	r29
    4302:	00 97       	sbiw	r24, 0x00	; 0
    4304:	09 f4       	brne	.+2      	; 0x4308 <free+0x12>
    4306:	8e c0       	rjmp	.+284    	; 0x4424 <free+0x12e>
    4308:	dc 01       	movw	r26, r24
    430a:	12 97       	sbiw	r26, 0x02	; 2
    430c:	13 96       	adiw	r26, 0x03	; 3
    430e:	1c 92       	st	X, r1
    4310:	1e 92       	st	-X, r1
    4312:	12 97       	sbiw	r26, 0x02	; 2
    4314:	e0 90 62 04 	lds	r14, 0x0462
    4318:	f0 90 63 04 	lds	r15, 0x0463
    431c:	e1 14       	cp	r14, r1
    431e:	f1 04       	cpc	r15, r1
    4320:	89 f4       	brne	.+34     	; 0x4344 <free+0x4e>
    4322:	2d 91       	ld	r18, X+
    4324:	3c 91       	ld	r19, X
    4326:	11 97       	sbiw	r26, 0x01	; 1
    4328:	28 0f       	add	r18, r24
    432a:	39 1f       	adc	r19, r25
    432c:	80 91 60 04 	lds	r24, 0x0460
    4330:	90 91 61 04 	lds	r25, 0x0461
    4334:	82 17       	cp	r24, r18
    4336:	93 07       	cpc	r25, r19
    4338:	89 f5       	brne	.+98     	; 0x439c <free+0xa6>
    433a:	b0 93 61 04 	sts	0x0461, r27
    433e:	a0 93 60 04 	sts	0x0460, r26
    4342:	70 c0       	rjmp	.+224    	; 0x4424 <free+0x12e>
    4344:	e7 01       	movw	r28, r14
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	01 c0       	rjmp	.+2      	; 0x434e <free+0x58>
    434c:	ea 01       	movw	r28, r20
    434e:	ca 17       	cp	r28, r26
    4350:	db 07       	cpc	r29, r27
    4352:	38 f4       	brcc	.+14     	; 0x4362 <free+0x6c>
    4354:	4a 81       	ldd	r20, Y+2	; 0x02
    4356:	5b 81       	ldd	r21, Y+3	; 0x03
    4358:	9e 01       	movw	r18, r28
    435a:	41 15       	cp	r20, r1
    435c:	51 05       	cpc	r21, r1
    435e:	b1 f7       	brne	.-20     	; 0x434c <free+0x56>
    4360:	22 c0       	rjmp	.+68     	; 0x43a6 <free+0xb0>
    4362:	ac 01       	movw	r20, r24
    4364:	42 50       	subi	r20, 0x02	; 2
    4366:	51 09       	sbc	r21, r1
    4368:	fa 01       	movw	r30, r20
    436a:	d3 83       	std	Z+3, r29	; 0x03
    436c:	c2 83       	std	Z+2, r28	; 0x02
    436e:	00 81       	ld	r16, Z
    4370:	11 81       	ldd	r17, Z+1	; 0x01
    4372:	bc 01       	movw	r22, r24
    4374:	60 0f       	add	r22, r16
    4376:	71 1f       	adc	r23, r17
    4378:	6c 17       	cp	r22, r28
    437a:	7d 07       	cpc	r23, r29
    437c:	61 f4       	brne	.+24     	; 0x4396 <free+0xa0>
    437e:	68 81       	ld	r22, Y
    4380:	79 81       	ldd	r23, Y+1	; 0x01
    4382:	60 0f       	add	r22, r16
    4384:	71 1f       	adc	r23, r17
    4386:	6e 5f       	subi	r22, 0xFE	; 254
    4388:	7f 4f       	sbci	r23, 0xFF	; 255
    438a:	71 83       	std	Z+1, r23	; 0x01
    438c:	60 83       	st	Z, r22
    438e:	6a 81       	ldd	r22, Y+2	; 0x02
    4390:	7b 81       	ldd	r23, Y+3	; 0x03
    4392:	73 83       	std	Z+3, r23	; 0x03
    4394:	62 83       	std	Z+2, r22	; 0x02
    4396:	21 15       	cp	r18, r1
    4398:	31 05       	cpc	r19, r1
    439a:	29 f4       	brne	.+10     	; 0x43a6 <free+0xb0>
    439c:	b0 93 63 04 	sts	0x0463, r27
    43a0:	a0 93 62 04 	sts	0x0462, r26
    43a4:	3f c0       	rjmp	.+126    	; 0x4424 <free+0x12e>
    43a6:	f9 01       	movw	r30, r18
    43a8:	b3 83       	std	Z+3, r27	; 0x03
    43aa:	a2 83       	std	Z+2, r26	; 0x02
    43ac:	e9 01       	movw	r28, r18
    43ae:	49 91       	ld	r20, Y+
    43b0:	59 91       	ld	r21, Y+
    43b2:	c4 0f       	add	r28, r20
    43b4:	d5 1f       	adc	r29, r21
    43b6:	ac 17       	cp	r26, r28
    43b8:	bd 07       	cpc	r27, r29
    43ba:	71 f4       	brne	.+28     	; 0x43d8 <free+0xe2>
    43bc:	dc 01       	movw	r26, r24
    43be:	9e 91       	ld	r25, -X
    43c0:	8e 91       	ld	r24, -X
    43c2:	84 0f       	add	r24, r20
    43c4:	95 1f       	adc	r25, r21
    43c6:	02 96       	adiw	r24, 0x02	; 2
    43c8:	91 83       	std	Z+1, r25	; 0x01
    43ca:	80 83       	st	Z, r24
    43cc:	12 96       	adiw	r26, 0x02	; 2
    43ce:	8d 91       	ld	r24, X+
    43d0:	9c 91       	ld	r25, X
    43d2:	13 97       	sbiw	r26, 0x03	; 3
    43d4:	93 83       	std	Z+3, r25	; 0x03
    43d6:	82 83       	std	Z+2, r24	; 0x02
    43d8:	a0 e0       	ldi	r26, 0x00	; 0
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	02 c0       	rjmp	.+4      	; 0x43e2 <free+0xec>
    43de:	d7 01       	movw	r26, r14
    43e0:	7c 01       	movw	r14, r24
    43e2:	f7 01       	movw	r30, r14
    43e4:	82 81       	ldd	r24, Z+2	; 0x02
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	00 97       	sbiw	r24, 0x00	; 0
    43ea:	c9 f7       	brne	.-14     	; 0x43de <free+0xe8>
    43ec:	c7 01       	movw	r24, r14
    43ee:	02 96       	adiw	r24, 0x02	; 2
    43f0:	20 81       	ld	r18, Z
    43f2:	31 81       	ldd	r19, Z+1	; 0x01
    43f4:	82 0f       	add	r24, r18
    43f6:	93 1f       	adc	r25, r19
    43f8:	20 91 60 04 	lds	r18, 0x0460
    43fc:	30 91 61 04 	lds	r19, 0x0461
    4400:	28 17       	cp	r18, r24
    4402:	39 07       	cpc	r19, r25
    4404:	79 f4       	brne	.+30     	; 0x4424 <free+0x12e>
    4406:	10 97       	sbiw	r26, 0x00	; 0
    4408:	29 f4       	brne	.+10     	; 0x4414 <free+0x11e>
    440a:	10 92 63 04 	sts	0x0463, r1
    440e:	10 92 62 04 	sts	0x0462, r1
    4412:	04 c0       	rjmp	.+8      	; 0x441c <free+0x126>
    4414:	13 96       	adiw	r26, 0x03	; 3
    4416:	1c 92       	st	X, r1
    4418:	1e 92       	st	-X, r1
    441a:	12 97       	sbiw	r26, 0x02	; 2
    441c:	f0 92 61 04 	sts	0x0461, r15
    4420:	e0 92 60 04 	sts	0x0460, r14
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	ff 90       	pop	r15
    442e:	ef 90       	pop	r14
    4430:	08 95       	ret

00004432 <strtod>:
    4432:	8f 92       	push	r8
    4434:	9f 92       	push	r9
    4436:	af 92       	push	r10
    4438:	bf 92       	push	r11
    443a:	cf 92       	push	r12
    443c:	df 92       	push	r13
    443e:	ef 92       	push	r14
    4440:	ff 92       	push	r15
    4442:	0f 93       	push	r16
    4444:	1f 93       	push	r17
    4446:	cf 93       	push	r28
    4448:	df 93       	push	r29
    444a:	8b 01       	movw	r16, r22
    444c:	61 15       	cp	r22, r1
    444e:	71 05       	cpc	r23, r1
    4450:	19 f0       	breq	.+6      	; 0x4458 <strtod+0x26>
    4452:	fb 01       	movw	r30, r22
    4454:	80 83       	st	Z, r24
    4456:	91 83       	std	Z+1, r25	; 0x01
    4458:	7c 01       	movw	r14, r24
    445a:	f7 01       	movw	r30, r14
    445c:	c1 90       	ld	r12, Z+
    445e:	7f 01       	movw	r14, r30
    4460:	ef 01       	movw	r28, r30
    4462:	8c 2d       	mov	r24, r12
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0e 94 7e 23 	call	0x46fc	; 0x46fc <isspace>
    446a:	89 2b       	or	r24, r25
    446c:	b1 f7       	brne	.-20     	; 0x445a <strtod+0x28>
    446e:	fd e2       	ldi	r31, 0x2D	; 45
    4470:	cf 12       	cpse	r12, r31
    4472:	04 c0       	rjmp	.+8      	; 0x447c <strtod+0x4a>
    4474:	c9 90       	ld	r12, Y+
    4476:	dd 24       	eor	r13, r13
    4478:	d3 94       	inc	r13
    447a:	05 c0       	rjmp	.+10     	; 0x4486 <strtod+0x54>
    447c:	2b e2       	ldi	r18, 0x2B	; 43
    447e:	c2 12       	cpse	r12, r18
    4480:	01 c0       	rjmp	.+2      	; 0x4484 <strtod+0x52>
    4482:	c9 90       	ld	r12, Y+
    4484:	d1 2c       	mov	r13, r1
    4486:	7e 01       	movw	r14, r28
    4488:	41 e0       	ldi	r20, 0x01	; 1
    448a:	e4 1a       	sub	r14, r20
    448c:	f1 08       	sbc	r15, r1
    448e:	43 e0       	ldi	r20, 0x03	; 3
    4490:	50 e0       	ldi	r21, 0x00	; 0
    4492:	69 e5       	ldi	r22, 0x59	; 89
    4494:	71 e0       	ldi	r23, 0x01	; 1
    4496:	c7 01       	movw	r24, r14
    4498:	0e 94 86 23 	call	0x470c	; 0x470c <strncasecmp_P>
    449c:	89 2b       	or	r24, r25
    449e:	e9 f4       	brne	.+58     	; 0x44da <strtod+0xa8>
    44a0:	7e 01       	movw	r14, r28
    44a2:	82 e0       	ldi	r24, 0x02	; 2
    44a4:	e8 0e       	add	r14, r24
    44a6:	f1 1c       	adc	r15, r1
    44a8:	45 e0       	ldi	r20, 0x05	; 5
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	6c e5       	ldi	r22, 0x5C	; 92
    44ae:	71 e0       	ldi	r23, 0x01	; 1
    44b0:	c7 01       	movw	r24, r14
    44b2:	0e 94 86 23 	call	0x470c	; 0x470c <strncasecmp_P>
    44b6:	89 2b       	or	r24, r25
    44b8:	21 f4       	brne	.+8      	; 0x44c2 <strtod+0x90>
    44ba:	7e 01       	movw	r14, r28
    44bc:	e7 e0       	ldi	r30, 0x07	; 7
    44be:	ee 0e       	add	r14, r30
    44c0:	f1 1c       	adc	r15, r1
    44c2:	01 15       	cp	r16, r1
    44c4:	11 05       	cpc	r17, r1
    44c6:	19 f0       	breq	.+6      	; 0x44ce <strtod+0x9c>
    44c8:	f8 01       	movw	r30, r16
    44ca:	f1 82       	std	Z+1, r15	; 0x01
    44cc:	e0 82       	st	Z, r14
    44ce:	10 e0       	ldi	r17, 0x00	; 0
    44d0:	d0 e0       	ldi	r29, 0x00	; 0
    44d2:	c0 e8       	ldi	r28, 0x80	; 128
    44d4:	d1 10       	cpse	r13, r1
    44d6:	fb c0       	rjmp	.+502    	; 0x46ce <strtod+0x29c>
    44d8:	ff c0       	rjmp	.+510    	; 0x46d8 <strtod+0x2a6>
    44da:	43 e0       	ldi	r20, 0x03	; 3
    44dc:	50 e0       	ldi	r21, 0x00	; 0
    44de:	61 e6       	ldi	r22, 0x61	; 97
    44e0:	71 e0       	ldi	r23, 0x01	; 1
    44e2:	c7 01       	movw	r24, r14
    44e4:	0e 94 86 23 	call	0x470c	; 0x470c <strncasecmp_P>
    44e8:	89 2b       	or	r24, r25
    44ea:	49 f4       	brne	.+18     	; 0x44fe <strtod+0xcc>
    44ec:	01 15       	cp	r16, r1
    44ee:	11 05       	cpc	r17, r1
    44f0:	09 f4       	brne	.+2      	; 0x44f4 <strtod+0xc2>
    44f2:	ef c0       	rjmp	.+478    	; 0x46d2 <strtod+0x2a0>
    44f4:	22 96       	adiw	r28, 0x02	; 2
    44f6:	f8 01       	movw	r30, r16
    44f8:	d1 83       	std	Z+1, r29	; 0x01
    44fa:	c0 83       	st	Z, r28
    44fc:	ea c0       	rjmp	.+468    	; 0x46d2 <strtod+0x2a0>
    44fe:	60 e0       	ldi	r22, 0x00	; 0
    4500:	70 e0       	ldi	r23, 0x00	; 0
    4502:	cb 01       	movw	r24, r22
    4504:	e1 2c       	mov	r14, r1
    4506:	f1 2c       	mov	r15, r1
    4508:	ec 2d       	mov	r30, r12
    450a:	e0 53       	subi	r30, 0x30	; 48
    450c:	ea 30       	cpi	r30, 0x0A	; 10
    450e:	48 f5       	brcc	.+82     	; 0x4562 <strtod+0x130>
    4510:	fd 2d       	mov	r31, r13
    4512:	f2 60       	ori	r31, 0x02	; 2
    4514:	2d 2d       	mov	r18, r13
    4516:	28 70       	andi	r18, 0x08	; 8
    4518:	d2 fe       	sbrs	r13, 2
    451a:	06 c0       	rjmp	.+12     	; 0x4528 <strtod+0xf6>
    451c:	21 11       	cpse	r18, r1
    451e:	27 c0       	rjmp	.+78     	; 0x456e <strtod+0x13c>
    4520:	2f ef       	ldi	r18, 0xFF	; 255
    4522:	e2 1a       	sub	r14, r18
    4524:	f2 0a       	sbc	r15, r18
    4526:	23 c0       	rjmp	.+70     	; 0x456e <strtod+0x13c>
    4528:	22 23       	and	r18, r18
    452a:	19 f0       	breq	.+6      	; 0x4532 <strtod+0x100>
    452c:	41 e0       	ldi	r20, 0x01	; 1
    452e:	e4 1a       	sub	r14, r20
    4530:	f1 08       	sbc	r15, r1
    4532:	a5 e0       	ldi	r26, 0x05	; 5
    4534:	b0 e0       	ldi	r27, 0x00	; 0
    4536:	9b 01       	movw	r18, r22
    4538:	ac 01       	movw	r20, r24
    453a:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <__muluhisi3>
    453e:	66 0f       	add	r22, r22
    4540:	77 1f       	adc	r23, r23
    4542:	88 1f       	adc	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	6e 0f       	add	r22, r30
    4548:	71 1d       	adc	r23, r1
    454a:	81 1d       	adc	r24, r1
    454c:	91 1d       	adc	r25, r1
    454e:	68 39       	cpi	r22, 0x98	; 152
    4550:	e9 e9       	ldi	r30, 0x99	; 153
    4552:	7e 07       	cpc	r23, r30
    4554:	8e 07       	cpc	r24, r30
    4556:	e9 e1       	ldi	r30, 0x19	; 25
    4558:	9e 07       	cpc	r25, r30
    455a:	48 f0       	brcs	.+18     	; 0x456e <strtod+0x13c>
    455c:	fd 2d       	mov	r31, r13
    455e:	f6 60       	ori	r31, 0x06	; 6
    4560:	06 c0       	rjmp	.+12     	; 0x456e <strtod+0x13c>
    4562:	ee 3f       	cpi	r30, 0xFE	; 254
    4564:	39 f4       	brne	.+14     	; 0x4574 <strtod+0x142>
    4566:	d3 fc       	sbrc	r13, 3
    4568:	3d c0       	rjmp	.+122    	; 0x45e4 <strtod+0x1b2>
    456a:	fd 2d       	mov	r31, r13
    456c:	f8 60       	ori	r31, 0x08	; 8
    456e:	c9 90       	ld	r12, Y+
    4570:	df 2e       	mov	r13, r31
    4572:	ca cf       	rjmp	.-108    	; 0x4508 <strtod+0xd6>
    4574:	e5 33       	cpi	r30, 0x35	; 53
    4576:	11 f0       	breq	.+4      	; 0x457c <strtod+0x14a>
    4578:	e5 31       	cpi	r30, 0x15	; 21
    457a:	a1 f5       	brne	.+104    	; 0x45e4 <strtod+0x1b2>
    457c:	a8 81       	ld	r26, Y
    457e:	ad 32       	cpi	r26, 0x2D	; 45
    4580:	19 f4       	brne	.+6      	; 0x4588 <strtod+0x156>
    4582:	f0 e1       	ldi	r31, 0x10	; 16
    4584:	df 2a       	or	r13, r31
    4586:	06 c0       	rjmp	.+12     	; 0x4594 <strtod+0x162>
    4588:	ab 32       	cpi	r26, 0x2B	; 43
    458a:	21 f0       	breq	.+8      	; 0x4594 <strtod+0x162>
    458c:	21 96       	adiw	r28, 0x01	; 1
    458e:	21 e0       	ldi	r18, 0x01	; 1
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	04 c0       	rjmp	.+8      	; 0x459c <strtod+0x16a>
    4594:	a9 81       	ldd	r26, Y+1	; 0x01
    4596:	22 96       	adiw	r28, 0x02	; 2
    4598:	22 e0       	ldi	r18, 0x02	; 2
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	a0 53       	subi	r26, 0x30	; 48
    459e:	aa 30       	cpi	r26, 0x0A	; 10
    45a0:	18 f0       	brcs	.+6      	; 0x45a8 <strtod+0x176>
    45a2:	c2 1b       	sub	r28, r18
    45a4:	d3 0b       	sbc	r29, r19
    45a6:	1e c0       	rjmp	.+60     	; 0x45e4 <strtod+0x1b2>
    45a8:	fe 01       	movw	r30, r28
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	20 38       	cpi	r18, 0x80	; 128
    45b0:	4c e0       	ldi	r20, 0x0C	; 12
    45b2:	34 07       	cpc	r19, r20
    45b4:	5c f4       	brge	.+22     	; 0x45cc <strtod+0x19a>
    45b6:	a9 01       	movw	r20, r18
    45b8:	44 0f       	add	r20, r20
    45ba:	55 1f       	adc	r21, r21
    45bc:	44 0f       	add	r20, r20
    45be:	55 1f       	adc	r21, r21
    45c0:	24 0f       	add	r18, r20
    45c2:	35 1f       	adc	r19, r21
    45c4:	22 0f       	add	r18, r18
    45c6:	33 1f       	adc	r19, r19
    45c8:	2a 0f       	add	r18, r26
    45ca:	31 1d       	adc	r19, r1
    45cc:	a1 91       	ld	r26, Z+
    45ce:	a0 53       	subi	r26, 0x30	; 48
    45d0:	ef 01       	movw	r28, r30
    45d2:	aa 30       	cpi	r26, 0x0A	; 10
    45d4:	60 f3       	brcs	.-40     	; 0x45ae <strtod+0x17c>
    45d6:	d4 fe       	sbrs	r13, 4
    45d8:	03 c0       	rjmp	.+6      	; 0x45e0 <strtod+0x1ae>
    45da:	31 95       	neg	r19
    45dc:	21 95       	neg	r18
    45de:	31 09       	sbc	r19, r1
    45e0:	e2 0e       	add	r14, r18
    45e2:	f3 1e       	adc	r15, r19
    45e4:	d1 fe       	sbrs	r13, 1
    45e6:	07 c0       	rjmp	.+14     	; 0x45f6 <strtod+0x1c4>
    45e8:	01 15       	cp	r16, r1
    45ea:	11 05       	cpc	r17, r1
    45ec:	21 f0       	breq	.+8      	; 0x45f6 <strtod+0x1c4>
    45ee:	21 97       	sbiw	r28, 0x01	; 1
    45f0:	f8 01       	movw	r30, r16
    45f2:	d1 83       	std	Z+1, r29	; 0x01
    45f4:	c0 83       	st	Z, r28
    45f6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__floatunsisf>
    45fa:	2d 2d       	mov	r18, r13
    45fc:	23 70       	andi	r18, 0x03	; 3
    45fe:	23 30       	cpi	r18, 0x03	; 3
    4600:	29 f0       	breq	.+10     	; 0x460c <strtod+0x1da>
    4602:	16 2f       	mov	r17, r22
    4604:	d7 2f       	mov	r29, r23
    4606:	c8 2f       	mov	r28, r24
    4608:	09 2f       	mov	r16, r25
    460a:	07 c0       	rjmp	.+14     	; 0x461a <strtod+0x1e8>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	b0 58       	subi	r27, 0x80	; 128
    4612:	18 2f       	mov	r17, r24
    4614:	d9 2f       	mov	r29, r25
    4616:	ca 2f       	mov	r28, r26
    4618:	0b 2f       	mov	r16, r27
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	a9 01       	movw	r20, r18
    4620:	61 2f       	mov	r22, r17
    4622:	7d 2f       	mov	r23, r29
    4624:	8c 2f       	mov	r24, r28
    4626:	90 2f       	mov	r25, r16
    4628:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    462c:	88 23       	and	r24, r24
    462e:	09 f4       	brne	.+2      	; 0x4632 <strtod+0x200>
    4630:	54 c0       	rjmp	.+168    	; 0x46da <strtod+0x2a8>
    4632:	f7 fe       	sbrs	r15, 7
    4634:	08 c0       	rjmp	.+16     	; 0x4646 <strtod+0x214>
    4636:	f1 94       	neg	r15
    4638:	e1 94       	neg	r14
    463a:	f1 08       	sbc	r15, r1
    463c:	30 e9       	ldi	r19, 0x90	; 144
    463e:	c3 2e       	mov	r12, r19
    4640:	31 e0       	ldi	r19, 0x01	; 1
    4642:	d3 2e       	mov	r13, r19
    4644:	04 c0       	rjmp	.+8      	; 0x464e <strtod+0x21c>
    4646:	28 e7       	ldi	r18, 0x78	; 120
    4648:	c2 2e       	mov	r12, r18
    464a:	21 e0       	ldi	r18, 0x01	; 1
    464c:	d2 2e       	mov	r13, r18
    464e:	46 01       	movw	r8, r12
    4650:	f8 e1       	ldi	r31, 0x18	; 24
    4652:	8f 1a       	sub	r8, r31
    4654:	91 08       	sbc	r9, r1
    4656:	90 e2       	ldi	r25, 0x20	; 32
    4658:	a9 2e       	mov	r10, r25
    465a:	b1 2c       	mov	r11, r1
    465c:	15 c0       	rjmp	.+42     	; 0x4688 <strtod+0x256>
    465e:	f6 01       	movw	r30, r12
    4660:	45 91       	lpm	r20, Z+
    4662:	55 91       	lpm	r21, Z+
    4664:	65 91       	lpm	r22, Z+
    4666:	74 91       	lpm	r23, Z+
    4668:	24 2f       	mov	r18, r20
    466a:	35 2f       	mov	r19, r21
    466c:	46 2f       	mov	r20, r22
    466e:	57 2f       	mov	r21, r23
    4670:	61 2f       	mov	r22, r17
    4672:	7d 2f       	mov	r23, r29
    4674:	8c 2f       	mov	r24, r28
    4676:	90 2f       	mov	r25, r16
    4678:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__mulsf3>
    467c:	16 2f       	mov	r17, r22
    467e:	d7 2f       	mov	r29, r23
    4680:	c8 2f       	mov	r28, r24
    4682:	09 2f       	mov	r16, r25
    4684:	ea 18       	sub	r14, r10
    4686:	fb 08       	sbc	r15, r11
    4688:	ea 14       	cp	r14, r10
    468a:	fb 04       	cpc	r15, r11
    468c:	44 f7       	brge	.-48     	; 0x465e <strtod+0x22c>
    468e:	24 e0       	ldi	r18, 0x04	; 4
    4690:	c2 1a       	sub	r12, r18
    4692:	d1 08       	sbc	r13, r1
    4694:	b5 94       	asr	r11
    4696:	a7 94       	ror	r10
    4698:	c8 14       	cp	r12, r8
    469a:	d9 04       	cpc	r13, r9
    469c:	a9 f7       	brne	.-22     	; 0x4688 <strtod+0x256>
    469e:	61 2f       	mov	r22, r17
    46a0:	7d 2f       	mov	r23, r29
    46a2:	8c 2f       	mov	r24, r28
    46a4:	90 2f       	mov	r25, r16
    46a6:	28 2f       	mov	r18, r24
    46a8:	22 0f       	add	r18, r18
    46aa:	29 2f       	mov	r18, r25
    46ac:	22 1f       	adc	r18, r18
    46ae:	2f 3f       	cpi	r18, 0xFF	; 255
    46b0:	39 f0       	breq	.+14     	; 0x46c0 <strtod+0x28e>
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	a9 01       	movw	r20, r18
    46b8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__cmpsf2>
    46bc:	81 11       	cpse	r24, r1
    46be:	0d c0       	rjmp	.+26     	; 0x46da <strtod+0x2a8>
    46c0:	82 e2       	ldi	r24, 0x22	; 34
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	90 93 65 04 	sts	0x0465, r25
    46c8:	80 93 64 04 	sts	0x0464, r24
    46cc:	06 c0       	rjmp	.+12     	; 0x46da <strtod+0x2a8>
    46ce:	0f ef       	ldi	r16, 0xFF	; 255
    46d0:	04 c0       	rjmp	.+8      	; 0x46da <strtod+0x2a8>
    46d2:	10 e0       	ldi	r17, 0x00	; 0
    46d4:	d0 e0       	ldi	r29, 0x00	; 0
    46d6:	c0 ec       	ldi	r28, 0xC0	; 192
    46d8:	0f e7       	ldi	r16, 0x7F	; 127
    46da:	61 2f       	mov	r22, r17
    46dc:	7d 2f       	mov	r23, r29
    46de:	8c 2f       	mov	r24, r28
    46e0:	90 2f       	mov	r25, r16
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	1f 91       	pop	r17
    46e8:	0f 91       	pop	r16
    46ea:	ff 90       	pop	r15
    46ec:	ef 90       	pop	r14
    46ee:	df 90       	pop	r13
    46f0:	cf 90       	pop	r12
    46f2:	bf 90       	pop	r11
    46f4:	af 90       	pop	r10
    46f6:	9f 90       	pop	r9
    46f8:	8f 90       	pop	r8
    46fa:	08 95       	ret

000046fc <isspace>:
    46fc:	91 11       	cpse	r25, r1
    46fe:	a5 c2       	rjmp	.+1354   	; 0x4c4a <__ctype_isfalse>
    4700:	80 32       	cpi	r24, 0x20	; 32
    4702:	19 f0       	breq	.+6      	; 0x470a <isspace+0xe>
    4704:	89 50       	subi	r24, 0x09	; 9
    4706:	85 50       	subi	r24, 0x05	; 5
    4708:	d0 f7       	brcc	.-12     	; 0x46fe <isspace+0x2>
    470a:	08 95       	ret

0000470c <strncasecmp_P>:
    470c:	fb 01       	movw	r30, r22
    470e:	dc 01       	movw	r26, r24
    4710:	41 50       	subi	r20, 0x01	; 1
    4712:	50 40       	sbci	r21, 0x00	; 0
    4714:	88 f0       	brcs	.+34     	; 0x4738 <strncasecmp_P+0x2c>
    4716:	8d 91       	ld	r24, X+
    4718:	81 34       	cpi	r24, 0x41	; 65
    471a:	1c f0       	brlt	.+6      	; 0x4722 <strncasecmp_P+0x16>
    471c:	8b 35       	cpi	r24, 0x5B	; 91
    471e:	0c f4       	brge	.+2      	; 0x4722 <strncasecmp_P+0x16>
    4720:	80 5e       	subi	r24, 0xE0	; 224
    4722:	65 91       	lpm	r22, Z+
    4724:	61 34       	cpi	r22, 0x41	; 65
    4726:	1c f0       	brlt	.+6      	; 0x472e <strncasecmp_P+0x22>
    4728:	6b 35       	cpi	r22, 0x5B	; 91
    472a:	0c f4       	brge	.+2      	; 0x472e <strncasecmp_P+0x22>
    472c:	60 5e       	subi	r22, 0xE0	; 224
    472e:	86 1b       	sub	r24, r22
    4730:	61 11       	cpse	r22, r1
    4732:	71 f3       	breq	.-36     	; 0x4710 <strncasecmp_P+0x4>
    4734:	99 0b       	sbc	r25, r25
    4736:	08 95       	ret
    4738:	88 1b       	sub	r24, r24
    473a:	fc cf       	rjmp	.-8      	; 0x4734 <strncasecmp_P+0x28>

0000473c <strcpy>:
    473c:	fb 01       	movw	r30, r22
    473e:	dc 01       	movw	r26, r24
    4740:	01 90       	ld	r0, Z+
    4742:	0d 92       	st	X+, r0
    4744:	00 20       	and	r0, r0
    4746:	e1 f7       	brne	.-8      	; 0x4740 <strcpy+0x4>
    4748:	08 95       	ret

0000474a <strncpy>:
    474a:	fb 01       	movw	r30, r22
    474c:	dc 01       	movw	r26, r24
    474e:	41 50       	subi	r20, 0x01	; 1
    4750:	50 40       	sbci	r21, 0x00	; 0
    4752:	48 f0       	brcs	.+18     	; 0x4766 <strncpy+0x1c>
    4754:	01 90       	ld	r0, Z+
    4756:	0d 92       	st	X+, r0
    4758:	00 20       	and	r0, r0
    475a:	c9 f7       	brne	.-14     	; 0x474e <strncpy+0x4>
    475c:	01 c0       	rjmp	.+2      	; 0x4760 <strncpy+0x16>
    475e:	1d 92       	st	X+, r1
    4760:	41 50       	subi	r20, 0x01	; 1
    4762:	50 40       	sbci	r21, 0x00	; 0
    4764:	e0 f7       	brcc	.-8      	; 0x475e <strncpy+0x14>
    4766:	08 95       	ret

00004768 <strpbrk>:
    4768:	dc 01       	movw	r26, r24
    476a:	99 27       	eor	r25, r25
    476c:	8d 91       	ld	r24, X+
    476e:	88 23       	and	r24, r24
    4770:	41 f0       	breq	.+16     	; 0x4782 <strpbrk+0x1a>
    4772:	fb 01       	movw	r30, r22
    4774:	01 90       	ld	r0, Z+
    4776:	08 16       	cp	r0, r24
    4778:	01 10       	cpse	r0, r1
    477a:	e1 f7       	brne	.-8      	; 0x4774 <strpbrk+0xc>
    477c:	b9 f7       	brne	.-18     	; 0x476c <strpbrk+0x4>
    477e:	11 97       	sbiw	r26, 0x01	; 1
    4780:	cd 01       	movw	r24, r26
    4782:	08 95       	ret

00004784 <sprintf>:
    4784:	0f 93       	push	r16
    4786:	1f 93       	push	r17
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	60 97       	sbiw	r28, 0x10	; 16
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	0f 89       	ldd	r16, Y+23	; 0x17
    479e:	18 8d       	ldd	r17, Y+24	; 0x18
    47a0:	86 e0       	ldi	r24, 0x06	; 6
    47a2:	8c 83       	std	Y+4, r24	; 0x04
    47a4:	1a 83       	std	Y+2, r17	; 0x02
    47a6:	09 83       	std	Y+1, r16	; 0x01
    47a8:	8f ef       	ldi	r24, 0xFF	; 255
    47aa:	9f e7       	ldi	r25, 0x7F	; 127
    47ac:	9e 83       	std	Y+6, r25	; 0x06
    47ae:	8d 83       	std	Y+5, r24	; 0x05
    47b0:	ae 01       	movw	r20, r28
    47b2:	45 5e       	subi	r20, 0xE5	; 229
    47b4:	5f 4f       	sbci	r21, 0xFF	; 255
    47b6:	58 8b       	std	Y+16, r21	; 0x10
    47b8:	4f 87       	std	Y+15, r20	; 0x0f
    47ba:	69 8d       	ldd	r22, Y+25	; 0x19
    47bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47be:	ce 01       	movw	r24, r28
    47c0:	01 96       	adiw	r24, 0x01	; 1
    47c2:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <vfprintf>
    47c6:	ef 81       	ldd	r30, Y+7	; 0x07
    47c8:	f8 85       	ldd	r31, Y+8	; 0x08
    47ca:	e0 0f       	add	r30, r16
    47cc:	f1 1f       	adc	r31, r17
    47ce:	10 82       	st	Z, r1
    47d0:	60 96       	adiw	r28, 0x10	; 16
    47d2:	0f b6       	in	r0, 0x3f	; 63
    47d4:	f8 94       	cli
    47d6:	de bf       	out	0x3e, r29	; 62
    47d8:	0f be       	out	0x3f, r0	; 63
    47da:	cd bf       	out	0x3d, r28	; 61
    47dc:	df 91       	pop	r29
    47de:	cf 91       	pop	r28
    47e0:	1f 91       	pop	r17
    47e2:	0f 91       	pop	r16
    47e4:	08 95       	ret

000047e6 <vfprintf>:
    47e6:	2f 92       	push	r2
    47e8:	3f 92       	push	r3
    47ea:	4f 92       	push	r4
    47ec:	5f 92       	push	r5
    47ee:	6f 92       	push	r6
    47f0:	7f 92       	push	r7
    47f2:	8f 92       	push	r8
    47f4:	9f 92       	push	r9
    47f6:	af 92       	push	r10
    47f8:	bf 92       	push	r11
    47fa:	cf 92       	push	r12
    47fc:	df 92       	push	r13
    47fe:	ef 92       	push	r14
    4800:	ff 92       	push	r15
    4802:	0f 93       	push	r16
    4804:	1f 93       	push	r17
    4806:	cf 93       	push	r28
    4808:	df 93       	push	r29
    480a:	cd b7       	in	r28, 0x3d	; 61
    480c:	de b7       	in	r29, 0x3e	; 62
    480e:	2c 97       	sbiw	r28, 0x0c	; 12
    4810:	0f b6       	in	r0, 0x3f	; 63
    4812:	f8 94       	cli
    4814:	de bf       	out	0x3e, r29	; 62
    4816:	0f be       	out	0x3f, r0	; 63
    4818:	cd bf       	out	0x3d, r28	; 61
    481a:	7c 01       	movw	r14, r24
    481c:	6b 01       	movw	r12, r22
    481e:	8a 01       	movw	r16, r20
    4820:	fc 01       	movw	r30, r24
    4822:	17 82       	std	Z+7, r1	; 0x07
    4824:	16 82       	std	Z+6, r1	; 0x06
    4826:	83 81       	ldd	r24, Z+3	; 0x03
    4828:	81 ff       	sbrs	r24, 1
    482a:	c7 c1       	rjmp	.+910    	; 0x4bba <vfprintf+0x3d4>
    482c:	88 24       	eor	r8, r8
    482e:	83 94       	inc	r8
    4830:	91 2c       	mov	r9, r1
    4832:	8c 0e       	add	r8, r28
    4834:	9d 1e       	adc	r9, r29
    4836:	f7 01       	movw	r30, r14
    4838:	93 81       	ldd	r25, Z+3	; 0x03
    483a:	f6 01       	movw	r30, r12
    483c:	93 fd       	sbrc	r25, 3
    483e:	85 91       	lpm	r24, Z+
    4840:	93 ff       	sbrs	r25, 3
    4842:	81 91       	ld	r24, Z+
    4844:	6f 01       	movw	r12, r30
    4846:	88 23       	and	r24, r24
    4848:	09 f4       	brne	.+2      	; 0x484c <vfprintf+0x66>
    484a:	b3 c1       	rjmp	.+870    	; 0x4bb2 <vfprintf+0x3cc>
    484c:	85 32       	cpi	r24, 0x25	; 37
    484e:	39 f4       	brne	.+14     	; 0x485e <vfprintf+0x78>
    4850:	93 fd       	sbrc	r25, 3
    4852:	85 91       	lpm	r24, Z+
    4854:	93 ff       	sbrs	r25, 3
    4856:	81 91       	ld	r24, Z+
    4858:	6f 01       	movw	r12, r30
    485a:	85 32       	cpi	r24, 0x25	; 37
    485c:	29 f4       	brne	.+10     	; 0x4868 <vfprintf+0x82>
    485e:	b7 01       	movw	r22, r14
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4866:	e7 cf       	rjmp	.-50     	; 0x4836 <vfprintf+0x50>
    4868:	71 2c       	mov	r7, r1
    486a:	31 2c       	mov	r3, r1
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	20 32       	cpi	r18, 0x20	; 32
    4870:	a8 f4       	brcc	.+42     	; 0x489c <vfprintf+0xb6>
    4872:	8b 32       	cpi	r24, 0x2B	; 43
    4874:	61 f0       	breq	.+24     	; 0x488e <vfprintf+0xa8>
    4876:	28 f4       	brcc	.+10     	; 0x4882 <vfprintf+0x9c>
    4878:	80 32       	cpi	r24, 0x20	; 32
    487a:	51 f0       	breq	.+20     	; 0x4890 <vfprintf+0xaa>
    487c:	83 32       	cpi	r24, 0x23	; 35
    487e:	71 f4       	brne	.+28     	; 0x489c <vfprintf+0xb6>
    4880:	0b c0       	rjmp	.+22     	; 0x4898 <vfprintf+0xb2>
    4882:	8d 32       	cpi	r24, 0x2D	; 45
    4884:	39 f0       	breq	.+14     	; 0x4894 <vfprintf+0xae>
    4886:	80 33       	cpi	r24, 0x30	; 48
    4888:	49 f4       	brne	.+18     	; 0x489c <vfprintf+0xb6>
    488a:	21 60       	ori	r18, 0x01	; 1
    488c:	28 c0       	rjmp	.+80     	; 0x48de <vfprintf+0xf8>
    488e:	22 60       	ori	r18, 0x02	; 2
    4890:	24 60       	ori	r18, 0x04	; 4
    4892:	25 c0       	rjmp	.+74     	; 0x48de <vfprintf+0xf8>
    4894:	28 60       	ori	r18, 0x08	; 8
    4896:	23 c0       	rjmp	.+70     	; 0x48de <vfprintf+0xf8>
    4898:	20 61       	ori	r18, 0x10	; 16
    489a:	21 c0       	rjmp	.+66     	; 0x48de <vfprintf+0xf8>
    489c:	27 fd       	sbrc	r18, 7
    489e:	27 c0       	rjmp	.+78     	; 0x48ee <vfprintf+0x108>
    48a0:	38 2f       	mov	r19, r24
    48a2:	30 53       	subi	r19, 0x30	; 48
    48a4:	3a 30       	cpi	r19, 0x0A	; 10
    48a6:	78 f4       	brcc	.+30     	; 0x48c6 <vfprintf+0xe0>
    48a8:	26 ff       	sbrs	r18, 6
    48aa:	06 c0       	rjmp	.+12     	; 0x48b8 <vfprintf+0xd2>
    48ac:	fa e0       	ldi	r31, 0x0A	; 10
    48ae:	7f 9e       	mul	r7, r31
    48b0:	30 0d       	add	r19, r0
    48b2:	11 24       	eor	r1, r1
    48b4:	73 2e       	mov	r7, r19
    48b6:	13 c0       	rjmp	.+38     	; 0x48de <vfprintf+0xf8>
    48b8:	8a e0       	ldi	r24, 0x0A	; 10
    48ba:	38 9e       	mul	r3, r24
    48bc:	30 0d       	add	r19, r0
    48be:	11 24       	eor	r1, r1
    48c0:	33 2e       	mov	r3, r19
    48c2:	20 62       	ori	r18, 0x20	; 32
    48c4:	0c c0       	rjmp	.+24     	; 0x48de <vfprintf+0xf8>
    48c6:	8e 32       	cpi	r24, 0x2E	; 46
    48c8:	21 f4       	brne	.+8      	; 0x48d2 <vfprintf+0xec>
    48ca:	26 fd       	sbrc	r18, 6
    48cc:	72 c1       	rjmp	.+740    	; 0x4bb2 <vfprintf+0x3cc>
    48ce:	20 64       	ori	r18, 0x40	; 64
    48d0:	06 c0       	rjmp	.+12     	; 0x48de <vfprintf+0xf8>
    48d2:	8c 36       	cpi	r24, 0x6C	; 108
    48d4:	11 f4       	brne	.+4      	; 0x48da <vfprintf+0xf4>
    48d6:	20 68       	ori	r18, 0x80	; 128
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <vfprintf+0xf8>
    48da:	88 36       	cpi	r24, 0x68	; 104
    48dc:	41 f4       	brne	.+16     	; 0x48ee <vfprintf+0x108>
    48de:	f6 01       	movw	r30, r12
    48e0:	93 fd       	sbrc	r25, 3
    48e2:	85 91       	lpm	r24, Z+
    48e4:	93 ff       	sbrs	r25, 3
    48e6:	81 91       	ld	r24, Z+
    48e8:	6f 01       	movw	r12, r30
    48ea:	81 11       	cpse	r24, r1
    48ec:	c0 cf       	rjmp	.-128    	; 0x486e <vfprintf+0x88>
    48ee:	98 2f       	mov	r25, r24
    48f0:	95 54       	subi	r25, 0x45	; 69
    48f2:	93 30       	cpi	r25, 0x03	; 3
    48f4:	18 f0       	brcs	.+6      	; 0x48fc <vfprintf+0x116>
    48f6:	90 52       	subi	r25, 0x20	; 32
    48f8:	93 30       	cpi	r25, 0x03	; 3
    48fa:	28 f4       	brcc	.+10     	; 0x4906 <vfprintf+0x120>
    48fc:	0c 5f       	subi	r16, 0xFC	; 252
    48fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4900:	ff e3       	ldi	r31, 0x3F	; 63
    4902:	f9 83       	std	Y+1, r31	; 0x01
    4904:	0d c0       	rjmp	.+26     	; 0x4920 <vfprintf+0x13a>
    4906:	83 36       	cpi	r24, 0x63	; 99
    4908:	31 f0       	breq	.+12     	; 0x4916 <vfprintf+0x130>
    490a:	83 37       	cpi	r24, 0x73	; 115
    490c:	71 f0       	breq	.+28     	; 0x492a <vfprintf+0x144>
    490e:	83 35       	cpi	r24, 0x53	; 83
    4910:	09 f0       	breq	.+2      	; 0x4914 <vfprintf+0x12e>
    4912:	5e c0       	rjmp	.+188    	; 0x49d0 <vfprintf+0x1ea>
    4914:	23 c0       	rjmp	.+70     	; 0x495c <vfprintf+0x176>
    4916:	f8 01       	movw	r30, r16
    4918:	80 81       	ld	r24, Z
    491a:	89 83       	std	Y+1, r24	; 0x01
    491c:	0e 5f       	subi	r16, 0xFE	; 254
    491e:	1f 4f       	sbci	r17, 0xFF	; 255
    4920:	66 24       	eor	r6, r6
    4922:	63 94       	inc	r6
    4924:	71 2c       	mov	r7, r1
    4926:	54 01       	movw	r10, r8
    4928:	15 c0       	rjmp	.+42     	; 0x4954 <vfprintf+0x16e>
    492a:	28 01       	movw	r4, r16
    492c:	f2 e0       	ldi	r31, 0x02	; 2
    492e:	4f 0e       	add	r4, r31
    4930:	51 1c       	adc	r5, r1
    4932:	f8 01       	movw	r30, r16
    4934:	a0 80       	ld	r10, Z
    4936:	b1 80       	ldd	r11, Z+1	; 0x01
    4938:	26 ff       	sbrs	r18, 6
    493a:	03 c0       	rjmp	.+6      	; 0x4942 <vfprintf+0x15c>
    493c:	67 2d       	mov	r22, r7
    493e:	70 e0       	ldi	r23, 0x00	; 0
    4940:	02 c0       	rjmp	.+4      	; 0x4946 <vfprintf+0x160>
    4942:	6f ef       	ldi	r22, 0xFF	; 255
    4944:	7f ef       	ldi	r23, 0xFF	; 255
    4946:	c5 01       	movw	r24, r10
    4948:	2c 87       	std	Y+12, r18	; 0x0c
    494a:	0e 94 33 26 	call	0x4c66	; 0x4c66 <strnlen>
    494e:	3c 01       	movw	r6, r24
    4950:	82 01       	movw	r16, r4
    4952:	2c 85       	ldd	r18, Y+12	; 0x0c
    4954:	6f e7       	ldi	r22, 0x7F	; 127
    4956:	26 2e       	mov	r2, r22
    4958:	22 22       	and	r2, r18
    495a:	18 c0       	rjmp	.+48     	; 0x498c <vfprintf+0x1a6>
    495c:	28 01       	movw	r4, r16
    495e:	f2 e0       	ldi	r31, 0x02	; 2
    4960:	4f 0e       	add	r4, r31
    4962:	51 1c       	adc	r5, r1
    4964:	f8 01       	movw	r30, r16
    4966:	a0 80       	ld	r10, Z
    4968:	b1 80       	ldd	r11, Z+1	; 0x01
    496a:	26 ff       	sbrs	r18, 6
    496c:	03 c0       	rjmp	.+6      	; 0x4974 <vfprintf+0x18e>
    496e:	67 2d       	mov	r22, r7
    4970:	70 e0       	ldi	r23, 0x00	; 0
    4972:	02 c0       	rjmp	.+4      	; 0x4978 <vfprintf+0x192>
    4974:	6f ef       	ldi	r22, 0xFF	; 255
    4976:	7f ef       	ldi	r23, 0xFF	; 255
    4978:	c5 01       	movw	r24, r10
    497a:	2c 87       	std	Y+12, r18	; 0x0c
    497c:	0e 94 28 26 	call	0x4c50	; 0x4c50 <strnlen_P>
    4980:	3c 01       	movw	r6, r24
    4982:	2c 85       	ldd	r18, Y+12	; 0x0c
    4984:	50 e8       	ldi	r21, 0x80	; 128
    4986:	25 2e       	mov	r2, r21
    4988:	22 2a       	or	r2, r18
    498a:	82 01       	movw	r16, r4
    498c:	23 fc       	sbrc	r2, 3
    498e:	1c c0       	rjmp	.+56     	; 0x49c8 <vfprintf+0x1e2>
    4990:	06 c0       	rjmp	.+12     	; 0x499e <vfprintf+0x1b8>
    4992:	b7 01       	movw	r22, r14
    4994:	80 e2       	ldi	r24, 0x20	; 32
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    499c:	3a 94       	dec	r3
    499e:	83 2d       	mov	r24, r3
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	68 16       	cp	r6, r24
    49a4:	79 06       	cpc	r7, r25
    49a6:	a8 f3       	brcs	.-22     	; 0x4992 <vfprintf+0x1ac>
    49a8:	0f c0       	rjmp	.+30     	; 0x49c8 <vfprintf+0x1e2>
    49aa:	f5 01       	movw	r30, r10
    49ac:	27 fc       	sbrc	r2, 7
    49ae:	85 91       	lpm	r24, Z+
    49b0:	27 fe       	sbrs	r2, 7
    49b2:	81 91       	ld	r24, Z+
    49b4:	5f 01       	movw	r10, r30
    49b6:	b7 01       	movw	r22, r14
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    49be:	31 10       	cpse	r3, r1
    49c0:	3a 94       	dec	r3
    49c2:	f1 e0       	ldi	r31, 0x01	; 1
    49c4:	6f 1a       	sub	r6, r31
    49c6:	71 08       	sbc	r7, r1
    49c8:	61 14       	cp	r6, r1
    49ca:	71 04       	cpc	r7, r1
    49cc:	71 f7       	brne	.-36     	; 0x49aa <vfprintf+0x1c4>
    49ce:	ee c0       	rjmp	.+476    	; 0x4bac <vfprintf+0x3c6>
    49d0:	84 36       	cpi	r24, 0x64	; 100
    49d2:	11 f0       	breq	.+4      	; 0x49d8 <vfprintf+0x1f2>
    49d4:	89 36       	cpi	r24, 0x69	; 105
    49d6:	41 f5       	brne	.+80     	; 0x4a28 <vfprintf+0x242>
    49d8:	f8 01       	movw	r30, r16
    49da:	27 ff       	sbrs	r18, 7
    49dc:	07 c0       	rjmp	.+14     	; 0x49ec <vfprintf+0x206>
    49de:	60 81       	ld	r22, Z
    49e0:	71 81       	ldd	r23, Z+1	; 0x01
    49e2:	82 81       	ldd	r24, Z+2	; 0x02
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	0c 5f       	subi	r16, 0xFC	; 252
    49e8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ea:	08 c0       	rjmp	.+16     	; 0x49fc <vfprintf+0x216>
    49ec:	60 81       	ld	r22, Z
    49ee:	71 81       	ldd	r23, Z+1	; 0x01
    49f0:	88 27       	eor	r24, r24
    49f2:	77 fd       	sbrc	r23, 7
    49f4:	80 95       	com	r24
    49f6:	98 2f       	mov	r25, r24
    49f8:	0e 5f       	subi	r16, 0xFE	; 254
    49fa:	1f 4f       	sbci	r17, 0xFF	; 255
    49fc:	4f e6       	ldi	r20, 0x6F	; 111
    49fe:	64 2e       	mov	r6, r20
    4a00:	62 22       	and	r6, r18
    4a02:	97 ff       	sbrs	r25, 7
    4a04:	09 c0       	rjmp	.+18     	; 0x4a18 <vfprintf+0x232>
    4a06:	90 95       	com	r25
    4a08:	80 95       	com	r24
    4a0a:	70 95       	com	r23
    4a0c:	61 95       	neg	r22
    4a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a10:	8f 4f       	sbci	r24, 0xFF	; 255
    4a12:	9f 4f       	sbci	r25, 0xFF	; 255
    4a14:	f0 e8       	ldi	r31, 0x80	; 128
    4a16:	6f 2a       	or	r6, r31
    4a18:	2a e0       	ldi	r18, 0x0A	; 10
    4a1a:	30 e0       	ldi	r19, 0x00	; 0
    4a1c:	a4 01       	movw	r20, r8
    4a1e:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <__ultoa_invert>
    4a22:	a8 2e       	mov	r10, r24
    4a24:	a8 18       	sub	r10, r8
    4a26:	44 c0       	rjmp	.+136    	; 0x4ab0 <vfprintf+0x2ca>
    4a28:	85 37       	cpi	r24, 0x75	; 117
    4a2a:	31 f4       	brne	.+12     	; 0x4a38 <vfprintf+0x252>
    4a2c:	3f ee       	ldi	r19, 0xEF	; 239
    4a2e:	b3 2e       	mov	r11, r19
    4a30:	b2 22       	and	r11, r18
    4a32:	2a e0       	ldi	r18, 0x0A	; 10
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	24 c0       	rjmp	.+72     	; 0x4a80 <vfprintf+0x29a>
    4a38:	99 ef       	ldi	r25, 0xF9	; 249
    4a3a:	b9 2e       	mov	r11, r25
    4a3c:	b2 22       	and	r11, r18
    4a3e:	8f 36       	cpi	r24, 0x6F	; 111
    4a40:	b9 f0       	breq	.+46     	; 0x4a70 <vfprintf+0x28a>
    4a42:	20 f4       	brcc	.+8      	; 0x4a4c <vfprintf+0x266>
    4a44:	88 35       	cpi	r24, 0x58	; 88
    4a46:	09 f0       	breq	.+2      	; 0x4a4a <vfprintf+0x264>
    4a48:	b4 c0       	rjmp	.+360    	; 0x4bb2 <vfprintf+0x3cc>
    4a4a:	0d c0       	rjmp	.+26     	; 0x4a66 <vfprintf+0x280>
    4a4c:	80 37       	cpi	r24, 0x70	; 112
    4a4e:	21 f0       	breq	.+8      	; 0x4a58 <vfprintf+0x272>
    4a50:	88 37       	cpi	r24, 0x78	; 120
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <vfprintf+0x270>
    4a54:	ae c0       	rjmp	.+348    	; 0x4bb2 <vfprintf+0x3cc>
    4a56:	02 c0       	rjmp	.+4      	; 0x4a5c <vfprintf+0x276>
    4a58:	20 e1       	ldi	r18, 0x10	; 16
    4a5a:	b2 2a       	or	r11, r18
    4a5c:	b4 fe       	sbrs	r11, 4
    4a5e:	0b c0       	rjmp	.+22     	; 0x4a76 <vfprintf+0x290>
    4a60:	84 e0       	ldi	r24, 0x04	; 4
    4a62:	b8 2a       	or	r11, r24
    4a64:	08 c0       	rjmp	.+16     	; 0x4a76 <vfprintf+0x290>
    4a66:	24 ff       	sbrs	r18, 4
    4a68:	09 c0       	rjmp	.+18     	; 0x4a7c <vfprintf+0x296>
    4a6a:	e6 e0       	ldi	r30, 0x06	; 6
    4a6c:	be 2a       	or	r11, r30
    4a6e:	06 c0       	rjmp	.+12     	; 0x4a7c <vfprintf+0x296>
    4a70:	28 e0       	ldi	r18, 0x08	; 8
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	05 c0       	rjmp	.+10     	; 0x4a80 <vfprintf+0x29a>
    4a76:	20 e1       	ldi	r18, 0x10	; 16
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <vfprintf+0x29a>
    4a7c:	20 e1       	ldi	r18, 0x10	; 16
    4a7e:	32 e0       	ldi	r19, 0x02	; 2
    4a80:	f8 01       	movw	r30, r16
    4a82:	b7 fe       	sbrs	r11, 7
    4a84:	07 c0       	rjmp	.+14     	; 0x4a94 <vfprintf+0x2ae>
    4a86:	60 81       	ld	r22, Z
    4a88:	71 81       	ldd	r23, Z+1	; 0x01
    4a8a:	82 81       	ldd	r24, Z+2	; 0x02
    4a8c:	93 81       	ldd	r25, Z+3	; 0x03
    4a8e:	0c 5f       	subi	r16, 0xFC	; 252
    4a90:	1f 4f       	sbci	r17, 0xFF	; 255
    4a92:	06 c0       	rjmp	.+12     	; 0x4aa0 <vfprintf+0x2ba>
    4a94:	60 81       	ld	r22, Z
    4a96:	71 81       	ldd	r23, Z+1	; 0x01
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	0e 5f       	subi	r16, 0xFE	; 254
    4a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa0:	a4 01       	movw	r20, r8
    4aa2:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <__ultoa_invert>
    4aa6:	a8 2e       	mov	r10, r24
    4aa8:	a8 18       	sub	r10, r8
    4aaa:	8f e7       	ldi	r24, 0x7F	; 127
    4aac:	68 2e       	mov	r6, r24
    4aae:	6b 20       	and	r6, r11
    4ab0:	66 fe       	sbrs	r6, 6
    4ab2:	0b c0       	rjmp	.+22     	; 0x4aca <vfprintf+0x2e4>
    4ab4:	36 2d       	mov	r19, r6
    4ab6:	3e 7f       	andi	r19, 0xFE	; 254
    4ab8:	a7 14       	cp	r10, r7
    4aba:	50 f4       	brcc	.+20     	; 0x4ad0 <vfprintf+0x2ea>
    4abc:	64 fe       	sbrs	r6, 4
    4abe:	0a c0       	rjmp	.+20     	; 0x4ad4 <vfprintf+0x2ee>
    4ac0:	62 fc       	sbrc	r6, 2
    4ac2:	08 c0       	rjmp	.+16     	; 0x4ad4 <vfprintf+0x2ee>
    4ac4:	36 2d       	mov	r19, r6
    4ac6:	3e 7e       	andi	r19, 0xEE	; 238
    4ac8:	05 c0       	rjmp	.+10     	; 0x4ad4 <vfprintf+0x2ee>
    4aca:	ba 2c       	mov	r11, r10
    4acc:	36 2d       	mov	r19, r6
    4ace:	03 c0       	rjmp	.+6      	; 0x4ad6 <vfprintf+0x2f0>
    4ad0:	ba 2c       	mov	r11, r10
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <vfprintf+0x2f0>
    4ad4:	b7 2c       	mov	r11, r7
    4ad6:	34 ff       	sbrs	r19, 4
    4ad8:	0d c0       	rjmp	.+26     	; 0x4af4 <vfprintf+0x30e>
    4ada:	fe 01       	movw	r30, r28
    4adc:	ea 0d       	add	r30, r10
    4ade:	f1 1d       	adc	r31, r1
    4ae0:	80 81       	ld	r24, Z
    4ae2:	80 33       	cpi	r24, 0x30	; 48
    4ae4:	11 f4       	brne	.+4      	; 0x4aea <vfprintf+0x304>
    4ae6:	39 7e       	andi	r19, 0xE9	; 233
    4ae8:	09 c0       	rjmp	.+18     	; 0x4afc <vfprintf+0x316>
    4aea:	32 ff       	sbrs	r19, 2
    4aec:	06 c0       	rjmp	.+12     	; 0x4afa <vfprintf+0x314>
    4aee:	b3 94       	inc	r11
    4af0:	b3 94       	inc	r11
    4af2:	04 c0       	rjmp	.+8      	; 0x4afc <vfprintf+0x316>
    4af4:	83 2f       	mov	r24, r19
    4af6:	86 78       	andi	r24, 0x86	; 134
    4af8:	09 f0       	breq	.+2      	; 0x4afc <vfprintf+0x316>
    4afa:	b3 94       	inc	r11
    4afc:	33 fd       	sbrc	r19, 3
    4afe:	14 c0       	rjmp	.+40     	; 0x4b28 <vfprintf+0x342>
    4b00:	30 ff       	sbrs	r19, 0
    4b02:	0f c0       	rjmp	.+30     	; 0x4b22 <vfprintf+0x33c>
    4b04:	7a 2c       	mov	r7, r10
    4b06:	b3 14       	cp	r11, r3
    4b08:	60 f4       	brcc	.+24     	; 0x4b22 <vfprintf+0x33c>
    4b0a:	73 0c       	add	r7, r3
    4b0c:	7b 18       	sub	r7, r11
    4b0e:	b3 2c       	mov	r11, r3
    4b10:	08 c0       	rjmp	.+16     	; 0x4b22 <vfprintf+0x33c>
    4b12:	b7 01       	movw	r22, r14
    4b14:	80 e2       	ldi	r24, 0x20	; 32
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	3c 87       	std	Y+12, r19	; 0x0c
    4b1a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4b1e:	b3 94       	inc	r11
    4b20:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b22:	b3 14       	cp	r11, r3
    4b24:	b0 f3       	brcs	.-20     	; 0x4b12 <vfprintf+0x32c>
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <vfprintf+0x34a>
    4b28:	b3 14       	cp	r11, r3
    4b2a:	10 f4       	brcc	.+4      	; 0x4b30 <vfprintf+0x34a>
    4b2c:	3b 18       	sub	r3, r11
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <vfprintf+0x34c>
    4b30:	31 2c       	mov	r3, r1
    4b32:	34 ff       	sbrs	r19, 4
    4b34:	12 c0       	rjmp	.+36     	; 0x4b5a <vfprintf+0x374>
    4b36:	b7 01       	movw	r22, r14
    4b38:	80 e3       	ldi	r24, 0x30	; 48
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	3c 87       	std	Y+12, r19	; 0x0c
    4b3e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4b42:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b44:	32 ff       	sbrs	r19, 2
    4b46:	1e c0       	rjmp	.+60     	; 0x4b84 <vfprintf+0x39e>
    4b48:	31 ff       	sbrs	r19, 1
    4b4a:	03 c0       	rjmp	.+6      	; 0x4b52 <vfprintf+0x36c>
    4b4c:	88 e5       	ldi	r24, 0x58	; 88
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	02 c0       	rjmp	.+4      	; 0x4b56 <vfprintf+0x370>
    4b52:	88 e7       	ldi	r24, 0x78	; 120
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	b7 01       	movw	r22, r14
    4b58:	0c c0       	rjmp	.+24     	; 0x4b72 <vfprintf+0x38c>
    4b5a:	83 2f       	mov	r24, r19
    4b5c:	86 78       	andi	r24, 0x86	; 134
    4b5e:	91 f0       	breq	.+36     	; 0x4b84 <vfprintf+0x39e>
    4b60:	31 fd       	sbrc	r19, 1
    4b62:	02 c0       	rjmp	.+4      	; 0x4b68 <vfprintf+0x382>
    4b64:	80 e2       	ldi	r24, 0x20	; 32
    4b66:	01 c0       	rjmp	.+2      	; 0x4b6a <vfprintf+0x384>
    4b68:	8b e2       	ldi	r24, 0x2B	; 43
    4b6a:	37 fd       	sbrc	r19, 7
    4b6c:	8d e2       	ldi	r24, 0x2D	; 45
    4b6e:	b7 01       	movw	r22, r14
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4b76:	06 c0       	rjmp	.+12     	; 0x4b84 <vfprintf+0x39e>
    4b78:	b7 01       	movw	r22, r14
    4b7a:	80 e3       	ldi	r24, 0x30	; 48
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4b82:	7a 94       	dec	r7
    4b84:	a7 14       	cp	r10, r7
    4b86:	c0 f3       	brcs	.-16     	; 0x4b78 <vfprintf+0x392>
    4b88:	aa 94       	dec	r10
    4b8a:	f4 01       	movw	r30, r8
    4b8c:	ea 0d       	add	r30, r10
    4b8e:	f1 1d       	adc	r31, r1
    4b90:	b7 01       	movw	r22, r14
    4b92:	80 81       	ld	r24, Z
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4b9a:	a1 10       	cpse	r10, r1
    4b9c:	f5 cf       	rjmp	.-22     	; 0x4b88 <vfprintf+0x3a2>
    4b9e:	06 c0       	rjmp	.+12     	; 0x4bac <vfprintf+0x3c6>
    4ba0:	b7 01       	movw	r22, r14
    4ba2:	80 e2       	ldi	r24, 0x20	; 32
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <fputc>
    4baa:	3a 94       	dec	r3
    4bac:	31 10       	cpse	r3, r1
    4bae:	f8 cf       	rjmp	.-16     	; 0x4ba0 <vfprintf+0x3ba>
    4bb0:	42 ce       	rjmp	.-892    	; 0x4836 <vfprintf+0x50>
    4bb2:	f7 01       	movw	r30, r14
    4bb4:	26 81       	ldd	r18, Z+6	; 0x06
    4bb6:	37 81       	ldd	r19, Z+7	; 0x07
    4bb8:	02 c0       	rjmp	.+4      	; 0x4bbe <vfprintf+0x3d8>
    4bba:	2f ef       	ldi	r18, 0xFF	; 255
    4bbc:	3f ef       	ldi	r19, 0xFF	; 255
    4bbe:	c9 01       	movw	r24, r18
    4bc0:	2c 96       	adiw	r28, 0x0c	; 12
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	1f 91       	pop	r17
    4bd2:	0f 91       	pop	r16
    4bd4:	ff 90       	pop	r15
    4bd6:	ef 90       	pop	r14
    4bd8:	df 90       	pop	r13
    4bda:	cf 90       	pop	r12
    4bdc:	bf 90       	pop	r11
    4bde:	af 90       	pop	r10
    4be0:	9f 90       	pop	r9
    4be2:	8f 90       	pop	r8
    4be4:	7f 90       	pop	r7
    4be6:	6f 90       	pop	r6
    4be8:	5f 90       	pop	r5
    4bea:	4f 90       	pop	r4
    4bec:	3f 90       	pop	r3
    4bee:	2f 90       	pop	r2
    4bf0:	08 95       	ret

00004bf2 <__eerd_block_m1284p>:
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22

00004bf6 <__eerd_blraw_m1284p>:
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	f9 99       	sbic	0x1f, 1	; 31
    4bfa:	fe cf       	rjmp	.-4      	; 0x4bf8 <__eerd_blraw_m1284p+0x2>
    4bfc:	06 c0       	rjmp	.+12     	; 0x4c0a <__eerd_blraw_m1284p+0x14>
    4bfe:	f2 bd       	out	0x22, r31	; 34
    4c00:	e1 bd       	out	0x21, r30	; 33
    4c02:	f8 9a       	sbi	0x1f, 0	; 31
    4c04:	31 96       	adiw	r30, 0x01	; 1
    4c06:	00 b4       	in	r0, 0x20	; 32
    4c08:	0d 92       	st	X+, r0
    4c0a:	41 50       	subi	r20, 0x01	; 1
    4c0c:	50 40       	sbci	r21, 0x00	; 0
    4c0e:	b8 f7       	brcc	.-18     	; 0x4bfe <__eerd_blraw_m1284p+0x8>
    4c10:	08 95       	ret

00004c12 <__eerd_byte_m1284p>:
    4c12:	f9 99       	sbic	0x1f, 1	; 31
    4c14:	fe cf       	rjmp	.-4      	; 0x4c12 <__eerd_byte_m1284p>
    4c16:	92 bd       	out	0x22, r25	; 34
    4c18:	81 bd       	out	0x21, r24	; 33
    4c1a:	f8 9a       	sbi	0x1f, 0	; 31
    4c1c:	99 27       	eor	r25, r25
    4c1e:	80 b5       	in	r24, 0x20	; 32
    4c20:	08 95       	ret

00004c22 <__eerd_dword_m1284p>:
    4c22:	a6 e1       	ldi	r26, 0x16	; 22
    4c24:	b0 e0       	ldi	r27, 0x00	; 0
    4c26:	44 e0       	ldi	r20, 0x04	; 4
    4c28:	50 e0       	ldi	r21, 0x00	; 0
    4c2a:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <__eerd_blraw_m1284p>

00004c2e <__eewr_byte_m1284p>:
    4c2e:	26 2f       	mov	r18, r22

00004c30 <__eewr_r18_m1284p>:
    4c30:	f9 99       	sbic	0x1f, 1	; 31
    4c32:	fe cf       	rjmp	.-4      	; 0x4c30 <__eewr_r18_m1284p>
    4c34:	1f ba       	out	0x1f, r1	; 31
    4c36:	92 bd       	out	0x22, r25	; 34
    4c38:	81 bd       	out	0x21, r24	; 33
    4c3a:	20 bd       	out	0x20, r18	; 32
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	fa 9a       	sbi	0x1f, 2	; 31
    4c42:	f9 9a       	sbi	0x1f, 1	; 31
    4c44:	0f be       	out	0x3f, r0	; 63
    4c46:	01 96       	adiw	r24, 0x01	; 1
    4c48:	08 95       	ret

00004c4a <__ctype_isfalse>:
    4c4a:	99 27       	eor	r25, r25
    4c4c:	88 27       	eor	r24, r24

00004c4e <__ctype_istrue>:
    4c4e:	08 95       	ret

00004c50 <strnlen_P>:
    4c50:	fc 01       	movw	r30, r24
    4c52:	05 90       	lpm	r0, Z+
    4c54:	61 50       	subi	r22, 0x01	; 1
    4c56:	70 40       	sbci	r23, 0x00	; 0
    4c58:	01 10       	cpse	r0, r1
    4c5a:	d8 f7       	brcc	.-10     	; 0x4c52 <strnlen_P+0x2>
    4c5c:	80 95       	com	r24
    4c5e:	90 95       	com	r25
    4c60:	8e 0f       	add	r24, r30
    4c62:	9f 1f       	adc	r25, r31
    4c64:	08 95       	ret

00004c66 <strnlen>:
    4c66:	fc 01       	movw	r30, r24
    4c68:	61 50       	subi	r22, 0x01	; 1
    4c6a:	70 40       	sbci	r23, 0x00	; 0
    4c6c:	01 90       	ld	r0, Z+
    4c6e:	01 10       	cpse	r0, r1
    4c70:	d8 f7       	brcc	.-10     	; 0x4c68 <strnlen+0x2>
    4c72:	80 95       	com	r24
    4c74:	90 95       	com	r25
    4c76:	8e 0f       	add	r24, r30
    4c78:	9f 1f       	adc	r25, r31
    4c7a:	08 95       	ret

00004c7c <fputc>:
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	8c 01       	movw	r16, r24
    4c86:	eb 01       	movw	r28, r22
    4c88:	8b 81       	ldd	r24, Y+3	; 0x03
    4c8a:	81 fd       	sbrc	r24, 1
    4c8c:	03 c0       	rjmp	.+6      	; 0x4c94 <fputc+0x18>
    4c8e:	0f ef       	ldi	r16, 0xFF	; 255
    4c90:	1f ef       	ldi	r17, 0xFF	; 255
    4c92:	1a c0       	rjmp	.+52     	; 0x4cc8 <fputc+0x4c>
    4c94:	82 ff       	sbrs	r24, 2
    4c96:	0d c0       	rjmp	.+26     	; 0x4cb2 <fputc+0x36>
    4c98:	2e 81       	ldd	r18, Y+6	; 0x06
    4c9a:	3f 81       	ldd	r19, Y+7	; 0x07
    4c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    4ca0:	28 17       	cp	r18, r24
    4ca2:	39 07       	cpc	r19, r25
    4ca4:	64 f4       	brge	.+24     	; 0x4cbe <fputc+0x42>
    4ca6:	e8 81       	ld	r30, Y
    4ca8:	f9 81       	ldd	r31, Y+1	; 0x01
    4caa:	01 93       	st	Z+, r16
    4cac:	f9 83       	std	Y+1, r31	; 0x01
    4cae:	e8 83       	st	Y, r30
    4cb0:	06 c0       	rjmp	.+12     	; 0x4cbe <fputc+0x42>
    4cb2:	e8 85       	ldd	r30, Y+8	; 0x08
    4cb4:	f9 85       	ldd	r31, Y+9	; 0x09
    4cb6:	80 2f       	mov	r24, r16
    4cb8:	09 95       	icall
    4cba:	89 2b       	or	r24, r25
    4cbc:	41 f7       	brne	.-48     	; 0x4c8e <fputc+0x12>
    4cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    4cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    4cc2:	01 96       	adiw	r24, 0x01	; 1
    4cc4:	9f 83       	std	Y+7, r25	; 0x07
    4cc6:	8e 83       	std	Y+6, r24	; 0x06
    4cc8:	c8 01       	movw	r24, r16
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	1f 91       	pop	r17
    4cd0:	0f 91       	pop	r16
    4cd2:	08 95       	ret

00004cd4 <__ultoa_invert>:
    4cd4:	fa 01       	movw	r30, r20
    4cd6:	aa 27       	eor	r26, r26
    4cd8:	28 30       	cpi	r18, 0x08	; 8
    4cda:	51 f1       	breq	.+84     	; 0x4d30 <__ultoa_invert+0x5c>
    4cdc:	20 31       	cpi	r18, 0x10	; 16
    4cde:	81 f1       	breq	.+96     	; 0x4d40 <__ultoa_invert+0x6c>
    4ce0:	e8 94       	clt
    4ce2:	6f 93       	push	r22
    4ce4:	6e 7f       	andi	r22, 0xFE	; 254
    4ce6:	6e 5f       	subi	r22, 0xFE	; 254
    4ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cea:	8f 4f       	sbci	r24, 0xFF	; 255
    4cec:	9f 4f       	sbci	r25, 0xFF	; 255
    4cee:	af 4f       	sbci	r26, 0xFF	; 255
    4cf0:	b1 e0       	ldi	r27, 0x01	; 1
    4cf2:	3e d0       	rcall	.+124    	; 0x4d70 <__ultoa_invert+0x9c>
    4cf4:	b4 e0       	ldi	r27, 0x04	; 4
    4cf6:	3c d0       	rcall	.+120    	; 0x4d70 <__ultoa_invert+0x9c>
    4cf8:	67 0f       	add	r22, r23
    4cfa:	78 1f       	adc	r23, r24
    4cfc:	89 1f       	adc	r24, r25
    4cfe:	9a 1f       	adc	r25, r26
    4d00:	a1 1d       	adc	r26, r1
    4d02:	68 0f       	add	r22, r24
    4d04:	79 1f       	adc	r23, r25
    4d06:	8a 1f       	adc	r24, r26
    4d08:	91 1d       	adc	r25, r1
    4d0a:	a1 1d       	adc	r26, r1
    4d0c:	6a 0f       	add	r22, r26
    4d0e:	71 1d       	adc	r23, r1
    4d10:	81 1d       	adc	r24, r1
    4d12:	91 1d       	adc	r25, r1
    4d14:	a1 1d       	adc	r26, r1
    4d16:	20 d0       	rcall	.+64     	; 0x4d58 <__ultoa_invert+0x84>
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <__ultoa_invert+0x48>
    4d1a:	68 94       	set
    4d1c:	3f 91       	pop	r19
    4d1e:	2a e0       	ldi	r18, 0x0A	; 10
    4d20:	26 9f       	mul	r18, r22
    4d22:	11 24       	eor	r1, r1
    4d24:	30 19       	sub	r19, r0
    4d26:	30 5d       	subi	r19, 0xD0	; 208
    4d28:	31 93       	st	Z+, r19
    4d2a:	de f6       	brtc	.-74     	; 0x4ce2 <__ultoa_invert+0xe>
    4d2c:	cf 01       	movw	r24, r30
    4d2e:	08 95       	ret
    4d30:	46 2f       	mov	r20, r22
    4d32:	47 70       	andi	r20, 0x07	; 7
    4d34:	40 5d       	subi	r20, 0xD0	; 208
    4d36:	41 93       	st	Z+, r20
    4d38:	b3 e0       	ldi	r27, 0x03	; 3
    4d3a:	0f d0       	rcall	.+30     	; 0x4d5a <__ultoa_invert+0x86>
    4d3c:	c9 f7       	brne	.-14     	; 0x4d30 <__ultoa_invert+0x5c>
    4d3e:	f6 cf       	rjmp	.-20     	; 0x4d2c <__ultoa_invert+0x58>
    4d40:	46 2f       	mov	r20, r22
    4d42:	4f 70       	andi	r20, 0x0F	; 15
    4d44:	40 5d       	subi	r20, 0xD0	; 208
    4d46:	4a 33       	cpi	r20, 0x3A	; 58
    4d48:	18 f0       	brcs	.+6      	; 0x4d50 <__ultoa_invert+0x7c>
    4d4a:	49 5d       	subi	r20, 0xD9	; 217
    4d4c:	31 fd       	sbrc	r19, 1
    4d4e:	40 52       	subi	r20, 0x20	; 32
    4d50:	41 93       	st	Z+, r20
    4d52:	02 d0       	rcall	.+4      	; 0x4d58 <__ultoa_invert+0x84>
    4d54:	a9 f7       	brne	.-22     	; 0x4d40 <__ultoa_invert+0x6c>
    4d56:	ea cf       	rjmp	.-44     	; 0x4d2c <__ultoa_invert+0x58>
    4d58:	b4 e0       	ldi	r27, 0x04	; 4
    4d5a:	a6 95       	lsr	r26
    4d5c:	97 95       	ror	r25
    4d5e:	87 95       	ror	r24
    4d60:	77 95       	ror	r23
    4d62:	67 95       	ror	r22
    4d64:	ba 95       	dec	r27
    4d66:	c9 f7       	brne	.-14     	; 0x4d5a <__ultoa_invert+0x86>
    4d68:	00 97       	sbiw	r24, 0x00	; 0
    4d6a:	61 05       	cpc	r22, r1
    4d6c:	71 05       	cpc	r23, r1
    4d6e:	08 95       	ret
    4d70:	9b 01       	movw	r18, r22
    4d72:	ac 01       	movw	r20, r24
    4d74:	0a 2e       	mov	r0, r26
    4d76:	06 94       	lsr	r0
    4d78:	57 95       	ror	r21
    4d7a:	47 95       	ror	r20
    4d7c:	37 95       	ror	r19
    4d7e:	27 95       	ror	r18
    4d80:	ba 95       	dec	r27
    4d82:	c9 f7       	brne	.-14     	; 0x4d76 <__ultoa_invert+0xa2>
    4d84:	62 0f       	add	r22, r18
    4d86:	73 1f       	adc	r23, r19
    4d88:	84 1f       	adc	r24, r20
    4d8a:	95 1f       	adc	r25, r21
    4d8c:	a0 1d       	adc	r26, r0
    4d8e:	08 95       	ret

00004d90 <__muluhisi3>:
    4d90:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <__umulhisi3>
    4d94:	a5 9f       	mul	r26, r21
    4d96:	90 0d       	add	r25, r0
    4d98:	b4 9f       	mul	r27, r20
    4d9a:	90 0d       	add	r25, r0
    4d9c:	a4 9f       	mul	r26, r20
    4d9e:	80 0d       	add	r24, r0
    4da0:	91 1d       	adc	r25, r1
    4da2:	11 24       	eor	r1, r1
    4da4:	08 95       	ret

00004da6 <__umulhisi3>:
    4da6:	a2 9f       	mul	r26, r18
    4da8:	b0 01       	movw	r22, r0
    4daa:	b3 9f       	mul	r27, r19
    4dac:	c0 01       	movw	r24, r0
    4dae:	a3 9f       	mul	r26, r19
    4db0:	01 d0       	rcall	.+2      	; 0x4db4 <__umulhisi3+0xe>
    4db2:	b2 9f       	mul	r27, r18
    4db4:	70 0d       	add	r23, r0
    4db6:	81 1d       	adc	r24, r1
    4db8:	11 24       	eor	r1, r1
    4dba:	91 1d       	adc	r25, r1
    4dbc:	08 95       	ret

00004dbe <_exit>:
    4dbe:	f8 94       	cli

00004dc0 <__stop_program>:
    4dc0:	ff cf       	rjmp	.-2      	; 0x4dc0 <__stop_program>
