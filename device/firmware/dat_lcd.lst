
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021e  00800100  00002f6a  00002ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  0080031e  0080031e  0000321c  2**0
                  ALLOC
  3 .stab         0000b2c8  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a03  00000000  00000000  0000e4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00010ee7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_20>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_28>
      74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      7c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      80:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      84:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      88:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      8c:	0e 04       	cpc	r0, r14
      8e:	18 04       	cpc	r1, r8
      90:	25 04       	cpc	r2, r5
      92:	34 04       	cpc	r3, r4
      94:	43 04       	cpc	r4, r3
      96:	54 04       	cpc	r5, r4
      98:	60 04       	cpc	r6, r0
      9a:	6c 04       	cpc	r6, r12
      9c:	78 04       	cpc	r7, r8
      9e:	d1 04       	cpc	r13, r1
      a0:	d4 04       	cpc	r13, r4
      a2:	d7 04       	cpc	r13, r7
      a4:	da 04       	cpc	r13, r10
      a6:	dd 04       	cpc	r13, r13
      a8:	e0 04       	cpc	r14, r0
      aa:	e3 04       	cpc	r14, r3
      ac:	e6 04       	cpc	r14, r6
      ae:	e9 04       	cpc	r14, r9
      b0:	ec 04       	cpc	r14, r12
      b2:	ef 04       	cpc	r14, r15
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <print_gps_data+0x170>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	07 63       	ori	r16, 0x37	; 55
     110:	42 36       	cpi	r20, 0x62	; 98
     112:	b7 9b       	sbis	0x16, 7	; 22
     114:	d8 a7       	std	Y+40, r29	; 0x28
     116:	1a 39       	cpi	r17, 0x9A	; 154
     118:	68 56       	subi	r22, 0x68	; 104
     11a:	18 ae       	std	Y+56, r1	; 0x38
     11c:	ba ab       	std	Y+50, r27	; 0x32
     11e:	55 8c       	ldd	r5, Z+29	; 0x1d
     120:	1d 3c       	cpi	r17, 0xCD	; 205
     122:	b7 cc       	rjmp	.-1682   	; 0xfffffa92 <__eeprom_end+0xff7efa92>
     124:	57 63       	ori	r21, 0x37	; 55
     126:	bd 6d       	ori	r27, 0xDD	; 221
     128:	ed fd       	.word	0xfded	; ????
     12a:	75 3e       	cpi	r23, 0xE5	; 229
     12c:	f6 17       	cp	r31, r22
     12e:	72 31       	cpi	r23, 0x12	; 18
     130:	bf 00       	.word	0x00bf	; ????
     132:	00 00       	nop
     134:	80 3f       	cpi	r24, 0xF0	; 240

00000136 <pstr_nan>:
     136:	4e 41 4e                                            NAN

00000139 <pstr_inity>:
     139:	49 4e 49 54 59                                      INITY

0000013e <pstr_inf>:
     13e:	49 4e 46                                            INF

00000141 <pwr_m10>:
     141:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     151:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000159 <pwr_p10>:
     159:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     169:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d0 e4       	ldi	r29, 0x40	; 64
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	13 e0       	ldi	r17, 0x03	; 3
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	ea e6       	ldi	r30, 0x6A	; 106
     186:	ff e2       	ldi	r31, 0x2F	; 47
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0b bf       	out	0x3b, r16	; 59
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x14>
     18e:	07 90       	elpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	ae 31       	cpi	r26, 0x1E	; 30
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0x10>

00000198 <__do_clear_bss>:
     198:	14 e0       	ldi	r17, 0x04	; 4
     19a:	ae e1       	ldi	r26, 0x1E	; 30
     19c:	b3 e0       	ldi	r27, 0x03	; 3
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	ab 32       	cpi	r26, 0x2B	; 43
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <main>
     1ac:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     1b4:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
     1be:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
     1c2:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     1c6:	e9 ec       	ldi	r30, 0xC9	; 201
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	88 6d       	ori	r24, 0xD8	; 216
     1ce:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     1d0:	e1 ec       	ldi	r30, 0xC1	; 193
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	88 6d       	ori	r24, 0xD8	; 216
     1d8:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     1da:	e8 ec       	ldi	r30, 0xC8	; 200
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	82 60       	ori	r24, 0x02	; 2
     1e2:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
     1e4:	e0 ec       	ldi	r30, 0xC0	; 192
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	82 60       	ori	r24, 0x02	; 2
     1ec:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     1ee:	ea ec       	ldi	r30, 0xCA	; 202
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8e 60       	ori	r24, 0x0E	; 14
     1f6:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     1f8:	e2 ec       	ldi	r30, 0xC2	; 194
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	86 60       	ori	r24, 0x06	; 6
     200:	80 83       	st	Z, r24
     202:	08 95       	ret

00000204 <disable_gps>:

}

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
     204:	e1 ec       	ldi	r30, 0xC1	; 193
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	87 72       	andi	r24, 0x27	; 39
     20c:	80 83       	st	Z, r24
     20e:	08 95       	ret

00000210 <__vector_20>:
        rxWritePos = 0;
    }
}

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0b b6       	in	r0, 0x3b	; 59
     21c:	0f 92       	push	r0
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
     236:	80 91 76 03 	lds	r24, 0x0376
     23a:	90 91 77 03 	lds	r25, 0x0377
     23e:	81 35       	cpi	r24, 0x51	; 81
     240:	91 05       	cpc	r25, r1
     242:	74 f0       	brlt	.+28     	; 0x260 <__vector_20+0x50>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=0; i<80; i++)
            gps_rxBuffer[i]='\0';
     248:	fc 01       	movw	r30, r24
     24a:	ea 5d       	subi	r30, 0xDA	; 218
     24c:	fc 4f       	sbci	r31, 0xFC	; 252
     24e:	10 82       	st	Z, r1
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
    {
        for (i=0; i<80; i++)
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	80 35       	cpi	r24, 0x50	; 80
     254:	91 05       	cpc	r25, r1
     256:	c1 f7       	brne	.-16     	; 0x248 <__vector_20+0x38>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 0; 
     258:	10 92 77 03 	sts	0x0377, r1
     25c:	10 92 76 03 	sts	0x0376, r1
    }

    //Read value out of the UART buffer
    gps_rxBuffer[gps_rxCount] = UDR0;
     260:	e0 91 76 03 	lds	r30, 0x0376
     264:	f0 91 77 03 	lds	r31, 0x0377
     268:	80 91 c6 00 	lds	r24, 0x00C6
     26c:	ea 5d       	subi	r30, 0xDA	; 218
     26e:	fc 4f       	sbci	r31, 0xFC	; 252
     270:	80 83       	st	Z, r24

    gps_rxCount ++;
     272:	80 91 76 03 	lds	r24, 0x0376
     276:	90 91 77 03 	lds	r25, 0x0377
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	90 93 77 03 	sts	0x0377, r25
     280:	80 93 76 03 	sts	0x0376, r24

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
     284:	e0 91 76 03 	lds	r30, 0x0376
     288:	f0 91 77 03 	lds	r31, 0x0377
     28c:	eb 5d       	subi	r30, 0xDB	; 219
     28e:	fc 4f       	sbci	r31, 0xFC	; 252
     290:	80 81       	ld	r24, Z
     292:	84 32       	cpi	r24, 0x24	; 36
     294:	99 f4       	brne	.+38     	; 0x2bc <__vector_20+0xac>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=1; i<80; i++)
            gps_rxBuffer[i]='\0'; 
     29a:	fc 01       	movw	r30, r24
     29c:	ea 5d       	subi	r30, 0xDA	; 218
     29e:	fc 4f       	sbci	r31, 0xFC	; 252
     2a0:	10 82       	st	Z, r1
    gps_rxCount ++;

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
    {
        for (i=1; i<80; i++)
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	80 35       	cpi	r24, 0x50	; 80
     2a6:	91 05       	cpc	r25, r1
     2a8:	c1 f7       	brne	.-16     	; 0x29a <__vector_20+0x8a>
            gps_rxBuffer[i]='\0'; 

        gps_rxBuffer[0] = '$';
     2aa:	84 e2       	ldi	r24, 0x24	; 36
     2ac:	80 93 26 03 	sts	0x0326, r24
        gps_rxCount = 1; 
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 77 03 	sts	0x0377, r25
     2b8:	80 93 76 03 	sts	0x0376, r24
    }

    //carriage return ----> parse the string and update the gps_data fields
    if ((gps_rxBuffer[gps_rxCount-1]=='\r')) {
     2bc:	e0 91 76 03 	lds	r30, 0x0376
     2c0:	f0 91 77 03 	lds	r31, 0x0377
     2c4:	eb 5d       	subi	r30, 0xDB	; 219
     2c6:	fc 4f       	sbci	r31, 0xFC	; 252
     2c8:	80 81       	ld	r24, Z
     2ca:	8d 30       	cpi	r24, 0x0D	; 13
     2cc:	79 f5       	brne	.+94     	; 0x32c <__vector_20+0x11c>
        if (tag_check(gps_rxBuffer))
     2ce:	86 e2       	ldi	r24, 0x26	; 38
     2d0:	93 e0       	ldi	r25, 0x03	; 3
     2d2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <tag_check>
     2d6:	89 2b       	or	r24, r25
     2d8:	49 f1       	breq	.+82     	; 0x32c <__vector_20+0x11c>
        {
            //disable gps interrupts
            disable_gps();
     2da:	0e 94 02 01 	call	0x204	; 0x204 <disable_gps>

            //strip off the rxBuffer carriage return
            gps_rxBuffer[strlen((char *)gps_rxBuffer)-1] = '\0';
     2de:	e6 e2       	ldi	r30, 0x26	; 38
     2e0:	f3 e0       	ldi	r31, 0x03	; 3
     2e2:	01 90       	ld	r0, Z+
     2e4:	00 20       	and	r0, r0
     2e6:	e9 f7       	brne	.-6      	; 0x2e2 <__vector_20+0xd2>
     2e8:	32 97       	sbiw	r30, 0x02	; 2
     2ea:	10 82       	st	Z, r1

            //update the application gps_data fields
            parse_nmea(strcat((char *)gps_rxBuffer, ","), gps_data);
     2ec:	63 e1       	ldi	r22, 0x13	; 19
     2ee:	71 e0       	ldi	r23, 0x01	; 1
     2f0:	86 e2       	ldi	r24, 0x26	; 38
     2f2:	93 e0       	ldi	r25, 0x03	; 3
     2f4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <strcat>
     2f8:	6b e0       	ldi	r22, 0x0B	; 11
     2fa:	74 e0       	ldi	r23, 0x04	; 4
     2fc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <parse_nmea>

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);
     300:	60 91 89 03 	lds	r22, 0x0389
     304:	70 91 8a 03 	lds	r23, 0x038A
     308:	8b e0       	ldi	r24, 0x0B	; 11
     30a:	94 e0       	ldi	r25, 0x04	; 4
     30c:	0e 94 cf 0b 	call	0x179e	; 0x179e <update_user_gps_data>

            //clear the rxBuffer
            for (i=0; i<80; i++)
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
                gps_rxBuffer[i]='\0';
     314:	fc 01       	movw	r30, r24
     316:	ea 5d       	subi	r30, 0xDA	; 218
     318:	fc 4f       	sbci	r31, 0xFC	; 252
     31a:	10 82       	st	Z, r1

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);

            //clear the rxBuffer
            for (i=0; i<80; i++)
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	80 35       	cpi	r24, 0x50	; 80
     320:	91 05       	cpc	r25, r1
     322:	c1 f7       	brne	.-16     	; 0x314 <__vector_20+0x104>
                gps_rxBuffer[i]='\0';
            gps_rxCount = 0;
     324:	10 92 77 03 	sts	0x0377, r1
     328:	10 92 76 03 	sts	0x0376, r1
        }
    }
}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	0f 90       	pop	r0
     346:	0b be       	out	0x3b, r0	; 59
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <enable_gps>:
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     352:	e1 ec       	ldi	r30, 0xC1	; 193
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	88 6d       	ori	r24, 0xD8	; 216
     35a:	80 83       	st	Z, r24
     35c:	08 95       	ret

0000035e <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	84 b9       	out	0x04, r24	; 4
    cli();
     362:	f8 94       	cli
    //Init usart
    InitUSART();
     364:	0e 94 da 00 	call	0x1b4	; 0x1b4 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     368:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     36a:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36e:	2f e3       	ldi	r18, 0x3F	; 63
     370:	8d e0       	ldi	r24, 0x0D	; 13
     372:	93 e0       	ldi	r25, 0x03	; 3
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <prepare_device+0x16>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <prepare_device+0x20>
     37e:	00 00       	nop
     380:	08 95       	ret

00000382 <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 c1 0c 	call	0x1982	; 0x1982 <my_eeprom_read_int>

    if (num_stations==255)
     396:	8f 3f       	cpi	r24, 0xFF	; 255
     398:	91 05       	cpc	r25, r1
     39a:	29 f0       	breq	.+10     	; 0x3a6 <database_load+0x24>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     39c:	90 93 82 03 	sts	0x0382, r25
     3a0:	80 93 81 03 	sts	0x0381, r24
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <database_load+0x2c>

    if (num_stations==255)
        num_stations = 0;
     3a6:	10 92 82 03 	sts	0x0382, r1
     3aa:	10 92 81 03 	sts	0x0381, r1
     3ae:	2f e9       	ldi	r18, 0x9F	; 159
     3b0:	46 e8       	ldi	r20, 0x86	; 134
     3b2:	51 e0       	ldi	r21, 0x01	; 1
     3b4:	21 50       	subi	r18, 0x01	; 1
     3b6:	40 40       	sbci	r20, 0x00	; 0
     3b8:	50 40       	sbci	r21, 0x00	; 0
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <database_load+0x32>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <database_load+0x3c>
     3be:	00 00       	nop

    _delay_ms(500);
    lcd_init();
     3c0:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("importing ");
     3c4:	85 e1       	ldi	r24, 0x15	; 21
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    string_write_int(num_stations,3);
     3cc:	63 e0       	ldi	r22, 0x03	; 3
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 91 81 03 	lds	r24, 0x0381
     3d4:	90 91 82 03 	lds	r25, 0x0382
     3d8:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
    string_write("\nstations...");
     3dc:	80 e2       	ldi	r24, 0x20	; 32
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     3e4:	80 91 81 03 	lds	r24, 0x0381
     3e8:	90 91 82 03 	lds	r25, 0x0382
     3ec:	2c e1       	ldi	r18, 0x1C	; 28
     3ee:	fc 01       	movw	r30, r24
     3f0:	2e 9f       	mul	r18, r30
     3f2:	c0 01       	movw	r24, r0
     3f4:	2f 9f       	mul	r18, r31
     3f6:	90 0d       	add	r25, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
     3fe:	90 93 88 03 	sts	0x0388, r25
     402:	80 93 87 03 	sts	0x0387, r24

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     406:	c0 e0       	ldi	r28, 0x00	; 0
     408:	d0 e0       	ldi	r29, 0x00	; 0
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	80 91 81 03 	lds	r24, 0x0381
     412:	90 91 82 03 	lds	r25, 0x0382
     416:	08 17       	cp	r16, r24
     418:	19 07       	cpc	r17, r25
     41a:	0c f0       	brlt	.+2      	; 0x41e <database_load+0x9c>
     41c:	5c c0       	rjmp	.+184    	; 0x4d6 <database_load+0x154>
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     424:	80 91 87 03 	lds	r24, 0x0387
     428:	90 91 88 03 	lds	r25, 0x0388
     42c:	48 e0       	ldi	r20, 0x08	; 8
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	8c 0f       	add	r24, r28
     432:	9d 1f       	adc	r25, r29
     434:	0e 94 c9 0c 	call	0x1992	; 0x1992 <my_eeprom_read_string>
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     438:	e0 90 87 03 	lds	r14, 0x0387
     43c:	f0 90 88 03 	lds	r15, 0x0388
     440:	ec 0e       	add	r14, r28
     442:	fd 1e       	adc	r15, r29
     444:	ce 01       	movw	r24, r28
     446:	09 96       	adiw	r24, 0x09	; 9
     448:	0e 94 c7 0c 	call	0x198e	; 0x198e <my_eeprom_read_float>
     44c:	f7 01       	movw	r30, r14
     44e:	60 87       	std	Z+8, r22	; 0x08
     450:	71 87       	std	Z+9, r23	; 0x09
     452:	82 87       	std	Z+10, r24	; 0x0a
     454:	93 87       	std	Z+11, r25	; 0x0b
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     456:	e0 90 87 03 	lds	r14, 0x0387
     45a:	f0 90 88 03 	lds	r15, 0x0388
     45e:	ec 0e       	add	r14, r28
     460:	fd 1e       	adc	r15, r29
     462:	ce 01       	movw	r24, r28
     464:	0d 96       	adiw	r24, 0x0d	; 13
     466:	0e 94 c7 0c 	call	0x198e	; 0x198e <my_eeprom_read_float>
     46a:	f7 01       	movw	r30, r14
     46c:	64 87       	std	Z+12, r22	; 0x0c
     46e:	75 87       	std	Z+13, r23	; 0x0d
     470:	86 87       	std	Z+14, r24	; 0x0e
     472:	97 87       	std	Z+15, r25	; 0x0f
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     474:	e0 90 87 03 	lds	r14, 0x0387
     478:	f0 90 88 03 	lds	r15, 0x0388
     47c:	ec 0e       	add	r14, r28
     47e:	fd 1e       	adc	r15, r29
     480:	ce 01       	movw	r24, r28
     482:	41 96       	adiw	r24, 0x11	; 17
     484:	0e 94 c7 0c 	call	0x198e	; 0x198e <my_eeprom_read_float>
     488:	f7 01       	movw	r30, r14
     48a:	60 8b       	std	Z+16, r22	; 0x10
     48c:	71 8b       	std	Z+17, r23	; 0x11
     48e:	82 8b       	std	Z+18, r24	; 0x12
     490:	93 8b       	std	Z+19, r25	; 0x13
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     492:	e0 90 87 03 	lds	r14, 0x0387
     496:	f0 90 88 03 	lds	r15, 0x0388
     49a:	ec 0e       	add	r14, r28
     49c:	fd 1e       	adc	r15, r29
     49e:	ce 01       	movw	r24, r28
     4a0:	45 96       	adiw	r24, 0x15	; 21
     4a2:	0e 94 c7 0c 	call	0x198e	; 0x198e <my_eeprom_read_float>
     4a6:	f7 01       	movw	r30, r14
     4a8:	64 8b       	std	Z+20, r22	; 0x14
     4aa:	75 8b       	std	Z+21, r23	; 0x15
     4ac:	86 8b       	std	Z+22, r24	; 0x16
     4ae:	97 8b       	std	Z+23, r25	; 0x17
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     4b0:	e0 90 87 03 	lds	r14, 0x0387
     4b4:	f0 90 88 03 	lds	r15, 0x0388
     4b8:	ec 0e       	add	r14, r28
     4ba:	fd 1e       	adc	r15, r29
     4bc:	ce 01       	movw	r24, r28
     4be:	49 96       	adiw	r24, 0x19	; 25
     4c0:	0e 94 c7 0c 	call	0x198e	; 0x198e <my_eeprom_read_float>
     4c4:	f7 01       	movw	r30, r14
     4c6:	60 8f       	std	Z+24, r22	; 0x18
     4c8:	71 8f       	std	Z+25, r23	; 0x19
     4ca:	82 8f       	std	Z+26, r24	; 0x1a
     4cc:	93 8f       	std	Z+27, r25	; 0x1b

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     4ce:	0f 5f       	subi	r16, 0xFF	; 255
     4d0:	1f 4f       	sbci	r17, 0xFF	; 255
     4d2:	6c 96       	adiw	r28, 0x1c	; 28
     4d4:	9c cf       	rjmp	.-200    	; 0x40e <database_load+0x8c>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	08 95       	ret

000004e4 <database_free>:

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     4e4:	10 92 82 03 	sts	0x0382, r1
     4e8:	10 92 81 03 	sts	0x0381, r1

    free(all_stations);
     4ec:	80 91 87 03 	lds	r24, 0x0387
     4f0:	90 91 88 03 	lds	r25, 0x0388
     4f4:	0e 94 32 12 	call	0x2464	; 0x2464 <free>
    all_stations = NULL;
     4f8:	10 92 88 03 	sts	0x0388, r1
     4fc:	10 92 87 03 	sts	0x0387, r1
     500:	08 95       	ret

00000502 <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     502:	80 91 7c 03 	lds	r24, 0x037C
     506:	90 91 01 01 	lds	r25, 0x0101
     50a:	89 13       	cpse	r24, r25
     50c:	0c c0       	rjmp	.+24     	; 0x526 <detectSerialStart+0x24>
     50e:	20 91 7d 03 	lds	r18, 0x037D
     512:	28 13       	cpse	r18, r24
     514:	08 c0       	rjmp	.+16     	; 0x526 <detectSerialStart+0x24>
     516:	30 91 7e 03 	lds	r19, 0x037E
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	32 17       	cp	r19, r18
     520:	21 f0       	breq	.+8      	; 0x52a <detectSerialStart+0x28>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	08 95       	ret
        return 1;
    else
        return 0;
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
}
     52a:	08 95       	ret

0000052c <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	0b b6       	in	r0, 0x3b	; 59
     538:	0f 92       	push	r0
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	ef 93       	push	r30
     550:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     552:	80 91 7d 03 	lds	r24, 0x037D
     556:	80 93 7e 03 	sts	0x037E, r24
    serial_history[1] = serial_history[0];
     55a:	80 91 7c 03 	lds	r24, 0x037C
     55e:	80 93 7d 03 	sts	0x037D, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     562:	80 91 ce 00 	lds	r24, 0x00CE
     566:	80 93 7c 03 	sts	0x037C, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     56a:	80 91 24 03 	lds	r24, 0x0324
     56e:	90 91 25 03 	lds	r25, 0x0325
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	69 f4       	brne	.+26     	; 0x590 <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     576:	e0 91 7f 03 	lds	r30, 0x037F
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 91 7c 03 	lds	r24, 0x037C
     580:	e5 57       	subi	r30, 0x75	; 117
     582:	fc 4f       	sbci	r31, 0xFC	; 252
     584:	80 83       	st	Z, r24
        rxWritePos++;
     586:	80 91 7f 03 	lds	r24, 0x037F
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 7f 03 	sts	0x037F, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     590:	0e 94 81 02 	call	0x502	; 0x502 <detectSerialStart>
     594:	89 2b       	or	r24, r25
     596:	31 f0       	breq	.+12     	; 0x5a4 <__vector_28+0x78>
        op_mode = MD_UPDATE;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	90 93 25 03 	sts	0x0325, r25
     5a0:	80 93 24 03 	sts	0x0324, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     5a4:	80 91 7f 03 	lds	r24, 0x037F
     5a8:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     5aa:	10 92 7f 03 	sts	0x037F, r1
    }
}
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0b be       	out	0x3b, r0	; 59
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     5d4:	80 91 7c 03 	lds	r24, 0x037C
     5d8:	90 91 00 01 	lds	r25, 0x0100
     5dc:	89 13       	cpse	r24, r25
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <detectSerialEnd+0x24>
     5e0:	20 91 7d 03 	lds	r18, 0x037D
     5e4:	28 13       	cpse	r18, r24
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <detectSerialEnd+0x24>
     5e8:	30 91 7e 03 	lds	r19, 0x037E
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	32 17       	cp	r19, r18
     5f2:	21 f0       	breq	.+8      	; 0x5fc <detectSerialEnd+0x28>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret
        return 1;
    else
        return 0;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
}
     5fc:	08 95       	ret

000005fe <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     5fe:	e0 91 80 03 	lds	r30, 0x0380
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	e5 57       	subi	r30, 0x75	; 117
     606:	fc 4f       	sbci	r31, 0xFC	; 252
     608:	80 81       	ld	r24, Z
     
    rxReadPos++;
     60a:	90 91 80 03 	lds	r25, 0x0380
     60e:	9f 5f       	subi	r25, 0xFF	; 255
     610:	90 93 80 03 	sts	0x0380, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     614:	90 91 80 03 	lds	r25, 0x0380
     618:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     61a:	10 92 80 03 	sts	0x0380, r1
    }
    
    return ret;
}
     61e:	08 95       	ret

00000620 <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     620:	90 91 80 03 	lds	r25, 0x0380
     624:	80 91 7f 03 	lds	r24, 0x037F
     628:	98 17       	cp	r25, r24
     62a:	39 f0       	breq	.+14     	; 0x63a <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     62c:	e0 91 80 03 	lds	r30, 0x0380
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	e5 57       	subi	r30, 0x75	; 117
     634:	fc 4f       	sbci	r31, 0xFC	; 252
     636:	80 81       	ld	r24, Z
     638:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     63a:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     63c:	08 95       	ret

0000063e <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     644:	10 92 25 03 	sts	0x0325, r1
     648:	10 92 24 03 	sts	0x0324, r1
    updating = 0;
     64c:	10 92 21 03 	sts	0x0321, r1
     650:	10 92 20 03 	sts	0x0320, r1
    serial_timer = 0;
     654:	10 92 78 03 	sts	0x0378, r1
     658:	10 92 79 03 	sts	0x0379, r1
     65c:	10 92 7a 03 	sts	0x037A, r1
     660:	10 92 7b 03 	sts	0x037B, r1

    //import the new database
    lcd_init();
     664:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>

    if (flag==FL_SUCCESS)
     668:	20 97       	sbiw	r28, 0x00	; 0
     66a:	19 f4       	brne	.+6      	; 0x672 <terminate_serial+0x34>
        string_write("reading\ndatabase ...");
     66c:	8d e2       	ldi	r24, 0x2D	; 45
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	02 c0       	rjmp	.+4      	; 0x676 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     672:	82 e4       	ldi	r24, 0x42	; 66
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>

    database_load();
     67a:	0e 94 c1 01 	call	0x382	; 0x382 <database_load>
     67e:	2f e3       	ldi	r18, 0x3F	; 63
     680:	8d e0       	ldi	r24, 0x0D	; 13
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	21 50       	subi	r18, 0x01	; 1
     686:	80 40       	sbci	r24, 0x00	; 0
     688:	90 40       	sbci	r25, 0x00	; 0
     68a:	e1 f7       	brne	.-8      	; 0x684 <terminate_serial+0x46>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <terminate_serial+0x50>
     68e:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
     690:	21 97       	sbiw	r28, 0x01	; 1
     692:	21 f4       	brne	.+8      	; 0x69c <terminate_serial+0x5e>
        string_write("\nupdate failed\n");
     694:	85 e5       	ldi	r24, 0x55	; 85
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     69c:	2f e9       	ldi	r18, 0x9F	; 159
     69e:	86 e8       	ldi	r24, 0x86	; 134
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	21 50       	subi	r18, 0x01	; 1
     6a4:	80 40       	sbci	r24, 0x00	; 0
     6a6:	90 40       	sbci	r25, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <terminate_serial+0x64>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <terminate_serial+0x6e>
     6ac:	00 00       	nop

    _delay_ms(500);
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <get_nearest_station>:

int get_nearest_station(float lat, float lon)
{

    return -1;
}
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	9f ef       	ldi	r25, 0xFF	; 255
     6b8:	08 95       	ret

000006ba <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	8c 01       	movw	r16, r24
     6c4:	eb 01       	movw	r28, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     6c6:	6f 3f       	cpi	r22, 0xFF	; 255
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	78 07       	cpc	r23, r24
     6cc:	59 f4       	brne	.+22     	; 0x6e4 <print_eeprom_contents+0x2a>
        end_addr = 1+num_stations*STATION_BLOCKSIZE;
     6ce:	80 91 81 03 	lds	r24, 0x0381
     6d2:	90 91 82 03 	lds	r25, 0x0382
     6d6:	2c e1       	ldi	r18, 0x1C	; 28
     6d8:	28 9f       	mul	r18, r24
     6da:	e0 01       	movw	r28, r0
     6dc:	29 9f       	mul	r18, r25
     6de:	d0 0d       	add	r29, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
     6e4:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     6e8:	0c 17       	cp	r16, r28
     6ea:	1d 07       	cpc	r17, r29
     6ec:	bc f4       	brge	.+46     	; 0x71c <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     6ee:	80 91 24 03 	lds	r24, 0x0324
     6f2:	90 91 25 03 	lds	r25, 0x0325
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	89 f0       	breq	.+34     	; 0x71c <print_eeprom_contents+0x62>
        one_byte = my_eeprom_read_char(i);
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 c5 0c 	call	0x198a	; 0x198a <my_eeprom_read_char>
        if (one_byte == '\0')
     700:	81 11       	cpse	r24, r1
     702:	01 c0       	rjmp	.+2      	; 0x706 <print_eeprom_contents+0x4c>
            one_byte = '?';
     704:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     706:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
     70a:	87 ea       	ldi	r24, 0xA7	; 167
     70c:	91 e6       	ldi	r25, 0x61	; 97
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <print_eeprom_contents+0x54>
     712:	00 c0       	rjmp	.+0      	; 0x714 <print_eeprom_contents+0x5a>
     714:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     716:	0f 5f       	subi	r16, 0xFF	; 255
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	e6 cf       	rjmp	.-52     	; 0x6e8 <print_eeprom_contents+0x2e>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     72c:	c0 e0       	ldi	r28, 0x00	; 0
     72e:	d0 e0       	ldi	r29, 0x00	; 0
     730:	1c e1       	ldi	r17, 0x1C	; 28
     732:	20 91 81 03 	lds	r18, 0x0381
     736:	30 91 82 03 	lds	r19, 0x0382
     73a:	12 9f       	mul	r17, r18
     73c:	c0 01       	movw	r24, r0
     73e:	13 9f       	mul	r17, r19
     740:	90 0d       	add	r25, r0
     742:	11 24       	eor	r1, r1
     744:	c8 17       	cp	r28, r24
     746:	d9 07       	cpc	r29, r25
     748:	b4 f4       	brge	.+44     	; 0x776 <print_eeprom_station_contents+0x50>
    {
        if (op_mode==MD_UPDATE) return;
     74a:	80 91 24 03 	lds	r24, 0x0324
     74e:	90 91 25 03 	lds	r25, 0x0325
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	81 f0       	breq	.+32     	; 0x776 <print_eeprom_station_contents+0x50>
        one_byte = my_eeprom_read_char(start+i);
     756:	21 96       	adiw	r28, 0x01	; 1
     758:	ce 01       	movw	r24, r28
     75a:	0e 94 c5 0c 	call	0x198a	; 0x198a <my_eeprom_read_char>
        if (one_byte == '\0')
     75e:	81 11       	cpse	r24, r1
     760:	01 c0       	rjmp	.+2      	; 0x764 <print_eeprom_station_contents+0x3e>
            one_byte = '?';
     762:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     764:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
     768:	87 ea       	ldi	r24, 0xA7	; 167
     76a:	91 e6       	ldi	r25, 0x61	; 97
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <print_eeprom_station_contents+0x46>
     770:	00 c0       	rjmp	.+0      	; 0x772 <print_eeprom_station_contents+0x4c>
     772:	00 00       	nop
     774:	de cf       	rjmp	.-68     	; 0x732 <print_eeprom_station_contents+0xc>
        _delay_ms(100);
    }
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	08 95       	ret

0000077e <wait_for_update>:
    }
}

void wait_for_update(void)
{
    lcd_init();
     77e:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("update required\n...feed me...");
     782:	85 e6       	ldi	r24, 0x65	; 101
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     78a:	80 91 24 03 	lds	r24, 0x0324
     78e:	90 91 25 03 	lds	r25, 0x0325
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	d1 f7       	brne	.-12     	; 0x78a <wait_for_update+0xc>
    }
}
     796:	08 95       	ret

00000798 <print_gps_data>:
    _delay_ms(2000);
}

//print the formatted data stored in the UserData struct to the screen
void print_gps_data(void)
{
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     79c:	80 91 24 03 	lds	r24, 0x0324
     7a0:	90 91 25 03 	lds	r25, 0x0325
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	09 f4       	brne	.+2      	; 0x7aa <print_gps_data+0x12>
     7a8:	c4 c0       	rjmp	.+392    	; 0x932 <print_gps_data+0x19a>
    lcd_init();
     7aa:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("Printing\nGPS Data");
     7ae:	83 e8       	ldi	r24, 0x83	; 131
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     7b6:	2f e3       	ldi	r18, 0x3F	; 63
     7b8:	8d e0       	ldi	r24, 0x0D	; 13
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	21 50       	subi	r18, 0x01	; 1
     7be:	80 40       	sbci	r24, 0x00	; 0
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <print_gps_data+0x24>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <print_gps_data+0x2e>
     7c6:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     7c8:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     7d0:	20 97       	sbiw	r28, 0x00	; 0
     7d2:	69 f0       	breq	.+26     	; 0x7ee <print_gps_data+0x56>
            string_write("\n");
     7d4:	8f e0       	ldi	r24, 0x0F	; 15
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>

        switch (i)
     7dc:	fe 01       	movw	r30, r28
     7de:	32 97       	sbiw	r30, 0x02	; 2
     7e0:	e9 30       	cpi	r30, 0x09	; 9
     7e2:	f1 05       	cpc	r31, r1
     7e4:	78 f4       	brcc	.+30     	; 0x804 <print_gps_data+0x6c>
     7e6:	ea 5b       	subi	r30, 0xBA	; 186
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
     7ee:	85 e9       	ldi	r24, 0x95	; 149
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_numchars(user->msg_type,8);
     7f6:	68 e0       	ldi	r22, 0x08	; 8
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	80 91 89 03 	lds	r24, 0x0389
     7fe:	90 91 8a 03 	lds	r25, 0x038A
     802:	81 c0       	rjmp	.+258    	; 0x906 <print_gps_data+0x16e>
            break;

            case 1:
                string_write("Time: ");
     804:	8f e9       	ldi	r24, 0x9F	; 159
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_numchars(user->utc_time,8);
     80c:	80 91 89 03 	lds	r24, 0x0389
     810:	90 91 8a 03 	lds	r25, 0x038A
     814:	68 e0       	ldi	r22, 0x08	; 8
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	08 96       	adiw	r24, 0x08	; 8
     81a:	75 c0       	rjmp	.+234    	; 0x906 <print_gps_data+0x16e>
            break;

            case 2:
                string_write("NRW: ");
     81c:	86 ea       	ldi	r24, 0xA6	; 166
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                char_write(user->nrw);
     824:	e0 91 89 03 	lds	r30, 0x0389
     828:	f0 91 8a 03 	lds	r31, 0x038A
     82c:	80 89       	ldd	r24, Z+16	; 0x10
     82e:	5d c0       	rjmp	.+186    	; 0x8ea <print_gps_data+0x152>
            break;

            case 3:
                string_write("Lat: ");
     830:	8c ea       	ldi	r24, 0xAC	; 172
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_float(user->lat,4);
     838:	e0 91 89 03 	lds	r30, 0x0389
     83c:	f0 91 8a 03 	lds	r31, 0x038A
     840:	61 89       	ldd	r22, Z+17	; 0x11
     842:	72 89       	ldd	r23, Z+18	; 0x12
     844:	83 89       	ldd	r24, Z+19	; 0x13
     846:	94 89       	ldd	r25, Z+20	; 0x14
     848:	0c c0       	rjmp	.+24     	; 0x862 <print_gps_data+0xca>
            break;

            case 4:
                string_write("Lon: ");
     84a:	82 eb       	ldi	r24, 0xB2	; 178
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_float(user->lon,4);
     852:	e0 91 89 03 	lds	r30, 0x0389
     856:	f0 91 8a 03 	lds	r31, 0x038A
     85a:	65 89       	ldd	r22, Z+21	; 0x15
     85c:	76 89       	ldd	r23, Z+22	; 0x16
     85e:	87 89       	ldd	r24, Z+23	; 0x17
     860:	90 8d       	ldd	r25, Z+24	; 0x18
     862:	44 e0       	ldi	r20, 0x04	; 4
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	1d c0       	rjmp	.+58     	; 0x8a2 <print_gps_data+0x10a>
            break;

            case 5:
                string_write("Speed: ");
     868:	88 eb       	ldi	r24, 0xB8	; 184
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_float(user->speed,1);
     870:	e0 91 89 03 	lds	r30, 0x0389
     874:	f0 91 8a 03 	lds	r31, 0x038A
     878:	61 8d       	ldd	r22, Z+25	; 0x19
     87a:	72 8d       	ldd	r23, Z+26	; 0x1a
     87c:	83 8d       	ldd	r24, Z+27	; 0x1b
     87e:	94 8d       	ldd	r25, Z+28	; 0x1c
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	0e c0       	rjmp	.+28     	; 0x8a2 <print_gps_data+0x10a>
            break;

            case 6:
                string_write("Course: ");
     886:	80 ec       	ldi	r24, 0xC0	; 192
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_float(user->course,3);
     88e:	e0 91 89 03 	lds	r30, 0x0389
     892:	f0 91 8a 03 	lds	r31, 0x038A
     896:	65 8d       	ldd	r22, Z+29	; 0x1d
     898:	76 8d       	ldd	r23, Z+30	; 0x1e
     89a:	87 8d       	ldd	r24, Z+31	; 0x1f
     89c:	90 a1       	ldd	r25, Z+32	; 0x20
     89e:	43 e0       	ldi	r20, 0x03	; 3
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	0e 94 b1 09 	call	0x1362	; 0x1362 <string_write_float>
     8a6:	31 c0       	rjmp	.+98     	; 0x90a <print_gps_data+0x172>
            break;

            case 7:
                string_write("Date: ");
     8a8:	89 ec       	ldi	r24, 0xC9	; 201
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_numchars(user->date,8);
     8b0:	80 91 89 03 	lds	r24, 0x0389
     8b4:	90 91 8a 03 	lds	r25, 0x038A
     8b8:	68 e0       	ldi	r22, 0x08	; 8
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	81 96       	adiw	r24, 0x21	; 33
     8be:	23 c0       	rjmp	.+70     	; 0x906 <print_gps_data+0x16e>
            break;

            case 8:
                string_write("MagVar: ");
     8c0:	80 ed       	ldi	r24, 0xD0	; 208
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_numchars(user->mag_var,8);
     8c8:	80 91 89 03 	lds	r24, 0x0389
     8cc:	90 91 8a 03 	lds	r25, 0x038A
     8d0:	68 e0       	ldi	r22, 0x08	; 8
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	89 96       	adiw	r24, 0x29	; 41
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <print_gps_data+0x16e>
            break;

            case 9:
                string_write("Mode: ");
     8d8:	89 ed       	ldi	r24, 0xD9	; 217
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                char_write(user->mode);
     8e0:	e0 91 89 03 	lds	r30, 0x0389
     8e4:	f0 91 8a 03 	lds	r31, 0x038A
     8e8:	81 a9       	ldd	r24, Z+49	; 0x31
     8ea:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
     8ee:	0d c0       	rjmp	.+26     	; 0x90a <print_gps_data+0x172>
            break;

            case 10:
                string_write("Checksum: ");
     8f0:	80 ee       	ldi	r24, 0xE0	; 224
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_numchars(user->checksum,3);
     8f8:	80 91 89 03 	lds	r24, 0x0389
     8fc:	90 91 8a 03 	lds	r25, 0x038A
     900:	63 e0       	ldi	r22, 0x03	; 3
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	c2 96       	adiw	r24, 0x32	; 50
     906:	0e 94 2e 0a 	call	0x145c	; 0x145c <string_write_numchars>
     90a:	2f e3       	ldi	r18, 0x3F	; 63
     90c:	8d e0       	ldi	r24, 0x0D	; 13
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	21 50       	subi	r18, 0x01	; 1
     912:	80 40       	sbci	r24, 0x00	; 0
     914:	90 40       	sbci	r25, 0x00	; 0
     916:	e1 f7       	brne	.-8      	; 0x910 <print_gps_data+0x178>
     918:	00 c0       	rjmp	.+0      	; 0x91a <print_gps_data+0x182>
     91a:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
     91c:	80 91 24 03 	lds	r24, 0x0324
     920:	90 91 25 03 	lds	r25, 0x0325
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	29 f0       	breq	.+10     	; 0x932 <print_gps_data+0x19a>
    lcd_init();
    string_write("Printing\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	cb 30       	cpi	r28, 0x0B	; 11
     92c:	d1 05       	cpc	r29, r1
     92e:	09 f0       	breq	.+2      	; 0x932 <print_gps_data+0x19a>
     930:	4f cf       	rjmp	.-354    	; 0x7d0 <print_gps_data+0x38>
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
    }
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(void)
{
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     940:	80 91 24 03 	lds	r24, 0x0324
     944:	90 91 25 03 	lds	r25, 0x0325
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	09 f4       	brne	.+2      	; 0x94e <print_raw_gps_data+0x16>
     94c:	6a c0       	rjmp	.+212    	; 0xa22 <print_raw_gps_data+0xea>
    lcd_init();
     94e:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("Printing Raw\nGPS Data");
     952:	8b ee       	ldi	r24, 0xEB	; 235
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     95a:	2f e3       	ldi	r18, 0x3F	; 63
     95c:	8d e0       	ldi	r24, 0x0D	; 13
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <print_raw_gps_data+0x28>
     968:	00 c0       	rjmp	.+0      	; 0x96a <print_raw_gps_data+0x32>
     96a:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     96c:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
     970:	0b e0       	ldi	r16, 0x0B	; 11
     972:	14 e0       	ldi	r17, 0x04	; 4
    int i=0;
    for (i=0; i<13; i++)
     974:	c0 e0       	ldi	r28, 0x00	; 0
     976:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     978:	20 97       	sbiw	r28, 0x00	; 0
     97a:	69 f0       	breq	.+26     	; 0x996 <print_raw_gps_data+0x5e>
            string_write("\n");
     97c:	8f e0       	ldi	r24, 0x0F	; 15
     97e:	93 e0       	ldi	r25, 0x03	; 3
     980:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>

        switch (i)
     984:	fe 01       	movw	r30, r28
     986:	32 97       	sbiw	r30, 0x02	; 2
     988:	eb 30       	cpi	r30, 0x0B	; 11
     98a:	f1 05       	cpc	r31, r1
     98c:	38 f4       	brcc	.+14     	; 0x99c <print_raw_gps_data+0x64>
     98e:	e1 5b       	subi	r30, 0xB1	; 177
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__tablejump2__>
        {
            case 0:
                string_write("Message");
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	23 c0       	rjmp	.+70     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 1:
                string_write("Time");
     99c:	89 e0       	ldi	r24, 0x09	; 9
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	20 c0       	rjmp	.+64     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 2:
                string_write("NRW");
     9a2:	8e e0       	ldi	r24, 0x0E	; 14
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	1d c0       	rjmp	.+58     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 3:
                string_write("Lat");
     9a8:	82 e1       	ldi	r24, 0x12	; 18
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	1a c0       	rjmp	.+52     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 4:
                string_write("N/S");
     9ae:	86 e1       	ldi	r24, 0x16	; 22
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	17 c0       	rjmp	.+46     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 5:
                string_write("Lon");
     9b4:	8a e1       	ldi	r24, 0x1A	; 26
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	14 c0       	rjmp	.+40     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 6:
                string_write("E/W");
     9ba:	8e e1       	ldi	r24, 0x1E	; 30
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	11 c0       	rjmp	.+34     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 7:
                string_write("Speed");
     9c0:	82 e2       	ldi	r24, 0x22	; 34
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 8:
                string_write("Course");
     9c6:	88 e2       	ldi	r24, 0x28	; 40
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 9:
                string_write("Date");
     9cc:	8f e2       	ldi	r24, 0x2F	; 47
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 10:
                string_write("MagVar");
     9d2:	84 e3       	ldi	r24, 0x34	; 52
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 11:
                string_write("Mode");
     9d8:	8b e3       	ldi	r24, 0x3B	; 59
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <print_raw_gps_data+0xaa>
            break;

            case 12:
                string_write("Checksum");
     9de:	80 e4       	ldi	r24, 0x40	; 64
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
            break;
        }

        string_write(": ");
     9e6:	8f e8       	ldi	r24, 0x8F	; 143
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
        string_write(gps_data[i]);
     9ee:	f8 01       	movw	r30, r16
     9f0:	81 91       	ld	r24, Z+
     9f2:	91 91       	ld	r25, Z+
     9f4:	8f 01       	movw	r16, r30
     9f6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     9fa:	ff e9       	ldi	r31, 0x9F	; 159
     9fc:	26 e8       	ldi	r18, 0x86	; 134
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	f1 50       	subi	r31, 0x01	; 1
     a02:	20 40       	sbci	r18, 0x00	; 0
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <print_raw_gps_data+0xc8>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <print_raw_gps_data+0xd2>
     a0a:	00 00       	nop

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
     a0c:	80 91 24 03 	lds	r24, 0x0324
     a10:	90 91 25 03 	lds	r25, 0x0325
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	29 f0       	breq	.+10     	; 0xa22 <print_raw_gps_data+0xea>
    lcd_init();
    string_write("Printing Raw\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
     a18:	21 96       	adiw	r28, 0x01	; 1
     a1a:	cd 30       	cpi	r28, 0x0D	; 13
     a1c:	d1 05       	cpc	r29, r1
     a1e:	09 f0       	breq	.+2      	; 0xa22 <print_raw_gps_data+0xea>
     a20:	ab cf       	rjmp	.-170    	; 0x978 <print_raw_gps_data+0x40>
        string_write(gps_data[i]);

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
    }
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(void)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
    int i;
    lcd_init();
     a30:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("wiping\nmemory...");
     a34:	89 e4       	ldi	r24, 0x49	; 73
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     a3c:	c0 e0       	ldi	r28, 0x00	; 0
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     a40:	80 91 24 03 	lds	r24, 0x0324
     a44:	90 91 25 03 	lds	r25, 0x0325
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	49 f0       	breq	.+18     	; 0xa5e <wipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     a4c:	6f ef       	ldi	r22, 0xFF	; 255
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__eewr_byte_m1284p>
void wipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     a54:	21 96       	adiw	r28, 0x01	; 1
     a56:	c1 3f       	cpi	r28, 0xF1	; 241
     a58:	8a e0       	ldi	r24, 0x0A	; 10
     a5a:	d8 07       	cpc	r29, r24
     a5c:	89 f7       	brne	.-30     	; 0xa40 <wipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     a6c:	2c e1       	ldi	r18, 0x1C	; 28
     a6e:	28 9f       	mul	r18, r24
     a70:	80 01       	movw	r16, r0
     a72:	29 9f       	mul	r18, r25
     a74:	10 0d       	add	r17, r0
     a76:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     a78:	c0 e0       	ldi	r28, 0x00	; 0
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     a7c:	e0 91 87 03 	lds	r30, 0x0387
     a80:	f0 91 88 03 	lds	r31, 0x0388
     a84:	e0 0f       	add	r30, r16
     a86:	f1 1f       	adc	r31, r17
     a88:	ec 0f       	add	r30, r28
     a8a:	fd 1f       	adc	r31, r29
     a8c:	80 81       	ld	r24, Z
     a8e:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     a92:	21 96       	adiw	r28, 0x01	; 1
     a94:	c8 30       	cpi	r28, 0x08	; 8
     a96:	d1 05       	cpc	r29, r1
     a98:	89 f7       	brne	.-30     	; 0xa7c <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <check_database_integrity>:
    _delay_ms(500);
}

//check for database corruption
void check_database_integrity(void)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     aac:	60 91 81 03 	lds	r22, 0x0381
     ab0:	70 91 82 03 	lds	r23, 0x0382
     ab4:	80 91 87 03 	lds	r24, 0x0387
     ab8:	90 91 88 03 	lds	r25, 0x0388
     abc:	c0 e0       	ldi	r28, 0x00	; 0
     abe:	d0 e0       	ldi	r29, 0x00	; 0
     ac0:	c6 17       	cp	r28, r22
     ac2:	d7 07       	cpc	r29, r23
     ac4:	0c f0       	brlt	.+2      	; 0xac8 <check_database_integrity+0x24>
     ac6:	6c c0       	rjmp	.+216    	; 0xba0 <check_database_integrity+0xfc>
     ac8:	ac 01       	movw	r20, r24
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if (((call[j] < 33)||(call[j] > 126))&&(call[j]!=' '))
     ace:	8a 01       	movw	r16, r20
     ad0:	4f 5f       	subi	r20, 0xFF	; 255
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	d8 01       	movw	r26, r16
     ad6:	ec 91       	ld	r30, X
     ad8:	e0 52       	subi	r30, 0x20	; 32
     ada:	ef 35       	cpi	r30, 0x5F	; 95
     adc:	08 f4       	brcc	.+2      	; 0xae0 <check_database_integrity+0x3c>
     ade:	57 c0       	rjmp	.+174    	; 0xb8e <check_database_integrity+0xea>
            {
                database_corrupted = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 1f 03 	sts	0x031F, r25
     ae8:	80 93 1e 03 	sts	0x031E, r24
                lcd_init();
     aec:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
                string_write("CORRUPTION\nDETECTED");
     af0:	8a e5       	ldi	r24, 0x5A	; 90
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     af8:	bf e7       	ldi	r27, 0x7F	; 127
     afa:	ea e1       	ldi	r30, 0x1A	; 26
     afc:	f6 e0       	ldi	r31, 0x06	; 6
     afe:	b1 50       	subi	r27, 0x01	; 1
     b00:	e0 40       	sbci	r30, 0x00	; 0
     b02:	f0 40       	sbci	r31, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <check_database_integrity+0x5a>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <check_database_integrity+0x64>
     b08:	00 00       	nop
                _delay_ms(2000);
                lcd_init();
     b0a:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
                string_write("tracing\ncorruption...");
     b0e:	8e e6       	ldi	r24, 0x6E	; 110
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     b16:	2f e9       	ldi	r18, 0x9F	; 159
     b18:	86 e8       	ldi	r24, 0x86	; 134
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	80 40       	sbci	r24, 0x00	; 0
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <check_database_integrity+0x78>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <check_database_integrity+0x82>
     b26:	00 00       	nop
                _delay_ms(500);
                lcd_init();
     b28:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
                string_write("station #");
     b2c:	84 e8       	ldi	r24, 0x84	; 132
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                string_write_int(i+1,3);
     b34:	63 e0       	ldi	r22, 0x03	; 3
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
                string_write(" : ");
     b40:	8e e8       	ldi	r24, 0x8E	; 142
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
                char_write('\'');
     b48:	87 e2       	ldi	r24, 0x27	; 39
     b4a:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
                char_write(call[j]);
     b4e:	d8 01       	movw	r26, r16
     b50:	8c 91       	ld	r24, X
     b52:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
                char_write('\'');
     b56:	87 e2       	ldi	r24, 0x27	; 39
     b58:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
                char_write('\n');
     b5c:	8a e0       	ldi	r24, 0x0A	; 10
     b5e:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
     b62:	bf e7       	ldi	r27, 0x7F	; 127
     b64:	ea e1       	ldi	r30, 0x1A	; 26
     b66:	f6 e0       	ldi	r31, 0x06	; 6
     b68:	b1 50       	subi	r27, 0x01	; 1
     b6a:	e0 40       	sbci	r30, 0x00	; 0
     b6c:	f0 40       	sbci	r31, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <check_database_integrity+0xc4>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <check_database_integrity+0xce>
     b72:	00 00       	nop
                _delay_ms(2000);
                print_callsign(i);
     b74:	ce 01       	movw	r24, r28
     b76:	0e 94 32 05 	call	0xa64	; 0xa64 <print_callsign>
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	84 e3       	ldi	r24, 0x34	; 52
     b7e:	9c e0       	ldi	r25, 0x0C	; 12
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	90 40       	sbci	r25, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <check_database_integrity+0xdc>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <check_database_integrity+0xe6>
     b8a:	00 00       	nop
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <check_database_integrity+0xfc>
{
    int i, j;
    for (i=0; i<num_stations; i++)
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	28 30       	cpi	r18, 0x08	; 8
     b94:	31 05       	cpc	r19, r1
     b96:	09 f0       	breq	.+2      	; 0xb9a <check_database_integrity+0xf6>
     b98:	9a cf       	rjmp	.-204    	; 0xace <check_database_integrity+0x2a>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	4c 96       	adiw	r24, 0x1c	; 28
     b9e:	90 cf       	rjmp	.-224    	; 0xac0 <check_database_integrity+0x1c>
                _delay_ms(4000);
                return;
            }
        }
    }
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     bb2:	80 91 24 03 	lds	r24, 0x0324
     bb6:	90 91 25 03 	lds	r25, 0x0325
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <print_all_callsigns+0x16>
     bbe:	4d c0       	rjmp	.+154    	; 0xc5a <print_all_callsigns+0xb0>
    int i;
    lcd_init();
     bc0:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write_int(num_stations,3);
     bc4:	63 e0       	ldi	r22, 0x03	; 3
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 91 81 03 	lds	r24, 0x0381
     bcc:	90 91 82 03 	lds	r25, 0x0382
     bd0:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
    string_write(" known\nstations");
     bd4:	8f ec       	ldi	r24, 0xCF	; 207
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     bdc:	2f e7       	ldi	r18, 0x7F	; 127
     bde:	8a e1       	ldi	r24, 0x1A	; 26
     be0:	96 e0       	ldi	r25, 0x06	; 6
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <print_all_callsigns+0x38>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <print_all_callsigns+0x42>
     bec:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     bee:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("\n");
     bf2:	8f e0       	ldi	r24, 0x0F	; 15
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>

    for (i=0; i<num_stations; i++)
     bfa:	c0 e0       	ldi	r28, 0x00	; 0
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
     bfe:	80 91 81 03 	lds	r24, 0x0381
     c02:	90 91 82 03 	lds	r25, 0x0382
     c06:	c8 17       	cp	r28, r24
     c08:	d9 07       	cpc	r29, r25
     c0a:	3c f5       	brge	.+78     	; 0xc5a <print_all_callsigns+0xb0>
    {
        if (op_mode==MD_UPDATE) return;
     c0c:	80 91 24 03 	lds	r24, 0x0324
     c10:	90 91 25 03 	lds	r25, 0x0325
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	09 f1       	breq	.+66     	; 0xc5a <print_all_callsigns+0xb0>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
     c18:	8f e0       	ldi	r24, 0x0F	; 15
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     c20:	8e 01       	movw	r16, r28
     c22:	0f 5f       	subi	r16, 0xFF	; 255
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	63 e0       	ldi	r22, 0x03	; 3
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	c8 01       	movw	r24, r16
     c2c:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
     c30:	8f e8       	ldi	r24, 0x8F	; 143
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     c38:	ce 01       	movw	r24, r28
     c3a:	0e 94 32 05 	call	0xa64	; 0xa64 <print_callsign>

        if (op_mode==MD_UPDATE) return;
     c3e:	80 91 24 03 	lds	r24, 0x0324
     c42:	90 91 25 03 	lds	r25, 0x0325
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	41 f0       	breq	.+16     	; 0xc5a <print_all_callsigns+0xb0>
     c4a:	83 e2       	ldi	r24, 0x23	; 35
     c4c:	94 ef       	ldi	r25, 0xF4	; 244
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <print_all_callsigns+0xa4>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <print_all_callsigns+0xaa>
     c54:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    string_write("\n");

    for (i=0; i<num_stations; i++)
     c56:	e8 01       	movw	r28, r16
     c58:	d2 cf       	rjmp	.-92     	; 0xbfe <print_all_callsigns+0x54>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     c6e:	63 e0       	ldi	r22, 0x03	; 3
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
     c78:	8f e8       	ldi	r24, 0x8F	; 143
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     c80:	c8 01       	movw	r24, r16
     c82:	0e 94 32 05 	call	0xa64	; 0xa64 <print_callsign>
     c86:	83 e2       	ldi	r24, 0x23	; 35
     c88:	94 ef       	ldi	r25, 0xF4	; 244
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <print_station+0x26>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <print_station+0x2c>
     c90:	00 00       	nop
     c92:	8f e0       	ldi	r24, 0x0F	; 15
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    if (op_mode==MD_UPDATE)
     c9a:	80 91 24 03 	lds	r24, 0x0324
     c9e:	90 91 25 03 	lds	r25, 0x0325
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <print_station+0x44>
     ca6:	b1 c0       	rjmp	.+354    	; 0xe0a <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     ca8:	8f ed       	ldi	r24, 0xDF	; 223
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     cb0:	8c e1       	ldi	r24, 0x1C	; 28
     cb2:	80 9f       	mul	r24, r16
     cb4:	e0 01       	movw	r28, r0
     cb6:	81 9f       	mul	r24, r17
     cb8:	d0 0d       	add	r29, r0
     cba:	11 24       	eor	r1, r1
     cbc:	e0 91 87 03 	lds	r30, 0x0387
     cc0:	f0 91 88 03 	lds	r31, 0x0388
     cc4:	ec 0f       	add	r30, r28
     cc6:	fd 1f       	adc	r31, r29
     cc8:	60 85       	ldd	r22, Z+8	; 0x08
     cca:	71 85       	ldd	r23, Z+9	; 0x09
     ccc:	82 85       	ldd	r24, Z+10	; 0x0a
     cce:	93 85       	ldd	r25, Z+11	; 0x0b
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	0e 94 b1 09 	call	0x1362	; 0x1362 <string_write_float>
     cd8:	83 e2       	ldi	r24, 0x23	; 35
     cda:	94 ef       	ldi	r25, 0xF4	; 244
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <print_station+0x78>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <print_station+0x7e>
     ce2:	00 00       	nop
     ce4:	8f e0       	ldi	r24, 0x0F	; 15
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    if (op_mode==MD_UPDATE)
     cec:	80 91 24 03 	lds	r24, 0x0324
     cf0:	90 91 25 03 	lds	r25, 0x0325
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <print_station+0x96>
     cf8:	88 c0       	rjmp	.+272    	; 0xe0a <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     cfa:	86 ee       	ldi	r24, 0xE6	; 230
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     d02:	e0 91 87 03 	lds	r30, 0x0387
     d06:	f0 91 88 03 	lds	r31, 0x0388
     d0a:	ec 0f       	add	r30, r28
     d0c:	fd 1f       	adc	r31, r29
     d0e:	64 85       	ldd	r22, Z+12	; 0x0c
     d10:	75 85       	ldd	r23, Z+13	; 0x0d
     d12:	86 85       	ldd	r24, Z+14	; 0x0e
     d14:	97 85       	ldd	r25, Z+15	; 0x0f
     d16:	44 e0       	ldi	r20, 0x04	; 4
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	0e 94 b1 09 	call	0x1362	; 0x1362 <string_write_float>
     d1e:	83 e2       	ldi	r24, 0x23	; 35
     d20:	94 ef       	ldi	r25, 0xF4	; 244
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <print_station+0xbe>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <print_station+0xc4>
     d28:	00 00       	nop
     d2a:	8f e0       	ldi	r24, 0x0F	; 15
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    if (op_mode==MD_UPDATE)
     d32:	80 91 24 03 	lds	r24, 0x0324
     d36:	90 91 25 03 	lds	r25, 0x0325
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <print_station+0xdc>
     d3e:	65 c0       	rjmp	.+202    	; 0xe0a <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     d40:	8c ee       	ldi	r24, 0xEC	; 236
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     d48:	e0 91 87 03 	lds	r30, 0x0387
     d4c:	f0 91 88 03 	lds	r31, 0x0388
     d50:	ec 0f       	add	r30, r28
     d52:	fd 1f       	adc	r31, r29
     d54:	60 89       	ldd	r22, Z+16	; 0x10
     d56:	71 89       	ldd	r23, Z+17	; 0x11
     d58:	82 89       	ldd	r24, Z+18	; 0x12
     d5a:	93 89       	ldd	r25, Z+19	; 0x13
     d5c:	44 e0       	ldi	r20, 0x04	; 4
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	0e 94 b1 09 	call	0x1362	; 0x1362 <string_write_float>
     d64:	83 e2       	ldi	r24, 0x23	; 35
     d66:	94 ef       	ldi	r25, 0xF4	; 244
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <print_station+0x104>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <print_station+0x10a>
     d6e:	00 00       	nop
     d70:	8f e0       	ldi	r24, 0x0F	; 15
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    if (op_mode==MD_UPDATE)
     d78:	80 91 24 03 	lds	r24, 0x0324
     d7c:	90 91 25 03 	lds	r25, 0x0325
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	09 f4       	brne	.+2      	; 0xd86 <print_station+0x122>
     d84:	42 c0       	rjmp	.+132    	; 0xe0a <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     d86:	82 ef       	ldi	r24, 0xF2	; 242
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     d8e:	e0 91 87 03 	lds	r30, 0x0387
     d92:	f0 91 88 03 	lds	r31, 0x0388
     d96:	ec 0f       	add	r30, r28
     d98:	fd 1f       	adc	r31, r29
     d9a:	64 89       	ldd	r22, Z+20	; 0x14
     d9c:	75 89       	ldd	r23, Z+21	; 0x15
     d9e:	86 89       	ldd	r24, Z+22	; 0x16
     da0:	97 89       	ldd	r25, Z+23	; 0x17
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	0e 94 b1 09 	call	0x1362	; 0x1362 <string_write_float>
     daa:	83 e2       	ldi	r24, 0x23	; 35
     dac:	94 ef       	ldi	r25, 0xF4	; 244
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <print_station+0x14a>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <print_station+0x150>
     db4:	00 00       	nop
     db6:	8f e0       	ldi	r24, 0x0F	; 15
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    if (op_mode==MD_UPDATE)
     dbe:	80 91 24 03 	lds	r24, 0x0324
     dc2:	90 91 25 03 	lds	r25, 0x0325
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	01 f1       	breq	.+64     	; 0xe0a <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     dca:	88 ef       	ldi	r24, 0xF8	; 248
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     dd2:	e0 91 87 03 	lds	r30, 0x0387
     dd6:	f0 91 88 03 	lds	r31, 0x0388
     dda:	ec 0f       	add	r30, r28
     ddc:	fd 1f       	adc	r31, r29
     dde:	60 8d       	ldd	r22, Z+24	; 0x18
     de0:	71 8d       	ldd	r23, Z+25	; 0x19
     de2:	82 8d       	ldd	r24, Z+26	; 0x1a
     de4:	93 8d       	ldd	r25, Z+27	; 0x1b
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	0e 94 b1 09 	call	0x1362	; 0x1362 <string_write_float>
     dee:	83 e2       	ldi	r24, 0x23	; 35
     df0:	94 ef       	ldi	r25, 0xF4	; 244
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <print_station+0x18e>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <print_station+0x194>
     df8:	00 00       	nop
     dfa:	8f e0       	ldi	r24, 0x0F	; 15
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    if (op_mode==MD_UPDATE)
     e02:	80 91 24 03 	lds	r24, 0x0324
     e06:	90 91 25 03 	lds	r25, 0x0325
        return;
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     e18:	80 91 24 03 	lds	r24, 0x0324
     e1c:	90 91 25 03 	lds	r25, 0x0325
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	c9 f1       	breq	.+114    	; 0xe96 <print_all_known_stations+0x82>
    int i;
    lcd_init();
     e24:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write_int(num_stations,3);
     e28:	63 e0       	ldi	r22, 0x03	; 3
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 91 81 03 	lds	r24, 0x0381
     e30:	90 91 82 03 	lds	r25, 0x0382
     e34:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
    string_write(" known\nstations");
     e38:	8f ec       	ldi	r24, 0xCF	; 207
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
     e40:	2f e7       	ldi	r18, 0x7F	; 127
     e42:	8a e1       	ldi	r24, 0x1A	; 26
     e44:	96 e0       	ldi	r25, 0x06	; 6
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <print_all_known_stations+0x32>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <print_all_known_stations+0x3c>
     e50:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	80 91 81 03 	lds	r24, 0x0381
     e5a:	90 91 82 03 	lds	r25, 0x0382
     e5e:	c8 17       	cp	r28, r24
     e60:	d9 07       	cpc	r29, r25
     e62:	cc f4       	brge	.+50     	; 0xe96 <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
     e64:	80 91 24 03 	lds	r24, 0x0324
     e68:	90 91 25 03 	lds	r25, 0x0325
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	99 f0       	breq	.+38     	; 0xe96 <print_all_known_stations+0x82>

        lcd_init();
     e70:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
        print_station(i);
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 32 06 	call	0xc64	; 0xc64 <print_station>

        if (op_mode==MD_UPDATE) return;
     e7a:	80 91 24 03 	lds	r24, 0x0324
     e7e:	90 91 25 03 	lds	r25, 0x0325
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	41 f0       	breq	.+16     	; 0xe96 <print_all_known_stations+0x82>
     e86:	8f e4       	ldi	r24, 0x4F	; 79
     e88:	93 ec       	ldi	r25, 0xC3	; 195
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <print_all_known_stations+0x76>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <print_all_known_stations+0x7c>
     e90:	00 00       	nop
    string_write_int(num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
     e92:	21 96       	adiw	r28, 0x01	; 1
     e94:	e0 cf       	rjmp	.-64     	; 0xe56 <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <show_nearest_station>:
    }
}

void show_nearest_station(void)
{
    lcd_init();
     e9c:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    string_write("Nearest Station:\n");
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    print_callsign(nearest_station);
     ea8:	80 91 02 01 	lds	r24, 0x0102
     eac:	90 91 03 01 	lds	r25, 0x0103
     eb0:	0e 94 32 05 	call	0xa64	; 0xa64 <print_callsign>
     eb4:	2f e7       	ldi	r18, 0x7F	; 127
     eb6:	8a e1       	ldi	r24, 0x1A	; 26
     eb8:	96 e0       	ldi	r25, 0x06	; 6
     eba:	21 50       	subi	r18, 0x01	; 1
     ebc:	80 40       	sbci	r24, 0x00	; 0
     ebe:	90 40       	sbci	r25, 0x00	; 0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <show_nearest_station+0x1e>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <show_nearest_station+0x28>
     ec4:	00 00       	nop
    _delay_ms(2000);
    print_station(nearest_station);
     ec6:	80 91 02 01 	lds	r24, 0x0102
     eca:	90 91 03 01 	lds	r25, 0x0103
     ece:	0e 94 32 06 	call	0xc64	; 0xc64 <print_station>
     ed2:	2f e7       	ldi	r18, 0x7F	; 127
     ed4:	8a e1       	ldi	r24, 0x1A	; 26
     ed6:	96 e0       	ldi	r25, 0x06	; 6
     ed8:	21 50       	subi	r18, 0x01	; 1
     eda:	80 40       	sbci	r24, 0x00	; 0
     edc:	90 40       	sbci	r25, 0x00	; 0
     ede:	e1 f7       	brne	.-8      	; 0xed8 <show_nearest_station+0x3c>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <show_nearest_station+0x46>
     ee2:	00 00       	nop
     ee4:	08 95       	ret

00000ee6 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     ee6:	12 9a       	sbi	0x02, 2	; 2
     ee8:	81 ee       	ldi	r24, 0xE1	; 225
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <datarw+0x6>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <datarw+0xc>
     ef2:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     ef4:	12 98       	cbi	0x02, 2	; 2
     ef6:	08 95       	ret

00000ef8 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     ef8:	10 92 84 03 	sts	0x0384, r1
     efc:	10 92 83 03 	sts	0x0383, r1
    line_num = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	90 93 05 01 	sts	0x0105, r25
     f08:	80 93 04 01 	sts	0x0104, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     f0c:	81 b1       	in	r24, 0x01	; 1
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	81 b9       	out	0x01, r24	; 1
     f12:	87 e8       	ldi	r24, 0x87	; 135
     f14:	93 e1       	ldi	r25, 0x13	; 19
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <lcd_init+0x1e>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <lcd_init+0x24>
     f1c:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     f1e:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     f20:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     f22:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     f24:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     f26:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     f28:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     f2a:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     f2c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     f30:	81 ee       	ldi	r24, 0xE1	; 225
     f32:	94 e0       	ldi	r25, 0x04	; 4
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <lcd_init+0x3c>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <lcd_init+0x42>
     f3a:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     f3c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     f40:	89 ef       	ldi	r24, 0xF9	; 249
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <lcd_init+0x4c>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <lcd_init+0x52>
     f4a:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     f4c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     f50:	89 ef       	ldi	r24, 0xF9	; 249
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <lcd_init+0x5c>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <lcd_init+0x62>
     f5a:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     f5c:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     f5e:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     f60:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     f62:	13 98       	cbi	0x02, 3	; 2
    datarw();
     f64:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     f68:	89 ef       	ldi	r24, 0xF9	; 249
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <lcd_init+0x74>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <lcd_init+0x7a>
     f72:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     f74:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     f76:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     f78:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     f7a:	13 98       	cbi	0x02, 3	; 2
    datarw();
     f7c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     f80:	89 ef       	ldi	r24, 0xF9	; 249
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <lcd_init+0x8c>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <lcd_init+0x92>
     f8a:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     f8c:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     f8e:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     f90:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     f92:	13 98       	cbi	0x02, 3	; 2
    datarw();
     f94:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     f98:	89 ef       	ldi	r24, 0xF9	; 249
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <lcd_init+0xa4>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <lcd_init+0xaa>
     fa2:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     fa4:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     fa6:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     fa8:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     faa:	13 98       	cbi	0x02, 3	; 2
    datarw();
     fac:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     fb0:	89 ef       	ldi	r24, 0xF9	; 249
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <lcd_init+0xbc>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <lcd_init+0xc2>
     fba:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     fbc:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     fbe:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     fc0:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     fc2:	13 98       	cbi	0x02, 3	; 2
    datarw();
     fc4:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     fc8:	89 ef       	ldi	r24, 0xF9	; 249
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <lcd_init+0xd4>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <lcd_init+0xda>
     fd2:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     fd4:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     fd6:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     fd8:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     fda:	13 98       	cbi	0x02, 3	; 2
    datarw();
     fdc:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     fe0:	89 ef       	ldi	r24, 0xF9	; 249
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <lcd_init+0xec>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <lcd_init+0xf2>
     fea:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     fec:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     fee:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     ff0:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     ff2:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     ff4:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
     ff8:	89 ef       	ldi	r24, 0xF9	; 249
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <lcd_init+0x104>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <lcd_init+0x10a>
    1002:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
    1004:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1006:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1008:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    100a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    100c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    1010:	89 ef       	ldi	r24, 0xF9	; 249
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <lcd_init+0x11c>
    1018:	00 c0       	rjmp	.+0      	; 0x101a <lcd_init+0x122>
    101a:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
    101c:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    101e:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1020:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
    1022:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1024:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    1028:	89 ef       	ldi	r24, 0xF9	; 249
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <lcd_init+0x134>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <lcd_init+0x13a>
    1032:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
    1034:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1036:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1038:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    103a:	13 98       	cbi	0x02, 3	; 2
    datarw();
    103c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    1040:	89 ef       	ldi	r24, 0xF9	; 249
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <lcd_init+0x14c>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <lcd_init+0x152>
    104a:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    104c:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    104e:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1050:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    1052:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    1054:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    1058:	89 ef       	ldi	r24, 0xF9	; 249
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <lcd_init+0x164>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <lcd_init+0x16a>
    1062:	00 00       	nop
    _delay_ms(1);

	return 0;
}
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	08 95       	ret

0000106a <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	11 f4       	brne	.+4      	; 0x1072 <letterwrite+0x8>
    106e:	16 9a       	sbi	0x02, 6	; 2
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
    1072:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
    1074:	61 30       	cpi	r22, 0x01	; 1
    1076:	71 05       	cpc	r23, r1
    1078:	11 f4       	brne	.+4      	; 0x107e <letterwrite+0x14>
    107a:	15 9a       	sbi	0x02, 5	; 2
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
    107e:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
    1080:	41 30       	cpi	r20, 0x01	; 1
    1082:	51 05       	cpc	r21, r1
    1084:	11 f4       	brne	.+4      	; 0x108a <letterwrite+0x20>
    1086:	14 9a       	sbi	0x02, 4	; 2
    1088:	01 c0       	rjmp	.+2      	; 0x108c <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
    108a:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
    108c:	21 30       	cpi	r18, 0x01	; 1
    108e:	31 05       	cpc	r19, r1
    1090:	11 f4       	brne	.+4      	; 0x1096 <letterwrite+0x2c>
    1092:	13 9a       	sbi	0x02, 3	; 2
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
    1096:	13 98       	cbi	0x02, 3	; 2
   	datarw();
    1098:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    109c:	89 ef       	ldi	r24, 0xF9	; 249
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <letterwrite+0x36>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <letterwrite+0x3c>
    10a6:	00 00       	nop
    10a8:	08 95       	ret

000010aa <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
    10b0:	81 b1       	in	r24, 0x01	; 1
    10b2:	87 78       	andi	r24, 0x87	; 135
    10b4:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
    10b6:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
    10b8:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    10ba:	12 9a       	sbi	0x02, 2	; 2
    10bc:	81 ee       	ldi	r24, 0xE1	; 225
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <instruction_read+0x16>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <instruction_read+0x1c>
    10c6:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    10c8:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    10ca:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
    10cc:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
    10ce:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
    10d0:	12 98       	cbi	0x02, 2	; 2
    10d2:	e9 ef       	ldi	r30, 0xF9	; 249
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <instruction_read+0x2c>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <instruction_read+0x32>
    10dc:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    10de:	12 9a       	sbi	0x02, 2	; 2
    10e0:	e1 ee       	ldi	r30, 0xE1	; 225
    10e2:	f4 e0       	ldi	r31, 0x04	; 4
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <instruction_read+0x3a>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <instruction_read+0x40>
    10ea:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    10ec:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
    10ee:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
    10f0:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
    10f2:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    10f4:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	26 e0       	ldi	r18, 0x06	; 6
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	2a 95       	dec	r18
    1100:	e1 f7       	brne	.-8      	; 0x10fa <instruction_read+0x50>
    value = PORTA & _BV(DB5);
    1102:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
    1104:	d0 e0       	ldi	r29, 0x00	; 0
    1106:	35 e0       	ldi	r19, 0x05	; 5
    1108:	cc 0f       	add	r28, r28
    110a:	dd 1f       	adc	r29, r29
    110c:	3a 95       	dec	r19
    110e:	e1 f7       	brne	.-8      	; 0x1108 <instruction_read+0x5e>
    1110:	8c 2b       	or	r24, r28
    1112:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
    1114:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
    1116:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    1118:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	54 e0       	ldi	r21, 0x04	; 4
    111e:	aa 0f       	add	r26, r26
    1120:	bb 1f       	adc	r27, r27
    1122:	5a 95       	dec	r21
    1124:	e1 f7       	brne	.-8      	; 0x111e <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    1126:	8a 2b       	or	r24, r26
    1128:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    112a:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	73 e0       	ldi	r23, 0x03	; 3
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	7a 95       	dec	r23
    1136:	e1 f7       	brne	.-8      	; 0x1130 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
    1138:	8e 2b       	or	r24, r30
    113a:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    113c:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
    1148:	86 2b       	or	r24, r22
    114a:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
    114c:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
    114e:	51 b1       	in	r21, 0x01	; 1
    1150:	58 67       	ori	r21, 0x78	; 120
    1152:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    1154:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1156:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    1158:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	44 0f       	add	r20, r20
    115e:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
    1160:	84 2b       	or	r24, r20
    1162:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    1164:	16 fb       	bst	r17, 6
    1166:	22 27       	eor	r18, r18
    1168:	20 f9       	bld	r18, 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
    116c:	36 95       	lsr	r19
    116e:	32 2f       	mov	r19, r18
    1170:	22 27       	eor	r18, r18
    1172:	37 95       	ror	r19
    1174:	27 95       	ror	r18
}
    1176:	82 2b       	or	r24, r18
    1178:	93 2b       	or	r25, r19
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	08 95       	ret

00001182 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
    1182:	0e 94 55 08 	call	0x10aa	; 0x10aa <instruction_read>
    1186:	8f 77       	andi	r24, 0x7F	; 127
    1188:	99 27       	eor	r25, r25
    return address+1;
}
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	08 95       	ret

0000118e <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
    118e:	89 2b       	or	r24, r25
    1190:	11 f4       	brne	.+4      	; 0x1196 <write_db74+0x8>
    1192:	16 98       	cbi	0x02, 6	; 2
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <write_db74+0xa>
    else PORTA |= _BV(DB7);
    1196:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
    1198:	67 2b       	or	r22, r23
    119a:	11 f4       	brne	.+4      	; 0x11a0 <write_db74+0x12>
    119c:	15 98       	cbi	0x02, 5	; 2
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <write_db74+0x14>
    else PORTA |= _BV(DB6);
    11a0:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
    11a2:	45 2b       	or	r20, r21
    11a4:	11 f4       	brne	.+4      	; 0x11aa <write_db74+0x1c>
    11a6:	14 98       	cbi	0x02, 4	; 2
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <write_db74+0x1e>
    else PORTA |= _BV(DB5);
    11aa:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
    11ac:	23 2b       	or	r18, r19
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <write_db74+0x26>
    11b0:	13 98       	cbi	0x02, 3	; 2
    11b2:	08 95       	ret
    else PORTA |= _BV(DB4);
    11b4:	13 9a       	sbi	0x02, 3	; 2
    11b6:	08 95       	ret

000011b8 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
    11be:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    11c0:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    11c2:	28 2f       	mov	r18, r24
    11c4:	22 95       	swap	r18
    11c6:	21 70       	andi	r18, 0x01	; 1
    11c8:	85 fb       	bst	r24, 5
    11ca:	44 27       	eor	r20, r20
    11cc:	40 f9       	bld	r20, 0
    11ce:	86 fb       	bst	r24, 6
    11d0:	66 27       	eor	r22, r22
    11d2:	60 f9       	bld	r22, 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 c7 08 	call	0x118e	; 0x118e <write_db74>
    datarw();
    11e2:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    11e6:	9e 01       	movw	r18, r28
    11e8:	21 70       	andi	r18, 0x01	; 1
    11ea:	33 27       	eor	r19, r19
    11ec:	4c 2f       	mov	r20, r28
    11ee:	46 95       	lsr	r20
    11f0:	41 70       	andi	r20, 0x01	; 1
    11f2:	c2 fb       	bst	r28, 2
    11f4:	66 27       	eor	r22, r22
    11f6:	60 f9       	bld	r22, 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	c3 fb       	bst	r28, 3
    11fe:	88 27       	eor	r24, r24
    1200:	80 f9       	bld	r24, 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 c7 08 	call	0x118e	; 0x118e <write_db74>
    datarw();
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
    120c:	0c 94 73 07 	jmp	0xee6	; 0xee6 <datarw>

00001210 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
    1210:	cf 93       	push	r28
    1212:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
    1214:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1216:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    1218:	84 fb       	bst	r24, 4
    121a:	22 27       	eor	r18, r18
    121c:	20 f9       	bld	r18, 0
    121e:	85 fb       	bst	r24, 5
    1220:	44 27       	eor	r20, r20
    1222:	40 f9       	bld	r20, 0
    1224:	86 fb       	bst	r24, 6
    1226:	66 27       	eor	r22, r22
    1228:	60 f9       	bld	r22, 0
    122a:	88 1f       	adc	r24, r24
    122c:	88 27       	eor	r24, r24
    122e:	88 1f       	adc	r24, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 c7 08 	call	0x118e	; 0x118e <write_db74>
    datarw();
    123c:	0e 94 73 07 	call	0xee6	; 0xee6 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    1240:	2c 2f       	mov	r18, r28
    1242:	21 70       	andi	r18, 0x01	; 1
    1244:	c1 fb       	bst	r28, 1
    1246:	44 27       	eor	r20, r20
    1248:	40 f9       	bld	r20, 0
    124a:	c2 fb       	bst	r28, 2
    124c:	66 27       	eor	r22, r22
    124e:	60 f9       	bld	r22, 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	c3 fb       	bst	r28, 3
    1258:	88 27       	eor	r24, r24
    125a:	80 f9       	bld	r24, 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 c7 08 	call	0x118e	; 0x118e <write_db74>
    datarw();
}
    1262:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
    1264:	0c 94 73 07 	jmp	0xee6	; 0xee6 <datarw>

00001268 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
    1268:	cf 93       	push	r28
    126a:	c8 2f       	mov	r28, r24
    chars_written++;
    126c:	20 91 83 03 	lds	r18, 0x0383
    1270:	30 91 84 03 	lds	r19, 0x0384
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	30 93 84 03 	sts	0x0384, r19
    127c:	20 93 83 03 	sts	0x0383, r18

    if ((chars_written==17)||(mychar=='\n'))
    1280:	21 31       	cpi	r18, 0x11	; 17
    1282:	31 05       	cpc	r19, r1
    1284:	31 f0       	breq	.+12     	; 0x1292 <char_write+0x2a>
    1286:	8a 30       	cpi	r24, 0x0A	; 10
    1288:	21 f0       	breq	.+8      	; 0x1292 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    128a:	8c 2f       	mov	r24, r28
    
}
    128c:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    128e:	0c 94 08 09 	jmp	0x1210	; 0x1210 <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
    1292:	20 91 04 01 	lds	r18, 0x0104
    1296:	30 91 05 01 	lds	r19, 0x0105
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	79 f4       	brne	.+30     	; 0x12be <char_write+0x56>
        {
            set_ddram_address(0x40);
    12a0:	80 e4       	ldi	r24, 0x40	; 64
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <set_ddram_address>
            line_num = 2;
    12a8:	22 e0       	ldi	r18, 0x02	; 2
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	30 93 05 01 	sts	0x0105, r19
    12b0:	20 93 04 01 	sts	0x0104, r18
            chars_written = 0;
    12b4:	10 92 84 03 	sts	0x0384, r1
    12b8:	10 92 83 03 	sts	0x0383, r1
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <char_write+0x60>
        }
        else if (line_num==2)
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <char_write+0x60>
        {
            lcd_init();
    12c4:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
        }
    }

    if (mychar!='\n')
    12c8:	ca 30       	cpi	r28, 0x0A	; 10
    12ca:	f9 f6       	brne	.-66     	; 0x128a <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
    12da:	0e 94 c1 08 	call	0x1182	; 0x1182 <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
    12de:	8e 01       	movw	r16, r28
    12e0:	fe 01       	movw	r30, r28
    12e2:	01 90       	ld	r0, Z+
    12e4:	00 20       	and	r0, r0
    12e6:	e9 f7       	brne	.-6      	; 0x12e2 <string_write+0x12>
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	ec 1b       	sub	r30, r28
    12ec:	fd 0b       	sbc	r31, r29
    12ee:	c8 01       	movw	r24, r16
    12f0:	8c 1b       	sub	r24, r28
    12f2:	9d 0b       	sbc	r25, r29
    12f4:	8e 17       	cp	r24, r30
    12f6:	9f 07       	cpc	r25, r31
    12f8:	40 f4       	brcc	.+16     	; 0x130a <string_write+0x3a>
        char_write(mystring[i]);
    12fa:	f8 01       	movw	r30, r16
    12fc:	81 91       	ld	r24, Z+
    12fe:	8f 01       	movw	r16, r30
    1300:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
        get_current_address();
    1304:	0e 94 c1 08 	call	0x1182	; 0x1182 <get_current_address>
    1308:	eb cf       	rjmp	.-42     	; 0x12e0 <string_write+0x10>
    }
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	18 2f       	mov	r17, r24
    131e:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
    1320:	cb 01       	movw	r24, r22
    1322:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
    1326:	d8 2f       	mov	r29, r24
    1328:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	21 e1       	ldi	r18, 0x11	; 17
    1330:	33 e0       	ldi	r19, 0x03	; 3
    1332:	3f 93       	push	r19
    1334:	2f 93       	push	r18
    1336:	9f 93       	push	r25
    1338:	8f 93       	push	r24
    133a:	0e 94 96 14 	call	0x292c	; 0x292c <sprintf>
    string_write(temp);
    133e:	8d 2f       	mov	r24, r29
    1340:	9c 2f       	mov	r25, r28
    1342:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    free(temp);
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	8d 2f       	mov	r24, r29
    1354:	9c 2f       	mov	r25, r28
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
    135e:	0c 94 32 12 	jmp	0x2464	; 0x2464 <free>

00001362 <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	00 d0       	rcall	.+0      	; 0x1374 <string_write_float+0x12>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <string_write_float+0x14>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
    137c:	ae 01       	movw	r20, r28
    137e:	4f 5f       	subi	r20, 0xFF	; 255
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <modf>
    1386:	6b 01       	movw	r12, r22
    1388:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
    138a:	69 81       	ldd	r22, Y+1	; 0x01
    138c:	7a 81       	ldd	r23, Y+2	; 0x02
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fixsfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	0e 94 8a 09 	call	0x1314	; 0x1314 <string_write_int>
    13a2:	80 e4       	ldi	r24, 0x40	; 64
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
    13aa:	b8 01       	movw	r22, r16
    13ac:	88 27       	eor	r24, r24
    13ae:	77 fd       	sbrc	r23, 7
    13b0:	80 95       	com	r24
    13b2:	98 2f       	mov	r25, r24
    13b4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__floatsisf>
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	80 e2       	ldi	r24, 0x20	; 32
    13c2:	91 e4       	ldi	r25, 0x41	; 65
    13c4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <pow>
    13c8:	9b 01       	movw	r18, r22
    13ca:	ac 01       	movw	r20, r24
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3>
    13d4:	0e 94 bd 10 	call	0x217a	; 0x217a <round>
    13d8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fixsfsi>
    13dc:	7b 01       	movw	r14, r22
    13de:	77 ff       	sbrs	r23, 7
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <string_write_float+0x88>
    13e2:	ee 24       	eor	r14, r14
    13e4:	ff 24       	eor	r15, r15
    13e6:	e6 1a       	sub	r14, r22
    13e8:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
    13ea:	e1 14       	cp	r14, r1
    13ec:	f1 04       	cpc	r15, r1
    13ee:	a1 f0       	breq	.+40     	; 0x1418 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
    13f0:	b7 01       	movw	r22, r14
    13f2:	88 27       	eor	r24, r24
    13f4:	77 fd       	sbrc	r23, 7
    13f6:	80 95       	com	r24
    13f8:	98 2f       	mov	r25, r24
    13fa:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__floatsisf>
    13fe:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <log10>
    1402:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <floor>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__addsf3>
    1412:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fixsfsi>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <string_write_float+0xba>
    } else {
        digits = 0;
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    141c:	c1 2c       	mov	r12, r1
    141e:	d1 2c       	mov	r13, r1
    1420:	06 1b       	sub	r16, r22
    1422:	17 0b       	sbc	r17, r23
    1424:	c0 16       	cp	r12, r16
    1426:	d1 06       	cpc	r13, r17
    1428:	44 f4       	brge	.+16     	; 0x143a <string_write_float+0xd8>
    {
        string_write("0");
    142a:	84 e1       	ldi	r24, 0x14	; 20
    142c:	93 e0       	ldi	r25, 0x03	; 3
    142e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	c8 1a       	sub	r12, r24
    1436:	d8 0a       	sbc	r13, r24
    1438:	f5 cf       	rjmp	.-22     	; 0x1424 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
    143a:	64 e0       	ldi	r22, 0x04	; 4
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	c7 01       	movw	r24, r14
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
    1458:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <string_write_int>

0000145c <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	8c 01       	movw	r16, r24
    146e:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
    1470:	0e 94 c1 08 	call	0x1182	; 0x1182 <get_current_address>
    1474:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    1476:	c0 e0       	ldi	r28, 0x00	; 0
    1478:	d0 e0       	ldi	r29, 0x00	; 0
    147a:	cc 15       	cp	r28, r12
    147c:	dd 05       	cpc	r29, r13
    147e:	9c f4       	brge	.+38     	; 0x14a6 <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
    1480:	f8 01       	movw	r30, r16
    1482:	01 90       	ld	r0, Z+
    1484:	00 20       	and	r0, r0
    1486:	e9 f7       	brne	.-6      	; 0x1482 <string_write_numchars+0x26>
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	e0 1b       	sub	r30, r16
    148c:	f1 0b       	sbc	r31, r17
    148e:	ce 17       	cp	r28, r30
    1490:	df 07       	cpc	r29, r31
    1492:	48 f4       	brcc	.+18     	; 0x14a6 <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
    1494:	f7 01       	movw	r30, r14
    1496:	81 91       	ld	r24, Z+
    1498:	7f 01       	movw	r14, r30
    149a:	0e 94 34 09 	call	0x1268	; 0x1268 <char_write>
        get_current_address();
    149e:	0e 94 c1 08 	call	0x1182	; 0x1182 <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    14a2:	21 96       	adiw	r28, 0x01	; 1
    14a4:	ea cf       	rjmp	.-44     	; 0x147a <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	08 95       	ret

000014b8 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	00 d0       	rcall	.+0      	; 0x14be <tag_check+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <tag_check+0x8>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <tag_check+0xa>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
    14c6:	26 e0       	ldi	r18, 0x06	; 6
    14c8:	ec e0       	ldi	r30, 0x0C	; 12
    14ca:	f1 e0       	ldi	r31, 0x01	; 1
    14cc:	de 01       	movw	r26, r28
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	01 90       	ld	r0, Z+
    14d2:	0d 92       	st	X+, r0
    14d4:	2a 95       	dec	r18
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <tag_check+0x18>
    14d8:	fe 01       	movw	r30, r28
    14da:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	dc 01       	movw	r26, r24
    14e2:	a2 0f       	add	r26, r18
    14e4:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
    14e6:	4c 91       	ld	r20, X
    14e8:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	26 30       	cpi	r18, 0x06	; 6
    14f0:	31 05       	cpc	r19, r1
    14f2:	b1 f7       	brne	.-20     	; 0x14e0 <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
    14f4:	66 e1       	ldi	r22, 0x16	; 22
    14f6:	73 e0       	ldi	r23, 0x03	; 3
    14f8:	ce 01       	movw	r24, r28
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <strcmp>
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	89 2b       	or	r24, r25
    1506:	11 f0       	breq	.+4      	; 0x150c <tag_check+0x54>
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
    150c:	c9 01       	movw	r24, r18
    150e:	26 96       	adiw	r28, 0x06	; 6
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	21 f0       	breq	.+8      	; 0x1530 <strtok_single+0x10>
    src = in_str;
    1528:	90 93 86 03 	sts	0x0386, r25
    152c:	80 93 85 03 	sts	0x0385, r24

  if (src == NULL)
    1530:	c0 91 85 03 	lds	r28, 0x0385
    1534:	d0 91 86 03 	lds	r29, 0x0386
    1538:	20 97       	sbiw	r28, 0x00	; 0
    153a:	69 f0       	breq	.+26     	; 0x1556 <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 88 14 	call	0x2910	; 0x2910 <strpbrk>
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	41 f0       	breq	.+16     	; 0x1556 <strtok_single+0x36>
    *p  = 0;
    1546:	fc 01       	movw	r30, r24
    1548:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
    154a:	f0 93 86 03 	sts	0x0386, r31
    154e:	e0 93 85 03 	sts	0x0385, r30
    1552:	ce 01       	movw	r24, r28
    1554:	02 c0       	rjmp	.+4      	; 0x155a <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <parse_nmea>:
#include <util/delay.h>
#include "gps.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the gps_data fields
int parse_nmea(char *in_sent, char *gps_data[13]){
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	8b 01       	movw	r16, r22

	int i = 0, j=0;
	char* token;

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
    156a:	63 e1       	ldi	r22, 0x13	; 19
    156c:	71 e0       	ldi	r23, 0x01	; 1
    156e:	0e 94 90 0a 	call	0x1520	; 0x1520 <strtok_single>
    1572:	ec 01       	movw	r28, r24
	strcpy(gps_data[0], token);
    1574:	bc 01       	movw	r22, r24
    1576:	d8 01       	movw	r26, r16
    1578:	8d 91       	ld	r24, X+
    157a:	9c 91       	ld	r25, X
    157c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <strcpy>

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    1580:	fe 01       	movw	r30, r28
    1582:	01 90       	ld	r0, Z+
    1584:	00 20       	and	r0, r0
    1586:	e9 f7       	brne	.-6      	; 0x1582 <parse_nmea+0x22>
    1588:	31 97       	sbiw	r30, 0x01	; 1
    158a:	ec 1b       	sub	r30, r28
    158c:	fd 0b       	sbc	r31, r29
    158e:	e0 31       	cpi	r30, 0x10	; 16
    1590:	f1 05       	cpc	r31, r1
    1592:	5c f4       	brge	.+22     	; 0x15aa <parse_nmea+0x4a>
	{
		gps_data[0][j] = '\0';
    1594:	d8 01       	movw	r26, r16
    1596:	8d 91       	ld	r24, X+
    1598:	9c 91       	ld	r25, X
    159a:	8e 0f       	add	r24, r30
    159c:	9f 1f       	adc	r25, r31
    159e:	dc 01       	movw	r26, r24
    15a0:	1c 92       	st	X, r1
	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
	strcpy(gps_data[0], token);

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    15a2:	31 96       	adiw	r30, 0x01	; 1
    15a4:	f4 cf       	rjmp	.-24     	; 0x158e <parse_nmea+0x2e>
    15a6:	0e 5f       	subi	r16, 0xFE	; 254
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		gps_data[0][j] = '\0';
	}

	//copy over the rest of the tokens
	while(token) 
    15aa:	cd 2b       	or	r28, r29
    15ac:	11 f1       	breq	.+68     	; 0x15f2 <parse_nmea+0x92>
	{
		i++;
		token = strtok_single(NULL, ",");
    15ae:	63 e1       	ldi	r22, 0x13	; 19
    15b0:	71 e0       	ldi	r23, 0x01	; 1
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 90 0a 	call	0x1520	; 0x1520 <strtok_single>
    15ba:	ec 01       	movw	r28, r24
		strcpy(gps_data[i], token);
    15bc:	bc 01       	movw	r22, r24
    15be:	f8 01       	movw	r30, r16
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <strcpy>
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    15c8:	fe 01       	movw	r30, r28
    15ca:	01 90       	ld	r0, Z+
    15cc:	00 20       	and	r0, r0
    15ce:	e9 f7       	brne	.-6      	; 0x15ca <parse_nmea+0x6a>
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	ec 1b       	sub	r30, r28
    15d4:	fd 0b       	sbc	r31, r29
    15d6:	e0 31       	cpi	r30, 0x10	; 16
    15d8:	f1 05       	cpc	r31, r1
    15da:	2c f7       	brge	.-54     	; 0x15a6 <parse_nmea+0x46>
		{
			gps_data[i][j] = '\0';
    15dc:	d8 01       	movw	r26, r16
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	8d 91       	ld	r24, X+
    15e2:	9c 91       	ld	r25, X
    15e4:	13 97       	sbiw	r26, 0x03	; 3
    15e6:	8e 0f       	add	r24, r30
    15e8:	9f 1f       	adc	r25, r31
    15ea:	dc 01       	movw	r26, r24
    15ec:	1c 92       	st	X, r1
	{
		i++;
		token = strtok_single(NULL, ",");
		strcpy(gps_data[i], token);
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    15ee:	31 96       	adiw	r30, 0x01	; 1
    15f0:	f2 cf       	rjmp	.-28     	; 0x15d6 <parse_nmea+0x76>
			gps_data[i][j] = '\0';
		}
	}

	return 0;
}
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	08 95       	ret

00001600 <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
    1600:	fc 01       	movw	r30, r24
    1602:	9f 01       	movw	r18, r30
    1604:	28 1b       	sub	r18, r24
    1606:	39 0b       	sbc	r19, r25
    1608:	26 17       	cp	r18, r22
    160a:	37 07       	cpc	r19, r23
    160c:	14 f4       	brge	.+4      	; 0x1612 <wipe_chars+0x12>
	{
		str[i] = '\0';
    160e:	11 92       	st	Z+, r1
    1610:	f8 cf       	rjmp	.-16     	; 0x1602 <wipe_chars+0x2>
	}
}
    1612:	08 95       	ret

00001614 <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	27 97       	sbiw	r28, 0x07	; 7
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	5c 01       	movw	r10, r24
    1638:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
    163a:	fc 01       	movw	r30, r24
    163c:	80 81       	ld	r24, Z
    163e:	99 27       	eor	r25, r25
    1640:	87 fd       	sbrc	r24, 7
    1642:	90 95       	com	r25
    1644:	c0 97       	sbiw	r24, 0x30	; 48
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	28 9f       	mul	r18, r24
    164a:	b0 01       	movw	r22, r0
    164c:	29 9f       	mul	r18, r25
    164e:	70 0d       	add	r23, r0
    1650:	11 24       	eor	r1, r1
    1652:	81 81       	ldd	r24, Z+1	; 0x01
    1654:	99 27       	eor	r25, r25
    1656:	87 fd       	sbrc	r24, 7
    1658:	90 95       	com	r25
    165a:	c0 97       	sbiw	r24, 0x30	; 48
    165c:	68 0f       	add	r22, r24
    165e:	79 1f       	adc	r23, r25
    1660:	88 27       	eor	r24, r24
    1662:	77 fd       	sbrc	r23, 7
    1664:	80 95       	com	r24
    1666:	98 2f       	mov	r25, r24
    1668:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__floatsisf>
    166c:	6b 01       	movw	r12, r22
    166e:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
    1670:	b5 01       	movw	r22, r10
    1672:	6e 5f       	subi	r22, 0xFE	; 254
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	47 e0       	ldi	r20, 0x07	; 7
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <strncpy>

	float minutes = strtod(temp,NULL);
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	0e 94 c1 12 	call	0x2582	; 0x2582 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e7       	ldi	r20, 0x70	; 112
    1694:	52 e4       	ldi	r21, 0x42	; 66
    1696:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
    16a6:	13 35       	cpi	r17, 0x53	; 83
    16a8:	09 f4       	brne	.+2      	; 0x16ac <lat2dec+0x98>
		result *= -1;
    16aa:	90 58       	subi	r25, 0x80	; 128

	return result;

}
    16ac:	27 96       	adiw	r28, 0x07	; 7
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	bf 90       	pop	r11
    16c8:	af 90       	pop	r10
    16ca:	08 95       	ret

000016cc <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	27 97       	sbiw	r28, 0x07	; 7
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	5c 01       	movw	r10, r24
    16f0:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
    16f2:	fc 01       	movw	r30, r24
    16f4:	80 81       	ld	r24, Z
    16f6:	99 27       	eor	r25, r25
    16f8:	87 fd       	sbrc	r24, 7
    16fa:	90 95       	com	r25
    16fc:	c0 97       	sbiw	r24, 0x30	; 48
    16fe:	24 e6       	ldi	r18, 0x64	; 100
    1700:	28 9f       	mul	r18, r24
    1702:	b0 01       	movw	r22, r0
    1704:	29 9f       	mul	r18, r25
    1706:	70 0d       	add	r23, r0
    1708:	11 24       	eor	r1, r1
    170a:	81 81       	ldd	r24, Z+1	; 0x01
    170c:	99 27       	eor	r25, r25
    170e:	87 fd       	sbrc	r24, 7
    1710:	90 95       	com	r25
    1712:	c0 97       	sbiw	r24, 0x30	; 48
    1714:	4a e0       	ldi	r20, 0x0A	; 10
    1716:	48 9f       	mul	r20, r24
    1718:	90 01       	movw	r18, r0
    171a:	49 9f       	mul	r20, r25
    171c:	30 0d       	add	r19, r0
    171e:	11 24       	eor	r1, r1
    1720:	62 0f       	add	r22, r18
    1722:	73 1f       	adc	r23, r19
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	99 27       	eor	r25, r25
    1728:	87 fd       	sbrc	r24, 7
    172a:	90 95       	com	r25
    172c:	c0 97       	sbiw	r24, 0x30	; 48
    172e:	68 0f       	add	r22, r24
    1730:	79 1f       	adc	r23, r25
    1732:	88 27       	eor	r24, r24
    1734:	77 fd       	sbrc	r23, 7
    1736:	80 95       	com	r24
    1738:	98 2f       	mov	r25, r24
    173a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__floatsisf>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[2],7);
    1742:	b5 01       	movw	r22, r10
    1744:	6e 5f       	subi	r22, 0xFE	; 254
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	47 e0       	ldi	r20, 0x07	; 7
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	0e 94 79 14 	call	0x28f2	; 0x28f2 <strncpy>

	float minutes = strtod(temp,NULL);
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	0e 94 c1 12 	call	0x2582	; 0x2582 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e7       	ldi	r20, 0x70	; 112
    1766:	52 e4       	ldi	r21, 0x42	; 66
    1768:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	c7 01       	movw	r24, r14
    1772:	b6 01       	movw	r22, r12
    1774:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
    1778:	17 35       	cpi	r17, 0x57	; 87
    177a:	09 f4       	brne	.+2      	; 0x177e <lon2dec+0xb2>
		result *= -1;
    177c:	90 58       	subi	r25, 0x80	; 128

	return result;
}
    177e:	27 96       	adiw	r28, 0x07	; 7
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	bf 90       	pop	r11
    179a:	af 90       	pop	r10
    179c:	08 95       	ret

0000179e <update_user_gps_data>:

//use the raw gps_data fields to populate the UserData struct
void update_user_gps_data(char *gps_data[13], UserData *user)
{
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	8c 01       	movw	r16, r24
    17ac:	eb 01       	movw	r28, r22
	wipe_chars(user->msg_type,8);
    17ae:	68 e0       	ldi	r22, 0x08	; 8
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 94 00 0b 	call	0x1600	; 0x1600 <wipe_chars>
	strcpy(user->msg_type,gps_data[0]);
    17b8:	d8 01       	movw	r26, r16
    17ba:	6d 91       	ld	r22, X+
    17bc:	7c 91       	ld	r23, X
    17be:	ce 01       	movw	r24, r28
    17c0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <strcpy>

	wipe_chars(user->utc_time,8);
    17c4:	68 e0       	ldi	r22, 0x08	; 8
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	ce 01       	movw	r24, r28
    17ca:	08 96       	adiw	r24, 0x08	; 8
    17cc:	0e 94 00 0b 	call	0x1600	; 0x1600 <wipe_chars>
	user->utc_time[0] = gps_data[1][0];
    17d0:	d8 01       	movw	r26, r16
    17d2:	12 96       	adiw	r26, 0x02	; 2
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	13 97       	sbiw	r26, 0x03	; 3
    17da:	80 81       	ld	r24, Z
    17dc:	88 87       	std	Y+8, r24	; 0x08
	user->utc_time[1] = gps_data[1][1];
    17de:	12 96       	adiw	r26, 0x02	; 2
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	13 97       	sbiw	r26, 0x03	; 3
    17e6:	81 81       	ldd	r24, Z+1	; 0x01
    17e8:	89 87       	std	Y+9, r24	; 0x09
	user->utc_time[2] = ':';
    17ea:	8a e3       	ldi	r24, 0x3A	; 58
    17ec:	8a 87       	std	Y+10, r24	; 0x0a
	user->utc_time[3] = gps_data[1][2];
    17ee:	12 96       	adiw	r26, 0x02	; 2
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	13 97       	sbiw	r26, 0x03	; 3
    17f6:	92 81       	ldd	r25, Z+2	; 0x02
    17f8:	9b 87       	std	Y+11, r25	; 0x0b
	user->utc_time[4] = gps_data[1][3];
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	9c 87       	std	Y+12, r25	; 0x0c
	user->utc_time[5] = ':';
    1806:	8d 87       	std	Y+13, r24	; 0x0d
	user->utc_time[6] = gps_data[1][4];
    1808:	12 96       	adiw	r26, 0x02	; 2
    180a:	ed 91       	ld	r30, X+
    180c:	fc 91       	ld	r31, X
    180e:	13 97       	sbiw	r26, 0x03	; 3
    1810:	84 81       	ldd	r24, Z+4	; 0x04
    1812:	8e 87       	std	Y+14, r24	; 0x0e
	user->utc_time[7] = gps_data[1][5];
    1814:	12 96       	adiw	r26, 0x02	; 2
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	13 97       	sbiw	r26, 0x03	; 3
    181c:	85 81       	ldd	r24, Z+5	; 0x05
    181e:	8f 87       	std	Y+15, r24	; 0x0f

	user->nrw = gps_data[2][0];
    1820:	14 96       	adiw	r26, 0x04	; 4
    1822:	ed 91       	ld	r30, X+
    1824:	fc 91       	ld	r31, X
    1826:	15 97       	sbiw	r26, 0x05	; 5
    1828:	80 81       	ld	r24, Z
    182a:	88 8b       	std	Y+16, r24	; 0x10

	user->lat = 0;
    182c:	19 8a       	std	Y+17, r1	; 0x11
    182e:	1a 8a       	std	Y+18, r1	; 0x12
    1830:	1b 8a       	std	Y+19, r1	; 0x13
    1832:	1c 8a       	std	Y+20, r1	; 0x14
	user->lat = lat2dec(gps_data[3], gps_data[4][0]);
    1834:	18 96       	adiw	r26, 0x08	; 8
    1836:	ed 91       	ld	r30, X+
    1838:	fc 91       	ld	r31, X
    183a:	19 97       	sbiw	r26, 0x09	; 9
    183c:	60 81       	ld	r22, Z
    183e:	16 96       	adiw	r26, 0x06	; 6
    1840:	8d 91       	ld	r24, X+
    1842:	9c 91       	ld	r25, X
    1844:	17 97       	sbiw	r26, 0x07	; 7
    1846:	0e 94 0a 0b 	call	0x1614	; 0x1614 <lat2dec>
    184a:	69 8b       	std	Y+17, r22	; 0x11
    184c:	7a 8b       	std	Y+18, r23	; 0x12
    184e:	8b 8b       	std	Y+19, r24	; 0x13
    1850:	9c 8b       	std	Y+20, r25	; 0x14

	user->lon = 0;
    1852:	1d 8a       	std	Y+21, r1	; 0x15
    1854:	1e 8a       	std	Y+22, r1	; 0x16
    1856:	1f 8a       	std	Y+23, r1	; 0x17
    1858:	18 8e       	std	Y+24, r1	; 0x18
	user->lon = lon2dec(gps_data[5], gps_data[6][0]);
    185a:	d8 01       	movw	r26, r16
    185c:	1c 96       	adiw	r26, 0x0c	; 12
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	1d 97       	sbiw	r26, 0x0d	; 13
    1864:	60 81       	ld	r22, Z
    1866:	1a 96       	adiw	r26, 0x0a	; 10
    1868:	8d 91       	ld	r24, X+
    186a:	9c 91       	ld	r25, X
    186c:	1b 97       	sbiw	r26, 0x0b	; 11
    186e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <lon2dec>
    1872:	6d 8b       	std	Y+21, r22	; 0x15
    1874:	7e 8b       	std	Y+22, r23	; 0x16
    1876:	8f 8b       	std	Y+23, r24	; 0x17
    1878:	98 8f       	std	Y+24, r25	; 0x18

	user->speed = 0;
    187a:	19 8e       	std	Y+25, r1	; 0x19
    187c:	1a 8e       	std	Y+26, r1	; 0x1a
    187e:	1b 8e       	std	Y+27, r1	; 0x1b
    1880:	1c 8e       	std	Y+28, r1	; 0x1c
	user->speed = (float)strtod(gps_data[7],NULL);
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	f8 01       	movw	r30, r16
    1888:	86 85       	ldd	r24, Z+14	; 0x0e
    188a:	97 85       	ldd	r25, Z+15	; 0x0f
    188c:	0e 94 c1 12 	call	0x2582	; 0x2582 <strtod>
    1890:	69 8f       	std	Y+25, r22	; 0x19
    1892:	7a 8f       	std	Y+26, r23	; 0x1a
    1894:	8b 8f       	std	Y+27, r24	; 0x1b
    1896:	9c 8f       	std	Y+28, r25	; 0x1c

	user->course = 0;
    1898:	1d 8e       	std	Y+29, r1	; 0x1d
    189a:	1e 8e       	std	Y+30, r1	; 0x1e
    189c:	1f 8e       	std	Y+31, r1	; 0x1f
    189e:	18 a2       	std	Y+32, r1	; 0x20
	user->course = (float)strtod(gps_data[8],NULL);
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	d8 01       	movw	r26, r16
    18a6:	50 96       	adiw	r26, 0x10	; 16
    18a8:	8d 91       	ld	r24, X+
    18aa:	9c 91       	ld	r25, X
    18ac:	51 97       	sbiw	r26, 0x11	; 17
    18ae:	0e 94 c1 12 	call	0x2582	; 0x2582 <strtod>
    18b2:	6d 8f       	std	Y+29, r22	; 0x1d
    18b4:	7e 8f       	std	Y+30, r23	; 0x1e
    18b6:	8f 8f       	std	Y+31, r24	; 0x1f
    18b8:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(user->date,8);
    18ba:	68 e0       	ldi	r22, 0x08	; 8
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	ce 01       	movw	r24, r28
    18c0:	81 96       	adiw	r24, 0x21	; 33
    18c2:	0e 94 00 0b 	call	0x1600	; 0x1600 <wipe_chars>
	user->date[0] = gps_data[9][2];
    18c6:	d8 01       	movw	r26, r16
    18c8:	52 96       	adiw	r26, 0x12	; 18
    18ca:	ed 91       	ld	r30, X+
    18cc:	fc 91       	ld	r31, X
    18ce:	53 97       	sbiw	r26, 0x13	; 19
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	89 a3       	std	Y+33, r24	; 0x21
	user->date[1] = gps_data[9][3];
    18d4:	52 96       	adiw	r26, 0x12	; 18
    18d6:	ed 91       	ld	r30, X+
    18d8:	fc 91       	ld	r31, X
    18da:	53 97       	sbiw	r26, 0x13	; 19
    18dc:	83 81       	ldd	r24, Z+3	; 0x03
    18de:	8a a3       	std	Y+34, r24	; 0x22
	user->date[2] = '/';
    18e0:	8f e2       	ldi	r24, 0x2F	; 47
    18e2:	8b a3       	std	Y+35, r24	; 0x23
	user->date[3] = gps_data[9][0];
    18e4:	52 96       	adiw	r26, 0x12	; 18
    18e6:	ed 91       	ld	r30, X+
    18e8:	fc 91       	ld	r31, X
    18ea:	53 97       	sbiw	r26, 0x13	; 19
    18ec:	90 81       	ld	r25, Z
    18ee:	9c a3       	std	Y+36, r25	; 0x24
	user->date[4] = gps_data[9][1];
    18f0:	52 96       	adiw	r26, 0x12	; 18
    18f2:	ed 91       	ld	r30, X+
    18f4:	fc 91       	ld	r31, X
    18f6:	53 97       	sbiw	r26, 0x13	; 19
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	9d a3       	std	Y+37, r25	; 0x25
	user->date[5] = '/';
    18fc:	8e a3       	std	Y+38, r24	; 0x26
	user->date[6] = gps_data[9][4];
    18fe:	52 96       	adiw	r26, 0x12	; 18
    1900:	ed 91       	ld	r30, X+
    1902:	fc 91       	ld	r31, X
    1904:	53 97       	sbiw	r26, 0x13	; 19
    1906:	84 81       	ldd	r24, Z+4	; 0x04
    1908:	8f a3       	std	Y+39, r24	; 0x27
	user->date[7] = gps_data[9][5];
    190a:	52 96       	adiw	r26, 0x12	; 18
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	53 97       	sbiw	r26, 0x13	; 19
    1912:	85 81       	ldd	r24, Z+5	; 0x05
    1914:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(user->mag_var,8);
    1916:	7e 01       	movw	r14, r28
    1918:	b9 e2       	ldi	r27, 0x29	; 41
    191a:	eb 0e       	add	r14, r27
    191c:	f1 1c       	adc	r15, r1
    191e:	68 e0       	ldi	r22, 0x08	; 8
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	c7 01       	movw	r24, r14
    1924:	0e 94 00 0b 	call	0x1600	; 0x1600 <wipe_chars>
	strcpy(user->mag_var,gps_data[10]);
    1928:	f8 01       	movw	r30, r16
    192a:	64 89       	ldd	r22, Z+20	; 0x14
    192c:	75 89       	ldd	r23, Z+21	; 0x15
    192e:	c7 01       	movw	r24, r14
    1930:	0e 94 72 14 	call	0x28e4	; 0x28e4 <strcpy>

	user->mode = gps_data[12][0];
    1934:	d8 01       	movw	r26, r16
    1936:	58 96       	adiw	r26, 0x18	; 24
    1938:	ed 91       	ld	r30, X+
    193a:	fc 91       	ld	r31, X
    193c:	59 97       	sbiw	r26, 0x19	; 25
    193e:	80 81       	ld	r24, Z
    1940:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(user->checksum,3);
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	ce 01       	movw	r24, r28
    1948:	c2 96       	adiw	r24, 0x32	; 50
    194a:	0e 94 00 0b 	call	0x1600	; 0x1600 <wipe_chars>
	user->checksum[0] = gps_data[12][1];
    194e:	d8 01       	movw	r26, r16
    1950:	58 96       	adiw	r26, 0x18	; 24
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	59 97       	sbiw	r26, 0x19	; 25
    1958:	81 81       	ldd	r24, Z+1	; 0x01
    195a:	8a ab       	std	Y+50, r24	; 0x32
	user->checksum[1] = gps_data[12][2];
    195c:	58 96       	adiw	r26, 0x18	; 24
    195e:	ed 91       	ld	r30, X+
    1960:	fc 91       	ld	r31, X
    1962:	59 97       	sbiw	r26, 0x19	; 25
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	8b ab       	std	Y+51, r24	; 0x33
	user->checksum[2] = gps_data[12][3];
    1968:	58 96       	adiw	r26, 0x18	; 24
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	59 97       	sbiw	r26, 0x19	; 25
    1970:	83 81       	ldd	r24, Z+3	; 0x03
    1972:	8c ab       	std	Y+52, r24	; 0x34
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	08 95       	ret

00001982 <my_eeprom_read_int>:
//---- EEPROM Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1982:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__eerd_byte_m1284p>
    return (temp_num);
}
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	08 95       	ret

0000198a <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    198a:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__eerd_byte_m1284p>

0000198e <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    198e:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__eerd_dword_m1284p>

00001992 <my_eeprom_read_string>:
    1992:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__eerd_block_m1284p>

00001996 <main>:
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	1f 92       	push	r1
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	0e 94 af 01 	call	0x35e	; 0x35e <prepare_device>
    19a4:	0b e0       	ldi	r16, 0x0B	; 11
    19a6:	14 e0       	ldi	r17, 0x04	; 4
    19a8:	80 e1       	ldi	r24, 0x10	; 16
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
    19b0:	f8 01       	movw	r30, r16
    19b2:	81 93       	st	Z+, r24
    19b4:	91 93       	st	Z+, r25
    19b6:	8f 01       	movw	r16, r30
    19b8:	f4 e0       	ldi	r31, 0x04	; 4
    19ba:	05 32       	cpi	r16, 0x25	; 37
    19bc:	1f 07       	cpc	r17, r31
    19be:	a1 f7       	brne	.-24     	; 0x19a8 <main+0x12>
    19c0:	85 e3       	ldi	r24, 0x35	; 53
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 9a 11 	call	0x2334	; 0x2334 <malloc>
    19c8:	90 93 8a 03 	sts	0x038A, r25
    19cc:	80 93 89 03 	sts	0x0389, r24
    19d0:	82 e9       	ldi	r24, 0x92	; 146
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    19d8:	0e 94 c1 01 	call	0x382	; 0x382 <database_load>
    19dc:	2f e3       	ldi	r18, 0x3F	; 63
    19de:	8d e0       	ldi	r24, 0x0D	; 13
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	21 50       	subi	r18, 0x01	; 1
    19e4:	80 40       	sbci	r24, 0x00	; 0
    19e6:	90 40       	sbci	r25, 0x00	; 0
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <main+0x4c>
    19ea:	00 c0       	rjmp	.+0      	; 0x19ec <main+0x56>
    19ec:	00 00       	nop
    19ee:	02 e0       	ldi	r16, 0x02	; 2
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	e0 90 24 03 	lds	r14, 0x0324
    19f6:	f0 90 25 03 	lds	r15, 0x0325
    19fa:	e1 e0       	ldi	r30, 0x01	; 1
    19fc:	ee 16       	cp	r14, r30
    19fe:	f1 04       	cpc	r15, r1
    1a00:	e1 f0       	breq	.+56     	; 0x1a3a <main+0xa4>
    1a02:	f2 e0       	ldi	r31, 0x02	; 2
    1a04:	ef 16       	cp	r14, r31
    1a06:	f1 04       	cpc	r15, r1
    1a08:	89 f0       	breq	.+34     	; 0x1a2c <main+0x96>
    1a0a:	ef 28       	or	r14, r15
    1a0c:	91 f7       	brne	.-28     	; 0x19f2 <main+0x5c>
    1a0e:	80 91 81 03 	lds	r24, 0x0381
    1a12:	90 91 82 03 	lds	r25, 0x0382
    1a16:	18 16       	cp	r1, r24
    1a18:	19 06       	cpc	r1, r25
    1a1a:	44 f0       	brlt	.+16     	; 0x1a2c <main+0x96>
    1a1c:	80 91 24 03 	lds	r24, 0x0324
    1a20:	90 91 25 03 	lds	r25, 0x0325
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <main+0x94>
    1a28:	49 c0       	rjmp	.+146    	; 0x1abc <main+0x126>
    1a2a:	e3 cf       	rjmp	.-58     	; 0x19f2 <main+0x5c>
    1a2c:	0e 94 a9 01 	call	0x352	; 0x352 <enable_gps>
    1a30:	0e 94 cc 03 	call	0x798	; 0x798 <print_gps_data>
    1a34:	0e 94 9c 04 	call	0x938	; 0x938 <print_raw_gps_data>
    1a38:	dc cf       	rjmp	.-72     	; 0x19f2 <main+0x5c>
    1a3a:	0e 94 02 01 	call	0x204	; 0x204 <disable_gps>
    1a3e:	80 91 20 03 	lds	r24, 0x0320
    1a42:	90 91 21 03 	lds	r25, 0x0321
    1a46:	89 2b       	or	r24, r25
    1a48:	a1 f4       	brne	.+40     	; 0x1a72 <main+0xdc>
    1a4a:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    1a4e:	86 ea       	ldi	r24, 0xA6	; 166
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    1a56:	f0 92 21 03 	sts	0x0321, r15
    1a5a:	e0 92 20 03 	sts	0x0320, r14
    1a5e:	10 92 1f 03 	sts	0x031F, r1
    1a62:	10 92 1e 03 	sts	0x031E, r1
    1a66:	10 92 23 03 	sts	0x0323, r1
    1a6a:	10 92 22 03 	sts	0x0322, r1
    1a6e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <database_free>
    1a72:	90 91 80 03 	lds	r25, 0x0380
    1a76:	80 91 7f 03 	lds	r24, 0x037F
    1a7a:	98 17       	cp	r25, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <main+0xea>
    1a7e:	43 c0       	rjmp	.+134    	; 0x1b06 <main+0x170>
    1a80:	10 92 78 03 	sts	0x0378, r1
    1a84:	10 92 79 03 	sts	0x0379, r1
    1a88:	10 92 7a 03 	sts	0x037A, r1
    1a8c:	10 92 7b 03 	sts	0x037B, r1
    1a90:	0e 94 ff 02 	call	0x5fe	; 0x5fe <getChar>
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <detectSerialEnd>
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	89 2b       	or	r24, r25
    1a9e:	19 f1       	breq	.+70     	; 0x1ae6 <main+0x150>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 1f 03 	call	0x63e	; 0x63e <terminate_serial>
    1aa8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <check_database_integrity>
    1aac:	80 91 1e 03 	lds	r24, 0x031E
    1ab0:	90 91 1f 03 	lds	r25, 0x031F
    1ab4:	89 2b       	or	r24, r25
    1ab6:	39 f0       	breq	.+14     	; 0x1ac6 <main+0x130>
    1ab8:	0e 94 16 05 	call	0xa2c	; 0xa2c <wipe_eeprom>
    1abc:	10 93 25 03 	sts	0x0325, r17
    1ac0:	00 93 24 03 	sts	0x0324, r16
    1ac4:	96 cf       	rjmp	.-212    	; 0x19f2 <main+0x5c>
    1ac6:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_init>
    1aca:	8f eb       	ldi	r24, 0xBF	; 191
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	0e 94 68 09 	call	0x12d0	; 0x12d0 <string_write>
    1ad2:	2f e3       	ldi	r18, 0x3F	; 63
    1ad4:	8d e0       	ldi	r24, 0x0D	; 13
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	21 50       	subi	r18, 0x01	; 1
    1ada:	80 40       	sbci	r24, 0x00	; 0
    1adc:	90 40       	sbci	r25, 0x00	; 0
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <main+0x142>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <main+0x14c>
    1ae2:	00 00       	nop
    1ae4:	86 cf       	rjmp	.-244    	; 0x19f2 <main+0x5c>
    1ae6:	80 91 22 03 	lds	r24, 0x0322
    1aea:	90 91 23 03 	lds	r25, 0x0323
    1aee:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__eewr_byte_m1284p>
    1af2:	80 91 22 03 	lds	r24, 0x0322
    1af6:	90 91 23 03 	lds	r25, 0x0323
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	90 93 23 03 	sts	0x0323, r25
    1b00:	80 93 22 03 	sts	0x0322, r24
    1b04:	76 cf       	rjmp	.-276    	; 0x19f2 <main+0x5c>
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	60 91 78 03 	lds	r22, 0x0378
    1b12:	70 91 79 03 	lds	r23, 0x0379
    1b16:	80 91 7a 03 	lds	r24, 0x037A
    1b1a:	90 91 7b 03 	lds	r25, 0x037B
    1b1e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__addsf3>
    1b22:	60 93 78 03 	sts	0x0378, r22
    1b26:	70 93 79 03 	sts	0x0379, r23
    1b2a:	80 93 7a 03 	sts	0x037A, r24
    1b2e:	90 93 7b 03 	sts	0x037B, r25
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e5       	ldi	r19, 0x50	; 80
    1b36:	43 e4       	ldi	r20, 0x43	; 67
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__gesf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <main+0x1ae>
    1b42:	57 cf       	rjmp	.-338    	; 0x19f2 <main+0x5c>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 1f 03 	call	0x63e	; 0x63e <terminate_serial>
    1b4c:	60 e2       	ldi	r22, 0x20	; 32
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 5d 03 	call	0x6ba	; 0x6ba <print_eeprom_contents>
    1b58:	af cf       	rjmp	.-162    	; 0x1ab8 <main+0x122>

00001b5a <__subsf3>:
    1b5a:	50 58       	subi	r21, 0x80	; 128

00001b5c <__addsf3>:
    1b5c:	bb 27       	eor	r27, r27
    1b5e:	aa 27       	eor	r26, r26
    1b60:	0e d0       	rcall	.+28     	; 0x1b7e <__addsf3x>
    1b62:	89 c1       	rjmp	.+786    	; 0x1e76 <__fp_round>
    1b64:	7a d1       	rcall	.+756    	; 0x1e5a <__fp_pscA>
    1b66:	30 f0       	brcs	.+12     	; 0x1b74 <__addsf3+0x18>
    1b68:	7f d1       	rcall	.+766    	; 0x1e68 <__fp_pscB>
    1b6a:	20 f0       	brcs	.+8      	; 0x1b74 <__addsf3+0x18>
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <__addsf3+0x1e>
    1b6e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <__addsf3+0x1a>
    1b72:	1e f4       	brtc	.+6      	; 0x1b7a <__addsf3+0x1e>
    1b74:	6f c1       	rjmp	.+734    	; 0x1e54 <__fp_nan>
    1b76:	0e f4       	brtc	.+2      	; 0x1b7a <__addsf3+0x1e>
    1b78:	e0 95       	com	r30
    1b7a:	e7 fb       	bst	r30, 7
    1b7c:	3c c1       	rjmp	.+632    	; 0x1df6 <__fp_inf>

00001b7e <__addsf3x>:
    1b7e:	e9 2f       	mov	r30, r25
    1b80:	8b d1       	rcall	.+790    	; 0x1e98 <__fp_split3>
    1b82:	80 f3       	brcs	.-32     	; 0x1b64 <__addsf3+0x8>
    1b84:	ba 17       	cp	r27, r26
    1b86:	62 07       	cpc	r22, r18
    1b88:	73 07       	cpc	r23, r19
    1b8a:	84 07       	cpc	r24, r20
    1b8c:	95 07       	cpc	r25, r21
    1b8e:	18 f0       	brcs	.+6      	; 0x1b96 <__addsf3x+0x18>
    1b90:	71 f4       	brne	.+28     	; 0x1bae <__addsf3x+0x30>
    1b92:	9e f5       	brtc	.+102    	; 0x1bfa <__addsf3x+0x7c>
    1b94:	ba c1       	rjmp	.+884    	; 0x1f0a <__fp_zero>
    1b96:	0e f4       	brtc	.+2      	; 0x1b9a <__addsf3x+0x1c>
    1b98:	e0 95       	com	r30
    1b9a:	0b 2e       	mov	r0, r27
    1b9c:	ba 2f       	mov	r27, r26
    1b9e:	a0 2d       	mov	r26, r0
    1ba0:	0b 01       	movw	r0, r22
    1ba2:	b9 01       	movw	r22, r18
    1ba4:	90 01       	movw	r18, r0
    1ba6:	0c 01       	movw	r0, r24
    1ba8:	ca 01       	movw	r24, r20
    1baa:	a0 01       	movw	r20, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	ff 27       	eor	r31, r31
    1bb0:	59 1b       	sub	r21, r25
    1bb2:	99 f0       	breq	.+38     	; 0x1bda <__addsf3x+0x5c>
    1bb4:	59 3f       	cpi	r21, 0xF9	; 249
    1bb6:	50 f4       	brcc	.+20     	; 0x1bcc <__addsf3x+0x4e>
    1bb8:	50 3e       	cpi	r21, 0xE0	; 224
    1bba:	68 f1       	brcs	.+90     	; 0x1c16 <__addsf3x+0x98>
    1bbc:	1a 16       	cp	r1, r26
    1bbe:	f0 40       	sbci	r31, 0x00	; 0
    1bc0:	a2 2f       	mov	r26, r18
    1bc2:	23 2f       	mov	r18, r19
    1bc4:	34 2f       	mov	r19, r20
    1bc6:	44 27       	eor	r20, r20
    1bc8:	58 5f       	subi	r21, 0xF8	; 248
    1bca:	f3 cf       	rjmp	.-26     	; 0x1bb2 <__addsf3x+0x34>
    1bcc:	46 95       	lsr	r20
    1bce:	37 95       	ror	r19
    1bd0:	27 95       	ror	r18
    1bd2:	a7 95       	ror	r26
    1bd4:	f0 40       	sbci	r31, 0x00	; 0
    1bd6:	53 95       	inc	r21
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__addsf3x+0x4e>
    1bda:	7e f4       	brtc	.+30     	; 0x1bfa <__addsf3x+0x7c>
    1bdc:	1f 16       	cp	r1, r31
    1bde:	ba 0b       	sbc	r27, r26
    1be0:	62 0b       	sbc	r22, r18
    1be2:	73 0b       	sbc	r23, r19
    1be4:	84 0b       	sbc	r24, r20
    1be6:	ba f0       	brmi	.+46     	; 0x1c16 <__addsf3x+0x98>
    1be8:	91 50       	subi	r25, 0x01	; 1
    1bea:	a1 f0       	breq	.+40     	; 0x1c14 <__addsf3x+0x96>
    1bec:	ff 0f       	add	r31, r31
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	c2 f7       	brpl	.-16     	; 0x1be8 <__addsf3x+0x6a>
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <__addsf3x+0x98>
    1bfa:	ba 0f       	add	r27, r26
    1bfc:	62 1f       	adc	r22, r18
    1bfe:	73 1f       	adc	r23, r19
    1c00:	84 1f       	adc	r24, r20
    1c02:	48 f4       	brcc	.+18     	; 0x1c16 <__addsf3x+0x98>
    1c04:	87 95       	ror	r24
    1c06:	77 95       	ror	r23
    1c08:	67 95       	ror	r22
    1c0a:	b7 95       	ror	r27
    1c0c:	f7 95       	ror	r31
    1c0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <__addsf3x+0x96>
    1c12:	b3 cf       	rjmp	.-154    	; 0x1b7a <__addsf3+0x1e>
    1c14:	93 95       	inc	r25
    1c16:	88 0f       	add	r24, r24
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <__addsf3x+0x9e>
    1c1a:	99 27       	eor	r25, r25
    1c1c:	ee 0f       	add	r30, r30
    1c1e:	97 95       	ror	r25
    1c20:	87 95       	ror	r24
    1c22:	08 95       	ret

00001c24 <__divsf3>:
    1c24:	0c d0       	rcall	.+24     	; 0x1c3e <__divsf3x>
    1c26:	27 c1       	rjmp	.+590    	; 0x1e76 <__fp_round>
    1c28:	1f d1       	rcall	.+574    	; 0x1e68 <__fp_pscB>
    1c2a:	40 f0       	brcs	.+16     	; 0x1c3c <__divsf3+0x18>
    1c2c:	16 d1       	rcall	.+556    	; 0x1e5a <__fp_pscA>
    1c2e:	30 f0       	brcs	.+12     	; 0x1c3c <__divsf3+0x18>
    1c30:	21 f4       	brne	.+8      	; 0x1c3a <__divsf3+0x16>
    1c32:	5f 3f       	cpi	r21, 0xFF	; 255
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <__divsf3+0x18>
    1c36:	df c0       	rjmp	.+446    	; 0x1df6 <__fp_inf>
    1c38:	51 11       	cpse	r21, r1
    1c3a:	68 c1       	rjmp	.+720    	; 0x1f0c <__fp_szero>
    1c3c:	0b c1       	rjmp	.+534    	; 0x1e54 <__fp_nan>

00001c3e <__divsf3x>:
    1c3e:	2c d1       	rcall	.+600    	; 0x1e98 <__fp_split3>
    1c40:	98 f3       	brcs	.-26     	; 0x1c28 <__divsf3+0x4>

00001c42 <__divsf3_pse>:
    1c42:	99 23       	and	r25, r25
    1c44:	c9 f3       	breq	.-14     	; 0x1c38 <__divsf3+0x14>
    1c46:	55 23       	and	r21, r21
    1c48:	b1 f3       	breq	.-20     	; 0x1c36 <__divsf3+0x12>
    1c4a:	95 1b       	sub	r25, r21
    1c4c:	55 0b       	sbc	r21, r21
    1c4e:	bb 27       	eor	r27, r27
    1c50:	aa 27       	eor	r26, r26
    1c52:	62 17       	cp	r22, r18
    1c54:	73 07       	cpc	r23, r19
    1c56:	84 07       	cpc	r24, r20
    1c58:	38 f0       	brcs	.+14     	; 0x1c68 <__divsf3_pse+0x26>
    1c5a:	9f 5f       	subi	r25, 0xFF	; 255
    1c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5e:	22 0f       	add	r18, r18
    1c60:	33 1f       	adc	r19, r19
    1c62:	44 1f       	adc	r20, r20
    1c64:	aa 1f       	adc	r26, r26
    1c66:	a9 f3       	breq	.-22     	; 0x1c52 <__divsf3_pse+0x10>
    1c68:	33 d0       	rcall	.+102    	; 0x1cd0 <__divsf3_pse+0x8e>
    1c6a:	0e 2e       	mov	r0, r30
    1c6c:	3a f0       	brmi	.+14     	; 0x1c7c <__divsf3_pse+0x3a>
    1c6e:	e0 e8       	ldi	r30, 0x80	; 128
    1c70:	30 d0       	rcall	.+96     	; 0x1cd2 <__divsf3_pse+0x90>
    1c72:	91 50       	subi	r25, 0x01	; 1
    1c74:	50 40       	sbci	r21, 0x00	; 0
    1c76:	e6 95       	lsr	r30
    1c78:	00 1c       	adc	r0, r0
    1c7a:	ca f7       	brpl	.-14     	; 0x1c6e <__divsf3_pse+0x2c>
    1c7c:	29 d0       	rcall	.+82     	; 0x1cd0 <__divsf3_pse+0x8e>
    1c7e:	fe 2f       	mov	r31, r30
    1c80:	27 d0       	rcall	.+78     	; 0x1cd0 <__divsf3_pse+0x8e>
    1c82:	66 0f       	add	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	bb 1f       	adc	r27, r27
    1c8a:	26 17       	cp	r18, r22
    1c8c:	37 07       	cpc	r19, r23
    1c8e:	48 07       	cpc	r20, r24
    1c90:	ab 07       	cpc	r26, r27
    1c92:	b0 e8       	ldi	r27, 0x80	; 128
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <__divsf3_pse+0x56>
    1c96:	bb 0b       	sbc	r27, r27
    1c98:	80 2d       	mov	r24, r0
    1c9a:	bf 01       	movw	r22, r30
    1c9c:	ff 27       	eor	r31, r31
    1c9e:	93 58       	subi	r25, 0x83	; 131
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	2a f0       	brmi	.+10     	; 0x1cae <__divsf3_pse+0x6c>
    1ca4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca6:	51 05       	cpc	r21, r1
    1ca8:	68 f0       	brcs	.+26     	; 0x1cc4 <__divsf3_pse+0x82>
    1caa:	a5 c0       	rjmp	.+330    	; 0x1df6 <__fp_inf>
    1cac:	2f c1       	rjmp	.+606    	; 0x1f0c <__fp_szero>
    1cae:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb0:	ec f3       	brlt	.-6      	; 0x1cac <__divsf3_pse+0x6a>
    1cb2:	98 3e       	cpi	r25, 0xE8	; 232
    1cb4:	dc f3       	brlt	.-10     	; 0x1cac <__divsf3_pse+0x6a>
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	f7 95       	ror	r31
    1cc0:	9f 5f       	subi	r25, 0xFF	; 255
    1cc2:	c9 f7       	brne	.-14     	; 0x1cb6 <__divsf3_pse+0x74>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	91 1d       	adc	r25, r1
    1cc8:	96 95       	lsr	r25
    1cca:	87 95       	ror	r24
    1ccc:	97 f9       	bld	r25, 7
    1cce:	08 95       	ret
    1cd0:	e1 e0       	ldi	r30, 0x01	; 1
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	62 17       	cp	r22, r18
    1cdc:	73 07       	cpc	r23, r19
    1cde:	84 07       	cpc	r24, r20
    1ce0:	ba 07       	cpc	r27, r26
    1ce2:	20 f0       	brcs	.+8      	; 0x1cec <__divsf3_pse+0xaa>
    1ce4:	62 1b       	sub	r22, r18
    1ce6:	73 0b       	sbc	r23, r19
    1ce8:	84 0b       	sbc	r24, r20
    1cea:	ba 0b       	sbc	r27, r26
    1cec:	ee 1f       	adc	r30, r30
    1cee:	88 f7       	brcc	.-30     	; 0x1cd2 <__divsf3_pse+0x90>
    1cf0:	e0 95       	com	r30
    1cf2:	08 95       	ret

00001cf4 <__fixsfsi>:
    1cf4:	04 d0       	rcall	.+8      	; 0x1cfe <__fixunssfsi>
    1cf6:	68 94       	set
    1cf8:	b1 11       	cpse	r27, r1
    1cfa:	08 c1       	rjmp	.+528    	; 0x1f0c <__fp_szero>
    1cfc:	08 95       	ret

00001cfe <__fixunssfsi>:
    1cfe:	d4 d0       	rcall	.+424    	; 0x1ea8 <__fp_splitA>
    1d00:	88 f0       	brcs	.+34     	; 0x1d24 <__fixunssfsi+0x26>
    1d02:	9f 57       	subi	r25, 0x7F	; 127
    1d04:	90 f0       	brcs	.+36     	; 0x1d2a <__fixunssfsi+0x2c>
    1d06:	b9 2f       	mov	r27, r25
    1d08:	99 27       	eor	r25, r25
    1d0a:	b7 51       	subi	r27, 0x17	; 23
    1d0c:	a0 f0       	brcs	.+40     	; 0x1d36 <__fixunssfsi+0x38>
    1d0e:	d1 f0       	breq	.+52     	; 0x1d44 <__fixunssfsi+0x46>
    1d10:	66 0f       	add	r22, r22
    1d12:	77 1f       	adc	r23, r23
    1d14:	88 1f       	adc	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	1a f0       	brmi	.+6      	; 0x1d20 <__fixunssfsi+0x22>
    1d1a:	ba 95       	dec	r27
    1d1c:	c9 f7       	brne	.-14     	; 0x1d10 <__fixunssfsi+0x12>
    1d1e:	12 c0       	rjmp	.+36     	; 0x1d44 <__fixunssfsi+0x46>
    1d20:	b1 30       	cpi	r27, 0x01	; 1
    1d22:	81 f0       	breq	.+32     	; 0x1d44 <__fixunssfsi+0x46>
    1d24:	f2 d0       	rcall	.+484    	; 0x1f0a <__fp_zero>
    1d26:	b1 e0       	ldi	r27, 0x01	; 1
    1d28:	08 95       	ret
    1d2a:	ef c0       	rjmp	.+478    	; 0x1f0a <__fp_zero>
    1d2c:	67 2f       	mov	r22, r23
    1d2e:	78 2f       	mov	r23, r24
    1d30:	88 27       	eor	r24, r24
    1d32:	b8 5f       	subi	r27, 0xF8	; 248
    1d34:	39 f0       	breq	.+14     	; 0x1d44 <__fixunssfsi+0x46>
    1d36:	b9 3f       	cpi	r27, 0xF9	; 249
    1d38:	cc f3       	brlt	.-14     	; 0x1d2c <__fixunssfsi+0x2e>
    1d3a:	86 95       	lsr	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b3 95       	inc	r27
    1d42:	d9 f7       	brne	.-10     	; 0x1d3a <__fixunssfsi+0x3c>
    1d44:	3e f4       	brtc	.+14     	; 0x1d54 <__fixunssfsi+0x56>
    1d46:	90 95       	com	r25
    1d48:	80 95       	com	r24
    1d4a:	70 95       	com	r23
    1d4c:	61 95       	neg	r22
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	8f 4f       	sbci	r24, 0xFF	; 255
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	08 95       	ret

00001d56 <__floatunsisf>:
    1d56:	e8 94       	clt
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <__floatsisf+0x12>

00001d5a <__floatsisf>:
    1d5a:	97 fb       	bst	r25, 7
    1d5c:	3e f4       	brtc	.+14     	; 0x1d6c <__floatsisf+0x12>
    1d5e:	90 95       	com	r25
    1d60:	80 95       	com	r24
    1d62:	70 95       	com	r23
    1d64:	61 95       	neg	r22
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	99 23       	and	r25, r25
    1d6e:	a9 f0       	breq	.+42     	; 0x1d9a <__floatsisf+0x40>
    1d70:	f9 2f       	mov	r31, r25
    1d72:	96 e9       	ldi	r25, 0x96	; 150
    1d74:	bb 27       	eor	r27, r27
    1d76:	93 95       	inc	r25
    1d78:	f6 95       	lsr	r31
    1d7a:	87 95       	ror	r24
    1d7c:	77 95       	ror	r23
    1d7e:	67 95       	ror	r22
    1d80:	b7 95       	ror	r27
    1d82:	f1 11       	cpse	r31, r1
    1d84:	f8 cf       	rjmp	.-16     	; 0x1d76 <__floatsisf+0x1c>
    1d86:	fa f4       	brpl	.+62     	; 0x1dc6 <__floatsisf+0x6c>
    1d88:	bb 0f       	add	r27, r27
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <__floatsisf+0x36>
    1d8c:	60 ff       	sbrs	r22, 0
    1d8e:	1b c0       	rjmp	.+54     	; 0x1dc6 <__floatsisf+0x6c>
    1d90:	6f 5f       	subi	r22, 0xFF	; 255
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	8f 4f       	sbci	r24, 0xFF	; 255
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	16 c0       	rjmp	.+44     	; 0x1dc6 <__floatsisf+0x6c>
    1d9a:	88 23       	and	r24, r24
    1d9c:	11 f0       	breq	.+4      	; 0x1da2 <__floatsisf+0x48>
    1d9e:	96 e9       	ldi	r25, 0x96	; 150
    1da0:	11 c0       	rjmp	.+34     	; 0x1dc4 <__floatsisf+0x6a>
    1da2:	77 23       	and	r23, r23
    1da4:	21 f0       	breq	.+8      	; 0x1dae <__floatsisf+0x54>
    1da6:	9e e8       	ldi	r25, 0x8E	; 142
    1da8:	87 2f       	mov	r24, r23
    1daa:	76 2f       	mov	r23, r22
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <__floatsisf+0x5e>
    1dae:	66 23       	and	r22, r22
    1db0:	71 f0       	breq	.+28     	; 0x1dce <__floatsisf+0x74>
    1db2:	96 e8       	ldi	r25, 0x86	; 134
    1db4:	86 2f       	mov	r24, r22
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	2a f0       	brmi	.+10     	; 0x1dc6 <__floatsisf+0x6c>
    1dbc:	9a 95       	dec	r25
    1dbe:	66 0f       	add	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	da f7       	brpl	.-10     	; 0x1dbc <__floatsisf+0x62>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	96 95       	lsr	r25
    1dca:	87 95       	ror	r24
    1dcc:	97 f9       	bld	r25, 7
    1dce:	08 95       	ret

00001dd0 <floor>:
    1dd0:	85 d0       	rcall	.+266    	; 0x1edc <__fp_trunc>
    1dd2:	80 f0       	brcs	.+32     	; 0x1df4 <floor+0x24>
    1dd4:	9f 37       	cpi	r25, 0x7F	; 127
    1dd6:	40 f4       	brcc	.+16     	; 0x1de8 <floor+0x18>
    1dd8:	91 11       	cpse	r25, r1
    1dda:	0e f0       	brts	.+2      	; 0x1dde <floor+0xe>
    1ddc:	97 c0       	rjmp	.+302    	; 0x1f0c <__fp_szero>
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	80 e8       	ldi	r24, 0x80	; 128
    1de4:	9f eb       	ldi	r25, 0xBF	; 191
    1de6:	08 95       	ret
    1de8:	26 f4       	brtc	.+8      	; 0x1df2 <floor+0x22>
    1dea:	1b 16       	cp	r1, r27
    1dec:	61 1d       	adc	r22, r1
    1dee:	71 1d       	adc	r23, r1
    1df0:	81 1d       	adc	r24, r1
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <__fp_mintl>
    1df4:	21 c0       	rjmp	.+66     	; 0x1e38 <__fp_mpack>

00001df6 <__fp_inf>:
    1df6:	97 f9       	bld	r25, 7
    1df8:	9f 67       	ori	r25, 0x7F	; 127
    1dfa:	80 e8       	ldi	r24, 0x80	; 128
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	08 95       	ret

00001e02 <__fp_mintl>:
    1e02:	88 23       	and	r24, r24
    1e04:	71 f4       	brne	.+28     	; 0x1e22 <__fp_mintl+0x20>
    1e06:	77 23       	and	r23, r23
    1e08:	21 f0       	breq	.+8      	; 0x1e12 <__fp_mintl+0x10>
    1e0a:	98 50       	subi	r25, 0x08	; 8
    1e0c:	87 2b       	or	r24, r23
    1e0e:	76 2f       	mov	r23, r22
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <__fp_mintl+0x1e>
    1e12:	66 23       	and	r22, r22
    1e14:	11 f4       	brne	.+4      	; 0x1e1a <__fp_mintl+0x18>
    1e16:	99 27       	eor	r25, r25
    1e18:	0d c0       	rjmp	.+26     	; 0x1e34 <__fp_mintl+0x32>
    1e1a:	90 51       	subi	r25, 0x10	; 16
    1e1c:	86 2b       	or	r24, r22
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	2a f0       	brmi	.+10     	; 0x1e2e <__fp_mintl+0x2c>
    1e24:	9a 95       	dec	r25
    1e26:	66 0f       	add	r22, r22
    1e28:	77 1f       	adc	r23, r23
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	da f7       	brpl	.-10     	; 0x1e24 <__fp_mintl+0x22>
    1e2e:	88 0f       	add	r24, r24
    1e30:	96 95       	lsr	r25
    1e32:	87 95       	ror	r24
    1e34:	97 f9       	bld	r25, 7
    1e36:	08 95       	ret

00001e38 <__fp_mpack>:
    1e38:	9f 3f       	cpi	r25, 0xFF	; 255
    1e3a:	31 f0       	breq	.+12     	; 0x1e48 <__fp_mpack_finite+0xc>

00001e3c <__fp_mpack_finite>:
    1e3c:	91 50       	subi	r25, 0x01	; 1
    1e3e:	20 f4       	brcc	.+8      	; 0x1e48 <__fp_mpack_finite+0xc>
    1e40:	87 95       	ror	r24
    1e42:	77 95       	ror	r23
    1e44:	67 95       	ror	r22
    1e46:	b7 95       	ror	r27
    1e48:	88 0f       	add	r24, r24
    1e4a:	91 1d       	adc	r25, r1
    1e4c:	96 95       	lsr	r25
    1e4e:	87 95       	ror	r24
    1e50:	97 f9       	bld	r25, 7
    1e52:	08 95       	ret

00001e54 <__fp_nan>:
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	80 ec       	ldi	r24, 0xC0	; 192
    1e58:	08 95       	ret

00001e5a <__fp_pscA>:
    1e5a:	00 24       	eor	r0, r0
    1e5c:	0a 94       	dec	r0
    1e5e:	16 16       	cp	r1, r22
    1e60:	17 06       	cpc	r1, r23
    1e62:	18 06       	cpc	r1, r24
    1e64:	09 06       	cpc	r0, r25
    1e66:	08 95       	ret

00001e68 <__fp_pscB>:
    1e68:	00 24       	eor	r0, r0
    1e6a:	0a 94       	dec	r0
    1e6c:	12 16       	cp	r1, r18
    1e6e:	13 06       	cpc	r1, r19
    1e70:	14 06       	cpc	r1, r20
    1e72:	05 06       	cpc	r0, r21
    1e74:	08 95       	ret

00001e76 <__fp_round>:
    1e76:	09 2e       	mov	r0, r25
    1e78:	03 94       	inc	r0
    1e7a:	00 0c       	add	r0, r0
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <__fp_round+0xc>
    1e7e:	88 23       	and	r24, r24
    1e80:	52 f0       	brmi	.+20     	; 0x1e96 <__fp_round+0x20>
    1e82:	bb 0f       	add	r27, r27
    1e84:	40 f4       	brcc	.+16     	; 0x1e96 <__fp_round+0x20>
    1e86:	bf 2b       	or	r27, r31
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <__fp_round+0x18>
    1e8a:	60 ff       	sbrs	r22, 0
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <__fp_round+0x20>
    1e8e:	6f 5f       	subi	r22, 0xFF	; 255
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	8f 4f       	sbci	r24, 0xFF	; 255
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	08 95       	ret

00001e98 <__fp_split3>:
    1e98:	57 fd       	sbrc	r21, 7
    1e9a:	90 58       	subi	r25, 0x80	; 128
    1e9c:	44 0f       	add	r20, r20
    1e9e:	55 1f       	adc	r21, r21
    1ea0:	59 f0       	breq	.+22     	; 0x1eb8 <__fp_splitA+0x10>
    1ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea4:	71 f0       	breq	.+28     	; 0x1ec2 <__fp_splitA+0x1a>
    1ea6:	47 95       	ror	r20

00001ea8 <__fp_splitA>:
    1ea8:	88 0f       	add	r24, r24
    1eaa:	97 fb       	bst	r25, 7
    1eac:	99 1f       	adc	r25, r25
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <__fp_splitA+0x20>
    1eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb2:	79 f0       	breq	.+30     	; 0x1ed2 <__fp_splitA+0x2a>
    1eb4:	87 95       	ror	r24
    1eb6:	08 95       	ret
    1eb8:	12 16       	cp	r1, r18
    1eba:	13 06       	cpc	r1, r19
    1ebc:	14 06       	cpc	r1, r20
    1ebe:	55 1f       	adc	r21, r21
    1ec0:	f2 cf       	rjmp	.-28     	; 0x1ea6 <__fp_split3+0xe>
    1ec2:	46 95       	lsr	r20
    1ec4:	f1 df       	rcall	.-30     	; 0x1ea8 <__fp_splitA>
    1ec6:	08 c0       	rjmp	.+16     	; 0x1ed8 <__fp_splitA+0x30>
    1ec8:	16 16       	cp	r1, r22
    1eca:	17 06       	cpc	r1, r23
    1ecc:	18 06       	cpc	r1, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	f1 cf       	rjmp	.-30     	; 0x1eb4 <__fp_splitA+0xc>
    1ed2:	86 95       	lsr	r24
    1ed4:	71 05       	cpc	r23, r1
    1ed6:	61 05       	cpc	r22, r1
    1ed8:	08 94       	sec
    1eda:	08 95       	ret

00001edc <__fp_trunc>:
    1edc:	e5 df       	rcall	.-54     	; 0x1ea8 <__fp_splitA>
    1ede:	a0 f0       	brcs	.+40     	; 0x1f08 <__fp_trunc+0x2c>
    1ee0:	be e7       	ldi	r27, 0x7E	; 126
    1ee2:	b9 17       	cp	r27, r25
    1ee4:	88 f4       	brcc	.+34     	; 0x1f08 <__fp_trunc+0x2c>
    1ee6:	bb 27       	eor	r27, r27
    1ee8:	9f 38       	cpi	r25, 0x8F	; 143
    1eea:	60 f4       	brcc	.+24     	; 0x1f04 <__fp_trunc+0x28>
    1eec:	16 16       	cp	r1, r22
    1eee:	b1 1d       	adc	r27, r1
    1ef0:	67 2f       	mov	r22, r23
    1ef2:	78 2f       	mov	r23, r24
    1ef4:	88 27       	eor	r24, r24
    1ef6:	98 5f       	subi	r25, 0xF8	; 248
    1ef8:	f7 cf       	rjmp	.-18     	; 0x1ee8 <__fp_trunc+0xc>
    1efa:	86 95       	lsr	r24
    1efc:	77 95       	ror	r23
    1efe:	67 95       	ror	r22
    1f00:	b1 1d       	adc	r27, r1
    1f02:	93 95       	inc	r25
    1f04:	96 39       	cpi	r25, 0x96	; 150
    1f06:	c8 f3       	brcs	.-14     	; 0x1efa <__fp_trunc+0x1e>
    1f08:	08 95       	ret

00001f0a <__fp_zero>:
    1f0a:	e8 94       	clt

00001f0c <__fp_szero>:
    1f0c:	bb 27       	eor	r27, r27
    1f0e:	66 27       	eor	r22, r22
    1f10:	77 27       	eor	r23, r23
    1f12:	cb 01       	movw	r24, r22
    1f14:	97 f9       	bld	r25, 7
    1f16:	08 95       	ret

00001f18 <__gesf2>:
    1f18:	81 d1       	rcall	.+770    	; 0x221c <__fp_cmp>
    1f1a:	08 f4       	brcc	.+2      	; 0x1f1e <__gesf2+0x6>
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	08 95       	ret

00001f20 <log10>:
    1f20:	0a d0       	rcall	.+20     	; 0x1f36 <log>
    1f22:	29 ed       	ldi	r18, 0xD9	; 217
    1f24:	3b e5       	ldi	r19, 0x5B	; 91
    1f26:	4e ed       	ldi	r20, 0xDE	; 222
    1f28:	5e e3       	ldi	r21, 0x3E	; 62
    1f2a:	78 c0       	rjmp	.+240    	; 0x201c <__mulsf3>
    1f2c:	0e f0       	brts	.+2      	; 0x1f30 <log10+0x10>
    1f2e:	84 cf       	rjmp	.-248    	; 0x1e38 <__fp_mpack>
    1f30:	91 cf       	rjmp	.-222    	; 0x1e54 <__fp_nan>
    1f32:	68 94       	set
    1f34:	60 cf       	rjmp	.-320    	; 0x1df6 <__fp_inf>

00001f36 <log>:
    1f36:	b8 df       	rcall	.-144    	; 0x1ea8 <__fp_splitA>
    1f38:	c8 f3       	brcs	.-14     	; 0x1f2c <log10+0xc>
    1f3a:	99 23       	and	r25, r25
    1f3c:	d1 f3       	breq	.-12     	; 0x1f32 <log10+0x12>
    1f3e:	c6 f3       	brts	.-16     	; 0x1f30 <log10+0x10>
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	1f 93       	push	r17
    1f46:	0f 93       	push	r16
    1f48:	ff 92       	push	r15
    1f4a:	c9 2f       	mov	r28, r25
    1f4c:	dd 27       	eor	r29, r29
    1f4e:	88 23       	and	r24, r24
    1f50:	2a f0       	brmi	.+10     	; 0x1f5c <log+0x26>
    1f52:	21 97       	sbiw	r28, 0x01	; 1
    1f54:	66 0f       	add	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	88 1f       	adc	r24, r24
    1f5a:	da f7       	brpl	.-10     	; 0x1f52 <log+0x1c>
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f eb       	ldi	r21, 0xBF	; 191
    1f64:	9f e3       	ldi	r25, 0x3F	; 63
    1f66:	88 39       	cpi	r24, 0x98	; 152
    1f68:	20 f0       	brcs	.+8      	; 0x1f72 <log+0x3c>
    1f6a:	80 3e       	cpi	r24, 0xE0	; 224
    1f6c:	30 f0       	brcs	.+12     	; 0x1f7a <log+0x44>
    1f6e:	21 96       	adiw	r28, 0x01	; 1
    1f70:	8f 77       	andi	r24, 0x7F	; 127
    1f72:	f4 dd       	rcall	.-1048   	; 0x1b5c <__addsf3>
    1f74:	e4 eb       	ldi	r30, 0xB4	; 180
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <log+0x4a>
    1f7a:	f0 dd       	rcall	.-1056   	; 0x1b5c <__addsf3>
    1f7c:	e1 ee       	ldi	r30, 0xE1	; 225
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	71 d1       	rcall	.+738    	; 0x2264 <__fp_powser>
    1f82:	8b 01       	movw	r16, r22
    1f84:	be 01       	movw	r22, r28
    1f86:	ec 01       	movw	r28, r24
    1f88:	fb 2e       	mov	r15, r27
    1f8a:	6f 57       	subi	r22, 0x7F	; 127
    1f8c:	71 09       	sbc	r23, r1
    1f8e:	75 95       	asr	r23
    1f90:	77 1f       	adc	r23, r23
    1f92:	88 0b       	sbc	r24, r24
    1f94:	99 0b       	sbc	r25, r25
    1f96:	e1 de       	rcall	.-574    	; 0x1d5a <__floatsisf>
    1f98:	28 e1       	ldi	r18, 0x18	; 24
    1f9a:	32 e7       	ldi	r19, 0x72	; 114
    1f9c:	41 e3       	ldi	r20, 0x31	; 49
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	49 d0       	rcall	.+146    	; 0x2034 <__mulsf3x>
    1fa2:	af 2d       	mov	r26, r15
    1fa4:	98 01       	movw	r18, r16
    1fa6:	ae 01       	movw	r20, r28
    1fa8:	ff 90       	pop	r15
    1faa:	0f 91       	pop	r16
    1fac:	1f 91       	pop	r17
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	e5 dd       	rcall	.-1078   	; 0x1b7e <__addsf3x>
    1fb4:	60 cf       	rjmp	.-320    	; 0x1e76 <__fp_round>

00001fb6 <modf>:
    1fb6:	fa 01       	movw	r30, r20
    1fb8:	dc 01       	movw	r26, r24
    1fba:	aa 0f       	add	r26, r26
    1fbc:	bb 1f       	adc	r27, r27
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	bf 57       	subi	r27, 0x7F	; 127
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <modf+0x1a>
    1fc6:	22 27       	eor	r18, r18
    1fc8:	33 27       	eor	r19, r19
    1fca:	44 27       	eor	r20, r20
    1fcc:	50 78       	andi	r21, 0x80	; 128
    1fce:	1f c0       	rjmp	.+62     	; 0x200e <modf+0x58>
    1fd0:	b7 51       	subi	r27, 0x17	; 23
    1fd2:	88 f4       	brcc	.+34     	; 0x1ff6 <modf+0x40>
    1fd4:	ab 2f       	mov	r26, r27
    1fd6:	00 24       	eor	r0, r0
    1fd8:	46 95       	lsr	r20
    1fda:	37 95       	ror	r19
    1fdc:	27 95       	ror	r18
    1fde:	01 1c       	adc	r0, r1
    1fe0:	a3 95       	inc	r26
    1fe2:	d2 f3       	brmi	.-12     	; 0x1fd8 <modf+0x22>
    1fe4:	00 20       	and	r0, r0
    1fe6:	69 f0       	breq	.+26     	; 0x2002 <modf+0x4c>
    1fe8:	22 0f       	add	r18, r18
    1fea:	33 1f       	adc	r19, r19
    1fec:	44 1f       	adc	r20, r20
    1fee:	b3 95       	inc	r27
    1ff0:	da f3       	brmi	.-10     	; 0x1fe8 <modf+0x32>
    1ff2:	0d d0       	rcall	.+26     	; 0x200e <modf+0x58>
    1ff4:	b2 cd       	rjmp	.-1180   	; 0x1b5a <__subsf3>
    1ff6:	61 30       	cpi	r22, 0x01	; 1
    1ff8:	71 05       	cpc	r23, r1
    1ffa:	a0 e8       	ldi	r26, 0x80	; 128
    1ffc:	8a 07       	cpc	r24, r26
    1ffe:	b9 46       	sbci	r27, 0x69	; 105
    2000:	30 f4       	brcc	.+12     	; 0x200e <modf+0x58>
    2002:	9b 01       	movw	r18, r22
    2004:	ac 01       	movw	r20, r24
    2006:	66 27       	eor	r22, r22
    2008:	77 27       	eor	r23, r23
    200a:	88 27       	eor	r24, r24
    200c:	90 78       	andi	r25, 0x80	; 128
    200e:	30 96       	adiw	r30, 0x00	; 0
    2010:	21 f0       	breq	.+8      	; 0x201a <modf+0x64>
    2012:	20 83       	st	Z, r18
    2014:	31 83       	std	Z+1, r19	; 0x01
    2016:	42 83       	std	Z+2, r20	; 0x02
    2018:	53 83       	std	Z+3, r21	; 0x03
    201a:	08 95       	ret

0000201c <__mulsf3>:
    201c:	0b d0       	rcall	.+22     	; 0x2034 <__mulsf3x>
    201e:	2b cf       	rjmp	.-426    	; 0x1e76 <__fp_round>
    2020:	1c df       	rcall	.-456    	; 0x1e5a <__fp_pscA>
    2022:	28 f0       	brcs	.+10     	; 0x202e <__mulsf3+0x12>
    2024:	21 df       	rcall	.-446    	; 0x1e68 <__fp_pscB>
    2026:	18 f0       	brcs	.+6      	; 0x202e <__mulsf3+0x12>
    2028:	95 23       	and	r25, r21
    202a:	09 f0       	breq	.+2      	; 0x202e <__mulsf3+0x12>
    202c:	e4 ce       	rjmp	.-568    	; 0x1df6 <__fp_inf>
    202e:	12 cf       	rjmp	.-476    	; 0x1e54 <__fp_nan>
    2030:	11 24       	eor	r1, r1
    2032:	6c cf       	rjmp	.-296    	; 0x1f0c <__fp_szero>

00002034 <__mulsf3x>:
    2034:	31 df       	rcall	.-414    	; 0x1e98 <__fp_split3>
    2036:	a0 f3       	brcs	.-24     	; 0x2020 <__mulsf3+0x4>

00002038 <__mulsf3_pse>:
    2038:	95 9f       	mul	r25, r21
    203a:	d1 f3       	breq	.-12     	; 0x2030 <__mulsf3+0x14>
    203c:	95 0f       	add	r25, r21
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	55 1f       	adc	r21, r21
    2042:	62 9f       	mul	r22, r18
    2044:	f0 01       	movw	r30, r0
    2046:	72 9f       	mul	r23, r18
    2048:	bb 27       	eor	r27, r27
    204a:	f0 0d       	add	r31, r0
    204c:	b1 1d       	adc	r27, r1
    204e:	63 9f       	mul	r22, r19
    2050:	aa 27       	eor	r26, r26
    2052:	f0 0d       	add	r31, r0
    2054:	b1 1d       	adc	r27, r1
    2056:	aa 1f       	adc	r26, r26
    2058:	64 9f       	mul	r22, r20
    205a:	66 27       	eor	r22, r22
    205c:	b0 0d       	add	r27, r0
    205e:	a1 1d       	adc	r26, r1
    2060:	66 1f       	adc	r22, r22
    2062:	82 9f       	mul	r24, r18
    2064:	22 27       	eor	r18, r18
    2066:	b0 0d       	add	r27, r0
    2068:	a1 1d       	adc	r26, r1
    206a:	62 1f       	adc	r22, r18
    206c:	73 9f       	mul	r23, r19
    206e:	b0 0d       	add	r27, r0
    2070:	a1 1d       	adc	r26, r1
    2072:	62 1f       	adc	r22, r18
    2074:	83 9f       	mul	r24, r19
    2076:	a0 0d       	add	r26, r0
    2078:	61 1d       	adc	r22, r1
    207a:	22 1f       	adc	r18, r18
    207c:	74 9f       	mul	r23, r20
    207e:	33 27       	eor	r19, r19
    2080:	a0 0d       	add	r26, r0
    2082:	61 1d       	adc	r22, r1
    2084:	23 1f       	adc	r18, r19
    2086:	84 9f       	mul	r24, r20
    2088:	60 0d       	add	r22, r0
    208a:	21 1d       	adc	r18, r1
    208c:	82 2f       	mov	r24, r18
    208e:	76 2f       	mov	r23, r22
    2090:	6a 2f       	mov	r22, r26
    2092:	11 24       	eor	r1, r1
    2094:	9f 57       	subi	r25, 0x7F	; 127
    2096:	50 40       	sbci	r21, 0x00	; 0
    2098:	8a f0       	brmi	.+34     	; 0x20bc <__mulsf3_pse+0x84>
    209a:	e1 f0       	breq	.+56     	; 0x20d4 <__mulsf3_pse+0x9c>
    209c:	88 23       	and	r24, r24
    209e:	4a f0       	brmi	.+18     	; 0x20b2 <__mulsf3_pse+0x7a>
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	bb 1f       	adc	r27, r27
    20a6:	66 1f       	adc	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	91 50       	subi	r25, 0x01	; 1
    20ae:	50 40       	sbci	r21, 0x00	; 0
    20b0:	a9 f7       	brne	.-22     	; 0x209c <__mulsf3_pse+0x64>
    20b2:	9e 3f       	cpi	r25, 0xFE	; 254
    20b4:	51 05       	cpc	r21, r1
    20b6:	70 f0       	brcs	.+28     	; 0x20d4 <__mulsf3_pse+0x9c>
    20b8:	9e ce       	rjmp	.-708    	; 0x1df6 <__fp_inf>
    20ba:	28 cf       	rjmp	.-432    	; 0x1f0c <__fp_szero>
    20bc:	5f 3f       	cpi	r21, 0xFF	; 255
    20be:	ec f3       	brlt	.-6      	; 0x20ba <__mulsf3_pse+0x82>
    20c0:	98 3e       	cpi	r25, 0xE8	; 232
    20c2:	dc f3       	brlt	.-10     	; 0x20ba <__mulsf3_pse+0x82>
    20c4:	86 95       	lsr	r24
    20c6:	77 95       	ror	r23
    20c8:	67 95       	ror	r22
    20ca:	b7 95       	ror	r27
    20cc:	f7 95       	ror	r31
    20ce:	e7 95       	ror	r30
    20d0:	9f 5f       	subi	r25, 0xFF	; 255
    20d2:	c1 f7       	brne	.-16     	; 0x20c4 <__mulsf3_pse+0x8c>
    20d4:	fe 2b       	or	r31, r30
    20d6:	88 0f       	add	r24, r24
    20d8:	91 1d       	adc	r25, r1
    20da:	96 95       	lsr	r25
    20dc:	87 95       	ror	r24
    20de:	97 f9       	bld	r25, 7
    20e0:	08 95       	ret

000020e2 <pow>:
    20e2:	fa 01       	movw	r30, r20
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	30 96       	adiw	r30, 0x00	; 0
    20ea:	21 05       	cpc	r18, r1
    20ec:	31 05       	cpc	r19, r1
    20ee:	99 f1       	breq	.+102    	; 0x2156 <pow+0x74>
    20f0:	61 15       	cp	r22, r1
    20f2:	71 05       	cpc	r23, r1
    20f4:	61 f4       	brne	.+24     	; 0x210e <pow+0x2c>
    20f6:	80 38       	cpi	r24, 0x80	; 128
    20f8:	bf e3       	ldi	r27, 0x3F	; 63
    20fa:	9b 07       	cpc	r25, r27
    20fc:	49 f1       	breq	.+82     	; 0x2150 <pow+0x6e>
    20fe:	68 94       	set
    2100:	90 38       	cpi	r25, 0x80	; 128
    2102:	81 05       	cpc	r24, r1
    2104:	61 f0       	breq	.+24     	; 0x211e <pow+0x3c>
    2106:	80 38       	cpi	r24, 0x80	; 128
    2108:	bf ef       	ldi	r27, 0xFF	; 255
    210a:	9b 07       	cpc	r25, r27
    210c:	41 f0       	breq	.+16     	; 0x211e <pow+0x3c>
    210e:	99 23       	and	r25, r25
    2110:	42 f5       	brpl	.+80     	; 0x2162 <pow+0x80>
    2112:	ff 3f       	cpi	r31, 0xFF	; 255
    2114:	e1 05       	cpc	r30, r1
    2116:	31 05       	cpc	r19, r1
    2118:	21 05       	cpc	r18, r1
    211a:	11 f1       	breq	.+68     	; 0x2160 <pow+0x7e>
    211c:	e8 94       	clt
    211e:	08 94       	sec
    2120:	e7 95       	ror	r30
    2122:	d9 01       	movw	r26, r18
    2124:	aa 23       	and	r26, r26
    2126:	29 f4       	brne	.+10     	; 0x2132 <pow+0x50>
    2128:	ab 2f       	mov	r26, r27
    212a:	be 2f       	mov	r27, r30
    212c:	f8 5f       	subi	r31, 0xF8	; 248
    212e:	d0 f3       	brcs	.-12     	; 0x2124 <pow+0x42>
    2130:	10 c0       	rjmp	.+32     	; 0x2152 <pow+0x70>
    2132:	ff 5f       	subi	r31, 0xFF	; 255
    2134:	70 f4       	brcc	.+28     	; 0x2152 <pow+0x70>
    2136:	a6 95       	lsr	r26
    2138:	e0 f7       	brcc	.-8      	; 0x2132 <pow+0x50>
    213a:	f7 39       	cpi	r31, 0x97	; 151
    213c:	50 f0       	brcs	.+20     	; 0x2152 <pow+0x70>
    213e:	19 f0       	breq	.+6      	; 0x2146 <pow+0x64>
    2140:	ff 3a       	cpi	r31, 0xAF	; 175
    2142:	38 f4       	brcc	.+14     	; 0x2152 <pow+0x70>
    2144:	9f 77       	andi	r25, 0x7F	; 127
    2146:	9f 93       	push	r25
    2148:	0c d0       	rcall	.+24     	; 0x2162 <pow+0x80>
    214a:	0f 90       	pop	r0
    214c:	07 fc       	sbrc	r0, 7
    214e:	90 58       	subi	r25, 0x80	; 128
    2150:	08 95       	ret
    2152:	3e f0       	brts	.+14     	; 0x2162 <pow+0x80>
    2154:	7f ce       	rjmp	.-770    	; 0x1e54 <__fp_nan>
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	80 e8       	ldi	r24, 0x80	; 128
    215c:	9f e3       	ldi	r25, 0x3F	; 63
    215e:	08 95       	ret
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	9f 77       	andi	r25, 0x7F	; 127
    2164:	5f 93       	push	r21
    2166:	4f 93       	push	r20
    2168:	3f 93       	push	r19
    216a:	2f 93       	push	r18
    216c:	e4 de       	rcall	.-568    	; 0x1f36 <log>
    216e:	2f 91       	pop	r18
    2170:	3f 91       	pop	r19
    2172:	4f 91       	pop	r20
    2174:	5f 91       	pop	r21
    2176:	52 df       	rcall	.-348    	; 0x201c <__mulsf3>
    2178:	25 c0       	rjmp	.+74     	; 0x21c4 <exp>

0000217a <round>:
    217a:	96 de       	rcall	.-724    	; 0x1ea8 <__fp_splitA>
    217c:	e0 f0       	brcs	.+56     	; 0x21b6 <round+0x3c>
    217e:	9e 37       	cpi	r25, 0x7E	; 126
    2180:	d8 f0       	brcs	.+54     	; 0x21b8 <round+0x3e>
    2182:	96 39       	cpi	r25, 0x96	; 150
    2184:	b8 f4       	brcc	.+46     	; 0x21b4 <round+0x3a>
    2186:	9e 38       	cpi	r25, 0x8E	; 142
    2188:	48 f4       	brcc	.+18     	; 0x219c <round+0x22>
    218a:	67 2f       	mov	r22, r23
    218c:	78 2f       	mov	r23, r24
    218e:	88 27       	eor	r24, r24
    2190:	98 5f       	subi	r25, 0xF8	; 248
    2192:	f9 cf       	rjmp	.-14     	; 0x2186 <round+0xc>
    2194:	86 95       	lsr	r24
    2196:	77 95       	ror	r23
    2198:	67 95       	ror	r22
    219a:	93 95       	inc	r25
    219c:	95 39       	cpi	r25, 0x95	; 149
    219e:	d0 f3       	brcs	.-12     	; 0x2194 <round+0x1a>
    21a0:	b6 2f       	mov	r27, r22
    21a2:	b1 70       	andi	r27, 0x01	; 1
    21a4:	6b 0f       	add	r22, r27
    21a6:	71 1d       	adc	r23, r1
    21a8:	81 1d       	adc	r24, r1
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <round+0x3a>
    21ac:	87 95       	ror	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	93 95       	inc	r25
    21b4:	26 ce       	rjmp	.-948    	; 0x1e02 <__fp_mintl>
    21b6:	40 ce       	rjmp	.-896    	; 0x1e38 <__fp_mpack>
    21b8:	a9 ce       	rjmp	.-686    	; 0x1f0c <__fp_szero>
    21ba:	19 f4       	brne	.+6      	; 0x21c2 <round+0x48>
    21bc:	0e f0       	brts	.+2      	; 0x21c0 <round+0x46>
    21be:	1b ce       	rjmp	.-970    	; 0x1df6 <__fp_inf>
    21c0:	a4 ce       	rjmp	.-696    	; 0x1f0a <__fp_zero>
    21c2:	48 ce       	rjmp	.-880    	; 0x1e54 <__fp_nan>

000021c4 <exp>:
    21c4:	71 de       	rcall	.-798    	; 0x1ea8 <__fp_splitA>
    21c6:	c8 f3       	brcs	.-14     	; 0x21ba <round+0x40>
    21c8:	96 38       	cpi	r25, 0x86	; 134
    21ca:	c0 f7       	brcc	.-16     	; 0x21bc <round+0x42>
    21cc:	07 f8       	bld	r0, 7
    21ce:	0f 92       	push	r0
    21d0:	e8 94       	clt
    21d2:	2b e3       	ldi	r18, 0x3B	; 59
    21d4:	3a ea       	ldi	r19, 0xAA	; 170
    21d6:	48 eb       	ldi	r20, 0xB8	; 184
    21d8:	5f e7       	ldi	r21, 0x7F	; 127
    21da:	2e df       	rcall	.-420    	; 0x2038 <__mulsf3_pse>
    21dc:	0f 92       	push	r0
    21de:	0f 92       	push	r0
    21e0:	0f 92       	push	r0
    21e2:	4d b7       	in	r20, 0x3d	; 61
    21e4:	5e b7       	in	r21, 0x3e	; 62
    21e6:	0f 92       	push	r0
    21e8:	e6 de       	rcall	.-564    	; 0x1fb6 <modf>
    21ea:	ee e0       	ldi	r30, 0x0E	; 14
    21ec:	f1 e0       	ldi	r31, 0x01	; 1
    21ee:	3a d0       	rcall	.+116    	; 0x2264 <__fp_powser>
    21f0:	4f 91       	pop	r20
    21f2:	5f 91       	pop	r21
    21f4:	ef 91       	pop	r30
    21f6:	ff 91       	pop	r31
    21f8:	e5 95       	asr	r30
    21fa:	ee 1f       	adc	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	49 f0       	breq	.+18     	; 0x2212 <exp+0x4e>
    2200:	fe 57       	subi	r31, 0x7E	; 126
    2202:	e0 68       	ori	r30, 0x80	; 128
    2204:	44 27       	eor	r20, r20
    2206:	ee 0f       	add	r30, r30
    2208:	44 1f       	adc	r20, r20
    220a:	fa 95       	dec	r31
    220c:	e1 f7       	brne	.-8      	; 0x2206 <exp+0x42>
    220e:	41 95       	neg	r20
    2210:	55 0b       	sbc	r21, r21
    2212:	56 d0       	rcall	.+172    	; 0x22c0 <ldexp>
    2214:	0f 90       	pop	r0
    2216:	07 fe       	sbrs	r0, 7
    2218:	4a c0       	rjmp	.+148    	; 0x22ae <inverse>
    221a:	08 95       	ret

0000221c <__fp_cmp>:
    221c:	99 0f       	add	r25, r25
    221e:	00 08       	sbc	r0, r0
    2220:	55 0f       	add	r21, r21
    2222:	aa 0b       	sbc	r26, r26
    2224:	e0 e8       	ldi	r30, 0x80	; 128
    2226:	fe ef       	ldi	r31, 0xFE	; 254
    2228:	16 16       	cp	r1, r22
    222a:	17 06       	cpc	r1, r23
    222c:	e8 07       	cpc	r30, r24
    222e:	f9 07       	cpc	r31, r25
    2230:	c0 f0       	brcs	.+48     	; 0x2262 <__fp_cmp+0x46>
    2232:	12 16       	cp	r1, r18
    2234:	13 06       	cpc	r1, r19
    2236:	e4 07       	cpc	r30, r20
    2238:	f5 07       	cpc	r31, r21
    223a:	98 f0       	brcs	.+38     	; 0x2262 <__fp_cmp+0x46>
    223c:	62 1b       	sub	r22, r18
    223e:	73 0b       	sbc	r23, r19
    2240:	84 0b       	sbc	r24, r20
    2242:	95 0b       	sbc	r25, r21
    2244:	39 f4       	brne	.+14     	; 0x2254 <__fp_cmp+0x38>
    2246:	0a 26       	eor	r0, r26
    2248:	61 f0       	breq	.+24     	; 0x2262 <__fp_cmp+0x46>
    224a:	23 2b       	or	r18, r19
    224c:	24 2b       	or	r18, r20
    224e:	25 2b       	or	r18, r21
    2250:	21 f4       	brne	.+8      	; 0x225a <__fp_cmp+0x3e>
    2252:	08 95       	ret
    2254:	0a 26       	eor	r0, r26
    2256:	09 f4       	brne	.+2      	; 0x225a <__fp_cmp+0x3e>
    2258:	a1 40       	sbci	r26, 0x01	; 1
    225a:	a6 95       	lsr	r26
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	81 1d       	adc	r24, r1
    2260:	81 1d       	adc	r24, r1
    2262:	08 95       	ret

00002264 <__fp_powser>:
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	1f 93       	push	r17
    226a:	0f 93       	push	r16
    226c:	ff 92       	push	r15
    226e:	ef 92       	push	r14
    2270:	df 92       	push	r13
    2272:	7b 01       	movw	r14, r22
    2274:	8c 01       	movw	r16, r24
    2276:	68 94       	set
    2278:	05 c0       	rjmp	.+10     	; 0x2284 <__fp_powser+0x20>
    227a:	da 2e       	mov	r13, r26
    227c:	ef 01       	movw	r28, r30
    227e:	da de       	rcall	.-588    	; 0x2034 <__mulsf3x>
    2280:	fe 01       	movw	r30, r28
    2282:	e8 94       	clt
    2284:	a5 91       	lpm	r26, Z+
    2286:	25 91       	lpm	r18, Z+
    2288:	35 91       	lpm	r19, Z+
    228a:	45 91       	lpm	r20, Z+
    228c:	55 91       	lpm	r21, Z+
    228e:	ae f3       	brts	.-22     	; 0x227a <__fp_powser+0x16>
    2290:	ef 01       	movw	r28, r30
    2292:	75 dc       	rcall	.-1814   	; 0x1b7e <__addsf3x>
    2294:	fe 01       	movw	r30, r28
    2296:	97 01       	movw	r18, r14
    2298:	a8 01       	movw	r20, r16
    229a:	da 94       	dec	r13
    229c:	79 f7       	brne	.-34     	; 0x227c <__fp_powser+0x18>
    229e:	df 90       	pop	r13
    22a0:	ef 90       	pop	r14
    22a2:	ff 90       	pop	r15
    22a4:	0f 91       	pop	r16
    22a6:	1f 91       	pop	r17
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <inverse>:
    22ae:	9b 01       	movw	r18, r22
    22b0:	ac 01       	movw	r20, r24
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	80 e8       	ldi	r24, 0x80	; 128
    22b8:	9f e3       	ldi	r25, 0x3F	; 63
    22ba:	b4 cc       	rjmp	.-1688   	; 0x1c24 <__divsf3>
    22bc:	9c cd       	rjmp	.-1224   	; 0x1df6 <__fp_inf>
    22be:	bc cd       	rjmp	.-1160   	; 0x1e38 <__fp_mpack>

000022c0 <ldexp>:
    22c0:	f3 dd       	rcall	.-1050   	; 0x1ea8 <__fp_splitA>
    22c2:	e8 f3       	brcs	.-6      	; 0x22be <inverse+0x10>
    22c4:	99 23       	and	r25, r25
    22c6:	d9 f3       	breq	.-10     	; 0x22be <inverse+0x10>
    22c8:	94 0f       	add	r25, r20
    22ca:	51 1d       	adc	r21, r1
    22cc:	bb f3       	brvs	.-18     	; 0x22bc <inverse+0xe>
    22ce:	91 50       	subi	r25, 0x01	; 1
    22d0:	50 40       	sbci	r21, 0x00	; 0
    22d2:	94 f0       	brlt	.+36     	; 0x22f8 <ldexp+0x38>
    22d4:	59 f0       	breq	.+22     	; 0x22ec <ldexp+0x2c>
    22d6:	88 23       	and	r24, r24
    22d8:	32 f0       	brmi	.+12     	; 0x22e6 <ldexp+0x26>
    22da:	66 0f       	add	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	91 50       	subi	r25, 0x01	; 1
    22e2:	50 40       	sbci	r21, 0x00	; 0
    22e4:	c1 f7       	brne	.-16     	; 0x22d6 <ldexp+0x16>
    22e6:	9e 3f       	cpi	r25, 0xFE	; 254
    22e8:	51 05       	cpc	r21, r1
    22ea:	44 f7       	brge	.-48     	; 0x22bc <inverse+0xe>
    22ec:	88 0f       	add	r24, r24
    22ee:	91 1d       	adc	r25, r1
    22f0:	96 95       	lsr	r25
    22f2:	87 95       	ror	r24
    22f4:	97 f9       	bld	r25, 7
    22f6:	08 95       	ret
    22f8:	5f 3f       	cpi	r21, 0xFF	; 255
    22fa:	ac f0       	brlt	.+42     	; 0x2326 <ldexp+0x66>
    22fc:	98 3e       	cpi	r25, 0xE8	; 232
    22fe:	9c f0       	brlt	.+38     	; 0x2326 <ldexp+0x66>
    2300:	bb 27       	eor	r27, r27
    2302:	86 95       	lsr	r24
    2304:	77 95       	ror	r23
    2306:	67 95       	ror	r22
    2308:	b7 95       	ror	r27
    230a:	08 f4       	brcc	.+2      	; 0x230e <ldexp+0x4e>
    230c:	b1 60       	ori	r27, 0x01	; 1
    230e:	93 95       	inc	r25
    2310:	c1 f7       	brne	.-16     	; 0x2302 <ldexp+0x42>
    2312:	bb 0f       	add	r27, r27
    2314:	58 f7       	brcc	.-42     	; 0x22ec <ldexp+0x2c>
    2316:	11 f4       	brne	.+4      	; 0x231c <ldexp+0x5c>
    2318:	60 ff       	sbrs	r22, 0
    231a:	e8 cf       	rjmp	.-48     	; 0x22ec <ldexp+0x2c>
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	e3 cf       	rjmp	.-58     	; 0x22ec <ldexp+0x2c>
    2326:	f2 cd       	rjmp	.-1052   	; 0x1f0c <__fp_szero>

00002328 <__tablejump2__>:
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31

0000232c <__tablejump__>:
    232c:	05 90       	lpm	r0, Z+
    232e:	f4 91       	lpm	r31, Z
    2330:	e0 2d       	mov	r30, r0
    2332:	09 94       	ijmp

00002334 <malloc>:
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	82 30       	cpi	r24, 0x02	; 2
    233a:	91 05       	cpc	r25, r1
    233c:	10 f4       	brcc	.+4      	; 0x2342 <malloc+0xe>
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	e0 91 27 04 	lds	r30, 0x0427
    2346:	f0 91 28 04 	lds	r31, 0x0428
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	a0 e0       	ldi	r26, 0x00	; 0
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	30 97       	sbiw	r30, 0x00	; 0
    2354:	39 f1       	breq	.+78     	; 0x23a4 <malloc+0x70>
    2356:	40 81       	ld	r20, Z
    2358:	51 81       	ldd	r21, Z+1	; 0x01
    235a:	48 17       	cp	r20, r24
    235c:	59 07       	cpc	r21, r25
    235e:	b8 f0       	brcs	.+46     	; 0x238e <malloc+0x5a>
    2360:	48 17       	cp	r20, r24
    2362:	59 07       	cpc	r21, r25
    2364:	71 f4       	brne	.+28     	; 0x2382 <malloc+0x4e>
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	10 97       	sbiw	r26, 0x00	; 0
    236c:	29 f0       	breq	.+10     	; 0x2378 <malloc+0x44>
    236e:	13 96       	adiw	r26, 0x03	; 3
    2370:	9c 93       	st	X, r25
    2372:	8e 93       	st	-X, r24
    2374:	12 97       	sbiw	r26, 0x02	; 2
    2376:	2c c0       	rjmp	.+88     	; 0x23d0 <malloc+0x9c>
    2378:	90 93 28 04 	sts	0x0428, r25
    237c:	80 93 27 04 	sts	0x0427, r24
    2380:	27 c0       	rjmp	.+78     	; 0x23d0 <malloc+0x9c>
    2382:	21 15       	cp	r18, r1
    2384:	31 05       	cpc	r19, r1
    2386:	31 f0       	breq	.+12     	; 0x2394 <malloc+0x60>
    2388:	42 17       	cp	r20, r18
    238a:	53 07       	cpc	r21, r19
    238c:	18 f0       	brcs	.+6      	; 0x2394 <malloc+0x60>
    238e:	a9 01       	movw	r20, r18
    2390:	db 01       	movw	r26, r22
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <malloc+0x62>
    2394:	ef 01       	movw	r28, r30
    2396:	9a 01       	movw	r18, r20
    2398:	bd 01       	movw	r22, r26
    239a:	df 01       	movw	r26, r30
    239c:	02 80       	ldd	r0, Z+2	; 0x02
    239e:	f3 81       	ldd	r31, Z+3	; 0x03
    23a0:	e0 2d       	mov	r30, r0
    23a2:	d7 cf       	rjmp	.-82     	; 0x2352 <malloc+0x1e>
    23a4:	21 15       	cp	r18, r1
    23a6:	31 05       	cpc	r19, r1
    23a8:	f9 f0       	breq	.+62     	; 0x23e8 <malloc+0xb4>
    23aa:	28 1b       	sub	r18, r24
    23ac:	39 0b       	sbc	r19, r25
    23ae:	24 30       	cpi	r18, 0x04	; 4
    23b0:	31 05       	cpc	r19, r1
    23b2:	80 f4       	brcc	.+32     	; 0x23d4 <malloc+0xa0>
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	61 15       	cp	r22, r1
    23ba:	71 05       	cpc	r23, r1
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <malloc+0x92>
    23be:	fb 01       	movw	r30, r22
    23c0:	93 83       	std	Z+3, r25	; 0x03
    23c2:	82 83       	std	Z+2, r24	; 0x02
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <malloc+0x9a>
    23c6:	90 93 28 04 	sts	0x0428, r25
    23ca:	80 93 27 04 	sts	0x0427, r24
    23ce:	fe 01       	movw	r30, r28
    23d0:	32 96       	adiw	r30, 0x02	; 2
    23d2:	44 c0       	rjmp	.+136    	; 0x245c <malloc+0x128>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	81 93       	st	Z+, r24
    23dc:	91 93       	st	Z+, r25
    23de:	22 50       	subi	r18, 0x02	; 2
    23e0:	31 09       	sbc	r19, r1
    23e2:	39 83       	std	Y+1, r19	; 0x01
    23e4:	28 83       	st	Y, r18
    23e6:	3a c0       	rjmp	.+116    	; 0x245c <malloc+0x128>
    23e8:	20 91 25 04 	lds	r18, 0x0425
    23ec:	30 91 26 04 	lds	r19, 0x0426
    23f0:	23 2b       	or	r18, r19
    23f2:	41 f4       	brne	.+16     	; 0x2404 <malloc+0xd0>
    23f4:	20 91 08 01 	lds	r18, 0x0108
    23f8:	30 91 09 01 	lds	r19, 0x0109
    23fc:	30 93 26 04 	sts	0x0426, r19
    2400:	20 93 25 04 	sts	0x0425, r18
    2404:	20 91 06 01 	lds	r18, 0x0106
    2408:	30 91 07 01 	lds	r19, 0x0107
    240c:	21 15       	cp	r18, r1
    240e:	31 05       	cpc	r19, r1
    2410:	41 f4       	brne	.+16     	; 0x2422 <malloc+0xee>
    2412:	2d b7       	in	r18, 0x3d	; 61
    2414:	3e b7       	in	r19, 0x3e	; 62
    2416:	40 91 0a 01 	lds	r20, 0x010A
    241a:	50 91 0b 01 	lds	r21, 0x010B
    241e:	24 1b       	sub	r18, r20
    2420:	35 0b       	sbc	r19, r21
    2422:	e0 91 25 04 	lds	r30, 0x0425
    2426:	f0 91 26 04 	lds	r31, 0x0426
    242a:	e2 17       	cp	r30, r18
    242c:	f3 07       	cpc	r31, r19
    242e:	a0 f4       	brcc	.+40     	; 0x2458 <malloc+0x124>
    2430:	2e 1b       	sub	r18, r30
    2432:	3f 0b       	sbc	r19, r31
    2434:	28 17       	cp	r18, r24
    2436:	39 07       	cpc	r19, r25
    2438:	78 f0       	brcs	.+30     	; 0x2458 <malloc+0x124>
    243a:	ac 01       	movw	r20, r24
    243c:	4e 5f       	subi	r20, 0xFE	; 254
    243e:	5f 4f       	sbci	r21, 0xFF	; 255
    2440:	24 17       	cp	r18, r20
    2442:	35 07       	cpc	r19, r21
    2444:	48 f0       	brcs	.+18     	; 0x2458 <malloc+0x124>
    2446:	4e 0f       	add	r20, r30
    2448:	5f 1f       	adc	r21, r31
    244a:	50 93 26 04 	sts	0x0426, r21
    244e:	40 93 25 04 	sts	0x0425, r20
    2452:	81 93       	st	Z+, r24
    2454:	91 93       	st	Z+, r25
    2456:	02 c0       	rjmp	.+4      	; 0x245c <malloc+0x128>
    2458:	e0 e0       	ldi	r30, 0x00	; 0
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	cf 01       	movw	r24, r30
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <free>:
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	09 f4       	brne	.+2      	; 0x246e <free+0xa>
    246c:	87 c0       	rjmp	.+270    	; 0x257c <free+0x118>
    246e:	fc 01       	movw	r30, r24
    2470:	32 97       	sbiw	r30, 0x02	; 2
    2472:	13 82       	std	Z+3, r1	; 0x03
    2474:	12 82       	std	Z+2, r1	; 0x02
    2476:	c0 91 27 04 	lds	r28, 0x0427
    247a:	d0 91 28 04 	lds	r29, 0x0428
    247e:	20 97       	sbiw	r28, 0x00	; 0
    2480:	81 f4       	brne	.+32     	; 0x24a2 <free+0x3e>
    2482:	20 81       	ld	r18, Z
    2484:	31 81       	ldd	r19, Z+1	; 0x01
    2486:	28 0f       	add	r18, r24
    2488:	39 1f       	adc	r19, r25
    248a:	80 91 25 04 	lds	r24, 0x0425
    248e:	90 91 26 04 	lds	r25, 0x0426
    2492:	82 17       	cp	r24, r18
    2494:	93 07       	cpc	r25, r19
    2496:	79 f5       	brne	.+94     	; 0x24f6 <free+0x92>
    2498:	f0 93 26 04 	sts	0x0426, r31
    249c:	e0 93 25 04 	sts	0x0425, r30
    24a0:	6d c0       	rjmp	.+218    	; 0x257c <free+0x118>
    24a2:	de 01       	movw	r26, r28
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	ae 17       	cp	r26, r30
    24aa:	bf 07       	cpc	r27, r31
    24ac:	50 f4       	brcc	.+20     	; 0x24c2 <free+0x5e>
    24ae:	12 96       	adiw	r26, 0x02	; 2
    24b0:	4d 91       	ld	r20, X+
    24b2:	5c 91       	ld	r21, X
    24b4:	13 97       	sbiw	r26, 0x03	; 3
    24b6:	9d 01       	movw	r18, r26
    24b8:	41 15       	cp	r20, r1
    24ba:	51 05       	cpc	r21, r1
    24bc:	09 f1       	breq	.+66     	; 0x2500 <free+0x9c>
    24be:	da 01       	movw	r26, r20
    24c0:	f3 cf       	rjmp	.-26     	; 0x24a8 <free+0x44>
    24c2:	b3 83       	std	Z+3, r27	; 0x03
    24c4:	a2 83       	std	Z+2, r26	; 0x02
    24c6:	40 81       	ld	r20, Z
    24c8:	51 81       	ldd	r21, Z+1	; 0x01
    24ca:	84 0f       	add	r24, r20
    24cc:	95 1f       	adc	r25, r21
    24ce:	8a 17       	cp	r24, r26
    24d0:	9b 07       	cpc	r25, r27
    24d2:	71 f4       	brne	.+28     	; 0x24f0 <free+0x8c>
    24d4:	8d 91       	ld	r24, X+
    24d6:	9c 91       	ld	r25, X
    24d8:	11 97       	sbiw	r26, 0x01	; 1
    24da:	84 0f       	add	r24, r20
    24dc:	95 1f       	adc	r25, r21
    24de:	02 96       	adiw	r24, 0x02	; 2
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	12 96       	adiw	r26, 0x02	; 2
    24e6:	8d 91       	ld	r24, X+
    24e8:	9c 91       	ld	r25, X
    24ea:	13 97       	sbiw	r26, 0x03	; 3
    24ec:	93 83       	std	Z+3, r25	; 0x03
    24ee:	82 83       	std	Z+2, r24	; 0x02
    24f0:	21 15       	cp	r18, r1
    24f2:	31 05       	cpc	r19, r1
    24f4:	29 f4       	brne	.+10     	; 0x2500 <free+0x9c>
    24f6:	f0 93 28 04 	sts	0x0428, r31
    24fa:	e0 93 27 04 	sts	0x0427, r30
    24fe:	3e c0       	rjmp	.+124    	; 0x257c <free+0x118>
    2500:	d9 01       	movw	r26, r18
    2502:	13 96       	adiw	r26, 0x03	; 3
    2504:	fc 93       	st	X, r31
    2506:	ee 93       	st	-X, r30
    2508:	12 97       	sbiw	r26, 0x02	; 2
    250a:	4d 91       	ld	r20, X+
    250c:	5d 91       	ld	r21, X+
    250e:	a4 0f       	add	r26, r20
    2510:	b5 1f       	adc	r27, r21
    2512:	ea 17       	cp	r30, r26
    2514:	fb 07       	cpc	r31, r27
    2516:	79 f4       	brne	.+30     	; 0x2536 <free+0xd2>
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	84 0f       	add	r24, r20
    251e:	95 1f       	adc	r25, r21
    2520:	02 96       	adiw	r24, 0x02	; 2
    2522:	d9 01       	movw	r26, r18
    2524:	11 96       	adiw	r26, 0x01	; 1
    2526:	9c 93       	st	X, r25
    2528:	8e 93       	st	-X, r24
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	13 96       	adiw	r26, 0x03	; 3
    2530:	9c 93       	st	X, r25
    2532:	8e 93       	st	-X, r24
    2534:	12 97       	sbiw	r26, 0x02	; 2
    2536:	e0 e0       	ldi	r30, 0x00	; 0
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	19 f0       	breq	.+6      	; 0x2548 <free+0xe4>
    2542:	fe 01       	movw	r30, r28
    2544:	ec 01       	movw	r28, r24
    2546:	f9 cf       	rjmp	.-14     	; 0x253a <free+0xd6>
    2548:	ce 01       	movw	r24, r28
    254a:	02 96       	adiw	r24, 0x02	; 2
    254c:	28 81       	ld	r18, Y
    254e:	39 81       	ldd	r19, Y+1	; 0x01
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	20 91 25 04 	lds	r18, 0x0425
    2558:	30 91 26 04 	lds	r19, 0x0426
    255c:	28 17       	cp	r18, r24
    255e:	39 07       	cpc	r19, r25
    2560:	69 f4       	brne	.+26     	; 0x257c <free+0x118>
    2562:	30 97       	sbiw	r30, 0x00	; 0
    2564:	29 f4       	brne	.+10     	; 0x2570 <free+0x10c>
    2566:	10 92 28 04 	sts	0x0428, r1
    256a:	10 92 27 04 	sts	0x0427, r1
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <free+0x110>
    2570:	13 82       	std	Z+3, r1	; 0x03
    2572:	12 82       	std	Z+2, r1	; 0x02
    2574:	d0 93 26 04 	sts	0x0426, r29
    2578:	c0 93 25 04 	sts	0x0425, r28
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <strtod>:
    2582:	4f 92       	push	r4
    2584:	5f 92       	push	r5
    2586:	6f 92       	push	r6
    2588:	7f 92       	push	r7
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	8b 01       	movw	r16, r22
    25a4:	61 15       	cp	r22, r1
    25a6:	71 05       	cpc	r23, r1
    25a8:	21 f0       	breq	.+8      	; 0x25b2 <strtod+0x30>
    25aa:	db 01       	movw	r26, r22
    25ac:	8c 93       	st	X, r24
    25ae:	11 96       	adiw	r26, 0x01	; 1
    25b0:	9c 93       	st	X, r25
    25b2:	ec 01       	movw	r28, r24
    25b4:	5e 01       	movw	r10, r28
    25b6:	bf ef       	ldi	r27, 0xFF	; 255
    25b8:	ab 1a       	sub	r10, r27
    25ba:	bb 0a       	sbc	r11, r27
    25bc:	75 01       	movw	r14, r10
    25be:	c8 80       	ld	r12, Y
    25c0:	8c 2d       	mov	r24, r12
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 3e 14 	call	0x287c	; 0x287c <isspace>
    25c8:	89 2b       	or	r24, r25
    25ca:	11 f0       	breq	.+4      	; 0x25d0 <strtod+0x4e>
    25cc:	e5 01       	movw	r28, r10
    25ce:	f2 cf       	rjmp	.-28     	; 0x25b4 <strtod+0x32>
    25d0:	ed e2       	ldi	r30, 0x2D	; 45
    25d2:	ce 12       	cpse	r12, r30
    25d4:	08 c0       	rjmp	.+16     	; 0x25e6 <strtod+0x64>
    25d6:	7e 01       	movw	r14, r28
    25d8:	f2 e0       	ldi	r31, 0x02	; 2
    25da:	ef 0e       	add	r14, r31
    25dc:	f1 1c       	adc	r15, r1
    25de:	c9 80       	ldd	r12, Y+1	; 0x01
    25e0:	dd 24       	eor	r13, r13
    25e2:	d3 94       	inc	r13
    25e4:	09 c0       	rjmp	.+18     	; 0x25f8 <strtod+0x76>
    25e6:	2b e2       	ldi	r18, 0x2B	; 43
    25e8:	c2 12       	cpse	r12, r18
    25ea:	05 c0       	rjmp	.+10     	; 0x25f6 <strtod+0x74>
    25ec:	7e 01       	movw	r14, r28
    25ee:	42 e0       	ldi	r20, 0x02	; 2
    25f0:	e4 0e       	add	r14, r20
    25f2:	f1 1c       	adc	r15, r1
    25f4:	c9 80       	ldd	r12, Y+1	; 0x01
    25f6:	d1 2c       	mov	r13, r1
    25f8:	e7 01       	movw	r28, r14
    25fa:	21 97       	sbiw	r28, 0x01	; 1
    25fc:	43 e0       	ldi	r20, 0x03	; 3
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	6e e3       	ldi	r22, 0x3E	; 62
    2602:	71 e0       	ldi	r23, 0x01	; 1
    2604:	ce 01       	movw	r24, r28
    2606:	0e 94 46 14 	call	0x288c	; 0x288c <strncasecmp_P>
    260a:	89 2b       	or	r24, r25
    260c:	d1 f4       	brne	.+52     	; 0x2642 <strtod+0xc0>
    260e:	e7 01       	movw	r28, r14
    2610:	22 96       	adiw	r28, 0x02	; 2
    2612:	45 e0       	ldi	r20, 0x05	; 5
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	69 e3       	ldi	r22, 0x39	; 57
    2618:	71 e0       	ldi	r23, 0x01	; 1
    261a:	ce 01       	movw	r24, r28
    261c:	0e 94 46 14 	call	0x288c	; 0x288c <strncasecmp_P>
    2620:	89 2b       	or	r24, r25
    2622:	11 f4       	brne	.+4      	; 0x2628 <strtod+0xa6>
    2624:	e7 01       	movw	r28, r14
    2626:	27 96       	adiw	r28, 0x07	; 7
    2628:	01 15       	cp	r16, r1
    262a:	11 05       	cpc	r17, r1
    262c:	19 f0       	breq	.+6      	; 0x2634 <strtod+0xb2>
    262e:	d8 01       	movw	r26, r16
    2630:	cd 93       	st	X+, r28
    2632:	dc 93       	st	X, r29
    2634:	d1 10       	cpse	r13, r1
    2636:	08 c1       	rjmp	.+528    	; 0x2848 <strtod+0x2c6>
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 e8       	ldi	r24, 0x80	; 128
    263e:	9f e7       	ldi	r25, 0x7F	; 127
    2640:	0c c1       	rjmp	.+536    	; 0x285a <strtod+0x2d8>
    2642:	43 e0       	ldi	r20, 0x03	; 3
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	66 e3       	ldi	r22, 0x36	; 54
    2648:	71 e0       	ldi	r23, 0x01	; 1
    264a:	ce 01       	movw	r24, r28
    264c:	0e 94 46 14 	call	0x288c	; 0x288c <strncasecmp_P>
    2650:	89 2b       	or	r24, r25
    2652:	59 f4       	brne	.+22     	; 0x266a <strtod+0xe8>
    2654:	01 15       	cp	r16, r1
    2656:	11 05       	cpc	r17, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <strtod+0xda>
    265a:	fb c0       	rjmp	.+502    	; 0x2852 <strtod+0x2d0>
    265c:	b2 e0       	ldi	r27, 0x02	; 2
    265e:	eb 0e       	add	r14, r27
    2660:	f1 1c       	adc	r15, r1
    2662:	f8 01       	movw	r30, r16
    2664:	f1 82       	std	Z+1, r15	; 0x01
    2666:	e0 82       	st	Z, r14
    2668:	f4 c0       	rjmp	.+488    	; 0x2852 <strtod+0x2d0>
    266a:	f7 01       	movw	r30, r14
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	cb 01       	movw	r24, r22
    2672:	c0 e0       	ldi	r28, 0x00	; 0
    2674:	d0 e0       	ldi	r29, 0x00	; 0
    2676:	7f 01       	movw	r14, r30
    2678:	a0 ed       	ldi	r26, 0xD0	; 208
    267a:	aa 2e       	mov	r10, r26
    267c:	ac 0c       	add	r10, r12
    267e:	29 e0       	ldi	r18, 0x09	; 9
    2680:	2a 15       	cp	r18, r10
    2682:	30 f1       	brcs	.+76     	; 0x26d0 <strtod+0x14e>
    2684:	4d 2d       	mov	r20, r13
    2686:	42 60       	ori	r20, 0x02	; 2
    2688:	b4 2e       	mov	r11, r20
    268a:	2d 2d       	mov	r18, r13
    268c:	28 70       	andi	r18, 0x08	; 8
    268e:	d2 fe       	sbrs	r13, 2
    2690:	04 c0       	rjmp	.+8      	; 0x269a <strtod+0x118>
    2692:	21 11       	cpse	r18, r1
    2694:	25 c0       	rjmp	.+74     	; 0x26e0 <strtod+0x15e>
    2696:	21 96       	adiw	r28, 0x01	; 1
    2698:	23 c0       	rjmp	.+70     	; 0x26e0 <strtod+0x15e>
    269a:	21 11       	cpse	r18, r1
    269c:	21 97       	sbiw	r28, 0x01	; 1
    269e:	a5 e0       	ldi	r26, 0x05	; 5
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	9b 01       	movw	r18, r22
    26a4:	ac 01       	movw	r20, r24
    26a6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__muluhisi3>
    26aa:	66 0f       	add	r22, r22
    26ac:	77 1f       	adc	r23, r23
    26ae:	88 1f       	adc	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	6a 0d       	add	r22, r10
    26b4:	71 1d       	adc	r23, r1
    26b6:	81 1d       	adc	r24, r1
    26b8:	91 1d       	adc	r25, r1
    26ba:	68 39       	cpi	r22, 0x98	; 152
    26bc:	a9 e9       	ldi	r26, 0x99	; 153
    26be:	7a 07       	cpc	r23, r26
    26c0:	8a 07       	cpc	r24, r26
    26c2:	a9 e1       	ldi	r26, 0x19	; 25
    26c4:	9a 07       	cpc	r25, r26
    26c6:	60 f0       	brcs	.+24     	; 0x26e0 <strtod+0x15e>
    26c8:	bd 2d       	mov	r27, r13
    26ca:	b6 60       	ori	r27, 0x06	; 6
    26cc:	bb 2e       	mov	r11, r27
    26ce:	08 c0       	rjmp	.+16     	; 0x26e0 <strtod+0x15e>
    26d0:	2e ef       	ldi	r18, 0xFE	; 254
    26d2:	a2 12       	cpse	r10, r18
    26d4:	0a c0       	rjmp	.+20     	; 0x26ea <strtod+0x168>
    26d6:	d3 fc       	sbrc	r13, 3
    26d8:	50 c0       	rjmp	.+160    	; 0x277a <strtod+0x1f8>
    26da:	4d 2d       	mov	r20, r13
    26dc:	48 60       	ori	r20, 0x08	; 8
    26de:	b4 2e       	mov	r11, r20
    26e0:	31 96       	adiw	r30, 0x01	; 1
    26e2:	d7 01       	movw	r26, r14
    26e4:	cc 90       	ld	r12, X
    26e6:	db 2c       	mov	r13, r11
    26e8:	c6 cf       	rjmp	.-116    	; 0x2676 <strtod+0xf4>
    26ea:	2c 2d       	mov	r18, r12
    26ec:	2f 7d       	andi	r18, 0xDF	; 223
    26ee:	25 34       	cpi	r18, 0x45	; 69
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <strtod+0x172>
    26f2:	43 c0       	rjmp	.+134    	; 0x277a <strtod+0x1f8>
    26f4:	a0 81       	ld	r26, Z
    26f6:	ad 32       	cpi	r26, 0x2D	; 45
    26f8:	41 f4       	brne	.+16     	; 0x270a <strtod+0x188>
    26fa:	bd 2d       	mov	r27, r13
    26fc:	b0 61       	ori	r27, 0x10	; 16
    26fe:	db 2e       	mov	r13, r27
    2700:	7f 01       	movw	r14, r30
    2702:	22 e0       	ldi	r18, 0x02	; 2
    2704:	e2 0e       	add	r14, r18
    2706:	f1 1c       	adc	r15, r1
    2708:	0c c0       	rjmp	.+24     	; 0x2722 <strtod+0x1a0>
    270a:	7f 01       	movw	r14, r30
    270c:	ab 32       	cpi	r26, 0x2B	; 43
    270e:	31 f0       	breq	.+12     	; 0x271c <strtod+0x19a>
    2710:	4f ef       	ldi	r20, 0xFF	; 255
    2712:	e4 1a       	sub	r14, r20
    2714:	f4 0a       	sbc	r15, r20
    2716:	21 e0       	ldi	r18, 0x01	; 1
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	06 c0       	rjmp	.+12     	; 0x2728 <strtod+0x1a6>
    271c:	a2 e0       	ldi	r26, 0x02	; 2
    271e:	ea 0e       	add	r14, r26
    2720:	f1 1c       	adc	r15, r1
    2722:	a1 81       	ldd	r26, Z+1	; 0x01
    2724:	22 e0       	ldi	r18, 0x02	; 2
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	a0 53       	subi	r26, 0x30	; 48
    272a:	aa 30       	cpi	r26, 0x0A	; 10
    272c:	18 f0       	brcs	.+6      	; 0x2734 <strtod+0x1b2>
    272e:	e2 1a       	sub	r14, r18
    2730:	f3 0a       	sbc	r15, r19
    2732:	23 c0       	rjmp	.+70     	; 0x277a <strtod+0x1f8>
    2734:	f7 01       	movw	r30, r14
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	20 38       	cpi	r18, 0x80	; 128
    273c:	bc e0       	ldi	r27, 0x0C	; 12
    273e:	3b 07       	cpc	r19, r27
    2740:	5c f4       	brge	.+22     	; 0x2758 <strtod+0x1d6>
    2742:	a9 01       	movw	r20, r18
    2744:	44 0f       	add	r20, r20
    2746:	55 1f       	adc	r21, r21
    2748:	44 0f       	add	r20, r20
    274a:	55 1f       	adc	r21, r21
    274c:	24 0f       	add	r18, r20
    274e:	35 1f       	adc	r19, r21
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	2a 0f       	add	r18, r26
    2756:	31 1d       	adc	r19, r1
    2758:	af 01       	movw	r20, r30
    275a:	4f 5f       	subi	r20, 0xFF	; 255
    275c:	5f 4f       	sbci	r21, 0xFF	; 255
    275e:	7a 01       	movw	r14, r20
    2760:	a0 81       	ld	r26, Z
    2762:	a0 53       	subi	r26, 0x30	; 48
    2764:	aa 30       	cpi	r26, 0x0A	; 10
    2766:	10 f4       	brcc	.+4      	; 0x276c <strtod+0x1ea>
    2768:	fa 01       	movw	r30, r20
    276a:	e7 cf       	rjmp	.-50     	; 0x273a <strtod+0x1b8>
    276c:	d4 fe       	sbrs	r13, 4
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <strtod+0x1f4>
    2770:	31 95       	neg	r19
    2772:	21 95       	neg	r18
    2774:	31 09       	sbc	r19, r1
    2776:	c2 0f       	add	r28, r18
    2778:	d3 1f       	adc	r29, r19
    277a:	d1 fe       	sbrs	r13, 1
    277c:	09 c0       	rjmp	.+18     	; 0x2790 <strtod+0x20e>
    277e:	01 15       	cp	r16, r1
    2780:	11 05       	cpc	r17, r1
    2782:	31 f0       	breq	.+12     	; 0x2790 <strtod+0x20e>
    2784:	e1 e0       	ldi	r30, 0x01	; 1
    2786:	ee 1a       	sub	r14, r30
    2788:	f1 08       	sbc	r15, r1
    278a:	d8 01       	movw	r26, r16
    278c:	ed 92       	st	X+, r14
    278e:	fc 92       	st	X, r15
    2790:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__floatunsisf>
    2794:	2d 2d       	mov	r18, r13
    2796:	23 70       	andi	r18, 0x03	; 3
    2798:	23 30       	cpi	r18, 0x03	; 3
    279a:	19 f0       	breq	.+6      	; 0x27a2 <strtod+0x220>
    279c:	6b 01       	movw	r12, r22
    279e:	7c 01       	movw	r14, r24
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <strtod+0x22c>
    27a2:	6b 01       	movw	r12, r22
    27a4:	7c 01       	movw	r14, r24
    27a6:	f7 fa       	bst	r15, 7
    27a8:	f0 94       	com	r15
    27aa:	f7 f8       	bld	r15, 7
    27ac:	f0 94       	com	r15
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	a9 01       	movw	r20, r18
    27b4:	c7 01       	movw	r24, r14
    27b6:	b6 01       	movw	r22, r12
    27b8:	0e 94 c5 14 	call	0x298a	; 0x298a <__cmpsf2>
    27bc:	88 23       	and	r24, r24
    27be:	09 f4       	brne	.+2      	; 0x27c2 <strtod+0x240>
    27c0:	40 c0       	rjmp	.+128    	; 0x2842 <strtod+0x2c0>
    27c2:	d7 ff       	sbrs	r29, 7
    27c4:	06 c0       	rjmp	.+12     	; 0x27d2 <strtod+0x250>
    27c6:	d1 95       	neg	r29
    27c8:	c1 95       	neg	r28
    27ca:	d1 09       	sbc	r29, r1
    27cc:	05 e5       	ldi	r16, 0x55	; 85
    27ce:	11 e0       	ldi	r17, 0x01	; 1
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <strtod+0x254>
    27d2:	0d e6       	ldi	r16, 0x6D	; 109
    27d4:	11 e0       	ldi	r17, 0x01	; 1
    27d6:	48 01       	movw	r8, r16
    27d8:	b8 e1       	ldi	r27, 0x18	; 24
    27da:	8b 1a       	sub	r8, r27
    27dc:	91 08       	sbc	r9, r1
    27de:	90 e2       	ldi	r25, 0x20	; 32
    27e0:	a9 2e       	mov	r10, r25
    27e2:	b1 2c       	mov	r11, r1
    27e4:	f8 01       	movw	r30, r16
    27e6:	45 90       	lpm	r4, Z+
    27e8:	55 90       	lpm	r5, Z+
    27ea:	65 90       	lpm	r6, Z+
    27ec:	74 90       	lpm	r7, Z
    27ee:	ca 15       	cp	r28, r10
    27f0:	db 05       	cpc	r29, r11
    27f2:	5c f0       	brlt	.+22     	; 0x280a <strtod+0x288>
    27f4:	a3 01       	movw	r20, r6
    27f6:	92 01       	movw	r18, r4
    27f8:	c7 01       	movw	r24, r14
    27fa:	b6 01       	movw	r22, r12
    27fc:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulsf3>
    2800:	6b 01       	movw	r12, r22
    2802:	7c 01       	movw	r14, r24
    2804:	ca 19       	sub	r28, r10
    2806:	db 09       	sbc	r29, r11
    2808:	f2 cf       	rjmp	.-28     	; 0x27ee <strtod+0x26c>
    280a:	04 50       	subi	r16, 0x04	; 4
    280c:	11 09       	sbc	r17, r1
    280e:	b5 94       	asr	r11
    2810:	a7 94       	ror	r10
    2812:	08 15       	cp	r16, r8
    2814:	19 05       	cpc	r17, r9
    2816:	31 f7       	brne	.-52     	; 0x27e4 <strtod+0x262>
    2818:	8e 2d       	mov	r24, r14
    281a:	88 0f       	add	r24, r24
    281c:	8f 2d       	mov	r24, r15
    281e:	88 1f       	adc	r24, r24
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	49 f0       	breq	.+18     	; 0x2836 <strtod+0x2b4>
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	a9 01       	movw	r20, r18
    282a:	c7 01       	movw	r24, r14
    282c:	b6 01       	movw	r22, r12
    282e:	0e 94 c5 14 	call	0x298a	; 0x298a <__cmpsf2>
    2832:	81 11       	cpse	r24, r1
    2834:	06 c0       	rjmp	.+12     	; 0x2842 <strtod+0x2c0>
    2836:	82 e2       	ldi	r24, 0x22	; 34
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	90 93 2a 04 	sts	0x042A, r25
    283e:	80 93 29 04 	sts	0x0429, r24
    2842:	c7 01       	movw	r24, r14
    2844:	b6 01       	movw	r22, r12
    2846:	09 c0       	rjmp	.+18     	; 0x285a <strtod+0x2d8>
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	80 e8       	ldi	r24, 0x80	; 128
    284e:	9f ef       	ldi	r25, 0xFF	; 255
    2850:	04 c0       	rjmp	.+8      	; 0x285a <strtod+0x2d8>
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	80 ec       	ldi	r24, 0xC0	; 192
    2858:	9f e7       	ldi	r25, 0x7F	; 127
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	bf 90       	pop	r11
    286c:	af 90       	pop	r10
    286e:	9f 90       	pop	r9
    2870:	8f 90       	pop	r8
    2872:	7f 90       	pop	r7
    2874:	6f 90       	pop	r6
    2876:	5f 90       	pop	r5
    2878:	4f 90       	pop	r4
    287a:	08 95       	ret

0000287c <isspace>:
    287c:	91 11       	cpse	r25, r1
    287e:	b0 c2       	rjmp	.+1376   	; 0x2de0 <__ctype_isfalse>
    2880:	80 32       	cpi	r24, 0x20	; 32
    2882:	19 f0       	breq	.+6      	; 0x288a <isspace+0xe>
    2884:	89 50       	subi	r24, 0x09	; 9
    2886:	85 50       	subi	r24, 0x05	; 5
    2888:	d0 f7       	brcc	.-12     	; 0x287e <isspace+0x2>
    288a:	08 95       	ret

0000288c <strncasecmp_P>:
    288c:	fb 01       	movw	r30, r22
    288e:	dc 01       	movw	r26, r24
    2890:	41 50       	subi	r20, 0x01	; 1
    2892:	50 40       	sbci	r21, 0x00	; 0
    2894:	88 f0       	brcs	.+34     	; 0x28b8 <strncasecmp_P+0x2c>
    2896:	8d 91       	ld	r24, X+
    2898:	81 34       	cpi	r24, 0x41	; 65
    289a:	1c f0       	brlt	.+6      	; 0x28a2 <strncasecmp_P+0x16>
    289c:	8b 35       	cpi	r24, 0x5B	; 91
    289e:	0c f4       	brge	.+2      	; 0x28a2 <strncasecmp_P+0x16>
    28a0:	80 5e       	subi	r24, 0xE0	; 224
    28a2:	65 91       	lpm	r22, Z+
    28a4:	61 34       	cpi	r22, 0x41	; 65
    28a6:	1c f0       	brlt	.+6      	; 0x28ae <strncasecmp_P+0x22>
    28a8:	6b 35       	cpi	r22, 0x5B	; 91
    28aa:	0c f4       	brge	.+2      	; 0x28ae <strncasecmp_P+0x22>
    28ac:	60 5e       	subi	r22, 0xE0	; 224
    28ae:	86 1b       	sub	r24, r22
    28b0:	61 11       	cpse	r22, r1
    28b2:	71 f3       	breq	.-36     	; 0x2890 <strncasecmp_P+0x4>
    28b4:	99 0b       	sbc	r25, r25
    28b6:	08 95       	ret
    28b8:	88 1b       	sub	r24, r24
    28ba:	fc cf       	rjmp	.-8      	; 0x28b4 <strncasecmp_P+0x28>

000028bc <strcat>:
    28bc:	fb 01       	movw	r30, r22
    28be:	dc 01       	movw	r26, r24
    28c0:	0d 90       	ld	r0, X+
    28c2:	00 20       	and	r0, r0
    28c4:	e9 f7       	brne	.-6      	; 0x28c0 <strcat+0x4>
    28c6:	11 97       	sbiw	r26, 0x01	; 1
    28c8:	01 90       	ld	r0, Z+
    28ca:	0d 92       	st	X+, r0
    28cc:	00 20       	and	r0, r0
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <strcat+0xc>
    28d0:	08 95       	ret

000028d2 <strcmp>:
    28d2:	fb 01       	movw	r30, r22
    28d4:	dc 01       	movw	r26, r24
    28d6:	8d 91       	ld	r24, X+
    28d8:	01 90       	ld	r0, Z+
    28da:	80 19       	sub	r24, r0
    28dc:	01 10       	cpse	r0, r1
    28de:	d9 f3       	breq	.-10     	; 0x28d6 <strcmp+0x4>
    28e0:	99 0b       	sbc	r25, r25
    28e2:	08 95       	ret

000028e4 <strcpy>:
    28e4:	fb 01       	movw	r30, r22
    28e6:	dc 01       	movw	r26, r24
    28e8:	01 90       	ld	r0, Z+
    28ea:	0d 92       	st	X+, r0
    28ec:	00 20       	and	r0, r0
    28ee:	e1 f7       	brne	.-8      	; 0x28e8 <strcpy+0x4>
    28f0:	08 95       	ret

000028f2 <strncpy>:
    28f2:	fb 01       	movw	r30, r22
    28f4:	dc 01       	movw	r26, r24
    28f6:	41 50       	subi	r20, 0x01	; 1
    28f8:	50 40       	sbci	r21, 0x00	; 0
    28fa:	48 f0       	brcs	.+18     	; 0x290e <strncpy+0x1c>
    28fc:	01 90       	ld	r0, Z+
    28fe:	0d 92       	st	X+, r0
    2900:	00 20       	and	r0, r0
    2902:	c9 f7       	brne	.-14     	; 0x28f6 <strncpy+0x4>
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <strncpy+0x16>
    2906:	1d 92       	st	X+, r1
    2908:	41 50       	subi	r20, 0x01	; 1
    290a:	50 40       	sbci	r21, 0x00	; 0
    290c:	e0 f7       	brcc	.-8      	; 0x2906 <strncpy+0x14>
    290e:	08 95       	ret

00002910 <strpbrk>:
    2910:	dc 01       	movw	r26, r24
    2912:	99 27       	eor	r25, r25
    2914:	8d 91       	ld	r24, X+
    2916:	88 23       	and	r24, r24
    2918:	41 f0       	breq	.+16     	; 0x292a <strpbrk+0x1a>
    291a:	fb 01       	movw	r30, r22
    291c:	01 90       	ld	r0, Z+
    291e:	08 16       	cp	r0, r24
    2920:	01 10       	cpse	r0, r1
    2922:	e1 f7       	brne	.-8      	; 0x291c <strpbrk+0xc>
    2924:	b9 f7       	brne	.-18     	; 0x2914 <strpbrk+0x4>
    2926:	11 97       	sbiw	r26, 0x01	; 1
    2928:	cd 01       	movw	r24, r26
    292a:	08 95       	ret

0000292c <sprintf>:
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	2e 97       	sbiw	r28, 0x0e	; 14
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	0d 89       	ldd	r16, Y+21	; 0x15
    2946:	1e 89       	ldd	r17, Y+22	; 0x16
    2948:	86 e0       	ldi	r24, 0x06	; 6
    294a:	8c 83       	std	Y+4, r24	; 0x04
    294c:	1a 83       	std	Y+2, r17	; 0x02
    294e:	09 83       	std	Y+1, r16	; 0x01
    2950:	8f ef       	ldi	r24, 0xFF	; 255
    2952:	9f e7       	ldi	r25, 0x7F	; 127
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	ae 01       	movw	r20, r28
    295a:	47 5e       	subi	r20, 0xE7	; 231
    295c:	5f 4f       	sbci	r21, 0xFF	; 255
    295e:	6f 89       	ldd	r22, Y+23	; 0x17
    2960:	78 8d       	ldd	r23, Y+24	; 0x18
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	0e 94 c9 14 	call	0x2992	; 0x2992 <vfprintf>
    296a:	ef 81       	ldd	r30, Y+7	; 0x07
    296c:	f8 85       	ldd	r31, Y+8	; 0x08
    296e:	e0 0f       	add	r30, r16
    2970:	f1 1f       	adc	r31, r17
    2972:	10 82       	st	Z, r1
    2974:	2e 96       	adiw	r28, 0x0e	; 14
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <__cmpsf2>:
    298a:	48 dc       	rcall	.-1904   	; 0x221c <__fp_cmp>
    298c:	08 f4       	brcc	.+2      	; 0x2990 <__cmpsf2+0x6>
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	08 95       	ret

00002992 <vfprintf>:
    2992:	2f 92       	push	r2
    2994:	3f 92       	push	r3
    2996:	4f 92       	push	r4
    2998:	5f 92       	push	r5
    299a:	6f 92       	push	r6
    299c:	7f 92       	push	r7
    299e:	8f 92       	push	r8
    29a0:	9f 92       	push	r9
    29a2:	af 92       	push	r10
    29a4:	bf 92       	push	r11
    29a6:	cf 92       	push	r12
    29a8:	df 92       	push	r13
    29aa:	ef 92       	push	r14
    29ac:	ff 92       	push	r15
    29ae:	0f 93       	push	r16
    29b0:	1f 93       	push	r17
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	2c 97       	sbiw	r28, 0x0c	; 12
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	7c 01       	movw	r14, r24
    29c8:	6b 01       	movw	r12, r22
    29ca:	8a 01       	movw	r16, r20
    29cc:	fc 01       	movw	r30, r24
    29ce:	17 82       	std	Z+7, r1	; 0x07
    29d0:	16 82       	std	Z+6, r1	; 0x06
    29d2:	83 81       	ldd	r24, Z+3	; 0x03
    29d4:	81 ff       	sbrs	r24, 1
    29d6:	bd c1       	rjmp	.+890    	; 0x2d52 <vfprintf+0x3c0>
    29d8:	ce 01       	movw	r24, r28
    29da:	01 96       	adiw	r24, 0x01	; 1
    29dc:	4c 01       	movw	r8, r24
    29de:	f7 01       	movw	r30, r14
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	f6 01       	movw	r30, r12
    29e4:	93 fd       	sbrc	r25, 3
    29e6:	85 91       	lpm	r24, Z+
    29e8:	93 ff       	sbrs	r25, 3
    29ea:	81 91       	ld	r24, Z+
    29ec:	6f 01       	movw	r12, r30
    29ee:	88 23       	and	r24, r24
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <vfprintf+0x62>
    29f2:	ab c1       	rjmp	.+854    	; 0x2d4a <vfprintf+0x3b8>
    29f4:	85 32       	cpi	r24, 0x25	; 37
    29f6:	39 f4       	brne	.+14     	; 0x2a06 <vfprintf+0x74>
    29f8:	93 fd       	sbrc	r25, 3
    29fa:	85 91       	lpm	r24, Z+
    29fc:	93 ff       	sbrs	r25, 3
    29fe:	81 91       	ld	r24, Z+
    2a00:	6f 01       	movw	r12, r30
    2a02:	85 32       	cpi	r24, 0x25	; 37
    2a04:	29 f4       	brne	.+10     	; 0x2a10 <vfprintf+0x7e>
    2a06:	b7 01       	movw	r22, r14
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2a0e:	e7 cf       	rjmp	.-50     	; 0x29de <vfprintf+0x4c>
    2a10:	51 2c       	mov	r5, r1
    2a12:	31 2c       	mov	r3, r1
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	20 32       	cpi	r18, 0x20	; 32
    2a18:	a0 f4       	brcc	.+40     	; 0x2a42 <vfprintf+0xb0>
    2a1a:	8b 32       	cpi	r24, 0x2B	; 43
    2a1c:	69 f0       	breq	.+26     	; 0x2a38 <vfprintf+0xa6>
    2a1e:	30 f4       	brcc	.+12     	; 0x2a2c <vfprintf+0x9a>
    2a20:	80 32       	cpi	r24, 0x20	; 32
    2a22:	59 f0       	breq	.+22     	; 0x2a3a <vfprintf+0xa8>
    2a24:	83 32       	cpi	r24, 0x23	; 35
    2a26:	69 f4       	brne	.+26     	; 0x2a42 <vfprintf+0xb0>
    2a28:	20 61       	ori	r18, 0x10	; 16
    2a2a:	2c c0       	rjmp	.+88     	; 0x2a84 <vfprintf+0xf2>
    2a2c:	8d 32       	cpi	r24, 0x2D	; 45
    2a2e:	39 f0       	breq	.+14     	; 0x2a3e <vfprintf+0xac>
    2a30:	80 33       	cpi	r24, 0x30	; 48
    2a32:	39 f4       	brne	.+14     	; 0x2a42 <vfprintf+0xb0>
    2a34:	21 60       	ori	r18, 0x01	; 1
    2a36:	26 c0       	rjmp	.+76     	; 0x2a84 <vfprintf+0xf2>
    2a38:	22 60       	ori	r18, 0x02	; 2
    2a3a:	24 60       	ori	r18, 0x04	; 4
    2a3c:	23 c0       	rjmp	.+70     	; 0x2a84 <vfprintf+0xf2>
    2a3e:	28 60       	ori	r18, 0x08	; 8
    2a40:	21 c0       	rjmp	.+66     	; 0x2a84 <vfprintf+0xf2>
    2a42:	27 fd       	sbrc	r18, 7
    2a44:	27 c0       	rjmp	.+78     	; 0x2a94 <vfprintf+0x102>
    2a46:	30 ed       	ldi	r19, 0xD0	; 208
    2a48:	38 0f       	add	r19, r24
    2a4a:	3a 30       	cpi	r19, 0x0A	; 10
    2a4c:	78 f4       	brcc	.+30     	; 0x2a6c <vfprintf+0xda>
    2a4e:	26 ff       	sbrs	r18, 6
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <vfprintf+0xcc>
    2a52:	fa e0       	ldi	r31, 0x0A	; 10
    2a54:	5f 9e       	mul	r5, r31
    2a56:	30 0d       	add	r19, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	53 2e       	mov	r5, r19
    2a5c:	13 c0       	rjmp	.+38     	; 0x2a84 <vfprintf+0xf2>
    2a5e:	8a e0       	ldi	r24, 0x0A	; 10
    2a60:	38 9e       	mul	r3, r24
    2a62:	30 0d       	add	r19, r0
    2a64:	11 24       	eor	r1, r1
    2a66:	33 2e       	mov	r3, r19
    2a68:	20 62       	ori	r18, 0x20	; 32
    2a6a:	0c c0       	rjmp	.+24     	; 0x2a84 <vfprintf+0xf2>
    2a6c:	8e 32       	cpi	r24, 0x2E	; 46
    2a6e:	21 f4       	brne	.+8      	; 0x2a78 <vfprintf+0xe6>
    2a70:	26 fd       	sbrc	r18, 6
    2a72:	6b c1       	rjmp	.+726    	; 0x2d4a <vfprintf+0x3b8>
    2a74:	20 64       	ori	r18, 0x40	; 64
    2a76:	06 c0       	rjmp	.+12     	; 0x2a84 <vfprintf+0xf2>
    2a78:	8c 36       	cpi	r24, 0x6C	; 108
    2a7a:	11 f4       	brne	.+4      	; 0x2a80 <vfprintf+0xee>
    2a7c:	20 68       	ori	r18, 0x80	; 128
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <vfprintf+0xf2>
    2a80:	88 36       	cpi	r24, 0x68	; 104
    2a82:	41 f4       	brne	.+16     	; 0x2a94 <vfprintf+0x102>
    2a84:	f6 01       	movw	r30, r12
    2a86:	93 fd       	sbrc	r25, 3
    2a88:	85 91       	lpm	r24, Z+
    2a8a:	93 ff       	sbrs	r25, 3
    2a8c:	81 91       	ld	r24, Z+
    2a8e:	6f 01       	movw	r12, r30
    2a90:	81 11       	cpse	r24, r1
    2a92:	c1 cf       	rjmp	.-126    	; 0x2a16 <vfprintf+0x84>
    2a94:	98 2f       	mov	r25, r24
    2a96:	9f 7d       	andi	r25, 0xDF	; 223
    2a98:	95 54       	subi	r25, 0x45	; 69
    2a9a:	93 30       	cpi	r25, 0x03	; 3
    2a9c:	28 f4       	brcc	.+10     	; 0x2aa8 <vfprintf+0x116>
    2a9e:	0c 5f       	subi	r16, 0xFC	; 252
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	ff e3       	ldi	r31, 0x3F	; 63
    2aa4:	f9 83       	std	Y+1, r31	; 0x01
    2aa6:	0d c0       	rjmp	.+26     	; 0x2ac2 <vfprintf+0x130>
    2aa8:	83 36       	cpi	r24, 0x63	; 99
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <vfprintf+0x126>
    2aac:	83 37       	cpi	r24, 0x73	; 115
    2aae:	71 f0       	breq	.+28     	; 0x2acc <vfprintf+0x13a>
    2ab0:	83 35       	cpi	r24, 0x53	; 83
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <vfprintf+0x124>
    2ab4:	5b c0       	rjmp	.+182    	; 0x2b6c <vfprintf+0x1da>
    2ab6:	22 c0       	rjmp	.+68     	; 0x2afc <vfprintf+0x16a>
    2ab8:	f8 01       	movw	r30, r16
    2aba:	80 81       	ld	r24, Z
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	0e 5f       	subi	r16, 0xFE	; 254
    2ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac2:	44 24       	eor	r4, r4
    2ac4:	43 94       	inc	r4
    2ac6:	51 2c       	mov	r5, r1
    2ac8:	54 01       	movw	r10, r8
    2aca:	15 c0       	rjmp	.+42     	; 0x2af6 <vfprintf+0x164>
    2acc:	38 01       	movw	r6, r16
    2ace:	f2 e0       	ldi	r31, 0x02	; 2
    2ad0:	6f 0e       	add	r6, r31
    2ad2:	71 1c       	adc	r7, r1
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	a0 80       	ld	r10, Z
    2ad8:	b1 80       	ldd	r11, Z+1	; 0x01
    2ada:	26 ff       	sbrs	r18, 6
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <vfprintf+0x152>
    2ade:	65 2d       	mov	r22, r5
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <vfprintf+0x156>
    2ae4:	6f ef       	ldi	r22, 0xFF	; 255
    2ae6:	7f ef       	ldi	r23, 0xFF	; 255
    2ae8:	c5 01       	movw	r24, r10
    2aea:	2c 87       	std	Y+12, r18	; 0x0c
    2aec:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <strnlen>
    2af0:	2c 01       	movw	r4, r24
    2af2:	83 01       	movw	r16, r6
    2af4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2af6:	2f 77       	andi	r18, 0x7F	; 127
    2af8:	22 2e       	mov	r2, r18
    2afa:	17 c0       	rjmp	.+46     	; 0x2b2a <vfprintf+0x198>
    2afc:	38 01       	movw	r6, r16
    2afe:	f2 e0       	ldi	r31, 0x02	; 2
    2b00:	6f 0e       	add	r6, r31
    2b02:	71 1c       	adc	r7, r1
    2b04:	f8 01       	movw	r30, r16
    2b06:	a0 80       	ld	r10, Z
    2b08:	b1 80       	ldd	r11, Z+1	; 0x01
    2b0a:	26 ff       	sbrs	r18, 6
    2b0c:	03 c0       	rjmp	.+6      	; 0x2b14 <vfprintf+0x182>
    2b0e:	65 2d       	mov	r22, r5
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <vfprintf+0x186>
    2b14:	6f ef       	ldi	r22, 0xFF	; 255
    2b16:	7f ef       	ldi	r23, 0xFF	; 255
    2b18:	c5 01       	movw	r24, r10
    2b1a:	2c 87       	std	Y+12, r18	; 0x0c
    2b1c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <strnlen_P>
    2b20:	2c 01       	movw	r4, r24
    2b22:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b24:	20 68       	ori	r18, 0x80	; 128
    2b26:	22 2e       	mov	r2, r18
    2b28:	83 01       	movw	r16, r6
    2b2a:	23 fc       	sbrc	r2, 3
    2b2c:	1b c0       	rjmp	.+54     	; 0x2b64 <vfprintf+0x1d2>
    2b2e:	83 2d       	mov	r24, r3
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	48 16       	cp	r4, r24
    2b34:	59 06       	cpc	r5, r25
    2b36:	b0 f4       	brcc	.+44     	; 0x2b64 <vfprintf+0x1d2>
    2b38:	b7 01       	movw	r22, r14
    2b3a:	80 e2       	ldi	r24, 0x20	; 32
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2b42:	3a 94       	dec	r3
    2b44:	f4 cf       	rjmp	.-24     	; 0x2b2e <vfprintf+0x19c>
    2b46:	f5 01       	movw	r30, r10
    2b48:	27 fc       	sbrc	r2, 7
    2b4a:	85 91       	lpm	r24, Z+
    2b4c:	27 fe       	sbrs	r2, 7
    2b4e:	81 91       	ld	r24, Z+
    2b50:	5f 01       	movw	r10, r30
    2b52:	b7 01       	movw	r22, r14
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2b5a:	31 10       	cpse	r3, r1
    2b5c:	3a 94       	dec	r3
    2b5e:	f1 e0       	ldi	r31, 0x01	; 1
    2b60:	4f 1a       	sub	r4, r31
    2b62:	51 08       	sbc	r5, r1
    2b64:	41 14       	cp	r4, r1
    2b66:	51 04       	cpc	r5, r1
    2b68:	71 f7       	brne	.-36     	; 0x2b46 <vfprintf+0x1b4>
    2b6a:	e5 c0       	rjmp	.+458    	; 0x2d36 <vfprintf+0x3a4>
    2b6c:	84 36       	cpi	r24, 0x64	; 100
    2b6e:	11 f0       	breq	.+4      	; 0x2b74 <vfprintf+0x1e2>
    2b70:	89 36       	cpi	r24, 0x69	; 105
    2b72:	39 f5       	brne	.+78     	; 0x2bc2 <vfprintf+0x230>
    2b74:	f8 01       	movw	r30, r16
    2b76:	27 ff       	sbrs	r18, 7
    2b78:	07 c0       	rjmp	.+14     	; 0x2b88 <vfprintf+0x1f6>
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	0c 5f       	subi	r16, 0xFC	; 252
    2b84:	1f 4f       	sbci	r17, 0xFF	; 255
    2b86:	08 c0       	rjmp	.+16     	; 0x2b98 <vfprintf+0x206>
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	88 27       	eor	r24, r24
    2b8e:	77 fd       	sbrc	r23, 7
    2b90:	80 95       	com	r24
    2b92:	98 2f       	mov	r25, r24
    2b94:	0e 5f       	subi	r16, 0xFE	; 254
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	2f 76       	andi	r18, 0x6F	; 111
    2b9a:	b2 2e       	mov	r11, r18
    2b9c:	97 ff       	sbrs	r25, 7
    2b9e:	09 c0       	rjmp	.+18     	; 0x2bb2 <vfprintf+0x220>
    2ba0:	90 95       	com	r25
    2ba2:	80 95       	com	r24
    2ba4:	70 95       	com	r23
    2ba6:	61 95       	neg	r22
    2ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    2baa:	8f 4f       	sbci	r24, 0xFF	; 255
    2bac:	9f 4f       	sbci	r25, 0xFF	; 255
    2bae:	20 68       	ori	r18, 0x80	; 128
    2bb0:	b2 2e       	mov	r11, r18
    2bb2:	2a e0       	ldi	r18, 0x0A	; 10
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	a4 01       	movw	r20, r8
    2bb8:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__ultoa_invert>
    2bbc:	a8 2e       	mov	r10, r24
    2bbe:	a8 18       	sub	r10, r8
    2bc0:	44 c0       	rjmp	.+136    	; 0x2c4a <vfprintf+0x2b8>
    2bc2:	85 37       	cpi	r24, 0x75	; 117
    2bc4:	29 f4       	brne	.+10     	; 0x2bd0 <vfprintf+0x23e>
    2bc6:	2f 7e       	andi	r18, 0xEF	; 239
    2bc8:	b2 2e       	mov	r11, r18
    2bca:	2a e0       	ldi	r18, 0x0A	; 10
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	25 c0       	rjmp	.+74     	; 0x2c1a <vfprintf+0x288>
    2bd0:	f2 2f       	mov	r31, r18
    2bd2:	f9 7f       	andi	r31, 0xF9	; 249
    2bd4:	bf 2e       	mov	r11, r31
    2bd6:	8f 36       	cpi	r24, 0x6F	; 111
    2bd8:	c1 f0       	breq	.+48     	; 0x2c0a <vfprintf+0x278>
    2bda:	18 f4       	brcc	.+6      	; 0x2be2 <vfprintf+0x250>
    2bdc:	88 35       	cpi	r24, 0x58	; 88
    2bde:	79 f0       	breq	.+30     	; 0x2bfe <vfprintf+0x26c>
    2be0:	b4 c0       	rjmp	.+360    	; 0x2d4a <vfprintf+0x3b8>
    2be2:	80 37       	cpi	r24, 0x70	; 112
    2be4:	19 f0       	breq	.+6      	; 0x2bec <vfprintf+0x25a>
    2be6:	88 37       	cpi	r24, 0x78	; 120
    2be8:	21 f0       	breq	.+8      	; 0x2bf2 <vfprintf+0x260>
    2bea:	af c0       	rjmp	.+350    	; 0x2d4a <vfprintf+0x3b8>
    2bec:	2f 2f       	mov	r18, r31
    2bee:	20 61       	ori	r18, 0x10	; 16
    2bf0:	b2 2e       	mov	r11, r18
    2bf2:	b4 fe       	sbrs	r11, 4
    2bf4:	0d c0       	rjmp	.+26     	; 0x2c10 <vfprintf+0x27e>
    2bf6:	8b 2d       	mov	r24, r11
    2bf8:	84 60       	ori	r24, 0x04	; 4
    2bfa:	b8 2e       	mov	r11, r24
    2bfc:	09 c0       	rjmp	.+18     	; 0x2c10 <vfprintf+0x27e>
    2bfe:	24 ff       	sbrs	r18, 4
    2c00:	0a c0       	rjmp	.+20     	; 0x2c16 <vfprintf+0x284>
    2c02:	9f 2f       	mov	r25, r31
    2c04:	96 60       	ori	r25, 0x06	; 6
    2c06:	b9 2e       	mov	r11, r25
    2c08:	06 c0       	rjmp	.+12     	; 0x2c16 <vfprintf+0x284>
    2c0a:	28 e0       	ldi	r18, 0x08	; 8
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	05 c0       	rjmp	.+10     	; 0x2c1a <vfprintf+0x288>
    2c10:	20 e1       	ldi	r18, 0x10	; 16
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <vfprintf+0x288>
    2c16:	20 e1       	ldi	r18, 0x10	; 16
    2c18:	32 e0       	ldi	r19, 0x02	; 2
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	b7 fe       	sbrs	r11, 7
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <vfprintf+0x29c>
    2c20:	60 81       	ld	r22, Z
    2c22:	71 81       	ldd	r23, Z+1	; 0x01
    2c24:	82 81       	ldd	r24, Z+2	; 0x02
    2c26:	93 81       	ldd	r25, Z+3	; 0x03
    2c28:	0c 5f       	subi	r16, 0xFC	; 252
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	06 c0       	rjmp	.+12     	; 0x2c3a <vfprintf+0x2a8>
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0e 5f       	subi	r16, 0xFE	; 254
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3a:	a4 01       	movw	r20, r8
    2c3c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__ultoa_invert>
    2c40:	a8 2e       	mov	r10, r24
    2c42:	a8 18       	sub	r10, r8
    2c44:	fb 2d       	mov	r31, r11
    2c46:	ff 77       	andi	r31, 0x7F	; 127
    2c48:	bf 2e       	mov	r11, r31
    2c4a:	b6 fe       	sbrs	r11, 6
    2c4c:	0b c0       	rjmp	.+22     	; 0x2c64 <vfprintf+0x2d2>
    2c4e:	2b 2d       	mov	r18, r11
    2c50:	2e 7f       	andi	r18, 0xFE	; 254
    2c52:	a5 14       	cp	r10, r5
    2c54:	50 f4       	brcc	.+20     	; 0x2c6a <vfprintf+0x2d8>
    2c56:	b4 fe       	sbrs	r11, 4
    2c58:	0a c0       	rjmp	.+20     	; 0x2c6e <vfprintf+0x2dc>
    2c5a:	b2 fc       	sbrc	r11, 2
    2c5c:	08 c0       	rjmp	.+16     	; 0x2c6e <vfprintf+0x2dc>
    2c5e:	2b 2d       	mov	r18, r11
    2c60:	2e 7e       	andi	r18, 0xEE	; 238
    2c62:	05 c0       	rjmp	.+10     	; 0x2c6e <vfprintf+0x2dc>
    2c64:	7a 2c       	mov	r7, r10
    2c66:	2b 2d       	mov	r18, r11
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <vfprintf+0x2de>
    2c6a:	7a 2c       	mov	r7, r10
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <vfprintf+0x2de>
    2c6e:	75 2c       	mov	r7, r5
    2c70:	24 ff       	sbrs	r18, 4
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <vfprintf+0x2fc>
    2c74:	fe 01       	movw	r30, r28
    2c76:	ea 0d       	add	r30, r10
    2c78:	f1 1d       	adc	r31, r1
    2c7a:	80 81       	ld	r24, Z
    2c7c:	80 33       	cpi	r24, 0x30	; 48
    2c7e:	11 f4       	brne	.+4      	; 0x2c84 <vfprintf+0x2f2>
    2c80:	29 7e       	andi	r18, 0xE9	; 233
    2c82:	09 c0       	rjmp	.+18     	; 0x2c96 <vfprintf+0x304>
    2c84:	22 ff       	sbrs	r18, 2
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <vfprintf+0x302>
    2c88:	73 94       	inc	r7
    2c8a:	73 94       	inc	r7
    2c8c:	04 c0       	rjmp	.+8      	; 0x2c96 <vfprintf+0x304>
    2c8e:	82 2f       	mov	r24, r18
    2c90:	86 78       	andi	r24, 0x86	; 134
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <vfprintf+0x304>
    2c94:	73 94       	inc	r7
    2c96:	23 fd       	sbrc	r18, 3
    2c98:	13 c0       	rjmp	.+38     	; 0x2cc0 <vfprintf+0x32e>
    2c9a:	20 ff       	sbrs	r18, 0
    2c9c:	06 c0       	rjmp	.+12     	; 0x2caa <vfprintf+0x318>
    2c9e:	5a 2c       	mov	r5, r10
    2ca0:	73 14       	cp	r7, r3
    2ca2:	18 f4       	brcc	.+6      	; 0x2caa <vfprintf+0x318>
    2ca4:	53 0c       	add	r5, r3
    2ca6:	57 18       	sub	r5, r7
    2ca8:	73 2c       	mov	r7, r3
    2caa:	73 14       	cp	r7, r3
    2cac:	68 f4       	brcc	.+26     	; 0x2cc8 <vfprintf+0x336>
    2cae:	b7 01       	movw	r22, r14
    2cb0:	80 e2       	ldi	r24, 0x20	; 32
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	2c 87       	std	Y+12, r18	; 0x0c
    2cb6:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2cba:	73 94       	inc	r7
    2cbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cbe:	f5 cf       	rjmp	.-22     	; 0x2caa <vfprintf+0x318>
    2cc0:	73 14       	cp	r7, r3
    2cc2:	10 f4       	brcc	.+4      	; 0x2cc8 <vfprintf+0x336>
    2cc4:	37 18       	sub	r3, r7
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <vfprintf+0x338>
    2cc8:	31 2c       	mov	r3, r1
    2cca:	24 ff       	sbrs	r18, 4
    2ccc:	12 c0       	rjmp	.+36     	; 0x2cf2 <vfprintf+0x360>
    2cce:	b7 01       	movw	r22, r14
    2cd0:	80 e3       	ldi	r24, 0x30	; 48
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	2c 87       	std	Y+12, r18	; 0x0c
    2cd6:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2cda:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cdc:	22 ff       	sbrs	r18, 2
    2cde:	17 c0       	rjmp	.+46     	; 0x2d0e <vfprintf+0x37c>
    2ce0:	21 ff       	sbrs	r18, 1
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <vfprintf+0x358>
    2ce4:	88 e5       	ldi	r24, 0x58	; 88
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <vfprintf+0x35c>
    2cea:	88 e7       	ldi	r24, 0x78	; 120
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	b7 01       	movw	r22, r14
    2cf0:	0c c0       	rjmp	.+24     	; 0x2d0a <vfprintf+0x378>
    2cf2:	82 2f       	mov	r24, r18
    2cf4:	86 78       	andi	r24, 0x86	; 134
    2cf6:	59 f0       	breq	.+22     	; 0x2d0e <vfprintf+0x37c>
    2cf8:	21 fd       	sbrc	r18, 1
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <vfprintf+0x36e>
    2cfc:	80 e2       	ldi	r24, 0x20	; 32
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <vfprintf+0x370>
    2d00:	8b e2       	ldi	r24, 0x2B	; 43
    2d02:	27 fd       	sbrc	r18, 7
    2d04:	8d e2       	ldi	r24, 0x2D	; 45
    2d06:	b7 01       	movw	r22, r14
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2d0e:	a5 14       	cp	r10, r5
    2d10:	38 f4       	brcc	.+14     	; 0x2d20 <vfprintf+0x38e>
    2d12:	b7 01       	movw	r22, r14
    2d14:	80 e3       	ldi	r24, 0x30	; 48
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2d1c:	5a 94       	dec	r5
    2d1e:	f7 cf       	rjmp	.-18     	; 0x2d0e <vfprintf+0x37c>
    2d20:	aa 94       	dec	r10
    2d22:	f4 01       	movw	r30, r8
    2d24:	ea 0d       	add	r30, r10
    2d26:	f1 1d       	adc	r31, r1
    2d28:	80 81       	ld	r24, Z
    2d2a:	b7 01       	movw	r22, r14
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2d32:	a1 10       	cpse	r10, r1
    2d34:	f5 cf       	rjmp	.-22     	; 0x2d20 <vfprintf+0x38e>
    2d36:	33 20       	and	r3, r3
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <vfprintf+0x3aa>
    2d3a:	51 ce       	rjmp	.-862    	; 0x29de <vfprintf+0x4c>
    2d3c:	b7 01       	movw	r22, r14
    2d3e:	80 e2       	ldi	r24, 0x20	; 32
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2d46:	3a 94       	dec	r3
    2d48:	f6 cf       	rjmp	.-20     	; 0x2d36 <vfprintf+0x3a4>
    2d4a:	f7 01       	movw	r30, r14
    2d4c:	86 81       	ldd	r24, Z+6	; 0x06
    2d4e:	97 81       	ldd	r25, Z+7	; 0x07
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <vfprintf+0x3c4>
    2d52:	8f ef       	ldi	r24, 0xFF	; 255
    2d54:	9f ef       	ldi	r25, 0xFF	; 255
    2d56:	2c 96       	adiw	r28, 0x0c	; 12
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	9f 90       	pop	r9
    2d78:	8f 90       	pop	r8
    2d7a:	7f 90       	pop	r7
    2d7c:	6f 90       	pop	r6
    2d7e:	5f 90       	pop	r5
    2d80:	4f 90       	pop	r4
    2d82:	3f 90       	pop	r3
    2d84:	2f 90       	pop	r2
    2d86:	08 95       	ret

00002d88 <__eerd_block_m1284p>:
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22

00002d8c <__eerd_blraw_m1284p>:
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	f9 99       	sbic	0x1f, 1	; 31
    2d90:	fe cf       	rjmp	.-4      	; 0x2d8e <__eerd_blraw_m1284p+0x2>
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <__eerd_blraw_m1284p+0x14>
    2d94:	f2 bd       	out	0x22, r31	; 34
    2d96:	e1 bd       	out	0x21, r30	; 33
    2d98:	f8 9a       	sbi	0x1f, 0	; 31
    2d9a:	31 96       	adiw	r30, 0x01	; 1
    2d9c:	00 b4       	in	r0, 0x20	; 32
    2d9e:	0d 92       	st	X+, r0
    2da0:	41 50       	subi	r20, 0x01	; 1
    2da2:	50 40       	sbci	r21, 0x00	; 0
    2da4:	b8 f7       	brcc	.-18     	; 0x2d94 <__eerd_blraw_m1284p+0x8>
    2da6:	08 95       	ret

00002da8 <__eerd_byte_m1284p>:
    2da8:	f9 99       	sbic	0x1f, 1	; 31
    2daa:	fe cf       	rjmp	.-4      	; 0x2da8 <__eerd_byte_m1284p>
    2dac:	92 bd       	out	0x22, r25	; 34
    2dae:	81 bd       	out	0x21, r24	; 33
    2db0:	f8 9a       	sbi	0x1f, 0	; 31
    2db2:	99 27       	eor	r25, r25
    2db4:	80 b5       	in	r24, 0x20	; 32
    2db6:	08 95       	ret

00002db8 <__eerd_dword_m1284p>:
    2db8:	a6 e1       	ldi	r26, 0x16	; 22
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	44 e0       	ldi	r20, 0x04	; 4
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__eerd_blraw_m1284p>

00002dc4 <__eewr_byte_m1284p>:
    2dc4:	26 2f       	mov	r18, r22

00002dc6 <__eewr_r18_m1284p>:
    2dc6:	f9 99       	sbic	0x1f, 1	; 31
    2dc8:	fe cf       	rjmp	.-4      	; 0x2dc6 <__eewr_r18_m1284p>
    2dca:	1f ba       	out	0x1f, r1	; 31
    2dcc:	92 bd       	out	0x22, r25	; 34
    2dce:	81 bd       	out	0x21, r24	; 33
    2dd0:	20 bd       	out	0x20, r18	; 32
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	fa 9a       	sbi	0x1f, 2	; 31
    2dd8:	f9 9a       	sbi	0x1f, 1	; 31
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	08 95       	ret

00002de0 <__ctype_isfalse>:
    2de0:	99 27       	eor	r25, r25
    2de2:	88 27       	eor	r24, r24

00002de4 <__ctype_istrue>:
    2de4:	08 95       	ret

00002de6 <strnlen_P>:
    2de6:	fc 01       	movw	r30, r24
    2de8:	05 90       	lpm	r0, Z+
    2dea:	61 50       	subi	r22, 0x01	; 1
    2dec:	70 40       	sbci	r23, 0x00	; 0
    2dee:	01 10       	cpse	r0, r1
    2df0:	d8 f7       	brcc	.-10     	; 0x2de8 <strnlen_P+0x2>
    2df2:	80 95       	com	r24
    2df4:	90 95       	com	r25
    2df6:	8e 0f       	add	r24, r30
    2df8:	9f 1f       	adc	r25, r31
    2dfa:	08 95       	ret

00002dfc <strnlen>:
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	61 50       	subi	r22, 0x01	; 1
    2e00:	70 40       	sbci	r23, 0x00	; 0
    2e02:	01 90       	ld	r0, Z+
    2e04:	01 10       	cpse	r0, r1
    2e06:	d8 f7       	brcc	.-10     	; 0x2dfe <strnlen+0x2>
    2e08:	80 95       	com	r24
    2e0a:	90 95       	com	r25
    2e0c:	8e 0f       	add	r24, r30
    2e0e:	9f 1f       	adc	r25, r31
    2e10:	08 95       	ret

00002e12 <fputc>:
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	18 2f       	mov	r17, r24
    2e1c:	09 2f       	mov	r16, r25
    2e1e:	eb 01       	movw	r28, r22
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	81 fd       	sbrc	r24, 1
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <fputc+0x1a>
    2e26:	8f ef       	ldi	r24, 0xFF	; 255
    2e28:	9f ef       	ldi	r25, 0xFF	; 255
    2e2a:	20 c0       	rjmp	.+64     	; 0x2e6c <fputc+0x5a>
    2e2c:	82 ff       	sbrs	r24, 2
    2e2e:	10 c0       	rjmp	.+32     	; 0x2e50 <fputc+0x3e>
    2e30:	4e 81       	ldd	r20, Y+6	; 0x06
    2e32:	5f 81       	ldd	r21, Y+7	; 0x07
    2e34:	2c 81       	ldd	r18, Y+4	; 0x04
    2e36:	3d 81       	ldd	r19, Y+5	; 0x05
    2e38:	42 17       	cp	r20, r18
    2e3a:	53 07       	cpc	r21, r19
    2e3c:	7c f4       	brge	.+30     	; 0x2e5c <fputc+0x4a>
    2e3e:	e8 81       	ld	r30, Y
    2e40:	f9 81       	ldd	r31, Y+1	; 0x01
    2e42:	9f 01       	movw	r18, r30
    2e44:	2f 5f       	subi	r18, 0xFF	; 255
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	39 83       	std	Y+1, r19	; 0x01
    2e4a:	28 83       	st	Y, r18
    2e4c:	10 83       	st	Z, r17
    2e4e:	06 c0       	rjmp	.+12     	; 0x2e5c <fputc+0x4a>
    2e50:	e8 85       	ldd	r30, Y+8	; 0x08
    2e52:	f9 85       	ldd	r31, Y+9	; 0x09
    2e54:	81 2f       	mov	r24, r17
    2e56:	09 95       	icall
    2e58:	89 2b       	or	r24, r25
    2e5a:	29 f7       	brne	.-54     	; 0x2e26 <fputc+0x14>
    2e5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e60:	2f 5f       	subi	r18, 0xFF	; 255
    2e62:	3f 4f       	sbci	r19, 0xFF	; 255
    2e64:	3f 83       	std	Y+7, r19	; 0x07
    2e66:	2e 83       	std	Y+6, r18	; 0x06
    2e68:	81 2f       	mov	r24, r17
    2e6a:	90 2f       	mov	r25, r16
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <__ultoa_invert>:
    2e76:	fa 01       	movw	r30, r20
    2e78:	aa 27       	eor	r26, r26
    2e7a:	28 30       	cpi	r18, 0x08	; 8
    2e7c:	51 f1       	breq	.+84     	; 0x2ed2 <__ultoa_invert+0x5c>
    2e7e:	20 31       	cpi	r18, 0x10	; 16
    2e80:	81 f1       	breq	.+96     	; 0x2ee2 <__ultoa_invert+0x6c>
    2e82:	e8 94       	clt
    2e84:	6f 93       	push	r22
    2e86:	6e 7f       	andi	r22, 0xFE	; 254
    2e88:	6e 5f       	subi	r22, 0xFE	; 254
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e90:	af 4f       	sbci	r26, 0xFF	; 255
    2e92:	b1 e0       	ldi	r27, 0x01	; 1
    2e94:	3e d0       	rcall	.+124    	; 0x2f12 <__ultoa_invert+0x9c>
    2e96:	b4 e0       	ldi	r27, 0x04	; 4
    2e98:	3c d0       	rcall	.+120    	; 0x2f12 <__ultoa_invert+0x9c>
    2e9a:	67 0f       	add	r22, r23
    2e9c:	78 1f       	adc	r23, r24
    2e9e:	89 1f       	adc	r24, r25
    2ea0:	9a 1f       	adc	r25, r26
    2ea2:	a1 1d       	adc	r26, r1
    2ea4:	68 0f       	add	r22, r24
    2ea6:	79 1f       	adc	r23, r25
    2ea8:	8a 1f       	adc	r24, r26
    2eaa:	91 1d       	adc	r25, r1
    2eac:	a1 1d       	adc	r26, r1
    2eae:	6a 0f       	add	r22, r26
    2eb0:	71 1d       	adc	r23, r1
    2eb2:	81 1d       	adc	r24, r1
    2eb4:	91 1d       	adc	r25, r1
    2eb6:	a1 1d       	adc	r26, r1
    2eb8:	20 d0       	rcall	.+64     	; 0x2efa <__ultoa_invert+0x84>
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <__ultoa_invert+0x48>
    2ebc:	68 94       	set
    2ebe:	3f 91       	pop	r19
    2ec0:	2a e0       	ldi	r18, 0x0A	; 10
    2ec2:	26 9f       	mul	r18, r22
    2ec4:	11 24       	eor	r1, r1
    2ec6:	30 19       	sub	r19, r0
    2ec8:	30 5d       	subi	r19, 0xD0	; 208
    2eca:	31 93       	st	Z+, r19
    2ecc:	de f6       	brtc	.-74     	; 0x2e84 <__ultoa_invert+0xe>
    2ece:	cf 01       	movw	r24, r30
    2ed0:	08 95       	ret
    2ed2:	46 2f       	mov	r20, r22
    2ed4:	47 70       	andi	r20, 0x07	; 7
    2ed6:	40 5d       	subi	r20, 0xD0	; 208
    2ed8:	41 93       	st	Z+, r20
    2eda:	b3 e0       	ldi	r27, 0x03	; 3
    2edc:	0f d0       	rcall	.+30     	; 0x2efc <__ultoa_invert+0x86>
    2ede:	c9 f7       	brne	.-14     	; 0x2ed2 <__ultoa_invert+0x5c>
    2ee0:	f6 cf       	rjmp	.-20     	; 0x2ece <__ultoa_invert+0x58>
    2ee2:	46 2f       	mov	r20, r22
    2ee4:	4f 70       	andi	r20, 0x0F	; 15
    2ee6:	40 5d       	subi	r20, 0xD0	; 208
    2ee8:	4a 33       	cpi	r20, 0x3A	; 58
    2eea:	18 f0       	brcs	.+6      	; 0x2ef2 <__ultoa_invert+0x7c>
    2eec:	49 5d       	subi	r20, 0xD9	; 217
    2eee:	31 fd       	sbrc	r19, 1
    2ef0:	40 52       	subi	r20, 0x20	; 32
    2ef2:	41 93       	st	Z+, r20
    2ef4:	02 d0       	rcall	.+4      	; 0x2efa <__ultoa_invert+0x84>
    2ef6:	a9 f7       	brne	.-22     	; 0x2ee2 <__ultoa_invert+0x6c>
    2ef8:	ea cf       	rjmp	.-44     	; 0x2ece <__ultoa_invert+0x58>
    2efa:	b4 e0       	ldi	r27, 0x04	; 4
    2efc:	a6 95       	lsr	r26
    2efe:	97 95       	ror	r25
    2f00:	87 95       	ror	r24
    2f02:	77 95       	ror	r23
    2f04:	67 95       	ror	r22
    2f06:	ba 95       	dec	r27
    2f08:	c9 f7       	brne	.-14     	; 0x2efc <__ultoa_invert+0x86>
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	61 05       	cpc	r22, r1
    2f0e:	71 05       	cpc	r23, r1
    2f10:	08 95       	ret
    2f12:	9b 01       	movw	r18, r22
    2f14:	ac 01       	movw	r20, r24
    2f16:	0a 2e       	mov	r0, r26
    2f18:	06 94       	lsr	r0
    2f1a:	57 95       	ror	r21
    2f1c:	47 95       	ror	r20
    2f1e:	37 95       	ror	r19
    2f20:	27 95       	ror	r18
    2f22:	ba 95       	dec	r27
    2f24:	c9 f7       	brne	.-14     	; 0x2f18 <__ultoa_invert+0xa2>
    2f26:	62 0f       	add	r22, r18
    2f28:	73 1f       	adc	r23, r19
    2f2a:	84 1f       	adc	r24, r20
    2f2c:	95 1f       	adc	r25, r21
    2f2e:	a0 1d       	adc	r26, r0
    2f30:	08 95       	ret

00002f32 <__muluhisi3>:
    2f32:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__umulhisi3>
    2f36:	a5 9f       	mul	r26, r21
    2f38:	90 0d       	add	r25, r0
    2f3a:	b4 9f       	mul	r27, r20
    2f3c:	90 0d       	add	r25, r0
    2f3e:	a4 9f       	mul	r26, r20
    2f40:	80 0d       	add	r24, r0
    2f42:	91 1d       	adc	r25, r1
    2f44:	11 24       	eor	r1, r1
    2f46:	08 95       	ret

00002f48 <__umulhisi3>:
    2f48:	a2 9f       	mul	r26, r18
    2f4a:	b0 01       	movw	r22, r0
    2f4c:	b3 9f       	mul	r27, r19
    2f4e:	c0 01       	movw	r24, r0
    2f50:	a3 9f       	mul	r26, r19
    2f52:	70 0d       	add	r23, r0
    2f54:	81 1d       	adc	r24, r1
    2f56:	11 24       	eor	r1, r1
    2f58:	91 1d       	adc	r25, r1
    2f5a:	b2 9f       	mul	r27, r18
    2f5c:	70 0d       	add	r23, r0
    2f5e:	81 1d       	adc	r24, r1
    2f60:	11 24       	eor	r1, r1
    2f62:	91 1d       	adc	r25, r1
    2f64:	08 95       	ret

00002f66 <_exit>:
    2f66:	f8 94       	cli

00002f68 <__stop_program>:
    2f68:	ff cf       	rjmp	.-2      	; 0x2f68 <__stop_program>
