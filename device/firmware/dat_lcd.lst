
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035a  00800100  00004d4a  00004dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080045a  0080045a  00005138  2**0
                  ALLOC
  3 .stab         0000cf0c  00000000  00000000  00005138  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ea9  00000000  00000000  00012044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00014eed  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ca 00 	jmp	0x194	; 0x194 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_3>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_13>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      50:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_20>
      54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      68:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      6c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      70:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_28>
      74:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      78:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      7c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      80:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      84:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      88:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 08       	sbc	r3, r15
      d8:	00 00       	nop
      da:	00 be       	out	0x30, r0	; 48
      dc:	92 24       	eor	r9, r2
      de:	49 12       	cpse	r4, r25
      e0:	3e ab       	std	Y+54, r19	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	2a be       	out	0x3a, r2	; 58
      e6:	cd cc       	rjmp	.-1638   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      e8:	cc 4c       	sbci	r28, 0xCC	; 204
      ea:	3e 00       	.word	0x003e	; ????
      ec:	00 00       	nop
      ee:	80 be       	out	0x30, r8	; 48
      f0:	ab aa       	std	Y+51, r10	; 0x33
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	00 bf       	out	0x30, r16	; 48
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
     102:	00 00       	nop
     104:	08 41       	sbci	r16, 0x18	; 24
     106:	78 d3       	rcall	.+1776   	; 0x7f8 <instruction_read+0xd4>
     108:	bb 43       	sbci	r27, 0x3B	; 59
     10a:	87 d1       	rcall	.+782    	; 0x41a <__vector_28+0x9c>
     10c:	13 3d       	cpi	r17, 0xD3	; 211
     10e:	19 0e       	add	r1, r25
     110:	3c c3       	rjmp	.+1656   	; 0x78a <instruction_read+0x66>
     112:	bd 42       	sbci	r27, 0x2D	; 45
     114:	82 ad       	ldd	r24, Z+58	; 0x3a
     116:	2b 3e       	cpi	r18, 0xEB	; 235
     118:	68 ec       	ldi	r22, 0xC8	; 200
     11a:	82 76       	andi	r24, 0x62	; 98
     11c:	be d9       	rcall	.-3204   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	a9 3e       	cpi	r26, 0xE9	; 233
     122:	4c 80       	ldd	r4, Y+4	; 0x04
     124:	ef ff       	.word	0xffef	; ????
     126:	be 01       	movw	r22, r28
     128:	c4 ff       	sbrs	r28, 4
     12a:	7f 3f       	cpi	r23, 0xFF	; 255
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	00 07       	cpc	r16, r16
     132:	63 42       	sbci	r22, 0x23	; 35
     134:	36 b7       	in	r19, 0x36	; 54
     136:	9b d8       	rcall	.-3786   	; 0xfffff26e <__eeprom_end+0xff7ef26e>
     138:	a7 1a       	sub	r10, r23
     13a:	39 68       	ori	r19, 0x89	; 137
     13c:	56 18       	sub	r5, r6
     13e:	ae ba       	out	0x1e, r10	; 30
     140:	ab 55       	subi	r26, 0x5B	; 91
     142:	8c 1d       	adc	r24, r12
     144:	3c b7       	in	r19, 0x3c	; 60
     146:	cc 57       	subi	r28, 0x7C	; 124
     148:	63 bd       	out	0x23, r22	; 35
     14a:	6d ed       	ldi	r22, 0xDD	; 221
     14c:	fd 75       	andi	r31, 0x5D	; 93
     14e:	3e f6       	brtc	.-114    	; 0xde <__SREG__+0x9f>
     150:	17 72       	andi	r17, 0x27	; 39
     152:	31 bf       	out	0x31, r19	; 49
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	3f 49       	sbci	r19, 0x9F	; 159

00000159 <pstr_inf>:
     159:	49 4e 46                                            INF

0000015c <pstr_inity>:
     15c:	49 4e 49 54 59                                      INITY

00000161 <pstr_nan>:
     161:	4e 41 4e                                            NAN

00000164 <pwr_p10>:
     164:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     174:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

0000017c <pwr_m10>:
     17c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     18c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e4       	ldi	r29, 0x40	; 64
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	14 e0       	ldi	r17, 0x04	; 4
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	ea e4       	ldi	r30, 0x4A	; 74
     1a8:	fd e4       	ldi	r31, 0x4D	; 77
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	0b bf       	out	0x3b, r16	; 59
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x14>
     1b0:	07 90       	elpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	aa 35       	cpi	r26, 0x5A	; 90
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0x10>

000001ba <__do_clear_bss>:
     1ba:	14 e0       	ldi	r17, 0x04	; 4
     1bc:	aa e5       	ldi	r26, 0x5A	; 90
     1be:	b4 e0       	ldi	r27, 0x04	; 4
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	a6 36       	cpi	r26, 0x66	; 102
     1c6:	b1 07       	cpc	r27, r17
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <main>
     1ce:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <__vector_3>:
    return 0; //should never get here.
}


//---- PIN CHANGE INTERRUPT (PUSHBUTTON PRESSED) ----//
ISR(INT2_vect) {
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	0b b6       	in	r0, 0x3b	; 59
     1e2:	0f 92       	push	r0
     1e4:	2f 93       	push	r18
     1e6:	3f 93       	push	r19
     1e8:	4f 93       	push	r20
     1ea:	5f 93       	push	r21
     1ec:	6f 93       	push	r22
     1ee:	7f 93       	push	r23
     1f0:	8f 93       	push	r24
     1f2:	9f 93       	push	r25
     1f4:	af 93       	push	r26
     1f6:	bf 93       	push	r27
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
    if ((device->button_pressable)&&(device->op_mode!=MD_UPDATE_REQUIRED)&&(device->op_mode!=MD_UPDATE))
     1fc:	e0 91 5e 04 	lds	r30, 0x045E
     200:	f0 91 5f 04 	lds	r31, 0x045F
     204:	df 01       	movw	r26, r30
     206:	af 5f       	subi	r26, 0xFF	; 255
     208:	be 4f       	sbci	r27, 0xFE	; 254
     20a:	8d 91       	ld	r24, X+
     20c:	9c 91       	ld	r25, X
     20e:	89 2b       	or	r24, r25
     210:	31 f1       	breq	.+76     	; 0x25e <__vector_3+0x88>
     212:	80 85       	ldd	r24, Z+8	; 0x08
     214:	91 85       	ldd	r25, Z+9	; 0x09
     216:	06 97       	sbiw	r24, 0x06	; 6
     218:	11 f1       	breq	.+68     	; 0x25e <__vector_3+0x88>
     21a:	80 85       	ldd	r24, Z+8	; 0x08
     21c:	91 85       	ldd	r25, Z+9	; 0x09
     21e:	07 97       	sbiw	r24, 0x07	; 7
     220:	f1 f0       	breq	.+60     	; 0x25e <__vector_3+0x88>
    {
        //increment the op_mode
        device->op_mode++;
     222:	80 85       	ldd	r24, Z+8	; 0x08
     224:	91 85       	ldd	r25, Z+9	; 0x09
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	91 87       	std	Z+9, r25	; 0x09
     22a:	80 87       	std	Z+8, r24	; 0x08
        //loop the op_mode
        if (device->op_mode >= NUM_MODES)
     22c:	80 85       	ldd	r24, Z+8	; 0x08
     22e:	91 85       	ldd	r25, Z+9	; 0x09
     230:	06 97       	sbiw	r24, 0x06	; 6
     232:	14 f0       	brlt	.+4      	; 0x238 <__vector_3+0x62>
            device->op_mode = 0;
     234:	11 86       	std	Z+9, r1	; 0x09
     236:	10 86       	std	Z+8, r1	; 0x08
        //light up the mode LEDs
        sync_leds(device);
     238:	cf 01       	movw	r24, r30
     23a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <sync_leds>
        //debounce the button
        device->button_pressable = 0;
     23e:	e0 91 5e 04 	lds	r30, 0x045E
     242:	f0 91 5f 04 	lds	r31, 0x045F
     246:	ef 5f       	subi	r30, 0xFF	; 255
     248:	fe 4f       	sbci	r31, 0xFE	; 254
     24a:	11 82       	std	Z+1, r1	; 0x01
     24c:	10 82       	st	Z, r1
        //reset the debounce timer
        TCNT1 &= ~(0xFFFF);
     24e:	80 91 84 00 	lds	r24, 0x0084
     252:	90 91 85 00 	lds	r25, 0x0085
     256:	10 92 85 00 	sts	0x0085, r1
     25a:	10 92 84 00 	sts	0x0084, r1
    }
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	7f 91       	pop	r23
     26c:	6f 91       	pop	r22
     26e:	5f 91       	pop	r21
     270:	4f 91       	pop	r20
     272:	3f 91       	pop	r19
     274:	2f 91       	pop	r18
     276:	0f 90       	pop	r0
     278:	0b be       	out	0x3b, r0	; 59
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <__vector_13>:

//---- TIMER INTERRUPT (PUSHBUTTON DEBOUNCE) ----//
ISR(TIMER1_COMPA_vect) {
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	0b b6       	in	r0, 0x3b	; 59
     290:	0f 92       	push	r0
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
    //blink the LEDs when desired
    if (device->blinking)
     2a4:	80 91 5e 04 	lds	r24, 0x045E
     2a8:	90 91 5f 04 	lds	r25, 0x045F
     2ac:	fc 01       	movw	r30, r24
     2ae:	e7 5f       	subi	r30, 0xF7	; 247
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	23 2b       	or	r18, r19
     2b8:	e1 f1       	breq	.+120    	; 0x332 <__vector_13+0xae>
    {
        if (device->blinker1 > -1)
     2ba:	fc 01       	movw	r30, r24
     2bc:	ed 5f       	subi	r30, 0xFD	; 253
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	20 81       	ld	r18, Z
     2c2:	31 81       	ldd	r19, Z+1	; 0x01
     2c4:	37 fd       	sbrc	r19, 7
     2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <__vector_13+0x5c>
            PORTB ^= 1<<device->blinker1;
     2c8:	65 b1       	in	r22, 0x05	; 5
     2ca:	40 81       	ld	r20, Z
     2cc:	51 81       	ldd	r21, Z+1	; 0x01
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	04 2e       	mov	r0, r20
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <__vector_13+0x54>
     2d6:	22 0f       	add	r18, r18
     2d8:	0a 94       	dec	r0
     2da:	ea f7       	brpl	.-6      	; 0x2d6 <__vector_13+0x52>
     2dc:	62 27       	eor	r22, r18
     2de:	65 b9       	out	0x05, r22	; 5

        if (device->blinker2 > -1)
     2e0:	fc 01       	movw	r30, r24
     2e2:	eb 5f       	subi	r30, 0xFB	; 251
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	80 81       	ld	r24, Z
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	97 fd       	sbrc	r25, 7
     2ec:	0c c0       	rjmp	.+24     	; 0x306 <__vector_13+0x82>
            PORTB ^= 1<<device->blinker2;
     2ee:	45 b1       	in	r20, 0x05	; 5
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	02 2e       	mov	r0, r18
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <__vector_13+0x7a>
     2fc:	88 0f       	add	r24, r24
     2fe:	0a 94       	dec	r0
     300:	ea f7       	brpl	.-6      	; 0x2fc <__vector_13+0x78>
     302:	48 27       	eor	r20, r24
     304:	45 b9       	out	0x05, r20	; 5

        if (device->blinker3 > -1)
     306:	e0 91 5e 04 	lds	r30, 0x045E
     30a:	f0 91 5f 04 	lds	r31, 0x045F
     30e:	e9 5f       	subi	r30, 0xF9	; 249
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	97 fd       	sbrc	r25, 7
     318:	0c c0       	rjmp	.+24     	; 0x332 <__vector_13+0xae>
            PORTB ^= 1<<device->blinker3;
     31a:	45 b1       	in	r20, 0x05	; 5
     31c:	20 81       	ld	r18, Z
     31e:	31 81       	ldd	r19, Z+1	; 0x01
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 2e       	mov	r0, r18
     326:	01 c0       	rjmp	.+2      	; 0x32a <__vector_13+0xa6>
     328:	88 0f       	add	r24, r24
     32a:	0a 94       	dec	r0
     32c:	ea f7       	brpl	.-6      	; 0x328 <__vector_13+0xa4>
     32e:	48 27       	eor	r20, r24
     330:	45 b9       	out	0x05, r20	; 5
    }

    //reset the debounce timer
    TCNT1 &= ~(0xFFFF);
     332:	80 91 84 00 	lds	r24, 0x0084
     336:	90 91 85 00 	lds	r25, 0x0085
     33a:	10 92 85 00 	sts	0x0085, r1
     33e:	10 92 84 00 	sts	0x0084, r1
    if (device->button_pressable == 0)
     342:	e0 91 5e 04 	lds	r30, 0x045E
     346:	f0 91 5f 04 	lds	r31, 0x045F
     34a:	ef 5f       	subi	r30, 0xFF	; 255
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	89 2b       	or	r24, r25
     354:	21 f4       	brne	.+8      	; 0x35e <__vector_13+0xda>
    {
        //start accepting new button presses
        device->button_pressable = 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	80 83       	st	Z, r24
    }
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0b be       	out	0x3b, r0	; 59
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <__vector_28>:

//---- SERIAL DATABASE UPDATE INTERRUPT ----//
ISR(USART1_RX_vect) {
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	0b b6       	in	r0, 0x3b	; 59
     38a:	0f 92       	push	r0
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	ef 93       	push	r30
     3a2:	ff 93       	push	r31
    //remember the last 3 bytes received (to handle start + end sequences)
    device->serial_history[2] = device->serial_history[1];
     3a4:	80 91 5e 04 	lds	r24, 0x045E
     3a8:	90 91 5f 04 	lds	r25, 0x045F
     3ac:	fc 01       	movw	r30, r24
     3ae:	ef 56       	subi	r30, 0x6F	; 111
     3b0:	ff 4f       	sbci	r31, 0xFF	; 255
     3b2:	20 81       	ld	r18, Z
     3b4:	dc 01       	movw	r26, r24
     3b6:	ae 56       	subi	r26, 0x6E	; 110
     3b8:	bf 4f       	sbci	r27, 0xFF	; 255
     3ba:	2c 93       	st	X, r18
    device->serial_history[1] = device->serial_history[0];
     3bc:	dc 01       	movw	r26, r24
     3be:	a0 57       	subi	r26, 0x70	; 112
     3c0:	bf 4f       	sbci	r27, 0xFF	; 255
     3c2:	2c 91       	ld	r18, X
     3c4:	20 83       	st	Z, r18
    //Read most recent value out of the UART buffer
    device->serial_history[0] = UDR1;
     3c6:	20 91 ce 00 	lds	r18, 0x00CE
     3ca:	2c 93       	st	X, r18
    //if a serial update is in progress, write to the receive buffer
    if (device->op_mode==MD_UPDATE)
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 85       	ldd	r18, Z+8	; 0x08
     3d0:	31 85       	ldd	r19, Z+9	; 0x09
     3d2:	27 30       	cpi	r18, 0x07	; 7
     3d4:	31 05       	cpc	r19, r1
     3d6:	61 f4       	brne	.+24     	; 0x3f0 <__vector_28+0x72>
    {
        device->rxBuffer[device->rxWritePos] = device->serial_history[0];
     3d8:	e1 57       	subi	r30, 0x71	; 113
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	30 81       	ld	r19, Z
     3de:	2c 91       	ld	r18, X
     3e0:	dc 01       	movw	r26, r24
     3e2:	a3 0f       	add	r26, r19
     3e4:	b1 1d       	adc	r27, r1
     3e6:	1e 96       	adiw	r26, 0x0e	; 14
     3e8:	2c 93       	st	X, r18
        device->rxWritePos++;
     3ea:	20 81       	ld	r18, Z
     3ec:	2f 5f       	subi	r18, 0xFF	; 255
     3ee:	20 83       	st	Z, r18
    }
    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart(device)){
     3f0:	0e 94 3c 10 	call	0x2078	; 0x2078 <detectSerialStart>
     3f4:	e0 91 5e 04 	lds	r30, 0x045E
     3f8:	f0 91 5f 04 	lds	r31, 0x045F
     3fc:	89 2b       	or	r24, r25
     3fe:	21 f0       	breq	.+8      	; 0x408 <__vector_28+0x8a>
        device->op_mode = MD_UPDATE;
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	91 87       	std	Z+9, r25	; 0x09
     406:	80 87       	std	Z+8, r24	; 0x08
    }
    //make the receive buffer loop
    if(device->rxWritePos >= RX_BUFFER_SIZE)
     408:	e1 57       	subi	r30, 0x71	; 113
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	80 81       	ld	r24, Z
     40e:	87 fd       	sbrc	r24, 7
    {
        device->rxWritePos = 0;
     410:	10 82       	st	Z, r1
    }
}
     412:	ff 91       	pop	r31
     414:	ef 91       	pop	r30
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	0f 90       	pop	r0
     42c:	0b be       	out	0x3b, r0	; 59
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <__vector_20>:

//---- SERIAL GPS INTERRUPT ----//
ISR(USART0_RX_vect) { 
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	0b b6       	in	r0, 0x3b	; 59
     444:	0f 92       	push	r0
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	ef 93       	push	r30
     45c:	ff 93       	push	r31
        int k;
        //prevent buffer overflow
        if (device->gps_rxCount >= GPS_RX_BUFFER_SIZE)
     45e:	80 91 5e 04 	lds	r24, 0x045E
     462:	90 91 5f 04 	lds	r25, 0x045F
     466:	fc 01       	movw	r30, r24
     468:	ed 56       	subi	r30, 0x6D	; 109
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	20 81       	ld	r18, Z
     46e:	31 81       	ldd	r19, Z+1	; 0x01
     470:	20 35       	cpi	r18, 0x50	; 80
     472:	31 05       	cpc	r19, r1
     474:	7c f0       	brlt	.+30     	; 0x494 <__vector_20+0x5c>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
        {
            for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
                device->gps_rxBuffer[k]='\0';
     47a:	dc 01       	movw	r26, r24
     47c:	a2 0f       	add	r26, r18
     47e:	b3 1f       	adc	r27, r19
     480:	ab 56       	subi	r26, 0x6B	; 107
     482:	bf 4f       	sbci	r27, 0xFF	; 255
     484:	1c 92       	st	X, r1
ISR(USART0_RX_vect) { 
        int k;
        //prevent buffer overflow
        if (device->gps_rxCount >= GPS_RX_BUFFER_SIZE)
        {
            for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	20 35       	cpi	r18, 0x50	; 80
     48c:	31 05       	cpc	r19, r1
     48e:	a9 f7       	brne	.-22     	; 0x47a <__vector_20+0x42>
                device->gps_rxBuffer[k]='\0';

            device->gps_rxCount = 0; 
     490:	11 82       	std	Z+1, r1	; 0x01
     492:	10 82       	st	Z, r1
        }
        //Read value out of the UART buffer
        device->gps_rxBuffer[device->gps_rxCount] = UDR0;
     494:	fc 01       	movw	r30, r24
     496:	ed 56       	subi	r30, 0x6D	; 109
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	20 81       	ld	r18, Z
     49c:	31 81       	ldd	r19, Z+1	; 0x01
     49e:	40 91 c6 00 	lds	r20, 0x00C6
     4a2:	28 0f       	add	r18, r24
     4a4:	39 1f       	adc	r19, r25
     4a6:	d9 01       	movw	r26, r18
     4a8:	ab 56       	subi	r26, 0x6B	; 107
     4aa:	bf 4f       	sbci	r27, 0xFF	; 255
     4ac:	4c 93       	st	X, r20
        device->gps_rxCount ++;
     4ae:	20 81       	ld	r18, Z
     4b0:	31 81       	ldd	r19, Z+1	; 0x01
     4b2:	2f 5f       	subi	r18, 0xFF	; 255
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
     4b6:	31 83       	std	Z+1, r19	; 0x01
     4b8:	20 83       	st	Z, r18
        //start new buffer if receive $
        if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
     4ba:	01 90       	ld	r0, Z+
     4bc:	f0 81       	ld	r31, Z
     4be:	e0 2d       	mov	r30, r0
     4c0:	e8 0f       	add	r30, r24
     4c2:	f9 1f       	adc	r31, r25
     4c4:	ec 56       	subi	r30, 0x6C	; 108
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	20 81       	ld	r18, Z
     4ca:	24 32       	cpi	r18, 0x24	; 36
     4cc:	c9 f4       	brne	.+50     	; 0x500 <__vector_20+0xc8>
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
        {
            for (k=1; k<GPS_RX_BUFFER_SIZE; k++)
                device->gps_rxBuffer[k]='\0'; 
     4d2:	fc 01       	movw	r30, r24
     4d4:	e2 0f       	add	r30, r18
     4d6:	f3 1f       	adc	r31, r19
     4d8:	eb 56       	subi	r30, 0x6B	; 107
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	10 82       	st	Z, r1
        device->gps_rxBuffer[device->gps_rxCount] = UDR0;
        device->gps_rxCount ++;
        //start new buffer if receive $
        if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
        {
            for (k=1; k<GPS_RX_BUFFER_SIZE; k++)
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	20 35       	cpi	r18, 0x50	; 80
     4e4:	31 05       	cpc	r19, r1
     4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__vector_20+0x9a>
                device->gps_rxBuffer[k]='\0'; 

            device->gps_rxBuffer[0] = '$';
     4e8:	fc 01       	movw	r30, r24
     4ea:	eb 56       	subi	r30, 0x6B	; 107
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	24 e2       	ldi	r18, 0x24	; 36
     4f0:	20 83       	st	Z, r18
            device->gps_rxCount = 1; 
     4f2:	fc 01       	movw	r30, r24
     4f4:	ed 56       	subi	r30, 0x6D	; 109
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	31 83       	std	Z+1, r19	; 0x01
     4fe:	20 83       	st	Z, r18
        }
        //carriage return ----> parse the raw sentence data and set the gps struct update trigger
        if ((device->gps_rxBuffer[device->gps_rxCount-1]=='\r')) {
     500:	fc 01       	movw	r30, r24
     502:	ed 56       	subi	r30, 0x6D	; 109
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	01 90       	ld	r0, Z+
     508:	f0 81       	ld	r31, Z
     50a:	e0 2d       	mov	r30, r0
     50c:	e8 0f       	add	r30, r24
     50e:	f9 1f       	adc	r31, r25
     510:	ec 56       	subi	r30, 0x6C	; 108
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	20 81       	ld	r18, Z
     516:	2d 30       	cpi	r18, 0x0D	; 13
     518:	81 f4       	brne	.+32     	; 0x53a <__vector_20+0x102>
            if (tag_check(device))
     51a:	0e 94 b2 05 	call	0xb64	; 0xb64 <tag_check>
     51e:	89 2b       	or	r24, r25
     520:	61 f0       	breq	.+24     	; 0x53a <__vector_20+0x102>
            {
                //no more gps interrupts are needed (or desired) for now
                disable_gps();
     522:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <disable_gps>
                //trigger a gps_data struct update
                device->gps_update_trigger = 1;
     526:	e0 91 5e 04 	lds	r30, 0x045E
     52a:	f0 91 5f 04 	lds	r31, 0x045F
     52e:	e1 50       	subi	r30, 0x01	; 1
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	91 83       	std	Z+1, r25	; 0x01
     538:	80 83       	st	Z, r24
            }
        }
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0b be       	out	0x3b, r0	; 59
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     560:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     562:	81 ee       	ldi	r24, 0xE1	; 225
     564:	94 e0       	ldi	r25, 0x04	; 4
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <datarw+0x6>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <datarw+0xc>
     56c:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     56e:	12 98       	cbi	0x02, 2	; 2
     570:	08 95       	ret

00000572 <letterwrite>:
	return 0;
}

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	11 f4       	brne	.+4      	; 0x57a <letterwrite+0x8>
     576:	16 9a       	sbi	0x02, 6	; 2
     578:	01 c0       	rjmp	.+2      	; 0x57c <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     57a:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     57c:	61 30       	cpi	r22, 0x01	; 1
     57e:	71 05       	cpc	r23, r1
     580:	11 f4       	brne	.+4      	; 0x586 <letterwrite+0x14>
     582:	15 9a       	sbi	0x02, 5	; 2
     584:	01 c0       	rjmp	.+2      	; 0x588 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     586:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     588:	41 30       	cpi	r20, 0x01	; 1
     58a:	51 05       	cpc	r21, r1
     58c:	11 f4       	brne	.+4      	; 0x592 <letterwrite+0x20>
     58e:	14 9a       	sbi	0x02, 4	; 2
     590:	01 c0       	rjmp	.+2      	; 0x594 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     592:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	11 f4       	brne	.+4      	; 0x59e <letterwrite+0x2c>
     59a:	13 9a       	sbi	0x02, 3	; 2
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     59e:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     5a0:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     5a4:	89 ef       	ldi	r24, 0xF9	; 249
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <letterwrite+0x36>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <letterwrite+0x3c>
     5ae:	00 00       	nop
     5b0:	08 95       	ret

000005b2 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     5b2:	10 92 5b 04 	sts	0x045B, r1
     5b6:	10 92 5a 04 	sts	0x045A, r1
    line_num = 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 01 01 	sts	0x0101, r25
     5c2:	80 93 00 01 	sts	0x0100, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     5c6:	81 b1       	in	r24, 0x01	; 1
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	81 b9       	out	0x01, r24	; 1
     5cc:	87 e8       	ldi	r24, 0x87	; 135
     5ce:	93 e1       	ldi	r25, 0x13	; 19
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <lcd_init+0x1e>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <lcd_init+0x24>
     5d6:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     5d8:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     5da:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     5dc:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     5de:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     5e0:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     5e2:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     5e4:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     5e6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     5ea:	81 ee       	ldi	r24, 0xE1	; 225
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <lcd_init+0x3c>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <lcd_init+0x42>
     5f4:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     5f6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     5fa:	89 ef       	ldi	r24, 0xF9	; 249
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <lcd_init+0x4c>
     602:	00 c0       	rjmp	.+0      	; 0x604 <lcd_init+0x52>
     604:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     606:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     60a:	89 ef       	ldi	r24, 0xF9	; 249
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <lcd_init+0x5c>
     612:	00 c0       	rjmp	.+0      	; 0x614 <lcd_init+0x62>
     614:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     616:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     618:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     61a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     61c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     61e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <lcd_init+0x74>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <lcd_init+0x7a>
     62c:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     62e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     630:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     632:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     634:	13 98       	cbi	0x02, 3	; 2
    datarw();
     636:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     63a:	89 ef       	ldi	r24, 0xF9	; 249
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <lcd_init+0x8c>
     642:	00 c0       	rjmp	.+0      	; 0x644 <lcd_init+0x92>
     644:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     646:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     648:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     64a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     64c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     64e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     652:	89 ef       	ldi	r24, 0xF9	; 249
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <lcd_init+0xa4>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <lcd_init+0xaa>
     65c:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     65e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     660:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     662:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     664:	13 98       	cbi	0x02, 3	; 2
    datarw();
     666:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     66a:	89 ef       	ldi	r24, 0xF9	; 249
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <lcd_init+0xbc>
     672:	00 c0       	rjmp	.+0      	; 0x674 <lcd_init+0xc2>
     674:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     676:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     678:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     67a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     67c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     67e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     682:	89 ef       	ldi	r24, 0xF9	; 249
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <lcd_init+0xd4>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <lcd_init+0xda>
     68c:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     68e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     690:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     692:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     694:	13 98       	cbi	0x02, 3	; 2
    datarw();
     696:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     69a:	89 ef       	ldi	r24, 0xF9	; 249
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <lcd_init+0xec>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <lcd_init+0xf2>
     6a4:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     6a6:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     6a8:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     6aa:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     6ac:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     6ae:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6b2:	89 ef       	ldi	r24, 0xF9	; 249
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <lcd_init+0x104>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <lcd_init+0x10a>
     6bc:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     6be:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     6c0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     6c2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     6c4:	13 98       	cbi	0x02, 3	; 2
    datarw();
     6c6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6ca:	89 ef       	ldi	r24, 0xF9	; 249
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <lcd_init+0x11c>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <lcd_init+0x122>
     6d4:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     6d6:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     6d8:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     6da:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     6dc:	13 98       	cbi	0x02, 3	; 2
    datarw();
     6de:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6e2:	89 ef       	ldi	r24, 0xF9	; 249
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_init+0x134>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <lcd_init+0x13a>
     6ec:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     6ee:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     6f0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     6f2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     6f4:	13 98       	cbi	0x02, 3	; 2
    datarw();
     6f6:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     6fa:	89 ef       	ldi	r24, 0xF9	; 249
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <lcd_init+0x14c>
     702:	00 c0       	rjmp	.+0      	; 0x704 <lcd_init+0x152>
     704:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     706:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     708:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     70a:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     70c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     70e:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
     712:	89 ef       	ldi	r24, 0xF9	; 249
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <lcd_init+0x164>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <lcd_init+0x16a>
     71c:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	08 95       	ret

00000724 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     72a:	21 b1       	in	r18, 0x01	; 1
     72c:	27 78       	andi	r18, 0x87	; 135
     72e:	21 b9       	out	0x01, r18	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     730:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     732:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     734:	12 9a       	sbi	0x02, 2	; 2
     736:	81 ee       	ldi	r24, 0xE1	; 225
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <instruction_read+0x16>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <instruction_read+0x1c>
     740:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     742:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     744:	22 b1       	in	r18, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     746:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     748:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     74a:	12 98       	cbi	0x02, 2	; 2
     74c:	89 ef       	ldi	r24, 0xF9	; 249
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <instruction_read+0x2c>
     754:	00 c0       	rjmp	.+0      	; 0x756 <instruction_read+0x32>
     756:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     758:	12 9a       	sbi	0x02, 2	; 2
     75a:	81 ee       	ldi	r24, 0xE1	; 225
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <instruction_read+0x3a>
     762:	00 c0       	rjmp	.+0      	; 0x764 <instruction_read+0x40>
     764:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     766:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     768:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     76a:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     76c:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     76e:	20 72       	andi	r18, 0x20	; 32
    address |= value<<6;
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	86 e0       	ldi	r24, 0x06	; 6
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
     778:	8a 95       	dec	r24
     77a:	e1 f7       	brne	.-8      	; 0x774 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     77c:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     77e:	d0 e0       	ldi	r29, 0x00	; 0
     780:	95 e0       	ldi	r25, 0x05	; 5
     782:	cc 0f       	add	r28, r28
     784:	dd 1f       	adc	r29, r29
     786:	9a 95       	dec	r25
     788:	e1 f7       	brne	.-8      	; 0x782 <instruction_read+0x5e>
     78a:	2c 2b       	or	r18, r28
     78c:	3d 2b       	or	r19, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     78e:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     790:	25 2b       	or	r18, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     792:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	54 e0       	ldi	r21, 0x04	; 4
     798:	aa 0f       	add	r26, r26
     79a:	bb 1f       	adc	r27, r27
     79c:	5a 95       	dec	r21
     79e:	e1 f7       	brne	.-8      	; 0x798 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     7a0:	2a 2b       	or	r18, r26
     7a2:	3b 2b       	or	r19, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     7a4:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	73 e0       	ldi	r23, 0x03	; 3
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	7a 95       	dec	r23
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     7b2:	2e 2b       	or	r18, r30
     7b4:	3f 2b       	or	r19, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     7b6:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	66 0f       	add	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	66 0f       	add	r22, r22
     7c0:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     7c2:	26 2b       	or	r18, r22
     7c4:	37 2b       	or	r19, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     7c6:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     7c8:	51 b1       	in	r21, 0x01	; 1
     7ca:	58 67       	ori	r21, 0x78	; 120
     7cc:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     7ce:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     7d0:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     7d2:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	44 0f       	add	r20, r20
     7d8:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     7da:	24 2b       	or	r18, r20
     7dc:	35 2b       	or	r19, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     7de:	16 fb       	bst	r17, 6
     7e0:	88 27       	eor	r24, r24
     7e2:	80 f9       	bld	r24, 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     7e6:	96 95       	lsr	r25
     7e8:	98 2f       	mov	r25, r24
     7ea:	88 27       	eor	r24, r24
     7ec:	97 95       	ror	r25
     7ee:	87 95       	ror	r24
     7f0:	28 2b       	or	r18, r24
     7f2:	39 2b       	or	r19, r25
}
     7f4:	c9 01       	movw	r24, r18
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	08 95       	ret

000007fe <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     7fe:	0e 94 92 03 	call	0x724	; 0x724 <instruction_read>
     802:	9c 01       	movw	r18, r24
     804:	2f 77       	andi	r18, 0x7F	; 127
     806:	33 27       	eor	r19, r19
    return address+1;
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
}
     80c:	c9 01       	movw	r24, r18
     80e:	08 95       	ret

00000810 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     810:	89 2b       	or	r24, r25
     812:	11 f4       	brne	.+4      	; 0x818 <write_db74+0x8>
     814:	16 98       	cbi	0x02, 6	; 2
     816:	01 c0       	rjmp	.+2      	; 0x81a <write_db74+0xa>
    else PORTA |= _BV(DB7);
     818:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     81a:	67 2b       	or	r22, r23
     81c:	11 f4       	brne	.+4      	; 0x822 <write_db74+0x12>
     81e:	15 98       	cbi	0x02, 5	; 2
     820:	01 c0       	rjmp	.+2      	; 0x824 <write_db74+0x14>
    else PORTA |= _BV(DB6);
     822:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     824:	45 2b       	or	r20, r21
     826:	11 f4       	brne	.+4      	; 0x82c <write_db74+0x1c>
     828:	14 98       	cbi	0x02, 4	; 2
     82a:	01 c0       	rjmp	.+2      	; 0x82e <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     82c:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     82e:	23 2b       	or	r18, r19
     830:	11 f4       	brne	.+4      	; 0x836 <write_db74+0x26>
     832:	13 98       	cbi	0x02, 3	; 2
     834:	08 95       	ret
    else PORTA |= _BV(DB4);
     836:	13 9a       	sbi	0x02, 3	; 2
     838:	08 95       	ret

0000083a <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     83a:	cf 93       	push	r28
     83c:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     83e:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     840:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     842:	84 fb       	bst	r24, 4
     844:	22 27       	eor	r18, r18
     846:	20 f9       	bld	r18, 0
     848:	85 fb       	bst	r24, 5
     84a:	44 27       	eor	r20, r20
     84c:	40 f9       	bld	r20, 0
     84e:	86 fb       	bst	r24, 6
     850:	66 27       	eor	r22, r22
     852:	60 f9       	bld	r22, 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	88 1f       	adc	r24, r24
     85c:	88 27       	eor	r24, r24
     85e:	88 1f       	adc	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
     866:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     86a:	2c 2f       	mov	r18, r28
     86c:	21 70       	andi	r18, 0x01	; 1
     86e:	c1 fb       	bst	r28, 1
     870:	44 27       	eor	r20, r20
     872:	40 f9       	bld	r20, 0
     874:	c2 fb       	bst	r28, 2
     876:	66 27       	eor	r22, r22
     878:	60 f9       	bld	r22, 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	c3 fb       	bst	r28, 3
     882:	88 27       	eor	r24, r24
     884:	80 f9       	bld	r24, 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
}
     88c:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     88e:	0c 94 b0 02 	jmp	0x560	; 0x560 <datarw>

00000892 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     898:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     89a:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     89c:	28 2f       	mov	r18, r24
     89e:	22 95       	swap	r18
     8a0:	21 70       	andi	r18, 0x01	; 1
     8a2:	85 fb       	bst	r24, 5
     8a4:	44 27       	eor	r20, r20
     8a6:	40 f9       	bld	r20, 0
     8a8:	86 fb       	bst	r24, 6
     8aa:	66 27       	eor	r22, r22
     8ac:	60 f9       	bld	r22, 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
     8bc:	0e 94 b0 02 	call	0x560	; 0x560 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     8c0:	9e 01       	movw	r18, r28
     8c2:	21 70       	andi	r18, 0x01	; 1
     8c4:	33 27       	eor	r19, r19
     8c6:	4c 2f       	mov	r20, r28
     8c8:	46 95       	lsr	r20
     8ca:	41 70       	andi	r20, 0x01	; 1
     8cc:	c2 fb       	bst	r28, 2
     8ce:	66 27       	eor	r22, r22
     8d0:	60 f9       	bld	r22, 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	c3 fb       	bst	r28, 3
     8d8:	88 27       	eor	r24, r24
     8da:	80 f9       	bld	r24, 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 08 04 	call	0x810	; 0x810 <write_db74>
    datarw();
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     8e6:	0c 94 b0 02 	jmp	0x560	; 0x560 <datarw>

000008ea <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     8ea:	cf 93       	push	r28
     8ec:	c8 2f       	mov	r28, r24
    chars_written++;
     8ee:	20 91 5a 04 	lds	r18, 0x045A
     8f2:	30 91 5b 04 	lds	r19, 0x045B
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	30 93 5b 04 	sts	0x045B, r19
     8fe:	20 93 5a 04 	sts	0x045A, r18

    if ((chars_written==17)||(mychar=='\n'))
     902:	21 31       	cpi	r18, 0x11	; 17
     904:	31 05       	cpc	r19, r1
     906:	31 f0       	breq	.+12     	; 0x914 <char_write+0x2a>
     908:	8a 30       	cpi	r24, 0x0A	; 10
     90a:	21 f0       	breq	.+8      	; 0x914 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     90c:	8c 2f       	mov	r24, r28
    
}
     90e:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     910:	0c 94 1d 04 	jmp	0x83a	; 0x83a <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     914:	20 91 00 01 	lds	r18, 0x0100
     918:	30 91 01 01 	lds	r19, 0x0101
     91c:	21 30       	cpi	r18, 0x01	; 1
     91e:	31 05       	cpc	r19, r1
     920:	79 f4       	brne	.+30     	; 0x940 <char_write+0x56>
        {
            set_ddram_address(0x40);
     922:	80 e4       	ldi	r24, 0x40	; 64
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 49 04 	call	0x892	; 0x892 <set_ddram_address>
            line_num = 2;
     92a:	22 e0       	ldi	r18, 0x02	; 2
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	30 93 01 01 	sts	0x0101, r19
     932:	20 93 00 01 	sts	0x0100, r18
            chars_written = 0;
     936:	10 92 5b 04 	sts	0x045B, r1
     93a:	10 92 5a 04 	sts	0x045A, r1
     93e:	05 c0       	rjmp	.+10     	; 0x94a <char_write+0x60>
        }
        else if (line_num==2)
     940:	22 30       	cpi	r18, 0x02	; 2
     942:	31 05       	cpc	r19, r1
     944:	11 f4       	brne	.+4      	; 0x94a <char_write+0x60>
        {
            lcd_init();
     946:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
        }
    }

    if (mychar!='\n')
     94a:	ca 30       	cpi	r28, 0x0A	; 10
     94c:	f9 f6       	brne	.-66     	; 0x90c <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	7c 01       	movw	r14, r24
    int i;
    get_current_address();
     960:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
     964:	ce 2d       	mov	r28, r14
     966:	df 2d       	mov	r29, r15
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     968:	8e 01       	movw	r16, r28
     96a:	07 c0       	rjmp	.+14     	; 0x97a <string_write+0x28>
        char_write(mystring[i]);
     96c:	f8 01       	movw	r30, r16
     96e:	81 91       	ld	r24, Z+
     970:	8f 01       	movw	r16, r30
     972:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
        get_current_address();
     976:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
void string_write(char *mystring)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     97a:	f7 01       	movw	r30, r14
     97c:	01 90       	ld	r0, Z+
     97e:	00 20       	and	r0, r0
     980:	e9 f7       	brne	.-6      	; 0x97c <string_write+0x2a>
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	ee 19       	sub	r30, r14
     986:	ff 09       	sbc	r31, r15
    PORTA |= _BV(E);
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
     988:	98 01       	movw	r18, r16
     98a:	2c 1b       	sub	r18, r28
     98c:	3d 0b       	sbc	r19, r29
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     98e:	2e 17       	cp	r18, r30
     990:	3f 07       	cpc	r19, r31
     992:	60 f3       	brcs	.-40     	; 0x96c <string_write+0x1a>
        char_write(mystring[i]);
        get_current_address();
    }
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	18 2f       	mov	r17, r24
     9ac:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     9ae:	cb 01       	movw	r24, r22
     9b0:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
     9b4:	29 2f       	mov	r18, r25
     9b6:	c8 2f       	mov	r28, r24
     9b8:	d9 2f       	mov	r29, r25
    if (temp==NULL)
     9ba:	20 97       	sbiw	r28, 0x00	; 0
     9bc:	51 f4       	brne	.+20     	; 0x9d2 <string_write_int+0x30>
    {
            lcd_init();
     9be:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
            string_write("bad malloc");
     9c2:	8f e2       	ldi	r24, 0x2F	; 47
     9c4:	91 e0       	ldi	r25, 0x01	; 1
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    if (temp==NULL)
    {
            lcd_init();
            string_write("bad malloc");
     9ce:	0c 94 a9 04 	jmp	0x952	; 0x952 <string_write>
            return;
    }
    sprintf(temp,"%d",num);
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	83 ee       	ldi	r24, 0xE3	; 227
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	2f 93       	push	r18
     9e0:	cf 93       	push	r28
     9e2:	0e 94 86 23 	call	0x470c	; 0x470c <sprintf>
    string_write(temp);
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    free(temp);
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	ce 01       	movw	r24, r28
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
            string_write("bad malloc");
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     a02:	0c 94 3f 21 	jmp	0x427e	; 0x427e <free>

00000a06 <string_write_float>:
}

//write a multi-char float to the LCD as a string with a certain decimal precision
void string_write_float(float num, int dec_digits)
{
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <string_write_float+0x12>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <string_write_float+0x14>
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     a20:	ae 01       	movw	r20, r28
     a22:	4f 5f       	subi	r20, 0xFF	; 255
     a24:	5f 4f       	sbci	r21, 0xFF	; 255
     a26:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <modf>
     a2a:	6b 01       	movw	r12, r22
     a2c:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     a2e:	69 81       	ldd	r22, Y+1	; 0x01
     a30:	7a 81       	ldd	r23, Y+2	; 0x02
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	64 e0       	ldi	r22, 0x04	; 4
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
     a46:	85 e5       	ldi	r24, 0x55	; 85
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     a4e:	b8 01       	movw	r22, r16
     a50:	88 27       	eor	r24, r24
     a52:	77 fd       	sbrc	r23, 7
     a54:	80 95       	com	r24
     a56:	98 2f       	mov	r25, r24
     a58:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e2       	ldi	r24, 0x20	; 32
     a66:	91 e4       	ldi	r25, 0x41	; 65
     a68:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <pow>
     a6c:	26 2f       	mov	r18, r22
     a6e:	37 2f       	mov	r19, r23
     a70:	48 2f       	mov	r20, r24
     a72:	59 2f       	mov	r21, r25
     a74:	c7 01       	movw	r24, r14
     a76:	b6 01       	movw	r22, r12
     a78:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
     a7c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <round>
     a80:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
     a84:	7b 01       	movw	r14, r22
     a86:	77 ff       	sbrs	r23, 7
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <string_write_float+0x8a>
     a8a:	f1 94       	neg	r15
     a8c:	e1 94       	neg	r14
     a8e:	f1 08       	sbc	r15, r1
    int digits = 0;

    if (temp!=0)
     a90:	e1 14       	cp	r14, r1
     a92:	f1 04       	cpc	r15, r1
     a94:	a1 f0       	breq	.+40     	; 0xabe <string_write_float+0xb8>
    {
        digits = floor(log10(abs(temp)))+1;
     a96:	b7 01       	movw	r22, r14
     a98:	88 27       	eor	r24, r24
     a9a:	77 fd       	sbrc	r23, 7
     a9c:	80 95       	com	r24
     a9e:	98 2f       	mov	r25, r24
     aa0:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
     aa4:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <log10>
     aa8:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <floor>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e8       	ldi	r20, 0x80	; 128
     ab2:	5f e3       	ldi	r21, 0x3F	; 63
     ab4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
     ab8:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <string_write_float+0xbc>
    } else {
        digits = 0;
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     ac2:	c1 2c       	mov	r12, r1
     ac4:	d1 2c       	mov	r13, r1
     ac6:	06 1b       	sub	r16, r22
     ac8:	17 0b       	sbc	r17, r23
     aca:	07 c0       	rjmp	.+14     	; 0xada <string_write_float+0xd4>
    {
        string_write("0");
     acc:	86 ee       	ldi	r24, 0xE6	; 230
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	c8 1a       	sub	r12, r24
     ad8:	d8 0a       	sbc	r13, r24
     ada:	c0 16       	cp	r12, r16
     adc:	d1 06       	cpc	r13, r17
     ade:	b4 f3       	brlt	.-20     	; 0xacc <string_write_float+0xc6>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     ae0:	64 e0       	ldi	r22, 0x04	; 4
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	c7 01       	movw	r24, r14
}
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     afe:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <string_write_int>

00000b02 <string_write_numchars>:
}

//write a substring to the LCD
void string_write_numchars(char *mystring, int num_chars)
{
     b02:	cf 92       	push	r12
     b04:	df 92       	push	r13
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	d8 2e       	mov	r13, r24
     b14:	c9 2e       	mov	r12, r25
     b16:	7b 01       	movw	r14, r22
    int i;
    get_current_address();
     b18:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
     b1c:	cd 2d       	mov	r28, r13
     b1e:	dc 2d       	mov	r29, r12
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	13 c0       	rjmp	.+38     	; 0xb4c <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
     b26:	ad 2d       	mov	r26, r13
     b28:	bc 2d       	mov	r27, r12
     b2a:	fd 01       	movw	r30, r26
     b2c:	01 90       	ld	r0, Z+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <string_write_numchars+0x2a>
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	ea 1b       	sub	r30, r26
     b36:	fb 0b       	sbc	r31, r27
     b38:	0e 17       	cp	r16, r30
     b3a:	1f 07       	cpc	r17, r31
     b3c:	50 f4       	brcc	.+20     	; 0xb52 <string_write_numchars+0x50>
            break;
        char_write(mystring[i]);
     b3e:	89 91       	ld	r24, Y+
     b40:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
        get_current_address();
     b44:	0e 94 ff 03 	call	0x7fe	; 0x7fe <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     b48:	0f 5f       	subi	r16, 0xFF	; 255
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	0e 15       	cp	r16, r14
     b4e:	1f 05       	cpc	r17, r15
     b50:	54 f3       	brlt	.-44     	; 0xb26 <string_write_numchars+0x24>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret

00000b64 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile DEV_STATE *device){
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <tag_check+0x6>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <tag_check+0x8>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <tag_check+0xa>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$GPRMC";
     b72:	26 e0       	ldi	r18, 0x06	; 6
     b74:	e8 e0       	ldi	r30, 0x08	; 8
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	de 01       	movw	r26, r28
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	2a 95       	dec	r18
     b82:	e1 f7       	brne	.-8      	; 0xb7c <tag_check+0x18>
     b84:	fe 01       	movw	r30, r28
     b86:	31 96       	adiw	r30, 0x01	; 1
	int i;
	for (i=0; i<6; i++)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (device->gps_rxBuffer[i] != token[i])
     b8c:	dc 01       	movw	r26, r24
     b8e:	a2 0f       	add	r26, r18
     b90:	b3 1f       	adc	r27, r19
     b92:	ab 56       	subi	r26, 0x6B	; 107
     b94:	bf 4f       	sbci	r27, 0xFF	; 255
     b96:	5c 91       	ld	r21, X
     b98:	41 91       	ld	r20, Z+
     b9a:	54 13       	cpse	r21, r20
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <tag_check+0x4a>

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile DEV_STATE *device){
	char token[6] = "$GPRMC";
	int i;
	for (i=0; i<6; i++)
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	26 30       	cpi	r18, 0x06	; 6
     ba4:	31 05       	cpc	r19, r1
     ba6:	91 f7       	brne	.-28     	; 0xb8c <tag_check+0x28>
	{
		if (device->gps_rxBuffer[i] != token[i])
			return 0;
	}
	return 1;
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <tag_check+0x4e>
	char token[6] = "$GPRMC";
	int i;
	for (i=0; i<6; i++)
	{
		if (device->gps_rxBuffer[i] != token[i])
			return 0;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 1;
}
     bb2:	c9 01       	movw	r24, r18
     bb4:	26 96       	adiw	r28, 0x06	; 6
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <strtok_single+0x10>
    src = in_str;
     bce:	90 93 5d 04 	sts	0x045D, r25
     bd2:	80 93 5c 04 	sts	0x045C, r24

  if (src == NULL)
     bd6:	c0 91 5c 04 	lds	r28, 0x045C
     bda:	d0 91 5d 04 	lds	r29, 0x045D
     bde:	20 97       	sbiw	r28, 0x00	; 0
     be0:	71 f0       	breq	.+28     	; 0xbfe <strtok_single+0x38>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
     be2:	ce 01       	movw	r24, r28
     be4:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strpbrk>
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	39 f0       	breq	.+14     	; 0xbfa <strtok_single+0x34>
    *p  = 0;
     bec:	fc 01       	movw	r30, r24
     bee:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
     bf0:	f0 93 5d 04 	sts	0x045D, r31
     bf4:	e0 93 5c 04 	sts	0x045C, r30
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <strtok_single+0x38>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
     bfa:	c0 e0       	ldi	r28, 0x00	; 0
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
     bfe:	ce 01       	movw	r24, r28
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <parse_nmea>:

#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile DEV_STATE *device, volatile char *in_sent, char * volatile *raw_gps_data){
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <parse_nmea+0x1a>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <parse_nmea+0x1c>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <parse_nmea+0x1e>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	6c 01       	movw	r12, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	5a 01       	movw	r10, r20

	int l = 0, m =0, k=0;
	char* token;

	//null out the first raw_gps_data field
	for (m=0; m<GPS_FIELD_LEN; m++)
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
	{
		raw_gps_data[0][m] = '\0';
     c32:	d5 01       	movw	r26, r10
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	e2 0f       	add	r30, r18
     c3a:	f3 1f       	adc	r31, r19
     c3c:	10 82       	st	Z, r1

	int l = 0, m =0, k=0;
	char* token;

	//null out the first raw_gps_data field
	for (m=0; m<GPS_FIELD_LEN; m++)
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	20 31       	cpi	r18, 0x10	; 16
     c44:	31 05       	cpc	r19, r1
     c46:	a9 f7       	brne	.-22     	; 0xc32 <parse_nmea+0x2c>
	{
		raw_gps_data[0][m] = '\0';
	}

	//ditch the first token
	token = strtok_single((char *)in_sent, ",");
     c48:	68 ee       	ldi	r22, 0xE8	; 232
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <strtok_single>
     c50:	4c 01       	movw	r8, r24

	//auto-insert $GPRMC (it passed the tag check already)
	char token2[6] = "$GPRMC";
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	e8 e0       	ldi	r30, 0x08	; 8
     c56:	f1 e0       	ldi	r31, 0x01	; 1
     c58:	de 01       	movw	r26, r28
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	01 90       	ld	r0, Z+
     c5e:	0d 92       	st	X+, r0
     c60:	8a 95       	dec	r24
     c62:	e1 f7       	brne	.-8      	; 0xc5c <parse_nmea+0x56>
	strncpy(raw_gps_data[0],token2,6);
     c64:	f5 01       	movw	r30, r10
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	46 e0       	ldi	r20, 0x06	; 6
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	be 01       	movw	r22, r28
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	0e 94 69 23 	call	0x46d2	; 0x46d2 <strncpy>
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile DEV_STATE *device, volatile char *in_sent, char * volatile *raw_gps_data){

	int l = 0, m =0, k=0;
     c78:	00 e0       	ldi	r16, 0x00	; 0
     c7a:	10 e0       	ldi	r17, 0x00	; 0
	//auto-insert $GPRMC (it passed the tag check already)
	char token2[6] = "$GPRMC";
	strncpy(raw_gps_data[0],token2,6);

	//copy over the rest of the tokens
	while((token) && (l<NUM_GPS_FIELDS-1)) 
     c7c:	21 c0       	rjmp	.+66     	; 0xcc0 <parse_nmea+0xba>
	{
		l++;
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255

#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile DEV_STATE *device, volatile char *in_sent, char * volatile *raw_gps_data){
     c82:	78 01       	movw	r14, r16
     c84:	ee 0c       	add	r14, r14
     c86:	ff 1c       	adc	r15, r15
     c88:	ea 0c       	add	r14, r10
     c8a:	fb 1c       	adc	r15, r11
	while((token) && (l<NUM_GPS_FIELDS-1)) 
	{
		l++;

		//null out the next raw_gps_data field
		for (m=0; m<GPS_FIELD_LEN; m++)
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
		{
			raw_gps_data[l][m] = '\0';
     c90:	d7 01       	movw	r26, r14
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	10 82       	st	Z, r1
	while((token) && (l<NUM_GPS_FIELDS-1)) 
	{
		l++;

		//null out the next raw_gps_data field
		for (m=0; m<GPS_FIELD_LEN; m++)
     c9c:	2f 5f       	subi	r18, 0xFF	; 255
     c9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ca0:	20 31       	cpi	r18, 0x10	; 16
     ca2:	31 05       	cpc	r19, r1
     ca4:	a9 f7       	brne	.-22     	; 0xc90 <parse_nmea+0x8a>
		{
			raw_gps_data[l][m] = '\0';
		}

		token = strtok_single(NULL, ",");
     ca6:	68 ee       	ldi	r22, 0xE8	; 232
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <strtok_single>
     cb2:	4c 01       	movw	r8, r24
		strcpy(raw_gps_data[l], token);
     cb4:	f7 01       	movw	r30, r14
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	b4 01       	movw	r22, r8
     cbc:	0e 94 62 23 	call	0x46c4	; 0x46c4 <strcpy>
	//auto-insert $GPRMC (it passed the tag check already)
	char token2[6] = "$GPRMC";
	strncpy(raw_gps_data[0],token2,6);

	//copy over the rest of the tokens
	while((token) && (l<NUM_GPS_FIELDS-1)) 
     cc0:	89 28       	or	r8, r9
     cc2:	19 f0       	breq	.+6      	; 0xcca <parse_nmea+0xc4>
     cc4:	0c 30       	cpi	r16, 0x0C	; 12
     cc6:	11 05       	cpc	r17, r1
     cc8:	d1 f6       	brne	.-76     	; 0xc7e <parse_nmea+0x78>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
		strcpy(raw_gps_data[l], token);
	}

	//clear the rxBuffer
    for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
        device->gps_rxBuffer[k]='\0';
     cce:	f6 01       	movw	r30, r12
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	eb 56       	subi	r30, 0x6B	; 107
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	10 82       	st	Z, r1
		token = strtok_single(NULL, ",");
		strcpy(raw_gps_data[l], token);
	}

	//clear the rxBuffer
    for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	20 35       	cpi	r18, 0x50	; 80
     ce0:	31 05       	cpc	r19, r1
     ce2:	a9 f7       	brne	.-22     	; 0xcce <parse_nmea+0xc8>
        device->gps_rxBuffer[k]='\0';
    device->gps_rxCount = 0;
     ce4:	f6 01       	movw	r30, r12
     ce6:	ed 56       	subi	r30, 0x6D	; 109
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	11 82       	std	Z+1, r1	; 0x01
     cec:	10 82       	st	Z, r1

	return 0;
}
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	26 96       	adiw	r28, 0x06	; 6
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	08 95       	ret

00000d18 <wipe_chars>:
  return ret;
}

//null out part of a string
void wipe_chars(char *str, int num)
{
     d18:	9c 01       	movw	r18, r24
	int i;
	for (i=0; i<num; i++)
     d1a:	fc 01       	movw	r30, r24
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <wipe_chars+0x8>
	{
		str[i] = '\0';
     d1e:	11 92       	st	Z+, r1

  return ret;
}

//null out part of a string
void wipe_chars(char *str, int num)
     d20:	cf 01       	movw	r24, r30
     d22:	82 1b       	sub	r24, r18
     d24:	93 0b       	sbc	r25, r19
{
	int i;
	for (i=0; i<num; i++)
     d26:	86 17       	cp	r24, r22
     d28:	97 07       	cpc	r25, r23
     d2a:	cc f3       	brlt	.-14     	; 0xd1e <wipe_chars+0x6>
	{
		str[i] = '\0';
	}
}
     d2c:	08 95       	ret

00000d2e <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	27 97       	sbiw	r28, 0x07	; 7
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	7c 01       	movw	r14, r24
     d52:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
     d54:	fc 01       	movw	r30, r24
     d56:	80 81       	ld	r24, Z
     d58:	61 81       	ldd	r22, Z+1	; 0x01
     d5a:	77 27       	eor	r23, r23
     d5c:	67 fd       	sbrc	r22, 7
     d5e:	70 95       	com	r23
     d60:	fa e0       	ldi	r31, 0x0A	; 10
     d62:	8f 02       	muls	r24, r31
     d64:	60 0d       	add	r22, r0
     d66:	71 1d       	adc	r23, r1
     d68:	11 24       	eor	r1, r1
     d6a:	60 51       	subi	r22, 0x10	; 16
     d6c:	72 40       	sbci	r23, 0x02	; 2
     d6e:	88 27       	eor	r24, r24
     d70:	77 fd       	sbrc	r23, 7
     d72:	80 95       	com	r24
     d74:	98 2f       	mov	r25, r24
     d76:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
     d7a:	b6 2e       	mov	r11, r22
     d7c:	c7 2e       	mov	r12, r23
     d7e:	d8 2e       	mov	r13, r24
     d80:	09 2f       	mov	r16, r25

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
     d82:	b7 01       	movw	r22, r14
     d84:	6e 5f       	subi	r22, 0xFE	; 254
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	47 e0       	ldi	r20, 0x07	; 7
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	0e 94 69 23 	call	0x46d2	; 0x46d2 <strncpy>

	float minutes = strtod(temp,NULL);
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e7       	ldi	r20, 0x70	; 112
     da6:	52 e4       	ldi	r21, 0x42	; 66
     da8:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	6b 2d       	mov	r22, r11
     db2:	7c 2d       	mov	r23, r12
     db4:	8d 2d       	mov	r24, r13
     db6:	90 2f       	mov	r25, r16
     db8:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
     dbc:	47 2f       	mov	r20, r23
     dbe:	38 2f       	mov	r19, r24
     dc0:	29 2f       	mov	r18, r25
     dc2:	86 2f       	mov	r24, r22
     dc4:	94 2f       	mov	r25, r20
     dc6:	a3 2f       	mov	r26, r19
     dc8:	b2 2f       	mov	r27, r18

	//adjust for N/S indicator
	if (N_indicator == 'S')
     dca:	13 35       	cpi	r17, 0x53	; 83
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <lat2dec+0xa2>
		result *= -1;
     dce:	b0 58       	subi	r27, 0x80	; 128

	return result;

}
     dd0:	68 2f       	mov	r22, r24
     dd2:	79 2f       	mov	r23, r25
     dd4:	8a 2f       	mov	r24, r26
     dd6:	9b 2f       	mov	r25, r27
     dd8:	27 96       	adiw	r28, 0x07	; 7
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	08 95       	ret

00000df8 <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	27 97       	sbiw	r28, 0x07	; 7
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	7c 01       	movw	r14, r24
     e1c:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
     e1e:	fc 01       	movw	r30, r24
     e20:	60 81       	ld	r22, Z
     e22:	81 81       	ldd	r24, Z+1	; 0x01
     e24:	f4 e6       	ldi	r31, 0x64	; 100
     e26:	6f 02       	muls	r22, r31
     e28:	b0 01       	movw	r22, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	9a e0       	ldi	r25, 0x0A	; 10
     e2e:	89 02       	muls	r24, r25
     e30:	60 0d       	add	r22, r0
     e32:	71 1d       	adc	r23, r1
     e34:	11 24       	eor	r1, r1
     e36:	f7 01       	movw	r30, r14
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	68 0f       	add	r22, r24
     e3c:	71 1d       	adc	r23, r1
     e3e:	87 fd       	sbrc	r24, 7
     e40:	7a 95       	dec	r23
     e42:	60 5d       	subi	r22, 0xD0	; 208
     e44:	74 41       	sbci	r23, 0x14	; 20
     e46:	88 27       	eor	r24, r24
     e48:	77 fd       	sbrc	r23, 7
     e4a:	80 95       	com	r24
     e4c:	98 2f       	mov	r25, r24
     e4e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
     e52:	b6 2e       	mov	r11, r22
     e54:	c7 2e       	mov	r12, r23
     e56:	d8 2e       	mov	r13, r24
     e58:	09 2f       	mov	r16, r25

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
     e5a:	b7 01       	movw	r22, r14
     e5c:	6d 5f       	subi	r22, 0xFD	; 253
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	47 e0       	ldi	r20, 0x07	; 7
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	0e 94 69 23 	call	0x46d2	; 0x46d2 <strncpy>

	float minutes = strtod(temp,NULL);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 dd 21 	call	0x43ba	; 0x43ba <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e7       	ldi	r20, 0x70	; 112
     e7e:	52 e4       	ldi	r21, 0x42	; 66
     e80:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	6b 2d       	mov	r22, r11
     e8a:	7c 2d       	mov	r23, r12
     e8c:	8d 2d       	mov	r24, r13
     e8e:	90 2f       	mov	r25, r16
     e90:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
     e94:	47 2f       	mov	r20, r23
     e96:	38 2f       	mov	r19, r24
     e98:	29 2f       	mov	r18, r25
     e9a:	86 2f       	mov	r24, r22
     e9c:	94 2f       	mov	r25, r20
     e9e:	a3 2f       	mov	r26, r19
     ea0:	b2 2f       	mov	r27, r18

	//adjust for N/S indicator
	if (E_indicator == 'W')
     ea2:	17 35       	cpi	r17, 0x57	; 87
     ea4:	09 f4       	brne	.+2      	; 0xea8 <lon2dec+0xb0>
		result *= -1;
     ea6:	b0 58       	subi	r27, 0x80	; 128

	return result;
}
     ea8:	68 2f       	mov	r22, r24
     eaa:	79 2f       	mov	r23, r25
     eac:	8a 2f       	mov	r24, r26
     eae:	9b 2f       	mov	r25, r27
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	bf 90       	pop	r11
     ece:	08 95       	ret

00000ed0 <update_user_gps_data>:

//use the raw gps_data fields to populate the GPS_DATA struct
void update_user_gps_data(char * volatile *raw_gps_data, GPS_DATA *gps_data)
{
     ed0:	af 92       	push	r10
     ed2:	bf 92       	push	r11
     ed4:	cf 92       	push	r12
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	a0 97       	sbiw	r28, 0x20	; 32
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	5c 01       	movw	r10, r24
     ef6:	8b 01       	movw	r16, r22
	float temp;
	double slice;

	//16-point compass 
	char *str_bearings[] = {"N  ", "NNE", "NE ", "ENE", "E  ", "ESE", "SE ", "SSE", "S  ", "SSW", "SW ", "WSW", "W  ", "WNW", "NW ", "NNW"};
     ef8:	80 e2       	ldi	r24, 0x20	; 32
     efa:	ef e0       	ldi	r30, 0x0F	; 15
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	de 01       	movw	r26, r28
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	01 90       	ld	r0, Z+
     f04:	0d 92       	st	X+, r0
     f06:	8a 95       	dec	r24
     f08:	e1 f7       	brne	.-8      	; 0xf02 <update_user_gps_data+0x32>

	wipe_chars(gps_data->msg_type,8);
     f0a:	68 e0       	ldi	r22, 0x08	; 8
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	strcpy(gps_data->msg_type,raw_gps_data[0]);
     f14:	d5 01       	movw	r26, r10
     f16:	6d 91       	ld	r22, X+
     f18:	7c 91       	ld	r23, X
     f1a:	c8 01       	movw	r24, r16
     f1c:	0e 94 62 23 	call	0x46c4	; 0x46c4 <strcpy>

	//format time
	wipe_chars(gps_data->utc_time,8);
     f20:	68 e0       	ldi	r22, 0x08	; 8
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	c8 01       	movw	r24, r16
     f26:	08 96       	adiw	r24, 0x08	; 8
     f28:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	gps_data->utc_time[0] = raw_gps_data[1][0];
     f2c:	d5 01       	movw	r26, r10
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	ed 91       	ld	r30, X+
     f32:	fc 91       	ld	r31, X
     f34:	13 97       	sbiw	r26, 0x03	; 3
     f36:	80 81       	ld	r24, Z
     f38:	f8 01       	movw	r30, r16
     f3a:	80 87       	std	Z+8, r24	; 0x08
	gps_data->utc_time[1] = raw_gps_data[1][1];
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	ed 91       	ld	r30, X+
     f40:	fc 91       	ld	r31, X
     f42:	13 97       	sbiw	r26, 0x03	; 3
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	d8 01       	movw	r26, r16
     f48:	19 96       	adiw	r26, 0x09	; 9
     f4a:	8c 93       	st	X, r24
     f4c:	19 97       	sbiw	r26, 0x09	; 9
	gps_data->utc_time[2] = ':';
     f4e:	8a e3       	ldi	r24, 0x3A	; 58
     f50:	1a 96       	adiw	r26, 0x0a	; 10
     f52:	8c 93       	st	X, r24
	gps_data->utc_time[3] = raw_gps_data[1][2];
     f54:	d5 01       	movw	r26, r10
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	ed 91       	ld	r30, X+
     f5a:	fc 91       	ld	r31, X
     f5c:	13 97       	sbiw	r26, 0x03	; 3
     f5e:	92 81       	ldd	r25, Z+2	; 0x02
     f60:	f8 01       	movw	r30, r16
     f62:	93 87       	std	Z+11, r25	; 0x0b
	gps_data->utc_time[4] = raw_gps_data[1][3];
     f64:	12 96       	adiw	r26, 0x02	; 2
     f66:	ed 91       	ld	r30, X+
     f68:	fc 91       	ld	r31, X
     f6a:	13 97       	sbiw	r26, 0x03	; 3
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	d8 01       	movw	r26, r16
     f70:	1c 96       	adiw	r26, 0x0c	; 12
     f72:	9c 93       	st	X, r25
     f74:	1c 97       	sbiw	r26, 0x0c	; 12
	gps_data->utc_time[5] = ':';
     f76:	1d 96       	adiw	r26, 0x0d	; 13
     f78:	8c 93       	st	X, r24
	gps_data->utc_time[6] = raw_gps_data[1][4];
     f7a:	d5 01       	movw	r26, r10
     f7c:	12 96       	adiw	r26, 0x02	; 2
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	13 97       	sbiw	r26, 0x03	; 3
     f84:	84 81       	ldd	r24, Z+4	; 0x04
     f86:	f8 01       	movw	r30, r16
     f88:	86 87       	std	Z+14, r24	; 0x0e
	gps_data->utc_time[7] = raw_gps_data[1][5];
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	13 97       	sbiw	r26, 0x03	; 3
     f92:	85 81       	ldd	r24, Z+5	; 0x05
     f94:	d8 01       	movw	r26, r16
     f96:	1f 96       	adiw	r26, 0x0f	; 15
     f98:	8c 93       	st	X, r24

	gps_data->nrw = raw_gps_data[2][0];
     f9a:	d5 01       	movw	r26, r10
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	15 97       	sbiw	r26, 0x05	; 5
     fa4:	80 81       	ld	r24, Z
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 8b       	std	Z+16, r24	; 0x10

	//format latitude
	gps_data->lat = 0;
     faa:	11 8a       	std	Z+17, r1	; 0x11
     fac:	12 8a       	std	Z+18, r1	; 0x12
     fae:	13 8a       	std	Z+19, r1	; 0x13
     fb0:	14 8a       	std	Z+20, r1	; 0x14
	temp = lat2dec(raw_gps_data[3], raw_gps_data[4][0]);
     fb2:	d5 01       	movw	r26, r10
     fb4:	18 96       	adiw	r26, 0x08	; 8
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	19 97       	sbiw	r26, 0x09	; 9
     fbc:	16 96       	adiw	r26, 0x06	; 6
     fbe:	8d 91       	ld	r24, X+
     fc0:	9c 91       	ld	r25, X
     fc2:	17 97       	sbiw	r26, 0x07	; 7
     fc4:	60 81       	ld	r22, Z
     fc6:	0e 94 97 06 	call	0xd2e	; 0xd2e <lat2dec>
     fca:	6b 01       	movw	r12, r22
     fcc:	7c 01       	movw	r14, r24

	//handle invalid latitudes
	if ((temp >= -90)&&(temp <= 90))
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	44 eb       	ldi	r20, 0xB4	; 180
     fd4:	52 ec       	ldi	r21, 0xC2	; 194
     fd6:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__gesf2>
     fda:	87 fd       	sbrc	r24, 7
     fdc:	0f c0       	rjmp	.+30     	; 0xffc <update_user_gps_data+0x12c>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	44 eb       	ldi	r20, 0xB4	; 180
     fe4:	52 e4       	ldi	r21, 0x42	; 66
     fe6:	c7 01       	movw	r24, r14
     fe8:	b6 01       	movw	r22, r12
     fea:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	2c f0       	brlt	.+10     	; 0xffc <update_user_gps_data+0x12c>
		gps_data->lat = temp;
     ff2:	f8 01       	movw	r30, r16
     ff4:	c1 8a       	std	Z+17, r12	; 0x11
     ff6:	d2 8a       	std	Z+18, r13	; 0x12
     ff8:	e3 8a       	std	Z+19, r14	; 0x13
     ffa:	f4 8a       	std	Z+20, r15	; 0x14

	//format longitude
	gps_data->lon = 0;
     ffc:	d8 01       	movw	r26, r16
     ffe:	55 96       	adiw	r26, 0x15	; 21
    1000:	1d 92       	st	X+, r1
    1002:	1d 92       	st	X+, r1
    1004:	1d 92       	st	X+, r1
    1006:	1c 92       	st	X, r1
    1008:	58 97       	sbiw	r26, 0x18	; 24
	temp = lon2dec(raw_gps_data[5], raw_gps_data[6][0]);
    100a:	d5 01       	movw	r26, r10
    100c:	1c 96       	adiw	r26, 0x0c	; 12
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	1d 97       	sbiw	r26, 0x0d	; 13
    1014:	1a 96       	adiw	r26, 0x0a	; 10
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	1b 97       	sbiw	r26, 0x0b	; 11
    101c:	60 81       	ld	r22, Z
    101e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <lon2dec>
    1022:	6b 01       	movw	r12, r22
    1024:	7c 01       	movw	r14, r24

	//handle invalid longitudes
	if ((temp >= -180)&&(temp <= 180))
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	44 e3       	ldi	r20, 0x34	; 52
    102c:	53 ec       	ldi	r21, 0xC3	; 195
    102e:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__gesf2>
    1032:	87 fd       	sbrc	r24, 7
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <update_user_gps_data+0x184>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	44 e3       	ldi	r20, 0x34	; 52
    103c:	53 e4       	ldi	r21, 0x43	; 67
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    1046:	18 16       	cp	r1, r24
    1048:	2c f0       	brlt	.+10     	; 0x1054 <update_user_gps_data+0x184>
		gps_data->lon = temp;
    104a:	f8 01       	movw	r30, r16
    104c:	c5 8a       	std	Z+21, r12	; 0x15
    104e:	d6 8a       	std	Z+22, r13	; 0x16
    1050:	e7 8a       	std	Z+23, r14	; 0x17
    1052:	f0 8e       	std	Z+24, r15	; 0x18

	gps_data->speed = 0;
    1054:	d8 01       	movw	r26, r16
    1056:	59 96       	adiw	r26, 0x19	; 25
    1058:	1d 92       	st	X+, r1
    105a:	1d 92       	st	X+, r1
    105c:	1d 92       	st	X+, r1
    105e:	1c 92       	st	X, r1
    1060:	5c 97       	sbiw	r26, 0x1c	; 28
	gps_data->speed = (float)strtod(raw_gps_data[7],NULL);
    1062:	f5 01       	movw	r30, r10
    1064:	86 85       	ldd	r24, Z+14	; 0x0e
    1066:	97 85       	ldd	r25, Z+15	; 0x0f
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	0e 94 dd 21 	call	0x43ba	; 0x43ba <strtod>
    1070:	d8 01       	movw	r26, r16
    1072:	59 96       	adiw	r26, 0x19	; 25
    1074:	6d 93       	st	X+, r22
    1076:	7d 93       	st	X+, r23
    1078:	8d 93       	st	X+, r24
    107a:	9c 93       	st	X, r25
    107c:	5c 97       	sbiw	r26, 0x1c	; 28

	gps_data->course = 0;
    107e:	f8 01       	movw	r30, r16
    1080:	15 8e       	std	Z+29, r1	; 0x1d
    1082:	16 8e       	std	Z+30, r1	; 0x1e
    1084:	17 8e       	std	Z+31, r1	; 0x1f
    1086:	10 a2       	std	Z+32, r1	; 0x20
	gps_data->course = (float)strtod(raw_gps_data[8],NULL);
    1088:	d5 01       	movw	r26, r10
    108a:	50 96       	adiw	r26, 0x10	; 16
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	51 97       	sbiw	r26, 0x11	; 17
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	0e 94 dd 21 	call	0x43ba	; 0x43ba <strtod>
    109a:	f8 01       	movw	r30, r16
    109c:	65 8f       	std	Z+29, r22	; 0x1d
    109e:	76 8f       	std	Z+30, r23	; 0x1e
    10a0:	87 8f       	std	Z+31, r24	; 0x1f
    10a2:	90 a3       	std	Z+32, r25	; 0x20

	//format date
	wipe_chars(gps_data->date,8);
    10a4:	68 e0       	ldi	r22, 0x08	; 8
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	c8 01       	movw	r24, r16
    10aa:	81 96       	adiw	r24, 0x21	; 33
    10ac:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	gps_data->date[0] = raw_gps_data[9][2];
    10b0:	d5 01       	movw	r26, r10
    10b2:	52 96       	adiw	r26, 0x12	; 18
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	53 97       	sbiw	r26, 0x13	; 19
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	f8 01       	movw	r30, r16
    10be:	81 a3       	std	Z+33, r24	; 0x21
	gps_data->date[1] = raw_gps_data[9][3];
    10c0:	52 96       	adiw	r26, 0x12	; 18
    10c2:	ed 91       	ld	r30, X+
    10c4:	fc 91       	ld	r31, X
    10c6:	53 97       	sbiw	r26, 0x13	; 19
    10c8:	83 81       	ldd	r24, Z+3	; 0x03
    10ca:	d8 01       	movw	r26, r16
    10cc:	92 96       	adiw	r26, 0x22	; 34
    10ce:	8c 93       	st	X, r24
    10d0:	92 97       	sbiw	r26, 0x22	; 34
	gps_data->date[2] = '/';
    10d2:	8f e2       	ldi	r24, 0x2F	; 47
    10d4:	93 96       	adiw	r26, 0x23	; 35
    10d6:	8c 93       	st	X, r24
	gps_data->date[3] = raw_gps_data[9][0];
    10d8:	d5 01       	movw	r26, r10
    10da:	52 96       	adiw	r26, 0x12	; 18
    10dc:	ed 91       	ld	r30, X+
    10de:	fc 91       	ld	r31, X
    10e0:	53 97       	sbiw	r26, 0x13	; 19
    10e2:	90 81       	ld	r25, Z
    10e4:	f8 01       	movw	r30, r16
    10e6:	94 a3       	std	Z+36, r25	; 0x24
	gps_data->date[4] = raw_gps_data[9][1];
    10e8:	52 96       	adiw	r26, 0x12	; 18
    10ea:	ed 91       	ld	r30, X+
    10ec:	fc 91       	ld	r31, X
    10ee:	53 97       	sbiw	r26, 0x13	; 19
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	d8 01       	movw	r26, r16
    10f4:	95 96       	adiw	r26, 0x25	; 37
    10f6:	9c 93       	st	X, r25
    10f8:	95 97       	sbiw	r26, 0x25	; 37
	gps_data->date[5] = '/';
    10fa:	96 96       	adiw	r26, 0x26	; 38
    10fc:	8c 93       	st	X, r24
	gps_data->date[6] = raw_gps_data[9][4];
    10fe:	d5 01       	movw	r26, r10
    1100:	52 96       	adiw	r26, 0x12	; 18
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	53 97       	sbiw	r26, 0x13	; 19
    1108:	84 81       	ldd	r24, Z+4	; 0x04
    110a:	f8 01       	movw	r30, r16
    110c:	87 a3       	std	Z+39, r24	; 0x27
	gps_data->date[7] = raw_gps_data[9][5];
    110e:	52 96       	adiw	r26, 0x12	; 18
    1110:	ed 91       	ld	r30, X+
    1112:	fc 91       	ld	r31, X
    1114:	53 97       	sbiw	r26, 0x13	; 19
    1116:	85 81       	ldd	r24, Z+5	; 0x05
    1118:	d8 01       	movw	r26, r16
    111a:	98 96       	adiw	r26, 0x28	; 40
    111c:	8c 93       	st	X, r24

	wipe_chars(gps_data->mag_var,8);
    111e:	78 01       	movw	r14, r16
    1120:	b9 e2       	ldi	r27, 0x29	; 41
    1122:	eb 0e       	add	r14, r27
    1124:	f1 1c       	adc	r15, r1
    1126:	68 e0       	ldi	r22, 0x08	; 8
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	c7 01       	movw	r24, r14
    112c:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	strcpy(gps_data->mag_var,raw_gps_data[10]);
    1130:	f5 01       	movw	r30, r10
    1132:	64 89       	ldd	r22, Z+20	; 0x14
    1134:	75 89       	ldd	r23, Z+21	; 0x15
    1136:	c7 01       	movw	r24, r14
    1138:	0e 94 62 23 	call	0x46c4	; 0x46c4 <strcpy>

	gps_data->mode = raw_gps_data[12][0];
    113c:	d5 01       	movw	r26, r10
    113e:	58 96       	adiw	r26, 0x18	; 24
    1140:	ed 91       	ld	r30, X+
    1142:	fc 91       	ld	r31, X
    1144:	59 97       	sbiw	r26, 0x19	; 25
    1146:	80 81       	ld	r24, Z
    1148:	f8 01       	movw	r30, r16
    114a:	81 ab       	std	Z+49, r24	; 0x31

	wipe_chars(gps_data->checksum,3);
    114c:	63 e0       	ldi	r22, 0x03	; 3
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	c8 01       	movw	r24, r16
    1152:	c2 96       	adiw	r24, 0x32	; 50
    1154:	0e 94 8c 06 	call	0xd18	; 0xd18 <wipe_chars>
	gps_data->checksum[0] = raw_gps_data[12][1];
    1158:	d5 01       	movw	r26, r10
    115a:	58 96       	adiw	r26, 0x18	; 24
    115c:	ed 91       	ld	r30, X+
    115e:	fc 91       	ld	r31, X
    1160:	59 97       	sbiw	r26, 0x19	; 25
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	f8 01       	movw	r30, r16
    1166:	82 ab       	std	Z+50, r24	; 0x32
	gps_data->checksum[1] = raw_gps_data[12][2];
    1168:	58 96       	adiw	r26, 0x18	; 24
    116a:	ed 91       	ld	r30, X+
    116c:	fc 91       	ld	r31, X
    116e:	59 97       	sbiw	r26, 0x19	; 25
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	d8 01       	movw	r26, r16
    1174:	d3 96       	adiw	r26, 0x33	; 51
    1176:	8c 93       	st	X, r24
	gps_data->checksum[2] = raw_gps_data[12][3];
    1178:	d5 01       	movw	r26, r10
    117a:	58 96       	adiw	r26, 0x18	; 24
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	59 97       	sbiw	r26, 0x19	; 25
    1182:	83 81       	ldd	r24, Z+3	; 0x03
    1184:	f8 01       	movw	r30, r16
    1186:	84 ab       	std	Z+52, r24	; 0x34

	//compute the course string (16-point compass)
	slice = gps_data->course/360*16;
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	44 eb       	ldi	r20, 0xB4	; 180
    118e:	53 e4       	ldi	r21, 0x43	; 67
    1190:	65 8d       	ldd	r22, Z+29	; 0x1d
    1192:	76 8d       	ldd	r23, Z+30	; 0x1e
    1194:	87 8d       	ldd	r24, Z+31	; 0x1f
    1196:	90 a1       	ldd	r25, Z+32	; 0x20
    1198:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    11a8:	6b 01       	movw	r12, r22
    11aa:	7c 01       	movw	r14, r24

	if ((slice<=0.5)||(slice>=15.5))
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	7d 2d       	mov	r23, r13
    11b6:	9f 2d       	mov	r25, r15
    11b8:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	64 f4       	brge	.+24     	; 0x11d8 <update_user_gps_data+0x308>
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	48 e7       	ldi	r20, 0x78	; 120
    11c6:	51 e4       	ldi	r21, 0x41	; 65
    11c8:	6c 2d       	mov	r22, r12
    11ca:	7d 2d       	mov	r23, r13
    11cc:	8e 2d       	mov	r24, r14
    11ce:	9f 2d       	mov	r25, r15
    11d0:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__gesf2>
    11d4:	87 fd       	sbrc	r24, 7
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <update_user_gps_data+0x30e>
	{
		//course is NORTH
		strncpy(gps_data->str_course, str_bearings[0], 3);
    11d8:	69 81       	ldd	r22, Y+1	; 0x01
    11da:	7a 81       	ldd	r23, Y+2	; 0x02
    11dc:	13 c0       	rjmp	.+38     	; 0x1204 <update_user_gps_data+0x334>
	} else {
		//course index complies with (int)(slice+0.5) convention
		strncpy(gps_data->str_course, str_bearings[(int)(slice+0.5)], 3);
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	6c 2d       	mov	r22, r12
    11e8:	7d 2d       	mov	r23, r13
    11ea:	8e 2d       	mov	r24, r14
    11ec:	9f 2d       	mov	r25, r15
    11ee:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    11f2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    11f6:	fb 01       	movw	r30, r22
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	ec 0f       	add	r30, r28
    11fe:	fd 1f       	adc	r31, r29
    1200:	61 81       	ldd	r22, Z+1	; 0x01
    1202:	72 81       	ldd	r23, Z+2	; 0x02
    1204:	43 e0       	ldi	r20, 0x03	; 3
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	c8 01       	movw	r24, r16
    120a:	8a 5a       	subi	r24, 0xAA	; 170
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
	}

}
    120e:	a0 96       	adiw	r28, 0x20	; 32
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
	{
		//course is NORTH
		strncpy(gps_data->str_course, str_bearings[0], 3);
	} else {
		//course index complies with (int)(slice+0.5) convention
		strncpy(gps_data->str_course, str_bearings[(int)(slice+0.5)], 3);
    122e:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <strncpy>

00001232 <calculate_bearings>:
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//calculate the absolute and relative bearings to the nearest station 
int calculate_bearings(GPS_DATA *gps_data, DATABASE *fm_stations)
{
    1232:	2f 92       	push	r2
    1234:	3f 92       	push	r3
    1236:	4f 92       	push	r4
    1238:	5f 92       	push	r5
    123a:	6f 92       	push	r6
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	ee 97       	sbiw	r28, 0x3e	; 62
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	3c 01       	movw	r6, r24
    1268:	2b 01       	movw	r4, r22
	double y, x, bearing, lat1, lat2, lon1, lon2;
	float slice;

	//16-point compass 
	char *str_bearings[] = {"N  ", "NNE", "NE ", "ENE", "E  ", "ESE", "SE ", "SSE", "S  ", "SSW", "SW ", "WSW", "W  ", "WNW", "NW ", "NNW"};
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	ef e0       	ldi	r30, 0x0F	; 15
    126e:	f1 e0       	ldi	r31, 0x01	; 1
    1270:	8e 01       	movw	r16, r28
    1272:	0f 5f       	subi	r16, 0xFF	; 255
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
    1276:	d8 01       	movw	r26, r16
    1278:	01 90       	ld	r0, Z+
    127a:	0d 92       	st	X+, r0
    127c:	8a 95       	dec	r24
    127e:	e1 f7       	brne	.-8      	; 0x1278 <calculate_bearings+0x46>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1280:	2b ed       	ldi	r18, 0xDB	; 219
    1282:	3f e0       	ldi	r19, 0x0F	; 15
    1284:	49 e4       	ldi	r20, 0x49	; 73
    1286:	50 e4       	ldi	r21, 0x40	; 64
    1288:	f3 01       	movw	r30, r6
    128a:	61 89       	ldd	r22, Z+17	; 0x11
    128c:	72 89       	ldd	r23, Z+18	; 0x12
    128e:	83 89       	ldd	r24, Z+19	; 0x13
    1290:	94 89       	ldd	r25, Z+20	; 0x14
    1292:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	44 e3       	ldi	r20, 0x34	; 52
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    12a2:	69 a7       	std	Y+41, r22	; 0x29
    12a4:	7a a7       	std	Y+42, r23	; 0x2a
    12a6:	8b a7       	std	Y+43, r24	; 0x2b
    12a8:	9c a7       	std	Y+44, r25	; 0x2c
    12aa:	2b ed       	ldi	r18, 0xDB	; 219
    12ac:	3f e0       	ldi	r19, 0x0F	; 15
    12ae:	49 e4       	ldi	r20, 0x49	; 73
    12b0:	50 e4       	ldi	r21, 0x40	; 64
    12b2:	f3 01       	movw	r30, r6
    12b4:	65 89       	ldd	r22, Z+21	; 0x15
    12b6:	76 89       	ldd	r23, Z+22	; 0x16
    12b8:	87 89       	ldd	r24, Z+23	; 0x17
    12ba:	90 8d       	ldd	r25, Z+24	; 0x18
    12bc:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	44 e3       	ldi	r20, 0x34	; 52
    12c6:	53 e4       	ldi	r21, 0x43	; 67
    12c8:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    12cc:	6f ab       	std	Y+55, r22	; 0x37
    12ce:	78 af       	std	Y+56, r23	; 0x38
    12d0:	89 af       	std	Y+57, r24	; 0x39
    12d2:	9a af       	std	Y+58, r25	; 0x3a
    12d4:	7a a2       	std	Y+34, r7	; 0x22
    12d6:	69 a2       	std	Y+33, r6	; 0x21
    12d8:	5c a2       	std	Y+36, r5	; 0x24
    12da:	4b a2       	std	Y+35, r4	; 0x23
	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);

	int i;
	//calculate bearing parameters for the top NUM_NEAREST nearest stations
	for (i=0; i<NUM_NEAREST; i++)
    12dc:	21 2c       	mov	r2, r1
    12de:	31 2c       	mov	r3, r1
	{

		if (i >= fm_stations->num_stations)
    12e0:	f2 01       	movw	r30, r4
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	28 16       	cp	r2, r24
    12e8:	39 06       	cpc	r3, r25
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <calculate_bearings+0xbc>
    12ec:	7a c1       	rjmp	.+756    	; 0x15e2 <calculate_bearings+0x3b0>
			return 0;

		lat2 = to_radians((double)fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].lat);
    12ee:	eb a1       	ldd	r30, Y+35	; 0x23
    12f0:	fc a1       	ldd	r31, Y+36	; 0x24
    12f2:	66 81       	ldd	r22, Z+6	; 0x06
    12f4:	77 81       	ldd	r23, Z+7	; 0x07
    12f6:	80 85       	ldd	r24, Z+8	; 0x08
    12f8:	91 85       	ldd	r25, Z+9	; 0x09
    12fa:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    12fe:	fc e1       	ldi	r31, 0x1C	; 28
    1300:	f6 9f       	mul	r31, r22
    1302:	c0 01       	movw	r24, r0
    1304:	f7 9f       	mul	r31, r23
    1306:	90 0d       	add	r25, r0
    1308:	11 24       	eor	r1, r1
    130a:	f2 01       	movw	r30, r4
    130c:	00 81       	ld	r16, Z
    130e:	11 81       	ldd	r17, Z+1	; 0x01
    1310:	08 0f       	add	r16, r24
    1312:	19 1f       	adc	r17, r25
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1314:	2b ed       	ldi	r18, 0xDB	; 219
    1316:	3f e0       	ldi	r19, 0x0F	; 15
    1318:	49 e4       	ldi	r20, 0x49	; 73
    131a:	50 e4       	ldi	r21, 0x40	; 64
    131c:	f8 01       	movw	r30, r16
    131e:	64 85       	ldd	r22, Z+12	; 0x0c
    1320:	75 85       	ldd	r23, Z+13	; 0x0d
    1322:	86 85       	ldd	r24, Z+14	; 0x0e
    1324:	97 85       	ldd	r25, Z+15	; 0x0f
    1326:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	44 e3       	ldi	r20, 0x34	; 52
    1330:	53 e4       	ldi	r21, 0x43	; 67
    1332:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    1336:	4b 01       	movw	r8, r22
    1338:	5c 01       	movw	r10, r24
    133a:	2b ed       	ldi	r18, 0xDB	; 219
    133c:	3f e0       	ldi	r19, 0x0F	; 15
    133e:	49 e4       	ldi	r20, 0x49	; 73
    1340:	50 e4       	ldi	r21, 0x40	; 64
    1342:	f8 01       	movw	r30, r16
    1344:	60 89       	ldd	r22, Z+16	; 0x10
    1346:	71 89       	ldd	r23, Z+17	; 0x11
    1348:	82 89       	ldd	r24, Z+18	; 0x12
    134a:	93 89       	ldd	r25, Z+19	; 0x13
    134c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	44 e3       	ldi	r20, 0x34	; 52
    1356:	53 e4       	ldi	r21, 0x43	; 67
    1358:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>

		lat2 = to_radians((double)fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].lat);
		lon2 = to_radians((double)fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].lon);

		//use the Forward Azimuth Formula
		y = sin(lon2 - lon1)*cos(lat2);
    135c:	bf a9       	ldd	r27, Y+55	; 0x37
    135e:	a8 ad       	ldd	r26, Y+56	; 0x38
    1360:	f9 ad       	ldd	r31, Y+57	; 0x39
    1362:	ea ad       	ldd	r30, Y+58	; 0x3a
    1364:	2b 2f       	mov	r18, r27
    1366:	3a 2f       	mov	r19, r26
    1368:	4f 2f       	mov	r20, r31
    136a:	5e 2f       	mov	r21, r30
    136c:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__subsf3>
    1370:	16 2f       	mov	r17, r22
    1372:	07 2f       	mov	r16, r23
    1374:	8d a7       	std	Y+45, r24	; 0x2d
    1376:	9e a7       	std	Y+46, r25	; 0x2e
    1378:	a8 01       	movw	r20, r16
    137a:	65 2f       	mov	r22, r21
    137c:	74 2f       	mov	r23, r20
    137e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <sin>
    1382:	6f a7       	std	Y+47, r22	; 0x2f
    1384:	78 ab       	std	Y+48, r23	; 0x30
    1386:	89 ab       	std	Y+49, r24	; 0x31
    1388:	9a ab       	std	Y+50, r25	; 0x32
    138a:	68 2d       	mov	r22, r8
    138c:	79 2d       	mov	r23, r9
    138e:	8a 2d       	mov	r24, r10
    1390:	9b 2d       	mov	r25, r11
    1392:	0e 94 83 1c 	call	0x3906	; 0x3906 <cos>
    1396:	6d a3       	std	Y+37, r22	; 0x25
    1398:	7e a3       	std	Y+38, r23	; 0x26
    139a:	8f a3       	std	Y+39, r24	; 0x27
    139c:	98 a7       	std	Y+40, r25	; 0x28
		x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2 - lon1);
    139e:	59 a5       	ldd	r21, Y+41	; 0x29
    13a0:	4a a5       	ldd	r20, Y+42	; 0x2a
    13a2:	3b a5       	ldd	r19, Y+43	; 0x2b
    13a4:	2c a5       	ldd	r18, Y+44	; 0x2c
    13a6:	65 2f       	mov	r22, r21
    13a8:	74 2f       	mov	r23, r20
    13aa:	83 2f       	mov	r24, r19
    13ac:	92 2f       	mov	r25, r18
    13ae:	0e 94 83 1c 	call	0x3906	; 0x3906 <cos>
    13b2:	6b 01       	movw	r12, r22
    13b4:	7c 01       	movw	r14, r24
    13b6:	68 2d       	mov	r22, r8
    13b8:	79 2d       	mov	r23, r9
    13ba:	8a 2d       	mov	r24, r10
    13bc:	9b 2d       	mov	r25, r11
    13be:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <sin>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	b9 a5       	ldd	r27, Y+41	; 0x29
    13c8:	aa a5       	ldd	r26, Y+42	; 0x2a
    13ca:	fb a5       	ldd	r31, Y+43	; 0x2b
    13cc:	ec a5       	ldd	r30, Y+44	; 0x2c
    13ce:	6b 2f       	mov	r22, r27
    13d0:	7a 2f       	mov	r23, r26
    13d2:	8f 2f       	mov	r24, r31
    13d4:	9e 2f       	mov	r25, r30
    13d6:	2b af       	std	Y+59, r18	; 0x3b
    13d8:	3c af       	std	Y+60, r19	; 0x3c
    13da:	4d af       	std	Y+61, r20	; 0x3d
    13dc:	5e af       	std	Y+62, r21	; 0x3e
    13de:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <sin>
    13e2:	6b ab       	std	Y+51, r22	; 0x33
    13e4:	7c ab       	std	Y+52, r23	; 0x34
    13e6:	8d ab       	std	Y+53, r24	; 0x35
    13e8:	9e ab       	std	Y+54, r25	; 0x36
    13ea:	ad a5       	ldd	r26, Y+45	; 0x2d
    13ec:	fe a5       	ldd	r31, Y+46	; 0x2e
    13ee:	61 2f       	mov	r22, r17
    13f0:	70 2f       	mov	r23, r16
    13f2:	8a 2f       	mov	r24, r26
    13f4:	9f 2f       	mov	r25, r31
    13f6:	0e 94 83 1c 	call	0x3906	; 0x3906 <cos>
    13fa:	4b 01       	movw	r8, r22
    13fc:	5c 01       	movw	r10, r24
    13fe:	2b ad       	ldd	r18, Y+59	; 0x3b
    1400:	3c ad       	ldd	r19, Y+60	; 0x3c
    1402:	4d ad       	ldd	r20, Y+61	; 0x3d
    1404:	5e ad       	ldd	r21, Y+62	; 0x3e
    1406:	c7 01       	movw	r24, r14
    1408:	b6 01       	movw	r22, r12
    140a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    140e:	6b 01       	movw	r12, r22
    1410:	7c 01       	movw	r14, r24
    1412:	2d a1       	ldd	r18, Y+37	; 0x25
    1414:	3e a1       	ldd	r19, Y+38	; 0x26
    1416:	4f a1       	ldd	r20, Y+39	; 0x27
    1418:	58 a5       	ldd	r21, Y+40	; 0x28
    141a:	6b a9       	ldd	r22, Y+51	; 0x33
    141c:	7c a9       	ldd	r23, Y+52	; 0x34
    141e:	8d a9       	ldd	r24, Y+53	; 0x35
    1420:	9e a9       	ldd	r25, Y+54	; 0x36
    1422:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1426:	a5 01       	movw	r20, r10
    1428:	94 01       	movw	r18, r8
    142a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	c7 01       	movw	r24, r14
    1434:	b6 01       	movw	r22, r12
    1436:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__subsf3>
    143a:	6b 01       	movw	r12, r22
    143c:	7c 01       	movw	r14, r24

		lat2 = to_radians((double)fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].lat);
		lon2 = to_radians((double)fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].lon);

		//use the Forward Azimuth Formula
		y = sin(lon2 - lon1)*cos(lat2);
    143e:	2d a1       	ldd	r18, Y+37	; 0x25
    1440:	3e a1       	ldd	r19, Y+38	; 0x26
    1442:	4f a1       	ldd	r20, Y+39	; 0x27
    1444:	58 a5       	ldd	r21, Y+40	; 0x28
    1446:	6f a5       	ldd	r22, Y+47	; 0x2f
    1448:	78 a9       	ldd	r23, Y+48	; 0x30
    144a:	89 a9       	ldd	r24, Y+49	; 0x31
    144c:	9a a9       	ldd	r25, Y+50	; 0x32
    144e:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
		x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2 - lon1);

		//finish computing the absolute bearing to the nearest station
		bearing = to_degrees(atan2(y, x));
    1452:	a7 01       	movw	r20, r14
    1454:	96 01       	movw	r18, r12
    1456:	0e 94 2c 1c 	call	0x3858	; 0x3858 <atan2>
}

//convert an angle from radians to degrees
double to_degrees(double radian_angle)
{
	return 180*radian_angle/(M_PI);
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	44 e3       	ldi	r20, 0x34	; 52
    1460:	53 e4       	ldi	r21, 0x43	; 67
    1462:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1466:	2b ed       	ldi	r18, 0xDB	; 219
    1468:	3f e0       	ldi	r19, 0x0F	; 15
    146a:	49 e4       	ldi	r20, 0x49	; 73
    146c:	50 e4       	ldi	r21, 0x40	; 64
    146e:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    1472:	6b 01       	movw	r12, r22
    1474:	7c 01       	movw	r14, r24

		//finish computing the absolute bearing to the nearest station
		bearing = to_degrees(atan2(y, x));

		//keep absolute bearing between 0-360
		if (bearing < 0)
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	a9 01       	movw	r20, r18
    147c:	7d 2d       	mov	r23, r13
    147e:	9f 2d       	mov	r25, r15
    1480:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    1484:	87 ff       	sbrs	r24, 7
    1486:	0c c0       	rjmp	.+24     	; 0x14a0 <calculate_bearings+0x26e>
			bearing += 360;
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	44 eb       	ldi	r20, 0xB4	; 180
    148e:	53 e4       	ldi	r21, 0x43	; 67
    1490:	6c 2d       	mov	r22, r12
    1492:	7d 2d       	mov	r23, r13
    1494:	8e 2d       	mov	r24, r14
    1496:	9f 2d       	mov	r25, r15
    1498:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24

		//save bearing into the DEV_STATE struct
		gps_data->abs_bearing_nearest[i] = (float)bearing;
    14a0:	8c 2d       	mov	r24, r12
    14a2:	9d 2d       	mov	r25, r13
    14a4:	ae 2d       	mov	r26, r14
    14a6:	bf 2d       	mov	r27, r15
    14a8:	e9 a1       	ldd	r30, Y+33	; 0x21
    14aa:	fa a1       	ldd	r31, Y+34	; 0x22
    14ac:	85 ab       	std	Z+53, r24	; 0x35
    14ae:	96 ab       	std	Z+54, r25	; 0x36
    14b0:	a7 ab       	std	Z+55, r26	; 0x37
    14b2:	b0 af       	std	Z+56, r27	; 0x38

		//compute the relative bearing to nearest station
		gps_data->rel_bearing_nearest[i] = gps_data->abs_bearing_nearest[i] - gps_data->course;
    14b4:	f3 01       	movw	r30, r6
    14b6:	25 8d       	ldd	r18, Z+29	; 0x1d
    14b8:	36 8d       	ldd	r19, Z+30	; 0x1e
    14ba:	47 8d       	ldd	r20, Z+31	; 0x1f
    14bc:	50 a1       	ldd	r21, Z+32	; 0x20
    14be:	6c 2d       	mov	r22, r12
    14c0:	7d 2d       	mov	r23, r13
    14c2:	8e 2d       	mov	r24, r14
    14c4:	9f 2d       	mov	r25, r15
    14c6:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__subsf3>
    14ca:	4b 01       	movw	r8, r22
    14cc:	5c 01       	movw	r10, r24

		//keep relative bearing within 0-360
		if (gps_data->rel_bearing_nearest[i] < 0)
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	a9 01       	movw	r20, r18
    14d4:	79 2d       	mov	r23, r9
    14d6:	9b 2d       	mov	r25, r11
    14d8:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    14dc:	09 a1       	ldd	r16, Y+33	; 0x21
    14de:	1a a1       	ldd	r17, Y+34	; 0x22
    14e0:	0f 5b       	subi	r16, 0xBF	; 191
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	87 fd       	sbrc	r24, 7
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <calculate_bearings+0x2ca>

		//save bearing into the DEV_STATE struct
		gps_data->abs_bearing_nearest[i] = (float)bearing;

		//compute the relative bearing to nearest station
		gps_data->rel_bearing_nearest[i] = gps_data->abs_bearing_nearest[i] - gps_data->course;
    14e8:	88 2d       	mov	r24, r8
    14ea:	99 2d       	mov	r25, r9
    14ec:	aa 2d       	mov	r26, r10
    14ee:	bb 2d       	mov	r27, r11
    14f0:	f8 01       	movw	r30, r16
    14f2:	80 83       	st	Z, r24
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	a2 83       	std	Z+2, r26	; 0x02
    14f8:	b3 83       	std	Z+3, r27	; 0x03
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <calculate_bearings+0x2e8>

		//keep relative bearing within 0-360
		if (gps_data->rel_bearing_nearest[i] < 0)
			gps_data->rel_bearing_nearest[i] += 360;
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	44 eb       	ldi	r20, 0xB4	; 180
    1502:	53 e4       	ldi	r21, 0x43	; 67
    1504:	68 2d       	mov	r22, r8
    1506:	79 2d       	mov	r23, r9
    1508:	8a 2d       	mov	r24, r10
    150a:	9b 2d       	mov	r25, r11
    150c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    1510:	f8 01       	movw	r30, r16
    1512:	60 83       	st	Z, r22
    1514:	71 83       	std	Z+1, r23	; 0x01
    1516:	82 83       	std	Z+2, r24	; 0x02
    1518:	93 83       	std	Z+3, r25	; 0x03

		//compute the absolute bearing string (16-point compass)
		slice = gps_data->abs_bearing_nearest[i]/360*16;
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	44 eb       	ldi	r20, 0xB4	; 180
    1520:	53 e4       	ldi	r21, 0x43	; 67
    1522:	6c 2d       	mov	r22, r12
    1524:	7d 2d       	mov	r23, r13
    1526:	8e 2d       	mov	r24, r14
    1528:	9f 2d       	mov	r25, r15
    152a:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    153a:	7b 01       	movw	r14, r22
    153c:	8c 01       	movw	r16, r24

		if ((slice<=0.5)||(slice>=15.5))
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	7f 2d       	mov	r23, r15
    1548:	91 2f       	mov	r25, r17
    154a:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    154e:	18 16       	cp	r1, r24
    1550:	64 f4       	brge	.+24     	; 0x156a <calculate_bearings+0x338>
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	48 e7       	ldi	r20, 0x78	; 120
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	6e 2d       	mov	r22, r14
    155c:	7f 2d       	mov	r23, r15
    155e:	80 2f       	mov	r24, r16
    1560:	91 2f       	mov	r25, r17
    1562:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__gesf2>
    1566:	87 fd       	sbrc	r24, 7
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <calculate_bearings+0x33e>
		{
			//bearing is NORTH
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[0], 3);
    156a:	69 81       	ldd	r22, Y+1	; 0x01
    156c:	7a 81       	ldd	r23, Y+2	; 0x02
    156e:	17 c0       	rjmp	.+46     	; 0x159e <calculate_bearings+0x36c>
		} else {
			//bearing index complies with (int)(slice+0.5) convention
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[(int)(slice+0.5)], 3);
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	6e 2d       	mov	r22, r14
    157a:	7f 2d       	mov	r23, r15
    157c:	80 2f       	mov	r24, r16
    157e:	91 2f       	mov	r25, r17
    1580:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    1584:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    1588:	fb 01       	movw	r30, r22
    158a:	ee 0f       	add	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	8c 0f       	add	r24, r28
    1594:	9d 1f       	adc	r25, r29
    1596:	e8 0f       	add	r30, r24
    1598:	f9 1f       	adc	r31, r25
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	c1 01       	movw	r24, r2
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	82 0d       	add	r24, r2
    15a6:	93 1d       	adc	r25, r3
    15a8:	83 5b       	subi	r24, 0xB3	; 179
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	43 e0       	ldi	r20, 0x03	; 3
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	86 0d       	add	r24, r6
    15b2:	97 1d       	adc	r25, r7
    15b4:	0e 94 69 23 	call	0x46d2	; 0x46d2 <strncpy>
	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);

	int i;
	//calculate bearing parameters for the top NUM_NEAREST nearest stations
	for (i=0; i<NUM_NEAREST; i++)
    15b8:	9f ef       	ldi	r25, 0xFF	; 255
    15ba:	29 1a       	sub	r2, r25
    15bc:	39 0a       	sbc	r3, r25
    15be:	e9 a1       	ldd	r30, Y+33	; 0x21
    15c0:	fa a1       	ldd	r31, Y+34	; 0x22
    15c2:	34 96       	adiw	r30, 0x04	; 4
    15c4:	fa a3       	std	Y+34, r31	; 0x22
    15c6:	e9 a3       	std	Y+33, r30	; 0x21
    15c8:	8b a1       	ldd	r24, Y+35	; 0x23
    15ca:	9c a1       	ldd	r25, Y+36	; 0x24
    15cc:	08 96       	adiw	r24, 0x08	; 8
    15ce:	9c a3       	std	Y+36, r25	; 0x24
    15d0:	8b a3       	std	Y+35, r24	; 0x23
    15d2:	93 e0       	ldi	r25, 0x03	; 3
    15d4:	29 16       	cp	r2, r25
    15d6:	31 04       	cpc	r3, r1
    15d8:	09 f0       	breq	.+2      	; 0x15dc <calculate_bearings+0x3aa>
    15da:	82 ce       	rjmp	.-764    	; 0x12e0 <calculate_bearings+0xae>
			//bearing index complies with (int)(slice+0.5) convention
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[(int)(slice+0.5)], 3);
		}
	}

	return 1;
    15dc:	21 e0       	ldi	r18, 0x01	; 1
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <calculate_bearings+0x3b4>
	//calculate bearing parameters for the top NUM_NEAREST nearest stations
	for (i=0; i<NUM_NEAREST; i++)
	{

		if (i >= fm_stations->num_stations)
			return 0;
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
			strncpy(gps_data->str_abs_bearing_nearest[i], str_bearings[(int)(slice+0.5)], 3);
		}
	}

	return 1;
}
    15e6:	c9 01       	movw	r24, r18
    15e8:	ee 96       	adiw	r28, 0x3e	; 62
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	9f 90       	pop	r9
    160a:	8f 90       	pop	r8
    160c:	7f 90       	pop	r7
    160e:	6f 90       	pop	r6
    1610:	5f 90       	pop	r5
    1612:	4f 90       	pop	r4
    1614:	3f 90       	pop	r3
    1616:	2f 90       	pop	r2
    1618:	08 95       	ret

0000161a <earth_distance>:

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
    161a:	4f 92       	push	r4
    161c:	5f 92       	push	r5
    161e:	6f 92       	push	r6
    1620:	7f 92       	push	r7
    1622:	8f 92       	push	r8
    1624:	9f 92       	push	r9
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	60 97       	sbiw	r28, 0x10	; 16
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	2b 01       	movw	r4, r22
    164c:	3c 01       	movw	r6, r24
    164e:	29 87       	std	Y+9, r18	; 0x09
    1650:	3a 87       	std	Y+10, r19	; 0x0a
    1652:	4b 87       	std	Y+11, r20	; 0x0b
    1654:	5c 87       	std	Y+12, r21	; 0x0c
    1656:	e9 82       	std	Y+1, r14	; 0x01
    1658:	fa 82       	std	Y+2, r15	; 0x02
    165a:	0b 83       	std	Y+3, r16	; 0x03
    165c:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    165e:	9b 01       	movw	r18, r22
    1660:	ac 01       	movw	r20, r24
    1662:	c8 01       	movw	r24, r16
    1664:	b7 01       	movw	r22, r14
    1666:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    166a:	2b ed       	ldi	r18, 0xDB	; 219
    166c:	3f e0       	ldi	r19, 0x0F	; 15
    166e:	49 e4       	ldi	r20, 0x49	; 73
    1670:	50 e4       	ldi	r21, 0x40	; 64
    1672:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	44 e3       	ldi	r20, 0x34	; 52
    167c:	53 e4       	ldi	r21, 0x43	; 67
    167e:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    168e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <sin>
    1692:	6d 83       	std	Y+5, r22	; 0x05
    1694:	7e 83       	std	Y+6, r23	; 0x06
    1696:	8f 83       	std	Y+7, r24	; 0x07
    1698:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    169a:	2b ed       	ldi	r18, 0xDB	; 219
    169c:	3f e0       	ldi	r19, 0x0F	; 15
    169e:	49 e4       	ldi	r20, 0x49	; 73
    16a0:	50 e4       	ldi	r21, 0x40	; 64
    16a2:	c3 01       	movw	r24, r6
    16a4:	b2 01       	movw	r22, r4
    16a6:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	44 e3       	ldi	r20, 0x34	; 52
    16b0:	53 e4       	ldi	r21, 0x43	; 67
    16b2:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    16b6:	0e 94 83 1c 	call	0x3906	; 0x3906 <cos>
    16ba:	2b 01       	movw	r4, r22
    16bc:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    16be:	2b ed       	ldi	r18, 0xDB	; 219
    16c0:	3f e0       	ldi	r19, 0x0F	; 15
    16c2:	49 e4       	ldi	r20, 0x49	; 73
    16c4:	50 e4       	ldi	r21, 0x40	; 64
    16c6:	c8 01       	movw	r24, r16
    16c8:	b7 01       	movw	r22, r14
    16ca:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	44 e3       	ldi	r20, 0x34	; 52
    16d4:	53 e4       	ldi	r21, 0x43	; 67
    16d6:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    16da:	0e 94 83 1c 	call	0x3906	; 0x3906 <cos>
    16de:	69 83       	std	Y+1, r22	; 0x01
    16e0:	7a 83       	std	Y+2, r23	; 0x02
    16e2:	8b 83       	std	Y+3, r24	; 0x03
    16e4:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
    16e6:	29 85       	ldd	r18, Y+9	; 0x09
    16e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    16ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    16ee:	c6 01       	movw	r24, r12
    16f0:	b5 01       	movw	r22, r10
    16f2:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    16f6:	2b ed       	ldi	r18, 0xDB	; 219
    16f8:	3f e0       	ldi	r19, 0x0F	; 15
    16fa:	49 e4       	ldi	r20, 0x49	; 73
    16fc:	50 e4       	ldi	r21, 0x40	; 64
    16fe:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	44 e3       	ldi	r20, 0x34	; 52
    1708:	53 e4       	ldi	r21, 0x43	; 67
    170a:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    //apply haversine formula
    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    171a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <sin>
    171e:	4b 01       	movw	r8, r22
    1720:	5c 01       	movw	r10, r24
    1722:	2d 81       	ldd	r18, Y+5	; 0x05
    1724:	3e 81       	ldd	r19, Y+6	; 0x06
    1726:	4f 81       	ldd	r20, Y+7	; 0x07
    1728:	58 85       	ldd	r21, Y+8	; 0x08
    172a:	ca 01       	movw	r24, r20
    172c:	b9 01       	movw	r22, r18
    172e:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1732:	6b 01       	movw	r12, r22
    1734:	7c 01       	movw	r14, r24
    1736:	29 81       	ldd	r18, Y+1	; 0x01
    1738:	3a 81       	ldd	r19, Y+2	; 0x02
    173a:	4b 81       	ldd	r20, Y+3	; 0x03
    173c:	5c 81       	ldd	r21, Y+4	; 0x04
    173e:	c3 01       	movw	r24, r6
    1740:	b2 01       	movw	r22, r4
    1742:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1746:	a5 01       	movw	r20, r10
    1748:	94 01       	movw	r18, r8
    174a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    174e:	a5 01       	movw	r20, r10
    1750:	94 01       	movw	r18, r8
    1752:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	c7 01       	movw	r24, r14
    175c:	b6 01       	movw	r22, r12
    175e:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    1762:	6b 01       	movw	r12, r22
    1764:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
    1766:	76 2f       	mov	r23, r22
    1768:	27 2f       	mov	r18, r23
    176a:	3d 2d       	mov	r19, r13
    176c:	4e 2d       	mov	r20, r14
    176e:	5f 2d       	mov	r21, r15
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	80 e8       	ldi	r24, 0x80	; 128
    1776:	9f e3       	ldi	r25, 0x3F	; 63
    1778:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__subsf3>
    177c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <sqrt>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	6c 2d       	mov	r22, r12
    1786:	7d 2d       	mov	r23, r13
    1788:	8e 2d       	mov	r24, r14
    178a:	9f 2d       	mov	r25, r15
    178c:	2d 87       	std	Y+13, r18	; 0x0d
    178e:	3e 87       	std	Y+14, r19	; 0x0e
    1790:	4f 87       	std	Y+15, r20	; 0x0f
    1792:	58 8b       	std	Y+16, r21	; 0x10
    1794:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <sqrt>
    1798:	2d 85       	ldd	r18, Y+13	; 0x0d
    179a:	3e 85       	ldd	r19, Y+14	; 0x0e
    179c:	4f 85       	ldd	r20, Y+15	; 0x0f
    179e:	58 89       	ldd	r21, Y+16	; 0x10
    17a0:	0e 94 2c 1c 	call	0x3858	; 0x3858 <atan2>
    17a4:	9b 01       	movw	r18, r22
    17a6:	ac 01       	movw	r20, r24
    17a8:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    double distance = R*c;
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	38 e1       	ldi	r19, 0x18	; 24
    17b0:	47 ec       	ldi	r20, 0xC7	; 199
    17b2:	55 e4       	ldi	r21, 0x45	; 69
    17b4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>

    return (float)distance;
}
    17b8:	60 96       	adiw	r28, 0x10	; 16
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	7f 90       	pop	r7
    17de:	6f 90       	pop	r6
    17e0:	5f 90       	pop	r5
    17e2:	4f 90       	pop	r4
    17e4:	08 95       	ret

000017e6 <my_distance_to_station>:
    return (int)fm_stations->nearest_stations[0][0];
}

//find the distance from the user to a particular station
float my_distance_to_station(GPS_DATA * gps_data, STATION *all_stations, int station_index)
{
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
    17f6:	ec e1       	ldi	r30, 0x1C	; 28
    17f8:	e4 9f       	mul	r30, r20
    17fa:	90 01       	movw	r18, r0
    17fc:	e5 9f       	mul	r30, r21
    17fe:	30 0d       	add	r19, r0
    1800:	11 24       	eor	r1, r1
    1802:	62 0f       	add	r22, r18
    1804:	73 1f       	adc	r23, r19
    1806:	fb 01       	movw	r30, r22
    1808:	a0 88       	ldd	r10, Z+16	; 0x10
    180a:	b1 88       	ldd	r11, Z+17	; 0x11
    180c:	c2 88       	ldd	r12, Z+18	; 0x12
    180e:	d3 88       	ldd	r13, Z+19	; 0x13
    1810:	e4 84       	ldd	r14, Z+12	; 0x0c
    1812:	f5 84       	ldd	r15, Z+13	; 0x0d
    1814:	06 85       	ldd	r16, Z+14	; 0x0e
    1816:	17 85       	ldd	r17, Z+15	; 0x0f
    1818:	fc 01       	movw	r30, r24
    181a:	25 89       	ldd	r18, Z+21	; 0x15
    181c:	36 89       	ldd	r19, Z+22	; 0x16
    181e:	47 89       	ldd	r20, Z+23	; 0x17
    1820:	50 8d       	ldd	r21, Z+24	; 0x18
    1822:	61 89       	ldd	r22, Z+17	; 0x11
    1824:	72 89       	ldd	r23, Z+18	; 0x12
    1826:	83 89       	ldd	r24, Z+19	; 0x13
    1828:	94 89       	ldd	r25, Z+20	; 0x14
    182a:	0e 94 0d 0b 	call	0x161a	; 0x161a <earth_distance>
}
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	08 95       	ret

00001840 <get_nearest_stations>:

}

//find the closest station (index) to a lat/lon coordinate pair
int get_nearest_stations(DATABASE *fm_stations, float lat, float lon)
{
    1840:	2f 92       	push	r2
    1842:	3f 92       	push	r3
    1844:	4f 92       	push	r4
    1846:	5f 92       	push	r5
    1848:	6f 92       	push	r6
    184a:	7f 92       	push	r7
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	cf 92       	push	r12
    1856:	df 92       	push	r13
    1858:	ef 92       	push	r14
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	2e 97       	sbiw	r28, 0x0e	; 14
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	9e 87       	std	Y+14, r25	; 0x0e
    1876:	8d 87       	std	Y+13, r24	; 0x0d
    1878:	4d 83       	std	Y+5, r20	; 0x05
    187a:	5e 83       	std	Y+6, r21	; 0x06
    187c:	6f 83       	std	Y+7, r22	; 0x07
    187e:	78 87       	std	Y+8, r23	; 0x08
    1880:	09 87       	std	Y+9, r16	; 0x09
    1882:	1a 87       	std	Y+10, r17	; 0x0a
    1884:	2b 87       	std	Y+11, r18	; 0x0b
    1886:	3c 87       	std	Y+12, r19	; 0x0c
    int i;

    //clear out nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e8       	ldi	r26, 0x80	; 128
    188e:	bf eb       	ldi	r27, 0xBF	; 191
    1890:	ed 85       	ldd	r30, Y+13	; 0x0d
    1892:	fe 85       	ldd	r31, Y+14	; 0x0e
    1894:	86 83       	std	Z+6, r24	; 0x06
    1896:	97 83       	std	Z+7, r25	; 0x07
    1898:	a0 87       	std	Z+8, r26	; 0x08
    189a:	b1 87       	std	Z+9, r27	; 0x09
        fm_stations->nearest_stations[i][1] = -1;
    189c:	82 87       	std	Z+10, r24	; 0x0a
    189e:	93 87       	std	Z+11, r25	; 0x0b
    18a0:	a4 87       	std	Z+12, r26	; 0x0c
    18a2:	b5 87       	std	Z+13, r27	; 0x0d
    int i;

    //clear out nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    18a4:	86 87       	std	Z+14, r24	; 0x0e
    18a6:	97 87       	std	Z+15, r25	; 0x0f
    18a8:	a0 8b       	std	Z+16, r26	; 0x10
    18aa:	b1 8b       	std	Z+17, r27	; 0x11
        fm_stations->nearest_stations[i][1] = -1;
    18ac:	82 8b       	std	Z+18, r24	; 0x12
    18ae:	93 8b       	std	Z+19, r25	; 0x13
    18b0:	a4 8b       	std	Z+20, r26	; 0x14
    18b2:	b5 8b       	std	Z+21, r27	; 0x15
    int i;

    //clear out nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    18b4:	86 8b       	std	Z+22, r24	; 0x16
    18b6:	97 8b       	std	Z+23, r25	; 0x17
    18b8:	a0 8f       	std	Z+24, r26	; 0x18
    18ba:	b1 8f       	std	Z+25, r27	; 0x19
        fm_stations->nearest_stations[i][1] = -1;
    18bc:	82 8f       	std	Z+26, r24	; 0x1a
    18be:	93 8f       	std	Z+27, r25	; 0x1b
    18c0:	a4 8f       	std	Z+28, r26	; 0x1c
    18c2:	b5 8f       	std	Z+29, r27	; 0x1d
    }

    //compute earth distance to all stations --> remember top 3 min distances
    for (i=0; i<fm_stations->num_stations; i++)
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	9c 83       	std	Y+4, r25	; 0x04
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    18cc:	1a 82       	std	Y+2, r1	; 0x02
    18ce:	19 82       	std	Y+1, r1	; 0x01
    18d0:	21 2c       	mov	r2, r1
    18d2:	31 2c       	mov	r3, r1
    18d4:	f3 c0       	rjmp	.+486    	; 0x1abc <get_nearest_stations+0x27c>
    {
        float temp = earth_distance(lat, lon, fm_stations->all_stations[i].lat, fm_stations->all_stations[i].lon);
    18d6:	ad 85       	ldd	r26, Y+13	; 0x0d
    18d8:	be 85       	ldd	r27, Y+14	; 0x0e
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	e8 0f       	add	r30, r24
    18e4:	f9 1f       	adc	r31, r25
    18e6:	a0 88       	ldd	r10, Z+16	; 0x10
    18e8:	b1 88       	ldd	r11, Z+17	; 0x11
    18ea:	c2 88       	ldd	r12, Z+18	; 0x12
    18ec:	d3 88       	ldd	r13, Z+19	; 0x13
    18ee:	e4 84       	ldd	r14, Z+12	; 0x0c
    18f0:	f5 84       	ldd	r15, Z+13	; 0x0d
    18f2:	06 85       	ldd	r16, Z+14	; 0x0e
    18f4:	17 85       	ldd	r17, Z+15	; 0x0f
    18f6:	29 85       	ldd	r18, Y+9	; 0x09
    18f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    18fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    18fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1900:	7e 81       	ldd	r23, Y+6	; 0x06
    1902:	8f 81       	ldd	r24, Y+7	; 0x07
    1904:	98 85       	ldd	r25, Y+8	; 0x08
    1906:	0e 94 0d 0b 	call	0x161a	; 0x161a <earth_distance>
    190a:	6b 01       	movw	r12, r22
    190c:	7c 01       	movw	r14, r24

        if ((temp < (int)fm_stations->nearest_stations[0][1])||((int)fm_stations->nearest_stations[0][0]==-1))
    190e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1910:	be 85       	ldd	r27, Y+14	; 0x0e
    1912:	1a 96       	adiw	r26, 0x0a	; 10
    1914:	4d 90       	ld	r4, X+
    1916:	5d 90       	ld	r5, X+
    1918:	6d 90       	ld	r6, X+
    191a:	7c 90       	ld	r7, X
    191c:	1d 97       	sbiw	r26, 0x0d	; 13
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    1926:	88 27       	eor	r24, r24
    1928:	77 fd       	sbrc	r23, 7
    192a:	80 95       	com	r24
    192c:	98 2f       	mov	r25, r24
    192e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
    1932:	9b 01       	movw	r18, r22
    1934:	ac 01       	movw	r20, r24
    1936:	c7 01       	movw	r24, r14
    1938:	b6 01       	movw	r22, r12
    193a:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    193e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1940:	fe 85       	ldd	r31, Y+14	; 0x0e
    1942:	82 88       	ldd	r8, Z+18	; 0x12
    1944:	93 88       	ldd	r9, Z+19	; 0x13
    1946:	a4 88       	ldd	r10, Z+20	; 0x14
    1948:	b5 88       	ldd	r11, Z+21	; 0x15
    194a:	87 fd       	sbrc	r24, 7
    194c:	09 c0       	rjmp	.+18     	; 0x1960 <get_nearest_stations+0x120>
    194e:	66 81       	ldd	r22, Z+6	; 0x06
    1950:	77 81       	ldd	r23, Z+7	; 0x07
    1952:	80 85       	ldd	r24, Z+8	; 0x08
    1954:	91 85       	ldd	r25, Z+9	; 0x09
    1956:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    195a:	6f 3f       	cpi	r22, 0xFF	; 255
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	79 f5       	brne	.+94     	; 0x19be <get_nearest_stations+0x17e>
        {
        	fm_stations->nearest_stations[2][1] = fm_stations->nearest_stations[1][1];
    1960:	ad 85       	ldd	r26, Y+13	; 0x0d
    1962:	be 85       	ldd	r27, Y+14	; 0x0e
    1964:	5a 96       	adiw	r26, 0x1a	; 26
    1966:	8d 92       	st	X+, r8
    1968:	9d 92       	st	X+, r9
    196a:	ad 92       	st	X+, r10
    196c:	bc 92       	st	X, r11
    196e:	5d 97       	sbiw	r26, 0x1d	; 29
        	fm_stations->nearest_stations[2][0] = fm_stations->nearest_stations[1][0];
    1970:	fd 01       	movw	r30, r26
    1972:	86 85       	ldd	r24, Z+14	; 0x0e
    1974:	97 85       	ldd	r25, Z+15	; 0x0f
    1976:	a0 89       	ldd	r26, Z+16	; 0x10
    1978:	b1 89       	ldd	r27, Z+17	; 0x11
    197a:	86 8b       	std	Z+22, r24	; 0x16
    197c:	97 8b       	std	Z+23, r25	; 0x17
    197e:	a0 8f       	std	Z+24, r26	; 0x18
    1980:	b1 8f       	std	Z+25, r27	; 0x19
        	fm_stations->nearest_stations[1][1] = fm_stations->nearest_stations[0][1];
    1982:	42 8a       	std	Z+18, r4	; 0x12
    1984:	53 8a       	std	Z+19, r5	; 0x13
    1986:	64 8a       	std	Z+20, r6	; 0x14
    1988:	75 8a       	std	Z+21, r7	; 0x15
        	fm_stations->nearest_stations[1][0] = fm_stations->nearest_stations[0][0];
    198a:	86 81       	ldd	r24, Z+6	; 0x06
    198c:	97 81       	ldd	r25, Z+7	; 0x07
    198e:	a0 85       	ldd	r26, Z+8	; 0x08
    1990:	b1 85       	ldd	r27, Z+9	; 0x09
    1992:	86 87       	std	Z+14, r24	; 0x0e
    1994:	97 87       	std	Z+15, r25	; 0x0f
    1996:	a0 8b       	std	Z+16, r26	; 0x10
    1998:	b1 8b       	std	Z+17, r27	; 0x11
        	fm_stations->nearest_stations[0][1] = temp;
    199a:	c2 86       	std	Z+10, r12	; 0x0a
    199c:	d3 86       	std	Z+11, r13	; 0x0b
    199e:	e4 86       	std	Z+12, r14	; 0x0c
    19a0:	f5 86       	std	Z+13, r15	; 0x0d
        	fm_stations->nearest_stations[0][0] = i;
    19a2:	b1 01       	movw	r22, r2
    19a4:	88 27       	eor	r24, r24
    19a6:	77 fd       	sbrc	r23, 7
    19a8:	80 95       	com	r24
    19aa:	98 2f       	mov	r25, r24
    19ac:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
    19b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    19b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    19b4:	66 83       	std	Z+6, r22	; 0x06
    19b6:	77 83       	std	Z+7, r23	; 0x07
    19b8:	80 87       	std	Z+8, r24	; 0x08
    19ba:	91 87       	std	Z+9, r25	; 0x09
    19bc:	77 c0       	rjmp	.+238    	; 0x1aac <get_nearest_stations+0x26c>
        } else if ((temp < (int)fm_stations->nearest_stations[1][1])||((int)fm_stations->nearest_stations[1][0]==-1))
    19be:	c5 01       	movw	r24, r10
    19c0:	b4 01       	movw	r22, r8
    19c2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    19c6:	88 27       	eor	r24, r24
    19c8:	77 fd       	sbrc	r23, 7
    19ca:	80 95       	com	r24
    19cc:	98 2f       	mov	r25, r24
    19ce:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	c7 01       	movw	r24, r14
    19d8:	b6 01       	movw	r22, r12
    19da:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    19de:	87 fd       	sbrc	r24, 7
    19e0:	0d c0       	rjmp	.+26     	; 0x19fc <get_nearest_stations+0x1bc>
    19e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    19e4:	be 85       	ldd	r27, Y+14	; 0x0e
    19e6:	1e 96       	adiw	r26, 0x0e	; 14
    19e8:	6d 91       	ld	r22, X+
    19ea:	7d 91       	ld	r23, X+
    19ec:	8d 91       	ld	r24, X+
    19ee:	9c 91       	ld	r25, X
    19f0:	51 97       	sbiw	r26, 0x11	; 17
    19f2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    19f6:	6f 3f       	cpi	r22, 0xFF	; 255
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	01 f5       	brne	.+64     	; 0x1a3c <get_nearest_stations+0x1fc>
        {
        	fm_stations->nearest_stations[2][1] = fm_stations->nearest_stations[1][1];
    19fc:	ed 85       	ldd	r30, Y+13	; 0x0d
    19fe:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a00:	82 8e       	std	Z+26, r8	; 0x1a
    1a02:	93 8e       	std	Z+27, r9	; 0x1b
    1a04:	a4 8e       	std	Z+28, r10	; 0x1c
    1a06:	b5 8e       	std	Z+29, r11	; 0x1d
        	fm_stations->nearest_stations[2][0] = fm_stations->nearest_stations[1][0];
    1a08:	86 85       	ldd	r24, Z+14	; 0x0e
    1a0a:	97 85       	ldd	r25, Z+15	; 0x0f
    1a0c:	a0 89       	ldd	r26, Z+16	; 0x10
    1a0e:	b1 89       	ldd	r27, Z+17	; 0x11
    1a10:	86 8b       	std	Z+22, r24	; 0x16
    1a12:	97 8b       	std	Z+23, r25	; 0x17
    1a14:	a0 8f       	std	Z+24, r26	; 0x18
    1a16:	b1 8f       	std	Z+25, r27	; 0x19
        	fm_stations->nearest_stations[1][1] = temp;
    1a18:	c2 8a       	std	Z+18, r12	; 0x12
    1a1a:	d3 8a       	std	Z+19, r13	; 0x13
    1a1c:	e4 8a       	std	Z+20, r14	; 0x14
    1a1e:	f5 8a       	std	Z+21, r15	; 0x15
        	fm_stations->nearest_stations[1][0] = i;
    1a20:	b1 01       	movw	r22, r2
    1a22:	88 27       	eor	r24, r24
    1a24:	77 fd       	sbrc	r23, 7
    1a26:	80 95       	com	r24
    1a28:	98 2f       	mov	r25, r24
    1a2a:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
    1a2e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a30:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a32:	66 87       	std	Z+14, r22	; 0x0e
    1a34:	77 87       	std	Z+15, r23	; 0x0f
    1a36:	80 8b       	std	Z+16, r24	; 0x10
    1a38:	91 8b       	std	Z+17, r25	; 0x11
    1a3a:	38 c0       	rjmp	.+112    	; 0x1aac <get_nearest_stations+0x26c>
        } else if ((temp < (int)fm_stations->nearest_stations[2][1])||((int)fm_stations->nearest_stations[2][0]==-1))
    1a3c:	ad 85       	ldd	r26, Y+13	; 0x0d
    1a3e:	be 85       	ldd	r27, Y+14	; 0x0e
    1a40:	5a 96       	adiw	r26, 0x1a	; 26
    1a42:	6d 91       	ld	r22, X+
    1a44:	7d 91       	ld	r23, X+
    1a46:	8d 91       	ld	r24, X+
    1a48:	9c 91       	ld	r25, X
    1a4a:	5d 97       	sbiw	r26, 0x1d	; 29
    1a4c:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    1a50:	88 27       	eor	r24, r24
    1a52:	77 fd       	sbrc	r23, 7
    1a54:	80 95       	com	r24
    1a56:	98 2f       	mov	r25, r24
    1a58:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	c7 01       	movw	r24, r14
    1a62:	b6 01       	movw	r22, r12
    1a64:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    1a68:	87 fd       	sbrc	r24, 7
    1a6a:	0b c0       	rjmp	.+22     	; 0x1a82 <get_nearest_stations+0x242>
    1a6c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a6e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a70:	66 89       	ldd	r22, Z+22	; 0x16
    1a72:	77 89       	ldd	r23, Z+23	; 0x17
    1a74:	80 8d       	ldd	r24, Z+24	; 0x18
    1a76:	91 8d       	ldd	r25, Z+25	; 0x19
    1a78:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    1a7c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	a9 f4       	brne	.+42     	; 0x1aac <get_nearest_stations+0x26c>
        {
        	fm_stations->nearest_stations[2][1] = temp;
    1a82:	ad 85       	ldd	r26, Y+13	; 0x0d
    1a84:	be 85       	ldd	r27, Y+14	; 0x0e
    1a86:	5a 96       	adiw	r26, 0x1a	; 26
    1a88:	cd 92       	st	X+, r12
    1a8a:	dd 92       	st	X+, r13
    1a8c:	ed 92       	st	X+, r14
    1a8e:	fc 92       	st	X, r15
    1a90:	5d 97       	sbiw	r26, 0x1d	; 29
        	fm_stations->nearest_stations[2][0] = i;
    1a92:	b1 01       	movw	r22, r2
    1a94:	88 27       	eor	r24, r24
    1a96:	77 fd       	sbrc	r23, 7
    1a98:	80 95       	com	r24
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__floatsisf>
    1aa0:	ed 85       	ldd	r30, Y+13	; 0x0d
    1aa2:	fe 85       	ldd	r31, Y+14	; 0x0e
    1aa4:	66 8b       	std	Z+22, r22	; 0x16
    1aa6:	77 8b       	std	Z+23, r23	; 0x17
    1aa8:	80 8f       	std	Z+24, r24	; 0x18
    1aaa:	91 8f       	std	Z+25, r25	; 0x19
        fm_stations->nearest_stations[i][0] = -1;
        fm_stations->nearest_stations[i][1] = -1;
    }

    //compute earth distance to all stations --> remember top 3 min distances
    for (i=0; i<fm_stations->num_stations; i++)
    1aac:	ff ef       	ldi	r31, 0xFF	; 255
    1aae:	2f 1a       	sub	r2, r31
    1ab0:	3f 0a       	sbc	r3, r31
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	4c 96       	adiw	r24, 0x1c	; 28
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	ab 81       	ldd	r26, Y+3	; 0x03
    1abe:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac0:	2a 16       	cp	r2, r26
    1ac2:	3b 06       	cpc	r3, r27
    1ac4:	0c f4       	brge	.+2      	; 0x1ac8 <get_nearest_stations+0x288>
    1ac6:	07 cf       	rjmp	.-498    	; 0x18d6 <get_nearest_stations+0x96>
        	fm_stations->nearest_stations[2][1] = temp;
        	fm_stations->nearest_stations[2][0] = i;
        }
    }
    //return closest station index
    return (int)fm_stations->nearest_stations[0][0];
    1ac8:	ed 85       	ldd	r30, Y+13	; 0x0d
    1aca:	fe 85       	ldd	r31, Y+14	; 0x0e
    1acc:	66 81       	ldd	r22, Z+6	; 0x06
    1ace:	77 81       	ldd	r23, Z+7	; 0x07
    1ad0:	80 85       	ldd	r24, Z+8	; 0x08
    1ad2:	91 85       	ldd	r25, Z+9	; 0x09
    1ad4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
}
    1ad8:	cb 01       	movw	r24, r22
    1ada:	2e 96       	adiw	r28, 0x0e	; 14
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	5f 90       	pop	r5
    1b04:	4f 90       	pop	r4
    1b06:	3f 90       	pop	r3
    1b08:	2f 90       	pop	r2
    1b0a:	08 95       	ret

00001b0c <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1b0c:	2b ed       	ldi	r18, 0xDB	; 219
    1b0e:	3f e0       	ldi	r19, 0x0F	; 15
    1b10:	49 e4       	ldi	r20, 0x49	; 73
    1b12:	50 e4       	ldi	r21, 0x40	; 64
    1b14:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	44 e3       	ldi	r20, 0x34	; 52
    1b1e:	53 e4       	ldi	r21, 0x43	; 67
    1b20:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
}
    1b24:	08 95       	ret

00001b26 <to_degrees>:

//convert an angle from radians to degrees
double to_degrees(double radian_angle)
{
	return 180*radian_angle/(M_PI);
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	44 e3       	ldi	r20, 0x34	; 52
    1b2c:	53 e4       	ldi	r21, 0x43	; 67
    1b2e:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    1b32:	2b ed       	ldi	r18, 0xDB	; 219
    1b34:	3f e0       	ldi	r19, 0x0F	; 15
    1b36:	49 e4       	ldi	r20, 0x49	; 73
    1b38:	50 e4       	ldi	r21, 0x40	; 64
    1b3a:	0e 94 86 1c 	call	0x390c	; 0x390c <__divsf3>
}
    1b3e:	08 95       	ret

00001b40 <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
{
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	ec 01       	movw	r28, r24
    1b4e:	fc 01       	movw	r30, r24
    int i;

    //message param should not contain nulls
    for (i=0; i<4; i++)
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (gps_data->msg_type[i]=='\0')
    1b54:	21 91       	ld	r18, Z+
    1b56:	22 23       	and	r18, r18
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <gps_locked+0x1c>
    1b5a:	45 c0       	rjmp	.+138    	; 0x1be6 <gps_locked+0xa6>
int gps_locked(GPS_DATA *gps_data)
{
    int i;

    //message param should not contain nulls
    for (i=0; i<4; i++)
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	91 05       	cpc	r25, r1
    1b62:	c1 f7       	brne	.-16     	; 0x1b54 <gps_locked+0x14>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
{
	return 180*radian_angle/(M_PI);
}

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e8 0f       	add	r30, r24
    1b6c:	f9 1f       	adc	r31, r25
    }

    //time param should not contain nulls
    for (i=0; i<4; i++)
    {
        if (gps_data->utc_time[i]=='\0')
    1b6e:	20 85       	ldd	r18, Z+8	; 0x08
    1b70:	22 23       	and	r18, r18
    1b72:	c9 f1       	breq	.+114    	; 0x1be6 <gps_locked+0xa6>
        if (gps_data->msg_type[i]=='\0')
            return 0;
    }

    //time param should not contain nulls
    for (i=0; i<4; i++)
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	91 05       	cpc	r25, r1
    1b7a:	b1 f7       	brne	.-20     	; 0x1b68 <gps_locked+0x28>
        if (gps_data->utc_time[i]=='\0')
            return 0;
    }

    //lat and lon should not be 0,0
    if ((gps_data->lat==0)||(gps_data->lon==0))
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	a9 01       	movw	r20, r18
    1b82:	69 89       	ldd	r22, Y+17	; 0x11
    1b84:	7a 89       	ldd	r23, Y+18	; 0x12
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	51 f1       	breq	.+84     	; 0x1be6 <gps_locked+0xa6>
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	f9 f0       	breq	.+62     	; 0x1be6 <gps_locked+0xa6>
        return 0;

    //checksum should exist
    if (gps_data->checksum[0] != '*')
    1ba8:	8a a9       	ldd	r24, Y+50	; 0x32
    1baa:	8a 32       	cpi	r24, 0x2A	; 42
    1bac:	e1 f4       	brne	.+56     	; 0x1be6 <gps_locked+0xa6>
        return 0;

    //course should be between 0 and 360
    if ((gps_data->course < 0)||(gps_data->course>=360))
    1bae:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1bb0:	de 8c       	ldd	r13, Y+30	; 0x1e
    1bb2:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1bb4:	f8 a0       	ldd	r15, Y+32	; 0x20
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	a9 01       	movw	r20, r18
    1bbc:	c7 01       	movw	r24, r14
    1bbe:	b6 01       	movw	r22, r12
    1bc0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    1bc4:	87 fd       	sbrc	r24, 7
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <gps_locked+0xa6>
    1bc8:	c1 e0       	ldi	r28, 0x01	; 1
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	44 eb       	ldi	r20, 0xB4	; 180
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__gesf2>
    1bda:	87 fd       	sbrc	r24, 7
    1bdc:	c0 e0       	ldi	r28, 0x00	; 0
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	2c 27       	eor	r18, r28

    //message param should not contain nulls
    for (i=0; i<4; i++)
    {
        if (gps_data->msg_type[i]=='\0')
            return 0;
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <gps_locked+0xaa>
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    if ((gps_data->course < 0)||(gps_data->course>=360))
    	return 0;

    return 1;

    1bea:	c9 01       	movw	r24, r18
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	08 95       	ret

00001bfa <my_eeprom_read_int>:
#include "lcd.h"

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1bfa:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__eerd_byte_m1284p>
    return (temp_num);
}
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	08 95       	ret

00001c02 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    1c02:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <__eerd_byte_m1284p>

00001c06 <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1c06:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__eerd_dword_m1284p>

00001c0a <my_eeprom_read_string>:
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    1c0a:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <__eerd_block_m1284p>

00001c0e <database_load>:
}

//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    1c0e:	cf 92       	push	r12
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	ec 01       	movw	r28, r24
#include "lcd.h"

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__eerd_byte_m1284p>
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
    1c2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	19 f0       	breq	.+6      	; 0x1c36 <database_load+0x28>
//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);
    1c30:	9b 83       	std	Y+3, r25	; 0x03
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <database_load+0x2c>

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
        fm_stations->num_stations = 0;
    1c36:	1b 82       	std	Y+3, r1	; 0x03
    1c38:	1a 82       	std	Y+2, r1	; 0x02

    fm_stations->nearest_station = -1;
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	9f ef       	ldi	r25, 0xFF	; 255
    1c3e:	9d 83       	std	Y+5, r25	; 0x05
    1c40:	8c 83       	std	Y+4, r24	; 0x04

    //initialize nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1c42:	9f 83       	std	Y+7, r25	; 0x07
    1c44:	8e 83       	std	Y+6, r24	; 0x06
        fm_stations->nearest_stations[i][1] = -1;
    1c46:	99 87       	std	Y+9, r25	; 0x09
    1c48:	88 87       	std	Y+8, r24	; 0x08
    fm_stations->nearest_station = -1;

    //initialize nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1c4a:	9b 87       	std	Y+11, r25	; 0x0b
    1c4c:	8a 87       	std	Y+10, r24	; 0x0a
        fm_stations->nearest_stations[i][1] = -1;
    1c4e:	9d 87       	std	Y+13, r25	; 0x0d
    1c50:	8c 87       	std	Y+12, r24	; 0x0c
    fm_stations->nearest_station = -1;

    //initialize nearest stations and distances
    for (i=0; i<NUM_NEAREST; i++)
    {
        fm_stations->nearest_stations[i][0] = -1;
    1c52:	9f 87       	std	Y+15, r25	; 0x0f
    1c54:	8e 87       	std	Y+14, r24	; 0x0e
        fm_stations->nearest_stations[i][1] = -1;
    1c56:	99 8b       	std	Y+17, r25	; 0x11
    1c58:	88 8b       	std	Y+16, r24	; 0x10
    1c5a:	2f e9       	ldi	r18, 0x9F	; 159
    1c5c:	46 e8       	ldi	r20, 0x86	; 134
    1c5e:	51 e0       	ldi	r21, 0x01	; 1
    1c60:	21 50       	subi	r18, 0x01	; 1
    1c62:	40 40       	sbci	r20, 0x00	; 0
    1c64:	50 40       	sbci	r21, 0x00	; 0
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <database_load+0x52>
    1c68:	00 c0       	rjmp	.+0      	; 0x1c6a <database_load+0x5c>
    1c6a:	00 00       	nop
    }

    _delay_ms(500);
    lcd_init();
    1c6c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("importing ");
    1c70:	8a e2       	ldi	r24, 0x2A	; 42
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_int(fm_stations->num_stations,3);
    1c78:	63 e0       	ldi	r22, 0x03	; 3
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    string_write("\nstations...");
    1c84:	85 e3       	ldi	r24, 0x35	; 53
    1c86:	92 e0       	ldi	r25, 0x02	; 2
    1c88:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //allocate memory for all the station structures
    fm_stations->all_stations = (STATION *)malloc(fm_stations->num_stations*sizeof(STATION));
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c90:	2c e1       	ldi	r18, 0x1C	; 28
    1c92:	fc 01       	movw	r30, r24
    1c94:	2e 9f       	mul	r18, r30
    1c96:	c0 01       	movw	r24, r0
    1c98:	2f 9f       	mul	r18, r31
    1c9a:	90 0d       	add	r25, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
    1ca2:	99 83       	std	Y+1, r25	; 0x01
    1ca4:	88 83       	st	Y, r24
    if (fm_stations->all_stations == NULL)
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <database_load+0x9e>
    1caa:	4b c0       	rjmp	.+150    	; 0x1d42 <database_load+0x134>
    {
            lcd_init();
    1cac:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
            string_write("bad malloc");
    1cb0:	8f e2       	ldi	r24, 0x2F	; 47
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            //database failed to load
            return 0;
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4e c0       	rjmp	.+156    	; 0x1d5a <database_load+0x14c>
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
}

//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
    1cbe:	b8 01       	movw	r22, r16
    1cc0:	6f 5f       	subi	r22, 0xFF	; 255
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
    1cc4:	88 81       	ld	r24, Y
    1cc6:	99 81       	ldd	r25, Y+1	; 0x01
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    1cc8:	48 e0       	ldi	r20, 0x08	; 8
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	80 0f       	add	r24, r16
    1cce:	91 1f       	adc	r25, r17
    1cd0:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__eerd_block_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    1cd4:	e8 80       	ld	r14, Y
    1cd6:	f9 80       	ldd	r15, Y+1	; 0x01
    1cd8:	e0 0e       	add	r14, r16
    1cda:	f1 1e       	adc	r15, r17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1cdc:	c8 01       	movw	r24, r16
    1cde:	09 96       	adiw	r24, 0x09	; 9
    1ce0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__eerd_dword_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    1ce4:	f7 01       	movw	r30, r14
    1ce6:	60 87       	std	Z+8, r22	; 0x08
    1ce8:	71 87       	std	Z+9, r23	; 0x09
    1cea:	82 87       	std	Z+10, r24	; 0x0a
    1cec:	93 87       	std	Z+11, r25	; 0x0b
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1cee:	c8 01       	movw	r24, r16
    1cf0:	0d 96       	adiw	r24, 0x0d	; 13
    1cf2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__eerd_dword_m1284p>
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	64 87       	std	Z+12, r22	; 0x0c
    1cfa:	75 87       	std	Z+13, r23	; 0x0d
    1cfc:	86 87       	std	Z+14, r24	; 0x0e
    1cfe:	97 87       	std	Z+15, r25	; 0x0f
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d00:	c8 01       	movw	r24, r16
    1d02:	41 96       	adiw	r24, 0x11	; 17
    1d04:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
    1d08:	f7 01       	movw	r30, r14
    1d0a:	60 8b       	std	Z+16, r22	; 0x10
    1d0c:	71 8b       	std	Z+17, r23	; 0x11
    1d0e:	82 8b       	std	Z+18, r24	; 0x12
    1d10:	93 8b       	std	Z+19, r25	; 0x13
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d12:	c8 01       	movw	r24, r16
    1d14:	45 96       	adiw	r24, 0x15	; 21
    1d16:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
    1d1a:	f7 01       	movw	r30, r14
    1d1c:	64 8b       	std	Z+20, r22	; 0x14
    1d1e:	75 8b       	std	Z+21, r23	; 0x15
    1d20:	86 8b       	std	Z+22, r24	; 0x16
    1d22:	97 8b       	std	Z+23, r25	; 0x17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1d24:	c8 01       	movw	r24, r16
    1d26:	49 96       	adiw	r24, 0x19	; 25
    1d28:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__eerd_dword_m1284p>
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	60 8f       	std	Z+24, r22	; 0x18
    1d30:	71 8f       	std	Z+25, r23	; 0x19
    1d32:	82 8f       	std	Z+26, r24	; 0x1a
    1d34:	93 8f       	std	Z+27, r25	; 0x1b
            //database failed to load
            return 0;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    1d36:	ff ef       	ldi	r31, 0xFF	; 255
    1d38:	cf 1a       	sub	r12, r31
    1d3a:	df 0a       	sbc	r13, r31
    1d3c:	04 5e       	subi	r16, 0xE4	; 228
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <database_load+0x13c>
    string_write_int(fm_stations->num_stations,3);
    string_write("\nstations...");

    //allocate memory for all the station structures
    fm_stations->all_stations = (STATION *)malloc(fm_stations->num_stations*sizeof(STATION));
    if (fm_stations->all_stations == NULL)
    1d42:	00 e0       	ldi	r16, 0x00	; 0
    1d44:	10 e0       	ldi	r17, 0x00	; 0
    1d46:	c1 2c       	mov	r12, r1
    1d48:	d1 2c       	mov	r13, r1
            //database failed to load
            return 0;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	c8 16       	cp	r12, r24
    1d50:	d9 06       	cpc	r13, r25
    1d52:	0c f4       	brge	.+2      	; 0x1d56 <database_load+0x148>
    1d54:	b4 cf       	rjmp	.-152    	; 0x1cbe <database_load+0xb0>
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }

    //database loaded successfully
    return 1;
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	30 e0       	ldi	r19, 0x00	; 0
}
    1d5a:	c9 01       	movw	r24, r18
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	08 95       	ret

00001d6e <database_free>:

//free the FM Stations database from program memory
int database_free(DATABASE *fm_stations)
{
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24

    free(fm_stations->all_stations);
    1d74:	88 81       	ld	r24, Y
    1d76:	99 81       	ldd	r25, Y+1	; 0x01
    1d78:	0e 94 3f 21 	call	0x427e	; 0x427e <free>
    fm_stations->all_stations = NULL;
    1d7c:	19 82       	std	Y+1, r1	; 0x01
    1d7e:	18 82       	st	Y, r1

    return 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	08 95       	ret

00001d8a <sync_leds>:

//synchronize op mode LEDs
void sync_leds(volatile DEV_STATE *device)
{
    //light up the mode LEDs
    switch (device->op_mode)
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	80 85       	ldd	r24, Z+8	; 0x08
    1d8e:	91 85       	ldd	r25, Z+9	; 0x09
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	91 05       	cpc	r25, r1
    1d94:	a9 f0       	breq	.+42     	; 0x1dc0 <sync_leds+0x36>
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <sync_leds+0x18>
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	51 f0       	breq	.+20     	; 0x1db0 <sync_leds+0x26>
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	19 f5       	brne	.+70     	; 0x1de6 <sync_leds+0x5c>
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <sync_leds+0x2e>
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	91 05       	cpc	r25, r1
    1da6:	a9 f0       	breq	.+42     	; 0x1dd2 <sync_leds+0x48>
    1da8:	7c f0       	brlt	.+30     	; 0x1dc8 <sync_leds+0x3e>
    1daa:	05 97       	sbiw	r24, 0x05	; 5
    1dac:	e1 f4       	brne	.+56     	; 0x1de6 <sync_leds+0x5c>
    1dae:	16 c0       	rjmp	.+44     	; 0x1ddc <sync_leds+0x52>
    {
        case 0:
            PORTB |= 1<<PB0;
    1db0:	28 9a       	sbi	0x05, 0	; 5
            PORTB &= ~((1<<PB3)|(1<<PB1));
    1db2:	85 b1       	in	r24, 0x05	; 5
    1db4:	85 7f       	andi	r24, 0xF5	; 245
    1db6:	19 c0       	rjmp	.+50     	; 0x1dea <sync_leds+0x60>
        break;
        case 1:
            PORTB |= 1<<PB1;
    1db8:	29 9a       	sbi	0x05, 1	; 5
            PORTB &= ~((1<<PB3)|(1<<PB0));
    1dba:	85 b1       	in	r24, 0x05	; 5
    1dbc:	86 7f       	andi	r24, 0xF6	; 246
    1dbe:	15 c0       	rjmp	.+42     	; 0x1dea <sync_leds+0x60>
        break;
        case 2:
            PORTB |= 1<<PB3;
    1dc0:	2b 9a       	sbi	0x05, 3	; 5
            PORTB &= ~((1<<PB1)|(1<<PB0));
    1dc2:	85 b1       	in	r24, 0x05	; 5
    1dc4:	8c 7f       	andi	r24, 0xFC	; 252
    1dc6:	11 c0       	rjmp	.+34     	; 0x1dea <sync_leds+0x60>
        break;
        case 3:
            PORTB |= ((1<<PB1)|(1<<PB0));
    1dc8:	85 b1       	in	r24, 0x05	; 5
    1dca:	83 60       	ori	r24, 0x03	; 3
    1dcc:	85 b9       	out	0x05, r24	; 5
            PORTB &= ~(1<<PB3);
    1dce:	2b 98       	cbi	0x05, 3	; 5
        break;
    1dd0:	08 95       	ret
        case 4:
            PORTB |= ((1<<PB3)|(1<<PB1));
    1dd2:	85 b1       	in	r24, 0x05	; 5
    1dd4:	8a 60       	ori	r24, 0x0A	; 10
    1dd6:	85 b9       	out	0x05, r24	; 5
            PORTB &= ~(1<<PB0);
    1dd8:	28 98       	cbi	0x05, 0	; 5
        break;
    1dda:	08 95       	ret
        case 5:
            PORTB |= ((1<<PB3)|(1<<PB0));
    1ddc:	85 b1       	in	r24, 0x05	; 5
    1dde:	89 60       	ori	r24, 0x09	; 9
    1de0:	85 b9       	out	0x05, r24	; 5
            PORTB &= ~(1<<PB1);
    1de2:	29 98       	cbi	0x05, 1	; 5
        break;
    1de4:	08 95       	ret
        default:
            PORTB |= ((1<<PB3)|(1<<PB1)|(1<<PB0));
    1de6:	85 b1       	in	r24, 0x05	; 5
    1de8:	8b 60       	ori	r24, 0x0B	; 11
    1dea:	85 b9       	out	0x05, r24	; 5
    1dec:	08 95       	ret

00001dee <InitUSART>:

//Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
    1dee:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
    1df2:	8c e0       	ldi	r24, 0x0C	; 12
    1df4:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
    1df8:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
    1dfc:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    1e00:	e9 ec       	ldi	r30, 0xC9	; 201
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	88 6d       	ori	r24, 0xD8	; 216
    1e08:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    1e0a:	e1 ec       	ldi	r30, 0xC1	; 193
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 6d       	ori	r24, 0xD8	; 216
    1e12:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
    1e14:	e8 ec       	ldi	r30, 0xC8	; 200
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	82 60       	ori	r24, 0x02	; 2
    1e1c:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
    1e1e:	e0 ec       	ldi	r30, 0xC0	; 192
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	82 60       	ori	r24, 0x02	; 2
    1e26:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
    1e28:	ea ec       	ldi	r30, 0xCA	; 202
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8e 60       	ori	r24, 0x0E	; 14
    1e30:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    1e32:	e2 ec       	ldi	r30, 0xC2	; 194
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	86 60       	ori	r24, 0x06	; 6
    1e3a:	80 83       	st	Z, r24
    1e3c:	08 95       	ret

00001e3e <InitINT>:

//Set Up External Interrupt 2
void InitINT(void)
{
    //trigger external interrupt 2 on falling edge
    EICRA |= (1 << ISC21);
    1e3e:	e9 e6       	ldi	r30, 0x69	; 105
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 62       	ori	r24, 0x20	; 32
    1e46:	80 83       	st	Z, r24
    EICRA &= ~(1<<ISC20);
    1e48:	80 81       	ld	r24, Z
    1e4a:	8f 7e       	andi	r24, 0xEF	; 239
    1e4c:	80 83       	st	Z, r24

    //enable external interrupt 2 
    EIMSK |= (1 << INT2);
    1e4e:	ea 9a       	sbi	0x1d, 2	; 29

    //set Port B Pin 2 as Input
    DDRB &= ~(1<<PB2);
    1e50:	22 98       	cbi	0x04, 2	; 4
    //enable pull-up resistor
    PORTB |= (1<<PB2);
    1e52:	2a 9a       	sbi	0x05, 2	; 5

    //enable PB0, PB1, PB3 as Outputs
    DDRB |= ((1<<PB0)|(1<<PB1)|(1<<PB3));
    1e54:	84 b1       	in	r24, 0x04	; 4
    1e56:	8b 60       	ori	r24, 0x0B	; 11
    1e58:	84 b9       	out	0x04, r24	; 4

    //turn on the first LED
    PORTB |= (1<<PB0);
    1e5a:	28 9a       	sbi	0x05, 0	; 5


    //SET UP TIMER FOR DEBOUNCING

    //set normal output compare modes
    TCCR1A &= ~((1<<COM1A1)|(1<<COM1A0));
    1e5c:	e0 e8       	ldi	r30, 0x80	; 128
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 73       	andi	r24, 0x3F	; 63
    1e64:	80 83       	st	Z, r24
    
    //prescale the default clock by /1024
    TCCR1B |= ((1<<CS12)|(1<<CS10));
    1e66:	e1 e8       	ldi	r30, 0x81	; 129
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	85 60       	ori	r24, 0x05	; 5
    1e6e:	80 83       	st	Z, r24
    TCCR1B &= ~((1<<CS11));
    1e70:	80 81       	ld	r24, Z
    1e72:	8d 7f       	andi	r24, 0xFD	; 253
    1e74:	80 83       	st	Z, r24

    //set the max internal counter value
    uint8_t debounce_delay = 122; //roughly 1/8th of a second
    OCR1AH &= ~(0xFF);
    1e76:	e9 e8       	ldi	r30, 0x89	; 137
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	10 82       	st	Z, r1
    OCR1AL |= 0xFF;
    1e7e:	e8 e8       	ldi	r30, 0x88	; 136
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	80 83       	st	Z, r24
    OCR1AL &= debounce_delay;
    1e88:	80 81       	ld	r24, Z
    1e8a:	8a 77       	andi	r24, 0x7A	; 122
    1e8c:	80 83       	st	Z, r24

    //enable the timer interrupt
    TIMSK1 |= (1<<OCIE1A);
    1e8e:	ef e6       	ldi	r30, 0x6F	; 111
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	82 60       	ori	r24, 0x02	; 2
    1e96:	80 83       	st	Z, r24
    1e98:	08 95       	ret

00001e9a <disable_gps>:
}

//turn off GPS intterupts, receiver, and transmitter
void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0)); // 
    1e9a:	e1 ec       	ldi	r30, 0xC1	; 193
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	87 72       	andi	r24, 0x27	; 39
    1ea2:	80 83       	st	Z, r24
    1ea4:	08 95       	ret

00001ea6 <enable_gps>:
}

//turn on GPS interrupts, receiver, and transmitter
void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0); //
    1ea6:	e1 ec       	ldi	r30, 0xC1	; 193
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 6d       	ori	r24, 0xD8	; 216
    1eae:	80 83       	st	Z, r24
    1eb0:	08 95       	ret

00001eb2 <prepare_device>:
    TIMSK1 |= (1<<OCIE1A);
}

//set up GPIO, initialize interrupts, serial comm, and LCD
int prepare_device(volatile DEV_STATE *device)
{
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
    int i, j;
    DDRB = 0xFF;
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	84 b9       	out	0x04, r24	; 4

    cli();
    1ec0:	f8 94       	cli

    //Init usart
    InitUSART();
    1ec2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <InitUSART>

    //Enable Pin Change Interrupts (for the pushbutton)
    InitINT();
    1ec6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <InitINT>

    //Enable GPS Interrupts
    enable_gps();
    1eca:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <enable_gps>

    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
    1ece:	78 94       	sei

    //blink PB0 during the startup sequence
    device->blinking = 1;
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e7 5f       	subi	r30, 0xF7	; 247
    1ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed6:	01 e0       	ldi	r16, 0x01	; 1
    1ed8:	10 e0       	ldi	r17, 0x00	; 0
    1eda:	11 83       	std	Z+1, r17	; 0x01
    1edc:	00 83       	st	Z, r16
    device->blinker1 = 0;
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 5f       	subi	r30, 0xFD	; 253
    1ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ee4:	11 82       	std	Z+1, r1	; 0x01
    1ee6:	10 82       	st	Z, r1
    device->blinker2 = -2;
    1ee8:	fe 01       	movw	r30, r28
    1eea:	eb 5f       	subi	r30, 0xFB	; 251
    1eec:	fe 4f       	sbci	r31, 0xFE	; 254
    1eee:	8e ef       	ldi	r24, 0xFE	; 254
    1ef0:	9f ef       	ldi	r25, 0xFF	; 255
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
    device->blinker3 = -2;
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e9 5f       	subi	r30, 0xF9	; 249
    1efa:	fe 4f       	sbci	r31, 0xFE	; 254
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	80 83       	st	Z, r24

    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
    1f00:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    1f04:	2f e3       	ldi	r18, 0x3F	; 63
    1f06:	8d e0       	ldi	r24, 0x0D	; 13
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	21 50       	subi	r18, 0x01	; 1
    1f0c:	80 40       	sbci	r24, 0x00	; 0
    1f0e:	90 40       	sbci	r25, 0x00	; 0
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <prepare_device+0x58>
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <prepare_device+0x62>
    1f14:	00 00       	nop
    _delay_ms(1000);

    //choose starting DEV_STATE params
    device->serial_timer = 0;
    1f16:	18 82       	st	Y, r1
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	1a 82       	std	Y+2, r1	; 0x02
    1f1c:	1b 82       	std	Y+3, r1	; 0x03
    device->updating = 0;
    1f1e:	1d 82       	std	Y+5, r1	; 0x05
    1f20:	1c 82       	std	Y+4, r1	; 0x04
    device->eeprom_index = 0;
    1f22:	1f 82       	std	Y+7, r1	; 0x07
    1f24:	1e 82       	std	Y+6, r1	; 0x06
    device->op_mode = MD_NORMAL;
    1f26:	19 86       	std	Y+9, r1	; 0x09
    1f28:	18 86       	std	Y+8, r1	; 0x08
    device->op_mode_prior = MD_NORMAL;
    1f2a:	1b 86       	std	Y+11, r1	; 0x0b
    1f2c:	1a 86       	std	Y+10, r1	; 0x0a
    device->serialStartChar = '$';
    1f2e:	84 e2       	ldi	r24, 0x24	; 36
    1f30:	8c 87       	std	Y+12, r24	; 0x0c
    device->serialEndChar = '^';
    1f32:	8e e5       	ldi	r24, 0x5E	; 94
    1f34:	8d 87       	std	Y+13, r24	; 0x0d

    device->rxReadPos = 0;
    1f36:	fe 01       	movw	r30, r28
    1f38:	e2 57       	subi	r30, 0x72	; 114
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	10 82       	st	Z, r1
    device->rxWritePos = 0;
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e1 57       	subi	r30, 0x71	; 113
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	10 82       	st	Z, r1
    device->gps_update_trigger = 0;
    1f46:	fe 01       	movw	r30, r28
    1f48:	e1 50       	subi	r30, 0x01	; 1
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	11 82       	std	Z+1, r1	; 0x01
    1f4e:	10 82       	st	Z, r1
    device->button_pressable = 1;
    1f50:	fe 01       	movw	r30, r28
    1f52:	ef 5f       	subi	r30, 0xFF	; 255
    1f54:	fe 4f       	sbci	r31, 0xFE	; 254
    1f56:	11 83       	std	Z+1, r17	; 0x01
    1f58:	00 83       	st	Z, r16

    for (i=0; i<3; i++)
    {
        device->serial_history[i] = 'K';
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e0 57       	subi	r30, 0x70	; 112
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	8b e4       	ldi	r24, 0x4B	; 75
    1f62:	80 83       	st	Z, r24
    1f64:	fe 01       	movw	r30, r28
    1f66:	ef 56       	subi	r30, 0x6F	; 111
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 83       	st	Z, r24
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ee 56       	subi	r30, 0x6E	; 110
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 83       	st	Z, r24
    }

    device->gps_rxCount = 0;
    1f74:	fe 01       	movw	r30, r28
    1f76:	ed 56       	subi	r30, 0x6D	; 109
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	11 82       	std	Z+1, r1	; 0x01
    1f7c:	10 82       	st	Z, r1

    for (i=0; i<RX_BUFFER_SIZE; i++)
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';
    1f82:	fe 01       	movw	r30, r28
    1f84:	e8 0f       	add	r30, r24
    1f86:	f9 1f       	adc	r31, r25
    1f88:	16 86       	std	Z+14, r1	; 0x0e
        device->serial_history[i] = 'K';
    }

    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	80 38       	cpi	r24, 0x80	; 128
    1f8e:	91 05       	cpc	r25, r1
    1f90:	c1 f7       	brne	.-16     	; 0x1f82 <prepare_device+0xd0>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
        device->gps_rxBuffer[i] = '\0';
    1f96:	fe 01       	movw	r30, r28
    1f98:	e8 0f       	add	r30, r24
    1f9a:	f9 1f       	adc	r31, r25
    1f9c:	eb 56       	subi	r30, 0x6B	; 107
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	10 82       	st	Z, r1
    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
        device->rxBuffer[i] = '\0';

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	80 35       	cpi	r24, 0x50	; 80
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	b1 f7       	brne	.-20     	; 0x1f96 <prepare_device+0xe4>
    1faa:	00 e0       	ldi	r16, 0x00	; 0
    1fac:	10 e0       	ldi	r17, 0x00	; 0
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(GPS_FIELD_LEN*sizeof(char));
    1fae:	80 e1       	ldi	r24, 0x10	; 16
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	f8 01       	movw	r30, r16
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	ec 0f       	add	r30, r28
    1fc0:	fd 1f       	adc	r31, r29
    1fc2:	eb 51       	subi	r30, 0x1B	; 27
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	31 83       	std	Z+1, r19	; 0x01
    1fc8:	20 83       	st	Z, r18
        if (device->raw_gps_data[i] == NULL)
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	89 2b       	or	r24, r25
    1fd0:	49 f4       	brne	.+18     	; 0x1fe4 <prepare_device+0x132>
        {
            lcd_init();
    1fd2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
            string_write("bad malloc");
    1fd6:	8f e2       	ldi	r24, 0x2F	; 47
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            return 0;
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <prepare_device+0x15a>

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(GPS_FIELD_LEN*sizeof(char));
        if (device->raw_gps_data[i] == NULL)
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
            return 0;
        } else {
            //null out each of the raw gps data strings
            for (j=0; j<GPS_FIELD_LEN; j++)
            {
                device->raw_gps_data[i][j] = '\0';
    1fe8:	df 01       	movw	r26, r30
    1fea:	ed 91       	ld	r30, X+
    1fec:	fc 91       	ld	r31, X
    1fee:	11 97       	sbiw	r26, 0x01	; 1
    1ff0:	e8 0f       	add	r30, r24
    1ff2:	f9 1f       	adc	r31, r25
    1ff4:	10 82       	st	Z, r1
            lcd_init();
            string_write("bad malloc");
            return 0;
        } else {
            //null out each of the raw gps data strings
            for (j=0; j<GPS_FIELD_LEN; j++)
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	80 31       	cpi	r24, 0x10	; 16
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	b1 f7       	brne	.-20     	; 0x1fea <prepare_device+0x138>

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    1ffe:	0f 5f       	subi	r16, 0xFF	; 255
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	0d 30       	cpi	r16, 0x0D	; 13
    2004:	11 05       	cpc	r17, r1
    2006:	99 f6       	brne	.-90     	; 0x1fae <prepare_device+0xfc>
                device->raw_gps_data[i][j] = '\0';
            }
        }
    }

    return 1;
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	30 e0       	ldi	r19, 0x00	; 0
}
    200c:	c9 01       	movw	r24, r18
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <sync_gps_data>:
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0); //
}

//parse available GPS data and pull formatted params into the GPS_DATA struct
void sync_gps_data(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	7b 01       	movw	r14, r22
    if (device->gps_update_trigger)
    2026:	ec 01       	movw	r28, r24
    2028:	c1 50       	subi	r28, 0x01	; 1
    202a:	df 4f       	sbci	r29, 0xFF	; 255
    202c:	28 81       	ld	r18, Y
    202e:	39 81       	ldd	r19, Y+1	; 0x01
    2030:	23 2b       	or	r18, r19
    2032:	d9 f0       	breq	.+54     	; 0x206a <sync_gps_data+0x52>
    {
        //strip off the rxBuffer carriage return and replace with ,
        device->gps_rxBuffer[device->gps_rxCount-1] = ',';
    2034:	fc 01       	movw	r30, r24
    2036:	ed 56       	subi	r30, 0x6D	; 109
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	01 90       	ld	r0, Z+
    203c:	f0 81       	ld	r31, Z
    203e:	e0 2d       	mov	r30, r0
    2040:	e8 0f       	add	r30, r24
    2042:	f9 1f       	adc	r31, r25
    2044:	ec 56       	subi	r30, 0x6C	; 108
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	2c e2       	ldi	r18, 0x2C	; 44
    204a:	20 83       	st	Z, r18
        //parse the sentence and populate the raw_gps_data fields
        parse_nmea(device, device->gps_rxBuffer, device->raw_gps_data);
    204c:	8c 01       	movw	r16, r24
    204e:	0b 51       	subi	r16, 0x1B	; 27
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	bc 01       	movw	r22, r24
    2054:	6b 56       	subi	r22, 0x6B	; 107
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	a8 01       	movw	r20, r16
    205a:	0e 94 03 06 	call	0xc06	; 0xc06 <parse_nmea>
        //use the raw raw_gps_data fields to populate the GPS_DATA struct
        update_user_gps_data(device->raw_gps_data, gps_data);
    205e:	b7 01       	movw	r22, r14
    2060:	c8 01       	movw	r24, r16
    2062:	0e 94 68 07 	call	0xed0	; 0xed0 <update_user_gps_data>
        device->gps_update_trigger = 0;
    2066:	19 82       	std	Y+1, r1	; 0x01
    2068:	18 82       	st	Y, r1
    }
}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	08 95       	ret

00002078 <detectSerialStart>:

//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(volatile DEV_STATE *device)
{
    2078:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialStartChar)&&(device->serial_history[1]==device->serialStartChar)&&(device->serial_history[2]==device->serialStartChar))
    207a:	dc 01       	movw	r26, r24
    207c:	a0 57       	subi	r26, 0x70	; 112
    207e:	bf 4f       	sbci	r27, 0xFF	; 255
    2080:	9c 91       	ld	r25, X
    2082:	84 85       	ldd	r24, Z+12	; 0x0c
    2084:	98 13       	cpse	r25, r24
    2086:	10 c0       	rjmp	.+32     	; 0x20a8 <detectSerialStart+0x30>
    2088:	df 01       	movw	r26, r30
    208a:	af 56       	subi	r26, 0x6F	; 111
    208c:	bf 4f       	sbci	r27, 0xFF	; 255
    208e:	9c 91       	ld	r25, X
    2090:	84 85       	ldd	r24, Z+12	; 0x0c
    2092:	98 13       	cpse	r25, r24
    2094:	09 c0       	rjmp	.+18     	; 0x20a8 <detectSerialStart+0x30>
    2096:	df 01       	movw	r26, r30
    2098:	ae 56       	subi	r26, 0x6E	; 110
    209a:	bf 4f       	sbci	r27, 0xFF	; 255
    209c:	9c 91       	ld	r25, X
    209e:	84 85       	ldd	r24, Z+12	; 0x0c
    20a0:	21 e0       	ldi	r18, 0x01	; 1
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	98 17       	cp	r25, r24
    20a6:	11 f0       	breq	.+4      	; 0x20ac <detectSerialStart+0x34>
        return 1;
    else
        return 0;
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
}
    20ac:	c9 01       	movw	r24, r18
    20ae:	08 95       	ret

000020b0 <detectSerialEnd>:

//catch the serial update end sequence
int detectSerialEnd(volatile DEV_STATE *device)
{
    20b0:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialEndChar)&&(device->serial_history[1]==device->serialEndChar)&&(device->serial_history[2]==device->serialEndChar))
    20b2:	dc 01       	movw	r26, r24
    20b4:	a0 57       	subi	r26, 0x70	; 112
    20b6:	bf 4f       	sbci	r27, 0xFF	; 255
    20b8:	9c 91       	ld	r25, X
    20ba:	85 85       	ldd	r24, Z+13	; 0x0d
    20bc:	98 13       	cpse	r25, r24
    20be:	10 c0       	rjmp	.+32     	; 0x20e0 <detectSerialEnd+0x30>
    20c0:	df 01       	movw	r26, r30
    20c2:	af 56       	subi	r26, 0x6F	; 111
    20c4:	bf 4f       	sbci	r27, 0xFF	; 255
    20c6:	9c 91       	ld	r25, X
    20c8:	85 85       	ldd	r24, Z+13	; 0x0d
    20ca:	98 13       	cpse	r25, r24
    20cc:	09 c0       	rjmp	.+18     	; 0x20e0 <detectSerialEnd+0x30>
    20ce:	df 01       	movw	r26, r30
    20d0:	ae 56       	subi	r26, 0x6E	; 110
    20d2:	bf 4f       	sbci	r27, 0xFF	; 255
    20d4:	9c 91       	ld	r25, X
    20d6:	85 85       	ldd	r24, Z+13	; 0x0d
    20d8:	21 e0       	ldi	r18, 0x01	; 1
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	98 17       	cp	r25, r24
    20de:	11 f0       	breq	.+4      	; 0x20e4 <detectSerialEnd+0x34>
        return 1;
    else
        return 0;
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
}
    20e4:	c9 01       	movw	r24, r18
    20e6:	08 95       	ret

000020e8 <getChar>:
//read a char from the serial update buffer
char getChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    
    ret = device->rxBuffer[device->rxReadPos];
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 57       	subi	r30, 0x72	; 114
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	20 81       	ld	r18, Z
    20f0:	dc 01       	movw	r26, r24
    20f2:	a2 0f       	add	r26, r18
    20f4:	b1 1d       	adc	r27, r1
    20f6:	1e 96       	adiw	r26, 0x0e	; 14
    20f8:	8c 91       	ld	r24, X
     
    device->rxReadPos++;
    20fa:	90 81       	ld	r25, Z
    20fc:	9f 5f       	subi	r25, 0xFF	; 255
    20fe:	90 83       	st	Z, r25
     
    if(device->rxReadPos >= RX_BUFFER_SIZE)
    2100:	90 81       	ld	r25, Z
    2102:	97 fd       	sbrc	r25, 7
    {
        device->rxReadPos = 0;
    2104:	10 82       	st	Z, r1
    }
    
    return ret;
}
    2106:	08 95       	ret

00002108 <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
     
    if(device->rxReadPos != device->rxWritePos)
    2108:	fc 01       	movw	r30, r24
    210a:	e2 57       	subi	r30, 0x72	; 114
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	30 81       	ld	r19, Z
    2110:	dc 01       	movw	r26, r24
    2112:	a1 57       	subi	r26, 0x71	; 113
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	2c 91       	ld	r18, X
    2118:	32 17       	cp	r19, r18
    211a:	31 f0       	breq	.+12     	; 0x2128 <peekChar+0x20>
    {
        ret = device->rxBuffer[device->rxReadPos];
    211c:	20 81       	ld	r18, Z
    211e:	fc 01       	movw	r30, r24
    2120:	e2 0f       	add	r30, r18
    2122:	f1 1d       	adc	r31, r1
    2124:	86 85       	ldd	r24, Z+14	; 0x0e
    2126:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    2128:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = device->rxBuffer[device->rxReadPos];
    }
     
    return ret;
}
    212a:	08 95       	ret

0000212c <terminate_serial>:

//terminate the serial update with a certain status
int terminate_serial(volatile DEV_STATE *device, DATABASE *fm_stations, int flag)
{
    212c:	0f 93       	push	r16
    212e:	1f 93       	push	r17
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	fc 01       	movw	r30, r24
    2136:	8b 01       	movw	r16, r22
    2138:	ea 01       	movw	r28, r20
    device->op_mode = MD_NORMAL;
    213a:	11 86       	std	Z+9, r1	; 0x09
    213c:	10 86       	std	Z+8, r1	; 0x08
    device->op_mode_prior = MD_NORMAL;
    213e:	13 86       	std	Z+11, r1	; 0x0b
    2140:	12 86       	std	Z+10, r1	; 0x0a
    device->updating = 0;
    2142:	15 82       	std	Z+5, r1	; 0x05
    2144:	14 82       	std	Z+4, r1	; 0x04
    device->serial_timer = 0;
    2146:	10 82       	st	Z, r1
    2148:	11 82       	std	Z+1, r1	; 0x01
    214a:	12 82       	std	Z+2, r1	; 0x02
    214c:	13 82       	std	Z+3, r1	; 0x03

    //turn off the blinking update LEDs
    device->blinking = 0;
    214e:	dc 01       	movw	r26, r24
    2150:	a7 5f       	subi	r26, 0xF7	; 247
    2152:	be 4f       	sbci	r27, 0xFE	; 254
    2154:	11 96       	adiw	r26, 0x01	; 1
    2156:	1c 92       	st	X, r1
    2158:	1e 92       	st	-X, r1
    sync_leds(device);
    215a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <sync_leds>

    lcd_init();
    215e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    if (flag==FL_SUCCESS)
    2162:	20 97       	sbiw	r28, 0x00	; 0
    2164:	19 f4       	brne	.+6      	; 0x216c <terminate_serial+0x40>
        string_write("reading\ndatabase ...");
    2166:	82 e4       	ldi	r24, 0x42	; 66
    2168:	92 e0       	ldi	r25, 0x02	; 2
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <terminate_serial+0x44>
    else
        string_write("ERROR:\ntimeout ...");
    216c:	87 e5       	ldi	r24, 0x57	; 87
    216e:	92 e0       	ldi	r25, 0x02	; 2
    2170:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //import the new database
    database_load(fm_stations);
    2174:	c8 01       	movw	r24, r16
    2176:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <database_load>
    217a:	2f e3       	ldi	r18, 0x3F	; 63
    217c:	8d e0       	ldi	r24, 0x0D	; 13
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	21 50       	subi	r18, 0x01	; 1
    2182:	80 40       	sbci	r24, 0x00	; 0
    2184:	90 40       	sbci	r25, 0x00	; 0
    2186:	e1 f7       	brne	.-8      	; 0x2180 <terminate_serial+0x54>
    2188:	00 c0       	rjmp	.+0      	; 0x218a <terminate_serial+0x5e>
    218a:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
    218c:	21 97       	sbiw	r28, 0x01	; 1
    218e:	21 f4       	brne	.+8      	; 0x2198 <terminate_serial+0x6c>
        string_write("\nupdate failed\n");
    2190:	8a e6       	ldi	r24, 0x6A	; 106
    2192:	92 e0       	ldi	r25, 0x02	; 2
    2194:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2198:	2f e9       	ldi	r18, 0x9F	; 159
    219a:	86 e8       	ldi	r24, 0x86	; 134
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	21 50       	subi	r18, 0x01	; 1
    21a0:	80 40       	sbci	r24, 0x00	; 0
    21a2:	90 40       	sbci	r25, 0x00	; 0
    21a4:	e1 f7       	brne	.-8      	; 0x219e <terminate_serial+0x72>
    21a6:	00 c0       	rjmp	.+0      	; 0x21a8 <terminate_serial+0x7c>
    21a8:	00 00       	nop

    _delay_ms(500);
    return 1;
}
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	08 95       	ret

000021b8 <wipe_eeprom>:

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(volatile DEV_STATE *device)
{
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	8c 01       	movw	r16, r24
    int i;
    lcd_init();
    21c2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("wiping \nmemory...");
    21c6:	8a e7       	ldi	r24, 0x7A	; 122
    21c8:	92 e0       	ldi	r25, 0x02	; 2
    21ca:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    21ce:	c0 e0       	ldi	r28, 0x00	; 0
    21d0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (device->op_mode != device->op_mode_prior) return;
    21d2:	f8 01       	movw	r30, r16
    21d4:	20 85       	ldd	r18, Z+8	; 0x08
    21d6:	31 85       	ldd	r19, Z+9	; 0x09
    21d8:	82 85       	ldd	r24, Z+10	; 0x0a
    21da:	93 85       	ldd	r25, Z+11	; 0x0b
    21dc:	28 17       	cp	r18, r24
    21de:	39 07       	cpc	r19, r25
    21e0:	49 f4       	brne	.+18     	; 0x21f4 <wipe_eeprom+0x3c>
        eeprom_write_byte((uint8_t *)i,255);
    21e2:	6f ef       	ldi	r22, 0xFF	; 255
    21e4:	ce 01       	movw	r24, r28
    21e6:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__eewr_byte_m1284p>
void wipe_eeprom(volatile DEV_STATE *device)
{
    int i;
    lcd_init();
    string_write("wiping \nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    21ea:	21 96       	adiw	r28, 0x01	; 1
    21ec:	c1 3f       	cpi	r28, 0xF1	; 241
    21ee:	fa e0       	ldi	r31, 0x0A	; 10
    21f0:	df 07       	cpc	r29, r31
    21f2:	79 f7       	brne	.-34     	; 0x21d2 <wipe_eeprom+0x1a>
    {
        if (device->op_mode != device->op_mode_prior) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	08 95       	ret

000021fe <wait_for_update>:

}

//hold device state and wait for database update
void wait_for_update(volatile DEV_STATE *device)
{
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    lcd_init();
    2204:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("update required\n...feed me...");
    2208:	8c e8       	ldi	r24, 0x8C	; 140
    220a:	92 e0       	ldi	r25, 0x02	; 2
    220c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    while (1)
    {
        if (device->op_mode != device->op_mode_prior) return;
    2210:	28 85       	ldd	r18, Y+8	; 0x08
    2212:	39 85       	ldd	r19, Y+9	; 0x09
    2214:	8a 85       	ldd	r24, Y+10	; 0x0a
    2216:	9b 85       	ldd	r25, Y+11	; 0x0b
    2218:	28 17       	cp	r18, r24
    221a:	39 07       	cpc	r19, r25
    221c:	c9 f3       	breq	.-14     	; 0x2210 <wait_for_update+0x12>
    }
}
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	08 95       	ret

00002224 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	8c 01       	movw	r16, r24
    2234:	7b 01       	movw	r14, r22
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*fm_stations->num_stations; i++)
    2236:	c0 e0       	ldi	r28, 0x00	; 0
    2238:	d0 e0       	ldi	r29, 0x00	; 0
    223a:	9c e1       	ldi	r25, 0x1C	; 28
    223c:	d9 2e       	mov	r13, r25
    223e:	17 c0       	rjmp	.+46     	; 0x226e <print_eeprom_station_contents+0x4a>
    {
        if (device->op_mode != device->op_mode_prior) return;
    2240:	f8 01       	movw	r30, r16
    2242:	20 85       	ldd	r18, Z+8	; 0x08
    2244:	31 85       	ldd	r19, Z+9	; 0x09
    2246:	82 85       	ldd	r24, Z+10	; 0x0a
    2248:	93 85       	ldd	r25, Z+11	; 0x0b
    224a:	28 17       	cp	r18, r24
    224c:	39 07       	cpc	r19, r25
    224e:	d1 f4       	brne	.+52     	; 0x2284 <print_eeprom_station_contents+0x60>
        one_byte = my_eeprom_read_char(start+i);
    2250:	21 96       	adiw	r28, 0x01	; 1
    2252:	ce 01       	movw	r24, r28
    2254:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <my_eeprom_read_char>
        if (one_byte == '\0')
    2258:	81 11       	cpse	r24, r1
    225a:	01 c0       	rjmp	.+2      	; 0x225e <print_eeprom_station_contents+0x3a>
            one_byte = '?';
    225c:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    225e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2262:	87 ea       	ldi	r24, 0xA7	; 167
    2264:	91 e6       	ldi	r25, 0x61	; 97
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <print_eeprom_station_contents+0x42>
    226a:	00 c0       	rjmp	.+0      	; 0x226c <print_eeprom_station_contents+0x48>
    226c:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*fm_stations->num_stations; i++)
    226e:	f7 01       	movw	r30, r14
    2270:	22 81       	ldd	r18, Z+2	; 0x02
    2272:	33 81       	ldd	r19, Z+3	; 0x03
    2274:	d2 9e       	mul	r13, r18
    2276:	c0 01       	movw	r24, r0
    2278:	d3 9e       	mul	r13, r19
    227a:	90 0d       	add	r25, r0
    227c:	11 24       	eor	r1, r1
    227e:	c8 17       	cp	r28, r24
    2280:	d9 07       	cpc	r29, r25
    2282:	f4 f2       	brlt	.-68     	; 0x2240 <print_eeprom_station_contents+0x1c>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	08 95       	ret

00002294 <print_eeprom_contents>:

//print the EEPROM contents for an address range
void print_eeprom_contents(volatile DEV_STATE *device, DATABASE *fm_stations, int start_addr, int end_addr)
{
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <print_eeprom_contents+0x12>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	7c 01       	movw	r14, r24
    22ac:	89 01       	movw	r16, r18
    int i=0;
    char one_byte;

    if (end_addr == -1)
    22ae:	2f 3f       	cpi	r18, 0xFF	; 255
    22b0:	8f ef       	ldi	r24, 0xFF	; 255
    22b2:	38 07       	cpc	r19, r24
    22b4:	59 f4       	brne	.+22     	; 0x22cc <print_eeprom_contents+0x38>
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;
    22b6:	fb 01       	movw	r30, r22
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	2c e1       	ldi	r18, 0x1C	; 28
    22be:	28 9f       	mul	r18, r24
    22c0:	80 01       	movw	r16, r0
    22c2:	29 9f       	mul	r18, r25
    22c4:	10 0d       	add	r17, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	0f 5f       	subi	r16, 0xFF	; 255
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255

    lcd_init();
    22cc:	49 83       	std	Y+1, r20	; 0x01
    22ce:	5a 83       	std	Y+2, r21	; 0x02
    22d0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
    22d4:	49 81       	ldd	r20, Y+1	; 0x01
    22d6:	c4 2e       	mov	r12, r20
    22d8:	5a 81       	ldd	r21, Y+2	; 0x02
    22da:	d5 2e       	mov	r13, r21
    22dc:	19 c0       	rjmp	.+50     	; 0x2310 <print_eeprom_contents+0x7c>
    {
        if (device->op_mode != device->op_mode_prior) return;
    22de:	f7 01       	movw	r30, r14
    22e0:	20 85       	ldd	r18, Z+8	; 0x08
    22e2:	31 85       	ldd	r19, Z+9	; 0x09
    22e4:	82 85       	ldd	r24, Z+10	; 0x0a
    22e6:	93 85       	ldd	r25, Z+11	; 0x0b
    22e8:	28 17       	cp	r18, r24
    22ea:	39 07       	cpc	r19, r25
    22ec:	a1 f4       	brne	.+40     	; 0x2316 <print_eeprom_contents+0x82>
        one_byte = my_eeprom_read_char(i);
    22ee:	c6 01       	movw	r24, r12
    22f0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <my_eeprom_read_char>
        if (one_byte == '\0')
    22f4:	81 11       	cpse	r24, r1
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <print_eeprom_contents+0x66>
            one_byte = '?';
    22f8:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    22fa:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    22fe:	87 ea       	ldi	r24, 0xA7	; 167
    2300:	91 e6       	ldi	r25, 0x61	; 97
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <print_eeprom_contents+0x6e>
    2306:	00 c0       	rjmp	.+0      	; 0x2308 <print_eeprom_contents+0x74>
    2308:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
    230a:	9f ef       	ldi	r25, 0xFF	; 255
    230c:	c9 1a       	sub	r12, r25
    230e:	d9 0a       	sbc	r13, r25
    2310:	c0 16       	cp	r12, r16
    2312:	d1 06       	cpc	r13, r17
    2314:	24 f3       	brlt	.-56     	; 0x22de <print_eeprom_contents+0x4a>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	cf 90       	pop	r12
    232a:	08 95       	ret

0000232c <print_callsign>:
    }
}

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	8c 01       	movw	r16, r24
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    233a:	8c e1       	ldi	r24, 0x1C	; 28
    233c:	86 9f       	mul	r24, r22
    233e:	70 01       	movw	r14, r0
    2340:	87 9f       	mul	r24, r23
    2342:	f0 0c       	add	r15, r0
    2344:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    2346:	c0 e0       	ldi	r28, 0x00	; 0
    2348:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    234a:	d8 01       	movw	r26, r16
    234c:	ed 91       	ld	r30, X+
    234e:	fc 91       	ld	r31, X
    2350:	ee 0d       	add	r30, r14
    2352:	ff 1d       	adc	r31, r15
    2354:	ec 0f       	add	r30, r28
    2356:	fd 1f       	adc	r31, r29
    2358:	80 81       	ld	r24, Z
    235a:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    235e:	21 96       	adiw	r28, 0x01	; 1
    2360:	c8 30       	cpi	r28, 0x08	; 8
    2362:	d1 05       	cpc	r29, r1
    2364:	91 f7       	brne	.-28     	; 0x234a <print_callsign+0x1e>
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    }
}
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	08 95       	ret

00002374 <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    2374:	cf 92       	push	r12
    2376:	df 92       	push	r13
    2378:	ef 92       	push	r14
    237a:	ff 92       	push	r15
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	ec 01       	movw	r28, r24
    2386:	7b 01       	movw	r14, r22
    if (device->op_mode != device->op_mode_prior) return;
    2388:	28 85       	ldd	r18, Y+8	; 0x08
    238a:	39 85       	ldd	r19, Y+9	; 0x09
    238c:	8a 85       	ldd	r24, Y+10	; 0x0a
    238e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	09 f0       	breq	.+2      	; 0x2398 <print_all_callsigns+0x24>
    2396:	4d c0       	rjmp	.+154    	; 0x2432 <print_all_callsigns+0xbe>
    int i;
    lcd_init();
    2398:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    239c:	63 e0       	ldi	r22, 0x03	; 3
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	f7 01       	movw	r30, r14
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    string_write(" known\nstations");
    23aa:	8a ea       	ldi	r24, 0xAA	; 170
    23ac:	92 e0       	ldi	r25, 0x02	; 2
    23ae:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    23b2:	ff e7       	ldi	r31, 0x7F	; 127
    23b4:	2a e1       	ldi	r18, 0x1A	; 26
    23b6:	86 e0       	ldi	r24, 0x06	; 6
    23b8:	f1 50       	subi	r31, 0x01	; 1
    23ba:	20 40       	sbci	r18, 0x00	; 0
    23bc:	80 40       	sbci	r24, 0x00	; 0
    23be:	e1 f7       	brne	.-8      	; 0x23b8 <print_all_callsigns+0x44>
    23c0:	00 c0       	rjmp	.+0      	; 0x23c2 <print_all_callsigns+0x4e>
    23c2:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    23c4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    char_write('\n');
    23c8:	8a e0       	ldi	r24, 0x0A	; 10
    23ca:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    for (i=0; i<fm_stations->num_stations; i++)
    23ce:	00 e0       	ldi	r16, 0x00	; 0
    23d0:	10 e0       	ldi	r17, 0x00	; 0
    23d2:	29 c0       	rjmp	.+82     	; 0x2426 <print_all_callsigns+0xb2>
    {
        if (device->op_mode != device->op_mode_prior) return;
    23d4:	28 85       	ldd	r18, Y+8	; 0x08
    23d6:	39 85       	ldd	r19, Y+9	; 0x09
    23d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23da:	9b 85       	ldd	r25, Y+11	; 0x0b
    23dc:	28 17       	cp	r18, r24
    23de:	39 07       	cpc	r19, r25
    23e0:	41 f5       	brne	.+80     	; 0x2432 <print_all_callsigns+0xbe>

        char_write('\n'); string_write_int(i+1,3); string_write(": "); print_callsign(fm_stations, i);
    23e2:	8a e0       	ldi	r24, 0x0A	; 10
    23e4:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    23e8:	68 01       	movw	r12, r16
    23ea:	9f ef       	ldi	r25, 0xFF	; 255
    23ec:	c9 1a       	sub	r12, r25
    23ee:	d9 0a       	sbc	r13, r25
    23f0:	63 e0       	ldi	r22, 0x03	; 3
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	c6 01       	movw	r24, r12
    23f6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    23fa:	87 e5       	ldi	r24, 0x57	; 87
    23fc:	94 e0       	ldi	r25, 0x04	; 4
    23fe:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2402:	b8 01       	movw	r22, r16
    2404:	c7 01       	movw	r24, r14
    2406:	0e 94 96 11 	call	0x232c	; 0x232c <print_callsign>

        if (device->op_mode != device->op_mode_prior) return;
    240a:	28 85       	ldd	r18, Y+8	; 0x08
    240c:	39 85       	ldd	r19, Y+9	; 0x09
    240e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2410:	9b 85       	ldd	r25, Y+11	; 0x0b
    2412:	28 17       	cp	r18, r24
    2414:	39 07       	cpc	r19, r25
    2416:	69 f4       	brne	.+26     	; 0x2432 <print_all_callsigns+0xbe>
    2418:	e3 e2       	ldi	r30, 0x23	; 35
    241a:	f4 ef       	ldi	r31, 0xF4	; 244
    241c:	31 97       	sbiw	r30, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <print_all_callsigns+0xa8>
    2420:	00 c0       	rjmp	.+0      	; 0x2422 <print_all_callsigns+0xae>
    2422:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    char_write('\n');

    for (i=0; i<fm_stations->num_stations; i++)
    2424:	86 01       	movw	r16, r12
    2426:	f7 01       	movw	r30, r14
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	08 17       	cp	r16, r24
    242e:	19 07       	cpc	r17, r25
    2430:	8c f2       	brlt	.-94     	; 0x23d4 <print_all_callsigns+0x60>

        if (device->op_mode != device->op_mode_prior) return;

        _delay_ms(250);   
    }
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	cf 90       	pop	r12
    2442:	08 95       	ret

00002444 <list_nearest_stations>:

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
{
    2444:	7f 92       	push	r7
    2446:	8f 92       	push	r8
    2448:	9f 92       	push	r9
    244a:	af 92       	push	r10
    244c:	bf 92       	push	r11
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	7c 01       	movw	r14, r24
    2460:	eb 01       	movw	r28, r22
    2462:	6a 01       	movw	r12, r20
    int i, j;
    lcd_init();
    2464:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Listing Nearest\nStations:");
    2468:	8a eb       	ldi	r24, 0xBA	; 186
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2470:	2f e3       	ldi	r18, 0x3F	; 63
    2472:	8d e0       	ldi	r24, 0x0D	; 13
    2474:	93 e0       	ldi	r25, 0x03	; 3
    2476:	21 50       	subi	r18, 0x01	; 1
    2478:	80 40       	sbci	r24, 0x00	; 0
    247a:	90 40       	sbci	r25, 0x00	; 0
    247c:	e1 f7       	brne	.-8      	; 0x2476 <list_nearest_stations+0x32>
    247e:	00 c0       	rjmp	.+0      	; 0x2480 <list_nearest_stations+0x3c>
    2480:	00 00       	nop
    _delay_ms(1000);

    //calculate the nearest stations
    fm_stations->nearest_station = get_nearest_stations(fm_stations, gps_data->lat, gps_data->lon);
    2482:	f6 01       	movw	r30, r12
    2484:	05 89       	ldd	r16, Z+21	; 0x15
    2486:	16 89       	ldd	r17, Z+22	; 0x16
    2488:	27 89       	ldd	r18, Z+23	; 0x17
    248a:	30 8d       	ldd	r19, Z+24	; 0x18
    248c:	41 89       	ldd	r20, Z+17	; 0x11
    248e:	52 89       	ldd	r21, Z+18	; 0x12
    2490:	63 89       	ldd	r22, Z+19	; 0x13
    2492:	74 89       	ldd	r23, Z+20	; 0x14
    2494:	ce 01       	movw	r24, r28
    2496:	0e 94 20 0c 	call	0x1840	; 0x1840 <get_nearest_stations>
    249a:	9d 83       	std	Y+5, r25	; 0x05
    249c:	8c 83       	std	Y+4, r24	; 0x04

    //calculate bearings to nearest stations
    calculate_bearings(gps_data, fm_stations);
    249e:	be 01       	movw	r22, r28
    24a0:	c6 01       	movw	r24, r12
    24a2:	0e 94 19 09 	call	0x1232	; 0x1232 <calculate_bearings>
    24a6:	8e 01       	movw	r16, r28
    24a8:	56 01       	movw	r10, r12

    for (i=0; i<NUM_NEAREST; i++)
    24aa:	81 2c       	mov	r8, r1
    24ac:	91 2c       	mov	r9, r1

        if (device->op_mode != device->op_mode_prior) return;

        lcd_init();
        //print station callsign and distance
        print_callsign(fm_stations, (int)fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
    24ae:	2c e1       	ldi	r18, 0x1C	; 28
    24b0:	72 2e       	mov	r7, r18
    //calculate bearings to nearest stations
    calculate_bearings(gps_data, fm_stations);

    for (i=0; i<NUM_NEAREST; i++)
    {
        if (i >= fm_stations->num_stations)
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	9b 81       	ldd	r25, Y+3	; 0x03
    24b6:	88 16       	cp	r8, r24
    24b8:	99 06       	cpc	r9, r25
    24ba:	0c f0       	brlt	.+2      	; 0x24be <list_nearest_stations+0x7a>
    24bc:	a6 c0       	rjmp	.+332    	; 0x260a <list_nearest_stations+0x1c6>
            break;

        if (device->op_mode != device->op_mode_prior) return;
    24be:	f7 01       	movw	r30, r14
    24c0:	20 85       	ldd	r18, Z+8	; 0x08
    24c2:	31 85       	ldd	r19, Z+9	; 0x09
    24c4:	82 85       	ldd	r24, Z+10	; 0x0a
    24c6:	93 85       	ldd	r25, Z+11	; 0x0b
    24c8:	28 17       	cp	r18, r24
    24ca:	39 07       	cpc	r19, r25
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <list_nearest_stations+0x8c>
    24ce:	9d c0       	rjmp	.+314    	; 0x260a <list_nearest_stations+0x1c6>

        lcd_init();
    24d0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
        //print station callsign and distance
        print_callsign(fm_stations, (int)fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
    24d4:	f8 01       	movw	r30, r16
    24d6:	66 81       	ldd	r22, Z+6	; 0x06
    24d8:	77 81       	ldd	r23, Z+7	; 0x07
    24da:	80 85       	ldd	r24, Z+8	; 0x08
    24dc:	91 85       	ldd	r25, Z+9	; 0x09
    24de:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    24e2:	ce 01       	movw	r24, r28
    24e4:	0e 94 96 11 	call	0x232c	; 0x232c <print_callsign>
    24e8:	8c ef       	ldi	r24, 0xFC	; 252
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    24f0:	f8 01       	movw	r30, r16
    24f2:	66 81       	ldd	r22, Z+6	; 0x06
    24f4:	77 81       	ldd	r23, Z+7	; 0x07
    24f6:	80 85       	ldd	r24, Z+8	; 0x08
    24f8:	91 85       	ldd	r25, Z+9	; 0x09
    24fa:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__fixsfsi>
    24fe:	76 9e       	mul	r7, r22
    2500:	c0 01       	movw	r24, r0
    2502:	77 9e       	mul	r7, r23
    2504:	90 0d       	add	r25, r0
    2506:	11 24       	eor	r1, r1
    2508:	e8 81       	ld	r30, Y
    250a:	f9 81       	ldd	r31, Y+1	; 0x01
    250c:	e8 0f       	add	r30, r24
    250e:	f9 1f       	adc	r31, r25
    2510:	60 85       	ldd	r22, Z+8	; 0x08
    2512:	71 85       	ldd	r23, Z+9	; 0x09
    2514:	82 85       	ldd	r24, Z+10	; 0x0a
    2516:	93 85       	ldd	r25, Z+11	; 0x0b
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2520:	8c e6       	ldi	r24, 0x6C	; 108
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
        string_write_float(fm_stations->nearest_stations[i][1],1); string_write(" km, ");
    2528:	f8 01       	movw	r30, r16
    252a:	62 85       	ldd	r22, Z+10	; 0x0a
    252c:	73 85       	ldd	r23, Z+11	; 0x0b
    252e:	84 85       	ldd	r24, Z+12	; 0x0c
    2530:	95 85       	ldd	r25, Z+13	; 0x0d
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    253a:	84 ed       	ldi	r24, 0xD4	; 212
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    2542:	f6 01       	movw	r30, r12
    2544:	e3 5b       	subi	r30, 0xB3	; 179
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
        print_callsign(fm_stations, (int)fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
        string_write_float(fm_stations->nearest_stations[i][1],1); string_write(" km, ");

        //write out the absolute bearing chars
        for (j=0; j<3; j++)
            char_write(gps_data->str_abs_bearing_nearest[i][j]);
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    254e:	f6 01       	movw	r30, r12
    2550:	e2 5b       	subi	r30, 0xB2	; 178
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
        print_callsign(fm_stations, (int)fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
        string_write_float(fm_stations->nearest_stations[i][1],1); string_write(" km, ");

        //write out the absolute bearing chars
        for (j=0; j<3; j++)
            char_write(gps_data->str_abs_bearing_nearest[i][j]);
    2554:	80 81       	ld	r24, Z
    2556:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    255a:	f6 01       	movw	r30, r12
    255c:	e1 5b       	subi	r30, 0xB1	; 177
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
        print_callsign(fm_stations, (int)fm_stations->nearest_stations[i][0]); string_write(" "); string_write_float(fm_stations->all_stations[(int)fm_stations->nearest_stations[i][0]].freq,1); string_write("\n");
        string_write_float(fm_stations->nearest_stations[i][1],1); string_write(" km, ");

        //write out the absolute bearing chars
        for (j=0; j<3; j++)
            char_write(gps_data->str_abs_bearing_nearest[i][j]);
    2560:	80 81       	ld	r24, Z
    2562:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2566:	ff e7       	ldi	r31, 0x7F	; 127
    2568:	2a e1       	ldi	r18, 0x1A	; 26
    256a:	86 e0       	ldi	r24, 0x06	; 6
    256c:	f1 50       	subi	r31, 0x01	; 1
    256e:	20 40       	sbci	r18, 0x00	; 0
    2570:	80 40       	sbci	r24, 0x00	; 0
    2572:	e1 f7       	brne	.-8      	; 0x256c <list_nearest_stations+0x128>
    2574:	00 c0       	rjmp	.+0      	; 0x2576 <list_nearest_stations+0x132>
    2576:	00 00       	nop

        _delay_ms(2000);

        if (device->op_mode != device->op_mode_prior) return;
    2578:	f7 01       	movw	r30, r14
    257a:	20 85       	ldd	r18, Z+8	; 0x08
    257c:	31 85       	ldd	r19, Z+9	; 0x09
    257e:	82 85       	ldd	r24, Z+10	; 0x0a
    2580:	93 85       	ldd	r25, Z+11	; 0x0b
    2582:	28 17       	cp	r18, r24
    2584:	39 07       	cpc	r19, r25
    2586:	09 f0       	breq	.+2      	; 0x258a <list_nearest_stations+0x146>
    2588:	40 c0       	rjmp	.+128    	; 0x260a <list_nearest_stations+0x1c6>

        lcd_init();
    258a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

        //print bearings to the screen
        string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest[i],1); char_write(DEG_SYMBOL); char_write('\n');
    258e:	8a ed       	ldi	r24, 0xDA	; 218
    2590:	92 e0       	ldi	r25, 0x02	; 2
    2592:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2596:	f5 01       	movw	r30, r10
    2598:	65 a9       	ldd	r22, Z+53	; 0x35
    259a:	76 a9       	ldd	r23, Z+54	; 0x36
    259c:	87 a9       	ldd	r24, Z+55	; 0x37
    259e:	90 ad       	ldd	r25, Z+56	; 0x38
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    25a8:	8f ed       	ldi	r24, 0xDF	; 223
    25aa:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    25ae:	8a e0       	ldi	r24, 0x0A	; 10
    25b0:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
        string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[i],1); char_write(DEG_SYMBOL);
    25b4:	83 ee       	ldi	r24, 0xE3	; 227
    25b6:	92 e0       	ldi	r25, 0x02	; 2
    25b8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode != device->op_mode_prior) return;

    _delay_ms(3000);
}

void list_nearest_stations(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
    25bc:	f5 01       	movw	r30, r10
    25be:	ef 5b       	subi	r30, 0xBF	; 191
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255

        lcd_init();

        //print bearings to the screen
        string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest[i],1); char_write(DEG_SYMBOL); char_write('\n');
        string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[i],1); char_write(DEG_SYMBOL);
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    25d2:	8f ed       	ldi	r24, 0xDF	; 223
    25d4:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    25d8:	ff e7       	ldi	r31, 0x7F	; 127
    25da:	2a e1       	ldi	r18, 0x1A	; 26
    25dc:	86 e0       	ldi	r24, 0x06	; 6
    25de:	f1 50       	subi	r31, 0x01	; 1
    25e0:	20 40       	sbci	r18, 0x00	; 0
    25e2:	80 40       	sbci	r24, 0x00	; 0
    25e4:	e1 f7       	brne	.-8      	; 0x25de <list_nearest_stations+0x19a>
    25e6:	00 c0       	rjmp	.+0      	; 0x25e8 <list_nearest_stations+0x1a4>
    25e8:	00 00       	nop
    fm_stations->nearest_station = get_nearest_stations(fm_stations, gps_data->lat, gps_data->lon);

    //calculate bearings to nearest stations
    calculate_bearings(gps_data, fm_stations);

    for (i=0; i<NUM_NEAREST; i++)
    25ea:	9f ef       	ldi	r25, 0xFF	; 255
    25ec:	89 1a       	sub	r8, r25
    25ee:	99 0a       	sbc	r9, r25
    25f0:	e4 e0       	ldi	r30, 0x04	; 4
    25f2:	ae 0e       	add	r10, r30
    25f4:	b1 1c       	adc	r11, r1
    25f6:	08 5f       	subi	r16, 0xF8	; 248
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	f3 e0       	ldi	r31, 0x03	; 3
    25fc:	cf 0e       	add	r12, r31
    25fe:	d1 1c       	adc	r13, r1
    2600:	23 e0       	ldi	r18, 0x03	; 3
    2602:	82 16       	cp	r8, r18
    2604:	91 04       	cpc	r9, r1
    2606:	09 f0       	breq	.+2      	; 0x260a <list_nearest_stations+0x1c6>
    2608:	54 cf       	rjmp	.-344    	; 0x24b2 <list_nearest_stations+0x6e>
        string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[i],1); char_write(DEG_SYMBOL);

        _delay_ms(2000);
    }

}
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	cf 90       	pop	r12
    261a:	bf 90       	pop	r11
    261c:	af 90       	pop	r10
    261e:	9f 90       	pop	r9
    2620:	8f 90       	pop	r8
    2622:	7f 90       	pop	r7
    2624:	08 95       	ret

00002626 <show_nearest_station>:
    }
}

//compute the nearest station and display pertinent, formatted info
void show_nearest_station(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
{
    2626:	cf 92       	push	r12
    2628:	df 92       	push	r13
    262a:	ef 92       	push	r14
    262c:	ff 92       	push	r15
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	6c 01       	movw	r12, r24
    2638:	7b 01       	movw	r14, r22
    263a:	ea 01       	movw	r28, r20
    int i;
    if (device->op_mode != device->op_mode_prior) return;
    263c:	dc 01       	movw	r26, r24
    263e:	18 96       	adiw	r26, 0x08	; 8
    2640:	2d 91       	ld	r18, X+
    2642:	3c 91       	ld	r19, X
    2644:	19 97       	sbiw	r26, 0x09	; 9
    2646:	1a 96       	adiw	r26, 0x0a	; 10
    2648:	8d 91       	ld	r24, X+
    264a:	9c 91       	ld	r25, X
    264c:	1b 97       	sbiw	r26, 0x0b	; 11
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	09 f0       	breq	.+2      	; 0x2656 <show_nearest_station+0x30>
    2654:	c4 c0       	rjmp	.+392    	; 0x27de <show_nearest_station+0x1b8>
    lcd_init();
    2656:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Finding Nearest\nStation...");
    265a:	8c ee       	ldi	r24, 0xEC	; 236
    265c:	92 e0       	ldi	r25, 0x02	; 2
    265e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2662:	bf e9       	ldi	r27, 0x9F	; 159
    2664:	e6 e8       	ldi	r30, 0x86	; 134
    2666:	f1 e0       	ldi	r31, 0x01	; 1
    2668:	b1 50       	subi	r27, 0x01	; 1
    266a:	e0 40       	sbci	r30, 0x00	; 0
    266c:	f0 40       	sbci	r31, 0x00	; 0
    266e:	e1 f7       	brne	.-8      	; 0x2668 <show_nearest_station+0x42>
    2670:	00 c0       	rjmp	.+0      	; 0x2672 <show_nearest_station+0x4c>
    2672:	00 00       	nop
    _delay_ms(500);

    lcd_init();
    2674:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    //calculate the nearest stations
    fm_stations->nearest_station = get_nearest_stations(fm_stations, gps_data->lat, gps_data->lon);
    2678:	0d 89       	ldd	r16, Y+21	; 0x15
    267a:	1e 89       	ldd	r17, Y+22	; 0x16
    267c:	2f 89       	ldd	r18, Y+23	; 0x17
    267e:	38 8d       	ldd	r19, Y+24	; 0x18
    2680:	49 89       	ldd	r20, Y+17	; 0x11
    2682:	5a 89       	ldd	r21, Y+18	; 0x12
    2684:	6b 89       	ldd	r22, Y+19	; 0x13
    2686:	7c 89       	ldd	r23, Y+20	; 0x14
    2688:	c7 01       	movw	r24, r14
    268a:	0e 94 20 0c 	call	0x1840	; 0x1840 <get_nearest_stations>
    268e:	d7 01       	movw	r26, r14
    2690:	15 96       	adiw	r26, 0x05	; 5
    2692:	9c 93       	st	X, r25
    2694:	8e 93       	st	-X, r24
    2696:	14 97       	sbiw	r26, 0x04	; 4

    //calculate bearings to nearest station
    calculate_bearings(gps_data, fm_stations);
    2698:	b7 01       	movw	r22, r14
    269a:	ce 01       	movw	r24, r28
    269c:	0e 94 19 09 	call	0x1232	; 0x1232 <calculate_bearings>

    //print formatted info to the display
    print_callsign(fm_stations, fm_stations->nearest_station); string_write(" "); string_write_float(fm_stations->all_stations[fm_stations->nearest_station].freq,1); string_write("\n");
    26a0:	f7 01       	movw	r30, r14
    26a2:	64 81       	ldd	r22, Z+4	; 0x04
    26a4:	75 81       	ldd	r23, Z+5	; 0x05
    26a6:	c7 01       	movw	r24, r14
    26a8:	0e 94 96 11 	call	0x232c	; 0x232c <print_callsign>
    26ac:	8c ef       	ldi	r24, 0xFC	; 252
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    26b4:	d7 01       	movw	r26, r14
    26b6:	14 96       	adiw	r26, 0x04	; 4
    26b8:	2d 91       	ld	r18, X+
    26ba:	3c 91       	ld	r19, X
    26bc:	15 97       	sbiw	r26, 0x05	; 5
    26be:	4c e1       	ldi	r20, 0x1C	; 28
    26c0:	42 9f       	mul	r20, r18
    26c2:	c0 01       	movw	r24, r0
    26c4:	43 9f       	mul	r20, r19
    26c6:	90 0d       	add	r25, r0
    26c8:	11 24       	eor	r1, r1
    26ca:	ed 91       	ld	r30, X+
    26cc:	fc 91       	ld	r31, X
    26ce:	e8 0f       	add	r30, r24
    26d0:	f9 1f       	adc	r31, r25
    26d2:	60 85       	ldd	r22, Z+8	; 0x08
    26d4:	71 85       	ldd	r23, Z+9	; 0x09
    26d6:	82 85       	ldd	r24, Z+10	; 0x0a
    26d8:	93 85       	ldd	r25, Z+11	; 0x0b
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    26e2:	8c e6       	ldi	r24, 0x6C	; 108
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_station),2); string_write(" km, ");
    26ea:	f7 01       	movw	r30, r14
    26ec:	44 81       	ldd	r20, Z+4	; 0x04
    26ee:	55 81       	ldd	r21, Z+5	; 0x05
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	ce 01       	movw	r24, r28
    26f6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <my_distance_to_station>
    26fa:	42 e0       	ldi	r20, 0x02	; 2
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2702:	84 ed       	ldi	r24, 0xD4	; 212
    2704:	92 e0       	ldi	r25, 0x02	; 2
    2706:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //write out the absolute bearing chars
    for (i=0; i<3; i++)
        char_write(gps_data->str_abs_bearing_nearest[0][i]);
    270a:	fe 01       	movw	r30, r28
    270c:	e3 5b       	subi	r30, 0xB3	; 179
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2716:	fe 01       	movw	r30, r28
    2718:	e2 5b       	subi	r30, 0xB2	; 178
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2722:	fe 01       	movw	r30, r28
    2724:	e1 5b       	subi	r30, 0xB1	; 177
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 81       	ld	r24, Z
    272a:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    if (device->op_mode != device->op_mode_prior) return;
    272e:	d6 01       	movw	r26, r12
    2730:	18 96       	adiw	r26, 0x08	; 8
    2732:	2d 91       	ld	r18, X+
    2734:	3c 91       	ld	r19, X
    2736:	19 97       	sbiw	r26, 0x09	; 9
    2738:	1a 96       	adiw	r26, 0x0a	; 10
    273a:	8d 91       	ld	r24, X+
    273c:	9c 91       	ld	r25, X
    273e:	1b 97       	sbiw	r26, 0x0b	; 11
    2740:	28 17       	cp	r18, r24
    2742:	39 07       	cpc	r19, r25
    2744:	09 f0       	breq	.+2      	; 0x2748 <show_nearest_station+0x122>
    2746:	4b c0       	rjmp	.+150    	; 0x27de <show_nearest_station+0x1b8>
    2748:	bf eb       	ldi	r27, 0xBF	; 191
    274a:	e7 e2       	ldi	r30, 0x27	; 39
    274c:	f9 e0       	ldi	r31, 0x09	; 9
    274e:	b1 50       	subi	r27, 0x01	; 1
    2750:	e0 40       	sbci	r30, 0x00	; 0
    2752:	f0 40       	sbci	r31, 0x00	; 0
    2754:	e1 f7       	brne	.-8      	; 0x274e <show_nearest_station+0x128>
    2756:	00 c0       	rjmp	.+0      	; 0x2758 <show_nearest_station+0x132>
    2758:	00 00       	nop

    _delay_ms(3000);

    if (device->op_mode != device->op_mode_prior) return;
    275a:	d6 01       	movw	r26, r12
    275c:	18 96       	adiw	r26, 0x08	; 8
    275e:	2d 91       	ld	r18, X+
    2760:	3c 91       	ld	r19, X
    2762:	19 97       	sbiw	r26, 0x09	; 9
    2764:	1a 96       	adiw	r26, 0x0a	; 10
    2766:	8d 91       	ld	r24, X+
    2768:	9c 91       	ld	r25, X
    276a:	1b 97       	sbiw	r26, 0x0b	; 11
    276c:	28 17       	cp	r18, r24
    276e:	39 07       	cpc	r19, r25
    2770:	b1 f5       	brne	.+108    	; 0x27de <show_nearest_station+0x1b8>

    lcd_init();
    2772:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>

    //print bearings to the screen
    string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest[0],1); char_write(DEG_SYMBOL); char_write('\n');
    2776:	8a ed       	ldi	r24, 0xDA	; 218
    2778:	92 e0       	ldi	r25, 0x02	; 2
    277a:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    277e:	6d a9       	ldd	r22, Y+53	; 0x35
    2780:	7e a9       	ldd	r23, Y+54	; 0x36
    2782:	8f a9       	ldd	r24, Y+55	; 0x37
    2784:	98 ad       	ldd	r25, Y+56	; 0x38
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    278e:	8f ed       	ldi	r24, 0xDF	; 223
    2790:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2794:	8a e0       	ldi	r24, 0x0A	; 10
    2796:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest[0],1); char_write(DEG_SYMBOL);
    279a:	83 ee       	ldi	r24, 0xE3	; 227
    279c:	92 e0       	ldi	r25, 0x02	; 2
    279e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    27a2:	cf 5b       	subi	r28, 0xBF	; 191
    27a4:	df 4f       	sbci	r29, 0xFF	; 255
    27a6:	68 81       	ld	r22, Y
    27a8:	79 81       	ldd	r23, Y+1	; 0x01
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	9b 81       	ldd	r25, Y+3	; 0x03
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    27b6:	8f ed       	ldi	r24, 0xDF	; 223
    27b8:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    if (device->op_mode != device->op_mode_prior) return;
    27bc:	f6 01       	movw	r30, r12
    27be:	20 85       	ldd	r18, Z+8	; 0x08
    27c0:	31 85       	ldd	r19, Z+9	; 0x09
    27c2:	82 85       	ldd	r24, Z+10	; 0x0a
    27c4:	93 85       	ldd	r25, Z+11	; 0x0b
    27c6:	28 17       	cp	r18, r24
    27c8:	39 07       	cpc	r19, r25
    27ca:	49 f4       	brne	.+18     	; 0x27de <show_nearest_station+0x1b8>
    27cc:	ff eb       	ldi	r31, 0xBF	; 191
    27ce:	27 e2       	ldi	r18, 0x27	; 39
    27d0:	89 e0       	ldi	r24, 0x09	; 9
    27d2:	f1 50       	subi	r31, 0x01	; 1
    27d4:	20 40       	sbci	r18, 0x00	; 0
    27d6:	80 40       	sbci	r24, 0x00	; 0
    27d8:	e1 f7       	brne	.-8      	; 0x27d2 <show_nearest_station+0x1ac>
    27da:	00 c0       	rjmp	.+0      	; 0x27dc <show_nearest_station+0x1b6>
    27dc:	00 00       	nop

    _delay_ms(3000);
}
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	cf 90       	pop	r12
    27ee:	08 95       	ret

000027f0 <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(volatile DEV_STATE *device, DATABASE *fm_stations, int index)
{
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	ec 01       	movw	r28, r24
    2802:	8b 01       	movw	r16, r22
    2804:	6a 01       	movw	r12, r20
    string_write_int(index+1,3); string_write(": "); print_callsign(fm_stations, index); _delay_ms(250); string_write("\n"); 
    2806:	63 e0       	ldi	r22, 0x03	; 3
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	ca 01       	movw	r24, r20
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    2812:	87 e5       	ldi	r24, 0x57	; 87
    2814:	94 e0       	ldi	r25, 0x04	; 4
    2816:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    281a:	b6 01       	movw	r22, r12
    281c:	c8 01       	movw	r24, r16
    281e:	0e 94 96 11 	call	0x232c	; 0x232c <print_callsign>
    2822:	83 e2       	ldi	r24, 0x23	; 35
    2824:	94 ef       	ldi	r25, 0xF4	; 244
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <print_station+0x36>
    282a:	00 c0       	rjmp	.+0      	; 0x282c <print_station+0x3c>
    282c:	00 00       	nop
    282e:	8c e6       	ldi	r24, 0x6C	; 108
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    2836:	88 85       	ldd	r24, Y+8	; 0x08
    2838:	99 85       	ldd	r25, Y+9	; 0x09
    283a:	07 97       	sbiw	r24, 0x07	; 7
    283c:	09 f4       	brne	.+2      	; 0x2840 <print_station+0x50>
    283e:	a1 c0       	rjmp	.+322    	; 0x2982 <print_station+0x192>
        return;
    string_write("freq: "); string_write_float(fm_stations->all_stations[index].freq,1); _delay_ms(250); string_write("\n");
    2840:	87 e0       	ldi	r24, 0x07	; 7
    2842:	93 e0       	ldi	r25, 0x03	; 3
    2844:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2848:	8c e1       	ldi	r24, 0x1C	; 28
    284a:	8c 9d       	mul	r24, r12
    284c:	70 01       	movw	r14, r0
    284e:	8d 9d       	mul	r24, r13
    2850:	f0 0c       	add	r15, r0
    2852:	11 24       	eor	r1, r1
    2854:	d8 01       	movw	r26, r16
    2856:	ed 91       	ld	r30, X+
    2858:	fc 91       	ld	r31, X
    285a:	ee 0d       	add	r30, r14
    285c:	ff 1d       	adc	r31, r15
    285e:	60 85       	ldd	r22, Z+8	; 0x08
    2860:	71 85       	ldd	r23, Z+9	; 0x09
    2862:	82 85       	ldd	r24, Z+10	; 0x0a
    2864:	93 85       	ldd	r25, Z+11	; 0x0b
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    286e:	83 e2       	ldi	r24, 0x23	; 35
    2870:	94 ef       	ldi	r25, 0xF4	; 244
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <print_station+0x82>
    2876:	00 c0       	rjmp	.+0      	; 0x2878 <print_station+0x88>
    2878:	00 00       	nop
    287a:	8c e6       	ldi	r24, 0x6C	; 108
    287c:	91 e0       	ldi	r25, 0x01	; 1
    287e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    2882:	88 85       	ldd	r24, Y+8	; 0x08
    2884:	99 85       	ldd	r25, Y+9	; 0x09
    2886:	07 97       	sbiw	r24, 0x07	; 7
    2888:	09 f4       	brne	.+2      	; 0x288c <print_station+0x9c>
    288a:	7b c0       	rjmp	.+246    	; 0x2982 <print_station+0x192>
        return;
    string_write("lat: "); string_write_float(fm_stations->all_stations[index].lat,4); _delay_ms(250); string_write("\n");
    288c:	8e e0       	ldi	r24, 0x0E	; 14
    288e:	93 e0       	ldi	r25, 0x03	; 3
    2890:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2894:	d8 01       	movw	r26, r16
    2896:	ed 91       	ld	r30, X+
    2898:	fc 91       	ld	r31, X
    289a:	ee 0d       	add	r30, r14
    289c:	ff 1d       	adc	r31, r15
    289e:	64 85       	ldd	r22, Z+12	; 0x0c
    28a0:	75 85       	ldd	r23, Z+13	; 0x0d
    28a2:	86 85       	ldd	r24, Z+14	; 0x0e
    28a4:	97 85       	ldd	r25, Z+15	; 0x0f
    28a6:	44 e0       	ldi	r20, 0x04	; 4
    28a8:	50 e0       	ldi	r21, 0x00	; 0
    28aa:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    28ae:	83 e2       	ldi	r24, 0x23	; 35
    28b0:	94 ef       	ldi	r25, 0xF4	; 244
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <print_station+0xc2>
    28b6:	00 c0       	rjmp	.+0      	; 0x28b8 <print_station+0xc8>
    28b8:	00 00       	nop
    28ba:	8c e6       	ldi	r24, 0x6C	; 108
    28bc:	91 e0       	ldi	r25, 0x01	; 1
    28be:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    28c2:	88 85       	ldd	r24, Y+8	; 0x08
    28c4:	99 85       	ldd	r25, Y+9	; 0x09
    28c6:	07 97       	sbiw	r24, 0x07	; 7
    28c8:	09 f4       	brne	.+2      	; 0x28cc <print_station+0xdc>
    28ca:	5b c0       	rjmp	.+182    	; 0x2982 <print_station+0x192>
        return;
    string_write("lon: "); string_write_float(fm_stations->all_stations[index].lon,4); _delay_ms(250); string_write("\n");
    28cc:	84 e1       	ldi	r24, 0x14	; 20
    28ce:	93 e0       	ldi	r25, 0x03	; 3
    28d0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    28d4:	d8 01       	movw	r26, r16
    28d6:	ed 91       	ld	r30, X+
    28d8:	fc 91       	ld	r31, X
    28da:	ee 0d       	add	r30, r14
    28dc:	ff 1d       	adc	r31, r15
    28de:	60 89       	ldd	r22, Z+16	; 0x10
    28e0:	71 89       	ldd	r23, Z+17	; 0x11
    28e2:	82 89       	ldd	r24, Z+18	; 0x12
    28e4:	93 89       	ldd	r25, Z+19	; 0x13
    28e6:	44 e0       	ldi	r20, 0x04	; 4
    28e8:	50 e0       	ldi	r21, 0x00	; 0
    28ea:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    28ee:	83 e2       	ldi	r24, 0x23	; 35
    28f0:	94 ef       	ldi	r25, 0xF4	; 244
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <print_station+0x102>
    28f6:	00 c0       	rjmp	.+0      	; 0x28f8 <print_station+0x108>
    28f8:	00 00       	nop
    28fa:	8c e6       	ldi	r24, 0x6C	; 108
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    2902:	88 85       	ldd	r24, Y+8	; 0x08
    2904:	99 85       	ldd	r25, Y+9	; 0x09
    2906:	07 97       	sbiw	r24, 0x07	; 7
    2908:	e1 f1       	breq	.+120    	; 0x2982 <print_station+0x192>
        return;
    string_write("erp: "); string_write_float(fm_stations->all_stations[index].erp,1); _delay_ms(250); string_write("\n");
    290a:	8a e1       	ldi	r24, 0x1A	; 26
    290c:	93 e0       	ldi	r25, 0x03	; 3
    290e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2912:	d8 01       	movw	r26, r16
    2914:	ed 91       	ld	r30, X+
    2916:	fc 91       	ld	r31, X
    2918:	ee 0d       	add	r30, r14
    291a:	ff 1d       	adc	r31, r15
    291c:	64 89       	ldd	r22, Z+20	; 0x14
    291e:	75 89       	ldd	r23, Z+21	; 0x15
    2920:	86 89       	ldd	r24, Z+22	; 0x16
    2922:	97 89       	ldd	r25, Z+23	; 0x17
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    292c:	83 e2       	ldi	r24, 0x23	; 35
    292e:	94 ef       	ldi	r25, 0xF4	; 244
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <print_station+0x140>
    2934:	00 c0       	rjmp	.+0      	; 0x2936 <print_station+0x146>
    2936:	00 00       	nop
    2938:	8c e6       	ldi	r24, 0x6C	; 108
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    2940:	88 85       	ldd	r24, Y+8	; 0x08
    2942:	99 85       	ldd	r25, Y+9	; 0x09
    2944:	07 97       	sbiw	r24, 0x07	; 7
    2946:	e9 f0       	breq	.+58     	; 0x2982 <print_station+0x192>
        return;
    string_write("haat: "); string_write_float(fm_stations->all_stations[index].haat,0); _delay_ms(250); string_write("\n");
    2948:	80 e2       	ldi	r24, 0x20	; 32
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2950:	d8 01       	movw	r26, r16
    2952:	ed 91       	ld	r30, X+
    2954:	fc 91       	ld	r31, X
    2956:	ee 0d       	add	r30, r14
    2958:	ff 1d       	adc	r31, r15
    295a:	60 8d       	ldd	r22, Z+24	; 0x18
    295c:	71 8d       	ldd	r23, Z+25	; 0x19
    295e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2960:	93 8d       	ldd	r25, Z+27	; 0x1b
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    296a:	83 e2       	ldi	r24, 0x23	; 35
    296c:	94 ef       	ldi	r25, 0xF4	; 244
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <print_station+0x17e>
    2972:	00 c0       	rjmp	.+0      	; 0x2974 <print_station+0x184>
    2974:	00 00       	nop
    2976:	8c e6       	ldi	r24, 0x6C	; 108
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    if (device->op_mode==MD_UPDATE)
    297e:	88 85       	ldd	r24, Y+8	; 0x08
    2980:	99 85       	ldd	r25, Y+9	; 0x09
        return;
}
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	ff 90       	pop	r15
    298c:	ef 90       	pop	r14
    298e:	df 90       	pop	r13
    2990:	cf 90       	pop	r12
    2992:	08 95       	ret

00002994 <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
    29a2:	7b 01       	movw	r14, r22
    if (device->op_mode != device->op_mode_prior) return;
    29a4:	28 85       	ldd	r18, Y+8	; 0x08
    29a6:	39 85       	ldd	r19, Y+9	; 0x09
    29a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ac:	28 17       	cp	r18, r24
    29ae:	39 07       	cpc	r19, r25
    29b0:	e1 f5       	brne	.+120    	; 0x2a2a <print_all_known_stations+0x96>
    int i;
    lcd_init();
    29b2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	f7 01       	movw	r30, r14
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    string_write(" known\nstations");
    29c4:	8a ea       	ldi	r24, 0xAA	; 170
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    29cc:	ff e7       	ldi	r31, 0x7F	; 127
    29ce:	2a e1       	ldi	r18, 0x1A	; 26
    29d0:	86 e0       	ldi	r24, 0x06	; 6
    29d2:	f1 50       	subi	r31, 0x01	; 1
    29d4:	20 40       	sbci	r18, 0x00	; 0
    29d6:	80 40       	sbci	r24, 0x00	; 0
    29d8:	e1 f7       	brne	.-8      	; 0x29d2 <print_all_known_stations+0x3e>
    29da:	00 c0       	rjmp	.+0      	; 0x29dc <print_all_known_stations+0x48>
    29dc:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    29de:	00 e0       	ldi	r16, 0x00	; 0
    29e0:	10 e0       	ldi	r17, 0x00	; 0
    29e2:	1d c0       	rjmp	.+58     	; 0x2a1e <print_all_known_stations+0x8a>
    {
        if (device->op_mode != device->op_mode_prior) return;
    29e4:	28 85       	ldd	r18, Y+8	; 0x08
    29e6:	39 85       	ldd	r19, Y+9	; 0x09
    29e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ec:	28 17       	cp	r18, r24
    29ee:	39 07       	cpc	r19, r25
    29f0:	e1 f4       	brne	.+56     	; 0x2a2a <print_all_known_stations+0x96>

        lcd_init();
    29f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
        print_station(device, fm_stations, i);
    29f6:	a8 01       	movw	r20, r16
    29f8:	b7 01       	movw	r22, r14
    29fa:	ce 01       	movw	r24, r28
    29fc:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <print_station>

        if (device->op_mode != device->op_mode_prior) return;
    2a00:	28 85       	ldd	r18, Y+8	; 0x08
    2a02:	39 85       	ldd	r19, Y+9	; 0x09
    2a04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a08:	28 17       	cp	r18, r24
    2a0a:	39 07       	cpc	r19, r25
    2a0c:	71 f4       	brne	.+28     	; 0x2a2a <print_all_known_stations+0x96>
    2a0e:	ef e4       	ldi	r30, 0x4F	; 79
    2a10:	f3 ec       	ldi	r31, 0xC3	; 195
    2a12:	31 97       	sbiw	r30, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <print_all_known_stations+0x7e>
    2a16:	00 c0       	rjmp	.+0      	; 0x2a18 <print_all_known_stations+0x84>
    2a18:	00 00       	nop
    string_write_int(fm_stations->num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    2a1a:	0f 5f       	subi	r16, 0xFF	; 255
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	f7 01       	movw	r30, r14
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	08 17       	cp	r16, r24
    2a26:	19 07       	cpc	r17, r25
    2a28:	ec f2       	brlt	.-70     	; 0x29e4 <print_all_known_stations+0x50>

        if (device->op_mode != device->op_mode_prior) return;

        _delay_ms(200);   
    }
}
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	ff 90       	pop	r15
    2a34:	ef 90       	pop	r14
    2a36:	08 95       	ret

00002a38 <print_gps_data>:
        return;
}

//print the formatted data stored in the GPS_DATA struct to the screen
void print_gps_data(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2a38:	6f 92       	push	r6
    2a3a:	7f 92       	push	r7
    2a3c:	8f 92       	push	r8
    2a3e:	9f 92       	push	r9
    2a40:	af 92       	push	r10
    2a42:	bf 92       	push	r11
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	7c 01       	movw	r14, r24
    2a56:	8b 01       	movw	r16, r22
    if (device->op_mode != device->op_mode_prior) return;
    2a58:	fc 01       	movw	r30, r24
    2a5a:	20 85       	ldd	r18, Z+8	; 0x08
    2a5c:	31 85       	ldd	r19, Z+9	; 0x09
    2a5e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a60:	93 85       	ldd	r25, Z+11	; 0x0b
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <print_gps_data+0x32>
    2a68:	d3 c0       	rjmp	.+422    	; 0x2c10 <print_gps_data+0x1d8>
    lcd_init();
    2a6a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Latest\nGPS Data:");
    2a6e:	87 e2       	ldi	r24, 0x27	; 39
    2a70:	93 e0       	ldi	r25, 0x03	; 3
    2a72:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2a76:	ff e3       	ldi	r31, 0x3F	; 63
    2a78:	2d e0       	ldi	r18, 0x0D	; 13
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	f1 50       	subi	r31, 0x01	; 1
    2a7e:	20 40       	sbci	r18, 0x00	; 0
    2a80:	80 40       	sbci	r24, 0x00	; 0
    2a82:	e1 f7       	brne	.-8      	; 0x2a7c <print_gps_data+0x44>
    2a84:	00 c0       	rjmp	.+0      	; 0x2a86 <print_gps_data+0x4e>
    2a86:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    2a88:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
    2a8c:	c0 e0       	ldi	r28, 0x00	; 0
    2a8e:	d0 e0       	ldi	r29, 0x00	; 0
                string_write_numchars(gps_data->msg_type,8);
            break;

            case 1:
                string_write("Time: ");
                string_write_numchars(gps_data->utc_time,8);
    2a90:	38 01       	movw	r6, r16
    2a92:	98 e0       	ldi	r25, 0x08	; 8
    2a94:	69 0e       	add	r6, r25
    2a96:	71 1c       	adc	r7, r1
                string_write_numchars(gps_data->date,8);
            break;

            case 8:
                string_write("MagVar: ");
                string_write_numchars(gps_data->mag_var,8);
    2a98:	68 01       	movw	r12, r16
    2a9a:	e9 e2       	ldi	r30, 0x29	; 41
    2a9c:	ce 0e       	add	r12, r30
    2a9e:	d1 1c       	adc	r13, r1
                string_write_float(gps_data->course,1);
            break;

            case 7:
                string_write("Date: ");
                string_write_numchars(gps_data->date,8);
    2aa0:	58 01       	movw	r10, r16
    2aa2:	f1 e2       	ldi	r31, 0x21	; 33
    2aa4:	af 0e       	add	r10, r31
    2aa6:	b1 1c       	adc	r11, r1
                char_write(gps_data->mode);
            break;

            case 10:
                string_write("Checksum: ");
                string_write_numchars(gps_data->checksum,3);
    2aa8:	48 01       	movw	r8, r16
    2aaa:	22 e3       	ldi	r18, 0x32	; 50
    2aac:	82 0e       	add	r8, r18
    2aae:	91 1c       	adc	r9, r1
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    {

        if (i>0)
    2ab0:	20 97       	sbiw	r28, 0x00	; 0
    2ab2:	31 f1       	breq	.+76     	; 0x2b00 <print_gps_data+0xc8>
            string_write("\n");
    2ab4:	8c e6       	ldi	r24, 0x6C	; 108
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

        switch (i)
    2abc:	c6 30       	cpi	r28, 0x06	; 6
    2abe:	d1 05       	cpc	r29, r1
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <print_gps_data+0x8c>
    2ac2:	60 c0       	rjmp	.+192    	; 0x2b84 <print_gps_data+0x14c>
    2ac4:	7c f4       	brge	.+30     	; 0x2ae4 <print_gps_data+0xac>
    2ac6:	c3 30       	cpi	r28, 0x03	; 3
    2ac8:	d1 05       	cpc	r29, r1
    2aca:	89 f1       	breq	.+98     	; 0x2b2e <print_gps_data+0xf6>
    2acc:	24 f4       	brge	.+8      	; 0x2ad6 <print_gps_data+0x9e>
    2ace:	c2 30       	cpi	r28, 0x02	; 2
    2ad0:	d1 05       	cpc	r29, r1
    2ad2:	f1 f4       	brne	.+60     	; 0x2b10 <print_gps_data+0xd8>
    2ad4:	25 c0       	rjmp	.+74     	; 0x2b20 <print_gps_data+0xe8>
    2ad6:	c4 30       	cpi	r28, 0x04	; 4
    2ad8:	d1 05       	cpc	r29, r1
    2ada:	99 f1       	breq	.+102    	; 0x2b42 <print_gps_data+0x10a>
    2adc:	c5 30       	cpi	r28, 0x05	; 5
    2ade:	d1 05       	cpc	r29, r1
    2ae0:	b9 f4       	brne	.+46     	; 0x2b10 <print_gps_data+0xd8>
    2ae2:	3e c0       	rjmp	.+124    	; 0x2b60 <print_gps_data+0x128>
    2ae4:	c8 30       	cpi	r28, 0x08	; 8
    2ae6:	d1 05       	cpc	r29, r1
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <print_gps_data+0xb4>
    2aea:	62 c0       	rjmp	.+196    	; 0x2bb0 <print_gps_data+0x178>
    2aec:	0c f4       	brge	.+2      	; 0x2af0 <print_gps_data+0xb8>
    2aee:	58 c0       	rjmp	.+176    	; 0x2ba0 <print_gps_data+0x168>
    2af0:	c9 30       	cpi	r28, 0x09	; 9
    2af2:	d1 05       	cpc	r29, r1
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <print_gps_data+0xc0>
    2af6:	64 c0       	rjmp	.+200    	; 0x2bc0 <print_gps_data+0x188>
    2af8:	ca 30       	cpi	r28, 0x0A	; 10
    2afa:	d1 05       	cpc	r29, r1
    2afc:	49 f4       	brne	.+18     	; 0x2b10 <print_gps_data+0xd8>
    2afe:	69 c0       	rjmp	.+210    	; 0x2bd2 <print_gps_data+0x19a>
        {
            case 0:
                string_write("Message: "); 
    2b00:	88 e3       	ldi	r24, 0x38	; 56
    2b02:	93 e0       	ldi	r25, 0x03	; 3
    2b04:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->msg_type,8);
    2b08:	68 e0       	ldi	r22, 0x08	; 8
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	68 c0       	rjmp	.+208    	; 0x2be0 <print_gps_data+0x1a8>
            break;

            case 1:
                string_write("Time: ");
    2b10:	82 e4       	ldi	r24, 0x42	; 66
    2b12:	93 e0       	ldi	r25, 0x03	; 3
    2b14:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->utc_time,8);
    2b18:	68 e0       	ldi	r22, 0x08	; 8
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	c3 01       	movw	r24, r6
    2b1e:	60 c0       	rjmp	.+192    	; 0x2be0 <print_gps_data+0x1a8>
            break;

            case 2:
                string_write("NRW: ");
    2b20:	89 e4       	ldi	r24, 0x49	; 73
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                char_write(gps_data->nrw);
    2b28:	f8 01       	movw	r30, r16
    2b2a:	80 89       	ldd	r24, Z+16	; 0x10
    2b2c:	4f c0       	rjmp	.+158    	; 0x2bcc <print_gps_data+0x194>
            break;

            case 3:
                string_write("Lat: ");
    2b2e:	8f e4       	ldi	r24, 0x4F	; 79
    2b30:	93 e0       	ldi	r25, 0x03	; 3
    2b32:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->lat,4); char_write(DEG_SYMBOL);
    2b36:	f8 01       	movw	r30, r16
    2b38:	61 89       	ldd	r22, Z+17	; 0x11
    2b3a:	72 89       	ldd	r23, Z+18	; 0x12
    2b3c:	83 89       	ldd	r24, Z+19	; 0x13
    2b3e:	94 89       	ldd	r25, Z+20	; 0x14
    2b40:	09 c0       	rjmp	.+18     	; 0x2b54 <print_gps_data+0x11c>
            break;

            case 4:
                string_write("Lon: ");
    2b42:	85 e5       	ldi	r24, 0x55	; 85
    2b44:	93 e0       	ldi	r25, 0x03	; 3
    2b46:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->lon,4); char_write(DEG_SYMBOL);
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	65 89       	ldd	r22, Z+21	; 0x15
    2b4e:	76 89       	ldd	r23, Z+22	; 0x16
    2b50:	87 89       	ldd	r24, Z+23	; 0x17
    2b52:	90 8d       	ldd	r25, Z+24	; 0x18
    2b54:	44 e0       	ldi	r20, 0x04	; 4
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2b5c:	8f ed       	ldi	r24, 0xDF	; 223
    2b5e:	36 c0       	rjmp	.+108    	; 0x2bcc <print_gps_data+0x194>
            break;

            case 5:
                string_write("Speed: ");
    2b60:	82 eb       	ldi	r24, 0xB2	; 178
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->speed,1); string_write(" kts");
    2b68:	f8 01       	movw	r30, r16
    2b6a:	61 8d       	ldd	r22, Z+25	; 0x19
    2b6c:	72 8d       	ldd	r23, Z+26	; 0x1a
    2b6e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2b70:	94 8d       	ldd	r25, Z+28	; 0x1c
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2b7a:	8b e5       	ldi	r24, 0x5B	; 91
    2b7c:	93 e0       	ldi	r25, 0x03	; 3
    2b7e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            break;
    2b82:	30 c0       	rjmp	.+96     	; 0x2be4 <print_gps_data+0x1ac>

            case 6:
                string_write("Course: ");
    2b84:	80 e6       	ldi	r24, 0x60	; 96
    2b86:	93 e0       	ldi	r25, 0x03	; 3
    2b88:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_float(gps_data->course,1);
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	65 8d       	ldd	r22, Z+29	; 0x1d
    2b90:	76 8d       	ldd	r23, Z+30	; 0x1e
    2b92:	87 8d       	ldd	r24, Z+31	; 0x1f
    2b94:	90 a1       	ldd	r25, Z+32	; 0x20
    2b96:	41 e0       	ldi	r20, 0x01	; 1
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
            break;
    2b9e:	22 c0       	rjmp	.+68     	; 0x2be4 <print_gps_data+0x1ac>

            case 7:
                string_write("Date: ");
    2ba0:	89 e6       	ldi	r24, 0x69	; 105
    2ba2:	93 e0       	ldi	r25, 0x03	; 3
    2ba4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->date,8);
    2ba8:	68 e0       	ldi	r22, 0x08	; 8
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	c5 01       	movw	r24, r10
    2bae:	18 c0       	rjmp	.+48     	; 0x2be0 <print_gps_data+0x1a8>
            break;

            case 8:
                string_write("MagVar: ");
    2bb0:	80 e7       	ldi	r24, 0x70	; 112
    2bb2:	93 e0       	ldi	r25, 0x03	; 3
    2bb4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->mag_var,8);
    2bb8:	68 e0       	ldi	r22, 0x08	; 8
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	c6 01       	movw	r24, r12
    2bbe:	10 c0       	rjmp	.+32     	; 0x2be0 <print_gps_data+0x1a8>
            break;

            case 9:
                string_write("Mode: ");
    2bc0:	89 e7       	ldi	r24, 0x79	; 121
    2bc2:	93 e0       	ldi	r25, 0x03	; 3
    2bc4:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                char_write(gps_data->mode);
    2bc8:	f8 01       	movw	r30, r16
    2bca:	81 a9       	ldd	r24, Z+49	; 0x31
    2bcc:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
            break;
    2bd0:	09 c0       	rjmp	.+18     	; 0x2be4 <print_gps_data+0x1ac>

            case 10:
                string_write("Checksum: ");
    2bd2:	80 e8       	ldi	r24, 0x80	; 128
    2bd4:	93 e0       	ldi	r25, 0x03	; 3
    2bd6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
                string_write_numchars(gps_data->checksum,3);
    2bda:	63 e0       	ldi	r22, 0x03	; 3
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	c4 01       	movw	r24, r8
    2be0:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    2be4:	ff e9       	ldi	r31, 0x9F	; 159
    2be6:	26 e8       	ldi	r18, 0x86	; 134
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	f1 50       	subi	r31, 0x01	; 1
    2bec:	20 40       	sbci	r18, 0x00	; 0
    2bee:	80 40       	sbci	r24, 0x00	; 0
    2bf0:	e1 f7       	brne	.-8      	; 0x2bea <print_gps_data+0x1b2>
    2bf2:	00 c0       	rjmp	.+0      	; 0x2bf4 <print_gps_data+0x1bc>
    2bf4:	00 00       	nop
            break;
        }

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    2bf6:	f7 01       	movw	r30, r14
    2bf8:	20 85       	ldd	r18, Z+8	; 0x08
    2bfa:	31 85       	ldd	r19, Z+9	; 0x09
    2bfc:	82 85       	ldd	r24, Z+10	; 0x0a
    2bfe:	93 85       	ldd	r25, Z+11	; 0x0b
    2c00:	28 17       	cp	r18, r24
    2c02:	39 07       	cpc	r19, r25
    2c04:	29 f4       	brne	.+10     	; 0x2c10 <print_gps_data+0x1d8>
    lcd_init();
    string_write("Latest\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    2c06:	21 96       	adiw	r28, 0x01	; 1
    2c08:	cb 30       	cpi	r28, 0x0B	; 11
    2c0a:	d1 05       	cpc	r29, r1
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <print_gps_data+0x1d8>
    2c0e:	50 cf       	rjmp	.-352    	; 0x2ab0 <print_gps_data+0x78>
        }

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    }
}
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
    2c20:	bf 90       	pop	r11
    2c22:	af 90       	pop	r10
    2c24:	9f 90       	pop	r9
    2c26:	8f 90       	pop	r8
    2c28:	7f 90       	pop	r7
    2c2a:	6f 90       	pop	r6
    2c2c:	08 95       	ret

00002c2e <print_gps_data_concise>:

//print a concise version of the formatted GPS data to the screen
void print_gps_data_concise(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	8c 01       	movw	r16, r24
    2c38:	eb 01       	movw	r28, r22
    int i;
    if (device->op_mode != device->op_mode_prior) return;
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 85       	ldd	r18, Z+8	; 0x08
    2c3e:	31 85       	ldd	r19, Z+9	; 0x09
    2c40:	82 85       	ldd	r24, Z+10	; 0x0a
    2c42:	93 85       	ldd	r25, Z+11	; 0x0b
    2c44:	28 17       	cp	r18, r24
    2c46:	39 07       	cpc	r19, r25
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <print_gps_data_concise+0x1e>
    2c4a:	a0 c0       	rjmp	.+320    	; 0x2d8c <print_gps_data_concise+0x15e>

    lcd_init();
    2c4c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Date: ");
    2c50:	89 e6       	ldi	r24, 0x69	; 105
    2c52:	93 e0       	ldi	r25, 0x03	; 3
    2c54:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_numchars(gps_data->date,8); char_write('\n');
    2c58:	68 e0       	ldi	r22, 0x08	; 8
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	81 96       	adiw	r24, 0x21	; 33
    2c60:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    2c64:	8a e0       	ldi	r24, 0x0A	; 10
    2c66:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    string_write("UTC: ");
    2c6a:	89 e5       	ldi	r24, 0x59	; 89
    2c6c:	91 e0       	ldi	r25, 0x01	; 1
    2c6e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_numchars(gps_data->utc_time,8);
    2c72:	68 e0       	ldi	r22, 0x08	; 8
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	ce 01       	movw	r24, r28
    2c78:	08 96       	adiw	r24, 0x08	; 8
    2c7a:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    2c7e:	ff e7       	ldi	r31, 0x7F	; 127
    2c80:	2a e1       	ldi	r18, 0x1A	; 26
    2c82:	86 e0       	ldi	r24, 0x06	; 6
    2c84:	f1 50       	subi	r31, 0x01	; 1
    2c86:	20 40       	sbci	r18, 0x00	; 0
    2c88:	80 40       	sbci	r24, 0x00	; 0
    2c8a:	e1 f7       	brne	.-8      	; 0x2c84 <print_gps_data_concise+0x56>
    2c8c:	00 c0       	rjmp	.+0      	; 0x2c8e <print_gps_data_concise+0x60>
    2c8e:	00 00       	nop
    _delay_ms(2000);

    if (device->op_mode != device->op_mode_prior) return;
    2c90:	f8 01       	movw	r30, r16
    2c92:	20 85       	ldd	r18, Z+8	; 0x08
    2c94:	31 85       	ldd	r19, Z+9	; 0x09
    2c96:	82 85       	ldd	r24, Z+10	; 0x0a
    2c98:	93 85       	ldd	r25, Z+11	; 0x0b
    2c9a:	28 17       	cp	r18, r24
    2c9c:	39 07       	cpc	r19, r25
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <print_gps_data_concise+0x74>
    2ca0:	75 c0       	rjmp	.+234    	; 0x2d8c <print_gps_data_concise+0x15e>

    lcd_init();
    2ca2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Lat: ");
    2ca6:	8f e4       	ldi	r24, 0x4F	; 79
    2ca8:	93 e0       	ldi	r25, 0x03	; 3
    2caa:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->lat,4);  char_write(DEG_SYMBOL); char_write('\n');
    2cae:	69 89       	ldd	r22, Y+17	; 0x11
    2cb0:	7a 89       	ldd	r23, Y+18	; 0x12
    2cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb6:	44 e0       	ldi	r20, 0x04	; 4
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2cbe:	8f ed       	ldi	r24, 0xDF	; 223
    2cc0:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2cc4:	8a e0       	ldi	r24, 0x0A	; 10
    2cc6:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    string_write("Lon: ");
    2cca:	85 e5       	ldi	r24, 0x55	; 85
    2ccc:	93 e0       	ldi	r25, 0x03	; 3
    2cce:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->lon,4);  char_write(DEG_SYMBOL);
    2cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cda:	44 e0       	ldi	r20, 0x04	; 4
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2ce2:	8f ed       	ldi	r24, 0xDF	; 223
    2ce4:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2ce8:	ff e7       	ldi	r31, 0x7F	; 127
    2cea:	2a e1       	ldi	r18, 0x1A	; 26
    2cec:	86 e0       	ldi	r24, 0x06	; 6
    2cee:	f1 50       	subi	r31, 0x01	; 1
    2cf0:	20 40       	sbci	r18, 0x00	; 0
    2cf2:	80 40       	sbci	r24, 0x00	; 0
    2cf4:	e1 f7       	brne	.-8      	; 0x2cee <print_gps_data_concise+0xc0>
    2cf6:	00 c0       	rjmp	.+0      	; 0x2cf8 <print_gps_data_concise+0xca>
    2cf8:	00 00       	nop
    _delay_ms(2000);

    if (device->op_mode != device->op_mode_prior) return;
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	20 85       	ldd	r18, Z+8	; 0x08
    2cfe:	31 85       	ldd	r19, Z+9	; 0x09
    2d00:	82 85       	ldd	r24, Z+10	; 0x0a
    2d02:	93 85       	ldd	r25, Z+11	; 0x0b
    2d04:	28 17       	cp	r18, r24
    2d06:	39 07       	cpc	r19, r25
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <print_gps_data_concise+0xde>
    2d0a:	40 c0       	rjmp	.+128    	; 0x2d8c <print_gps_data_concise+0x15e>

    lcd_init();
    2d0c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("CMG: ");
    2d10:	8b ea       	ldi	r24, 0xAB	; 171
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->course,1); char_write(DEG_SYMBOL); string_write(" ");
    2d18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d20:	41 e0       	ldi	r20, 0x01	; 1
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2d28:	8f ed       	ldi	r24, 0xDF	; 223
    2d2a:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2d2e:	8c ef       	ldi	r24, 0xFC	; 252
    2d30:	91 e0       	ldi	r25, 0x01	; 1
    2d32:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

    //write out the absolute bearing chars
    for (i=0; i<3; i++)
        char_write(gps_data->str_course[i]);
    2d36:	fe 01       	movw	r30, r28
    2d38:	ea 5a       	subi	r30, 0xAA	; 170
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2d42:	fe 01       	movw	r30, r28
    2d44:	e9 5a       	subi	r30, 0xA9	; 169
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e8 5a       	subi	r30, 0xA8	; 168
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>

    string_write("\nSpeed: ");
    2d5a:	81 eb       	ldi	r24, 0xB1	; 177
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    string_write_float(gps_data->speed,1);  string_write(" kts");
    2d62:	69 8d       	ldd	r22, Y+25	; 0x19
    2d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6a:	41 e0       	ldi	r20, 0x01	; 1
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2d72:	8b e5       	ldi	r24, 0x5B	; 91
    2d74:	93 e0       	ldi	r25, 0x03	; 3
    2d76:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2d7a:	ff e7       	ldi	r31, 0x7F	; 127
    2d7c:	2a e1       	ldi	r18, 0x1A	; 26
    2d7e:	86 e0       	ldi	r24, 0x06	; 6
    2d80:	f1 50       	subi	r31, 0x01	; 1
    2d82:	20 40       	sbci	r18, 0x00	; 0
    2d84:	80 40       	sbci	r24, 0x00	; 0
    2d86:	e1 f7       	brne	.-8      	; 0x2d80 <print_gps_data_concise+0x152>
    2d88:	00 c0       	rjmp	.+0      	; 0x2d8a <print_gps_data_concise+0x15c>
    2d8a:	00 00       	nop
    _delay_ms(2000);
}
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	08 95       	ret

00002d96 <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(volatile DEV_STATE *device)
{
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	8c 01       	movw	r16, r24
    if (device->op_mode != device->op_mode_prior) return;
    2da0:	fc 01       	movw	r30, r24
    2da2:	20 85       	ldd	r18, Z+8	; 0x08
    2da4:	31 85       	ldd	r19, Z+9	; 0x09
    2da6:	82 85       	ldd	r24, Z+10	; 0x0a
    2da8:	93 85       	ldd	r25, Z+11	; 0x0b
    2daa:	28 17       	cp	r18, r24
    2dac:	39 07       	cpc	r19, r25
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <print_raw_gps_data+0x1c>
    2db0:	8f c0       	rjmp	.+286    	; 0x2ed0 <print_raw_gps_data+0x13a>

    lcd_init();
    2db2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Raw\nGPS Data:");
    2db6:	8b e8       	ldi	r24, 0x8B	; 139
    2db8:	93 e0       	ldi	r25, 0x03	; 3
    2dba:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2dbe:	ff e3       	ldi	r31, 0x3F	; 63
    2dc0:	2d e0       	ldi	r18, 0x0D	; 13
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	f1 50       	subi	r31, 0x01	; 1
    2dc6:	20 40       	sbci	r18, 0x00	; 0
    2dc8:	80 40       	sbci	r24, 0x00	; 0
    2dca:	e1 f7       	brne	.-8      	; 0x2dc4 <print_raw_gps_data+0x2e>
    2dcc:	00 c0       	rjmp	.+0      	; 0x2dce <print_raw_gps_data+0x38>
    2dce:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    2dd0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    int i=0;
    for (i=0; i<13; i++)
    2dd4:	c0 e0       	ldi	r28, 0x00	; 0
    2dd6:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
    2dd8:	20 97       	sbiw	r28, 0x00	; 0
    2dda:	61 f1       	breq	.+88     	; 0x2e34 <print_raw_gps_data+0x9e>
            string_write("\n");
    2ddc:	8c e6       	ldi	r24, 0x6C	; 108
    2dde:	91 e0       	ldi	r25, 0x01	; 1
    2de0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>

        switch (i)
    2de4:	c7 30       	cpi	r28, 0x07	; 7
    2de6:	d1 05       	cpc	r29, r1
    2de8:	d1 f1       	breq	.+116    	; 0x2e5e <print_raw_gps_data+0xc8>
    2dea:	94 f4       	brge	.+36     	; 0x2e10 <print_raw_gps_data+0x7a>
    2dec:	c4 30       	cpi	r28, 0x04	; 4
    2dee:	d1 05       	cpc	r29, r1
    2df0:	69 f1       	breq	.+90     	; 0x2e4c <print_raw_gps_data+0xb6>
    2df2:	3c f4       	brge	.+14     	; 0x2e02 <print_raw_gps_data+0x6c>
    2df4:	c2 30       	cpi	r28, 0x02	; 2
    2df6:	d1 05       	cpc	r29, r1
    2df8:	19 f1       	breq	.+70     	; 0x2e40 <print_raw_gps_data+0xaa>
    2dfa:	c3 30       	cpi	r28, 0x03	; 3
    2dfc:	d1 05       	cpc	r29, r1
    2dfe:	e9 f4       	brne	.+58     	; 0x2e3a <print_raw_gps_data+0xa4>
    2e00:	22 c0       	rjmp	.+68     	; 0x2e46 <print_raw_gps_data+0xb0>
    2e02:	c5 30       	cpi	r28, 0x05	; 5
    2e04:	d1 05       	cpc	r29, r1
    2e06:	29 f1       	breq	.+74     	; 0x2e52 <print_raw_gps_data+0xbc>
    2e08:	c6 30       	cpi	r28, 0x06	; 6
    2e0a:	d1 05       	cpc	r29, r1
    2e0c:	b1 f4       	brne	.+44     	; 0x2e3a <print_raw_gps_data+0xa4>
    2e0e:	24 c0       	rjmp	.+72     	; 0x2e58 <print_raw_gps_data+0xc2>
    2e10:	ca 30       	cpi	r28, 0x0A	; 10
    2e12:	d1 05       	cpc	r29, r1
    2e14:	69 f1       	breq	.+90     	; 0x2e70 <print_raw_gps_data+0xda>
    2e16:	3c f4       	brge	.+14     	; 0x2e26 <print_raw_gps_data+0x90>
    2e18:	c8 30       	cpi	r28, 0x08	; 8
    2e1a:	d1 05       	cpc	r29, r1
    2e1c:	19 f1       	breq	.+70     	; 0x2e64 <print_raw_gps_data+0xce>
    2e1e:	c9 30       	cpi	r28, 0x09	; 9
    2e20:	d1 05       	cpc	r29, r1
    2e22:	59 f4       	brne	.+22     	; 0x2e3a <print_raw_gps_data+0xa4>
    2e24:	22 c0       	rjmp	.+68     	; 0x2e6a <print_raw_gps_data+0xd4>
    2e26:	cb 30       	cpi	r28, 0x0B	; 11
    2e28:	d1 05       	cpc	r29, r1
    2e2a:	29 f1       	breq	.+74     	; 0x2e76 <print_raw_gps_data+0xe0>
    2e2c:	cc 30       	cpi	r28, 0x0C	; 12
    2e2e:	d1 05       	cpc	r29, r1
    2e30:	21 f4       	brne	.+8      	; 0x2e3a <print_raw_gps_data+0xa4>
    2e32:	24 c0       	rjmp	.+72     	; 0x2e7c <print_raw_gps_data+0xe6>
        {
            case 0:
                string_write("Message");
    2e34:	89 e9       	ldi	r24, 0x99	; 153
    2e36:	93 e0       	ldi	r25, 0x03	; 3
    2e38:	23 c0       	rjmp	.+70     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 1:
                string_write("Time");
    2e3a:	81 ea       	ldi	r24, 0xA1	; 161
    2e3c:	93 e0       	ldi	r25, 0x03	; 3
    2e3e:	20 c0       	rjmp	.+64     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 2:
                string_write("NRW");
    2e40:	86 ea       	ldi	r24, 0xA6	; 166
    2e42:	93 e0       	ldi	r25, 0x03	; 3
    2e44:	1d c0       	rjmp	.+58     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 3:
                string_write("Lat");
    2e46:	8a ea       	ldi	r24, 0xAA	; 170
    2e48:	93 e0       	ldi	r25, 0x03	; 3
    2e4a:	1a c0       	rjmp	.+52     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 4:
                string_write("N/S");
    2e4c:	8e ea       	ldi	r24, 0xAE	; 174
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	17 c0       	rjmp	.+46     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 5:
                string_write("Lon");
    2e52:	82 eb       	ldi	r24, 0xB2	; 178
    2e54:	93 e0       	ldi	r25, 0x03	; 3
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 6:
                string_write("E/W");
    2e58:	86 eb       	ldi	r24, 0xB6	; 182
    2e5a:	93 e0       	ldi	r25, 0x03	; 3
    2e5c:	11 c0       	rjmp	.+34     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 7:
                string_write("Speed");
    2e5e:	8a eb       	ldi	r24, 0xBA	; 186
    2e60:	93 e0       	ldi	r25, 0x03	; 3
    2e62:	0e c0       	rjmp	.+28     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 8:
                string_write("Course");
    2e64:	80 ec       	ldi	r24, 0xC0	; 192
    2e66:	93 e0       	ldi	r25, 0x03	; 3
    2e68:	0b c0       	rjmp	.+22     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 9:
                string_write("Date");
    2e6a:	87 ec       	ldi	r24, 0xC7	; 199
    2e6c:	93 e0       	ldi	r25, 0x03	; 3
    2e6e:	08 c0       	rjmp	.+16     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 10:
                string_write("MagVar");
    2e70:	8c ec       	ldi	r24, 0xCC	; 204
    2e72:	93 e0       	ldi	r25, 0x03	; 3
    2e74:	05 c0       	rjmp	.+10     	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 11:
                string_write("Mode");
    2e76:	83 ed       	ldi	r24, 0xD3	; 211
    2e78:	93 e0       	ldi	r25, 0x03	; 3
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <print_raw_gps_data+0xea>
            break;

            case 12:
                string_write("Checksum");
    2e7c:	88 ed       	ldi	r24, 0xD8	; 216
    2e7e:	93 e0       	ldi	r25, 0x03	; 3
    2e80:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
            break;
        }

        string_write(": ");
    2e84:	87 e5       	ldi	r24, 0x57	; 87
    2e86:	94 e0       	ldi	r25, 0x04	; 4
    2e88:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
        string_write(device->raw_gps_data[i]);
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	80 0f       	add	r24, r16
    2e94:	91 1f       	adc	r25, r17
    2e96:	fc 01       	movw	r30, r24
    2e98:	eb 51       	subi	r30, 0x1B	; 27
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2ea4:	9f e9       	ldi	r25, 0x9F	; 159
    2ea6:	e6 e8       	ldi	r30, 0x86	; 134
    2ea8:	f1 e0       	ldi	r31, 0x01	; 1
    2eaa:	91 50       	subi	r25, 0x01	; 1
    2eac:	e0 40       	sbci	r30, 0x00	; 0
    2eae:	f0 40       	sbci	r31, 0x00	; 0
    2eb0:	e1 f7       	brne	.-8      	; 0x2eaa <print_raw_gps_data+0x114>
    2eb2:	00 c0       	rjmp	.+0      	; 0x2eb4 <print_raw_gps_data+0x11e>
    2eb4:	00 00       	nop

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    2eb6:	f8 01       	movw	r30, r16
    2eb8:	20 85       	ldd	r18, Z+8	; 0x08
    2eba:	31 85       	ldd	r19, Z+9	; 0x09
    2ebc:	82 85       	ldd	r24, Z+10	; 0x0a
    2ebe:	93 85       	ldd	r25, Z+11	; 0x0b
    2ec0:	28 17       	cp	r18, r24
    2ec2:	39 07       	cpc	r19, r25
    2ec4:	29 f4       	brne	.+10     	; 0x2ed0 <print_raw_gps_data+0x13a>
    lcd_init();
    string_write("Raw\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
    2ec6:	21 96       	adiw	r28, 0x01	; 1
    2ec8:	cd 30       	cpi	r28, 0x0D	; 13
    2eca:	d1 05       	cpc	r29, r1
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <print_raw_gps_data+0x13a>
    2ece:	84 cf       	rjmp	.-248    	; 0x2dd8 <print_raw_gps_data+0x42>
        string_write(device->raw_gps_data[i]);

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    }
}
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	08 95       	ret

00002eda <test_earth_distance>:

//crosscheck the earth-distance formula with a few known distances
void test_earth_distance(void)
{
    2eda:	af 92       	push	r10
    2edc:	bf 92       	push	r11
    2ede:	cf 92       	push	r12
    2ee0:	df 92       	push	r13
    2ee2:	ef 92       	push	r14
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    lcd_init();
    2eea:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Calculating\nEarth Distances");
    2eee:	81 ee       	ldi	r24, 0xE1	; 225
    2ef0:	93 e0       	ldi	r25, 0x03	; 3
    2ef2:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2ef6:	2f e7       	ldi	r18, 0x7F	; 127
    2ef8:	8a e1       	ldi	r24, 0x1A	; 26
    2efa:	96 e0       	ldi	r25, 0x06	; 6
    2efc:	21 50       	subi	r18, 0x01	; 1
    2efe:	80 40       	sbci	r24, 0x00	; 0
    2f00:	90 40       	sbci	r25, 0x00	; 0
    2f02:	e1 f7       	brne	.-8      	; 0x2efc <test_earth_distance+0x22>
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <test_earth_distance+0x2c>
    2f06:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    2f08:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("Denver -> NYC:\n");
    2f0c:	8d ef       	ldi	r24, 0xFD	; 253
    2f0e:	93 e0       	ldi	r25, 0x03	; 3
    2f10:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    2f14:	a1 2c       	mov	r10, r1
    2f16:	b1 2c       	mov	r11, r1
    2f18:	40 ed       	ldi	r20, 0xD0	; 208
    2f1a:	c4 2e       	mov	r12, r20
    2f1c:	42 ec       	ldi	r20, 0xC2	; 194
    2f1e:	d4 2e       	mov	r13, r20
    2f20:	e1 2c       	mov	r14, r1
    2f22:	f1 2c       	mov	r15, r1
    2f24:	0c e1       	ldi	r16, 0x1C	; 28
    2f26:	12 e4       	ldi	r17, 0x42	; 66
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	44 e9       	ldi	r20, 0x94	; 148
    2f2e:	52 ec       	ldi	r21, 0xC2	; 194
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	80 e2       	ldi	r24, 0x20	; 32
    2f36:	92 e4       	ldi	r25, 0x42	; 66
    2f38:	0e 94 0d 0b 	call	0x161a	; 0x161a <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    2f3c:	41 e0       	ldi	r20, 0x01	; 1
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2f44:	8d e0       	ldi	r24, 0x0D	; 13
    2f46:	94 e0       	ldi	r25, 0x04	; 4
    2f48:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2f4c:	2f e1       	ldi	r18, 0x1F	; 31
    2f4e:	81 ea       	ldi	r24, 0xA1	; 161
    2f50:	97 e0       	ldi	r25, 0x07	; 7
    2f52:	21 50       	subi	r18, 0x01	; 1
    2f54:	80 40       	sbci	r24, 0x00	; 0
    2f56:	90 40       	sbci	r25, 0x00	; 0
    2f58:	e1 f7       	brne	.-8      	; 0x2f52 <test_earth_distance+0x78>
    2f5a:	00 c0       	rjmp	.+0      	; 0x2f5c <test_earth_distance+0x82>
    2f5c:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    2f5e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    string_write("North KC -> KC:\n");
    2f62:	81 e1       	ldi	r24, 0x11	; 17
    2f64:	94 e0       	ldi	r25, 0x04	; 4
    2f66:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    2f6a:	65 e3       	ldi	r22, 0x35	; 53
    2f6c:	a6 2e       	mov	r10, r22
    2f6e:	6e e1       	ldi	r22, 0x1E	; 30
    2f70:	b6 2e       	mov	r11, r22
    2f72:	6d eb       	ldi	r22, 0xBD	; 189
    2f74:	c6 2e       	mov	r12, r22
    2f76:	62 ec       	ldi	r22, 0xC2	; 194
    2f78:	d6 2e       	mov	r13, r22
    2f7a:	12 e3       	ldi	r17, 0x32	; 50
    2f7c:	e1 2e       	mov	r14, r17
    2f7e:	15 e5       	ldi	r17, 0x55	; 85
    2f80:	f1 2e       	mov	r15, r17
    2f82:	0c e1       	ldi	r16, 0x1C	; 28
    2f84:	12 e4       	ldi	r17, 0x42	; 66
    2f86:	22 e4       	ldi	r18, 0x42	; 66
    2f88:	30 e2       	ldi	r19, 0x20	; 32
    2f8a:	4d eb       	ldi	r20, 0xBD	; 189
    2f8c:	52 ec       	ldi	r21, 0xC2	; 194
    2f8e:	65 e2       	ldi	r22, 0x25	; 37
    2f90:	76 e8       	ldi	r23, 0x86	; 134
    2f92:	8c e1       	ldi	r24, 0x1C	; 28
    2f94:	92 e4       	ldi	r25, 0x42	; 66
    2f96:	0e 94 0d 0b 	call	0x161a	; 0x161a <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    2fa2:	8d e0       	ldi	r24, 0x0D	; 13
    2fa4:	94 e0       	ldi	r25, 0x04	; 4
    2fa6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    2faa:	2f e1       	ldi	r18, 0x1F	; 31
    2fac:	81 ea       	ldi	r24, 0xA1	; 161
    2fae:	97 e0       	ldi	r25, 0x07	; 7
    2fb0:	21 50       	subi	r18, 0x01	; 1
    2fb2:	80 40       	sbci	r24, 0x00	; 0
    2fb4:	90 40       	sbci	r25, 0x00	; 0
    2fb6:	e1 f7       	brne	.-8      	; 0x2fb0 <test_earth_distance+0xd6>
    2fb8:	00 c0       	rjmp	.+0      	; 0x2fba <test_earth_distance+0xe0>
    2fba:	00 00       	nop
    _delay_ms(2500);

    //just for reference, UMaine coords are: 44.900 -68.667
}
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	df 90       	pop	r13
    2fc6:	cf 90       	pop	r12
    2fc8:	bf 90       	pop	r11
    2fca:	af 90       	pop	r10
    2fcc:	08 95       	ret

00002fce <check_database_integrity>:
    2fce:	cf 92       	push	r12
    2fd0:	df 92       	push	r13
    2fd2:	ef 92       	push	r14
    2fd4:	ff 92       	push	r15
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	ec 01       	movw	r28, r24
    2fe0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fe2:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	00 e0       	ldi	r16, 0x00	; 0
    2fea:	10 e0       	ldi	r17, 0x00	; 0
    2fec:	71 c0       	rjmp	.+226    	; 0x30d0 <check_database_integrity+0x102>
    2fee:	c8 80       	ld	r12, Y
    2ff0:	d9 80       	ldd	r13, Y+1	; 0x01
    2ff2:	c8 0e       	add	r12, r24
    2ff4:	d9 1e       	adc	r13, r25
    2ff6:	f6 01       	movw	r30, r12
    2ff8:	e1 2c       	mov	r14, r1
    2ffa:	f1 2c       	mov	r15, r1
    2ffc:	41 91       	ld	r20, Z+
    2ffe:	40 52       	subi	r20, 0x20	; 32
    3000:	4f 35       	cpi	r20, 0x5F	; 95
    3002:	08 f4       	brcc	.+2      	; 0x3006 <check_database_integrity+0x38>
    3004:	5a c0       	rjmp	.+180    	; 0x30ba <check_database_integrity+0xec>
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9f 8f       	std	Y+31, r25	; 0x1f
    300c:	8e 8f       	std	Y+30, r24	; 0x1e
    300e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3012:	82 e2       	ldi	r24, 0x22	; 34
    3014:	94 e0       	ldi	r25, 0x04	; 4
    3016:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    301a:	2f e7       	ldi	r18, 0x7F	; 127
    301c:	4a e1       	ldi	r20, 0x1A	; 26
    301e:	86 e0       	ldi	r24, 0x06	; 6
    3020:	21 50       	subi	r18, 0x01	; 1
    3022:	40 40       	sbci	r20, 0x00	; 0
    3024:	80 40       	sbci	r24, 0x00	; 0
    3026:	e1 f7       	brne	.-8      	; 0x3020 <check_database_integrity+0x52>
    3028:	00 c0       	rjmp	.+0      	; 0x302a <check_database_integrity+0x5c>
    302a:	00 00       	nop
    302c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3030:	86 e3       	ldi	r24, 0x36	; 54
    3032:	94 e0       	ldi	r25, 0x04	; 4
    3034:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3038:	9f e9       	ldi	r25, 0x9F	; 159
    303a:	26 e8       	ldi	r18, 0x86	; 134
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	91 50       	subi	r25, 0x01	; 1
    3040:	20 40       	sbci	r18, 0x00	; 0
    3042:	40 40       	sbci	r20, 0x00	; 0
    3044:	e1 f7       	brne	.-8      	; 0x303e <check_database_integrity+0x70>
    3046:	00 c0       	rjmp	.+0      	; 0x3048 <check_database_integrity+0x7a>
    3048:	00 00       	nop
    304a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    304e:	8c e4       	ldi	r24, 0x4C	; 76
    3050:	94 e0       	ldi	r25, 0x04	; 4
    3052:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3056:	63 e0       	ldi	r22, 0x03	; 3
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	c8 01       	movw	r24, r16
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <string_write_int>
    3062:	86 e5       	ldi	r24, 0x56	; 86
    3064:	94 e0       	ldi	r25, 0x04	; 4
    3066:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    306a:	87 e2       	ldi	r24, 0x27	; 39
    306c:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    3070:	f6 01       	movw	r30, r12
    3072:	ee 0d       	add	r30, r14
    3074:	ff 1d       	adc	r31, r15
    3076:	80 81       	ld	r24, Z
    3078:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    307c:	87 e2       	ldi	r24, 0x27	; 39
    307e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    3082:	8a e0       	ldi	r24, 0x0A	; 10
    3084:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    3088:	8f e7       	ldi	r24, 0x7F	; 127
    308a:	9a e1       	ldi	r25, 0x1A	; 26
    308c:	26 e0       	ldi	r18, 0x06	; 6
    308e:	81 50       	subi	r24, 0x01	; 1
    3090:	90 40       	sbci	r25, 0x00	; 0
    3092:	20 40       	sbci	r18, 0x00	; 0
    3094:	e1 f7       	brne	.-8      	; 0x308e <check_database_integrity+0xc0>
    3096:	00 c0       	rjmp	.+0      	; 0x3098 <check_database_integrity+0xca>
    3098:	00 00       	nop
    309a:	b8 01       	movw	r22, r16
    309c:	ce 01       	movw	r24, r28
    309e:	0e 94 96 11 	call	0x232c	; 0x232c <print_callsign>
    30a2:	4f ef       	ldi	r20, 0xFF	; 255
    30a4:	84 e3       	ldi	r24, 0x34	; 52
    30a6:	9c e0       	ldi	r25, 0x0C	; 12
    30a8:	41 50       	subi	r20, 0x01	; 1
    30aa:	80 40       	sbci	r24, 0x00	; 0
    30ac:	90 40       	sbci	r25, 0x00	; 0
    30ae:	e1 f7       	brne	.-8      	; 0x30a8 <check_database_integrity+0xda>
    30b0:	00 c0       	rjmp	.+0      	; 0x30b2 <check_database_integrity+0xe4>
    30b2:	00 00       	nop
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	13 c0       	rjmp	.+38     	; 0x30e0 <check_database_integrity+0x112>
    30ba:	4f ef       	ldi	r20, 0xFF	; 255
    30bc:	e4 1a       	sub	r14, r20
    30be:	f4 0a       	sbc	r15, r20
    30c0:	48 e0       	ldi	r20, 0x08	; 8
    30c2:	e4 16       	cp	r14, r20
    30c4:	f1 04       	cpc	r15, r1
    30c6:	09 f0       	breq	.+2      	; 0x30ca <check_database_integrity+0xfc>
    30c8:	99 cf       	rjmp	.-206    	; 0x2ffc <check_database_integrity+0x2e>
    30ca:	0f 5f       	subi	r16, 0xFF	; 255
    30cc:	1f 4f       	sbci	r17, 0xFF	; 255
    30ce:	4c 96       	adiw	r24, 0x1c	; 28
    30d0:	02 17       	cp	r16, r18
    30d2:	13 07       	cpc	r17, r19
    30d4:	0c f4       	brge	.+2      	; 0x30d8 <check_database_integrity+0x10a>
    30d6:	8b cf       	rjmp	.-234    	; 0x2fee <check_database_integrity+0x20>
    30d8:	1f 8e       	std	Y+31, r1	; 0x1f
    30da:	1e 8e       	std	Y+30, r1	; 0x1e
    30dc:	21 e0       	ldi	r18, 0x01	; 1
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	c9 01       	movw	r24, r18
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	ff 90       	pop	r15
    30ec:	ef 90       	pop	r14
    30ee:	df 90       	pop	r13
    30f0:	cf 90       	pop	r12
    30f2:	08 95       	ret

000030f4 <main>:
    30f4:	2f 92       	push	r2
    30f6:	3f 92       	push	r3
    30f8:	4f 92       	push	r4
    30fa:	5f 92       	push	r5
    30fc:	6f 92       	push	r6
    30fe:	7f 92       	push	r7
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	00 d0       	rcall	.+0      	; 0x311a <main+0x26>
    311a:	1f 92       	push	r1
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	8b e0       	ldi	r24, 0x0B	; 11
    3122:	91 e0       	ldi	r25, 0x01	; 1
    3124:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
    3128:	90 93 5f 04 	sts	0x045F, r25
    312c:	80 93 5e 04 	sts	0x045E, r24
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	39 f4       	brne	.+14     	; 0x3142 <main+0x4e>
    3134:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3138:	8f e2       	ldi	r24, 0x2F	; 47
    313a:	91 e0       	ldi	r25, 0x01	; 1
    313c:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3140:	ff c2       	rjmp	.+1534   	; 0x3740 <main+0x64c>
    3142:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <prepare_device>
    3146:	89 2b       	or	r24, r25
    3148:	09 f4       	brne	.+2      	; 0x314c <main+0x58>
    314a:	fa c2       	rjmp	.+1524   	; 0x3740 <main+0x64c>
    314c:	89 e5       	ldi	r24, 0x59	; 89
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
    3154:	8a 83       	std	Y+2, r24	; 0x02
    3156:	9b 83       	std	Y+3, r25	; 0x03
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	9b 81       	ldd	r25, Y+3	; 0x03
    315c:	89 2b       	or	r24, r25
    315e:	51 f3       	breq	.-44     	; 0x3134 <main+0x40>
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	a0 e8       	ldi	r26, 0x80	; 128
    3166:	bf eb       	ldi	r27, 0xBF	; 191
    3168:	ea 81       	ldd	r30, Y+2	; 0x02
    316a:	fb 81       	ldd	r31, Y+3	; 0x03
    316c:	85 ab       	std	Z+53, r24	; 0x35
    316e:	96 ab       	std	Z+54, r25	; 0x36
    3170:	a7 ab       	std	Z+55, r26	; 0x37
    3172:	b0 af       	std	Z+56, r27	; 0x38
    3174:	ef 5b       	subi	r30, 0xBF	; 191
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
    3180:	ea 81       	ldd	r30, Y+2	; 0x02
    3182:	fb 81       	ldd	r31, Y+3	; 0x03
    3184:	e3 5b       	subi	r30, 0xB3	; 179
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	2f ef       	ldi	r18, 0xFF	; 255
    318a:	20 83       	st	Z, r18
    318c:	ea 81       	ldd	r30, Y+2	; 0x02
    318e:	fb 81       	ldd	r31, Y+3	; 0x03
    3190:	e2 5b       	subi	r30, 0xB2	; 178
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	20 83       	st	Z, r18
    3196:	ea 81       	ldd	r30, Y+2	; 0x02
    3198:	fb 81       	ldd	r31, Y+3	; 0x03
    319a:	e1 5b       	subi	r30, 0xB1	; 177
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	20 83       	st	Z, r18
    31a0:	ea 81       	ldd	r30, Y+2	; 0x02
    31a2:	fb 81       	ldd	r31, Y+3	; 0x03
    31a4:	81 af       	std	Z+57, r24	; 0x39
    31a6:	92 af       	std	Z+58, r25	; 0x3a
    31a8:	a3 af       	std	Z+59, r26	; 0x3b
    31aa:	b4 af       	std	Z+60, r27	; 0x3c
    31ac:	eb 5b       	subi	r30, 0xBB	; 187
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 83       	st	Z, r24
    31b2:	91 83       	std	Z+1, r25	; 0x01
    31b4:	a2 83       	std	Z+2, r26	; 0x02
    31b6:	b3 83       	std	Z+3, r27	; 0x03
    31b8:	ea 81       	ldd	r30, Y+2	; 0x02
    31ba:	fb 81       	ldd	r31, Y+3	; 0x03
    31bc:	e0 5b       	subi	r30, 0xB0	; 176
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	20 83       	st	Z, r18
    31c2:	ea 81       	ldd	r30, Y+2	; 0x02
    31c4:	fb 81       	ldd	r31, Y+3	; 0x03
    31c6:	ef 5a       	subi	r30, 0xAF	; 175
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	20 83       	st	Z, r18
    31cc:	ea 81       	ldd	r30, Y+2	; 0x02
    31ce:	fb 81       	ldd	r31, Y+3	; 0x03
    31d0:	ee 5a       	subi	r30, 0xAE	; 174
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	20 83       	st	Z, r18
    31d6:	ea 81       	ldd	r30, Y+2	; 0x02
    31d8:	fb 81       	ldd	r31, Y+3	; 0x03
    31da:	fd 96       	adiw	r30, 0x3d	; 61
    31dc:	80 83       	st	Z, r24
    31de:	91 83       	std	Z+1, r25	; 0x01
    31e0:	a2 83       	std	Z+2, r26	; 0x02
    31e2:	b3 83       	std	Z+3, r27	; 0x03
    31e4:	ea 81       	ldd	r30, Y+2	; 0x02
    31e6:	fb 81       	ldd	r31, Y+3	; 0x03
    31e8:	e7 5b       	subi	r30, 0xB7	; 183
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 83       	st	Z, r24
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	a2 83       	std	Z+2, r26	; 0x02
    31f2:	b3 83       	std	Z+3, r27	; 0x03
    31f4:	ea 81       	ldd	r30, Y+2	; 0x02
    31f6:	fb 81       	ldd	r31, Y+3	; 0x03
    31f8:	ed 5a       	subi	r30, 0xAD	; 173
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	20 83       	st	Z, r18
    31fe:	ea 81       	ldd	r30, Y+2	; 0x02
    3200:	fb 81       	ldd	r31, Y+3	; 0x03
    3202:	ec 5a       	subi	r30, 0xAC	; 172
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	20 83       	st	Z, r18
    3208:	ea 81       	ldd	r30, Y+2	; 0x02
    320a:	fb 81       	ldd	r31, Y+3	; 0x03
    320c:	eb 5a       	subi	r30, 0xAB	; 171
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	20 83       	st	Z, r18
    3212:	84 e1       	ldi	r24, 0x14	; 20
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 a4 20 	call	0x4148	; 0x4148 <malloc>
    321a:	8c 01       	movw	r16, r24
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	09 f4       	brne	.+2      	; 0x3222 <main+0x12e>
    3220:	89 cf       	rjmp	.-238    	; 0x3134 <main+0x40>
    3222:	8a e3       	ldi	r24, 0x3A	; 58
    3224:	91 e0       	ldi	r25, 0x01	; 1
    3226:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    322a:	c8 01       	movw	r24, r16
    322c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <database_load>
    3230:	ff e3       	ldi	r31, 0x3F	; 63
    3232:	2d e0       	ldi	r18, 0x0D	; 13
    3234:	83 e0       	ldi	r24, 0x03	; 3
    3236:	f1 50       	subi	r31, 0x01	; 1
    3238:	20 40       	sbci	r18, 0x00	; 0
    323a:	80 40       	sbci	r24, 0x00	; 0
    323c:	e1 f7       	brne	.-8      	; 0x3236 <main+0x142>
    323e:	00 c0       	rjmp	.+0      	; 0x3240 <main+0x14c>
    3240:	00 00       	nop
    3242:	e0 91 5e 04 	lds	r30, 0x045E
    3246:	f0 91 5f 04 	lds	r31, 0x045F
    324a:	e7 5f       	subi	r30, 0xF7	; 247
    324c:	fe 4f       	sbci	r31, 0xFE	; 254
    324e:	11 82       	std	Z+1, r1	; 0x01
    3250:	10 82       	st	Z, r1
    3252:	2a 80       	ldd	r2, Y+2	; 0x02
    3254:	3b 80       	ldd	r3, Y+3	; 0x03
    3256:	96 e5       	ldi	r25, 0x56	; 86
    3258:	29 0e       	add	r2, r25
    325a:	31 1c       	adc	r3, r1
    325c:	4a 80       	ldd	r4, Y+2	; 0x02
    325e:	5b 80       	ldd	r5, Y+3	; 0x03
    3260:	a7 e5       	ldi	r26, 0x57	; 87
    3262:	4a 0e       	add	r4, r26
    3264:	51 1c       	adc	r5, r1
    3266:	6a 80       	ldd	r6, Y+2	; 0x02
    3268:	7b 80       	ldd	r7, Y+3	; 0x03
    326a:	b8 e5       	ldi	r27, 0x58	; 88
    326c:	6b 0e       	add	r6, r27
    326e:	71 1c       	adc	r7, r1
    3270:	93 e0       	ldi	r25, 0x03	; 3
    3272:	a9 2e       	mov	r10, r25
    3274:	b1 2c       	mov	r11, r1
    3276:	26 e0       	ldi	r18, 0x06	; 6
    3278:	c2 2e       	mov	r12, r18
    327a:	d1 2c       	mov	r13, r1
    327c:	8a 80       	ldd	r8, Y+2	; 0x02
    327e:	9b 80       	ldd	r9, Y+3	; 0x03
    3280:	e8 e0       	ldi	r30, 0x08	; 8
    3282:	8e 0e       	add	r8, r30
    3284:	91 1c       	adc	r9, r1
    3286:	80 91 5e 04 	lds	r24, 0x045E
    328a:	90 91 5f 04 	lds	r25, 0x045F
    328e:	dc 01       	movw	r26, r24
    3290:	18 96       	adiw	r26, 0x08	; 8
    3292:	2d 91       	ld	r18, X+
    3294:	3c 91       	ld	r19, X
    3296:	19 97       	sbiw	r26, 0x09	; 9
    3298:	1b 96       	adiw	r26, 0x0b	; 11
    329a:	3c 93       	st	X, r19
    329c:	2e 93       	st	-X, r18
    329e:	1a 97       	sbiw	r26, 0x0a	; 10
    32a0:	fc 01       	movw	r30, r24
    32a2:	e7 5f       	subi	r30, 0xF7	; 247
    32a4:	fe 4f       	sbci	r31, 0xFE	; 254
    32a6:	20 81       	ld	r18, Z
    32a8:	31 81       	ldd	r19, Z+1	; 0x01
    32aa:	23 2b       	or	r18, r19
    32ac:	11 f4       	brne	.+4      	; 0x32b2 <main+0x1be>
    32ae:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <sync_leds>
    32b2:	80 91 5e 04 	lds	r24, 0x045E
    32b6:	90 91 5f 04 	lds	r25, 0x045F
    32ba:	fc 01       	movw	r30, r24
    32bc:	20 85       	ldd	r18, Z+8	; 0x08
    32be:	31 85       	ldd	r19, Z+9	; 0x09
    32c0:	23 30       	cpi	r18, 0x03	; 3
    32c2:	31 05       	cpc	r19, r1
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <main+0x1d4>
    32c6:	e6 c0       	rjmp	.+460    	; 0x3494 <main+0x3a0>
    32c8:	4c f4       	brge	.+18     	; 0x32dc <main+0x1e8>
    32ca:	21 30       	cpi	r18, 0x01	; 1
    32cc:	31 05       	cpc	r19, r1
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <main+0x1de>
    32d0:	76 c0       	rjmp	.+236    	; 0x33be <main+0x2ca>
    32d2:	0c f0       	brlt	.+2      	; 0x32d6 <main+0x1e2>
    32d4:	c8 c0       	rjmp	.+400    	; 0x3466 <main+0x372>
    32d6:	23 2b       	or	r18, r19
    32d8:	79 f0       	breq	.+30     	; 0x32f8 <main+0x204>
    32da:	d5 cf       	rjmp	.-86     	; 0x3286 <main+0x192>
    32dc:	25 30       	cpi	r18, 0x05	; 5
    32de:	31 05       	cpc	r19, r1
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <main+0x1f0>
    32e2:	4c c1       	rjmp	.+664    	; 0x357c <main+0x488>
    32e4:	0c f4       	brge	.+2      	; 0x32e8 <main+0x1f4>
    32e6:	fe c0       	rjmp	.+508    	; 0x34e4 <main+0x3f0>
    32e8:	26 30       	cpi	r18, 0x06	; 6
    32ea:	31 05       	cpc	r19, r1
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <main+0x1fc>
    32ee:	63 c1       	rjmp	.+710    	; 0x35b6 <main+0x4c2>
    32f0:	27 30       	cpi	r18, 0x07	; 7
    32f2:	31 05       	cpc	r19, r1
    32f4:	41 f6       	brne	.-112    	; 0x3286 <main+0x192>
    32f6:	62 c1       	rjmp	.+708    	; 0x35bc <main+0x4c8>
    32f8:	d8 01       	movw	r26, r16
    32fa:	12 96       	adiw	r26, 0x02	; 2
    32fc:	2d 91       	ld	r18, X+
    32fe:	3c 91       	ld	r19, X
    3300:	13 97       	sbiw	r26, 0x03	; 3
    3302:	12 16       	cp	r1, r18
    3304:	13 06       	cpc	r1, r19
    3306:	14 f0       	brlt	.+4      	; 0x330c <main+0x218>
    3308:	fc 01       	movw	r30, r24
    330a:	d3 c1       	rjmp	.+934    	; 0x36b2 <main+0x5be>
    330c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <enable_gps>
    3310:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3314:	8e e4       	ldi	r24, 0x4E	; 78
    3316:	91 e0       	ldi	r25, 0x01	; 1
    3318:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    331c:	83 e2       	ldi	r24, 0x23	; 35
    331e:	94 ef       	ldi	r25, 0xF4	; 244
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <main+0x22c>
    3324:	00 c0       	rjmp	.+0      	; 0x3326 <main+0x232>
    3326:	00 00       	nop
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	9b 81       	ldd	r25, Y+3	; 0x03
    332c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <gps_locked>
    3330:	89 2b       	or	r24, r25
    3332:	91 f0       	breq	.+36     	; 0x3358 <main+0x264>
    3334:	89 e5       	ldi	r24, 0x59	; 89
    3336:	91 e0       	ldi	r25, 0x01	; 1
    3338:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    333c:	68 e0       	ldi	r22, 0x08	; 8
    333e:	70 e0       	ldi	r23, 0x00	; 0
    3340:	c4 01       	movw	r24, r8
    3342:	0e 94 81 05 	call	0xb02	; 0xb02 <string_write_numchars>
    3346:	9f ee       	ldi	r25, 0xEF	; 239
    3348:	a9 e4       	ldi	r26, 0x49	; 73
    334a:	b2 e0       	ldi	r27, 0x02	; 2
    334c:	91 50       	subi	r25, 0x01	; 1
    334e:	a0 40       	sbci	r26, 0x00	; 0
    3350:	b0 40       	sbci	r27, 0x00	; 0
    3352:	e1 f7       	brne	.-8      	; 0x334c <main+0x258>
    3354:	00 c0       	rjmp	.+0      	; 0x3356 <main+0x262>
    3356:	00 00       	nop
    3358:	80 91 5e 04 	lds	r24, 0x045E
    335c:	90 91 5f 04 	lds	r25, 0x045F
    3360:	fc 01       	movw	r30, r24
    3362:	40 85       	ldd	r20, Z+8	; 0x08
    3364:	51 85       	ldd	r21, Z+9	; 0x09
    3366:	22 85       	ldd	r18, Z+10	; 0x0a
    3368:	33 85       	ldd	r19, Z+11	; 0x0b
    336a:	42 17       	cp	r20, r18
    336c:	53 07       	cpc	r21, r19
    336e:	09 f0       	breq	.+2      	; 0x3372 <main+0x27e>
    3370:	8a cf       	rjmp	.-236    	; 0x3286 <main+0x192>
    3372:	6a 81       	ldd	r22, Y+2	; 0x02
    3374:	7b 81       	ldd	r23, Y+3	; 0x03
    3376:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_gps_data>
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	9b 81       	ldd	r25, Y+3	; 0x03
    337e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <gps_locked>
    3382:	89 2b       	or	r24, r25
    3384:	51 f0       	breq	.+20     	; 0x339a <main+0x2a6>
    3386:	4a 81       	ldd	r20, Y+2	; 0x02
    3388:	5b 81       	ldd	r21, Y+3	; 0x03
    338a:	b8 01       	movw	r22, r16
    338c:	80 91 5e 04 	lds	r24, 0x045E
    3390:	90 91 5f 04 	lds	r25, 0x045F
    3394:	0e 94 13 13 	call	0x2626	; 0x2626 <show_nearest_station>
    3398:	76 cf       	rjmp	.-276    	; 0x3286 <main+0x192>
    339a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    339e:	8f e5       	ldi	r24, 0x5F	; 95
    33a0:	91 e0       	ldi	r25, 0x01	; 1
    33a2:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    33a6:	8e e6       	ldi	r24, 0x6E	; 110
    33a8:	91 e0       	ldi	r25, 0x01	; 1
    33aa:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    33ae:	ff e7       	ldi	r31, 0x7F	; 127
    33b0:	2a e1       	ldi	r18, 0x1A	; 26
    33b2:	86 e0       	ldi	r24, 0x06	; 6
    33b4:	f1 50       	subi	r31, 0x01	; 1
    33b6:	20 40       	sbci	r18, 0x00	; 0
    33b8:	80 40       	sbci	r24, 0x00	; 0
    33ba:	e1 f7       	brne	.-8      	; 0x33b4 <main+0x2c0>
    33bc:	8a c1       	rjmp	.+788    	; 0x36d2 <main+0x5de>
    33be:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    33c2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <enable_gps>
    33c6:	6a 81       	ldd	r22, Y+2	; 0x02
    33c8:	7b 81       	ldd	r23, Y+3	; 0x03
    33ca:	80 91 5e 04 	lds	r24, 0x045E
    33ce:	90 91 5f 04 	lds	r25, 0x045F
    33d2:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_gps_data>
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	9b 81       	ldd	r25, Y+3	; 0x03
    33da:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <gps_locked>
    33de:	89 2b       	or	r24, r25
    33e0:	81 f1       	breq	.+96     	; 0x3442 <main+0x34e>
    33e2:	8c e7       	ldi	r24, 0x7C	; 124
    33e4:	91 e0       	ldi	r25, 0x01	; 1
    33e6:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    33ea:	aa 81       	ldd	r26, Y+2	; 0x02
    33ec:	bb 81       	ldd	r27, Y+3	; 0x03
    33ee:	51 96       	adiw	r26, 0x11	; 17
    33f0:	6d 91       	ld	r22, X+
    33f2:	7d 91       	ld	r23, X+
    33f4:	8d 91       	ld	r24, X+
    33f6:	9c 91       	ld	r25, X
    33f8:	54 97       	sbiw	r26, 0x14	; 20
    33fa:	43 e0       	ldi	r20, 0x03	; 3
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    3402:	87 ed       	ldi	r24, 0xD7	; 215
    3404:	92 e0       	ldi	r25, 0x02	; 2
    3406:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    340a:	ea 81       	ldd	r30, Y+2	; 0x02
    340c:	fb 81       	ldd	r31, Y+3	; 0x03
    340e:	65 89       	ldd	r22, Z+21	; 0x15
    3410:	76 89       	ldd	r23, Z+22	; 0x16
    3412:	87 89       	ldd	r24, Z+23	; 0x17
    3414:	90 8d       	ldd	r25, Z+24	; 0x18
    3416:	43 e0       	ldi	r20, 0x03	; 3
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    341e:	ff e7       	ldi	r31, 0x7F	; 127
    3420:	2a e1       	ldi	r18, 0x1A	; 26
    3422:	86 e0       	ldi	r24, 0x06	; 6
    3424:	f1 50       	subi	r31, 0x01	; 1
    3426:	20 40       	sbci	r18, 0x00	; 0
    3428:	80 40       	sbci	r24, 0x00	; 0
    342a:	e1 f7       	brne	.-8      	; 0x3424 <main+0x330>
    342c:	00 c0       	rjmp	.+0      	; 0x342e <main+0x33a>
    342e:	00 00       	nop
    3430:	6a 81       	ldd	r22, Y+2	; 0x02
    3432:	7b 81       	ldd	r23, Y+3	; 0x03
    3434:	80 91 5e 04 	lds	r24, 0x045E
    3438:	90 91 5f 04 	lds	r25, 0x045F
    343c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <print_gps_data_concise>
    3440:	22 cf       	rjmp	.-444    	; 0x3286 <main+0x192>
    3442:	8f e5       	ldi	r24, 0x5F	; 95
    3444:	91 e0       	ldi	r25, 0x01	; 1
    3446:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    344a:	8e e6       	ldi	r24, 0x6E	; 110
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3452:	9f e7       	ldi	r25, 0x7F	; 127
    3454:	aa e1       	ldi	r26, 0x1A	; 26
    3456:	b6 e0       	ldi	r27, 0x06	; 6
    3458:	91 50       	subi	r25, 0x01	; 1
    345a:	a0 40       	sbci	r26, 0x00	; 0
    345c:	b0 40       	sbci	r27, 0x00	; 0
    345e:	e1 f7       	brne	.-8      	; 0x3458 <main+0x364>
    3460:	00 c0       	rjmp	.+0      	; 0x3462 <main+0x36e>
    3462:	00 00       	nop
    3464:	38 c0       	rjmp	.+112    	; 0x34d6 <main+0x3e2>
    3466:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    346a:	86 e8       	ldi	r24, 0x86	; 134
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3472:	ef e7       	ldi	r30, 0x7F	; 127
    3474:	fa e1       	ldi	r31, 0x1A	; 26
    3476:	26 e0       	ldi	r18, 0x06	; 6
    3478:	e1 50       	subi	r30, 0x01	; 1
    347a:	f0 40       	sbci	r31, 0x00	; 0
    347c:	20 40       	sbci	r18, 0x00	; 0
    347e:	e1 f7       	brne	.-8      	; 0x3478 <main+0x384>
    3480:	00 c0       	rjmp	.+0      	; 0x3482 <main+0x38e>
    3482:	00 00       	nop
    3484:	b8 01       	movw	r22, r16
    3486:	80 91 5e 04 	lds	r24, 0x045E
    348a:	90 91 5f 04 	lds	r25, 0x045F
    348e:	0e 94 ca 14 	call	0x2994	; 0x2994 <print_all_known_stations>
    3492:	f9 ce       	rjmp	.-526    	; 0x3286 <main+0x192>
    3494:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3498:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <enable_gps>
    349c:	6a 81       	ldd	r22, Y+2	; 0x02
    349e:	7b 81       	ldd	r23, Y+3	; 0x03
    34a0:	80 91 5e 04 	lds	r24, 0x045E
    34a4:	90 91 5f 04 	lds	r25, 0x045F
    34a8:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_gps_data>
    34ac:	8b e9       	ldi	r24, 0x9B	; 155
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    34b4:	8f e9       	ldi	r24, 0x9F	; 159
    34b6:	96 e8       	ldi	r25, 0x86	; 134
    34b8:	a1 e0       	ldi	r26, 0x01	; 1
    34ba:	81 50       	subi	r24, 0x01	; 1
    34bc:	90 40       	sbci	r25, 0x00	; 0
    34be:	a0 40       	sbci	r26, 0x00	; 0
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <main+0x3c6>
    34c2:	00 c0       	rjmp	.+0      	; 0x34c4 <main+0x3d0>
    34c4:	00 00       	nop
    34c6:	6a 81       	ldd	r22, Y+2	; 0x02
    34c8:	7b 81       	ldd	r23, Y+3	; 0x03
    34ca:	80 91 5e 04 	lds	r24, 0x045E
    34ce:	90 91 5f 04 	lds	r25, 0x045F
    34d2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <print_gps_data>
    34d6:	80 91 5e 04 	lds	r24, 0x045E
    34da:	90 91 5f 04 	lds	r25, 0x045F
    34de:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <print_raw_gps_data>
    34e2:	d1 ce       	rjmp	.-606    	; 0x3286 <main+0x192>
    34e4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    34e8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <enable_gps>
    34ec:	6a 81       	ldd	r22, Y+2	; 0x02
    34ee:	7b 81       	ldd	r23, Y+3	; 0x03
    34f0:	80 91 5e 04 	lds	r24, 0x045E
    34f4:	90 91 5f 04 	lds	r25, 0x045F
    34f8:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_gps_data>
    34fc:	83 ea       	ldi	r24, 0xA3	; 163
    34fe:	91 e0       	ldi	r25, 0x01	; 1
    3500:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3504:	e3 e2       	ldi	r30, 0x23	; 35
    3506:	f4 ef       	ldi	r31, 0xF4	; 244
    3508:	31 97       	sbiw	r30, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <main+0x414>
    350c:	00 c0       	rjmp	.+0      	; 0x350e <main+0x41a>
    350e:	00 00       	nop
    3510:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3514:	8b ea       	ldi	r24, 0xAB	; 171
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    351c:	aa 81       	ldd	r26, Y+2	; 0x02
    351e:	bb 81       	ldd	r27, Y+3	; 0x03
    3520:	5d 96       	adiw	r26, 0x1d	; 29
    3522:	6d 91       	ld	r22, X+
    3524:	7d 91       	ld	r23, X+
    3526:	8d 91       	ld	r24, X+
    3528:	9c 91       	ld	r25, X
    352a:	90 97       	sbiw	r26, 0x20	; 32
    352c:	41 e0       	ldi	r20, 0x01	; 1
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    3534:	8f ed       	ldi	r24, 0xDF	; 223
    3536:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    353a:	8c ef       	ldi	r24, 0xFC	; 252
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3542:	f1 01       	movw	r30, r2
    3544:	80 81       	ld	r24, Z
    3546:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    354a:	d2 01       	movw	r26, r4
    354c:	8c 91       	ld	r24, X
    354e:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    3552:	f3 01       	movw	r30, r6
    3554:	80 81       	ld	r24, Z
    3556:	0e 94 75 04 	call	0x8ea	; 0x8ea <char_write>
    355a:	81 eb       	ldi	r24, 0xB1	; 177
    355c:	91 e0       	ldi	r25, 0x01	; 1
    355e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3562:	aa 81       	ldd	r26, Y+2	; 0x02
    3564:	bb 81       	ldd	r27, Y+3	; 0x03
    3566:	59 96       	adiw	r26, 0x19	; 25
    3568:	6d 91       	ld	r22, X+
    356a:	7d 91       	ld	r23, X+
    356c:	8d 91       	ld	r24, X+
    356e:	9c 91       	ld	r25, X
    3570:	5c 97       	sbiw	r26, 0x1c	; 28
    3572:	41 e0       	ldi	r20, 0x01	; 1
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	0e 94 03 05 	call	0xa06	; 0xa06 <string_write_float>
    357a:	a4 c0       	rjmp	.+328    	; 0x36c4 <main+0x5d0>
    357c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    3580:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <enable_gps>
    3584:	6a 81       	ldd	r22, Y+2	; 0x02
    3586:	7b 81       	ldd	r23, Y+3	; 0x03
    3588:	80 91 5e 04 	lds	r24, 0x045E
    358c:	90 91 5f 04 	lds	r25, 0x045F
    3590:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_gps_data>
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	9b 81       	ldd	r25, Y+3	; 0x03
    3598:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <gps_locked>
    359c:	89 2b       	or	r24, r25
    359e:	09 f4       	brne	.+2      	; 0x35a2 <main+0x4ae>
    35a0:	fc ce       	rjmp	.-520    	; 0x339a <main+0x2a6>
    35a2:	4a 81       	ldd	r20, Y+2	; 0x02
    35a4:	5b 81       	ldd	r21, Y+3	; 0x03
    35a6:	b8 01       	movw	r22, r16
    35a8:	80 91 5e 04 	lds	r24, 0x045E
    35ac:	90 91 5f 04 	lds	r25, 0x045F
    35b0:	0e 94 22 12 	call	0x2444	; 0x2444 <list_nearest_stations>
    35b4:	68 ce       	rjmp	.-816    	; 0x3286 <main+0x192>
    35b6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <wait_for_update>
    35ba:	65 ce       	rjmp	.-822    	; 0x3286 <main+0x192>
    35bc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <disable_gps>
    35c0:	e0 91 5e 04 	lds	r30, 0x045E
    35c4:	f0 91 5f 04 	lds	r31, 0x045F
    35c8:	df 01       	movw	r26, r30
    35ca:	a7 5f       	subi	r26, 0xF7	; 247
    35cc:	be 4f       	sbci	r27, 0xFE	; 254
    35ce:	ee 24       	eor	r14, r14
    35d0:	e3 94       	inc	r14
    35d2:	f1 2c       	mov	r15, r1
    35d4:	11 96       	adiw	r26, 0x01	; 1
    35d6:	fc 92       	st	X, r15
    35d8:	ee 92       	st	-X, r14
    35da:	df 01       	movw	r26, r30
    35dc:	ad 5f       	subi	r26, 0xFD	; 253
    35de:	be 4f       	sbci	r27, 0xFE	; 254
    35e0:	11 96       	adiw	r26, 0x01	; 1
    35e2:	1c 92       	st	X, r1
    35e4:	1e 92       	st	-X, r1
    35e6:	df 01       	movw	r26, r30
    35e8:	ab 5f       	subi	r26, 0xFB	; 251
    35ea:	be 4f       	sbci	r27, 0xFE	; 254
    35ec:	11 96       	adiw	r26, 0x01	; 1
    35ee:	fc 92       	st	X, r15
    35f0:	ee 92       	st	-X, r14
    35f2:	df 01       	movw	r26, r30
    35f4:	a9 5f       	subi	r26, 0xF9	; 249
    35f6:	be 4f       	sbci	r27, 0xFE	; 254
    35f8:	11 96       	adiw	r26, 0x01	; 1
    35fa:	bc 92       	st	X, r11
    35fc:	ae 92       	st	-X, r10
    35fe:	84 81       	ldd	r24, Z+4	; 0x04
    3600:	95 81       	ldd	r25, Z+5	; 0x05
    3602:	89 2b       	or	r24, r25
    3604:	b1 f4       	brne	.+44     	; 0x3632 <main+0x53e>
    3606:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    360a:	8a eb       	ldi	r24, 0xBA	; 186
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    3612:	e0 91 5e 04 	lds	r30, 0x045E
    3616:	f0 91 5f 04 	lds	r31, 0x045F
    361a:	f5 82       	std	Z+5, r15	; 0x05
    361c:	e4 82       	std	Z+4, r14	; 0x04
    361e:	d8 01       	movw	r26, r16
    3620:	53 96       	adiw	r26, 0x13	; 19
    3622:	1c 92       	st	X, r1
    3624:	1e 92       	st	-X, r1
    3626:	52 97       	sbiw	r26, 0x12	; 18
    3628:	17 82       	std	Z+7, r1	; 0x07
    362a:	16 82       	std	Z+6, r1	; 0x06
    362c:	c8 01       	movw	r24, r16
    362e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <database_free>
    3632:	e0 90 5e 04 	lds	r14, 0x045E
    3636:	f0 90 5f 04 	lds	r15, 0x045F
    363a:	f7 01       	movw	r30, r14
    363c:	e2 57       	subi	r30, 0x72	; 114
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	90 81       	ld	r25, Z
    3642:	f7 01       	movw	r30, r14
    3644:	e1 57       	subi	r30, 0x71	; 113
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	98 17       	cp	r25, r24
    364c:	09 f4       	brne	.+2      	; 0x3650 <main+0x55c>
    364e:	52 c0       	rjmp	.+164    	; 0x36f4 <main+0x600>
    3650:	f7 01       	movw	r30, r14
    3652:	10 82       	st	Z, r1
    3654:	11 82       	std	Z+1, r1	; 0x01
    3656:	12 82       	std	Z+2, r1	; 0x02
    3658:	13 82       	std	Z+3, r1	; 0x03
    365a:	c7 01       	movw	r24, r14
    365c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <getChar>
    3660:	68 2f       	mov	r22, r24
    3662:	80 91 5e 04 	lds	r24, 0x045E
    3666:	90 91 5f 04 	lds	r25, 0x045F
    366a:	69 83       	std	Y+1, r22	; 0x01
    366c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <detectSerialEnd>
    3670:	e0 91 5e 04 	lds	r30, 0x045E
    3674:	f0 91 5f 04 	lds	r31, 0x045F
    3678:	69 81       	ldd	r22, Y+1	; 0x01
    367a:	89 2b       	or	r24, r25
    367c:	69 f1       	breq	.+90     	; 0x36d8 <main+0x5e4>
    367e:	40 e0       	ldi	r20, 0x00	; 0
    3680:	50 e0       	ldi	r21, 0x00	; 0
    3682:	b8 01       	movw	r22, r16
    3684:	cf 01       	movw	r24, r30
    3686:	0e 94 96 10 	call	0x212c	; 0x212c <terminate_serial>
    368a:	c8 01       	movw	r24, r16
    368c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <check_database_integrity>
    3690:	d8 01       	movw	r26, r16
    3692:	52 96       	adiw	r26, 0x12	; 18
    3694:	8d 91       	ld	r24, X+
    3696:	9c 91       	ld	r25, X
    3698:	53 97       	sbiw	r26, 0x13	; 19
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	69 f4       	brne	.+26     	; 0x36b8 <main+0x5c4>
    369e:	80 91 5e 04 	lds	r24, 0x045E
    36a2:	90 91 5f 04 	lds	r25, 0x045F
    36a6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <wipe_eeprom>
    36aa:	e0 91 5e 04 	lds	r30, 0x045E
    36ae:	f0 91 5f 04 	lds	r31, 0x045F
    36b2:	d1 86       	std	Z+9, r13	; 0x09
    36b4:	c0 86       	std	Z+8, r12	; 0x08
    36b6:	e7 cd       	rjmp	.-1074   	; 0x3286 <main+0x192>
    36b8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <lcd_init>
    36bc:	83 ed       	ldi	r24, 0xD3	; 211
    36be:	91 e0       	ldi	r25, 0x01	; 1
    36c0:	0e 94 a9 04 	call	0x952	; 0x952 <string_write>
    36c4:	bf e3       	ldi	r27, 0x3F	; 63
    36c6:	ed e0       	ldi	r30, 0x0D	; 13
    36c8:	f3 e0       	ldi	r31, 0x03	; 3
    36ca:	b1 50       	subi	r27, 0x01	; 1
    36cc:	e0 40       	sbci	r30, 0x00	; 0
    36ce:	f0 40       	sbci	r31, 0x00	; 0
    36d0:	e1 f7       	brne	.-8      	; 0x36ca <main+0x5d6>
    36d2:	00 c0       	rjmp	.+0      	; 0x36d4 <main+0x5e0>
    36d4:	00 00       	nop
    36d6:	d7 cd       	rjmp	.-1106   	; 0x3286 <main+0x192>
    36d8:	86 81       	ldd	r24, Z+6	; 0x06
    36da:	97 81       	ldd	r25, Z+7	; 0x07
    36dc:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__eewr_byte_m1284p>
    36e0:	e0 91 5e 04 	lds	r30, 0x045E
    36e4:	f0 91 5f 04 	lds	r31, 0x045F
    36e8:	86 81       	ldd	r24, Z+6	; 0x06
    36ea:	97 81       	ldd	r25, Z+7	; 0x07
    36ec:	01 96       	adiw	r24, 0x01	; 1
    36ee:	97 83       	std	Z+7, r25	; 0x07
    36f0:	86 83       	std	Z+6, r24	; 0x06
    36f2:	c9 cd       	rjmp	.-1134   	; 0x3286 <main+0x192>
    36f4:	d7 01       	movw	r26, r14
    36f6:	6d 91       	ld	r22, X+
    36f8:	7d 91       	ld	r23, X+
    36fa:	8d 91       	ld	r24, X+
    36fc:	9c 91       	ld	r25, X
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	5f e3       	ldi	r21, 0x3F	; 63
    3706:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3>
    370a:	ab 01       	movw	r20, r22
    370c:	bc 01       	movw	r22, r24
    370e:	f7 01       	movw	r30, r14
    3710:	40 83       	st	Z, r20
    3712:	51 83       	std	Z+1, r21	; 0x01
    3714:	62 83       	std	Z+2, r22	; 0x02
    3716:	73 83       	std	Z+3, r23	; 0x03
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	82 81       	ldd	r24, Z+2	; 0x02
    371e:	93 81       	ldd	r25, Z+3	; 0x03
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e5       	ldi	r19, 0x50	; 80
    3724:	43 e4       	ldi	r20, 0x43	; 67
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__gesf2>
    372c:	18 16       	cp	r1, r24
    372e:	0c f0       	brlt	.+2      	; 0x3732 <main+0x63e>
    3730:	aa cd       	rjmp	.-1196   	; 0x3286 <main+0x192>
    3732:	41 e0       	ldi	r20, 0x01	; 1
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	b8 01       	movw	r22, r16
    3738:	c7 01       	movw	r24, r14
    373a:	0e 94 96 10 	call	0x212c	; 0x212c <terminate_serial>
    373e:	af cf       	rjmp	.-162    	; 0x369e <main+0x5aa>
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	df 91       	pop	r29
    374c:	cf 91       	pop	r28
    374e:	1f 91       	pop	r17
    3750:	0f 91       	pop	r16
    3752:	ff 90       	pop	r15
    3754:	ef 90       	pop	r14
    3756:	df 90       	pop	r13
    3758:	cf 90       	pop	r12
    375a:	bf 90       	pop	r11
    375c:	af 90       	pop	r10
    375e:	9f 90       	pop	r9
    3760:	8f 90       	pop	r8
    3762:	7f 90       	pop	r7
    3764:	6f 90       	pop	r6
    3766:	5f 90       	pop	r5
    3768:	4f 90       	pop	r4
    376a:	3f 90       	pop	r3
    376c:	2f 90       	pop	r2
    376e:	08 95       	ret

00003770 <__subsf3>:
    3770:	50 58       	subi	r21, 0x80	; 128

00003772 <__addsf3>:
    3772:	bb 27       	eor	r27, r27
    3774:	aa 27       	eor	r26, r26
    3776:	0e d0       	rcall	.+28     	; 0x3794 <__addsf3x>
    3778:	63 c2       	rjmp	.+1222   	; 0x3c40 <__fp_round>
    377a:	2c d2       	rcall	.+1112   	; 0x3bd4 <__fp_pscA>
    377c:	30 f0       	brcs	.+12     	; 0x378a <__addsf3+0x18>
    377e:	31 d2       	rcall	.+1122   	; 0x3be2 <__fp_pscB>
    3780:	20 f0       	brcs	.+8      	; 0x378a <__addsf3+0x18>
    3782:	31 f4       	brne	.+12     	; 0x3790 <__addsf3+0x1e>
    3784:	9f 3f       	cpi	r25, 0xFF	; 255
    3786:	11 f4       	brne	.+4      	; 0x378c <__addsf3+0x1a>
    3788:	1e f4       	brtc	.+6      	; 0x3790 <__addsf3+0x1e>
    378a:	fc c1       	rjmp	.+1016   	; 0x3b84 <__fp_nan>
    378c:	0e f4       	brtc	.+2      	; 0x3790 <__addsf3+0x1e>
    378e:	e0 95       	com	r30
    3790:	e7 fb       	bst	r30, 7
    3792:	c9 c1       	rjmp	.+914    	; 0x3b26 <__fp_inf>

00003794 <__addsf3x>:
    3794:	e9 2f       	mov	r30, r25
    3796:	76 d2       	rcall	.+1260   	; 0x3c84 <__fp_split3>
    3798:	80 f3       	brcs	.-32     	; 0x377a <__addsf3+0x8>
    379a:	ba 17       	cp	r27, r26
    379c:	62 07       	cpc	r22, r18
    379e:	73 07       	cpc	r23, r19
    37a0:	84 07       	cpc	r24, r20
    37a2:	95 07       	cpc	r25, r21
    37a4:	18 f0       	brcs	.+6      	; 0x37ac <__addsf3x+0x18>
    37a6:	71 f4       	brne	.+28     	; 0x37c4 <__addsf3x+0x30>
    37a8:	9e f5       	brtc	.+102    	; 0x3810 <__addsf3x+0x7c>
    37aa:	a5 c2       	rjmp	.+1354   	; 0x3cf6 <__fp_zero>
    37ac:	0e f4       	brtc	.+2      	; 0x37b0 <__addsf3x+0x1c>
    37ae:	e0 95       	com	r30
    37b0:	0b 2e       	mov	r0, r27
    37b2:	ba 2f       	mov	r27, r26
    37b4:	a0 2d       	mov	r26, r0
    37b6:	0b 01       	movw	r0, r22
    37b8:	b9 01       	movw	r22, r18
    37ba:	90 01       	movw	r18, r0
    37bc:	0c 01       	movw	r0, r24
    37be:	ca 01       	movw	r24, r20
    37c0:	a0 01       	movw	r20, r0
    37c2:	11 24       	eor	r1, r1
    37c4:	ff 27       	eor	r31, r31
    37c6:	59 1b       	sub	r21, r25
    37c8:	99 f0       	breq	.+38     	; 0x37f0 <__addsf3x+0x5c>
    37ca:	59 3f       	cpi	r21, 0xF9	; 249
    37cc:	50 f4       	brcc	.+20     	; 0x37e2 <__addsf3x+0x4e>
    37ce:	50 3e       	cpi	r21, 0xE0	; 224
    37d0:	68 f1       	brcs	.+90     	; 0x382c <__addsf3x+0x98>
    37d2:	1a 16       	cp	r1, r26
    37d4:	f0 40       	sbci	r31, 0x00	; 0
    37d6:	a2 2f       	mov	r26, r18
    37d8:	23 2f       	mov	r18, r19
    37da:	34 2f       	mov	r19, r20
    37dc:	44 27       	eor	r20, r20
    37de:	58 5f       	subi	r21, 0xF8	; 248
    37e0:	f3 cf       	rjmp	.-26     	; 0x37c8 <__addsf3x+0x34>
    37e2:	46 95       	lsr	r20
    37e4:	37 95       	ror	r19
    37e6:	27 95       	ror	r18
    37e8:	a7 95       	ror	r26
    37ea:	f0 40       	sbci	r31, 0x00	; 0
    37ec:	53 95       	inc	r21
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <__addsf3x+0x4e>
    37f0:	7e f4       	brtc	.+30     	; 0x3810 <__addsf3x+0x7c>
    37f2:	1f 16       	cp	r1, r31
    37f4:	ba 0b       	sbc	r27, r26
    37f6:	62 0b       	sbc	r22, r18
    37f8:	73 0b       	sbc	r23, r19
    37fa:	84 0b       	sbc	r24, r20
    37fc:	ba f0       	brmi	.+46     	; 0x382c <__addsf3x+0x98>
    37fe:	91 50       	subi	r25, 0x01	; 1
    3800:	a1 f0       	breq	.+40     	; 0x382a <__addsf3x+0x96>
    3802:	ff 0f       	add	r31, r31
    3804:	bb 1f       	adc	r27, r27
    3806:	66 1f       	adc	r22, r22
    3808:	77 1f       	adc	r23, r23
    380a:	88 1f       	adc	r24, r24
    380c:	c2 f7       	brpl	.-16     	; 0x37fe <__addsf3x+0x6a>
    380e:	0e c0       	rjmp	.+28     	; 0x382c <__addsf3x+0x98>
    3810:	ba 0f       	add	r27, r26
    3812:	62 1f       	adc	r22, r18
    3814:	73 1f       	adc	r23, r19
    3816:	84 1f       	adc	r24, r20
    3818:	48 f4       	brcc	.+18     	; 0x382c <__addsf3x+0x98>
    381a:	87 95       	ror	r24
    381c:	77 95       	ror	r23
    381e:	67 95       	ror	r22
    3820:	b7 95       	ror	r27
    3822:	f7 95       	ror	r31
    3824:	9e 3f       	cpi	r25, 0xFE	; 254
    3826:	08 f0       	brcs	.+2      	; 0x382a <__addsf3x+0x96>
    3828:	b3 cf       	rjmp	.-154    	; 0x3790 <__addsf3+0x1e>
    382a:	93 95       	inc	r25
    382c:	88 0f       	add	r24, r24
    382e:	08 f0       	brcs	.+2      	; 0x3832 <__addsf3x+0x9e>
    3830:	99 27       	eor	r25, r25
    3832:	ee 0f       	add	r30, r30
    3834:	97 95       	ror	r25
    3836:	87 95       	ror	r24
    3838:	08 95       	ret
    383a:	cc d1       	rcall	.+920    	; 0x3bd4 <__fp_pscA>
    383c:	58 f0       	brcs	.+22     	; 0x3854 <__addsf3x+0xc0>
    383e:	80 e8       	ldi	r24, 0x80	; 128
    3840:	91 e0       	ldi	r25, 0x01	; 1
    3842:	09 f4       	brne	.+2      	; 0x3846 <__addsf3x+0xb2>
    3844:	9e ef       	ldi	r25, 0xFE	; 254
    3846:	cd d1       	rcall	.+922    	; 0x3be2 <__fp_pscB>
    3848:	28 f0       	brcs	.+10     	; 0x3854 <__addsf3x+0xc0>
    384a:	40 e8       	ldi	r20, 0x80	; 128
    384c:	51 e0       	ldi	r21, 0x01	; 1
    384e:	59 f4       	brne	.+22     	; 0x3866 <atan2+0xe>
    3850:	5e ef       	ldi	r21, 0xFE	; 254
    3852:	09 c0       	rjmp	.+18     	; 0x3866 <atan2+0xe>
    3854:	97 c1       	rjmp	.+814    	; 0x3b84 <__fp_nan>
    3856:	4f c2       	rjmp	.+1182   	; 0x3cf6 <__fp_zero>

00003858 <atan2>:
    3858:	e9 2f       	mov	r30, r25
    385a:	e0 78       	andi	r30, 0x80	; 128
    385c:	13 d2       	rcall	.+1062   	; 0x3c84 <__fp_split3>
    385e:	68 f3       	brcs	.-38     	; 0x383a <__addsf3x+0xa6>
    3860:	09 2e       	mov	r0, r25
    3862:	05 2a       	or	r0, r21
    3864:	c1 f3       	breq	.-16     	; 0x3856 <__addsf3x+0xc2>
    3866:	26 17       	cp	r18, r22
    3868:	37 07       	cpc	r19, r23
    386a:	48 07       	cpc	r20, r24
    386c:	59 07       	cpc	r21, r25
    386e:	38 f0       	brcs	.+14     	; 0x387e <atan2+0x26>
    3870:	0e 2e       	mov	r0, r30
    3872:	07 f8       	bld	r0, 7
    3874:	e0 25       	eor	r30, r0
    3876:	69 f0       	breq	.+26     	; 0x3892 <atan2+0x3a>
    3878:	e0 25       	eor	r30, r0
    387a:	e0 64       	ori	r30, 0x40	; 64
    387c:	0a c0       	rjmp	.+20     	; 0x3892 <atan2+0x3a>
    387e:	ef 63       	ori	r30, 0x3F	; 63
    3880:	07 f8       	bld	r0, 7
    3882:	00 94       	com	r0
    3884:	07 fa       	bst	r0, 7
    3886:	db 01       	movw	r26, r22
    3888:	b9 01       	movw	r22, r18
    388a:	9d 01       	movw	r18, r26
    388c:	dc 01       	movw	r26, r24
    388e:	ca 01       	movw	r24, r20
    3890:	ad 01       	movw	r20, r26
    3892:	ef 93       	push	r30
    3894:	4a d0       	rcall	.+148    	; 0x392a <__divsf3_pse>
    3896:	d4 d1       	rcall	.+936    	; 0x3c40 <__fp_round>
    3898:	0a d0       	rcall	.+20     	; 0x38ae <atan>
    389a:	5f 91       	pop	r21
    389c:	55 23       	and	r21, r21
    389e:	31 f0       	breq	.+12     	; 0x38ac <atan2+0x54>
    38a0:	2b ed       	ldi	r18, 0xDB	; 219
    38a2:	3f e0       	ldi	r19, 0x0F	; 15
    38a4:	49 e4       	ldi	r20, 0x49	; 73
    38a6:	50 fd       	sbrc	r21, 0
    38a8:	49 ec       	ldi	r20, 0xC9	; 201
    38aa:	63 cf       	rjmp	.-314    	; 0x3772 <__addsf3>
    38ac:	08 95       	ret

000038ae <atan>:
    38ae:	df 93       	push	r29
    38b0:	dd 27       	eor	r29, r29
    38b2:	b9 2f       	mov	r27, r25
    38b4:	bf 77       	andi	r27, 0x7F	; 127
    38b6:	40 e8       	ldi	r20, 0x80	; 128
    38b8:	5f e3       	ldi	r21, 0x3F	; 63
    38ba:	16 16       	cp	r1, r22
    38bc:	17 06       	cpc	r1, r23
    38be:	48 07       	cpc	r20, r24
    38c0:	5b 07       	cpc	r21, r27
    38c2:	10 f4       	brcc	.+4      	; 0x38c8 <atan+0x1a>
    38c4:	d9 2f       	mov	r29, r25
    38c6:	22 d2       	rcall	.+1092   	; 0x3d0c <inverse>
    38c8:	9f 93       	push	r25
    38ca:	8f 93       	push	r24
    38cc:	7f 93       	push	r23
    38ce:	6f 93       	push	r22
    38d0:	b9 d3       	rcall	.+1906   	; 0x4044 <square>
    38d2:	ec e8       	ldi	r30, 0x8C	; 140
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	59 d1       	rcall	.+690    	; 0x3b8a <__fp_powser>
    38d8:	b3 d1       	rcall	.+870    	; 0x3c40 <__fp_round>
    38da:	2f 91       	pop	r18
    38dc:	3f 91       	pop	r19
    38de:	4f 91       	pop	r20
    38e0:	5f 91       	pop	r21
    38e2:	a5 d2       	rcall	.+1354   	; 0x3e2e <__mulsf3x>
    38e4:	dd 23       	and	r29, r29
    38e6:	49 f0       	breq	.+18     	; 0x38fa <atan+0x4c>
    38e8:	90 58       	subi	r25, 0x80	; 128
    38ea:	a2 ea       	ldi	r26, 0xA2	; 162
    38ec:	2a ed       	ldi	r18, 0xDA	; 218
    38ee:	3f e0       	ldi	r19, 0x0F	; 15
    38f0:	49 ec       	ldi	r20, 0xC9	; 201
    38f2:	5f e3       	ldi	r21, 0x3F	; 63
    38f4:	d0 78       	andi	r29, 0x80	; 128
    38f6:	5d 27       	eor	r21, r29
    38f8:	4d df       	rcall	.-358    	; 0x3794 <__addsf3x>
    38fa:	df 91       	pop	r29
    38fc:	a1 c1       	rjmp	.+834    	; 0x3c40 <__fp_round>

000038fe <__cmpsf2>:
    38fe:	ef d0       	rcall	.+478    	; 0x3ade <__fp_cmp>
    3900:	08 f4       	brcc	.+2      	; 0x3904 <__cmpsf2+0x6>
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	08 95       	ret

00003906 <cos>:
    3906:	75 d1       	rcall	.+746    	; 0x3bf2 <__fp_rempio2>
    3908:	e3 95       	inc	r30
    390a:	ab c1       	rjmp	.+854    	; 0x3c62 <__fp_sinus>

0000390c <__divsf3>:
    390c:	0c d0       	rcall	.+24     	; 0x3926 <__divsf3x>
    390e:	98 c1       	rjmp	.+816    	; 0x3c40 <__fp_round>
    3910:	68 d1       	rcall	.+720    	; 0x3be2 <__fp_pscB>
    3912:	40 f0       	brcs	.+16     	; 0x3924 <__divsf3+0x18>
    3914:	5f d1       	rcall	.+702    	; 0x3bd4 <__fp_pscA>
    3916:	30 f0       	brcs	.+12     	; 0x3924 <__divsf3+0x18>
    3918:	21 f4       	brne	.+8      	; 0x3922 <__divsf3+0x16>
    391a:	5f 3f       	cpi	r21, 0xFF	; 255
    391c:	19 f0       	breq	.+6      	; 0x3924 <__divsf3+0x18>
    391e:	03 c1       	rjmp	.+518    	; 0x3b26 <__fp_inf>
    3920:	51 11       	cpse	r21, r1
    3922:	ea c1       	rjmp	.+980    	; 0x3cf8 <__fp_szero>
    3924:	2f c1       	rjmp	.+606    	; 0x3b84 <__fp_nan>

00003926 <__divsf3x>:
    3926:	ae d1       	rcall	.+860    	; 0x3c84 <__fp_split3>
    3928:	98 f3       	brcs	.-26     	; 0x3910 <__divsf3+0x4>

0000392a <__divsf3_pse>:
    392a:	99 23       	and	r25, r25
    392c:	c9 f3       	breq	.-14     	; 0x3920 <__divsf3+0x14>
    392e:	55 23       	and	r21, r21
    3930:	b1 f3       	breq	.-20     	; 0x391e <__divsf3+0x12>
    3932:	95 1b       	sub	r25, r21
    3934:	55 0b       	sbc	r21, r21
    3936:	bb 27       	eor	r27, r27
    3938:	aa 27       	eor	r26, r26
    393a:	62 17       	cp	r22, r18
    393c:	73 07       	cpc	r23, r19
    393e:	84 07       	cpc	r24, r20
    3940:	38 f0       	brcs	.+14     	; 0x3950 <__divsf3_pse+0x26>
    3942:	9f 5f       	subi	r25, 0xFF	; 255
    3944:	5f 4f       	sbci	r21, 0xFF	; 255
    3946:	22 0f       	add	r18, r18
    3948:	33 1f       	adc	r19, r19
    394a:	44 1f       	adc	r20, r20
    394c:	aa 1f       	adc	r26, r26
    394e:	a9 f3       	breq	.-22     	; 0x393a <__divsf3_pse+0x10>
    3950:	33 d0       	rcall	.+102    	; 0x39b8 <__divsf3_pse+0x8e>
    3952:	0e 2e       	mov	r0, r30
    3954:	3a f0       	brmi	.+14     	; 0x3964 <__divsf3_pse+0x3a>
    3956:	e0 e8       	ldi	r30, 0x80	; 128
    3958:	30 d0       	rcall	.+96     	; 0x39ba <__divsf3_pse+0x90>
    395a:	91 50       	subi	r25, 0x01	; 1
    395c:	50 40       	sbci	r21, 0x00	; 0
    395e:	e6 95       	lsr	r30
    3960:	00 1c       	adc	r0, r0
    3962:	ca f7       	brpl	.-14     	; 0x3956 <__divsf3_pse+0x2c>
    3964:	29 d0       	rcall	.+82     	; 0x39b8 <__divsf3_pse+0x8e>
    3966:	fe 2f       	mov	r31, r30
    3968:	27 d0       	rcall	.+78     	; 0x39b8 <__divsf3_pse+0x8e>
    396a:	66 0f       	add	r22, r22
    396c:	77 1f       	adc	r23, r23
    396e:	88 1f       	adc	r24, r24
    3970:	bb 1f       	adc	r27, r27
    3972:	26 17       	cp	r18, r22
    3974:	37 07       	cpc	r19, r23
    3976:	48 07       	cpc	r20, r24
    3978:	ab 07       	cpc	r26, r27
    397a:	b0 e8       	ldi	r27, 0x80	; 128
    397c:	09 f0       	breq	.+2      	; 0x3980 <__divsf3_pse+0x56>
    397e:	bb 0b       	sbc	r27, r27
    3980:	80 2d       	mov	r24, r0
    3982:	bf 01       	movw	r22, r30
    3984:	ff 27       	eor	r31, r31
    3986:	93 58       	subi	r25, 0x83	; 131
    3988:	5f 4f       	sbci	r21, 0xFF	; 255
    398a:	2a f0       	brmi	.+10     	; 0x3996 <__divsf3_pse+0x6c>
    398c:	9e 3f       	cpi	r25, 0xFE	; 254
    398e:	51 05       	cpc	r21, r1
    3990:	68 f0       	brcs	.+26     	; 0x39ac <__divsf3_pse+0x82>
    3992:	c9 c0       	rjmp	.+402    	; 0x3b26 <__fp_inf>
    3994:	b1 c1       	rjmp	.+866    	; 0x3cf8 <__fp_szero>
    3996:	5f 3f       	cpi	r21, 0xFF	; 255
    3998:	ec f3       	brlt	.-6      	; 0x3994 <__divsf3_pse+0x6a>
    399a:	98 3e       	cpi	r25, 0xE8	; 232
    399c:	dc f3       	brlt	.-10     	; 0x3994 <__divsf3_pse+0x6a>
    399e:	86 95       	lsr	r24
    39a0:	77 95       	ror	r23
    39a2:	67 95       	ror	r22
    39a4:	b7 95       	ror	r27
    39a6:	f7 95       	ror	r31
    39a8:	9f 5f       	subi	r25, 0xFF	; 255
    39aa:	c9 f7       	brne	.-14     	; 0x399e <__divsf3_pse+0x74>
    39ac:	88 0f       	add	r24, r24
    39ae:	91 1d       	adc	r25, r1
    39b0:	96 95       	lsr	r25
    39b2:	87 95       	ror	r24
    39b4:	97 f9       	bld	r25, 7
    39b6:	08 95       	ret
    39b8:	e1 e0       	ldi	r30, 0x01	; 1
    39ba:	66 0f       	add	r22, r22
    39bc:	77 1f       	adc	r23, r23
    39be:	88 1f       	adc	r24, r24
    39c0:	bb 1f       	adc	r27, r27
    39c2:	62 17       	cp	r22, r18
    39c4:	73 07       	cpc	r23, r19
    39c6:	84 07       	cpc	r24, r20
    39c8:	ba 07       	cpc	r27, r26
    39ca:	20 f0       	brcs	.+8      	; 0x39d4 <__divsf3_pse+0xaa>
    39cc:	62 1b       	sub	r22, r18
    39ce:	73 0b       	sbc	r23, r19
    39d0:	84 0b       	sbc	r24, r20
    39d2:	ba 0b       	sbc	r27, r26
    39d4:	ee 1f       	adc	r30, r30
    39d6:	88 f7       	brcc	.-30     	; 0x39ba <__divsf3_pse+0x90>
    39d8:	e0 95       	com	r30
    39da:	08 95       	ret

000039dc <__fixsfsi>:
    39dc:	04 d0       	rcall	.+8      	; 0x39e6 <__fixunssfsi>
    39de:	68 94       	set
    39e0:	b1 11       	cpse	r27, r1
    39e2:	8a c1       	rjmp	.+788    	; 0x3cf8 <__fp_szero>
    39e4:	08 95       	ret

000039e6 <__fixunssfsi>:
    39e6:	56 d1       	rcall	.+684    	; 0x3c94 <__fp_splitA>
    39e8:	88 f0       	brcs	.+34     	; 0x3a0c <__fixunssfsi+0x26>
    39ea:	9f 57       	subi	r25, 0x7F	; 127
    39ec:	90 f0       	brcs	.+36     	; 0x3a12 <__fixunssfsi+0x2c>
    39ee:	b9 2f       	mov	r27, r25
    39f0:	99 27       	eor	r25, r25
    39f2:	b7 51       	subi	r27, 0x17	; 23
    39f4:	a0 f0       	brcs	.+40     	; 0x3a1e <__fixunssfsi+0x38>
    39f6:	d1 f0       	breq	.+52     	; 0x3a2c <__fixunssfsi+0x46>
    39f8:	66 0f       	add	r22, r22
    39fa:	77 1f       	adc	r23, r23
    39fc:	88 1f       	adc	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	1a f0       	brmi	.+6      	; 0x3a08 <__fixunssfsi+0x22>
    3a02:	ba 95       	dec	r27
    3a04:	c9 f7       	brne	.-14     	; 0x39f8 <__fixunssfsi+0x12>
    3a06:	12 c0       	rjmp	.+36     	; 0x3a2c <__fixunssfsi+0x46>
    3a08:	b1 30       	cpi	r27, 0x01	; 1
    3a0a:	81 f0       	breq	.+32     	; 0x3a2c <__fixunssfsi+0x46>
    3a0c:	74 d1       	rcall	.+744    	; 0x3cf6 <__fp_zero>
    3a0e:	b1 e0       	ldi	r27, 0x01	; 1
    3a10:	08 95       	ret
    3a12:	71 c1       	rjmp	.+738    	; 0x3cf6 <__fp_zero>
    3a14:	67 2f       	mov	r22, r23
    3a16:	78 2f       	mov	r23, r24
    3a18:	88 27       	eor	r24, r24
    3a1a:	b8 5f       	subi	r27, 0xF8	; 248
    3a1c:	39 f0       	breq	.+14     	; 0x3a2c <__fixunssfsi+0x46>
    3a1e:	b9 3f       	cpi	r27, 0xF9	; 249
    3a20:	cc f3       	brlt	.-14     	; 0x3a14 <__fixunssfsi+0x2e>
    3a22:	86 95       	lsr	r24
    3a24:	77 95       	ror	r23
    3a26:	67 95       	ror	r22
    3a28:	b3 95       	inc	r27
    3a2a:	d9 f7       	brne	.-10     	; 0x3a22 <__fixunssfsi+0x3c>
    3a2c:	3e f4       	brtc	.+14     	; 0x3a3c <__fixunssfsi+0x56>
    3a2e:	90 95       	com	r25
    3a30:	80 95       	com	r24
    3a32:	70 95       	com	r23
    3a34:	61 95       	neg	r22
    3a36:	7f 4f       	sbci	r23, 0xFF	; 255
    3a38:	8f 4f       	sbci	r24, 0xFF	; 255
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	08 95       	ret

00003a3e <__floatunsisf>:
    3a3e:	e8 94       	clt
    3a40:	09 c0       	rjmp	.+18     	; 0x3a54 <__floatsisf+0x12>

00003a42 <__floatsisf>:
    3a42:	97 fb       	bst	r25, 7
    3a44:	3e f4       	brtc	.+14     	; 0x3a54 <__floatsisf+0x12>
    3a46:	90 95       	com	r25
    3a48:	80 95       	com	r24
    3a4a:	70 95       	com	r23
    3a4c:	61 95       	neg	r22
    3a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a50:	8f 4f       	sbci	r24, 0xFF	; 255
    3a52:	9f 4f       	sbci	r25, 0xFF	; 255
    3a54:	99 23       	and	r25, r25
    3a56:	a9 f0       	breq	.+42     	; 0x3a82 <__floatsisf+0x40>
    3a58:	f9 2f       	mov	r31, r25
    3a5a:	96 e9       	ldi	r25, 0x96	; 150
    3a5c:	bb 27       	eor	r27, r27
    3a5e:	93 95       	inc	r25
    3a60:	f6 95       	lsr	r31
    3a62:	87 95       	ror	r24
    3a64:	77 95       	ror	r23
    3a66:	67 95       	ror	r22
    3a68:	b7 95       	ror	r27
    3a6a:	f1 11       	cpse	r31, r1
    3a6c:	f8 cf       	rjmp	.-16     	; 0x3a5e <__floatsisf+0x1c>
    3a6e:	fa f4       	brpl	.+62     	; 0x3aae <__floatsisf+0x6c>
    3a70:	bb 0f       	add	r27, r27
    3a72:	11 f4       	brne	.+4      	; 0x3a78 <__floatsisf+0x36>
    3a74:	60 ff       	sbrs	r22, 0
    3a76:	1b c0       	rjmp	.+54     	; 0x3aae <__floatsisf+0x6c>
    3a78:	6f 5f       	subi	r22, 0xFF	; 255
    3a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a80:	16 c0       	rjmp	.+44     	; 0x3aae <__floatsisf+0x6c>
    3a82:	88 23       	and	r24, r24
    3a84:	11 f0       	breq	.+4      	; 0x3a8a <__floatsisf+0x48>
    3a86:	96 e9       	ldi	r25, 0x96	; 150
    3a88:	11 c0       	rjmp	.+34     	; 0x3aac <__floatsisf+0x6a>
    3a8a:	77 23       	and	r23, r23
    3a8c:	21 f0       	breq	.+8      	; 0x3a96 <__floatsisf+0x54>
    3a8e:	9e e8       	ldi	r25, 0x8E	; 142
    3a90:	87 2f       	mov	r24, r23
    3a92:	76 2f       	mov	r23, r22
    3a94:	05 c0       	rjmp	.+10     	; 0x3aa0 <__floatsisf+0x5e>
    3a96:	66 23       	and	r22, r22
    3a98:	71 f0       	breq	.+28     	; 0x3ab6 <__floatsisf+0x74>
    3a9a:	96 e8       	ldi	r25, 0x86	; 134
    3a9c:	86 2f       	mov	r24, r22
    3a9e:	70 e0       	ldi	r23, 0x00	; 0
    3aa0:	60 e0       	ldi	r22, 0x00	; 0
    3aa2:	2a f0       	brmi	.+10     	; 0x3aae <__floatsisf+0x6c>
    3aa4:	9a 95       	dec	r25
    3aa6:	66 0f       	add	r22, r22
    3aa8:	77 1f       	adc	r23, r23
    3aaa:	88 1f       	adc	r24, r24
    3aac:	da f7       	brpl	.-10     	; 0x3aa4 <__floatsisf+0x62>
    3aae:	88 0f       	add	r24, r24
    3ab0:	96 95       	lsr	r25
    3ab2:	87 95       	ror	r24
    3ab4:	97 f9       	bld	r25, 7
    3ab6:	08 95       	ret

00003ab8 <floor>:
    3ab8:	07 d1       	rcall	.+526    	; 0x3cc8 <__fp_trunc>
    3aba:	80 f0       	brcs	.+32     	; 0x3adc <floor+0x24>
    3abc:	9f 37       	cpi	r25, 0x7F	; 127
    3abe:	40 f4       	brcc	.+16     	; 0x3ad0 <floor+0x18>
    3ac0:	91 11       	cpse	r25, r1
    3ac2:	0e f0       	brts	.+2      	; 0x3ac6 <floor+0xe>
    3ac4:	19 c1       	rjmp	.+562    	; 0x3cf8 <__fp_szero>
    3ac6:	60 e0       	ldi	r22, 0x00	; 0
    3ac8:	70 e0       	ldi	r23, 0x00	; 0
    3aca:	80 e8       	ldi	r24, 0x80	; 128
    3acc:	9f eb       	ldi	r25, 0xBF	; 191
    3ace:	08 95       	ret
    3ad0:	26 f4       	brtc	.+8      	; 0x3ada <floor+0x22>
    3ad2:	1b 16       	cp	r1, r27
    3ad4:	61 1d       	adc	r22, r1
    3ad6:	71 1d       	adc	r23, r1
    3ad8:	81 1d       	adc	r24, r1
    3ada:	2b c0       	rjmp	.+86     	; 0x3b32 <__fp_mintl>
    3adc:	45 c0       	rjmp	.+138    	; 0x3b68 <__fp_mpack>

00003ade <__fp_cmp>:
    3ade:	99 0f       	add	r25, r25
    3ae0:	00 08       	sbc	r0, r0
    3ae2:	55 0f       	add	r21, r21
    3ae4:	aa 0b       	sbc	r26, r26
    3ae6:	e0 e8       	ldi	r30, 0x80	; 128
    3ae8:	fe ef       	ldi	r31, 0xFE	; 254
    3aea:	16 16       	cp	r1, r22
    3aec:	17 06       	cpc	r1, r23
    3aee:	e8 07       	cpc	r30, r24
    3af0:	f9 07       	cpc	r31, r25
    3af2:	c0 f0       	brcs	.+48     	; 0x3b24 <__fp_cmp+0x46>
    3af4:	12 16       	cp	r1, r18
    3af6:	13 06       	cpc	r1, r19
    3af8:	e4 07       	cpc	r30, r20
    3afa:	f5 07       	cpc	r31, r21
    3afc:	98 f0       	brcs	.+38     	; 0x3b24 <__fp_cmp+0x46>
    3afe:	62 1b       	sub	r22, r18
    3b00:	73 0b       	sbc	r23, r19
    3b02:	84 0b       	sbc	r24, r20
    3b04:	95 0b       	sbc	r25, r21
    3b06:	39 f4       	brne	.+14     	; 0x3b16 <__fp_cmp+0x38>
    3b08:	0a 26       	eor	r0, r26
    3b0a:	61 f0       	breq	.+24     	; 0x3b24 <__fp_cmp+0x46>
    3b0c:	23 2b       	or	r18, r19
    3b0e:	24 2b       	or	r18, r20
    3b10:	25 2b       	or	r18, r21
    3b12:	21 f4       	brne	.+8      	; 0x3b1c <__fp_cmp+0x3e>
    3b14:	08 95       	ret
    3b16:	0a 26       	eor	r0, r26
    3b18:	09 f4       	brne	.+2      	; 0x3b1c <__fp_cmp+0x3e>
    3b1a:	a1 40       	sbci	r26, 0x01	; 1
    3b1c:	a6 95       	lsr	r26
    3b1e:	8f ef       	ldi	r24, 0xFF	; 255
    3b20:	81 1d       	adc	r24, r1
    3b22:	81 1d       	adc	r24, r1
    3b24:	08 95       	ret

00003b26 <__fp_inf>:
    3b26:	97 f9       	bld	r25, 7
    3b28:	9f 67       	ori	r25, 0x7F	; 127
    3b2a:	80 e8       	ldi	r24, 0x80	; 128
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	08 95       	ret

00003b32 <__fp_mintl>:
    3b32:	88 23       	and	r24, r24
    3b34:	71 f4       	brne	.+28     	; 0x3b52 <__fp_mintl+0x20>
    3b36:	77 23       	and	r23, r23
    3b38:	21 f0       	breq	.+8      	; 0x3b42 <__fp_mintl+0x10>
    3b3a:	98 50       	subi	r25, 0x08	; 8
    3b3c:	87 2b       	or	r24, r23
    3b3e:	76 2f       	mov	r23, r22
    3b40:	07 c0       	rjmp	.+14     	; 0x3b50 <__fp_mintl+0x1e>
    3b42:	66 23       	and	r22, r22
    3b44:	11 f4       	brne	.+4      	; 0x3b4a <__fp_mintl+0x18>
    3b46:	99 27       	eor	r25, r25
    3b48:	0d c0       	rjmp	.+26     	; 0x3b64 <__fp_mintl+0x32>
    3b4a:	90 51       	subi	r25, 0x10	; 16
    3b4c:	86 2b       	or	r24, r22
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	60 e0       	ldi	r22, 0x00	; 0
    3b52:	2a f0       	brmi	.+10     	; 0x3b5e <__fp_mintl+0x2c>
    3b54:	9a 95       	dec	r25
    3b56:	66 0f       	add	r22, r22
    3b58:	77 1f       	adc	r23, r23
    3b5a:	88 1f       	adc	r24, r24
    3b5c:	da f7       	brpl	.-10     	; 0x3b54 <__fp_mintl+0x22>
    3b5e:	88 0f       	add	r24, r24
    3b60:	96 95       	lsr	r25
    3b62:	87 95       	ror	r24
    3b64:	97 f9       	bld	r25, 7
    3b66:	08 95       	ret

00003b68 <__fp_mpack>:
    3b68:	9f 3f       	cpi	r25, 0xFF	; 255
    3b6a:	31 f0       	breq	.+12     	; 0x3b78 <__fp_mpack_finite+0xc>

00003b6c <__fp_mpack_finite>:
    3b6c:	91 50       	subi	r25, 0x01	; 1
    3b6e:	20 f4       	brcc	.+8      	; 0x3b78 <__fp_mpack_finite+0xc>
    3b70:	87 95       	ror	r24
    3b72:	77 95       	ror	r23
    3b74:	67 95       	ror	r22
    3b76:	b7 95       	ror	r27
    3b78:	88 0f       	add	r24, r24
    3b7a:	91 1d       	adc	r25, r1
    3b7c:	96 95       	lsr	r25
    3b7e:	87 95       	ror	r24
    3b80:	97 f9       	bld	r25, 7
    3b82:	08 95       	ret

00003b84 <__fp_nan>:
    3b84:	9f ef       	ldi	r25, 0xFF	; 255
    3b86:	80 ec       	ldi	r24, 0xC0	; 192
    3b88:	08 95       	ret

00003b8a <__fp_powser>:
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	1f 93       	push	r17
    3b90:	0f 93       	push	r16
    3b92:	ff 92       	push	r15
    3b94:	ef 92       	push	r14
    3b96:	df 92       	push	r13
    3b98:	7b 01       	movw	r14, r22
    3b9a:	8c 01       	movw	r16, r24
    3b9c:	68 94       	set
    3b9e:	05 c0       	rjmp	.+10     	; 0x3baa <__fp_powser+0x20>
    3ba0:	da 2e       	mov	r13, r26
    3ba2:	ef 01       	movw	r28, r30
    3ba4:	44 d1       	rcall	.+648    	; 0x3e2e <__mulsf3x>
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e8 94       	clt
    3baa:	a5 91       	lpm	r26, Z+
    3bac:	25 91       	lpm	r18, Z+
    3bae:	35 91       	lpm	r19, Z+
    3bb0:	45 91       	lpm	r20, Z+
    3bb2:	55 91       	lpm	r21, Z+
    3bb4:	ae f3       	brts	.-22     	; 0x3ba0 <__fp_powser+0x16>
    3bb6:	ef 01       	movw	r28, r30
    3bb8:	ed dd       	rcall	.-1062   	; 0x3794 <__addsf3x>
    3bba:	fe 01       	movw	r30, r28
    3bbc:	97 01       	movw	r18, r14
    3bbe:	a8 01       	movw	r20, r16
    3bc0:	da 94       	dec	r13
    3bc2:	79 f7       	brne	.-34     	; 0x3ba2 <__fp_powser+0x18>
    3bc4:	df 90       	pop	r13
    3bc6:	ef 90       	pop	r14
    3bc8:	ff 90       	pop	r15
    3bca:	0f 91       	pop	r16
    3bcc:	1f 91       	pop	r17
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <__fp_pscA>:
    3bd4:	00 24       	eor	r0, r0
    3bd6:	0a 94       	dec	r0
    3bd8:	16 16       	cp	r1, r22
    3bda:	17 06       	cpc	r1, r23
    3bdc:	18 06       	cpc	r1, r24
    3bde:	09 06       	cpc	r0, r25
    3be0:	08 95       	ret

00003be2 <__fp_pscB>:
    3be2:	00 24       	eor	r0, r0
    3be4:	0a 94       	dec	r0
    3be6:	12 16       	cp	r1, r18
    3be8:	13 06       	cpc	r1, r19
    3bea:	14 06       	cpc	r1, r20
    3bec:	05 06       	cpc	r0, r21
    3bee:	08 95       	ret
    3bf0:	c9 cf       	rjmp	.-110    	; 0x3b84 <__fp_nan>

00003bf2 <__fp_rempio2>:
    3bf2:	50 d0       	rcall	.+160    	; 0x3c94 <__fp_splitA>
    3bf4:	e8 f3       	brcs	.-6      	; 0x3bf0 <__fp_pscB+0xe>
    3bf6:	e8 94       	clt
    3bf8:	e0 e0       	ldi	r30, 0x00	; 0
    3bfa:	bb 27       	eor	r27, r27
    3bfc:	9f 57       	subi	r25, 0x7F	; 127
    3bfe:	f0 f0       	brcs	.+60     	; 0x3c3c <__fp_rempio2+0x4a>
    3c00:	2a ed       	ldi	r18, 0xDA	; 218
    3c02:	3f e0       	ldi	r19, 0x0F	; 15
    3c04:	49 ec       	ldi	r20, 0xC9	; 201
    3c06:	06 c0       	rjmp	.+12     	; 0x3c14 <__fp_rempio2+0x22>
    3c08:	ee 0f       	add	r30, r30
    3c0a:	bb 0f       	add	r27, r27
    3c0c:	66 1f       	adc	r22, r22
    3c0e:	77 1f       	adc	r23, r23
    3c10:	88 1f       	adc	r24, r24
    3c12:	28 f0       	brcs	.+10     	; 0x3c1e <__fp_rempio2+0x2c>
    3c14:	b2 3a       	cpi	r27, 0xA2	; 162
    3c16:	62 07       	cpc	r22, r18
    3c18:	73 07       	cpc	r23, r19
    3c1a:	84 07       	cpc	r24, r20
    3c1c:	28 f0       	brcs	.+10     	; 0x3c28 <__fp_rempio2+0x36>
    3c1e:	b2 5a       	subi	r27, 0xA2	; 162
    3c20:	62 0b       	sbc	r22, r18
    3c22:	73 0b       	sbc	r23, r19
    3c24:	84 0b       	sbc	r24, r20
    3c26:	e3 95       	inc	r30
    3c28:	9a 95       	dec	r25
    3c2a:	72 f7       	brpl	.-36     	; 0x3c08 <__fp_rempio2+0x16>
    3c2c:	80 38       	cpi	r24, 0x80	; 128
    3c2e:	30 f4       	brcc	.+12     	; 0x3c3c <__fp_rempio2+0x4a>
    3c30:	9a 95       	dec	r25
    3c32:	bb 0f       	add	r27, r27
    3c34:	66 1f       	adc	r22, r22
    3c36:	77 1f       	adc	r23, r23
    3c38:	88 1f       	adc	r24, r24
    3c3a:	d2 f7       	brpl	.-12     	; 0x3c30 <__fp_rempio2+0x3e>
    3c3c:	90 48       	sbci	r25, 0x80	; 128
    3c3e:	96 cf       	rjmp	.-212    	; 0x3b6c <__fp_mpack_finite>

00003c40 <__fp_round>:
    3c40:	09 2e       	mov	r0, r25
    3c42:	03 94       	inc	r0
    3c44:	00 0c       	add	r0, r0
    3c46:	11 f4       	brne	.+4      	; 0x3c4c <__fp_round+0xc>
    3c48:	88 23       	and	r24, r24
    3c4a:	52 f0       	brmi	.+20     	; 0x3c60 <__fp_round+0x20>
    3c4c:	bb 0f       	add	r27, r27
    3c4e:	40 f4       	brcc	.+16     	; 0x3c60 <__fp_round+0x20>
    3c50:	bf 2b       	or	r27, r31
    3c52:	11 f4       	brne	.+4      	; 0x3c58 <__fp_round+0x18>
    3c54:	60 ff       	sbrs	r22, 0
    3c56:	04 c0       	rjmp	.+8      	; 0x3c60 <__fp_round+0x20>
    3c58:	6f 5f       	subi	r22, 0xFF	; 255
    3c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	08 95       	ret

00003c62 <__fp_sinus>:
    3c62:	ef 93       	push	r30
    3c64:	e0 ff       	sbrs	r30, 0
    3c66:	06 c0       	rjmp	.+12     	; 0x3c74 <__fp_sinus+0x12>
    3c68:	a2 ea       	ldi	r26, 0xA2	; 162
    3c6a:	2a ed       	ldi	r18, 0xDA	; 218
    3c6c:	3f e0       	ldi	r19, 0x0F	; 15
    3c6e:	49 ec       	ldi	r20, 0xC9	; 201
    3c70:	5f eb       	ldi	r21, 0xBF	; 191
    3c72:	90 dd       	rcall	.-1248   	; 0x3794 <__addsf3x>
    3c74:	e5 df       	rcall	.-54     	; 0x3c40 <__fp_round>
    3c76:	0f 90       	pop	r0
    3c78:	03 94       	inc	r0
    3c7a:	01 fc       	sbrc	r0, 1
    3c7c:	90 58       	subi	r25, 0x80	; 128
    3c7e:	e9 eb       	ldi	r30, 0xB9	; 185
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	1b c2       	rjmp	.+1078   	; 0x40ba <__fp_powsodd>

00003c84 <__fp_split3>:
    3c84:	57 fd       	sbrc	r21, 7
    3c86:	90 58       	subi	r25, 0x80	; 128
    3c88:	44 0f       	add	r20, r20
    3c8a:	55 1f       	adc	r21, r21
    3c8c:	59 f0       	breq	.+22     	; 0x3ca4 <__fp_splitA+0x10>
    3c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c90:	71 f0       	breq	.+28     	; 0x3cae <__fp_splitA+0x1a>
    3c92:	47 95       	ror	r20

00003c94 <__fp_splitA>:
    3c94:	88 0f       	add	r24, r24
    3c96:	97 fb       	bst	r25, 7
    3c98:	99 1f       	adc	r25, r25
    3c9a:	61 f0       	breq	.+24     	; 0x3cb4 <__fp_splitA+0x20>
    3c9c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c9e:	79 f0       	breq	.+30     	; 0x3cbe <__fp_splitA+0x2a>
    3ca0:	87 95       	ror	r24
    3ca2:	08 95       	ret
    3ca4:	12 16       	cp	r1, r18
    3ca6:	13 06       	cpc	r1, r19
    3ca8:	14 06       	cpc	r1, r20
    3caa:	55 1f       	adc	r21, r21
    3cac:	f2 cf       	rjmp	.-28     	; 0x3c92 <__fp_split3+0xe>
    3cae:	46 95       	lsr	r20
    3cb0:	f1 df       	rcall	.-30     	; 0x3c94 <__fp_splitA>
    3cb2:	08 c0       	rjmp	.+16     	; 0x3cc4 <__fp_splitA+0x30>
    3cb4:	16 16       	cp	r1, r22
    3cb6:	17 06       	cpc	r1, r23
    3cb8:	18 06       	cpc	r1, r24
    3cba:	99 1f       	adc	r25, r25
    3cbc:	f1 cf       	rjmp	.-30     	; 0x3ca0 <__fp_splitA+0xc>
    3cbe:	86 95       	lsr	r24
    3cc0:	71 05       	cpc	r23, r1
    3cc2:	61 05       	cpc	r22, r1
    3cc4:	08 94       	sec
    3cc6:	08 95       	ret

00003cc8 <__fp_trunc>:
    3cc8:	e5 df       	rcall	.-54     	; 0x3c94 <__fp_splitA>
    3cca:	a0 f0       	brcs	.+40     	; 0x3cf4 <__fp_trunc+0x2c>
    3ccc:	be e7       	ldi	r27, 0x7E	; 126
    3cce:	b9 17       	cp	r27, r25
    3cd0:	88 f4       	brcc	.+34     	; 0x3cf4 <__fp_trunc+0x2c>
    3cd2:	bb 27       	eor	r27, r27
    3cd4:	9f 38       	cpi	r25, 0x8F	; 143
    3cd6:	60 f4       	brcc	.+24     	; 0x3cf0 <__fp_trunc+0x28>
    3cd8:	16 16       	cp	r1, r22
    3cda:	b1 1d       	adc	r27, r1
    3cdc:	67 2f       	mov	r22, r23
    3cde:	78 2f       	mov	r23, r24
    3ce0:	88 27       	eor	r24, r24
    3ce2:	98 5f       	subi	r25, 0xF8	; 248
    3ce4:	f7 cf       	rjmp	.-18     	; 0x3cd4 <__fp_trunc+0xc>
    3ce6:	86 95       	lsr	r24
    3ce8:	77 95       	ror	r23
    3cea:	67 95       	ror	r22
    3cec:	b1 1d       	adc	r27, r1
    3cee:	93 95       	inc	r25
    3cf0:	96 39       	cpi	r25, 0x96	; 150
    3cf2:	c8 f3       	brcs	.-14     	; 0x3ce6 <__fp_trunc+0x1e>
    3cf4:	08 95       	ret

00003cf6 <__fp_zero>:
    3cf6:	e8 94       	clt

00003cf8 <__fp_szero>:
    3cf8:	bb 27       	eor	r27, r27
    3cfa:	66 27       	eor	r22, r22
    3cfc:	77 27       	eor	r23, r23
    3cfe:	cb 01       	movw	r24, r22
    3d00:	97 f9       	bld	r25, 7
    3d02:	08 95       	ret

00003d04 <__gesf2>:
    3d04:	ec de       	rcall	.-552    	; 0x3ade <__fp_cmp>
    3d06:	08 f4       	brcc	.+2      	; 0x3d0a <__gesf2+0x6>
    3d08:	8f ef       	ldi	r24, 0xFF	; 255
    3d0a:	08 95       	ret

00003d0c <inverse>:
    3d0c:	9b 01       	movw	r18, r22
    3d0e:	ac 01       	movw	r20, r24
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	80 e8       	ldi	r24, 0x80	; 128
    3d16:	9f e3       	ldi	r25, 0x3F	; 63
    3d18:	f9 cd       	rjmp	.-1038   	; 0x390c <__divsf3>

00003d1a <log10>:
    3d1a:	0a d0       	rcall	.+20     	; 0x3d30 <log>
    3d1c:	29 ed       	ldi	r18, 0xD9	; 217
    3d1e:	3b e5       	ldi	r19, 0x5B	; 91
    3d20:	4e ed       	ldi	r20, 0xDE	; 222
    3d22:	5e e3       	ldi	r21, 0x3E	; 62
    3d24:	78 c0       	rjmp	.+240    	; 0x3e16 <__mulsf3>
    3d26:	0e f0       	brts	.+2      	; 0x3d2a <log10+0x10>
    3d28:	1f cf       	rjmp	.-450    	; 0x3b68 <__fp_mpack>
    3d2a:	2c cf       	rjmp	.-424    	; 0x3b84 <__fp_nan>
    3d2c:	68 94       	set
    3d2e:	fb ce       	rjmp	.-522    	; 0x3b26 <__fp_inf>

00003d30 <log>:
    3d30:	b1 df       	rcall	.-158    	; 0x3c94 <__fp_splitA>
    3d32:	c8 f3       	brcs	.-14     	; 0x3d26 <log10+0xc>
    3d34:	99 23       	and	r25, r25
    3d36:	d1 f3       	breq	.-12     	; 0x3d2c <log10+0x12>
    3d38:	c6 f3       	brts	.-16     	; 0x3d2a <log10+0x10>
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	1f 93       	push	r17
    3d40:	0f 93       	push	r16
    3d42:	ff 92       	push	r15
    3d44:	c9 2f       	mov	r28, r25
    3d46:	dd 27       	eor	r29, r29
    3d48:	88 23       	and	r24, r24
    3d4a:	2a f0       	brmi	.+10     	; 0x3d56 <log+0x26>
    3d4c:	21 97       	sbiw	r28, 0x01	; 1
    3d4e:	66 0f       	add	r22, r22
    3d50:	77 1f       	adc	r23, r23
    3d52:	88 1f       	adc	r24, r24
    3d54:	da f7       	brpl	.-10     	; 0x3d4c <log+0x1c>
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f eb       	ldi	r21, 0xBF	; 191
    3d5e:	9f e3       	ldi	r25, 0x3F	; 63
    3d60:	88 39       	cpi	r24, 0x98	; 152
    3d62:	20 f0       	brcs	.+8      	; 0x3d6c <log+0x3c>
    3d64:	80 3e       	cpi	r24, 0xE0	; 224
    3d66:	30 f0       	brcs	.+12     	; 0x3d74 <log+0x44>
    3d68:	21 96       	adiw	r28, 0x01	; 1
    3d6a:	8f 77       	andi	r24, 0x7F	; 127
    3d6c:	02 dd       	rcall	.-1532   	; 0x3772 <__addsf3>
    3d6e:	e7 ed       	ldi	r30, 0xD7	; 215
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <log+0x4a>
    3d74:	fe dc       	rcall	.-1540   	; 0x3772 <__addsf3>
    3d76:	e4 e0       	ldi	r30, 0x04	; 4
    3d78:	f1 e0       	ldi	r31, 0x01	; 1
    3d7a:	07 df       	rcall	.-498    	; 0x3b8a <__fp_powser>
    3d7c:	8b 01       	movw	r16, r22
    3d7e:	be 01       	movw	r22, r28
    3d80:	ec 01       	movw	r28, r24
    3d82:	fb 2e       	mov	r15, r27
    3d84:	6f 57       	subi	r22, 0x7F	; 127
    3d86:	71 09       	sbc	r23, r1
    3d88:	75 95       	asr	r23
    3d8a:	77 1f       	adc	r23, r23
    3d8c:	88 0b       	sbc	r24, r24
    3d8e:	99 0b       	sbc	r25, r25
    3d90:	58 de       	rcall	.-848    	; 0x3a42 <__floatsisf>
    3d92:	28 e1       	ldi	r18, 0x18	; 24
    3d94:	32 e7       	ldi	r19, 0x72	; 114
    3d96:	41 e3       	ldi	r20, 0x31	; 49
    3d98:	5f e3       	ldi	r21, 0x3F	; 63
    3d9a:	49 d0       	rcall	.+146    	; 0x3e2e <__mulsf3x>
    3d9c:	af 2d       	mov	r26, r15
    3d9e:	98 01       	movw	r18, r16
    3da0:	ae 01       	movw	r20, r28
    3da2:	ff 90       	pop	r15
    3da4:	0f 91       	pop	r16
    3da6:	1f 91       	pop	r17
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	f3 dc       	rcall	.-1562   	; 0x3794 <__addsf3x>
    3dae:	48 cf       	rjmp	.-368    	; 0x3c40 <__fp_round>

00003db0 <modf>:
    3db0:	fa 01       	movw	r30, r20
    3db2:	dc 01       	movw	r26, r24
    3db4:	aa 0f       	add	r26, r26
    3db6:	bb 1f       	adc	r27, r27
    3db8:	9b 01       	movw	r18, r22
    3dba:	ac 01       	movw	r20, r24
    3dbc:	bf 57       	subi	r27, 0x7F	; 127
    3dbe:	28 f4       	brcc	.+10     	; 0x3dca <modf+0x1a>
    3dc0:	22 27       	eor	r18, r18
    3dc2:	33 27       	eor	r19, r19
    3dc4:	44 27       	eor	r20, r20
    3dc6:	50 78       	andi	r21, 0x80	; 128
    3dc8:	1f c0       	rjmp	.+62     	; 0x3e08 <modf+0x58>
    3dca:	b7 51       	subi	r27, 0x17	; 23
    3dcc:	88 f4       	brcc	.+34     	; 0x3df0 <modf+0x40>
    3dce:	ab 2f       	mov	r26, r27
    3dd0:	00 24       	eor	r0, r0
    3dd2:	46 95       	lsr	r20
    3dd4:	37 95       	ror	r19
    3dd6:	27 95       	ror	r18
    3dd8:	01 1c       	adc	r0, r1
    3dda:	a3 95       	inc	r26
    3ddc:	d2 f3       	brmi	.-12     	; 0x3dd2 <modf+0x22>
    3dde:	00 20       	and	r0, r0
    3de0:	69 f0       	breq	.+26     	; 0x3dfc <modf+0x4c>
    3de2:	22 0f       	add	r18, r18
    3de4:	33 1f       	adc	r19, r19
    3de6:	44 1f       	adc	r20, r20
    3de8:	b3 95       	inc	r27
    3dea:	da f3       	brmi	.-10     	; 0x3de2 <modf+0x32>
    3dec:	0d d0       	rcall	.+26     	; 0x3e08 <modf+0x58>
    3dee:	c0 cc       	rjmp	.-1664   	; 0x3770 <__subsf3>
    3df0:	61 30       	cpi	r22, 0x01	; 1
    3df2:	71 05       	cpc	r23, r1
    3df4:	a0 e8       	ldi	r26, 0x80	; 128
    3df6:	8a 07       	cpc	r24, r26
    3df8:	b9 46       	sbci	r27, 0x69	; 105
    3dfa:	30 f4       	brcc	.+12     	; 0x3e08 <modf+0x58>
    3dfc:	9b 01       	movw	r18, r22
    3dfe:	ac 01       	movw	r20, r24
    3e00:	66 27       	eor	r22, r22
    3e02:	77 27       	eor	r23, r23
    3e04:	88 27       	eor	r24, r24
    3e06:	90 78       	andi	r25, 0x80	; 128
    3e08:	30 96       	adiw	r30, 0x00	; 0
    3e0a:	21 f0       	breq	.+8      	; 0x3e14 <modf+0x64>
    3e0c:	20 83       	st	Z, r18
    3e0e:	31 83       	std	Z+1, r19	; 0x01
    3e10:	42 83       	std	Z+2, r20	; 0x02
    3e12:	53 83       	std	Z+3, r21	; 0x03
    3e14:	08 95       	ret

00003e16 <__mulsf3>:
    3e16:	0b d0       	rcall	.+22     	; 0x3e2e <__mulsf3x>
    3e18:	13 cf       	rjmp	.-474    	; 0x3c40 <__fp_round>
    3e1a:	dc de       	rcall	.-584    	; 0x3bd4 <__fp_pscA>
    3e1c:	28 f0       	brcs	.+10     	; 0x3e28 <__mulsf3+0x12>
    3e1e:	e1 de       	rcall	.-574    	; 0x3be2 <__fp_pscB>
    3e20:	18 f0       	brcs	.+6      	; 0x3e28 <__mulsf3+0x12>
    3e22:	95 23       	and	r25, r21
    3e24:	09 f0       	breq	.+2      	; 0x3e28 <__mulsf3+0x12>
    3e26:	7f ce       	rjmp	.-770    	; 0x3b26 <__fp_inf>
    3e28:	ad ce       	rjmp	.-678    	; 0x3b84 <__fp_nan>
    3e2a:	11 24       	eor	r1, r1
    3e2c:	65 cf       	rjmp	.-310    	; 0x3cf8 <__fp_szero>

00003e2e <__mulsf3x>:
    3e2e:	2a df       	rcall	.-428    	; 0x3c84 <__fp_split3>
    3e30:	a0 f3       	brcs	.-24     	; 0x3e1a <__mulsf3+0x4>

00003e32 <__mulsf3_pse>:
    3e32:	95 9f       	mul	r25, r21
    3e34:	d1 f3       	breq	.-12     	; 0x3e2a <__mulsf3+0x14>
    3e36:	95 0f       	add	r25, r21
    3e38:	50 e0       	ldi	r21, 0x00	; 0
    3e3a:	55 1f       	adc	r21, r21
    3e3c:	62 9f       	mul	r22, r18
    3e3e:	f0 01       	movw	r30, r0
    3e40:	72 9f       	mul	r23, r18
    3e42:	bb 27       	eor	r27, r27
    3e44:	f0 0d       	add	r31, r0
    3e46:	b1 1d       	adc	r27, r1
    3e48:	63 9f       	mul	r22, r19
    3e4a:	aa 27       	eor	r26, r26
    3e4c:	f0 0d       	add	r31, r0
    3e4e:	b1 1d       	adc	r27, r1
    3e50:	aa 1f       	adc	r26, r26
    3e52:	64 9f       	mul	r22, r20
    3e54:	66 27       	eor	r22, r22
    3e56:	b0 0d       	add	r27, r0
    3e58:	a1 1d       	adc	r26, r1
    3e5a:	66 1f       	adc	r22, r22
    3e5c:	82 9f       	mul	r24, r18
    3e5e:	22 27       	eor	r18, r18
    3e60:	b0 0d       	add	r27, r0
    3e62:	a1 1d       	adc	r26, r1
    3e64:	62 1f       	adc	r22, r18
    3e66:	73 9f       	mul	r23, r19
    3e68:	b0 0d       	add	r27, r0
    3e6a:	a1 1d       	adc	r26, r1
    3e6c:	62 1f       	adc	r22, r18
    3e6e:	83 9f       	mul	r24, r19
    3e70:	a0 0d       	add	r26, r0
    3e72:	61 1d       	adc	r22, r1
    3e74:	22 1f       	adc	r18, r18
    3e76:	74 9f       	mul	r23, r20
    3e78:	33 27       	eor	r19, r19
    3e7a:	a0 0d       	add	r26, r0
    3e7c:	61 1d       	adc	r22, r1
    3e7e:	23 1f       	adc	r18, r19
    3e80:	84 9f       	mul	r24, r20
    3e82:	60 0d       	add	r22, r0
    3e84:	21 1d       	adc	r18, r1
    3e86:	82 2f       	mov	r24, r18
    3e88:	76 2f       	mov	r23, r22
    3e8a:	6a 2f       	mov	r22, r26
    3e8c:	11 24       	eor	r1, r1
    3e8e:	9f 57       	subi	r25, 0x7F	; 127
    3e90:	50 40       	sbci	r21, 0x00	; 0
    3e92:	8a f0       	brmi	.+34     	; 0x3eb6 <__mulsf3_pse+0x84>
    3e94:	e1 f0       	breq	.+56     	; 0x3ece <__mulsf3_pse+0x9c>
    3e96:	88 23       	and	r24, r24
    3e98:	4a f0       	brmi	.+18     	; 0x3eac <__mulsf3_pse+0x7a>
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	bb 1f       	adc	r27, r27
    3ea0:	66 1f       	adc	r22, r22
    3ea2:	77 1f       	adc	r23, r23
    3ea4:	88 1f       	adc	r24, r24
    3ea6:	91 50       	subi	r25, 0x01	; 1
    3ea8:	50 40       	sbci	r21, 0x00	; 0
    3eaa:	a9 f7       	brne	.-22     	; 0x3e96 <__mulsf3_pse+0x64>
    3eac:	9e 3f       	cpi	r25, 0xFE	; 254
    3eae:	51 05       	cpc	r21, r1
    3eb0:	70 f0       	brcs	.+28     	; 0x3ece <__mulsf3_pse+0x9c>
    3eb2:	39 ce       	rjmp	.-910    	; 0x3b26 <__fp_inf>
    3eb4:	21 cf       	rjmp	.-446    	; 0x3cf8 <__fp_szero>
    3eb6:	5f 3f       	cpi	r21, 0xFF	; 255
    3eb8:	ec f3       	brlt	.-6      	; 0x3eb4 <__mulsf3_pse+0x82>
    3eba:	98 3e       	cpi	r25, 0xE8	; 232
    3ebc:	dc f3       	brlt	.-10     	; 0x3eb4 <__mulsf3_pse+0x82>
    3ebe:	86 95       	lsr	r24
    3ec0:	77 95       	ror	r23
    3ec2:	67 95       	ror	r22
    3ec4:	b7 95       	ror	r27
    3ec6:	f7 95       	ror	r31
    3ec8:	e7 95       	ror	r30
    3eca:	9f 5f       	subi	r25, 0xFF	; 255
    3ecc:	c1 f7       	brne	.-16     	; 0x3ebe <__mulsf3_pse+0x8c>
    3ece:	fe 2b       	or	r31, r30
    3ed0:	88 0f       	add	r24, r24
    3ed2:	91 1d       	adc	r25, r1
    3ed4:	96 95       	lsr	r25
    3ed6:	87 95       	ror	r24
    3ed8:	97 f9       	bld	r25, 7
    3eda:	08 95       	ret

00003edc <pow>:
    3edc:	fa 01       	movw	r30, r20
    3ede:	ee 0f       	add	r30, r30
    3ee0:	ff 1f       	adc	r31, r31
    3ee2:	30 96       	adiw	r30, 0x00	; 0
    3ee4:	21 05       	cpc	r18, r1
    3ee6:	31 05       	cpc	r19, r1
    3ee8:	99 f1       	breq	.+102    	; 0x3f50 <pow+0x74>
    3eea:	61 15       	cp	r22, r1
    3eec:	71 05       	cpc	r23, r1
    3eee:	61 f4       	brne	.+24     	; 0x3f08 <pow+0x2c>
    3ef0:	80 38       	cpi	r24, 0x80	; 128
    3ef2:	bf e3       	ldi	r27, 0x3F	; 63
    3ef4:	9b 07       	cpc	r25, r27
    3ef6:	49 f1       	breq	.+82     	; 0x3f4a <pow+0x6e>
    3ef8:	68 94       	set
    3efa:	90 38       	cpi	r25, 0x80	; 128
    3efc:	81 05       	cpc	r24, r1
    3efe:	61 f0       	breq	.+24     	; 0x3f18 <pow+0x3c>
    3f00:	80 38       	cpi	r24, 0x80	; 128
    3f02:	bf ef       	ldi	r27, 0xFF	; 255
    3f04:	9b 07       	cpc	r25, r27
    3f06:	41 f0       	breq	.+16     	; 0x3f18 <pow+0x3c>
    3f08:	99 23       	and	r25, r25
    3f0a:	42 f5       	brpl	.+80     	; 0x3f5c <pow+0x80>
    3f0c:	ff 3f       	cpi	r31, 0xFF	; 255
    3f0e:	e1 05       	cpc	r30, r1
    3f10:	31 05       	cpc	r19, r1
    3f12:	21 05       	cpc	r18, r1
    3f14:	11 f1       	breq	.+68     	; 0x3f5a <pow+0x7e>
    3f16:	e8 94       	clt
    3f18:	08 94       	sec
    3f1a:	e7 95       	ror	r30
    3f1c:	d9 01       	movw	r26, r18
    3f1e:	aa 23       	and	r26, r26
    3f20:	29 f4       	brne	.+10     	; 0x3f2c <pow+0x50>
    3f22:	ab 2f       	mov	r26, r27
    3f24:	be 2f       	mov	r27, r30
    3f26:	f8 5f       	subi	r31, 0xF8	; 248
    3f28:	d0 f3       	brcs	.-12     	; 0x3f1e <pow+0x42>
    3f2a:	10 c0       	rjmp	.+32     	; 0x3f4c <pow+0x70>
    3f2c:	ff 5f       	subi	r31, 0xFF	; 255
    3f2e:	70 f4       	brcc	.+28     	; 0x3f4c <pow+0x70>
    3f30:	a6 95       	lsr	r26
    3f32:	e0 f7       	brcc	.-8      	; 0x3f2c <pow+0x50>
    3f34:	f7 39       	cpi	r31, 0x97	; 151
    3f36:	50 f0       	brcs	.+20     	; 0x3f4c <pow+0x70>
    3f38:	19 f0       	breq	.+6      	; 0x3f40 <pow+0x64>
    3f3a:	ff 3a       	cpi	r31, 0xAF	; 175
    3f3c:	38 f4       	brcc	.+14     	; 0x3f4c <pow+0x70>
    3f3e:	9f 77       	andi	r25, 0x7F	; 127
    3f40:	9f 93       	push	r25
    3f42:	0c d0       	rcall	.+24     	; 0x3f5c <pow+0x80>
    3f44:	0f 90       	pop	r0
    3f46:	07 fc       	sbrc	r0, 7
    3f48:	90 58       	subi	r25, 0x80	; 128
    3f4a:	08 95       	ret
    3f4c:	3e f0       	brts	.+14     	; 0x3f5c <pow+0x80>
    3f4e:	1a ce       	rjmp	.-972    	; 0x3b84 <__fp_nan>
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	80 e8       	ldi	r24, 0x80	; 128
    3f56:	9f e3       	ldi	r25, 0x3F	; 63
    3f58:	08 95       	ret
    3f5a:	4f e7       	ldi	r20, 0x7F	; 127
    3f5c:	9f 77       	andi	r25, 0x7F	; 127
    3f5e:	5f 93       	push	r21
    3f60:	4f 93       	push	r20
    3f62:	3f 93       	push	r19
    3f64:	2f 93       	push	r18
    3f66:	e4 de       	rcall	.-568    	; 0x3d30 <log>
    3f68:	2f 91       	pop	r18
    3f6a:	3f 91       	pop	r19
    3f6c:	4f 91       	pop	r20
    3f6e:	5f 91       	pop	r21
    3f70:	52 df       	rcall	.-348    	; 0x3e16 <__mulsf3>
    3f72:	70 c0       	rjmp	.+224    	; 0x4054 <exp>

00003f74 <round>:
    3f74:	8f de       	rcall	.-738    	; 0x3c94 <__fp_splitA>
    3f76:	e0 f0       	brcs	.+56     	; 0x3fb0 <round+0x3c>
    3f78:	9e 37       	cpi	r25, 0x7E	; 126
    3f7a:	d8 f0       	brcs	.+54     	; 0x3fb2 <round+0x3e>
    3f7c:	96 39       	cpi	r25, 0x96	; 150
    3f7e:	b8 f4       	brcc	.+46     	; 0x3fae <round+0x3a>
    3f80:	9e 38       	cpi	r25, 0x8E	; 142
    3f82:	48 f4       	brcc	.+18     	; 0x3f96 <round+0x22>
    3f84:	67 2f       	mov	r22, r23
    3f86:	78 2f       	mov	r23, r24
    3f88:	88 27       	eor	r24, r24
    3f8a:	98 5f       	subi	r25, 0xF8	; 248
    3f8c:	f9 cf       	rjmp	.-14     	; 0x3f80 <round+0xc>
    3f8e:	86 95       	lsr	r24
    3f90:	77 95       	ror	r23
    3f92:	67 95       	ror	r22
    3f94:	93 95       	inc	r25
    3f96:	95 39       	cpi	r25, 0x95	; 149
    3f98:	d0 f3       	brcs	.-12     	; 0x3f8e <round+0x1a>
    3f9a:	b6 2f       	mov	r27, r22
    3f9c:	b1 70       	andi	r27, 0x01	; 1
    3f9e:	6b 0f       	add	r22, r27
    3fa0:	71 1d       	adc	r23, r1
    3fa2:	81 1d       	adc	r24, r1
    3fa4:	20 f4       	brcc	.+8      	; 0x3fae <round+0x3a>
    3fa6:	87 95       	ror	r24
    3fa8:	77 95       	ror	r23
    3faa:	67 95       	ror	r22
    3fac:	93 95       	inc	r25
    3fae:	c1 cd       	rjmp	.-1150   	; 0x3b32 <__fp_mintl>
    3fb0:	db cd       	rjmp	.-1098   	; 0x3b68 <__fp_mpack>
    3fb2:	a2 ce       	rjmp	.-700    	; 0x3cf8 <__fp_szero>

00003fb4 <sin>:
    3fb4:	9f 93       	push	r25
    3fb6:	1d de       	rcall	.-966    	; 0x3bf2 <__fp_rempio2>
    3fb8:	0f 90       	pop	r0
    3fba:	07 fc       	sbrc	r0, 7
    3fbc:	ee 5f       	subi	r30, 0xFE	; 254
    3fbe:	51 ce       	rjmp	.-862    	; 0x3c62 <__fp_sinus>
    3fc0:	11 f4       	brne	.+4      	; 0x3fc6 <sin+0x12>
    3fc2:	0e f4       	brtc	.+2      	; 0x3fc6 <sin+0x12>
    3fc4:	df cd       	rjmp	.-1090   	; 0x3b84 <__fp_nan>
    3fc6:	d0 cd       	rjmp	.-1120   	; 0x3b68 <__fp_mpack>

00003fc8 <sqrt>:
    3fc8:	65 de       	rcall	.-822    	; 0x3c94 <__fp_splitA>
    3fca:	d0 f3       	brcs	.-12     	; 0x3fc0 <sin+0xc>
    3fcc:	99 23       	and	r25, r25
    3fce:	d9 f3       	breq	.-10     	; 0x3fc6 <sin+0x12>
    3fd0:	ce f3       	brts	.-14     	; 0x3fc4 <sin+0x10>
    3fd2:	9f 57       	subi	r25, 0x7F	; 127
    3fd4:	55 0b       	sbc	r21, r21
    3fd6:	87 ff       	sbrs	r24, 7
    3fd8:	69 d0       	rcall	.+210    	; 0x40ac <__fp_norm2>
    3fda:	00 24       	eor	r0, r0
    3fdc:	a0 e6       	ldi	r26, 0x60	; 96
    3fde:	40 ea       	ldi	r20, 0xA0	; 160
    3fe0:	90 01       	movw	r18, r0
    3fe2:	80 58       	subi	r24, 0x80	; 128
    3fe4:	56 95       	lsr	r21
    3fe6:	97 95       	ror	r25
    3fe8:	28 f4       	brcc	.+10     	; 0x3ff4 <sqrt+0x2c>
    3fea:	80 5c       	subi	r24, 0xC0	; 192
    3fec:	66 0f       	add	r22, r22
    3fee:	77 1f       	adc	r23, r23
    3ff0:	88 1f       	adc	r24, r24
    3ff2:	20 f0       	brcs	.+8      	; 0x3ffc <sqrt+0x34>
    3ff4:	26 17       	cp	r18, r22
    3ff6:	37 07       	cpc	r19, r23
    3ff8:	48 07       	cpc	r20, r24
    3ffa:	30 f4       	brcc	.+12     	; 0x4008 <sqrt+0x40>
    3ffc:	62 1b       	sub	r22, r18
    3ffe:	73 0b       	sbc	r23, r19
    4000:	84 0b       	sbc	r24, r20
    4002:	20 29       	or	r18, r0
    4004:	31 29       	or	r19, r1
    4006:	4a 2b       	or	r20, r26
    4008:	a6 95       	lsr	r26
    400a:	17 94       	ror	r1
    400c:	07 94       	ror	r0
    400e:	20 25       	eor	r18, r0
    4010:	31 25       	eor	r19, r1
    4012:	4a 27       	eor	r20, r26
    4014:	58 f7       	brcc	.-42     	; 0x3fec <sqrt+0x24>
    4016:	66 0f       	add	r22, r22
    4018:	77 1f       	adc	r23, r23
    401a:	88 1f       	adc	r24, r24
    401c:	20 f0       	brcs	.+8      	; 0x4026 <sqrt+0x5e>
    401e:	26 17       	cp	r18, r22
    4020:	37 07       	cpc	r19, r23
    4022:	48 07       	cpc	r20, r24
    4024:	30 f4       	brcc	.+12     	; 0x4032 <sqrt+0x6a>
    4026:	62 0b       	sbc	r22, r18
    4028:	73 0b       	sbc	r23, r19
    402a:	84 0b       	sbc	r24, r20
    402c:	20 0d       	add	r18, r0
    402e:	31 1d       	adc	r19, r1
    4030:	41 1d       	adc	r20, r1
    4032:	a0 95       	com	r26
    4034:	81 f7       	brne	.-32     	; 0x4016 <sqrt+0x4e>
    4036:	b9 01       	movw	r22, r18
    4038:	84 2f       	mov	r24, r20
    403a:	91 58       	subi	r25, 0x81	; 129
    403c:	88 0f       	add	r24, r24
    403e:	96 95       	lsr	r25
    4040:	87 95       	ror	r24
    4042:	08 95       	ret

00004044 <square>:
    4044:	9b 01       	movw	r18, r22
    4046:	ac 01       	movw	r20, r24
    4048:	e6 ce       	rjmp	.-564    	; 0x3e16 <__mulsf3>
    404a:	19 f4       	brne	.+6      	; 0x4052 <square+0xe>
    404c:	0e f0       	brts	.+2      	; 0x4050 <square+0xc>
    404e:	6b cd       	rjmp	.-1322   	; 0x3b26 <__fp_inf>
    4050:	52 ce       	rjmp	.-860    	; 0x3cf6 <__fp_zero>
    4052:	98 cd       	rjmp	.-1232   	; 0x3b84 <__fp_nan>

00004054 <exp>:
    4054:	1f de       	rcall	.-962    	; 0x3c94 <__fp_splitA>
    4056:	c8 f3       	brcs	.-14     	; 0x404a <square+0x6>
    4058:	96 38       	cpi	r25, 0x86	; 134
    405a:	c0 f7       	brcc	.-16     	; 0x404c <square+0x8>
    405c:	07 f8       	bld	r0, 7
    405e:	0f 92       	push	r0
    4060:	e8 94       	clt
    4062:	2b e3       	ldi	r18, 0x3B	; 59
    4064:	3a ea       	ldi	r19, 0xAA	; 170
    4066:	48 eb       	ldi	r20, 0xB8	; 184
    4068:	5f e7       	ldi	r21, 0x7F	; 127
    406a:	e3 de       	rcall	.-570    	; 0x3e32 <__mulsf3_pse>
    406c:	0f 92       	push	r0
    406e:	0f 92       	push	r0
    4070:	0f 92       	push	r0
    4072:	4d b7       	in	r20, 0x3d	; 61
    4074:	5e b7       	in	r21, 0x3e	; 62
    4076:	0f 92       	push	r0
    4078:	9b de       	rcall	.-714    	; 0x3db0 <modf>
    407a:	e1 e3       	ldi	r30, 0x31	; 49
    407c:	f1 e0       	ldi	r31, 0x01	; 1
    407e:	85 dd       	rcall	.-1270   	; 0x3b8a <__fp_powser>
    4080:	4f 91       	pop	r20
    4082:	5f 91       	pop	r21
    4084:	ef 91       	pop	r30
    4086:	ff 91       	pop	r31
    4088:	e5 95       	asr	r30
    408a:	ee 1f       	adc	r30, r30
    408c:	ff 1f       	adc	r31, r31
    408e:	49 f0       	breq	.+18     	; 0x40a2 <exp+0x4e>
    4090:	fe 57       	subi	r31, 0x7E	; 126
    4092:	e0 68       	ori	r30, 0x80	; 128
    4094:	44 27       	eor	r20, r20
    4096:	ee 0f       	add	r30, r30
    4098:	44 1f       	adc	r20, r20
    409a:	fa 95       	dec	r31
    409c:	e1 f7       	brne	.-8      	; 0x4096 <exp+0x42>
    409e:	41 95       	neg	r20
    40a0:	55 0b       	sbc	r21, r21
    40a2:	1e d0       	rcall	.+60     	; 0x40e0 <ldexp>
    40a4:	0f 90       	pop	r0
    40a6:	07 fe       	sbrs	r0, 7
    40a8:	31 ce       	rjmp	.-926    	; 0x3d0c <inverse>
    40aa:	08 95       	ret

000040ac <__fp_norm2>:
    40ac:	91 50       	subi	r25, 0x01	; 1
    40ae:	50 40       	sbci	r21, 0x00	; 0
    40b0:	66 0f       	add	r22, r22
    40b2:	77 1f       	adc	r23, r23
    40b4:	88 1f       	adc	r24, r24
    40b6:	d2 f7       	brpl	.-12     	; 0x40ac <__fp_norm2>
    40b8:	08 95       	ret

000040ba <__fp_powsodd>:
    40ba:	9f 93       	push	r25
    40bc:	8f 93       	push	r24
    40be:	7f 93       	push	r23
    40c0:	6f 93       	push	r22
    40c2:	ff 93       	push	r31
    40c4:	ef 93       	push	r30
    40c6:	9b 01       	movw	r18, r22
    40c8:	ac 01       	movw	r20, r24
    40ca:	a5 de       	rcall	.-694    	; 0x3e16 <__mulsf3>
    40cc:	ef 91       	pop	r30
    40ce:	ff 91       	pop	r31
    40d0:	5c dd       	rcall	.-1352   	; 0x3b8a <__fp_powser>
    40d2:	2f 91       	pop	r18
    40d4:	3f 91       	pop	r19
    40d6:	4f 91       	pop	r20
    40d8:	5f 91       	pop	r21
    40da:	9d ce       	rjmp	.-710    	; 0x3e16 <__mulsf3>
    40dc:	24 cd       	rjmp	.-1464   	; 0x3b26 <__fp_inf>
    40de:	44 cd       	rjmp	.-1400   	; 0x3b68 <__fp_mpack>

000040e0 <ldexp>:
    40e0:	d9 dd       	rcall	.-1102   	; 0x3c94 <__fp_splitA>
    40e2:	e8 f3       	brcs	.-6      	; 0x40de <__fp_powsodd+0x24>
    40e4:	99 23       	and	r25, r25
    40e6:	d9 f3       	breq	.-10     	; 0x40de <__fp_powsodd+0x24>
    40e8:	94 0f       	add	r25, r20
    40ea:	51 1d       	adc	r21, r1
    40ec:	bb f3       	brvs	.-18     	; 0x40dc <__fp_powsodd+0x22>
    40ee:	91 50       	subi	r25, 0x01	; 1
    40f0:	50 40       	sbci	r21, 0x00	; 0
    40f2:	94 f0       	brlt	.+36     	; 0x4118 <__stack+0x19>
    40f4:	59 f0       	breq	.+22     	; 0x410c <__stack+0xd>
    40f6:	88 23       	and	r24, r24
    40f8:	32 f0       	brmi	.+12     	; 0x4106 <__stack+0x7>
    40fa:	66 0f       	add	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	88 1f       	adc	r24, r24
    4100:	91 50       	subi	r25, 0x01	; 1
    4102:	50 40       	sbci	r21, 0x00	; 0
    4104:	c1 f7       	brne	.-16     	; 0x40f6 <ldexp+0x16>
    4106:	9e 3f       	cpi	r25, 0xFE	; 254
    4108:	51 05       	cpc	r21, r1
    410a:	44 f7       	brge	.-48     	; 0x40dc <__fp_powsodd+0x22>
    410c:	88 0f       	add	r24, r24
    410e:	91 1d       	adc	r25, r1
    4110:	96 95       	lsr	r25
    4112:	87 95       	ror	r24
    4114:	97 f9       	bld	r25, 7
    4116:	08 95       	ret
    4118:	5f 3f       	cpi	r21, 0xFF	; 255
    411a:	ac f0       	brlt	.+42     	; 0x4146 <__stack+0x47>
    411c:	98 3e       	cpi	r25, 0xE8	; 232
    411e:	9c f0       	brlt	.+38     	; 0x4146 <__stack+0x47>
    4120:	bb 27       	eor	r27, r27
    4122:	86 95       	lsr	r24
    4124:	77 95       	ror	r23
    4126:	67 95       	ror	r22
    4128:	b7 95       	ror	r27
    412a:	08 f4       	brcc	.+2      	; 0x412e <__stack+0x2f>
    412c:	b1 60       	ori	r27, 0x01	; 1
    412e:	93 95       	inc	r25
    4130:	c1 f7       	brne	.-16     	; 0x4122 <__stack+0x23>
    4132:	bb 0f       	add	r27, r27
    4134:	58 f7       	brcc	.-42     	; 0x410c <__stack+0xd>
    4136:	11 f4       	brne	.+4      	; 0x413c <__stack+0x3d>
    4138:	60 ff       	sbrs	r22, 0
    413a:	e8 cf       	rjmp	.-48     	; 0x410c <__stack+0xd>
    413c:	6f 5f       	subi	r22, 0xFF	; 255
    413e:	7f 4f       	sbci	r23, 0xFF	; 255
    4140:	8f 4f       	sbci	r24, 0xFF	; 255
    4142:	9f 4f       	sbci	r25, 0xFF	; 255
    4144:	e3 cf       	rjmp	.-58     	; 0x410c <__stack+0xd>
    4146:	d8 cd       	rjmp	.-1104   	; 0x3cf8 <__fp_szero>

00004148 <malloc>:
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	cf 93       	push	r28
    414e:	df 93       	push	r29
    4150:	82 30       	cpi	r24, 0x02	; 2
    4152:	91 05       	cpc	r25, r1
    4154:	10 f4       	brcc	.+4      	; 0x415a <malloc+0x12>
    4156:	82 e0       	ldi	r24, 0x02	; 2
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	e0 91 62 04 	lds	r30, 0x0462
    415e:	f0 91 63 04 	lds	r31, 0x0463
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	c0 e0       	ldi	r28, 0x00	; 0
    4168:	d0 e0       	ldi	r29, 0x00	; 0
    416a:	23 c0       	rjmp	.+70     	; 0x41b2 <malloc+0x6a>
    416c:	40 81       	ld	r20, Z
    416e:	51 81       	ldd	r21, Z+1	; 0x01
    4170:	48 17       	cp	r20, r24
    4172:	59 07       	cpc	r21, r25
    4174:	a8 f0       	brcs	.+42     	; 0x41a0 <malloc+0x58>
    4176:	48 17       	cp	r20, r24
    4178:	59 07       	cpc	r21, r25
    417a:	61 f4       	brne	.+24     	; 0x4194 <malloc+0x4c>
    417c:	82 81       	ldd	r24, Z+2	; 0x02
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	20 97       	sbiw	r28, 0x00	; 0
    4182:	19 f0       	breq	.+6      	; 0x418a <malloc+0x42>
    4184:	9b 83       	std	Y+3, r25	; 0x03
    4186:	8a 83       	std	Y+2, r24	; 0x02
    4188:	2e c0       	rjmp	.+92     	; 0x41e6 <malloc+0x9e>
    418a:	90 93 63 04 	sts	0x0463, r25
    418e:	80 93 62 04 	sts	0x0462, r24
    4192:	29 c0       	rjmp	.+82     	; 0x41e6 <malloc+0x9e>
    4194:	21 15       	cp	r18, r1
    4196:	31 05       	cpc	r19, r1
    4198:	29 f0       	breq	.+10     	; 0x41a4 <malloc+0x5c>
    419a:	42 17       	cp	r20, r18
    419c:	53 07       	cpc	r21, r19
    419e:	10 f0       	brcs	.+4      	; 0x41a4 <malloc+0x5c>
    41a0:	a9 01       	movw	r20, r18
    41a2:	02 c0       	rjmp	.+4      	; 0x41a8 <malloc+0x60>
    41a4:	be 01       	movw	r22, r28
    41a6:	df 01       	movw	r26, r30
    41a8:	02 81       	ldd	r16, Z+2	; 0x02
    41aa:	13 81       	ldd	r17, Z+3	; 0x03
    41ac:	ef 01       	movw	r28, r30
    41ae:	9a 01       	movw	r18, r20
    41b0:	f8 01       	movw	r30, r16
    41b2:	30 97       	sbiw	r30, 0x00	; 0
    41b4:	d9 f6       	brne	.-74     	; 0x416c <malloc+0x24>
    41b6:	21 15       	cp	r18, r1
    41b8:	31 05       	cpc	r19, r1
    41ba:	09 f1       	breq	.+66     	; 0x41fe <malloc+0xb6>
    41bc:	28 1b       	sub	r18, r24
    41be:	39 0b       	sbc	r19, r25
    41c0:	24 30       	cpi	r18, 0x04	; 4
    41c2:	31 05       	cpc	r19, r1
    41c4:	90 f4       	brcc	.+36     	; 0x41ea <malloc+0xa2>
    41c6:	12 96       	adiw	r26, 0x02	; 2
    41c8:	8d 91       	ld	r24, X+
    41ca:	9c 91       	ld	r25, X
    41cc:	13 97       	sbiw	r26, 0x03	; 3
    41ce:	61 15       	cp	r22, r1
    41d0:	71 05       	cpc	r23, r1
    41d2:	21 f0       	breq	.+8      	; 0x41dc <malloc+0x94>
    41d4:	fb 01       	movw	r30, r22
    41d6:	93 83       	std	Z+3, r25	; 0x03
    41d8:	82 83       	std	Z+2, r24	; 0x02
    41da:	04 c0       	rjmp	.+8      	; 0x41e4 <malloc+0x9c>
    41dc:	90 93 63 04 	sts	0x0463, r25
    41e0:	80 93 62 04 	sts	0x0462, r24
    41e4:	fd 01       	movw	r30, r26
    41e6:	32 96       	adiw	r30, 0x02	; 2
    41e8:	44 c0       	rjmp	.+136    	; 0x4272 <malloc+0x12a>
    41ea:	fd 01       	movw	r30, r26
    41ec:	e2 0f       	add	r30, r18
    41ee:	f3 1f       	adc	r31, r19
    41f0:	81 93       	st	Z+, r24
    41f2:	91 93       	st	Z+, r25
    41f4:	22 50       	subi	r18, 0x02	; 2
    41f6:	31 09       	sbc	r19, r1
    41f8:	2d 93       	st	X+, r18
    41fa:	3c 93       	st	X, r19
    41fc:	3a c0       	rjmp	.+116    	; 0x4272 <malloc+0x12a>
    41fe:	20 91 60 04 	lds	r18, 0x0460
    4202:	30 91 61 04 	lds	r19, 0x0461
    4206:	23 2b       	or	r18, r19
    4208:	41 f4       	brne	.+16     	; 0x421a <malloc+0xd2>
    420a:	20 91 04 01 	lds	r18, 0x0104
    420e:	30 91 05 01 	lds	r19, 0x0105
    4212:	30 93 61 04 	sts	0x0461, r19
    4216:	20 93 60 04 	sts	0x0460, r18
    421a:	20 91 02 01 	lds	r18, 0x0102
    421e:	30 91 03 01 	lds	r19, 0x0103
    4222:	21 15       	cp	r18, r1
    4224:	31 05       	cpc	r19, r1
    4226:	41 f4       	brne	.+16     	; 0x4238 <malloc+0xf0>
    4228:	2d b7       	in	r18, 0x3d	; 61
    422a:	3e b7       	in	r19, 0x3e	; 62
    422c:	40 91 06 01 	lds	r20, 0x0106
    4230:	50 91 07 01 	lds	r21, 0x0107
    4234:	24 1b       	sub	r18, r20
    4236:	35 0b       	sbc	r19, r21
    4238:	e0 91 60 04 	lds	r30, 0x0460
    423c:	f0 91 61 04 	lds	r31, 0x0461
    4240:	e2 17       	cp	r30, r18
    4242:	f3 07       	cpc	r31, r19
    4244:	a0 f4       	brcc	.+40     	; 0x426e <malloc+0x126>
    4246:	2e 1b       	sub	r18, r30
    4248:	3f 0b       	sbc	r19, r31
    424a:	28 17       	cp	r18, r24
    424c:	39 07       	cpc	r19, r25
    424e:	78 f0       	brcs	.+30     	; 0x426e <malloc+0x126>
    4250:	ac 01       	movw	r20, r24
    4252:	4e 5f       	subi	r20, 0xFE	; 254
    4254:	5f 4f       	sbci	r21, 0xFF	; 255
    4256:	24 17       	cp	r18, r20
    4258:	35 07       	cpc	r19, r21
    425a:	48 f0       	brcs	.+18     	; 0x426e <malloc+0x126>
    425c:	4e 0f       	add	r20, r30
    425e:	5f 1f       	adc	r21, r31
    4260:	50 93 61 04 	sts	0x0461, r21
    4264:	40 93 60 04 	sts	0x0460, r20
    4268:	81 93       	st	Z+, r24
    426a:	91 93       	st	Z+, r25
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <malloc+0x12a>
    426e:	e0 e0       	ldi	r30, 0x00	; 0
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	cf 01       	movw	r24, r30
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	1f 91       	pop	r17
    427a:	0f 91       	pop	r16
    427c:	08 95       	ret

0000427e <free>:
    427e:	ef 92       	push	r14
    4280:	ff 92       	push	r15
    4282:	0f 93       	push	r16
    4284:	1f 93       	push	r17
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	00 97       	sbiw	r24, 0x00	; 0
    428c:	09 f4       	brne	.+2      	; 0x4290 <free+0x12>
    428e:	8e c0       	rjmp	.+284    	; 0x43ac <free+0x12e>
    4290:	dc 01       	movw	r26, r24
    4292:	12 97       	sbiw	r26, 0x02	; 2
    4294:	13 96       	adiw	r26, 0x03	; 3
    4296:	1c 92       	st	X, r1
    4298:	1e 92       	st	-X, r1
    429a:	12 97       	sbiw	r26, 0x02	; 2
    429c:	e0 90 62 04 	lds	r14, 0x0462
    42a0:	f0 90 63 04 	lds	r15, 0x0463
    42a4:	e1 14       	cp	r14, r1
    42a6:	f1 04       	cpc	r15, r1
    42a8:	89 f4       	brne	.+34     	; 0x42cc <free+0x4e>
    42aa:	2d 91       	ld	r18, X+
    42ac:	3c 91       	ld	r19, X
    42ae:	11 97       	sbiw	r26, 0x01	; 1
    42b0:	28 0f       	add	r18, r24
    42b2:	39 1f       	adc	r19, r25
    42b4:	80 91 60 04 	lds	r24, 0x0460
    42b8:	90 91 61 04 	lds	r25, 0x0461
    42bc:	82 17       	cp	r24, r18
    42be:	93 07       	cpc	r25, r19
    42c0:	89 f5       	brne	.+98     	; 0x4324 <free+0xa6>
    42c2:	b0 93 61 04 	sts	0x0461, r27
    42c6:	a0 93 60 04 	sts	0x0460, r26
    42ca:	70 c0       	rjmp	.+224    	; 0x43ac <free+0x12e>
    42cc:	e7 01       	movw	r28, r14
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	01 c0       	rjmp	.+2      	; 0x42d6 <free+0x58>
    42d4:	ea 01       	movw	r28, r20
    42d6:	ca 17       	cp	r28, r26
    42d8:	db 07       	cpc	r29, r27
    42da:	38 f4       	brcc	.+14     	; 0x42ea <free+0x6c>
    42dc:	4a 81       	ldd	r20, Y+2	; 0x02
    42de:	5b 81       	ldd	r21, Y+3	; 0x03
    42e0:	9e 01       	movw	r18, r28
    42e2:	41 15       	cp	r20, r1
    42e4:	51 05       	cpc	r21, r1
    42e6:	b1 f7       	brne	.-20     	; 0x42d4 <free+0x56>
    42e8:	22 c0       	rjmp	.+68     	; 0x432e <free+0xb0>
    42ea:	ac 01       	movw	r20, r24
    42ec:	42 50       	subi	r20, 0x02	; 2
    42ee:	51 09       	sbc	r21, r1
    42f0:	fa 01       	movw	r30, r20
    42f2:	d3 83       	std	Z+3, r29	; 0x03
    42f4:	c2 83       	std	Z+2, r28	; 0x02
    42f6:	00 81       	ld	r16, Z
    42f8:	11 81       	ldd	r17, Z+1	; 0x01
    42fa:	bc 01       	movw	r22, r24
    42fc:	60 0f       	add	r22, r16
    42fe:	71 1f       	adc	r23, r17
    4300:	6c 17       	cp	r22, r28
    4302:	7d 07       	cpc	r23, r29
    4304:	61 f4       	brne	.+24     	; 0x431e <free+0xa0>
    4306:	68 81       	ld	r22, Y
    4308:	79 81       	ldd	r23, Y+1	; 0x01
    430a:	60 0f       	add	r22, r16
    430c:	71 1f       	adc	r23, r17
    430e:	6e 5f       	subi	r22, 0xFE	; 254
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	71 83       	std	Z+1, r23	; 0x01
    4314:	60 83       	st	Z, r22
    4316:	6a 81       	ldd	r22, Y+2	; 0x02
    4318:	7b 81       	ldd	r23, Y+3	; 0x03
    431a:	73 83       	std	Z+3, r23	; 0x03
    431c:	62 83       	std	Z+2, r22	; 0x02
    431e:	21 15       	cp	r18, r1
    4320:	31 05       	cpc	r19, r1
    4322:	29 f4       	brne	.+10     	; 0x432e <free+0xb0>
    4324:	b0 93 63 04 	sts	0x0463, r27
    4328:	a0 93 62 04 	sts	0x0462, r26
    432c:	3f c0       	rjmp	.+126    	; 0x43ac <free+0x12e>
    432e:	f9 01       	movw	r30, r18
    4330:	b3 83       	std	Z+3, r27	; 0x03
    4332:	a2 83       	std	Z+2, r26	; 0x02
    4334:	e9 01       	movw	r28, r18
    4336:	49 91       	ld	r20, Y+
    4338:	59 91       	ld	r21, Y+
    433a:	c4 0f       	add	r28, r20
    433c:	d5 1f       	adc	r29, r21
    433e:	ac 17       	cp	r26, r28
    4340:	bd 07       	cpc	r27, r29
    4342:	71 f4       	brne	.+28     	; 0x4360 <free+0xe2>
    4344:	dc 01       	movw	r26, r24
    4346:	9e 91       	ld	r25, -X
    4348:	8e 91       	ld	r24, -X
    434a:	84 0f       	add	r24, r20
    434c:	95 1f       	adc	r25, r21
    434e:	02 96       	adiw	r24, 0x02	; 2
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	80 83       	st	Z, r24
    4354:	12 96       	adiw	r26, 0x02	; 2
    4356:	8d 91       	ld	r24, X+
    4358:	9c 91       	ld	r25, X
    435a:	13 97       	sbiw	r26, 0x03	; 3
    435c:	93 83       	std	Z+3, r25	; 0x03
    435e:	82 83       	std	Z+2, r24	; 0x02
    4360:	a0 e0       	ldi	r26, 0x00	; 0
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	02 c0       	rjmp	.+4      	; 0x436a <free+0xec>
    4366:	d7 01       	movw	r26, r14
    4368:	7c 01       	movw	r14, r24
    436a:	f7 01       	movw	r30, r14
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	00 97       	sbiw	r24, 0x00	; 0
    4372:	c9 f7       	brne	.-14     	; 0x4366 <free+0xe8>
    4374:	c7 01       	movw	r24, r14
    4376:	02 96       	adiw	r24, 0x02	; 2
    4378:	20 81       	ld	r18, Z
    437a:	31 81       	ldd	r19, Z+1	; 0x01
    437c:	82 0f       	add	r24, r18
    437e:	93 1f       	adc	r25, r19
    4380:	20 91 60 04 	lds	r18, 0x0460
    4384:	30 91 61 04 	lds	r19, 0x0461
    4388:	28 17       	cp	r18, r24
    438a:	39 07       	cpc	r19, r25
    438c:	79 f4       	brne	.+30     	; 0x43ac <free+0x12e>
    438e:	10 97       	sbiw	r26, 0x00	; 0
    4390:	29 f4       	brne	.+10     	; 0x439c <free+0x11e>
    4392:	10 92 63 04 	sts	0x0463, r1
    4396:	10 92 62 04 	sts	0x0462, r1
    439a:	04 c0       	rjmp	.+8      	; 0x43a4 <free+0x126>
    439c:	13 96       	adiw	r26, 0x03	; 3
    439e:	1c 92       	st	X, r1
    43a0:	1e 92       	st	-X, r1
    43a2:	12 97       	sbiw	r26, 0x02	; 2
    43a4:	f0 92 61 04 	sts	0x0461, r15
    43a8:	e0 92 60 04 	sts	0x0460, r14
    43ac:	df 91       	pop	r29
    43ae:	cf 91       	pop	r28
    43b0:	1f 91       	pop	r17
    43b2:	0f 91       	pop	r16
    43b4:	ff 90       	pop	r15
    43b6:	ef 90       	pop	r14
    43b8:	08 95       	ret

000043ba <strtod>:
    43ba:	8f 92       	push	r8
    43bc:	9f 92       	push	r9
    43be:	af 92       	push	r10
    43c0:	bf 92       	push	r11
    43c2:	cf 92       	push	r12
    43c4:	df 92       	push	r13
    43c6:	ef 92       	push	r14
    43c8:	ff 92       	push	r15
    43ca:	0f 93       	push	r16
    43cc:	1f 93       	push	r17
    43ce:	cf 93       	push	r28
    43d0:	df 93       	push	r29
    43d2:	8b 01       	movw	r16, r22
    43d4:	61 15       	cp	r22, r1
    43d6:	71 05       	cpc	r23, r1
    43d8:	19 f0       	breq	.+6      	; 0x43e0 <strtod+0x26>
    43da:	fb 01       	movw	r30, r22
    43dc:	80 83       	st	Z, r24
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	7c 01       	movw	r14, r24
    43e2:	f7 01       	movw	r30, r14
    43e4:	c1 90       	ld	r12, Z+
    43e6:	7f 01       	movw	r14, r30
    43e8:	ef 01       	movw	r28, r30
    43ea:	8c 2d       	mov	r24, r12
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 42 23 	call	0x4684	; 0x4684 <isspace>
    43f2:	89 2b       	or	r24, r25
    43f4:	b1 f7       	brne	.-20     	; 0x43e2 <strtod+0x28>
    43f6:	fd e2       	ldi	r31, 0x2D	; 45
    43f8:	cf 12       	cpse	r12, r31
    43fa:	04 c0       	rjmp	.+8      	; 0x4404 <strtod+0x4a>
    43fc:	c9 90       	ld	r12, Y+
    43fe:	dd 24       	eor	r13, r13
    4400:	d3 94       	inc	r13
    4402:	05 c0       	rjmp	.+10     	; 0x440e <strtod+0x54>
    4404:	2b e2       	ldi	r18, 0x2B	; 43
    4406:	c2 12       	cpse	r12, r18
    4408:	01 c0       	rjmp	.+2      	; 0x440c <strtod+0x52>
    440a:	c9 90       	ld	r12, Y+
    440c:	d1 2c       	mov	r13, r1
    440e:	7e 01       	movw	r14, r28
    4410:	41 e0       	ldi	r20, 0x01	; 1
    4412:	e4 1a       	sub	r14, r20
    4414:	f1 08       	sbc	r15, r1
    4416:	43 e0       	ldi	r20, 0x03	; 3
    4418:	50 e0       	ldi	r21, 0x00	; 0
    441a:	69 e5       	ldi	r22, 0x59	; 89
    441c:	71 e0       	ldi	r23, 0x01	; 1
    441e:	c7 01       	movw	r24, r14
    4420:	0e 94 4a 23 	call	0x4694	; 0x4694 <strncasecmp_P>
    4424:	89 2b       	or	r24, r25
    4426:	e9 f4       	brne	.+58     	; 0x4462 <strtod+0xa8>
    4428:	7e 01       	movw	r14, r28
    442a:	82 e0       	ldi	r24, 0x02	; 2
    442c:	e8 0e       	add	r14, r24
    442e:	f1 1c       	adc	r15, r1
    4430:	45 e0       	ldi	r20, 0x05	; 5
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	6c e5       	ldi	r22, 0x5C	; 92
    4436:	71 e0       	ldi	r23, 0x01	; 1
    4438:	c7 01       	movw	r24, r14
    443a:	0e 94 4a 23 	call	0x4694	; 0x4694 <strncasecmp_P>
    443e:	89 2b       	or	r24, r25
    4440:	21 f4       	brne	.+8      	; 0x444a <strtod+0x90>
    4442:	7e 01       	movw	r14, r28
    4444:	e7 e0       	ldi	r30, 0x07	; 7
    4446:	ee 0e       	add	r14, r30
    4448:	f1 1c       	adc	r15, r1
    444a:	01 15       	cp	r16, r1
    444c:	11 05       	cpc	r17, r1
    444e:	19 f0       	breq	.+6      	; 0x4456 <strtod+0x9c>
    4450:	f8 01       	movw	r30, r16
    4452:	f1 82       	std	Z+1, r15	; 0x01
    4454:	e0 82       	st	Z, r14
    4456:	10 e0       	ldi	r17, 0x00	; 0
    4458:	d0 e0       	ldi	r29, 0x00	; 0
    445a:	c0 e8       	ldi	r28, 0x80	; 128
    445c:	d1 10       	cpse	r13, r1
    445e:	fb c0       	rjmp	.+502    	; 0x4656 <strtod+0x29c>
    4460:	ff c0       	rjmp	.+510    	; 0x4660 <strtod+0x2a6>
    4462:	43 e0       	ldi	r20, 0x03	; 3
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	61 e6       	ldi	r22, 0x61	; 97
    4468:	71 e0       	ldi	r23, 0x01	; 1
    446a:	c7 01       	movw	r24, r14
    446c:	0e 94 4a 23 	call	0x4694	; 0x4694 <strncasecmp_P>
    4470:	89 2b       	or	r24, r25
    4472:	49 f4       	brne	.+18     	; 0x4486 <strtod+0xcc>
    4474:	01 15       	cp	r16, r1
    4476:	11 05       	cpc	r17, r1
    4478:	09 f4       	brne	.+2      	; 0x447c <strtod+0xc2>
    447a:	ef c0       	rjmp	.+478    	; 0x465a <strtod+0x2a0>
    447c:	22 96       	adiw	r28, 0x02	; 2
    447e:	f8 01       	movw	r30, r16
    4480:	d1 83       	std	Z+1, r29	; 0x01
    4482:	c0 83       	st	Z, r28
    4484:	ea c0       	rjmp	.+468    	; 0x465a <strtod+0x2a0>
    4486:	60 e0       	ldi	r22, 0x00	; 0
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	cb 01       	movw	r24, r22
    448c:	e1 2c       	mov	r14, r1
    448e:	f1 2c       	mov	r15, r1
    4490:	ec 2d       	mov	r30, r12
    4492:	e0 53       	subi	r30, 0x30	; 48
    4494:	ea 30       	cpi	r30, 0x0A	; 10
    4496:	48 f5       	brcc	.+82     	; 0x44ea <strtod+0x130>
    4498:	fd 2d       	mov	r31, r13
    449a:	f2 60       	ori	r31, 0x02	; 2
    449c:	2d 2d       	mov	r18, r13
    449e:	28 70       	andi	r18, 0x08	; 8
    44a0:	d2 fe       	sbrs	r13, 2
    44a2:	06 c0       	rjmp	.+12     	; 0x44b0 <strtod+0xf6>
    44a4:	21 11       	cpse	r18, r1
    44a6:	27 c0       	rjmp	.+78     	; 0x44f6 <strtod+0x13c>
    44a8:	2f ef       	ldi	r18, 0xFF	; 255
    44aa:	e2 1a       	sub	r14, r18
    44ac:	f2 0a       	sbc	r15, r18
    44ae:	23 c0       	rjmp	.+70     	; 0x44f6 <strtod+0x13c>
    44b0:	22 23       	and	r18, r18
    44b2:	19 f0       	breq	.+6      	; 0x44ba <strtod+0x100>
    44b4:	41 e0       	ldi	r20, 0x01	; 1
    44b6:	e4 1a       	sub	r14, r20
    44b8:	f1 08       	sbc	r15, r1
    44ba:	a5 e0       	ldi	r26, 0x05	; 5
    44bc:	b0 e0       	ldi	r27, 0x00	; 0
    44be:	9b 01       	movw	r18, r22
    44c0:	ac 01       	movw	r20, r24
    44c2:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <__muluhisi3>
    44c6:	66 0f       	add	r22, r22
    44c8:	77 1f       	adc	r23, r23
    44ca:	88 1f       	adc	r24, r24
    44cc:	99 1f       	adc	r25, r25
    44ce:	6e 0f       	add	r22, r30
    44d0:	71 1d       	adc	r23, r1
    44d2:	81 1d       	adc	r24, r1
    44d4:	91 1d       	adc	r25, r1
    44d6:	68 39       	cpi	r22, 0x98	; 152
    44d8:	e9 e9       	ldi	r30, 0x99	; 153
    44da:	7e 07       	cpc	r23, r30
    44dc:	8e 07       	cpc	r24, r30
    44de:	e9 e1       	ldi	r30, 0x19	; 25
    44e0:	9e 07       	cpc	r25, r30
    44e2:	48 f0       	brcs	.+18     	; 0x44f6 <strtod+0x13c>
    44e4:	fd 2d       	mov	r31, r13
    44e6:	f6 60       	ori	r31, 0x06	; 6
    44e8:	06 c0       	rjmp	.+12     	; 0x44f6 <strtod+0x13c>
    44ea:	ee 3f       	cpi	r30, 0xFE	; 254
    44ec:	39 f4       	brne	.+14     	; 0x44fc <strtod+0x142>
    44ee:	d3 fc       	sbrc	r13, 3
    44f0:	3d c0       	rjmp	.+122    	; 0x456c <strtod+0x1b2>
    44f2:	fd 2d       	mov	r31, r13
    44f4:	f8 60       	ori	r31, 0x08	; 8
    44f6:	c9 90       	ld	r12, Y+
    44f8:	df 2e       	mov	r13, r31
    44fa:	ca cf       	rjmp	.-108    	; 0x4490 <strtod+0xd6>
    44fc:	e5 33       	cpi	r30, 0x35	; 53
    44fe:	11 f0       	breq	.+4      	; 0x4504 <strtod+0x14a>
    4500:	e5 31       	cpi	r30, 0x15	; 21
    4502:	a1 f5       	brne	.+104    	; 0x456c <strtod+0x1b2>
    4504:	a8 81       	ld	r26, Y
    4506:	ad 32       	cpi	r26, 0x2D	; 45
    4508:	19 f4       	brne	.+6      	; 0x4510 <strtod+0x156>
    450a:	f0 e1       	ldi	r31, 0x10	; 16
    450c:	df 2a       	or	r13, r31
    450e:	06 c0       	rjmp	.+12     	; 0x451c <strtod+0x162>
    4510:	ab 32       	cpi	r26, 0x2B	; 43
    4512:	21 f0       	breq	.+8      	; 0x451c <strtod+0x162>
    4514:	21 96       	adiw	r28, 0x01	; 1
    4516:	21 e0       	ldi	r18, 0x01	; 1
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	04 c0       	rjmp	.+8      	; 0x4524 <strtod+0x16a>
    451c:	a9 81       	ldd	r26, Y+1	; 0x01
    451e:	22 96       	adiw	r28, 0x02	; 2
    4520:	22 e0       	ldi	r18, 0x02	; 2
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	a0 53       	subi	r26, 0x30	; 48
    4526:	aa 30       	cpi	r26, 0x0A	; 10
    4528:	18 f0       	brcs	.+6      	; 0x4530 <strtod+0x176>
    452a:	c2 1b       	sub	r28, r18
    452c:	d3 0b       	sbc	r29, r19
    452e:	1e c0       	rjmp	.+60     	; 0x456c <strtod+0x1b2>
    4530:	fe 01       	movw	r30, r28
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	20 38       	cpi	r18, 0x80	; 128
    4538:	4c e0       	ldi	r20, 0x0C	; 12
    453a:	34 07       	cpc	r19, r20
    453c:	5c f4       	brge	.+22     	; 0x4554 <strtod+0x19a>
    453e:	a9 01       	movw	r20, r18
    4540:	44 0f       	add	r20, r20
    4542:	55 1f       	adc	r21, r21
    4544:	44 0f       	add	r20, r20
    4546:	55 1f       	adc	r21, r21
    4548:	24 0f       	add	r18, r20
    454a:	35 1f       	adc	r19, r21
    454c:	22 0f       	add	r18, r18
    454e:	33 1f       	adc	r19, r19
    4550:	2a 0f       	add	r18, r26
    4552:	31 1d       	adc	r19, r1
    4554:	a1 91       	ld	r26, Z+
    4556:	a0 53       	subi	r26, 0x30	; 48
    4558:	ef 01       	movw	r28, r30
    455a:	aa 30       	cpi	r26, 0x0A	; 10
    455c:	60 f3       	brcs	.-40     	; 0x4536 <strtod+0x17c>
    455e:	d4 fe       	sbrs	r13, 4
    4560:	03 c0       	rjmp	.+6      	; 0x4568 <strtod+0x1ae>
    4562:	31 95       	neg	r19
    4564:	21 95       	neg	r18
    4566:	31 09       	sbc	r19, r1
    4568:	e2 0e       	add	r14, r18
    456a:	f3 1e       	adc	r15, r19
    456c:	d1 fe       	sbrs	r13, 1
    456e:	07 c0       	rjmp	.+14     	; 0x457e <strtod+0x1c4>
    4570:	01 15       	cp	r16, r1
    4572:	11 05       	cpc	r17, r1
    4574:	21 f0       	breq	.+8      	; 0x457e <strtod+0x1c4>
    4576:	21 97       	sbiw	r28, 0x01	; 1
    4578:	f8 01       	movw	r30, r16
    457a:	d1 83       	std	Z+1, r29	; 0x01
    457c:	c0 83       	st	Z, r28
    457e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__floatunsisf>
    4582:	2d 2d       	mov	r18, r13
    4584:	23 70       	andi	r18, 0x03	; 3
    4586:	23 30       	cpi	r18, 0x03	; 3
    4588:	29 f0       	breq	.+10     	; 0x4594 <strtod+0x1da>
    458a:	16 2f       	mov	r17, r22
    458c:	d7 2f       	mov	r29, r23
    458e:	c8 2f       	mov	r28, r24
    4590:	09 2f       	mov	r16, r25
    4592:	07 c0       	rjmp	.+14     	; 0x45a2 <strtod+0x1e8>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	b0 58       	subi	r27, 0x80	; 128
    459a:	18 2f       	mov	r17, r24
    459c:	d9 2f       	mov	r29, r25
    459e:	ca 2f       	mov	r28, r26
    45a0:	0b 2f       	mov	r16, r27
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	a9 01       	movw	r20, r18
    45a8:	61 2f       	mov	r22, r17
    45aa:	7d 2f       	mov	r23, r29
    45ac:	8c 2f       	mov	r24, r28
    45ae:	90 2f       	mov	r25, r16
    45b0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    45b4:	88 23       	and	r24, r24
    45b6:	09 f4       	brne	.+2      	; 0x45ba <strtod+0x200>
    45b8:	54 c0       	rjmp	.+168    	; 0x4662 <strtod+0x2a8>
    45ba:	f7 fe       	sbrs	r15, 7
    45bc:	08 c0       	rjmp	.+16     	; 0x45ce <strtod+0x214>
    45be:	f1 94       	neg	r15
    45c0:	e1 94       	neg	r14
    45c2:	f1 08       	sbc	r15, r1
    45c4:	30 e9       	ldi	r19, 0x90	; 144
    45c6:	c3 2e       	mov	r12, r19
    45c8:	31 e0       	ldi	r19, 0x01	; 1
    45ca:	d3 2e       	mov	r13, r19
    45cc:	04 c0       	rjmp	.+8      	; 0x45d6 <strtod+0x21c>
    45ce:	28 e7       	ldi	r18, 0x78	; 120
    45d0:	c2 2e       	mov	r12, r18
    45d2:	21 e0       	ldi	r18, 0x01	; 1
    45d4:	d2 2e       	mov	r13, r18
    45d6:	46 01       	movw	r8, r12
    45d8:	f8 e1       	ldi	r31, 0x18	; 24
    45da:	8f 1a       	sub	r8, r31
    45dc:	91 08       	sbc	r9, r1
    45de:	90 e2       	ldi	r25, 0x20	; 32
    45e0:	a9 2e       	mov	r10, r25
    45e2:	b1 2c       	mov	r11, r1
    45e4:	15 c0       	rjmp	.+42     	; 0x4610 <strtod+0x256>
    45e6:	f6 01       	movw	r30, r12
    45e8:	45 91       	lpm	r20, Z+
    45ea:	55 91       	lpm	r21, Z+
    45ec:	65 91       	lpm	r22, Z+
    45ee:	74 91       	lpm	r23, Z+
    45f0:	24 2f       	mov	r18, r20
    45f2:	35 2f       	mov	r19, r21
    45f4:	46 2f       	mov	r20, r22
    45f6:	57 2f       	mov	r21, r23
    45f8:	61 2f       	mov	r22, r17
    45fa:	7d 2f       	mov	r23, r29
    45fc:	8c 2f       	mov	r24, r28
    45fe:	90 2f       	mov	r25, r16
    4600:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__mulsf3>
    4604:	16 2f       	mov	r17, r22
    4606:	d7 2f       	mov	r29, r23
    4608:	c8 2f       	mov	r28, r24
    460a:	09 2f       	mov	r16, r25
    460c:	ea 18       	sub	r14, r10
    460e:	fb 08       	sbc	r15, r11
    4610:	ea 14       	cp	r14, r10
    4612:	fb 04       	cpc	r15, r11
    4614:	44 f7       	brge	.-48     	; 0x45e6 <strtod+0x22c>
    4616:	24 e0       	ldi	r18, 0x04	; 4
    4618:	c2 1a       	sub	r12, r18
    461a:	d1 08       	sbc	r13, r1
    461c:	b5 94       	asr	r11
    461e:	a7 94       	ror	r10
    4620:	c8 14       	cp	r12, r8
    4622:	d9 04       	cpc	r13, r9
    4624:	a9 f7       	brne	.-22     	; 0x4610 <strtod+0x256>
    4626:	61 2f       	mov	r22, r17
    4628:	7d 2f       	mov	r23, r29
    462a:	8c 2f       	mov	r24, r28
    462c:	90 2f       	mov	r25, r16
    462e:	28 2f       	mov	r18, r24
    4630:	22 0f       	add	r18, r18
    4632:	29 2f       	mov	r18, r25
    4634:	22 1f       	adc	r18, r18
    4636:	2f 3f       	cpi	r18, 0xFF	; 255
    4638:	39 f0       	breq	.+14     	; 0x4648 <strtod+0x28e>
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	a9 01       	movw	r20, r18
    4640:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__cmpsf2>
    4644:	81 11       	cpse	r24, r1
    4646:	0d c0       	rjmp	.+26     	; 0x4662 <strtod+0x2a8>
    4648:	82 e2       	ldi	r24, 0x22	; 34
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	90 93 65 04 	sts	0x0465, r25
    4650:	80 93 64 04 	sts	0x0464, r24
    4654:	06 c0       	rjmp	.+12     	; 0x4662 <strtod+0x2a8>
    4656:	0f ef       	ldi	r16, 0xFF	; 255
    4658:	04 c0       	rjmp	.+8      	; 0x4662 <strtod+0x2a8>
    465a:	10 e0       	ldi	r17, 0x00	; 0
    465c:	d0 e0       	ldi	r29, 0x00	; 0
    465e:	c0 ec       	ldi	r28, 0xC0	; 192
    4660:	0f e7       	ldi	r16, 0x7F	; 127
    4662:	61 2f       	mov	r22, r17
    4664:	7d 2f       	mov	r23, r29
    4666:	8c 2f       	mov	r24, r28
    4668:	90 2f       	mov	r25, r16
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	ff 90       	pop	r15
    4674:	ef 90       	pop	r14
    4676:	df 90       	pop	r13
    4678:	cf 90       	pop	r12
    467a:	bf 90       	pop	r11
    467c:	af 90       	pop	r10
    467e:	9f 90       	pop	r9
    4680:	8f 90       	pop	r8
    4682:	08 95       	ret

00004684 <isspace>:
    4684:	91 11       	cpse	r25, r1
    4686:	a5 c2       	rjmp	.+1354   	; 0x4bd2 <__ctype_isfalse>
    4688:	80 32       	cpi	r24, 0x20	; 32
    468a:	19 f0       	breq	.+6      	; 0x4692 <isspace+0xe>
    468c:	89 50       	subi	r24, 0x09	; 9
    468e:	85 50       	subi	r24, 0x05	; 5
    4690:	d0 f7       	brcc	.-12     	; 0x4686 <isspace+0x2>
    4692:	08 95       	ret

00004694 <strncasecmp_P>:
    4694:	fb 01       	movw	r30, r22
    4696:	dc 01       	movw	r26, r24
    4698:	41 50       	subi	r20, 0x01	; 1
    469a:	50 40       	sbci	r21, 0x00	; 0
    469c:	88 f0       	brcs	.+34     	; 0x46c0 <strncasecmp_P+0x2c>
    469e:	8d 91       	ld	r24, X+
    46a0:	81 34       	cpi	r24, 0x41	; 65
    46a2:	1c f0       	brlt	.+6      	; 0x46aa <strncasecmp_P+0x16>
    46a4:	8b 35       	cpi	r24, 0x5B	; 91
    46a6:	0c f4       	brge	.+2      	; 0x46aa <strncasecmp_P+0x16>
    46a8:	80 5e       	subi	r24, 0xE0	; 224
    46aa:	65 91       	lpm	r22, Z+
    46ac:	61 34       	cpi	r22, 0x41	; 65
    46ae:	1c f0       	brlt	.+6      	; 0x46b6 <strncasecmp_P+0x22>
    46b0:	6b 35       	cpi	r22, 0x5B	; 91
    46b2:	0c f4       	brge	.+2      	; 0x46b6 <strncasecmp_P+0x22>
    46b4:	60 5e       	subi	r22, 0xE0	; 224
    46b6:	86 1b       	sub	r24, r22
    46b8:	61 11       	cpse	r22, r1
    46ba:	71 f3       	breq	.-36     	; 0x4698 <strncasecmp_P+0x4>
    46bc:	99 0b       	sbc	r25, r25
    46be:	08 95       	ret
    46c0:	88 1b       	sub	r24, r24
    46c2:	fc cf       	rjmp	.-8      	; 0x46bc <strncasecmp_P+0x28>

000046c4 <strcpy>:
    46c4:	fb 01       	movw	r30, r22
    46c6:	dc 01       	movw	r26, r24
    46c8:	01 90       	ld	r0, Z+
    46ca:	0d 92       	st	X+, r0
    46cc:	00 20       	and	r0, r0
    46ce:	e1 f7       	brne	.-8      	; 0x46c8 <strcpy+0x4>
    46d0:	08 95       	ret

000046d2 <strncpy>:
    46d2:	fb 01       	movw	r30, r22
    46d4:	dc 01       	movw	r26, r24
    46d6:	41 50       	subi	r20, 0x01	; 1
    46d8:	50 40       	sbci	r21, 0x00	; 0
    46da:	48 f0       	brcs	.+18     	; 0x46ee <strncpy+0x1c>
    46dc:	01 90       	ld	r0, Z+
    46de:	0d 92       	st	X+, r0
    46e0:	00 20       	and	r0, r0
    46e2:	c9 f7       	brne	.-14     	; 0x46d6 <strncpy+0x4>
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <strncpy+0x16>
    46e6:	1d 92       	st	X+, r1
    46e8:	41 50       	subi	r20, 0x01	; 1
    46ea:	50 40       	sbci	r21, 0x00	; 0
    46ec:	e0 f7       	brcc	.-8      	; 0x46e6 <strncpy+0x14>
    46ee:	08 95       	ret

000046f0 <strpbrk>:
    46f0:	dc 01       	movw	r26, r24
    46f2:	99 27       	eor	r25, r25
    46f4:	8d 91       	ld	r24, X+
    46f6:	88 23       	and	r24, r24
    46f8:	41 f0       	breq	.+16     	; 0x470a <strpbrk+0x1a>
    46fa:	fb 01       	movw	r30, r22
    46fc:	01 90       	ld	r0, Z+
    46fe:	08 16       	cp	r0, r24
    4700:	01 10       	cpse	r0, r1
    4702:	e1 f7       	brne	.-8      	; 0x46fc <strpbrk+0xc>
    4704:	b9 f7       	brne	.-18     	; 0x46f4 <strpbrk+0x4>
    4706:	11 97       	sbiw	r26, 0x01	; 1
    4708:	cd 01       	movw	r24, r26
    470a:	08 95       	ret

0000470c <sprintf>:
    470c:	0f 93       	push	r16
    470e:	1f 93       	push	r17
    4710:	cf 93       	push	r28
    4712:	df 93       	push	r29
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	60 97       	sbiw	r28, 0x10	; 16
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	cd bf       	out	0x3d, r28	; 61
    4724:	0f 89       	ldd	r16, Y+23	; 0x17
    4726:	18 8d       	ldd	r17, Y+24	; 0x18
    4728:	86 e0       	ldi	r24, 0x06	; 6
    472a:	8c 83       	std	Y+4, r24	; 0x04
    472c:	1a 83       	std	Y+2, r17	; 0x02
    472e:	09 83       	std	Y+1, r16	; 0x01
    4730:	8f ef       	ldi	r24, 0xFF	; 255
    4732:	9f e7       	ldi	r25, 0x7F	; 127
    4734:	9e 83       	std	Y+6, r25	; 0x06
    4736:	8d 83       	std	Y+5, r24	; 0x05
    4738:	ae 01       	movw	r20, r28
    473a:	45 5e       	subi	r20, 0xE5	; 229
    473c:	5f 4f       	sbci	r21, 0xFF	; 255
    473e:	58 8b       	std	Y+16, r21	; 0x10
    4740:	4f 87       	std	Y+15, r20	; 0x0f
    4742:	69 8d       	ldd	r22, Y+25	; 0x19
    4744:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4746:	ce 01       	movw	r24, r28
    4748:	01 96       	adiw	r24, 0x01	; 1
    474a:	0e 94 b7 23 	call	0x476e	; 0x476e <vfprintf>
    474e:	ef 81       	ldd	r30, Y+7	; 0x07
    4750:	f8 85       	ldd	r31, Y+8	; 0x08
    4752:	e0 0f       	add	r30, r16
    4754:	f1 1f       	adc	r31, r17
    4756:	10 82       	st	Z, r1
    4758:	60 96       	adiw	r28, 0x10	; 16
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	1f 91       	pop	r17
    476a:	0f 91       	pop	r16
    476c:	08 95       	ret

0000476e <vfprintf>:
    476e:	2f 92       	push	r2
    4770:	3f 92       	push	r3
    4772:	4f 92       	push	r4
    4774:	5f 92       	push	r5
    4776:	6f 92       	push	r6
    4778:	7f 92       	push	r7
    477a:	8f 92       	push	r8
    477c:	9f 92       	push	r9
    477e:	af 92       	push	r10
    4780:	bf 92       	push	r11
    4782:	cf 92       	push	r12
    4784:	df 92       	push	r13
    4786:	ef 92       	push	r14
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
    4796:	2c 97       	sbiw	r28, 0x0c	; 12
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	f8 94       	cli
    479c:	de bf       	out	0x3e, r29	; 62
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	cd bf       	out	0x3d, r28	; 61
    47a2:	7c 01       	movw	r14, r24
    47a4:	6b 01       	movw	r12, r22
    47a6:	8a 01       	movw	r16, r20
    47a8:	fc 01       	movw	r30, r24
    47aa:	17 82       	std	Z+7, r1	; 0x07
    47ac:	16 82       	std	Z+6, r1	; 0x06
    47ae:	83 81       	ldd	r24, Z+3	; 0x03
    47b0:	81 ff       	sbrs	r24, 1
    47b2:	c7 c1       	rjmp	.+910    	; 0x4b42 <vfprintf+0x3d4>
    47b4:	88 24       	eor	r8, r8
    47b6:	83 94       	inc	r8
    47b8:	91 2c       	mov	r9, r1
    47ba:	8c 0e       	add	r8, r28
    47bc:	9d 1e       	adc	r9, r29
    47be:	f7 01       	movw	r30, r14
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	f6 01       	movw	r30, r12
    47c4:	93 fd       	sbrc	r25, 3
    47c6:	85 91       	lpm	r24, Z+
    47c8:	93 ff       	sbrs	r25, 3
    47ca:	81 91       	ld	r24, Z+
    47cc:	6f 01       	movw	r12, r30
    47ce:	88 23       	and	r24, r24
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <vfprintf+0x66>
    47d2:	b3 c1       	rjmp	.+870    	; 0x4b3a <vfprintf+0x3cc>
    47d4:	85 32       	cpi	r24, 0x25	; 37
    47d6:	39 f4       	brne	.+14     	; 0x47e6 <vfprintf+0x78>
    47d8:	93 fd       	sbrc	r25, 3
    47da:	85 91       	lpm	r24, Z+
    47dc:	93 ff       	sbrs	r25, 3
    47de:	81 91       	ld	r24, Z+
    47e0:	6f 01       	movw	r12, r30
    47e2:	85 32       	cpi	r24, 0x25	; 37
    47e4:	29 f4       	brne	.+10     	; 0x47f0 <vfprintf+0x82>
    47e6:	b7 01       	movw	r22, r14
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    47ee:	e7 cf       	rjmp	.-50     	; 0x47be <vfprintf+0x50>
    47f0:	71 2c       	mov	r7, r1
    47f2:	31 2c       	mov	r3, r1
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	20 32       	cpi	r18, 0x20	; 32
    47f8:	a8 f4       	brcc	.+42     	; 0x4824 <vfprintf+0xb6>
    47fa:	8b 32       	cpi	r24, 0x2B	; 43
    47fc:	61 f0       	breq	.+24     	; 0x4816 <vfprintf+0xa8>
    47fe:	28 f4       	brcc	.+10     	; 0x480a <vfprintf+0x9c>
    4800:	80 32       	cpi	r24, 0x20	; 32
    4802:	51 f0       	breq	.+20     	; 0x4818 <vfprintf+0xaa>
    4804:	83 32       	cpi	r24, 0x23	; 35
    4806:	71 f4       	brne	.+28     	; 0x4824 <vfprintf+0xb6>
    4808:	0b c0       	rjmp	.+22     	; 0x4820 <vfprintf+0xb2>
    480a:	8d 32       	cpi	r24, 0x2D	; 45
    480c:	39 f0       	breq	.+14     	; 0x481c <vfprintf+0xae>
    480e:	80 33       	cpi	r24, 0x30	; 48
    4810:	49 f4       	brne	.+18     	; 0x4824 <vfprintf+0xb6>
    4812:	21 60       	ori	r18, 0x01	; 1
    4814:	28 c0       	rjmp	.+80     	; 0x4866 <vfprintf+0xf8>
    4816:	22 60       	ori	r18, 0x02	; 2
    4818:	24 60       	ori	r18, 0x04	; 4
    481a:	25 c0       	rjmp	.+74     	; 0x4866 <vfprintf+0xf8>
    481c:	28 60       	ori	r18, 0x08	; 8
    481e:	23 c0       	rjmp	.+70     	; 0x4866 <vfprintf+0xf8>
    4820:	20 61       	ori	r18, 0x10	; 16
    4822:	21 c0       	rjmp	.+66     	; 0x4866 <vfprintf+0xf8>
    4824:	27 fd       	sbrc	r18, 7
    4826:	27 c0       	rjmp	.+78     	; 0x4876 <vfprintf+0x108>
    4828:	38 2f       	mov	r19, r24
    482a:	30 53       	subi	r19, 0x30	; 48
    482c:	3a 30       	cpi	r19, 0x0A	; 10
    482e:	78 f4       	brcc	.+30     	; 0x484e <vfprintf+0xe0>
    4830:	26 ff       	sbrs	r18, 6
    4832:	06 c0       	rjmp	.+12     	; 0x4840 <vfprintf+0xd2>
    4834:	fa e0       	ldi	r31, 0x0A	; 10
    4836:	7f 9e       	mul	r7, r31
    4838:	30 0d       	add	r19, r0
    483a:	11 24       	eor	r1, r1
    483c:	73 2e       	mov	r7, r19
    483e:	13 c0       	rjmp	.+38     	; 0x4866 <vfprintf+0xf8>
    4840:	8a e0       	ldi	r24, 0x0A	; 10
    4842:	38 9e       	mul	r3, r24
    4844:	30 0d       	add	r19, r0
    4846:	11 24       	eor	r1, r1
    4848:	33 2e       	mov	r3, r19
    484a:	20 62       	ori	r18, 0x20	; 32
    484c:	0c c0       	rjmp	.+24     	; 0x4866 <vfprintf+0xf8>
    484e:	8e 32       	cpi	r24, 0x2E	; 46
    4850:	21 f4       	brne	.+8      	; 0x485a <vfprintf+0xec>
    4852:	26 fd       	sbrc	r18, 6
    4854:	72 c1       	rjmp	.+740    	; 0x4b3a <vfprintf+0x3cc>
    4856:	20 64       	ori	r18, 0x40	; 64
    4858:	06 c0       	rjmp	.+12     	; 0x4866 <vfprintf+0xf8>
    485a:	8c 36       	cpi	r24, 0x6C	; 108
    485c:	11 f4       	brne	.+4      	; 0x4862 <vfprintf+0xf4>
    485e:	20 68       	ori	r18, 0x80	; 128
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <vfprintf+0xf8>
    4862:	88 36       	cpi	r24, 0x68	; 104
    4864:	41 f4       	brne	.+16     	; 0x4876 <vfprintf+0x108>
    4866:	f6 01       	movw	r30, r12
    4868:	93 fd       	sbrc	r25, 3
    486a:	85 91       	lpm	r24, Z+
    486c:	93 ff       	sbrs	r25, 3
    486e:	81 91       	ld	r24, Z+
    4870:	6f 01       	movw	r12, r30
    4872:	81 11       	cpse	r24, r1
    4874:	c0 cf       	rjmp	.-128    	; 0x47f6 <vfprintf+0x88>
    4876:	98 2f       	mov	r25, r24
    4878:	95 54       	subi	r25, 0x45	; 69
    487a:	93 30       	cpi	r25, 0x03	; 3
    487c:	18 f0       	brcs	.+6      	; 0x4884 <vfprintf+0x116>
    487e:	90 52       	subi	r25, 0x20	; 32
    4880:	93 30       	cpi	r25, 0x03	; 3
    4882:	28 f4       	brcc	.+10     	; 0x488e <vfprintf+0x120>
    4884:	0c 5f       	subi	r16, 0xFC	; 252
    4886:	1f 4f       	sbci	r17, 0xFF	; 255
    4888:	ff e3       	ldi	r31, 0x3F	; 63
    488a:	f9 83       	std	Y+1, r31	; 0x01
    488c:	0d c0       	rjmp	.+26     	; 0x48a8 <vfprintf+0x13a>
    488e:	83 36       	cpi	r24, 0x63	; 99
    4890:	31 f0       	breq	.+12     	; 0x489e <vfprintf+0x130>
    4892:	83 37       	cpi	r24, 0x73	; 115
    4894:	71 f0       	breq	.+28     	; 0x48b2 <vfprintf+0x144>
    4896:	83 35       	cpi	r24, 0x53	; 83
    4898:	09 f0       	breq	.+2      	; 0x489c <vfprintf+0x12e>
    489a:	5e c0       	rjmp	.+188    	; 0x4958 <vfprintf+0x1ea>
    489c:	23 c0       	rjmp	.+70     	; 0x48e4 <vfprintf+0x176>
    489e:	f8 01       	movw	r30, r16
    48a0:	80 81       	ld	r24, Z
    48a2:	89 83       	std	Y+1, r24	; 0x01
    48a4:	0e 5f       	subi	r16, 0xFE	; 254
    48a6:	1f 4f       	sbci	r17, 0xFF	; 255
    48a8:	66 24       	eor	r6, r6
    48aa:	63 94       	inc	r6
    48ac:	71 2c       	mov	r7, r1
    48ae:	54 01       	movw	r10, r8
    48b0:	15 c0       	rjmp	.+42     	; 0x48dc <vfprintf+0x16e>
    48b2:	28 01       	movw	r4, r16
    48b4:	f2 e0       	ldi	r31, 0x02	; 2
    48b6:	4f 0e       	add	r4, r31
    48b8:	51 1c       	adc	r5, r1
    48ba:	f8 01       	movw	r30, r16
    48bc:	a0 80       	ld	r10, Z
    48be:	b1 80       	ldd	r11, Z+1	; 0x01
    48c0:	26 ff       	sbrs	r18, 6
    48c2:	03 c0       	rjmp	.+6      	; 0x48ca <vfprintf+0x15c>
    48c4:	67 2d       	mov	r22, r7
    48c6:	70 e0       	ldi	r23, 0x00	; 0
    48c8:	02 c0       	rjmp	.+4      	; 0x48ce <vfprintf+0x160>
    48ca:	6f ef       	ldi	r22, 0xFF	; 255
    48cc:	7f ef       	ldi	r23, 0xFF	; 255
    48ce:	c5 01       	movw	r24, r10
    48d0:	2c 87       	std	Y+12, r18	; 0x0c
    48d2:	0e 94 f7 25 	call	0x4bee	; 0x4bee <strnlen>
    48d6:	3c 01       	movw	r6, r24
    48d8:	82 01       	movw	r16, r4
    48da:	2c 85       	ldd	r18, Y+12	; 0x0c
    48dc:	6f e7       	ldi	r22, 0x7F	; 127
    48de:	26 2e       	mov	r2, r22
    48e0:	22 22       	and	r2, r18
    48e2:	18 c0       	rjmp	.+48     	; 0x4914 <vfprintf+0x1a6>
    48e4:	28 01       	movw	r4, r16
    48e6:	f2 e0       	ldi	r31, 0x02	; 2
    48e8:	4f 0e       	add	r4, r31
    48ea:	51 1c       	adc	r5, r1
    48ec:	f8 01       	movw	r30, r16
    48ee:	a0 80       	ld	r10, Z
    48f0:	b1 80       	ldd	r11, Z+1	; 0x01
    48f2:	26 ff       	sbrs	r18, 6
    48f4:	03 c0       	rjmp	.+6      	; 0x48fc <vfprintf+0x18e>
    48f6:	67 2d       	mov	r22, r7
    48f8:	70 e0       	ldi	r23, 0x00	; 0
    48fa:	02 c0       	rjmp	.+4      	; 0x4900 <vfprintf+0x192>
    48fc:	6f ef       	ldi	r22, 0xFF	; 255
    48fe:	7f ef       	ldi	r23, 0xFF	; 255
    4900:	c5 01       	movw	r24, r10
    4902:	2c 87       	std	Y+12, r18	; 0x0c
    4904:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <strnlen_P>
    4908:	3c 01       	movw	r6, r24
    490a:	2c 85       	ldd	r18, Y+12	; 0x0c
    490c:	50 e8       	ldi	r21, 0x80	; 128
    490e:	25 2e       	mov	r2, r21
    4910:	22 2a       	or	r2, r18
    4912:	82 01       	movw	r16, r4
    4914:	23 fc       	sbrc	r2, 3
    4916:	1c c0       	rjmp	.+56     	; 0x4950 <vfprintf+0x1e2>
    4918:	06 c0       	rjmp	.+12     	; 0x4926 <vfprintf+0x1b8>
    491a:	b7 01       	movw	r22, r14
    491c:	80 e2       	ldi	r24, 0x20	; 32
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4924:	3a 94       	dec	r3
    4926:	83 2d       	mov	r24, r3
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	68 16       	cp	r6, r24
    492c:	79 06       	cpc	r7, r25
    492e:	a8 f3       	brcs	.-22     	; 0x491a <vfprintf+0x1ac>
    4930:	0f c0       	rjmp	.+30     	; 0x4950 <vfprintf+0x1e2>
    4932:	f5 01       	movw	r30, r10
    4934:	27 fc       	sbrc	r2, 7
    4936:	85 91       	lpm	r24, Z+
    4938:	27 fe       	sbrs	r2, 7
    493a:	81 91       	ld	r24, Z+
    493c:	5f 01       	movw	r10, r30
    493e:	b7 01       	movw	r22, r14
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4946:	31 10       	cpse	r3, r1
    4948:	3a 94       	dec	r3
    494a:	f1 e0       	ldi	r31, 0x01	; 1
    494c:	6f 1a       	sub	r6, r31
    494e:	71 08       	sbc	r7, r1
    4950:	61 14       	cp	r6, r1
    4952:	71 04       	cpc	r7, r1
    4954:	71 f7       	brne	.-36     	; 0x4932 <vfprintf+0x1c4>
    4956:	ee c0       	rjmp	.+476    	; 0x4b34 <vfprintf+0x3c6>
    4958:	84 36       	cpi	r24, 0x64	; 100
    495a:	11 f0       	breq	.+4      	; 0x4960 <vfprintf+0x1f2>
    495c:	89 36       	cpi	r24, 0x69	; 105
    495e:	41 f5       	brne	.+80     	; 0x49b0 <vfprintf+0x242>
    4960:	f8 01       	movw	r30, r16
    4962:	27 ff       	sbrs	r18, 7
    4964:	07 c0       	rjmp	.+14     	; 0x4974 <vfprintf+0x206>
    4966:	60 81       	ld	r22, Z
    4968:	71 81       	ldd	r23, Z+1	; 0x01
    496a:	82 81       	ldd	r24, Z+2	; 0x02
    496c:	93 81       	ldd	r25, Z+3	; 0x03
    496e:	0c 5f       	subi	r16, 0xFC	; 252
    4970:	1f 4f       	sbci	r17, 0xFF	; 255
    4972:	08 c0       	rjmp	.+16     	; 0x4984 <vfprintf+0x216>
    4974:	60 81       	ld	r22, Z
    4976:	71 81       	ldd	r23, Z+1	; 0x01
    4978:	88 27       	eor	r24, r24
    497a:	77 fd       	sbrc	r23, 7
    497c:	80 95       	com	r24
    497e:	98 2f       	mov	r25, r24
    4980:	0e 5f       	subi	r16, 0xFE	; 254
    4982:	1f 4f       	sbci	r17, 0xFF	; 255
    4984:	4f e6       	ldi	r20, 0x6F	; 111
    4986:	64 2e       	mov	r6, r20
    4988:	62 22       	and	r6, r18
    498a:	97 ff       	sbrs	r25, 7
    498c:	09 c0       	rjmp	.+18     	; 0x49a0 <vfprintf+0x232>
    498e:	90 95       	com	r25
    4990:	80 95       	com	r24
    4992:	70 95       	com	r23
    4994:	61 95       	neg	r22
    4996:	7f 4f       	sbci	r23, 0xFF	; 255
    4998:	8f 4f       	sbci	r24, 0xFF	; 255
    499a:	9f 4f       	sbci	r25, 0xFF	; 255
    499c:	f0 e8       	ldi	r31, 0x80	; 128
    499e:	6f 2a       	or	r6, r31
    49a0:	2a e0       	ldi	r18, 0x0A	; 10
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	a4 01       	movw	r20, r8
    49a6:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__ultoa_invert>
    49aa:	a8 2e       	mov	r10, r24
    49ac:	a8 18       	sub	r10, r8
    49ae:	44 c0       	rjmp	.+136    	; 0x4a38 <vfprintf+0x2ca>
    49b0:	85 37       	cpi	r24, 0x75	; 117
    49b2:	31 f4       	brne	.+12     	; 0x49c0 <vfprintf+0x252>
    49b4:	3f ee       	ldi	r19, 0xEF	; 239
    49b6:	b3 2e       	mov	r11, r19
    49b8:	b2 22       	and	r11, r18
    49ba:	2a e0       	ldi	r18, 0x0A	; 10
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	24 c0       	rjmp	.+72     	; 0x4a08 <vfprintf+0x29a>
    49c0:	99 ef       	ldi	r25, 0xF9	; 249
    49c2:	b9 2e       	mov	r11, r25
    49c4:	b2 22       	and	r11, r18
    49c6:	8f 36       	cpi	r24, 0x6F	; 111
    49c8:	b9 f0       	breq	.+46     	; 0x49f8 <vfprintf+0x28a>
    49ca:	20 f4       	brcc	.+8      	; 0x49d4 <vfprintf+0x266>
    49cc:	88 35       	cpi	r24, 0x58	; 88
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <vfprintf+0x264>
    49d0:	b4 c0       	rjmp	.+360    	; 0x4b3a <vfprintf+0x3cc>
    49d2:	0d c0       	rjmp	.+26     	; 0x49ee <vfprintf+0x280>
    49d4:	80 37       	cpi	r24, 0x70	; 112
    49d6:	21 f0       	breq	.+8      	; 0x49e0 <vfprintf+0x272>
    49d8:	88 37       	cpi	r24, 0x78	; 120
    49da:	09 f0       	breq	.+2      	; 0x49de <vfprintf+0x270>
    49dc:	ae c0       	rjmp	.+348    	; 0x4b3a <vfprintf+0x3cc>
    49de:	02 c0       	rjmp	.+4      	; 0x49e4 <vfprintf+0x276>
    49e0:	20 e1       	ldi	r18, 0x10	; 16
    49e2:	b2 2a       	or	r11, r18
    49e4:	b4 fe       	sbrs	r11, 4
    49e6:	0b c0       	rjmp	.+22     	; 0x49fe <vfprintf+0x290>
    49e8:	84 e0       	ldi	r24, 0x04	; 4
    49ea:	b8 2a       	or	r11, r24
    49ec:	08 c0       	rjmp	.+16     	; 0x49fe <vfprintf+0x290>
    49ee:	24 ff       	sbrs	r18, 4
    49f0:	09 c0       	rjmp	.+18     	; 0x4a04 <vfprintf+0x296>
    49f2:	e6 e0       	ldi	r30, 0x06	; 6
    49f4:	be 2a       	or	r11, r30
    49f6:	06 c0       	rjmp	.+12     	; 0x4a04 <vfprintf+0x296>
    49f8:	28 e0       	ldi	r18, 0x08	; 8
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	05 c0       	rjmp	.+10     	; 0x4a08 <vfprintf+0x29a>
    49fe:	20 e1       	ldi	r18, 0x10	; 16
    4a00:	30 e0       	ldi	r19, 0x00	; 0
    4a02:	02 c0       	rjmp	.+4      	; 0x4a08 <vfprintf+0x29a>
    4a04:	20 e1       	ldi	r18, 0x10	; 16
    4a06:	32 e0       	ldi	r19, 0x02	; 2
    4a08:	f8 01       	movw	r30, r16
    4a0a:	b7 fe       	sbrs	r11, 7
    4a0c:	07 c0       	rjmp	.+14     	; 0x4a1c <vfprintf+0x2ae>
    4a0e:	60 81       	ld	r22, Z
    4a10:	71 81       	ldd	r23, Z+1	; 0x01
    4a12:	82 81       	ldd	r24, Z+2	; 0x02
    4a14:	93 81       	ldd	r25, Z+3	; 0x03
    4a16:	0c 5f       	subi	r16, 0xFC	; 252
    4a18:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1a:	06 c0       	rjmp	.+12     	; 0x4a28 <vfprintf+0x2ba>
    4a1c:	60 81       	ld	r22, Z
    4a1e:	71 81       	ldd	r23, Z+1	; 0x01
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	0e 5f       	subi	r16, 0xFE	; 254
    4a26:	1f 4f       	sbci	r17, 0xFF	; 255
    4a28:	a4 01       	movw	r20, r8
    4a2a:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__ultoa_invert>
    4a2e:	a8 2e       	mov	r10, r24
    4a30:	a8 18       	sub	r10, r8
    4a32:	8f e7       	ldi	r24, 0x7F	; 127
    4a34:	68 2e       	mov	r6, r24
    4a36:	6b 20       	and	r6, r11
    4a38:	66 fe       	sbrs	r6, 6
    4a3a:	0b c0       	rjmp	.+22     	; 0x4a52 <vfprintf+0x2e4>
    4a3c:	36 2d       	mov	r19, r6
    4a3e:	3e 7f       	andi	r19, 0xFE	; 254
    4a40:	a7 14       	cp	r10, r7
    4a42:	50 f4       	brcc	.+20     	; 0x4a58 <vfprintf+0x2ea>
    4a44:	64 fe       	sbrs	r6, 4
    4a46:	0a c0       	rjmp	.+20     	; 0x4a5c <vfprintf+0x2ee>
    4a48:	62 fc       	sbrc	r6, 2
    4a4a:	08 c0       	rjmp	.+16     	; 0x4a5c <vfprintf+0x2ee>
    4a4c:	36 2d       	mov	r19, r6
    4a4e:	3e 7e       	andi	r19, 0xEE	; 238
    4a50:	05 c0       	rjmp	.+10     	; 0x4a5c <vfprintf+0x2ee>
    4a52:	ba 2c       	mov	r11, r10
    4a54:	36 2d       	mov	r19, r6
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <vfprintf+0x2f0>
    4a58:	ba 2c       	mov	r11, r10
    4a5a:	01 c0       	rjmp	.+2      	; 0x4a5e <vfprintf+0x2f0>
    4a5c:	b7 2c       	mov	r11, r7
    4a5e:	34 ff       	sbrs	r19, 4
    4a60:	0d c0       	rjmp	.+26     	; 0x4a7c <vfprintf+0x30e>
    4a62:	fe 01       	movw	r30, r28
    4a64:	ea 0d       	add	r30, r10
    4a66:	f1 1d       	adc	r31, r1
    4a68:	80 81       	ld	r24, Z
    4a6a:	80 33       	cpi	r24, 0x30	; 48
    4a6c:	11 f4       	brne	.+4      	; 0x4a72 <vfprintf+0x304>
    4a6e:	39 7e       	andi	r19, 0xE9	; 233
    4a70:	09 c0       	rjmp	.+18     	; 0x4a84 <vfprintf+0x316>
    4a72:	32 ff       	sbrs	r19, 2
    4a74:	06 c0       	rjmp	.+12     	; 0x4a82 <vfprintf+0x314>
    4a76:	b3 94       	inc	r11
    4a78:	b3 94       	inc	r11
    4a7a:	04 c0       	rjmp	.+8      	; 0x4a84 <vfprintf+0x316>
    4a7c:	83 2f       	mov	r24, r19
    4a7e:	86 78       	andi	r24, 0x86	; 134
    4a80:	09 f0       	breq	.+2      	; 0x4a84 <vfprintf+0x316>
    4a82:	b3 94       	inc	r11
    4a84:	33 fd       	sbrc	r19, 3
    4a86:	14 c0       	rjmp	.+40     	; 0x4ab0 <vfprintf+0x342>
    4a88:	30 ff       	sbrs	r19, 0
    4a8a:	0f c0       	rjmp	.+30     	; 0x4aaa <vfprintf+0x33c>
    4a8c:	7a 2c       	mov	r7, r10
    4a8e:	b3 14       	cp	r11, r3
    4a90:	60 f4       	brcc	.+24     	; 0x4aaa <vfprintf+0x33c>
    4a92:	73 0c       	add	r7, r3
    4a94:	7b 18       	sub	r7, r11
    4a96:	b3 2c       	mov	r11, r3
    4a98:	08 c0       	rjmp	.+16     	; 0x4aaa <vfprintf+0x33c>
    4a9a:	b7 01       	movw	r22, r14
    4a9c:	80 e2       	ldi	r24, 0x20	; 32
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	3c 87       	std	Y+12, r19	; 0x0c
    4aa2:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4aa6:	b3 94       	inc	r11
    4aa8:	3c 85       	ldd	r19, Y+12	; 0x0c
    4aaa:	b3 14       	cp	r11, r3
    4aac:	b0 f3       	brcs	.-20     	; 0x4a9a <vfprintf+0x32c>
    4aae:	04 c0       	rjmp	.+8      	; 0x4ab8 <vfprintf+0x34a>
    4ab0:	b3 14       	cp	r11, r3
    4ab2:	10 f4       	brcc	.+4      	; 0x4ab8 <vfprintf+0x34a>
    4ab4:	3b 18       	sub	r3, r11
    4ab6:	01 c0       	rjmp	.+2      	; 0x4aba <vfprintf+0x34c>
    4ab8:	31 2c       	mov	r3, r1
    4aba:	34 ff       	sbrs	r19, 4
    4abc:	12 c0       	rjmp	.+36     	; 0x4ae2 <vfprintf+0x374>
    4abe:	b7 01       	movw	r22, r14
    4ac0:	80 e3       	ldi	r24, 0x30	; 48
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	3c 87       	std	Y+12, r19	; 0x0c
    4ac6:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4aca:	3c 85       	ldd	r19, Y+12	; 0x0c
    4acc:	32 ff       	sbrs	r19, 2
    4ace:	1e c0       	rjmp	.+60     	; 0x4b0c <vfprintf+0x39e>
    4ad0:	31 ff       	sbrs	r19, 1
    4ad2:	03 c0       	rjmp	.+6      	; 0x4ada <vfprintf+0x36c>
    4ad4:	88 e5       	ldi	r24, 0x58	; 88
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	02 c0       	rjmp	.+4      	; 0x4ade <vfprintf+0x370>
    4ada:	88 e7       	ldi	r24, 0x78	; 120
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	b7 01       	movw	r22, r14
    4ae0:	0c c0       	rjmp	.+24     	; 0x4afa <vfprintf+0x38c>
    4ae2:	83 2f       	mov	r24, r19
    4ae4:	86 78       	andi	r24, 0x86	; 134
    4ae6:	91 f0       	breq	.+36     	; 0x4b0c <vfprintf+0x39e>
    4ae8:	31 fd       	sbrc	r19, 1
    4aea:	02 c0       	rjmp	.+4      	; 0x4af0 <vfprintf+0x382>
    4aec:	80 e2       	ldi	r24, 0x20	; 32
    4aee:	01 c0       	rjmp	.+2      	; 0x4af2 <vfprintf+0x384>
    4af0:	8b e2       	ldi	r24, 0x2B	; 43
    4af2:	37 fd       	sbrc	r19, 7
    4af4:	8d e2       	ldi	r24, 0x2D	; 45
    4af6:	b7 01       	movw	r22, r14
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4afe:	06 c0       	rjmp	.+12     	; 0x4b0c <vfprintf+0x39e>
    4b00:	b7 01       	movw	r22, r14
    4b02:	80 e3       	ldi	r24, 0x30	; 48
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4b0a:	7a 94       	dec	r7
    4b0c:	a7 14       	cp	r10, r7
    4b0e:	c0 f3       	brcs	.-16     	; 0x4b00 <vfprintf+0x392>
    4b10:	aa 94       	dec	r10
    4b12:	f4 01       	movw	r30, r8
    4b14:	ea 0d       	add	r30, r10
    4b16:	f1 1d       	adc	r31, r1
    4b18:	b7 01       	movw	r22, r14
    4b1a:	80 81       	ld	r24, Z
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4b22:	a1 10       	cpse	r10, r1
    4b24:	f5 cf       	rjmp	.-22     	; 0x4b10 <vfprintf+0x3a2>
    4b26:	06 c0       	rjmp	.+12     	; 0x4b34 <vfprintf+0x3c6>
    4b28:	b7 01       	movw	r22, r14
    4b2a:	80 e2       	ldi	r24, 0x20	; 32
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <fputc>
    4b32:	3a 94       	dec	r3
    4b34:	31 10       	cpse	r3, r1
    4b36:	f8 cf       	rjmp	.-16     	; 0x4b28 <vfprintf+0x3ba>
    4b38:	42 ce       	rjmp	.-892    	; 0x47be <vfprintf+0x50>
    4b3a:	f7 01       	movw	r30, r14
    4b3c:	26 81       	ldd	r18, Z+6	; 0x06
    4b3e:	37 81       	ldd	r19, Z+7	; 0x07
    4b40:	02 c0       	rjmp	.+4      	; 0x4b46 <vfprintf+0x3d8>
    4b42:	2f ef       	ldi	r18, 0xFF	; 255
    4b44:	3f ef       	ldi	r19, 0xFF	; 255
    4b46:	c9 01       	movw	r24, r18
    4b48:	2c 96       	adiw	r28, 0x0c	; 12
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	0f be       	out	0x3f, r0	; 63
    4b52:	cd bf       	out	0x3d, r28	; 61
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	ff 90       	pop	r15
    4b5e:	ef 90       	pop	r14
    4b60:	df 90       	pop	r13
    4b62:	cf 90       	pop	r12
    4b64:	bf 90       	pop	r11
    4b66:	af 90       	pop	r10
    4b68:	9f 90       	pop	r9
    4b6a:	8f 90       	pop	r8
    4b6c:	7f 90       	pop	r7
    4b6e:	6f 90       	pop	r6
    4b70:	5f 90       	pop	r5
    4b72:	4f 90       	pop	r4
    4b74:	3f 90       	pop	r3
    4b76:	2f 90       	pop	r2
    4b78:	08 95       	ret

00004b7a <__eerd_block_m1284p>:
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22

00004b7e <__eerd_blraw_m1284p>:
    4b7e:	fc 01       	movw	r30, r24
    4b80:	f9 99       	sbic	0x1f, 1	; 31
    4b82:	fe cf       	rjmp	.-4      	; 0x4b80 <__eerd_blraw_m1284p+0x2>
    4b84:	06 c0       	rjmp	.+12     	; 0x4b92 <__eerd_blraw_m1284p+0x14>
    4b86:	f2 bd       	out	0x22, r31	; 34
    4b88:	e1 bd       	out	0x21, r30	; 33
    4b8a:	f8 9a       	sbi	0x1f, 0	; 31
    4b8c:	31 96       	adiw	r30, 0x01	; 1
    4b8e:	00 b4       	in	r0, 0x20	; 32
    4b90:	0d 92       	st	X+, r0
    4b92:	41 50       	subi	r20, 0x01	; 1
    4b94:	50 40       	sbci	r21, 0x00	; 0
    4b96:	b8 f7       	brcc	.-18     	; 0x4b86 <__eerd_blraw_m1284p+0x8>
    4b98:	08 95       	ret

00004b9a <__eerd_byte_m1284p>:
    4b9a:	f9 99       	sbic	0x1f, 1	; 31
    4b9c:	fe cf       	rjmp	.-4      	; 0x4b9a <__eerd_byte_m1284p>
    4b9e:	92 bd       	out	0x22, r25	; 34
    4ba0:	81 bd       	out	0x21, r24	; 33
    4ba2:	f8 9a       	sbi	0x1f, 0	; 31
    4ba4:	99 27       	eor	r25, r25
    4ba6:	80 b5       	in	r24, 0x20	; 32
    4ba8:	08 95       	ret

00004baa <__eerd_dword_m1284p>:
    4baa:	a6 e1       	ldi	r26, 0x16	; 22
    4bac:	b0 e0       	ldi	r27, 0x00	; 0
    4bae:	44 e0       	ldi	r20, 0x04	; 4
    4bb0:	50 e0       	ldi	r21, 0x00	; 0
    4bb2:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__eerd_blraw_m1284p>

00004bb6 <__eewr_byte_m1284p>:
    4bb6:	26 2f       	mov	r18, r22

00004bb8 <__eewr_r18_m1284p>:
    4bb8:	f9 99       	sbic	0x1f, 1	; 31
    4bba:	fe cf       	rjmp	.-4      	; 0x4bb8 <__eewr_r18_m1284p>
    4bbc:	1f ba       	out	0x1f, r1	; 31
    4bbe:	92 bd       	out	0x22, r25	; 34
    4bc0:	81 bd       	out	0x21, r24	; 33
    4bc2:	20 bd       	out	0x20, r18	; 32
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	f8 94       	cli
    4bc8:	fa 9a       	sbi	0x1f, 2	; 31
    4bca:	f9 9a       	sbi	0x1f, 1	; 31
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	01 96       	adiw	r24, 0x01	; 1
    4bd0:	08 95       	ret

00004bd2 <__ctype_isfalse>:
    4bd2:	99 27       	eor	r25, r25
    4bd4:	88 27       	eor	r24, r24

00004bd6 <__ctype_istrue>:
    4bd6:	08 95       	ret

00004bd8 <strnlen_P>:
    4bd8:	fc 01       	movw	r30, r24
    4bda:	05 90       	lpm	r0, Z+
    4bdc:	61 50       	subi	r22, 0x01	; 1
    4bde:	70 40       	sbci	r23, 0x00	; 0
    4be0:	01 10       	cpse	r0, r1
    4be2:	d8 f7       	brcc	.-10     	; 0x4bda <strnlen_P+0x2>
    4be4:	80 95       	com	r24
    4be6:	90 95       	com	r25
    4be8:	8e 0f       	add	r24, r30
    4bea:	9f 1f       	adc	r25, r31
    4bec:	08 95       	ret

00004bee <strnlen>:
    4bee:	fc 01       	movw	r30, r24
    4bf0:	61 50       	subi	r22, 0x01	; 1
    4bf2:	70 40       	sbci	r23, 0x00	; 0
    4bf4:	01 90       	ld	r0, Z+
    4bf6:	01 10       	cpse	r0, r1
    4bf8:	d8 f7       	brcc	.-10     	; 0x4bf0 <strnlen+0x2>
    4bfa:	80 95       	com	r24
    4bfc:	90 95       	com	r25
    4bfe:	8e 0f       	add	r24, r30
    4c00:	9f 1f       	adc	r25, r31
    4c02:	08 95       	ret

00004c04 <fputc>:
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	8c 01       	movw	r16, r24
    4c0e:	eb 01       	movw	r28, r22
    4c10:	8b 81       	ldd	r24, Y+3	; 0x03
    4c12:	81 fd       	sbrc	r24, 1
    4c14:	03 c0       	rjmp	.+6      	; 0x4c1c <fputc+0x18>
    4c16:	0f ef       	ldi	r16, 0xFF	; 255
    4c18:	1f ef       	ldi	r17, 0xFF	; 255
    4c1a:	1a c0       	rjmp	.+52     	; 0x4c50 <fputc+0x4c>
    4c1c:	82 ff       	sbrs	r24, 2
    4c1e:	0d c0       	rjmp	.+26     	; 0x4c3a <fputc+0x36>
    4c20:	2e 81       	ldd	r18, Y+6	; 0x06
    4c22:	3f 81       	ldd	r19, Y+7	; 0x07
    4c24:	8c 81       	ldd	r24, Y+4	; 0x04
    4c26:	9d 81       	ldd	r25, Y+5	; 0x05
    4c28:	28 17       	cp	r18, r24
    4c2a:	39 07       	cpc	r19, r25
    4c2c:	64 f4       	brge	.+24     	; 0x4c46 <fputc+0x42>
    4c2e:	e8 81       	ld	r30, Y
    4c30:	f9 81       	ldd	r31, Y+1	; 0x01
    4c32:	01 93       	st	Z+, r16
    4c34:	f9 83       	std	Y+1, r31	; 0x01
    4c36:	e8 83       	st	Y, r30
    4c38:	06 c0       	rjmp	.+12     	; 0x4c46 <fputc+0x42>
    4c3a:	e8 85       	ldd	r30, Y+8	; 0x08
    4c3c:	f9 85       	ldd	r31, Y+9	; 0x09
    4c3e:	80 2f       	mov	r24, r16
    4c40:	09 95       	icall
    4c42:	89 2b       	or	r24, r25
    4c44:	41 f7       	brne	.-48     	; 0x4c16 <fputc+0x12>
    4c46:	8e 81       	ldd	r24, Y+6	; 0x06
    4c48:	9f 81       	ldd	r25, Y+7	; 0x07
    4c4a:	01 96       	adiw	r24, 0x01	; 1
    4c4c:	9f 83       	std	Y+7, r25	; 0x07
    4c4e:	8e 83       	std	Y+6, r24	; 0x06
    4c50:	c8 01       	movw	r24, r16
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	08 95       	ret

00004c5c <__ultoa_invert>:
    4c5c:	fa 01       	movw	r30, r20
    4c5e:	aa 27       	eor	r26, r26
    4c60:	28 30       	cpi	r18, 0x08	; 8
    4c62:	51 f1       	breq	.+84     	; 0x4cb8 <__ultoa_invert+0x5c>
    4c64:	20 31       	cpi	r18, 0x10	; 16
    4c66:	81 f1       	breq	.+96     	; 0x4cc8 <__ultoa_invert+0x6c>
    4c68:	e8 94       	clt
    4c6a:	6f 93       	push	r22
    4c6c:	6e 7f       	andi	r22, 0xFE	; 254
    4c6e:	6e 5f       	subi	r22, 0xFE	; 254
    4c70:	7f 4f       	sbci	r23, 0xFF	; 255
    4c72:	8f 4f       	sbci	r24, 0xFF	; 255
    4c74:	9f 4f       	sbci	r25, 0xFF	; 255
    4c76:	af 4f       	sbci	r26, 0xFF	; 255
    4c78:	b1 e0       	ldi	r27, 0x01	; 1
    4c7a:	3e d0       	rcall	.+124    	; 0x4cf8 <__ultoa_invert+0x9c>
    4c7c:	b4 e0       	ldi	r27, 0x04	; 4
    4c7e:	3c d0       	rcall	.+120    	; 0x4cf8 <__ultoa_invert+0x9c>
    4c80:	67 0f       	add	r22, r23
    4c82:	78 1f       	adc	r23, r24
    4c84:	89 1f       	adc	r24, r25
    4c86:	9a 1f       	adc	r25, r26
    4c88:	a1 1d       	adc	r26, r1
    4c8a:	68 0f       	add	r22, r24
    4c8c:	79 1f       	adc	r23, r25
    4c8e:	8a 1f       	adc	r24, r26
    4c90:	91 1d       	adc	r25, r1
    4c92:	a1 1d       	adc	r26, r1
    4c94:	6a 0f       	add	r22, r26
    4c96:	71 1d       	adc	r23, r1
    4c98:	81 1d       	adc	r24, r1
    4c9a:	91 1d       	adc	r25, r1
    4c9c:	a1 1d       	adc	r26, r1
    4c9e:	20 d0       	rcall	.+64     	; 0x4ce0 <__ultoa_invert+0x84>
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <__ultoa_invert+0x48>
    4ca2:	68 94       	set
    4ca4:	3f 91       	pop	r19
    4ca6:	2a e0       	ldi	r18, 0x0A	; 10
    4ca8:	26 9f       	mul	r18, r22
    4caa:	11 24       	eor	r1, r1
    4cac:	30 19       	sub	r19, r0
    4cae:	30 5d       	subi	r19, 0xD0	; 208
    4cb0:	31 93       	st	Z+, r19
    4cb2:	de f6       	brtc	.-74     	; 0x4c6a <__ultoa_invert+0xe>
    4cb4:	cf 01       	movw	r24, r30
    4cb6:	08 95       	ret
    4cb8:	46 2f       	mov	r20, r22
    4cba:	47 70       	andi	r20, 0x07	; 7
    4cbc:	40 5d       	subi	r20, 0xD0	; 208
    4cbe:	41 93       	st	Z+, r20
    4cc0:	b3 e0       	ldi	r27, 0x03	; 3
    4cc2:	0f d0       	rcall	.+30     	; 0x4ce2 <__ultoa_invert+0x86>
    4cc4:	c9 f7       	brne	.-14     	; 0x4cb8 <__ultoa_invert+0x5c>
    4cc6:	f6 cf       	rjmp	.-20     	; 0x4cb4 <__ultoa_invert+0x58>
    4cc8:	46 2f       	mov	r20, r22
    4cca:	4f 70       	andi	r20, 0x0F	; 15
    4ccc:	40 5d       	subi	r20, 0xD0	; 208
    4cce:	4a 33       	cpi	r20, 0x3A	; 58
    4cd0:	18 f0       	brcs	.+6      	; 0x4cd8 <__ultoa_invert+0x7c>
    4cd2:	49 5d       	subi	r20, 0xD9	; 217
    4cd4:	31 fd       	sbrc	r19, 1
    4cd6:	40 52       	subi	r20, 0x20	; 32
    4cd8:	41 93       	st	Z+, r20
    4cda:	02 d0       	rcall	.+4      	; 0x4ce0 <__ultoa_invert+0x84>
    4cdc:	a9 f7       	brne	.-22     	; 0x4cc8 <__ultoa_invert+0x6c>
    4cde:	ea cf       	rjmp	.-44     	; 0x4cb4 <__ultoa_invert+0x58>
    4ce0:	b4 e0       	ldi	r27, 0x04	; 4
    4ce2:	a6 95       	lsr	r26
    4ce4:	97 95       	ror	r25
    4ce6:	87 95       	ror	r24
    4ce8:	77 95       	ror	r23
    4cea:	67 95       	ror	r22
    4cec:	ba 95       	dec	r27
    4cee:	c9 f7       	brne	.-14     	; 0x4ce2 <__ultoa_invert+0x86>
    4cf0:	00 97       	sbiw	r24, 0x00	; 0
    4cf2:	61 05       	cpc	r22, r1
    4cf4:	71 05       	cpc	r23, r1
    4cf6:	08 95       	ret
    4cf8:	9b 01       	movw	r18, r22
    4cfa:	ac 01       	movw	r20, r24
    4cfc:	0a 2e       	mov	r0, r26
    4cfe:	06 94       	lsr	r0
    4d00:	57 95       	ror	r21
    4d02:	47 95       	ror	r20
    4d04:	37 95       	ror	r19
    4d06:	27 95       	ror	r18
    4d08:	ba 95       	dec	r27
    4d0a:	c9 f7       	brne	.-14     	; 0x4cfe <__ultoa_invert+0xa2>
    4d0c:	62 0f       	add	r22, r18
    4d0e:	73 1f       	adc	r23, r19
    4d10:	84 1f       	adc	r24, r20
    4d12:	95 1f       	adc	r25, r21
    4d14:	a0 1d       	adc	r26, r0
    4d16:	08 95       	ret

00004d18 <__muluhisi3>:
    4d18:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <__umulhisi3>
    4d1c:	a5 9f       	mul	r26, r21
    4d1e:	90 0d       	add	r25, r0
    4d20:	b4 9f       	mul	r27, r20
    4d22:	90 0d       	add	r25, r0
    4d24:	a4 9f       	mul	r26, r20
    4d26:	80 0d       	add	r24, r0
    4d28:	91 1d       	adc	r25, r1
    4d2a:	11 24       	eor	r1, r1
    4d2c:	08 95       	ret

00004d2e <__umulhisi3>:
    4d2e:	a2 9f       	mul	r26, r18
    4d30:	b0 01       	movw	r22, r0
    4d32:	b3 9f       	mul	r27, r19
    4d34:	c0 01       	movw	r24, r0
    4d36:	a3 9f       	mul	r26, r19
    4d38:	01 d0       	rcall	.+2      	; 0x4d3c <__umulhisi3+0xe>
    4d3a:	b2 9f       	mul	r27, r18
    4d3c:	70 0d       	add	r23, r0
    4d3e:	81 1d       	adc	r24, r1
    4d40:	11 24       	eor	r1, r1
    4d42:	91 1d       	adc	r25, r1
    4d44:	08 95       	ret

00004d46 <_exit>:
    4d46:	f8 94       	cli

00004d48 <__stop_program>:
    4d48:	ff cf       	rjmp	.-2      	; 0x4d48 <__stop_program>
