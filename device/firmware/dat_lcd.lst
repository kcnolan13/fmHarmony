
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  000024fc  00002590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000107  00800286  00800286  00002716  2**0
                  ALLOC
  3 .stab         00009a20  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002525  00000000  00000000  0000c138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e65d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_20>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <peekChar+0x2>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ec ef       	ldi	r30, 0xFC	; 252
     122:	f4 e2       	ldi	r31, 0x24	; 36
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a6 38       	cpi	r26, 0x86	; 134
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	13 e0       	ldi	r17, 0x03	; 3
     136:	a6 e8       	ldi	r26, 0x86	; 134
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	ad 38       	cpi	r26, 0x8D	; 141
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 76 09 	call	0x12ec	; 0x12ec <main>
     148:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     150:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     154:	8c e0       	ldi	r24, 0x0C	; 12
     156:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
     15a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
     15e:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     162:	e9 ec       	ldi	r30, 0xC9	; 201
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	88 6d       	ori	r24, 0xD8	; 216
     16a:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     16c:	e1 ec       	ldi	r30, 0xC1	; 193
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	88 6d       	ori	r24, 0xD8	; 216
     174:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     176:	e8 ec       	ldi	r30, 0xC8	; 200
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	82 60       	ori	r24, 0x02	; 2
     17e:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
     180:	e0 ec       	ldi	r30, 0xC0	; 192
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	82 60       	ori	r24, 0x02	; 2
     188:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     18a:	ea ec       	ldi	r30, 0xCA	; 202
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	8e 60       	ori	r24, 0x0E	; 14
     192:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     194:	e2 ec       	ldi	r30, 0xC2	; 194
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	86 60       	ori	r24, 0x06	; 6
     19c:	80 83       	st	Z, r24
     19e:	08 95       	ret

000001a0 <disable_gps>:

}

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
     1a0:	e1 ec       	ldi	r30, 0xC1	; 193
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	87 72       	andi	r24, 0x27	; 39
     1a8:	80 83       	st	Z, r24
     1aa:	08 95       	ret

000001ac <__vector_20>:
        rxWritePos = 0;
    }
}

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	0b b6       	in	r0, 0x3b	; 59
     1b8:	0f 92       	push	r0
     1ba:	2f 93       	push	r18
     1bc:	3f 93       	push	r19
     1be:	4f 93       	push	r20
     1c0:	5f 93       	push	r21
     1c2:	6f 93       	push	r22
     1c4:	7f 93       	push	r23
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31

    gps_rxCount ++;
     1d2:	80 91 de 02 	lds	r24, 0x02DE
     1d6:	90 91 df 02 	lds	r25, 0x02DF
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	90 93 df 02 	sts	0x02DF, r25
     1e0:	80 93 de 02 	sts	0x02DE, r24

    //prevent buffer overflow
    if (gps_rxCount > 80)
     1e4:	80 91 de 02 	lds	r24, 0x02DE
     1e8:	90 91 df 02 	lds	r25, 0x02DF
     1ec:	81 35       	cpi	r24, 0x51	; 81
     1ee:	91 05       	cpc	r25, r1
     1f0:	84 f0       	brlt	.+32     	; 0x212 <__vector_20+0x66>
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
    {
        int i;
        for (i=0; i<80; i++)
            gps_rxBuffer[i]='\0';
     1f6:	fc 01       	movw	r30, r24
     1f8:	e2 57       	subi	r30, 0x72	; 114
     1fa:	fd 4f       	sbci	r31, 0xFD	; 253
     1fc:	10 82       	st	Z, r1

    //prevent buffer overflow
    if (gps_rxCount > 80)
    {
        int i;
        for (i=0; i<80; i++)
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	80 35       	cpi	r24, 0x50	; 80
     202:	91 05       	cpc	r25, r1
     204:	c1 f7       	brne	.-16     	; 0x1f6 <__vector_20+0x4a>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 1; 
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	90 93 df 02 	sts	0x02DF, r25
     20e:	80 93 de 02 	sts	0x02DE, r24
    }

    //Read value out of the UART buffer
    gps_rxBuffer[gps_rxCount] = UDR0;
     212:	e0 91 de 02 	lds	r30, 0x02DE
     216:	f0 91 df 02 	lds	r31, 0x02DF
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	e2 57       	subi	r30, 0x72	; 114
     220:	fd 4f       	sbci	r31, 0xFD	; 253
     222:	80 83       	st	Z, r24

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount]=='$')
     224:	e0 91 de 02 	lds	r30, 0x02DE
     228:	f0 91 df 02 	lds	r31, 0x02DF
     22c:	e2 57       	subi	r30, 0x72	; 114
     22e:	fd 4f       	sbci	r31, 0xFD	; 253
     230:	80 81       	ld	r24, Z
     232:	84 32       	cpi	r24, 0x24	; 36
     234:	81 f4       	brne	.+32     	; 0x256 <__vector_20+0xaa>
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
    {
        int i;
        for (i=1; i<80; i++)
            gps_rxBuffer[i]='\0';
     23a:	fc 01       	movw	r30, r24
     23c:	e2 57       	subi	r30, 0x72	; 114
     23e:	fd 4f       	sbci	r31, 0xFD	; 253
     240:	10 82       	st	Z, r1

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount]=='$')
    {
        int i;
        for (i=1; i<80; i++)
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	80 35       	cpi	r24, 0x50	; 80
     246:	91 05       	cpc	r25, r1
     248:	c1 f7       	brne	.-16     	; 0x23a <__vector_20+0x8e>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 1; 
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	90 93 df 02 	sts	0x02DF, r25
     252:	80 93 de 02 	sts	0x02DE, r24
    }

    //parse the string and update the gps_data fields if it was a \r or \n
    if ((gps_rxBuffer[gps_rxCount]=='\r')||(gps_rxBuffer[gps_rxCount]=='\n')) {
     256:	e0 91 de 02 	lds	r30, 0x02DE
     25a:	f0 91 df 02 	lds	r31, 0x02DF
     25e:	e2 57       	subi	r30, 0x72	; 114
     260:	fd 4f       	sbci	r31, 0xFD	; 253
     262:	80 81       	ld	r24, Z
     264:	8d 30       	cpi	r24, 0x0D	; 13
     266:	49 f0       	breq	.+18     	; 0x27a <__vector_20+0xce>
     268:	e0 91 de 02 	lds	r30, 0x02DE
     26c:	f0 91 df 02 	lds	r31, 0x02DF
     270:	e2 57       	subi	r30, 0x72	; 114
     272:	fd 4f       	sbci	r31, 0xFD	; 253
     274:	80 81       	ld	r24, Z
     276:	8a 30       	cpi	r24, 0x0A	; 10
     278:	61 f4       	brne	.+24     	; 0x292 <__vector_20+0xe6>
        parse_nmea(strcat(gps_rxBuffer, ","), gps_data);
     27a:	63 e1       	ldi	r22, 0x13	; 19
     27c:	71 e0       	ldi	r23, 0x01	; 1
     27e:	8e e8       	ldi	r24, 0x8E	; 142
     280:	92 e0       	ldi	r25, 0x02	; 2
     282:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <strcat>
     286:	61 e7       	ldi	r22, 0x71	; 113
     288:	73 e0       	ldi	r23, 0x03	; 3
     28a:	0e 94 35 09 	call	0x126a	; 0x126a <parse_nmea>
        disable_gps();
     28e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <disable_gps>
    }
}
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	bf 91       	pop	r27
     298:	af 91       	pop	r26
     29a:	9f 91       	pop	r25
     29c:	8f 91       	pop	r24
     29e:	7f 91       	pop	r23
     2a0:	6f 91       	pop	r22
     2a2:	5f 91       	pop	r21
     2a4:	4f 91       	pop	r20
     2a6:	3f 91       	pop	r19
     2a8:	2f 91       	pop	r18
     2aa:	0f 90       	pop	r0
     2ac:	0b be       	out	0x3b, r0	; 59
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <enable_gps>:
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     2b8:	e1 ec       	ldi	r30, 0xC1	; 193
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	88 6d       	ori	r24, 0xD8	; 216
     2c0:	80 83       	st	Z, r24
     2c2:	08 95       	ret

000002c4 <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	84 b9       	out	0x04, r24	; 4
    cli();
     2c8:	f8 94       	cli
    //Init usart
    InitUSART();
     2ca:	0e 94 a8 00 	call	0x150	; 0x150 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     2ce:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     2d0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	2f e3       	ldi	r18, 0x3F	; 63
     2d6:	8d e0       	ldi	r24, 0x0D	; 13
     2d8:	93 e0       	ldi	r25, 0x03	; 3
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	90 40       	sbci	r25, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <prepare_device+0x16>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <prepare_device+0x20>
     2e4:	00 00       	nop
     2e6:	08 95       	ret

000002e8 <database_free>:
}

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     2e8:	10 92 ea 02 	sts	0x02EA, r1
     2ec:	10 92 e9 02 	sts	0x02E9, r1

    free(all_stations);
     2f0:	80 91 ef 02 	lds	r24, 0x02EF
     2f4:	90 91 f0 02 	lds	r25, 0x02F0
     2f8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <free>
    all_stations = NULL;
     2fc:	10 92 f0 02 	sts	0x02F0, r1
     300:	10 92 ef 02 	sts	0x02EF, r1
     304:	08 95       	ret

00000306 <wipe_eeprom>:

//---- EEPROM Operations ----//

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(void)
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
    int i;
    lcd_init();
     30a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("wiping\nmemory...");
     30e:	85 e1       	ldi	r24, 0x15	; 21
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     31a:	80 91 8c 02 	lds	r24, 0x028C
     31e:	90 91 8d 02 	lds	r25, 0x028D
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	49 f0       	breq	.+18     	; 0x338 <wipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     326:	6f ef       	ldi	r22, 0xFF	; 255
     328:	ce 01       	movw	r24, r28
     32a:	0e 94 c8 11 	call	0x2390	; 0x2390 <__eewr_byte_m1284p>
void wipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     32e:	21 96       	adiw	r28, 0x01	; 1
     330:	c1 3f       	cpi	r28, 0xF1	; 241
     332:	8a e0       	ldi	r24, 0x0A	; 10
     334:	d8 07       	cpc	r29, r24
     336:	89 f7       	brne	.-30     	; 0x31a <wipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <my_eeprom_read_int>:

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     33e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__eerd_byte_m1284p>
    return (temp_num);
}
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	08 95       	ret

00000346 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     346:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__eerd_byte_m1284p>

0000034a <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     34a:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__eerd_dword_m1284p>

0000034e <my_eeprom_read_string>:
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     34e:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__eerd_block_m1284p>

00000352 <string_write_int>:

//---- LCD Routines ----//

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	18 2f       	mov	r17, r24
     35c:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     35e:	cb 01       	movw	r24, r22
     360:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <malloc>
     364:	d8 2f       	mov	r29, r24
     366:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	26 e2       	ldi	r18, 0x26	; 38
     36e:	31 e0       	ldi	r19, 0x01	; 1
     370:	3f 93       	push	r19
     372:	2f 93       	push	r18
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sprintf>
    string_write(temp);
     37c:	8d 2f       	mov	r24, r29
     37e:	9c 2f       	mov	r25, r28
     380:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    free(temp);
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	8d 2f       	mov	r24, r29
     392:	9c 2f       	mov	r25, r28
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     39c:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <free>

000003a0 <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
}

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 ba 11 	call	0x2374	; 0x2374 <__eerd_byte_m1284p>
     3b4:	90 e0       	ldi	r25, 0x00	; 0
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);

    if (num_stations==255)
     3b6:	8f 3f       	cpi	r24, 0xFF	; 255
     3b8:	91 05       	cpc	r25, r1
     3ba:	29 f0       	breq	.+10     	; 0x3c6 <database_load+0x26>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3bc:	90 93 ea 02 	sts	0x02EA, r25
     3c0:	80 93 e9 02 	sts	0x02E9, r24
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <database_load+0x2e>

    if (num_stations==255)
        num_stations = 0;
     3c6:	10 92 ea 02 	sts	0x02EA, r1
     3ca:	10 92 e9 02 	sts	0x02E9, r1
     3ce:	2f e9       	ldi	r18, 0x9F	; 159
     3d0:	46 e8       	ldi	r20, 0x86	; 134
     3d2:	51 e0       	ldi	r21, 0x01	; 1
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	40 40       	sbci	r20, 0x00	; 0
     3d8:	50 40       	sbci	r21, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <database_load+0x34>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <database_load+0x3e>
     3de:	00 00       	nop

    _delay_ms(500);
    lcd_init();
     3e0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("importing ");
     3e4:	89 e2       	ldi	r24, 0x29	; 41
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    string_write_int(num_stations,3);
     3ec:	63 e0       	ldi	r22, 0x03	; 3
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 91 e9 02 	lds	r24, 0x02E9
     3f4:	90 91 ea 02 	lds	r25, 0x02EA
     3f8:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
    string_write("\nstations...");
     3fc:	84 e3       	ldi	r24, 0x34	; 52
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     404:	80 91 e9 02 	lds	r24, 0x02E9
     408:	90 91 ea 02 	lds	r25, 0x02EA
     40c:	2c e1       	ldi	r18, 0x1C	; 28
     40e:	fc 01       	movw	r30, r24
     410:	2e 9f       	mul	r18, r30
     412:	c0 01       	movw	r24, r0
     414:	2f 9f       	mul	r18, r31
     416:	90 0d       	add	r25, r0
     418:	11 24       	eor	r1, r1
     41a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <malloc>
     41e:	90 93 f0 02 	sts	0x02F0, r25
     422:	80 93 ef 02 	sts	0x02EF, r24

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     426:	c0 e0       	ldi	r28, 0x00	; 0
     428:	d0 e0       	ldi	r29, 0x00	; 0
     42a:	e1 2c       	mov	r14, r1
     42c:	f1 2c       	mov	r15, r1
     42e:	80 91 e9 02 	lds	r24, 0x02E9
     432:	90 91 ea 02 	lds	r25, 0x02EA
     436:	e8 16       	cp	r14, r24
     438:	f9 06       	cpc	r15, r25
     43a:	0c f0       	brlt	.+2      	; 0x43e <database_load+0x9e>
     43c:	45 c0       	rjmp	.+138    	; 0x4c8 <database_load+0x128>
     43e:	be 01       	movw	r22, r28
     440:	6f 5f       	subi	r22, 0xFF	; 255
     442:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     444:	80 91 ef 02 	lds	r24, 0x02EF
     448:	90 91 f0 02 	lds	r25, 0x02F0
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     44c:	48 e0       	ldi	r20, 0x08	; 8
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	8c 0f       	add	r24, r28
     452:	9d 1f       	adc	r25, r29
     454:	0e 94 aa 11 	call	0x2354	; 0x2354 <__eerd_block_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     458:	00 91 ef 02 	lds	r16, 0x02EF
     45c:	10 91 f0 02 	lds	r17, 0x02F0
     460:	0c 0f       	add	r16, r28
     462:	1d 1f       	adc	r17, r29
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     464:	ce 01       	movw	r24, r28
     466:	09 96       	adiw	r24, 0x09	; 9
     468:	0e 94 c2 11 	call	0x2384	; 0x2384 <__eerd_dword_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     46c:	f8 01       	movw	r30, r16
     46e:	60 87       	std	Z+8, r22	; 0x08
     470:	71 87       	std	Z+9, r23	; 0x09
     472:	82 87       	std	Z+10, r24	; 0x0a
     474:	93 87       	std	Z+11, r25	; 0x0b
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     476:	ce 01       	movw	r24, r28
     478:	0d 96       	adiw	r24, 0x0d	; 13
     47a:	0e 94 c2 11 	call	0x2384	; 0x2384 <__eerd_dword_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     47e:	f8 01       	movw	r30, r16
     480:	64 87       	std	Z+12, r22	; 0x0c
     482:	75 87       	std	Z+13, r23	; 0x0d
     484:	86 87       	std	Z+14, r24	; 0x0e
     486:	97 87       	std	Z+15, r25	; 0x0f
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     488:	ce 01       	movw	r24, r28
     48a:	41 96       	adiw	r24, 0x11	; 17
     48c:	0e 94 c2 11 	call	0x2384	; 0x2384 <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     490:	f8 01       	movw	r30, r16
     492:	60 8b       	std	Z+16, r22	; 0x10
     494:	71 8b       	std	Z+17, r23	; 0x11
     496:	82 8b       	std	Z+18, r24	; 0x12
     498:	93 8b       	std	Z+19, r25	; 0x13
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     49a:	ce 01       	movw	r24, r28
     49c:	45 96       	adiw	r24, 0x15	; 21
     49e:	0e 94 c2 11 	call	0x2384	; 0x2384 <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     4a2:	f8 01       	movw	r30, r16
     4a4:	64 8b       	std	Z+20, r22	; 0x14
     4a6:	75 8b       	std	Z+21, r23	; 0x15
     4a8:	86 8b       	std	Z+22, r24	; 0x16
     4aa:	97 8b       	std	Z+23, r25	; 0x17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     4ac:	ce 01       	movw	r24, r28
     4ae:	49 96       	adiw	r24, 0x19	; 25
     4b0:	0e 94 c2 11 	call	0x2384	; 0x2384 <__eerd_dword_m1284p>
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     4b4:	f8 01       	movw	r30, r16
     4b6:	60 8f       	std	Z+24, r22	; 0x18
     4b8:	71 8f       	std	Z+25, r23	; 0x19
     4ba:	82 8f       	std	Z+26, r24	; 0x1a
     4bc:	93 8f       	std	Z+27, r25	; 0x1b

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     4be:	ff ef       	ldi	r31, 0xFF	; 255
     4c0:	ef 1a       	sub	r14, r31
     4c2:	ff 0a       	sbc	r15, r31
     4c4:	6c 96       	adiw	r28, 0x1c	; 28
     4c6:	b3 cf       	rjmp	.-154    	; 0x42e <database_load+0x8e>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	08 95       	ret

000004d6 <string_write_float>:
    free(temp);
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <string_write_float+0x12>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <string_write_float+0x14>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     4f0:	ae 01       	movw	r20, r28
     4f2:	4f 5f       	subi	r20, 0xFF	; 255
     4f4:	5f 4f       	sbci	r21, 0xFF	; 255
     4f6:	0e 94 16 0c 	call	0x182c	; 0x182c <modf>
     4fa:	6b 01       	movw	r12, r22
     4fc:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     4fe:	69 81       	ldd	r22, Y+1	; 0x01
     500:	7a 81       	ldd	r23, Y+2	; 0x02
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	9c 81       	ldd	r25, Y+4	; 0x04
     506:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixsfsi>
     50a:	dc 01       	movw	r26, r24
     50c:	cb 01       	movw	r24, r22
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
     516:	86 e7       	ldi	r24, 0x76	; 118
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     51e:	b8 01       	movw	r22, r16
     520:	88 27       	eor	r24, r24
     522:	77 fd       	sbrc	r23, 7
     524:	80 95       	com	r24
     526:	98 2f       	mov	r25, r24
     528:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatsisf>
     52c:	9b 01       	movw	r18, r22
     52e:	ac 01       	movw	r20, r24
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	91 e4       	ldi	r25, 0x41	; 65
     538:	0e 94 ac 0c 	call	0x1958	; 0x1958 <pow>
     53c:	9b 01       	movw	r18, r22
     53e:	ac 01       	movw	r20, r24
     540:	c7 01       	movw	r24, r14
     542:	b6 01       	movw	r22, r12
     544:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulsf3>
     548:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <round>
     54c:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixsfsi>
     550:	7b 01       	movw	r14, r22
     552:	77 ff       	sbrs	r23, 7
     554:	04 c0       	rjmp	.+8      	; 0x55e <string_write_float+0x88>
     556:	ee 24       	eor	r14, r14
     558:	ff 24       	eor	r15, r15
     55a:	e6 1a       	sub	r14, r22
     55c:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     55e:	e1 14       	cp	r14, r1
     560:	f1 04       	cpc	r15, r1
     562:	a1 f0       	breq	.+40     	; 0x58c <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     564:	b7 01       	movw	r22, r14
     566:	88 27       	eor	r24, r24
     568:	77 fd       	sbrc	r23, 7
     56a:	80 95       	com	r24
     56c:	98 2f       	mov	r25, r24
     56e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__floatsisf>
     572:	0e 94 cb 0b 	call	0x1796	; 0x1796 <log10>
     576:	0e 94 23 0b 	call	0x1646	; 0x1646 <floor>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     586:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fixsfsi>
     58a:	02 c0       	rjmp	.+4      	; 0x590 <string_write_float+0xba>
    } else {
        digits = 0;
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     590:	c1 2c       	mov	r12, r1
     592:	d1 2c       	mov	r13, r1
     594:	06 1b       	sub	r16, r22
     596:	17 0b       	sbc	r17, r23
     598:	c0 16       	cp	r12, r16
     59a:	d1 06       	cpc	r13, r17
     59c:	44 f4       	brge	.+16     	; 0x5ae <string_write_float+0xd8>
    {
        string_write("0");
     59e:	81 e4       	ldi	r24, 0x41	; 65
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	c8 1a       	sub	r12, r24
     5aa:	d8 0a       	sbc	r13, r24
     5ac:	f5 cf       	rjmp	.-22     	; 0x598 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     5ae:	64 e0       	ldi	r22, 0x04	; 4
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	c7 01       	movw	r24, r14
}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     5cc:	0c 94 a9 01 	jmp	0x352	; 0x352 <string_write_int>

000005d0 <print_callsign>:
        return;
}

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     5d8:	2c e1       	ldi	r18, 0x1C	; 28
     5da:	28 9f       	mul	r18, r24
     5dc:	80 01       	movw	r16, r0
     5de:	29 9f       	mul	r18, r25
     5e0:	10 0d       	add	r17, r0
     5e2:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     5e8:	e0 91 ef 02 	lds	r30, 0x02EF
     5ec:	f0 91 f0 02 	lds	r31, 0x02F0
     5f0:	e0 0f       	add	r30, r16
     5f2:	f1 1f       	adc	r31, r17
     5f4:	ec 0f       	add	r30, r28
     5f6:	fd 1f       	adc	r31, r29
     5f8:	80 81       	ld	r24, Z
     5fa:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     5fe:	21 96       	adiw	r28, 0x01	; 1
     600:	c8 30       	cpi	r28, 0x08	; 8
     602:	d1 05       	cpc	r29, r1
     604:	89 f7       	brne	.-30     	; 0x5e8 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <print_station>:
    string_write_int(temp,4);
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     61a:	63 e0       	ldi	r22, 0x03	; 3
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
     624:	80 ed       	ldi	r24, 0xD0	; 208
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     62c:	c8 01       	movw	r24, r16
     62e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_callsign>
     632:	83 e2       	ldi	r24, 0x23	; 35
     634:	94 ef       	ldi	r25, 0xF4	; 244
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <print_station+0x26>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <print_station+0x2c>
     63c:	00 00       	nop
     63e:	8e e4       	ldi	r24, 0x4E	; 78
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    if (op_mode==MD_UPDATE)
     646:	80 91 8c 02 	lds	r24, 0x028C
     64a:	90 91 8d 02 	lds	r25, 0x028D
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	09 f4       	brne	.+2      	; 0x654 <print_station+0x44>
     652:	b1 c0       	rjmp	.+354    	; 0x7b6 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     65c:	8c e1       	ldi	r24, 0x1C	; 28
     65e:	80 9f       	mul	r24, r16
     660:	e0 01       	movw	r28, r0
     662:	81 9f       	mul	r24, r17
     664:	d0 0d       	add	r29, r0
     666:	11 24       	eor	r1, r1
     668:	e0 91 ef 02 	lds	r30, 0x02EF
     66c:	f0 91 f0 02 	lds	r31, 0x02F0
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	60 85       	ldd	r22, Z+8	; 0x08
     676:	71 85       	ldd	r23, Z+9	; 0x09
     678:	82 85       	ldd	r24, Z+10	; 0x0a
     67a:	93 85       	ldd	r25, Z+11	; 0x0b
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <string_write_float>
     684:	83 e2       	ldi	r24, 0x23	; 35
     686:	94 ef       	ldi	r25, 0xF4	; 244
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <print_station+0x78>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <print_station+0x7e>
     68e:	00 00       	nop
     690:	8e e4       	ldi	r24, 0x4E	; 78
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    if (op_mode==MD_UPDATE)
     698:	80 91 8c 02 	lds	r24, 0x028C
     69c:	90 91 8d 02 	lds	r25, 0x028D
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <print_station+0x96>
     6a4:	88 c0       	rjmp	.+272    	; 0x7b6 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     6a6:	8a e4       	ldi	r24, 0x4A	; 74
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     6ae:	e0 91 ef 02 	lds	r30, 0x02EF
     6b2:	f0 91 f0 02 	lds	r31, 0x02F0
     6b6:	ec 0f       	add	r30, r28
     6b8:	fd 1f       	adc	r31, r29
     6ba:	64 85       	ldd	r22, Z+12	; 0x0c
     6bc:	75 85       	ldd	r23, Z+13	; 0x0d
     6be:	86 85       	ldd	r24, Z+14	; 0x0e
     6c0:	97 85       	ldd	r25, Z+15	; 0x0f
     6c2:	44 e0       	ldi	r20, 0x04	; 4
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <string_write_float>
     6ca:	83 e2       	ldi	r24, 0x23	; 35
     6cc:	94 ef       	ldi	r25, 0xF4	; 244
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <print_station+0xbe>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <print_station+0xc4>
     6d4:	00 00       	nop
     6d6:	8e e4       	ldi	r24, 0x4E	; 78
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    if (op_mode==MD_UPDATE)
     6de:	80 91 8c 02 	lds	r24, 0x028C
     6e2:	90 91 8d 02 	lds	r25, 0x028D
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	09 f4       	brne	.+2      	; 0x6ec <print_station+0xdc>
     6ea:	65 c0       	rjmp	.+202    	; 0x7b6 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     6ec:	80 e5       	ldi	r24, 0x50	; 80
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     6f4:	e0 91 ef 02 	lds	r30, 0x02EF
     6f8:	f0 91 f0 02 	lds	r31, 0x02F0
     6fc:	ec 0f       	add	r30, r28
     6fe:	fd 1f       	adc	r31, r29
     700:	60 89       	ldd	r22, Z+16	; 0x10
     702:	71 89       	ldd	r23, Z+17	; 0x11
     704:	82 89       	ldd	r24, Z+18	; 0x12
     706:	93 89       	ldd	r25, Z+19	; 0x13
     708:	44 e0       	ldi	r20, 0x04	; 4
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <string_write_float>
     710:	83 e2       	ldi	r24, 0x23	; 35
     712:	94 ef       	ldi	r25, 0xF4	; 244
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <print_station+0x104>
     718:	00 c0       	rjmp	.+0      	; 0x71a <print_station+0x10a>
     71a:	00 00       	nop
     71c:	8e e4       	ldi	r24, 0x4E	; 78
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    if (op_mode==MD_UPDATE)
     724:	80 91 8c 02 	lds	r24, 0x028C
     728:	90 91 8d 02 	lds	r25, 0x028D
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	09 f4       	brne	.+2      	; 0x732 <print_station+0x122>
     730:	42 c0       	rjmp	.+132    	; 0x7b6 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     732:	86 e5       	ldi	r24, 0x56	; 86
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     73a:	e0 91 ef 02 	lds	r30, 0x02EF
     73e:	f0 91 f0 02 	lds	r31, 0x02F0
     742:	ec 0f       	add	r30, r28
     744:	fd 1f       	adc	r31, r29
     746:	64 89       	ldd	r22, Z+20	; 0x14
     748:	75 89       	ldd	r23, Z+21	; 0x15
     74a:	86 89       	ldd	r24, Z+22	; 0x16
     74c:	97 89       	ldd	r25, Z+23	; 0x17
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <string_write_float>
     756:	83 e2       	ldi	r24, 0x23	; 35
     758:	94 ef       	ldi	r25, 0xF4	; 244
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <print_station+0x14a>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <print_station+0x150>
     760:	00 00       	nop
     762:	8e e4       	ldi	r24, 0x4E	; 78
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    if (op_mode==MD_UPDATE)
     76a:	80 91 8c 02 	lds	r24, 0x028C
     76e:	90 91 8d 02 	lds	r25, 0x028D
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	01 f1       	breq	.+64     	; 0x7b6 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     776:	8c e5       	ldi	r24, 0x5C	; 92
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     77e:	e0 91 ef 02 	lds	r30, 0x02EF
     782:	f0 91 f0 02 	lds	r31, 0x02F0
     786:	ec 0f       	add	r30, r28
     788:	fd 1f       	adc	r31, r29
     78a:	60 8d       	ldd	r22, Z+24	; 0x18
     78c:	71 8d       	ldd	r23, Z+25	; 0x19
     78e:	82 8d       	ldd	r24, Z+26	; 0x1a
     790:	93 8d       	ldd	r25, Z+27	; 0x1b
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <string_write_float>
     79a:	83 e2       	ldi	r24, 0x23	; 35
     79c:	94 ef       	ldi	r25, 0xF4	; 244
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <print_station+0x18e>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <print_station+0x194>
     7a4:	00 00       	nop
     7a6:	8e e4       	ldi	r24, 0x4E	; 78
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    if (op_mode==MD_UPDATE)
     7ae:	80 91 8c 02 	lds	r24, 0x028C
     7b2:	90 91 8d 02 	lds	r25, 0x028D
        return;
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     7c0:	80 91 e4 02 	lds	r24, 0x02E4
     7c4:	90 91 01 01 	lds	r25, 0x0101
     7c8:	89 13       	cpse	r24, r25
     7ca:	0c c0       	rjmp	.+24     	; 0x7e4 <detectSerialStart+0x24>
     7cc:	20 91 e5 02 	lds	r18, 0x02E5
     7d0:	28 13       	cpse	r18, r24
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <detectSerialStart+0x24>
     7d4:	30 91 e6 02 	lds	r19, 0x02E6
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	32 17       	cp	r19, r18
     7de:	21 f0       	breq	.+8      	; 0x7e8 <detectSerialStart+0x28>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
        return 1;
    else
        return 0;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
}
     7e8:	08 95       	ret

000007ea <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	0b b6       	in	r0, 0x3b	; 59
     7f6:	0f 92       	push	r0
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     810:	80 91 e5 02 	lds	r24, 0x02E5
     814:	80 93 e6 02 	sts	0x02E6, r24
    serial_history[1] = serial_history[0];
     818:	80 91 e4 02 	lds	r24, 0x02E4
     81c:	80 93 e5 02 	sts	0x02E5, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     820:	80 91 ce 00 	lds	r24, 0x00CE
     824:	80 93 e4 02 	sts	0x02E4, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     828:	80 91 8c 02 	lds	r24, 0x028C
     82c:	90 91 8d 02 	lds	r25, 0x028D
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	69 f4       	brne	.+26     	; 0x84e <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     834:	e0 91 e7 02 	lds	r30, 0x02E7
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 91 e4 02 	lds	r24, 0x02E4
     83e:	ef 50       	subi	r30, 0x0F	; 15
     840:	fd 4f       	sbci	r31, 0xFD	; 253
     842:	80 83       	st	Z, r24
        rxWritePos++;
     844:	80 91 e7 02 	lds	r24, 0x02E7
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	80 93 e7 02 	sts	0x02E7, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     84e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <detectSerialStart>
     852:	89 2b       	or	r24, r25
     854:	31 f0       	breq	.+12     	; 0x862 <__vector_28+0x78>
        op_mode = MD_UPDATE;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	90 93 8d 02 	sts	0x028D, r25
     85e:	80 93 8c 02 	sts	0x028C, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     862:	80 91 e7 02 	lds	r24, 0x02E7
     866:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     868:	10 92 e7 02 	sts	0x02E7, r1
    }
}
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     892:	80 91 e4 02 	lds	r24, 0x02E4
     896:	90 91 00 01 	lds	r25, 0x0100
     89a:	89 13       	cpse	r24, r25
     89c:	0c c0       	rjmp	.+24     	; 0x8b6 <detectSerialEnd+0x24>
     89e:	20 91 e5 02 	lds	r18, 0x02E5
     8a2:	28 13       	cpse	r18, r24
     8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <detectSerialEnd+0x24>
     8a6:	30 91 e6 02 	lds	r19, 0x02E6
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	32 17       	cp	r19, r18
     8b0:	21 f0       	breq	.+8      	; 0x8ba <detectSerialEnd+0x28>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
        return 1;
    else
        return 0;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
}
     8ba:	08 95       	ret

000008bc <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     8bc:	e0 91 e8 02 	lds	r30, 0x02E8
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	ef 50       	subi	r30, 0x0F	; 15
     8c4:	fd 4f       	sbci	r31, 0xFD	; 253
     8c6:	80 81       	ld	r24, Z
     
    rxReadPos++;
     8c8:	90 91 e8 02 	lds	r25, 0x02E8
     8cc:	9f 5f       	subi	r25, 0xFF	; 255
     8ce:	90 93 e8 02 	sts	0x02E8, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     8d2:	90 91 e8 02 	lds	r25, 0x02E8
     8d6:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     8d8:	10 92 e8 02 	sts	0x02E8, r1
    }
    
    return ret;
}
     8dc:	08 95       	ret

000008de <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     8de:	90 91 e8 02 	lds	r25, 0x02E8
     8e2:	80 91 e7 02 	lds	r24, 0x02E7
     8e6:	98 17       	cp	r25, r24
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     8ea:	e0 91 e8 02 	lds	r30, 0x02E8
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ef 50       	subi	r30, 0x0F	; 15
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	80 81       	ld	r24, Z
     8f6:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     8f8:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     8fa:	08 95       	ret

000008fc <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     902:	10 92 8d 02 	sts	0x028D, r1
     906:	10 92 8c 02 	sts	0x028C, r1
    updating = 0;
     90a:	10 92 89 02 	sts	0x0289, r1
     90e:	10 92 88 02 	sts	0x0288, r1
    serial_timer = 0;
     912:	10 92 e0 02 	sts	0x02E0, r1
     916:	10 92 e1 02 	sts	0x02E1, r1
     91a:	10 92 e2 02 	sts	0x02E2, r1
     91e:	10 92 e3 02 	sts	0x02E3, r1

    //import the new database
    lcd_init();
     922:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>

    if (flag==FL_SUCCESS)
     926:	20 97       	sbiw	r28, 0x00	; 0
     928:	19 f4       	brne	.+6      	; 0x930 <terminate_serial+0x34>
        string_write("reading\ndatabase ...");
     92a:	83 e6       	ldi	r24, 0x63	; 99
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	02 c0       	rjmp	.+4      	; 0x934 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     930:	88 e7       	ldi	r24, 0x78	; 120
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>

    database_load();
     938:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <database_load>
     93c:	2f e3       	ldi	r18, 0x3F	; 63
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	21 50       	subi	r18, 0x01	; 1
     944:	80 40       	sbci	r24, 0x00	; 0
     946:	90 40       	sbci	r25, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <terminate_serial+0x46>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <terminate_serial+0x50>
     94c:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
     94e:	21 97       	sbiw	r28, 0x01	; 1
     950:	21 f4       	brne	.+8      	; 0x95a <terminate_serial+0x5e>
        string_write("\nupdate failed\n");
     952:	8b e8       	ldi	r24, 0x8B	; 139
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     95a:	2f e9       	ldi	r18, 0x9F	; 159
     95c:	86 e8       	ldi	r24, 0x86	; 134
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <terminate_serial+0x64>
     968:	00 c0       	rjmp	.+0      	; 0x96a <terminate_serial+0x6e>
     96a:	00 00       	nop

    _delay_ms(500);
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <check_database_integrity>:

//check for database corruption
void check_database_integrity(void)
{
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     97a:	60 91 e9 02 	lds	r22, 0x02E9
     97e:	70 91 ea 02 	lds	r23, 0x02EA
     982:	80 91 ef 02 	lds	r24, 0x02EF
     986:	90 91 f0 02 	lds	r25, 0x02F0
     98a:	c0 e0       	ldi	r28, 0x00	; 0
     98c:	d0 e0       	ldi	r29, 0x00	; 0
     98e:	c6 17       	cp	r28, r22
     990:	d7 07       	cpc	r29, r23
     992:	0c f0       	brlt	.+2      	; 0x996 <check_database_integrity+0x24>
     994:	6c c0       	rjmp	.+216    	; 0xa6e <check_database_integrity+0xfc>
     996:	ac 01       	movw	r20, r24
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if (((call[j] < 33)||(call[j] > 126))&&(call[j]!=' '))
     99c:	8a 01       	movw	r16, r20
     99e:	4f 5f       	subi	r20, 0xFF	; 255
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	d8 01       	movw	r26, r16
     9a4:	ec 91       	ld	r30, X
     9a6:	e0 52       	subi	r30, 0x20	; 32
     9a8:	ef 35       	cpi	r30, 0x5F	; 95
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <check_database_integrity+0x3c>
     9ac:	57 c0       	rjmp	.+174    	; 0xa5c <check_database_integrity+0xea>
            {
                database_corrupted = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	90 93 87 02 	sts	0x0287, r25
     9b6:	80 93 86 02 	sts	0x0286, r24
                lcd_init();
     9ba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
                string_write("CORRUPTION\nDETECTED");
     9be:	8b e9       	ldi	r24, 0x9B	; 155
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     9c6:	bf e7       	ldi	r27, 0x7F	; 127
     9c8:	ea e1       	ldi	r30, 0x1A	; 26
     9ca:	f6 e0       	ldi	r31, 0x06	; 6
     9cc:	b1 50       	subi	r27, 0x01	; 1
     9ce:	e0 40       	sbci	r30, 0x00	; 0
     9d0:	f0 40       	sbci	r31, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <check_database_integrity+0x5a>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <check_database_integrity+0x64>
     9d6:	00 00       	nop
                _delay_ms(2000);
                lcd_init();
     9d8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
                string_write("tracing\ncorruption...");
     9dc:	8f ea       	ldi	r24, 0xAF	; 175
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     9e4:	2f e9       	ldi	r18, 0x9F	; 159
     9e6:	86 e8       	ldi	r24, 0x86	; 134
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	80 40       	sbci	r24, 0x00	; 0
     9ee:	90 40       	sbci	r25, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <check_database_integrity+0x78>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <check_database_integrity+0x82>
     9f4:	00 00       	nop
                _delay_ms(500);
                lcd_init();
     9f6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
                string_write("station #");
     9fa:	85 ec       	ldi	r24, 0xC5	; 197
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
                string_write_int(i+1,3);
     a02:	63 e0       	ldi	r22, 0x03	; 3
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
                string_write(" : ");
     a0e:	8f ec       	ldi	r24, 0xCF	; 207
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
                char_write('\'');
     a16:	87 e2       	ldi	r24, 0x27	; 39
     a18:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
                char_write(call[j]);
     a1c:	d8 01       	movw	r26, r16
     a1e:	8c 91       	ld	r24, X
     a20:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
                char_write('\'');
     a24:	87 e2       	ldi	r24, 0x27	; 39
     a26:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
                char_write('\n');
     a2a:	8a e0       	ldi	r24, 0x0A	; 10
     a2c:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
     a30:	bf e7       	ldi	r27, 0x7F	; 127
     a32:	ea e1       	ldi	r30, 0x1A	; 26
     a34:	f6 e0       	ldi	r31, 0x06	; 6
     a36:	b1 50       	subi	r27, 0x01	; 1
     a38:	e0 40       	sbci	r30, 0x00	; 0
     a3a:	f0 40       	sbci	r31, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <check_database_integrity+0xc4>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <check_database_integrity+0xce>
     a40:	00 00       	nop
                _delay_ms(2000);
                print_callsign(i);
     a42:	ce 01       	movw	r24, r28
     a44:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_callsign>
     a48:	2f ef       	ldi	r18, 0xFF	; 255
     a4a:	84 e3       	ldi	r24, 0x34	; 52
     a4c:	9c e0       	ldi	r25, 0x0C	; 12
     a4e:	21 50       	subi	r18, 0x01	; 1
     a50:	80 40       	sbci	r24, 0x00	; 0
     a52:	90 40       	sbci	r25, 0x00	; 0
     a54:	e1 f7       	brne	.-8      	; 0xa4e <check_database_integrity+0xdc>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <check_database_integrity+0xe6>
     a58:	00 00       	nop
     a5a:	09 c0       	rjmp	.+18     	; 0xa6e <check_database_integrity+0xfc>
{
    int i, j;
    for (i=0; i<num_stations; i++)
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     a5c:	2f 5f       	subi	r18, 0xFF	; 255
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	28 30       	cpi	r18, 0x08	; 8
     a62:	31 05       	cpc	r19, r1
     a64:	09 f0       	breq	.+2      	; 0xa68 <check_database_integrity+0xf6>
     a66:	9a cf       	rjmp	.-204    	; 0x99c <check_database_integrity+0x2a>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     a68:	21 96       	adiw	r28, 0x01	; 1
     a6a:	4c 96       	adiw	r24, 0x1c	; 28
     a6c:	90 cf       	rjmp	.-224    	; 0x98e <check_database_integrity+0x1c>
                _delay_ms(4000);
                return;
            }
        }
    }
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <get_nearest_station>:
//---- GEO-ALGORITHMS ----//

int get_nearest_station(float lon, float lat)
{

}
     a78:	08 95       	ret

00000a7a <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	8c 01       	movw	r16, r24
     a84:	eb 01       	movw	r28, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     a86:	6f 3f       	cpi	r22, 0xFF	; 255
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	78 07       	cpc	r23, r24
     a8c:	59 f4       	brne	.+22     	; 0xaa4 <print_eeprom_contents+0x2a>
        end_addr = 1+num_stations*STATION_BLOCKSIZE;
     a8e:	80 91 e9 02 	lds	r24, 0x02E9
     a92:	90 91 ea 02 	lds	r25, 0x02EA
     a96:	2c e1       	ldi	r18, 0x1C	; 28
     a98:	28 9f       	mul	r18, r24
     a9a:	e0 01       	movw	r28, r0
     a9c:	29 9f       	mul	r18, r25
     a9e:	d0 0d       	add	r29, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
     aa4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     aa8:	0c 17       	cp	r16, r28
     aaa:	1d 07       	cpc	r17, r29
     aac:	bc f4       	brge	.+46     	; 0xadc <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     aae:	80 91 8c 02 	lds	r24, 0x028C
     ab2:	90 91 8d 02 	lds	r25, 0x028D
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	89 f0       	breq	.+34     	; 0xadc <print_eeprom_contents+0x62>
}

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 ba 11 	call	0x2374	; 0x2374 <__eerd_byte_m1284p>

    for (i=start_addr; i<end_addr; i++)
    {
        if (op_mode==MD_UPDATE) return;
        one_byte = my_eeprom_read_char(i);
        if (one_byte == '\0')
     ac0:	81 11       	cpse	r24, r1
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <print_eeprom_contents+0x4c>
            one_byte = '?';
     ac4:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     ac6:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
     aca:	87 ea       	ldi	r24, 0xA7	; 167
     acc:	91 e6       	ldi	r25, 0x61	; 97
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <print_eeprom_contents+0x54>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <print_eeprom_contents+0x5a>
     ad4:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     ad6:	0f 5f       	subi	r16, 0xFF	; 255
     ad8:	1f 4f       	sbci	r17, 0xFF	; 255
     ada:	e6 cf       	rjmp	.-52     	; 0xaa8 <print_eeprom_contents+0x2e>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     aec:	c0 e0       	ldi	r28, 0x00	; 0
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	1c e1       	ldi	r17, 0x1C	; 28
     af2:	20 91 e9 02 	lds	r18, 0x02E9
     af6:	30 91 ea 02 	lds	r19, 0x02EA
     afa:	12 9f       	mul	r17, r18
     afc:	c0 01       	movw	r24, r0
     afe:	13 9f       	mul	r17, r19
     b00:	90 0d       	add	r25, r0
     b02:	11 24       	eor	r1, r1
     b04:	c8 17       	cp	r28, r24
     b06:	d9 07       	cpc	r29, r25
     b08:	b4 f4       	brge	.+44     	; 0xb36 <print_eeprom_station_contents+0x50>
    {
        if (op_mode==MD_UPDATE) return;
     b0a:	80 91 8c 02 	lds	r24, 0x028C
     b0e:	90 91 8d 02 	lds	r25, 0x028D
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	81 f0       	breq	.+32     	; 0xb36 <print_eeprom_station_contents+0x50>
        one_byte = my_eeprom_read_char(start+i);
     b16:	21 96       	adiw	r28, 0x01	; 1
}

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     b18:	ce 01       	movw	r24, r28
     b1a:	0e 94 ba 11 	call	0x2374	; 0x2374 <__eerd_byte_m1284p>

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
    {
        if (op_mode==MD_UPDATE) return;
        one_byte = my_eeprom_read_char(start+i);
        if (one_byte == '\0')
     b1e:	81 11       	cpse	r24, r1
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <print_eeprom_station_contents+0x3e>
            one_byte = '?';
     b22:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     b24:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
     b28:	87 ea       	ldi	r24, 0xA7	; 167
     b2a:	91 e6       	ldi	r25, 0x61	; 97
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <print_eeprom_station_contents+0x46>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <print_eeprom_station_contents+0x4c>
     b32:	00 00       	nop
     b34:	de cf       	rjmp	.-68     	; 0xaf2 <print_eeprom_station_contents+0xc>
        _delay_ms(100);
    }
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	08 95       	ret

00000b3e <print_all_known_stations>:

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
    int i;
    lcd_init();
     b42:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write_int(num_stations,3);
     b46:	63 e0       	ldi	r22, 0x03	; 3
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 91 e9 02 	lds	r24, 0x02E9
     b4e:	90 91 ea 02 	lds	r25, 0x02EA
     b52:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
    string_write(" known\nstations");
     b56:	80 e1       	ldi	r24, 0x10	; 16
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     b5e:	2f e7       	ldi	r18, 0x7F	; 127
     b60:	8a e1       	ldi	r24, 0x1A	; 26
     b62:	96 e0       	ldi	r25, 0x06	; 6
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	80 40       	sbci	r24, 0x00	; 0
     b68:	90 40       	sbci	r25, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <print_all_known_stations+0x26>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <print_all_known_stations+0x30>
     b6e:	00 00       	nop

    _delay_ms(2000);

    if (op_mode==MD_UPDATE) return;
     b70:	80 91 8c 02 	lds	r24, 0x028C
     b74:	90 91 8d 02 	lds	r25, 0x028D
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	11 f1       	breq	.+68     	; 0xbc0 <print_all_known_stations+0x82>
     b7c:	c0 e0       	ldi	r28, 0x00	; 0
     b7e:	d0 e0       	ldi	r29, 0x00	; 0

    for (i=0; i<num_stations; i++)
     b80:	80 91 e9 02 	lds	r24, 0x02E9
     b84:	90 91 ea 02 	lds	r25, 0x02EA
     b88:	c8 17       	cp	r28, r24
     b8a:	d9 07       	cpc	r29, r25
     b8c:	cc f4       	brge	.+50     	; 0xbc0 <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
     b8e:	80 91 8c 02 	lds	r24, 0x028C
     b92:	90 91 8d 02 	lds	r25, 0x028D
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	99 f0       	breq	.+38     	; 0xbc0 <print_all_known_stations+0x82>

        lcd_init();
     b9a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
        print_station(i);
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 08 03 	call	0x610	; 0x610 <print_station>

        if (op_mode==MD_UPDATE) return;
     ba4:	80 91 8c 02 	lds	r24, 0x028C
     ba8:	90 91 8d 02 	lds	r25, 0x028D
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	41 f0       	breq	.+16     	; 0xbc0 <print_all_known_stations+0x82>
     bb0:	8f e4       	ldi	r24, 0x4F	; 79
     bb2:	93 ec       	ldi	r25, 0xC3	; 195
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <print_all_known_stations+0x76>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <print_all_known_stations+0x7c>
     bba:	00 00       	nop

    _delay_ms(2000);

    if (op_mode==MD_UPDATE) return;

    for (i=0; i<num_stations; i++)
     bbc:	21 96       	adiw	r28, 0x01	; 1
     bbe:	e0 cf       	rjmp	.-64     	; 0xb80 <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <print_all_callsigns>:

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
    int i;
    lcd_init();
     bce:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write_int(num_stations,3);
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 91 e9 02 	lds	r24, 0x02E9
     bda:	90 91 ea 02 	lds	r25, 0x02EA
     bde:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
    string_write(" known\nstations");
     be2:	80 e1       	ldi	r24, 0x10	; 16
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     bea:	2f e7       	ldi	r18, 0x7F	; 127
     bec:	8a e1       	ldi	r24, 0x1A	; 26
     bee:	96 e0       	ldi	r25, 0x06	; 6
     bf0:	21 50       	subi	r18, 0x01	; 1
     bf2:	80 40       	sbci	r24, 0x00	; 0
     bf4:	90 40       	sbci	r25, 0x00	; 0
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <print_all_callsigns+0x2a>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <print_all_callsigns+0x34>
     bfa:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     bfc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("\n");
     c00:	8e e4       	ldi	r24, 0x4E	; 78
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>

    if (op_mode==MD_UPDATE) return;
     c08:	80 91 8c 02 	lds	r24, 0x028C
     c0c:	90 91 8d 02 	lds	r25, 0x028D
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	81 f1       	breq	.+96     	; 0xc74 <print_all_callsigns+0xae>
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	d0 e0       	ldi	r29, 0x00	; 0

    for (i=0; i<num_stations; i++)
     c18:	80 91 e9 02 	lds	r24, 0x02E9
     c1c:	90 91 ea 02 	lds	r25, 0x02EA
     c20:	c8 17       	cp	r28, r24
     c22:	d9 07       	cpc	r29, r25
     c24:	3c f5       	brge	.+78     	; 0xc74 <print_all_callsigns+0xae>
    {
        if (op_mode==MD_UPDATE) return;
     c26:	80 91 8c 02 	lds	r24, 0x028C
     c2a:	90 91 8d 02 	lds	r25, 0x028D
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	09 f1       	breq	.+66     	; 0xc74 <print_all_callsigns+0xae>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
     c32:	8e e4       	ldi	r24, 0x4E	; 78
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     c3a:	8e 01       	movw	r16, r28
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	c8 01       	movw	r24, r16
     c46:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
     c4a:	80 ed       	ldi	r24, 0xD0	; 208
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     c52:	ce 01       	movw	r24, r28
     c54:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_callsign>

        if (op_mode==MD_UPDATE) return;
     c58:	80 91 8c 02 	lds	r24, 0x028C
     c5c:	90 91 8d 02 	lds	r25, 0x028D
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	41 f0       	breq	.+16     	; 0xc74 <print_all_callsigns+0xae>
     c64:	83 e2       	ldi	r24, 0x23	; 35
     c66:	94 ef       	ldi	r25, 0xF4	; 244
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <print_all_callsigns+0xa2>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <print_all_callsigns+0xa8>
     c6e:	00 00       	nop
    lcd_init();
    string_write("\n");

    if (op_mode==MD_UPDATE) return;

    for (i=0; i<num_stations; i++)
     c70:	e8 01       	movw	r28, r16
     c72:	d2 cf       	rjmp	.-92     	; 0xc18 <print_all_callsigns+0x52>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	08 95       	ret

00000c7e <wait_for_update>:

void wait_for_update(void)
{
    lcd_init();
     c7e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("update required\n...feed me...");
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     c8a:	80 91 8c 02 	lds	r24, 0x028C
     c8e:	90 91 8d 02 	lds	r25, 0x028D
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	d1 f7       	brne	.-12     	; 0xc8a <wait_for_update+0xc>
    }
}
     c96:	08 95       	ret

00000c98 <show_nearest_station>:

void show_nearest_station(void)
{
    lcd_init();
     c98:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("Nearest Station:\n");
     c9c:	8e e3       	ldi	r24, 0x3E	; 62
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    print_callsign(nearest_station);
     ca4:	80 91 02 01 	lds	r24, 0x0102
     ca8:	90 91 03 01 	lds	r25, 0x0103
     cac:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <print_callsign>
     cb0:	2f e7       	ldi	r18, 0x7F	; 127
     cb2:	8a e1       	ldi	r24, 0x1A	; 26
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	90 40       	sbci	r25, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <show_nearest_station+0x1e>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <show_nearest_station+0x28>
     cc0:	00 00       	nop
    _delay_ms(2000);
    print_station(nearest_station);
     cc2:	80 91 02 01 	lds	r24, 0x0102
     cc6:	90 91 03 01 	lds	r25, 0x0103
     cca:	0e 94 08 03 	call	0x610	; 0x610 <print_station>
     cce:	2f e7       	ldi	r18, 0x7F	; 127
     cd0:	8a e1       	ldi	r24, 0x1A	; 26
     cd2:	96 e0       	ldi	r25, 0x06	; 6
     cd4:	21 50       	subi	r18, 0x01	; 1
     cd6:	80 40       	sbci	r24, 0x00	; 0
     cd8:	90 40       	sbci	r25, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <show_nearest_station+0x3c>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <show_nearest_station+0x46>
     cde:	00 00       	nop
     ce0:	08 95       	ret

00000ce2 <print_gps_data>:
    _delay_ms(2000);
}

void print_gps_data(void)
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
    lcd_init();
     cea:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("Printing Latest\nGPS Data");
     cee:	80 e5       	ldi	r24, 0x50	; 80
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     cf6:	2f e3       	ldi	r18, 0x3F	; 63
     cf8:	8d e0       	ldi	r24, 0x0D	; 13
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	21 50       	subi	r18, 0x01	; 1
     cfe:	80 40       	sbci	r24, 0x00	; 0
     d00:	90 40       	sbci	r25, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <print_gps_data+0x1a>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <print_gps_data+0x24>
     d06:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     d08:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    string_write("count = ");
     d0c:	89 e6       	ldi	r24, 0x69	; 105
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    string_write_int(gps_rxCount,4);
     d14:	80 91 de 02 	lds	r24, 0x02DE
     d18:	90 91 df 02 	lds	r25, 0x02DF
     d1c:	64 e0       	ldi	r22, 0x04	; 4
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
    string_write("\n");
     d24:	8e e4       	ldi	r24, 0x4E	; 78
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     d2c:	ef e3       	ldi	r30, 0x3F	; 63
     d2e:	fd e0       	ldi	r31, 0x0D	; 13
     d30:	23 e0       	ldi	r18, 0x03	; 3
     d32:	e1 50       	subi	r30, 0x01	; 1
     d34:	f0 40       	sbci	r31, 0x00	; 0
     d36:	20 40       	sbci	r18, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <print_gps_data+0x50>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <print_gps_data+0x5a>
     d3c:	00 00       	nop
     d3e:	01 e7       	ldi	r16, 0x71	; 113
     d40:	13 e0       	ldi	r17, 0x03	; 3
    _delay_ms(1000);
    int i=0;

    for (i=0; i<=10; i++)
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (i>0)
            string_write("\n");

        string_write_int(i,3);
     d46:	63 e0       	ldi	r22, 0x03	; 3
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 a9 01 	call	0x352	; 0x352 <string_write_int>
        string_write(": ");
     d50:	80 ed       	ldi	r24, 0xD0	; 208
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
        string_write(gps_data[i]);
     d58:	f8 01       	movw	r30, r16
     d5a:	81 91       	ld	r24, Z+
     d5c:	91 91       	ld	r25, Z+
     d5e:	8f 01       	movw	r16, r30
     d60:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     d64:	8f e4       	ldi	r24, 0x4F	; 79
     d66:	93 ec       	ldi	r25, 0xC3	; 195
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <print_gps_data+0x86>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <print_gps_data+0x8c>
     d6e:	00 00       	nop

        _delay_ms(200);
        if (op_mode==MD_UPDATE) return;
     d70:	80 91 8c 02 	lds	r24, 0x028C
     d74:	90 91 8d 02 	lds	r25, 0x028D
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	49 f0       	breq	.+18     	; 0xd8e <print_gps_data+0xac>
    string_write_int(gps_rxCount,4);
    string_write("\n");
    _delay_ms(1000);
    int i=0;

    for (i=0; i<=10; i++)
     d7c:	21 96       	adiw	r28, 0x01	; 1
     d7e:	cb 30       	cpi	r28, 0x0B	; 11
     d80:	d1 05       	cpc	r29, r1
     d82:	29 f0       	breq	.+10     	; 0xd8e <print_gps_data+0xac>
    {
        if (i>0)
            string_write("\n");
     d84:	8e e4       	ldi	r24, 0x4E	; 78
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
     d8c:	dc cf       	rjmp	.-72     	; 0xd46 <print_gps_data+0x64>
        string_write(gps_data[i]);

        _delay_ms(200);
        if (op_mode==MD_UPDATE) return;
    }
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <datarw>:
     d98:	12 9a       	sbi	0x02, 2	; 2
     d9a:	81 ee       	ldi	r24, 0xE1	; 225
     d9c:	94 e0       	ldi	r25, 0x04	; 4
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <datarw+0x6>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <datarw+0xc>
     da4:	00 00       	nop
     da6:	12 98       	cbi	0x02, 2	; 2
     da8:	08 95       	ret

00000daa <lcd_init>:
     daa:	10 92 ec 02 	sts	0x02EC, r1
     dae:	10 92 eb 02 	sts	0x02EB, r1
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 05 01 	sts	0x0105, r25
     dba:	80 93 04 01 	sts	0x0104, r24
     dbe:	81 b1       	in	r24, 0x01	; 1
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	81 b9       	out	0x01, r24	; 1
     dc4:	87 e8       	ldi	r24, 0x87	; 135
     dc6:	93 e1       	ldi	r25, 0x13	; 19
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <lcd_init+0x1e>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <lcd_init+0x24>
     dce:	00 00       	nop
     dd0:	12 98       	cbi	0x02, 2	; 2
     dd2:	10 98       	cbi	0x02, 0	; 2
     dd4:	11 98       	cbi	0x02, 1	; 2
     dd6:	16 98       	cbi	0x02, 6	; 2
     dd8:	15 98       	cbi	0x02, 5	; 2
     dda:	14 9a       	sbi	0x02, 4	; 2
     ddc:	13 9a       	sbi	0x02, 3	; 2
     dde:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     de2:	81 ee       	ldi	r24, 0xE1	; 225
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <lcd_init+0x3c>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <lcd_init+0x42>
     dec:	00 00       	nop
     dee:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     df2:	89 ef       	ldi	r24, 0xF9	; 249
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <lcd_init+0x4c>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <lcd_init+0x52>
     dfc:	00 00       	nop
     dfe:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e02:	89 ef       	ldi	r24, 0xF9	; 249
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	f1 f7       	brne	.-4      	; 0xe06 <lcd_init+0x5c>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <lcd_init+0x62>
     e0c:	00 00       	nop
     e0e:	16 98       	cbi	0x02, 6	; 2
     e10:	15 98       	cbi	0x02, 5	; 2
     e12:	14 9a       	sbi	0x02, 4	; 2
     e14:	13 98       	cbi	0x02, 3	; 2
     e16:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e1a:	89 ef       	ldi	r24, 0xF9	; 249
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <lcd_init+0x74>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <lcd_init+0x7a>
     e24:	00 00       	nop
     e26:	16 98       	cbi	0x02, 6	; 2
     e28:	15 98       	cbi	0x02, 5	; 2
     e2a:	14 9a       	sbi	0x02, 4	; 2
     e2c:	13 98       	cbi	0x02, 3	; 2
     e2e:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e32:	89 ef       	ldi	r24, 0xF9	; 249
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <lcd_init+0x8c>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <lcd_init+0x92>
     e3c:	00 00       	nop
     e3e:	16 9a       	sbi	0x02, 6	; 2
     e40:	15 98       	cbi	0x02, 5	; 2
     e42:	14 98       	cbi	0x02, 4	; 2
     e44:	13 98       	cbi	0x02, 3	; 2
     e46:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e4a:	89 ef       	ldi	r24, 0xF9	; 249
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <lcd_init+0xa4>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <lcd_init+0xaa>
     e54:	00 00       	nop
     e56:	16 98       	cbi	0x02, 6	; 2
     e58:	15 98       	cbi	0x02, 5	; 2
     e5a:	14 98       	cbi	0x02, 4	; 2
     e5c:	13 98       	cbi	0x02, 3	; 2
     e5e:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e62:	89 ef       	ldi	r24, 0xF9	; 249
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <lcd_init+0xbc>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <lcd_init+0xc2>
     e6c:	00 00       	nop
     e6e:	16 9a       	sbi	0x02, 6	; 2
     e70:	15 9a       	sbi	0x02, 5	; 2
     e72:	14 9a       	sbi	0x02, 4	; 2
     e74:	13 98       	cbi	0x02, 3	; 2
     e76:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e7a:	89 ef       	ldi	r24, 0xF9	; 249
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <lcd_init+0xd4>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <lcd_init+0xda>
     e84:	00 00       	nop
     e86:	16 98       	cbi	0x02, 6	; 2
     e88:	15 98       	cbi	0x02, 5	; 2
     e8a:	14 98       	cbi	0x02, 4	; 2
     e8c:	13 98       	cbi	0x02, 3	; 2
     e8e:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     e92:	89 ef       	ldi	r24, 0xF9	; 249
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <lcd_init+0xec>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <lcd_init+0xf2>
     e9c:	00 00       	nop
     e9e:	16 98       	cbi	0x02, 6	; 2
     ea0:	15 98       	cbi	0x02, 5	; 2
     ea2:	14 98       	cbi	0x02, 4	; 2
     ea4:	13 9a       	sbi	0x02, 3	; 2
     ea6:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     eaa:	89 ef       	ldi	r24, 0xF9	; 249
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <lcd_init+0x104>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <lcd_init+0x10a>
     eb4:	00 00       	nop
     eb6:	16 98       	cbi	0x02, 6	; 2
     eb8:	15 98       	cbi	0x02, 5	; 2
     eba:	14 98       	cbi	0x02, 4	; 2
     ebc:	13 98       	cbi	0x02, 3	; 2
     ebe:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     ec2:	89 ef       	ldi	r24, 0xF9	; 249
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <lcd_init+0x11c>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <lcd_init+0x122>
     ecc:	00 00       	nop
     ece:	16 98       	cbi	0x02, 6	; 2
     ed0:	15 9a       	sbi	0x02, 5	; 2
     ed2:	14 9a       	sbi	0x02, 4	; 2
     ed4:	13 98       	cbi	0x02, 3	; 2
     ed6:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     eda:	89 ef       	ldi	r24, 0xF9	; 249
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <lcd_init+0x134>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <lcd_init+0x13a>
     ee4:	00 00       	nop
     ee6:	16 98       	cbi	0x02, 6	; 2
     ee8:	15 98       	cbi	0x02, 5	; 2
     eea:	14 98       	cbi	0x02, 4	; 2
     eec:	13 98       	cbi	0x02, 3	; 2
     eee:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     ef2:	89 ef       	ldi	r24, 0xF9	; 249
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <lcd_init+0x14c>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <lcd_init+0x152>
     efc:	00 00       	nop
     efe:	16 9a       	sbi	0x02, 6	; 2
     f00:	15 9a       	sbi	0x02, 5	; 2
     f02:	14 9a       	sbi	0x02, 4	; 2
     f04:	13 9a       	sbi	0x02, 3	; 2
     f06:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     f0a:	89 ef       	ldi	r24, 0xF9	; 249
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <lcd_init+0x164>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <lcd_init+0x16a>
     f14:	00 00       	nop
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <letterwrite>:
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	11 f4       	brne	.+4      	; 0xf24 <letterwrite+0x8>
     f20:	16 9a       	sbi	0x02, 6	; 2
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <letterwrite+0xa>
     f24:	16 98       	cbi	0x02, 6	; 2
     f26:	61 30       	cpi	r22, 0x01	; 1
     f28:	71 05       	cpc	r23, r1
     f2a:	11 f4       	brne	.+4      	; 0xf30 <letterwrite+0x14>
     f2c:	15 9a       	sbi	0x02, 5	; 2
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <letterwrite+0x16>
     f30:	15 98       	cbi	0x02, 5	; 2
     f32:	41 30       	cpi	r20, 0x01	; 1
     f34:	51 05       	cpc	r21, r1
     f36:	11 f4       	brne	.+4      	; 0xf3c <letterwrite+0x20>
     f38:	14 9a       	sbi	0x02, 4	; 2
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <letterwrite+0x22>
     f3c:	14 98       	cbi	0x02, 4	; 2
     f3e:	21 30       	cpi	r18, 0x01	; 1
     f40:	31 05       	cpc	r19, r1
     f42:	11 f4       	brne	.+4      	; 0xf48 <letterwrite+0x2c>
     f44:	13 9a       	sbi	0x02, 3	; 2
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <letterwrite+0x2e>
     f48:	13 98       	cbi	0x02, 3	; 2
     f4a:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
     f4e:	89 ef       	ldi	r24, 0xF9	; 249
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <letterwrite+0x36>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <letterwrite+0x3c>
     f58:	00 00       	nop
     f5a:	08 95       	ret

00000f5c <instruction_read>:
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	81 b1       	in	r24, 0x01	; 1
     f64:	87 78       	andi	r24, 0x87	; 135
     f66:	81 b9       	out	0x01, r24	; 1
     f68:	10 98       	cbi	0x02, 0	; 2
     f6a:	11 9a       	sbi	0x02, 1	; 2
     f6c:	12 9a       	sbi	0x02, 2	; 2
     f6e:	81 ee       	ldi	r24, 0xE1	; 225
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <instruction_read+0x16>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <instruction_read+0x1c>
     f78:	00 00       	nop
     f7a:	12 b1       	in	r17, 0x02	; 2
     f7c:	82 b1       	in	r24, 0x02	; 2
     f7e:	c2 b1       	in	r28, 0x02	; 2
     f80:	a2 b1       	in	r26, 0x02	; 2
     f82:	12 98       	cbi	0x02, 2	; 2
     f84:	e9 ef       	ldi	r30, 0xF9	; 249
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <instruction_read+0x2c>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <instruction_read+0x32>
     f8e:	00 00       	nop
     f90:	12 9a       	sbi	0x02, 2	; 2
     f92:	e1 ee       	ldi	r30, 0xE1	; 225
     f94:	f4 e0       	ldi	r31, 0x04	; 4
     f96:	31 97       	sbiw	r30, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <instruction_read+0x3a>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <instruction_read+0x40>
     f9c:	00 00       	nop
     f9e:	e2 b1       	in	r30, 0x02	; 2
     fa0:	62 b1       	in	r22, 0x02	; 2
     fa2:	42 b1       	in	r20, 0x02	; 2
     fa4:	52 b1       	in	r21, 0x02	; 2
     fa6:	80 72       	andi	r24, 0x20	; 32
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	26 e0       	ldi	r18, 0x06	; 6
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e1 f7       	brne	.-8      	; 0xfac <instruction_read+0x50>
     fb4:	c0 71       	andi	r28, 0x10	; 16
     fb6:	d0 e0       	ldi	r29, 0x00	; 0
     fb8:	35 e0       	ldi	r19, 0x05	; 5
     fba:	cc 0f       	add	r28, r28
     fbc:	dd 1f       	adc	r29, r29
     fbe:	3a 95       	dec	r19
     fc0:	e1 f7       	brne	.-8      	; 0xfba <instruction_read+0x5e>
     fc2:	8c 2b       	or	r24, r28
     fc4:	9d 2b       	or	r25, r29
     fc6:	58 70       	andi	r21, 0x08	; 8
     fc8:	85 2b       	or	r24, r21
     fca:	a8 70       	andi	r26, 0x08	; 8
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	54 e0       	ldi	r21, 0x04	; 4
     fd0:	aa 0f       	add	r26, r26
     fd2:	bb 1f       	adc	r27, r27
     fd4:	5a 95       	dec	r21
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <instruction_read+0x74>
     fd8:	8a 2b       	or	r24, r26
     fda:	9b 2b       	or	r25, r27
     fdc:	e0 74       	andi	r30, 0x40	; 64
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	73 e0       	ldi	r23, 0x03	; 3
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	7a 95       	dec	r23
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <instruction_read+0x86>
     fea:	8e 2b       	or	r24, r30
     fec:	9f 2b       	or	r25, r31
     fee:	60 72       	andi	r22, 0x20	; 32
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	86 2b       	or	r24, r22
     ffc:	97 2b       	or	r25, r23
     ffe:	12 98       	cbi	0x02, 2	; 2
    1000:	51 b1       	in	r21, 0x01	; 1
    1002:	58 67       	ori	r21, 0x78	; 120
    1004:	51 b9       	out	0x01, r21	; 1
    1006:	10 98       	cbi	0x02, 0	; 2
    1008:	11 98       	cbi	0x02, 1	; 2
    100a:	40 71       	andi	r20, 0x10	; 16
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	84 2b       	or	r24, r20
    1014:	95 2b       	or	r25, r21
    1016:	16 fb       	bst	r17, 6
    1018:	22 27       	eor	r18, r18
    101a:	20 f9       	bld	r18, 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	36 95       	lsr	r19
    1020:	32 2f       	mov	r19, r18
    1022:	22 27       	eor	r18, r18
    1024:	37 95       	ror	r19
    1026:	27 95       	ror	r18
    1028:	82 2b       	or	r24, r18
    102a:	93 2b       	or	r25, r19
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	08 95       	ret

00001034 <get_current_address>:
    1034:	0e 94 ae 07 	call	0xf5c	; 0xf5c <instruction_read>
    1038:	8f 77       	andi	r24, 0x7F	; 127
    103a:	99 27       	eor	r25, r25
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	08 95       	ret

00001040 <write_db74>:
    1040:	89 2b       	or	r24, r25
    1042:	11 f4       	brne	.+4      	; 0x1048 <write_db74+0x8>
    1044:	16 98       	cbi	0x02, 6	; 2
    1046:	01 c0       	rjmp	.+2      	; 0x104a <write_db74+0xa>
    1048:	16 9a       	sbi	0x02, 6	; 2
    104a:	67 2b       	or	r22, r23
    104c:	11 f4       	brne	.+4      	; 0x1052 <write_db74+0x12>
    104e:	15 98       	cbi	0x02, 5	; 2
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <write_db74+0x14>
    1052:	15 9a       	sbi	0x02, 5	; 2
    1054:	45 2b       	or	r20, r21
    1056:	11 f4       	brne	.+4      	; 0x105c <write_db74+0x1c>
    1058:	14 98       	cbi	0x02, 4	; 2
    105a:	01 c0       	rjmp	.+2      	; 0x105e <write_db74+0x1e>
    105c:	14 9a       	sbi	0x02, 4	; 2
    105e:	23 2b       	or	r18, r19
    1060:	11 f4       	brne	.+4      	; 0x1066 <write_db74+0x26>
    1062:	13 98       	cbi	0x02, 3	; 2
    1064:	08 95       	ret
    1066:	13 9a       	sbi	0x02, 3	; 2
    1068:	08 95       	ret

0000106a <set_ddram_address>:
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
    1070:	10 98       	cbi	0x02, 0	; 2
    1072:	11 98       	cbi	0x02, 1	; 2
    1074:	28 2f       	mov	r18, r24
    1076:	22 95       	swap	r18
    1078:	21 70       	andi	r18, 0x01	; 1
    107a:	85 fb       	bst	r24, 5
    107c:	44 27       	eor	r20, r20
    107e:	40 f9       	bld	r20, 0
    1080:	86 fb       	bst	r24, 6
    1082:	66 27       	eor	r22, r22
    1084:	60 f9       	bld	r22, 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 20 08 	call	0x1040	; 0x1040 <write_db74>
    1094:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
    1098:	9e 01       	movw	r18, r28
    109a:	21 70       	andi	r18, 0x01	; 1
    109c:	33 27       	eor	r19, r19
    109e:	4c 2f       	mov	r20, r28
    10a0:	46 95       	lsr	r20
    10a2:	41 70       	andi	r20, 0x01	; 1
    10a4:	c2 fb       	bst	r28, 2
    10a6:	66 27       	eor	r22, r22
    10a8:	60 f9       	bld	r22, 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	c3 fb       	bst	r28, 3
    10b0:	88 27       	eor	r24, r24
    10b2:	80 f9       	bld	r24, 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 20 08 	call	0x1040	; 0x1040 <write_db74>
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <datarw>

000010c2 <data_write>:
    10c2:	cf 93       	push	r28
    10c4:	c8 2f       	mov	r28, r24
    10c6:	10 9a       	sbi	0x02, 0	; 2
    10c8:	11 98       	cbi	0x02, 1	; 2
    10ca:	84 fb       	bst	r24, 4
    10cc:	22 27       	eor	r18, r18
    10ce:	20 f9       	bld	r18, 0
    10d0:	85 fb       	bst	r24, 5
    10d2:	44 27       	eor	r20, r20
    10d4:	40 f9       	bld	r20, 0
    10d6:	86 fb       	bst	r24, 6
    10d8:	66 27       	eor	r22, r22
    10da:	60 f9       	bld	r22, 0
    10dc:	88 1f       	adc	r24, r24
    10de:	88 27       	eor	r24, r24
    10e0:	88 1f       	adc	r24, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 20 08 	call	0x1040	; 0x1040 <write_db74>
    10ee:	0e 94 cc 06 	call	0xd98	; 0xd98 <datarw>
    10f2:	2c 2f       	mov	r18, r28
    10f4:	21 70       	andi	r18, 0x01	; 1
    10f6:	c1 fb       	bst	r28, 1
    10f8:	44 27       	eor	r20, r20
    10fa:	40 f9       	bld	r20, 0
    10fc:	c2 fb       	bst	r28, 2
    10fe:	66 27       	eor	r22, r22
    1100:	60 f9       	bld	r22, 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	c3 fb       	bst	r28, 3
    110a:	88 27       	eor	r24, r24
    110c:	80 f9       	bld	r24, 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 20 08 	call	0x1040	; 0x1040 <write_db74>
    1114:	cf 91       	pop	r28
    1116:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <datarw>

0000111a <char_write>:
    111a:	cf 93       	push	r28
    111c:	c8 2f       	mov	r28, r24
    111e:	20 91 eb 02 	lds	r18, 0x02EB
    1122:	30 91 ec 02 	lds	r19, 0x02EC
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	30 93 ec 02 	sts	0x02EC, r19
    112e:	20 93 eb 02 	sts	0x02EB, r18
    1132:	21 31       	cpi	r18, 0x11	; 17
    1134:	31 05       	cpc	r19, r1
    1136:	31 f0       	breq	.+12     	; 0x1144 <char_write+0x2a>
    1138:	8a 30       	cpi	r24, 0x0A	; 10
    113a:	21 f0       	breq	.+8      	; 0x1144 <char_write+0x2a>
    113c:	8c 2f       	mov	r24, r28
    113e:	cf 91       	pop	r28
    1140:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <data_write>
    1144:	20 91 04 01 	lds	r18, 0x0104
    1148:	30 91 05 01 	lds	r19, 0x0105
    114c:	21 30       	cpi	r18, 0x01	; 1
    114e:	31 05       	cpc	r19, r1
    1150:	79 f4       	brne	.+30     	; 0x1170 <char_write+0x56>
    1152:	80 e4       	ldi	r24, 0x40	; 64
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 35 08 	call	0x106a	; 0x106a <set_ddram_address>
    115a:	22 e0       	ldi	r18, 0x02	; 2
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	30 93 05 01 	sts	0x0105, r19
    1162:	20 93 04 01 	sts	0x0104, r18
    1166:	10 92 ec 02 	sts	0x02EC, r1
    116a:	10 92 eb 02 	sts	0x02EB, r1
    116e:	05 c0       	rjmp	.+10     	; 0x117a <char_write+0x60>
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	11 f4       	brne	.+4      	; 0x117a <char_write+0x60>
    1176:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    117a:	ca 30       	cpi	r28, 0x0A	; 10
    117c:	f9 f6       	brne	.-66     	; 0x113c <char_write+0x22>
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <string_write>:
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
    118c:	0e 94 1a 08 	call	0x1034	; 0x1034 <get_current_address>
    1190:	8e 01       	movw	r16, r28
    1192:	fe 01       	movw	r30, r28
    1194:	01 90       	ld	r0, Z+
    1196:	00 20       	and	r0, r0
    1198:	e9 f7       	brne	.-6      	; 0x1194 <string_write+0x12>
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	ec 1b       	sub	r30, r28
    119e:	fd 0b       	sbc	r31, r29
    11a0:	c8 01       	movw	r24, r16
    11a2:	8c 1b       	sub	r24, r28
    11a4:	9d 0b       	sbc	r25, r29
    11a6:	8e 17       	cp	r24, r30
    11a8:	9f 07       	cpc	r25, r31
    11aa:	40 f4       	brcc	.+16     	; 0x11bc <string_write+0x3a>
    11ac:	f8 01       	movw	r30, r16
    11ae:	81 91       	ld	r24, Z+
    11b0:	8f 01       	movw	r16, r30
    11b2:	0e 94 8d 08 	call	0x111a	; 0x111a <char_write>
    11b6:	0e 94 1a 08 	call	0x1034	; 0x1034 <get_current_address>
    11ba:	eb cf       	rjmp	.-42     	; 0x1192 <string_write+0x10>
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <tag_check>:

	return 0;
}

//Function to check if $GPRMC tag is present
int tag_check(char *in_sent){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <tag_check+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <tag_check+0x8>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <tag_check+0xa>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
    11d4:	26 e0       	ldi	r18, 0x06	; 6
    11d6:	ec e0       	ldi	r30, 0x0C	; 12
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	de 01       	movw	r26, r28
    11dc:	11 96       	adiw	r26, 0x01	; 1
    11de:	01 90       	ld	r0, Z+
    11e0:	0d 92       	st	X+, r0
    11e2:	2a 95       	dec	r18
    11e4:	e1 f7       	brne	.-8      	; 0x11de <tag_check+0x18>
    11e6:	fe 01       	movw	r30, r28
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	9e 01       	movw	r18, r28
    11ec:	29 5f       	subi	r18, 0xF9	; 249
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
	int x = 0;
	//printf("in_sent: %s\n",in_sent);

	for (x = 0; x <6; x ++){
	        token[x] = in_sent[x];
    11f0:	dc 01       	movw	r26, r24
    11f2:	4d 91       	ld	r20, X+
    11f4:	cd 01       	movw	r24, r26
    11f6:	41 93       	st	Z+, r20
int tag_check(char *in_sent){
	char token[6] = "$12345";
	int x = 0;
	//printf("in_sent: %s\n",in_sent);

	for (x = 0; x <6; x ++){
    11f8:	e2 17       	cp	r30, r18
    11fa:	f3 07       	cpc	r31, r19
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <tag_check+0x2a>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) return 1;
    11fe:	62 e7       	ldi	r22, 0x72	; 114
    1200:	72 e0       	ldi	r23, 0x02	; 2
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strcmp>
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	89 2b       	or	r24, r25
    1210:	11 f0       	breq	.+4      	; 0x1216 <tag_check+0x50>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
	else return 0;
	return 1;
}
    1216:	c9 01       	movw	r24, r18
    1218:	26 96       	adiw	r28, 0x06	; 6
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	21 f0       	breq	.+8      	; 0x123a <strtok_single+0x10>
    src = in_str;
    1232:	90 93 ee 02 	sts	0x02EE, r25
    1236:	80 93 ed 02 	sts	0x02ED, r24

  if (src == NULL)
    123a:	c0 91 ed 02 	lds	r28, 0x02ED
    123e:	d0 91 ee 02 	lds	r29, 0x02EE
    1242:	20 97       	sbiw	r28, 0x00	; 0
    1244:	69 f0       	breq	.+26     	; 0x1260 <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <strpbrk>
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	41 f0       	breq	.+16     	; 0x1260 <strtok_single+0x36>
    *p  = 0;
    1250:	fc 01       	movw	r30, r24
    1252:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
    1254:	f0 93 ee 02 	sts	0x02EE, r31
    1258:	e0 93 ed 02 	sts	0x02ED, r30
    125c:	ce 01       	movw	r24, r28
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <parse_nmea>:
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
    1274:	8b 01       	movw	r16, r22
    1276:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    127a:	ce 01       	movw	r24, r28
    127c:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    1280:	2f e7       	ldi	r18, 0x7F	; 127
    1282:	8a e1       	ldi	r24, 0x1A	; 26
    1284:	96 e0       	ldi	r25, 0x06	; 6
    1286:	21 50       	subi	r18, 0x01	; 1
    1288:	80 40       	sbci	r24, 0x00	; 0
    128a:	90 40       	sbci	r25, 0x00	; 0
    128c:	e1 f7       	brne	.-8      	; 0x1286 <parse_nmea+0x1c>
    128e:	00 c0       	rjmp	.+0      	; 0x1290 <parse_nmea+0x26>
    1290:	00 00       	nop
    1292:	ce 01       	movw	r24, r28
    1294:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <tag_check>
    1298:	89 2b       	or	r24, r25
    129a:	81 f4       	brne	.+32     	; 0x12bc <parse_nmea+0x52>
    129c:	89 e7       	ldi	r24, 0x79	; 121
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    12a4:	2f e7       	ldi	r18, 0x7F	; 127
    12a6:	8a e1       	ldi	r24, 0x1A	; 26
    12a8:	96 e0       	ldi	r25, 0x06	; 6
    12aa:	21 50       	subi	r18, 0x01	; 1
    12ac:	80 40       	sbci	r24, 0x00	; 0
    12ae:	90 40       	sbci	r25, 0x00	; 0
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <parse_nmea+0x40>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <parse_nmea+0x4a>
    12b4:	00 00       	nop
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <parse_nmea+0x78>
    12bc:	63 e1       	ldi	r22, 0x13	; 19
    12be:	71 e0       	ldi	r23, 0x01	; 1
    12c0:	ce 01       	movw	r24, r28
    12c2:	0e 94 15 09 	call	0x122a	; 0x122a <strtok_single>
    12c6:	e8 01       	movw	r28, r16
    12c8:	89 93       	st	Y+, r24
    12ca:	99 93       	st	Y+, r25
    12cc:	89 2b       	or	r24, r25
    12ce:	39 f0       	breq	.+14     	; 0x12de <parse_nmea+0x74>
    12d0:	63 e1       	ldi	r22, 0x13	; 19
    12d2:	71 e0       	ldi	r23, 0x01	; 1
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 15 09 	call	0x122a	; 0x122a <strtok_single>
    12dc:	f5 cf       	rjmp	.-22     	; 0x12c8 <parse_nmea+0x5e>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <main>:
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	1f 92       	push	r1
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <prepare_device>
    12fa:	83 ed       	ldi	r24, 0xD3	; 211
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    1302:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <database_load>
    1306:	2f e3       	ldi	r18, 0x3F	; 63
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	93 e0       	ldi	r25, 0x03	; 3
    130c:	21 50       	subi	r18, 0x01	; 1
    130e:	80 40       	sbci	r24, 0x00	; 0
    1310:	90 40       	sbci	r25, 0x00	; 0
    1312:	e1 f7       	brne	.-8      	; 0x130c <main+0x20>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <main+0x2a>
    1316:	00 00       	nop
    1318:	01 e7       	ldi	r16, 0x71	; 113
    131a:	13 e0       	ldi	r17, 0x03	; 3
    131c:	80 e1       	ldi	r24, 0x10	; 16
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <malloc>
    1324:	f8 01       	movw	r30, r16
    1326:	81 93       	st	Z+, r24
    1328:	91 93       	st	Z+, r25
    132a:	8f 01       	movw	r16, r30
    132c:	f3 e0       	ldi	r31, 0x03	; 3
    132e:	05 38       	cpi	r16, 0x85	; 133
    1330:	1f 07       	cpc	r17, r31
    1332:	a1 f7       	brne	.-24     	; 0x131c <main+0x30>
    1334:	02 e0       	ldi	r16, 0x02	; 2
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	e0 90 8c 02 	lds	r14, 0x028C
    133c:	f0 90 8d 02 	lds	r15, 0x028D
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	e2 16       	cp	r14, r18
    1344:	f1 04       	cpc	r15, r1
    1346:	f1 f0       	breq	.+60     	; 0x1384 <main+0x98>
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	e8 16       	cp	r14, r24
    134c:	f1 04       	cpc	r15, r1
    134e:	b9 f0       	breq	.+46     	; 0x137e <main+0x92>
    1350:	ef 28       	or	r14, r15
    1352:	91 f7       	brne	.-28     	; 0x1338 <main+0x4c>
    1354:	80 91 e9 02 	lds	r24, 0x02E9
    1358:	90 91 ea 02 	lds	r25, 0x02EA
    135c:	18 16       	cp	r1, r24
    135e:	19 06       	cpc	r1, r25
    1360:	74 f0       	brlt	.+28     	; 0x137e <main+0x92>
    1362:	60 e2       	ldi	r22, 0x20	; 32
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <print_eeprom_contents>
    136e:	80 91 8c 02 	lds	r24, 0x028C
    1372:	90 91 8d 02 	lds	r25, 0x028D
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	09 f0       	breq	.+2      	; 0x137c <main+0x90>
    137a:	43 c0       	rjmp	.+134    	; 0x1402 <main+0x116>
    137c:	dd cf       	rjmp	.-70     	; 0x1338 <main+0x4c>
    137e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <enable_gps>
    1382:	da cf       	rjmp	.-76     	; 0x1338 <main+0x4c>
    1384:	80 91 88 02 	lds	r24, 0x0288
    1388:	90 91 89 02 	lds	r25, 0x0289
    138c:	89 2b       	or	r24, r25
    138e:	a1 f4       	brne	.+40     	; 0x13b8 <main+0xcc>
    1390:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    1394:	87 ee       	ldi	r24, 0xE7	; 231
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    139c:	f0 92 89 02 	sts	0x0289, r15
    13a0:	e0 92 88 02 	sts	0x0288, r14
    13a4:	10 92 87 02 	sts	0x0287, r1
    13a8:	10 92 86 02 	sts	0x0286, r1
    13ac:	10 92 8b 02 	sts	0x028B, r1
    13b0:	10 92 8a 02 	sts	0x028A, r1
    13b4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <database_free>
    13b8:	90 91 e8 02 	lds	r25, 0x02E8
    13bc:	80 91 e7 02 	lds	r24, 0x02E7
    13c0:	98 17       	cp	r25, r24
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <main+0xda>
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <main+0x160>
    13c6:	10 92 e0 02 	sts	0x02E0, r1
    13ca:	10 92 e1 02 	sts	0x02E1, r1
    13ce:	10 92 e2 02 	sts	0x02E2, r1
    13d2:	10 92 e3 02 	sts	0x02E3, r1
    13d6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <getChar>
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	0e 94 49 04 	call	0x892	; 0x892 <detectSerialEnd>
    13e0:	69 81       	ldd	r22, Y+1	; 0x01
    13e2:	89 2b       	or	r24, r25
    13e4:	19 f1       	breq	.+70     	; 0x142c <main+0x140>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 7e 04 	call	0x8fc	; 0x8fc <terminate_serial>
    13ee:	0e 94 b9 04 	call	0x972	; 0x972 <check_database_integrity>
    13f2:	80 91 86 02 	lds	r24, 0x0286
    13f6:	90 91 87 02 	lds	r25, 0x0287
    13fa:	89 2b       	or	r24, r25
    13fc:	39 f0       	breq	.+14     	; 0x140c <main+0x120>
    13fe:	0e 94 83 01 	call	0x306	; 0x306 <wipe_eeprom>
    1402:	10 93 8d 02 	sts	0x028D, r17
    1406:	00 93 8c 02 	sts	0x028C, r16
    140a:	96 cf       	rjmp	.-212    	; 0x1338 <main+0x4c>
    140c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <lcd_init>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 c1 08 	call	0x1182	; 0x1182 <string_write>
    1418:	9f e3       	ldi	r25, 0x3F	; 63
    141a:	ed e0       	ldi	r30, 0x0D	; 13
    141c:	f3 e0       	ldi	r31, 0x03	; 3
    141e:	91 50       	subi	r25, 0x01	; 1
    1420:	e0 40       	sbci	r30, 0x00	; 0
    1422:	f0 40       	sbci	r31, 0x00	; 0
    1424:	e1 f7       	brne	.-8      	; 0x141e <main+0x132>
    1426:	00 c0       	rjmp	.+0      	; 0x1428 <main+0x13c>
    1428:	00 00       	nop
    142a:	86 cf       	rjmp	.-244    	; 0x1338 <main+0x4c>
    142c:	80 91 8a 02 	lds	r24, 0x028A
    1430:	90 91 8b 02 	lds	r25, 0x028B
    1434:	0e 94 c8 11 	call	0x2390	; 0x2390 <__eewr_byte_m1284p>
    1438:	80 91 8a 02 	lds	r24, 0x028A
    143c:	90 91 8b 02 	lds	r25, 0x028B
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	90 93 8b 02 	sts	0x028B, r25
    1446:	80 93 8a 02 	sts	0x028A, r24
    144a:	76 cf       	rjmp	.-276    	; 0x1338 <main+0x4c>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	60 91 e0 02 	lds	r22, 0x02E0
    1458:	70 91 e1 02 	lds	r23, 0x02E1
    145c:	80 91 e2 02 	lds	r24, 0x02E2
    1460:	90 91 e3 02 	lds	r25, 0x02E3
    1464:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
    1468:	60 93 e0 02 	sts	0x02E0, r22
    146c:	70 93 e1 02 	sts	0x02E1, r23
    1470:	80 93 e2 02 	sts	0x02E2, r24
    1474:	90 93 e3 02 	sts	0x02E3, r25
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e5       	ldi	r19, 0x50	; 80
    147c:	43 e4       	ldi	r20, 0x43	; 67
    147e:	57 e4       	ldi	r21, 0x47	; 71
    1480:	0e 94 c7 0b 	call	0x178e	; 0x178e <__gesf2>
    1484:	18 16       	cp	r1, r24
    1486:	0c f0       	brlt	.+2      	; 0x148a <main+0x19e>
    1488:	57 cf       	rjmp	.-338    	; 0x1338 <main+0x4c>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <terminate_serial>
    1492:	60 e2       	ldi	r22, 0x20	; 32
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <print_eeprom_contents>
    149e:	af cf       	rjmp	.-162    	; 0x13fe <main+0x112>

000014a0 <__subsf3>:
    14a0:	50 58       	subi	r21, 0x80	; 128

000014a2 <__addsf3>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	0e d0       	rcall	.+28     	; 0x14c4 <__addsf3x>
    14a8:	21 c1       	rjmp	.+578    	; 0x16ec <__fp_round>
    14aa:	12 d1       	rcall	.+548    	; 0x16d0 <__fp_pscA>
    14ac:	30 f0       	brcs	.+12     	; 0x14ba <__addsf3+0x18>
    14ae:	17 d1       	rcall	.+558    	; 0x16de <__fp_pscB>
    14b0:	20 f0       	brcs	.+8      	; 0x14ba <__addsf3+0x18>
    14b2:	31 f4       	brne	.+12     	; 0x14c0 <__addsf3+0x1e>
    14b4:	9f 3f       	cpi	r25, 0xFF	; 255
    14b6:	11 f4       	brne	.+4      	; 0x14bc <__addsf3+0x1a>
    14b8:	1e f4       	brtc	.+6      	; 0x14c0 <__addsf3+0x1e>
    14ba:	07 c1       	rjmp	.+526    	; 0x16ca <__fp_nan>
    14bc:	0e f4       	brtc	.+2      	; 0x14c0 <__addsf3+0x1e>
    14be:	e0 95       	com	r30
    14c0:	e7 fb       	bst	r30, 7
    14c2:	d4 c0       	rjmp	.+424    	; 0x166c <__fp_inf>

000014c4 <__addsf3x>:
    14c4:	e9 2f       	mov	r30, r25
    14c6:	23 d1       	rcall	.+582    	; 0x170e <__fp_split3>
    14c8:	80 f3       	brcs	.-32     	; 0x14aa <__addsf3+0x8>
    14ca:	ba 17       	cp	r27, r26
    14cc:	62 07       	cpc	r22, r18
    14ce:	73 07       	cpc	r23, r19
    14d0:	84 07       	cpc	r24, r20
    14d2:	95 07       	cpc	r25, r21
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <__addsf3x+0x18>
    14d6:	71 f4       	brne	.+28     	; 0x14f4 <__addsf3x+0x30>
    14d8:	9e f5       	brtc	.+102    	; 0x1540 <__addsf3x+0x7c>
    14da:	52 c1       	rjmp	.+676    	; 0x1780 <__fp_zero>
    14dc:	0e f4       	brtc	.+2      	; 0x14e0 <__addsf3x+0x1c>
    14de:	e0 95       	com	r30
    14e0:	0b 2e       	mov	r0, r27
    14e2:	ba 2f       	mov	r27, r26
    14e4:	a0 2d       	mov	r26, r0
    14e6:	0b 01       	movw	r0, r22
    14e8:	b9 01       	movw	r22, r18
    14ea:	90 01       	movw	r18, r0
    14ec:	0c 01       	movw	r0, r24
    14ee:	ca 01       	movw	r24, r20
    14f0:	a0 01       	movw	r20, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	ff 27       	eor	r31, r31
    14f6:	59 1b       	sub	r21, r25
    14f8:	99 f0       	breq	.+38     	; 0x1520 <__addsf3x+0x5c>
    14fa:	59 3f       	cpi	r21, 0xF9	; 249
    14fc:	50 f4       	brcc	.+20     	; 0x1512 <__addsf3x+0x4e>
    14fe:	50 3e       	cpi	r21, 0xE0	; 224
    1500:	68 f1       	brcs	.+90     	; 0x155c <__addsf3x+0x98>
    1502:	1a 16       	cp	r1, r26
    1504:	f0 40       	sbci	r31, 0x00	; 0
    1506:	a2 2f       	mov	r26, r18
    1508:	23 2f       	mov	r18, r19
    150a:	34 2f       	mov	r19, r20
    150c:	44 27       	eor	r20, r20
    150e:	58 5f       	subi	r21, 0xF8	; 248
    1510:	f3 cf       	rjmp	.-26     	; 0x14f8 <__addsf3x+0x34>
    1512:	46 95       	lsr	r20
    1514:	37 95       	ror	r19
    1516:	27 95       	ror	r18
    1518:	a7 95       	ror	r26
    151a:	f0 40       	sbci	r31, 0x00	; 0
    151c:	53 95       	inc	r21
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__addsf3x+0x4e>
    1520:	7e f4       	brtc	.+30     	; 0x1540 <__addsf3x+0x7c>
    1522:	1f 16       	cp	r1, r31
    1524:	ba 0b       	sbc	r27, r26
    1526:	62 0b       	sbc	r22, r18
    1528:	73 0b       	sbc	r23, r19
    152a:	84 0b       	sbc	r24, r20
    152c:	ba f0       	brmi	.+46     	; 0x155c <__addsf3x+0x98>
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	a1 f0       	breq	.+40     	; 0x155a <__addsf3x+0x96>
    1532:	ff 0f       	add	r31, r31
    1534:	bb 1f       	adc	r27, r27
    1536:	66 1f       	adc	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	c2 f7       	brpl	.-16     	; 0x152e <__addsf3x+0x6a>
    153e:	0e c0       	rjmp	.+28     	; 0x155c <__addsf3x+0x98>
    1540:	ba 0f       	add	r27, r26
    1542:	62 1f       	adc	r22, r18
    1544:	73 1f       	adc	r23, r19
    1546:	84 1f       	adc	r24, r20
    1548:	48 f4       	brcc	.+18     	; 0x155c <__addsf3x+0x98>
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f7 95       	ror	r31
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	08 f0       	brcs	.+2      	; 0x155a <__addsf3x+0x96>
    1558:	b3 cf       	rjmp	.-154    	; 0x14c0 <__addsf3+0x1e>
    155a:	93 95       	inc	r25
    155c:	88 0f       	add	r24, r24
    155e:	08 f0       	brcs	.+2      	; 0x1562 <__addsf3x+0x9e>
    1560:	99 27       	eor	r25, r25
    1562:	ee 0f       	add	r30, r30
    1564:	97 95       	ror	r25
    1566:	87 95       	ror	r24
    1568:	08 95       	ret

0000156a <__fixsfsi>:
    156a:	04 d0       	rcall	.+8      	; 0x1574 <__fixunssfsi>
    156c:	68 94       	set
    156e:	b1 11       	cpse	r27, r1
    1570:	08 c1       	rjmp	.+528    	; 0x1782 <__fp_szero>
    1572:	08 95       	ret

00001574 <__fixunssfsi>:
    1574:	d4 d0       	rcall	.+424    	; 0x171e <__fp_splitA>
    1576:	88 f0       	brcs	.+34     	; 0x159a <__fixunssfsi+0x26>
    1578:	9f 57       	subi	r25, 0x7F	; 127
    157a:	90 f0       	brcs	.+36     	; 0x15a0 <__fixunssfsi+0x2c>
    157c:	b9 2f       	mov	r27, r25
    157e:	99 27       	eor	r25, r25
    1580:	b7 51       	subi	r27, 0x17	; 23
    1582:	a0 f0       	brcs	.+40     	; 0x15ac <__fixunssfsi+0x38>
    1584:	d1 f0       	breq	.+52     	; 0x15ba <__fixunssfsi+0x46>
    1586:	66 0f       	add	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	1a f0       	brmi	.+6      	; 0x1596 <__fixunssfsi+0x22>
    1590:	ba 95       	dec	r27
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__fixunssfsi+0x12>
    1594:	12 c0       	rjmp	.+36     	; 0x15ba <__fixunssfsi+0x46>
    1596:	b1 30       	cpi	r27, 0x01	; 1
    1598:	81 f0       	breq	.+32     	; 0x15ba <__fixunssfsi+0x46>
    159a:	f2 d0       	rcall	.+484    	; 0x1780 <__fp_zero>
    159c:	b1 e0       	ldi	r27, 0x01	; 1
    159e:	08 95       	ret
    15a0:	ef c0       	rjmp	.+478    	; 0x1780 <__fp_zero>
    15a2:	67 2f       	mov	r22, r23
    15a4:	78 2f       	mov	r23, r24
    15a6:	88 27       	eor	r24, r24
    15a8:	b8 5f       	subi	r27, 0xF8	; 248
    15aa:	39 f0       	breq	.+14     	; 0x15ba <__fixunssfsi+0x46>
    15ac:	b9 3f       	cpi	r27, 0xF9	; 249
    15ae:	cc f3       	brlt	.-14     	; 0x15a2 <__fixunssfsi+0x2e>
    15b0:	86 95       	lsr	r24
    15b2:	77 95       	ror	r23
    15b4:	67 95       	ror	r22
    15b6:	b3 95       	inc	r27
    15b8:	d9 f7       	brne	.-10     	; 0x15b0 <__fixunssfsi+0x3c>
    15ba:	3e f4       	brtc	.+14     	; 0x15ca <__fixunssfsi+0x56>
    15bc:	90 95       	com	r25
    15be:	80 95       	com	r24
    15c0:	70 95       	com	r23
    15c2:	61 95       	neg	r22
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	8f 4f       	sbci	r24, 0xFF	; 255
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	08 95       	ret

000015cc <__floatunsisf>:
    15cc:	e8 94       	clt
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <__floatsisf+0x12>

000015d0 <__floatsisf>:
    15d0:	97 fb       	bst	r25, 7
    15d2:	3e f4       	brtc	.+14     	; 0x15e2 <__floatsisf+0x12>
    15d4:	90 95       	com	r25
    15d6:	80 95       	com	r24
    15d8:	70 95       	com	r23
    15da:	61 95       	neg	r22
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	8f 4f       	sbci	r24, 0xFF	; 255
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	99 23       	and	r25, r25
    15e4:	a9 f0       	breq	.+42     	; 0x1610 <__floatsisf+0x40>
    15e6:	f9 2f       	mov	r31, r25
    15e8:	96 e9       	ldi	r25, 0x96	; 150
    15ea:	bb 27       	eor	r27, r27
    15ec:	93 95       	inc	r25
    15ee:	f6 95       	lsr	r31
    15f0:	87 95       	ror	r24
    15f2:	77 95       	ror	r23
    15f4:	67 95       	ror	r22
    15f6:	b7 95       	ror	r27
    15f8:	f1 11       	cpse	r31, r1
    15fa:	f8 cf       	rjmp	.-16     	; 0x15ec <__floatsisf+0x1c>
    15fc:	fa f4       	brpl	.+62     	; 0x163c <__floatsisf+0x6c>
    15fe:	bb 0f       	add	r27, r27
    1600:	11 f4       	brne	.+4      	; 0x1606 <__floatsisf+0x36>
    1602:	60 ff       	sbrs	r22, 0
    1604:	1b c0       	rjmp	.+54     	; 0x163c <__floatsisf+0x6c>
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	16 c0       	rjmp	.+44     	; 0x163c <__floatsisf+0x6c>
    1610:	88 23       	and	r24, r24
    1612:	11 f0       	breq	.+4      	; 0x1618 <__floatsisf+0x48>
    1614:	96 e9       	ldi	r25, 0x96	; 150
    1616:	11 c0       	rjmp	.+34     	; 0x163a <__floatsisf+0x6a>
    1618:	77 23       	and	r23, r23
    161a:	21 f0       	breq	.+8      	; 0x1624 <__floatsisf+0x54>
    161c:	9e e8       	ldi	r25, 0x8E	; 142
    161e:	87 2f       	mov	r24, r23
    1620:	76 2f       	mov	r23, r22
    1622:	05 c0       	rjmp	.+10     	; 0x162e <__floatsisf+0x5e>
    1624:	66 23       	and	r22, r22
    1626:	71 f0       	breq	.+28     	; 0x1644 <__floatsisf+0x74>
    1628:	96 e8       	ldi	r25, 0x86	; 134
    162a:	86 2f       	mov	r24, r22
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	2a f0       	brmi	.+10     	; 0x163c <__floatsisf+0x6c>
    1632:	9a 95       	dec	r25
    1634:	66 0f       	add	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	da f7       	brpl	.-10     	; 0x1632 <__floatsisf+0x62>
    163c:	88 0f       	add	r24, r24
    163e:	96 95       	lsr	r25
    1640:	87 95       	ror	r24
    1642:	97 f9       	bld	r25, 7
    1644:	08 95       	ret

00001646 <floor>:
    1646:	85 d0       	rcall	.+266    	; 0x1752 <__fp_trunc>
    1648:	80 f0       	brcs	.+32     	; 0x166a <floor+0x24>
    164a:	9f 37       	cpi	r25, 0x7F	; 127
    164c:	40 f4       	brcc	.+16     	; 0x165e <floor+0x18>
    164e:	91 11       	cpse	r25, r1
    1650:	0e f0       	brts	.+2      	; 0x1654 <floor+0xe>
    1652:	97 c0       	rjmp	.+302    	; 0x1782 <__fp_szero>
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 e8       	ldi	r24, 0x80	; 128
    165a:	9f eb       	ldi	r25, 0xBF	; 191
    165c:	08 95       	ret
    165e:	26 f4       	brtc	.+8      	; 0x1668 <floor+0x22>
    1660:	1b 16       	cp	r1, r27
    1662:	61 1d       	adc	r22, r1
    1664:	71 1d       	adc	r23, r1
    1666:	81 1d       	adc	r24, r1
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <__fp_mintl>
    166a:	21 c0       	rjmp	.+66     	; 0x16ae <__fp_mpack>

0000166c <__fp_inf>:
    166c:	97 f9       	bld	r25, 7
    166e:	9f 67       	ori	r25, 0x7F	; 127
    1670:	80 e8       	ldi	r24, 0x80	; 128
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	08 95       	ret

00001678 <__fp_mintl>:
    1678:	88 23       	and	r24, r24
    167a:	71 f4       	brne	.+28     	; 0x1698 <__fp_mintl+0x20>
    167c:	77 23       	and	r23, r23
    167e:	21 f0       	breq	.+8      	; 0x1688 <__fp_mintl+0x10>
    1680:	98 50       	subi	r25, 0x08	; 8
    1682:	87 2b       	or	r24, r23
    1684:	76 2f       	mov	r23, r22
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <__fp_mintl+0x1e>
    1688:	66 23       	and	r22, r22
    168a:	11 f4       	brne	.+4      	; 0x1690 <__fp_mintl+0x18>
    168c:	99 27       	eor	r25, r25
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <__fp_mintl+0x32>
    1690:	90 51       	subi	r25, 0x10	; 16
    1692:	86 2b       	or	r24, r22
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	2a f0       	brmi	.+10     	; 0x16a4 <__fp_mintl+0x2c>
    169a:	9a 95       	dec	r25
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	88 1f       	adc	r24, r24
    16a2:	da f7       	brpl	.-10     	; 0x169a <__fp_mintl+0x22>
    16a4:	88 0f       	add	r24, r24
    16a6:	96 95       	lsr	r25
    16a8:	87 95       	ror	r24
    16aa:	97 f9       	bld	r25, 7
    16ac:	08 95       	ret

000016ae <__fp_mpack>:
    16ae:	9f 3f       	cpi	r25, 0xFF	; 255
    16b0:	31 f0       	breq	.+12     	; 0x16be <__fp_mpack_finite+0xc>

000016b2 <__fp_mpack_finite>:
    16b2:	91 50       	subi	r25, 0x01	; 1
    16b4:	20 f4       	brcc	.+8      	; 0x16be <__fp_mpack_finite+0xc>
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	b7 95       	ror	r27
    16be:	88 0f       	add	r24, r24
    16c0:	91 1d       	adc	r25, r1
    16c2:	96 95       	lsr	r25
    16c4:	87 95       	ror	r24
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__fp_nan>:
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	80 ec       	ldi	r24, 0xC0	; 192
    16ce:	08 95       	ret

000016d0 <__fp_pscA>:
    16d0:	00 24       	eor	r0, r0
    16d2:	0a 94       	dec	r0
    16d4:	16 16       	cp	r1, r22
    16d6:	17 06       	cpc	r1, r23
    16d8:	18 06       	cpc	r1, r24
    16da:	09 06       	cpc	r0, r25
    16dc:	08 95       	ret

000016de <__fp_pscB>:
    16de:	00 24       	eor	r0, r0
    16e0:	0a 94       	dec	r0
    16e2:	12 16       	cp	r1, r18
    16e4:	13 06       	cpc	r1, r19
    16e6:	14 06       	cpc	r1, r20
    16e8:	05 06       	cpc	r0, r21
    16ea:	08 95       	ret

000016ec <__fp_round>:
    16ec:	09 2e       	mov	r0, r25
    16ee:	03 94       	inc	r0
    16f0:	00 0c       	add	r0, r0
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <__fp_round+0xc>
    16f4:	88 23       	and	r24, r24
    16f6:	52 f0       	brmi	.+20     	; 0x170c <__fp_round+0x20>
    16f8:	bb 0f       	add	r27, r27
    16fa:	40 f4       	brcc	.+16     	; 0x170c <__fp_round+0x20>
    16fc:	bf 2b       	or	r27, r31
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__fp_round+0x18>
    1700:	60 ff       	sbrs	r22, 0
    1702:	04 c0       	rjmp	.+8      	; 0x170c <__fp_round+0x20>
    1704:	6f 5f       	subi	r22, 0xFF	; 255
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	08 95       	ret

0000170e <__fp_split3>:
    170e:	57 fd       	sbrc	r21, 7
    1710:	90 58       	subi	r25, 0x80	; 128
    1712:	44 0f       	add	r20, r20
    1714:	55 1f       	adc	r21, r21
    1716:	59 f0       	breq	.+22     	; 0x172e <__fp_splitA+0x10>
    1718:	5f 3f       	cpi	r21, 0xFF	; 255
    171a:	71 f0       	breq	.+28     	; 0x1738 <__fp_splitA+0x1a>
    171c:	47 95       	ror	r20

0000171e <__fp_splitA>:
    171e:	88 0f       	add	r24, r24
    1720:	97 fb       	bst	r25, 7
    1722:	99 1f       	adc	r25, r25
    1724:	61 f0       	breq	.+24     	; 0x173e <__fp_splitA+0x20>
    1726:	9f 3f       	cpi	r25, 0xFF	; 255
    1728:	79 f0       	breq	.+30     	; 0x1748 <__fp_splitA+0x2a>
    172a:	87 95       	ror	r24
    172c:	08 95       	ret
    172e:	12 16       	cp	r1, r18
    1730:	13 06       	cpc	r1, r19
    1732:	14 06       	cpc	r1, r20
    1734:	55 1f       	adc	r21, r21
    1736:	f2 cf       	rjmp	.-28     	; 0x171c <__fp_split3+0xe>
    1738:	46 95       	lsr	r20
    173a:	f1 df       	rcall	.-30     	; 0x171e <__fp_splitA>
    173c:	08 c0       	rjmp	.+16     	; 0x174e <__fp_splitA+0x30>
    173e:	16 16       	cp	r1, r22
    1740:	17 06       	cpc	r1, r23
    1742:	18 06       	cpc	r1, r24
    1744:	99 1f       	adc	r25, r25
    1746:	f1 cf       	rjmp	.-30     	; 0x172a <__fp_splitA+0xc>
    1748:	86 95       	lsr	r24
    174a:	71 05       	cpc	r23, r1
    174c:	61 05       	cpc	r22, r1
    174e:	08 94       	sec
    1750:	08 95       	ret

00001752 <__fp_trunc>:
    1752:	e5 df       	rcall	.-54     	; 0x171e <__fp_splitA>
    1754:	a0 f0       	brcs	.+40     	; 0x177e <__fp_trunc+0x2c>
    1756:	be e7       	ldi	r27, 0x7E	; 126
    1758:	b9 17       	cp	r27, r25
    175a:	88 f4       	brcc	.+34     	; 0x177e <__fp_trunc+0x2c>
    175c:	bb 27       	eor	r27, r27
    175e:	9f 38       	cpi	r25, 0x8F	; 143
    1760:	60 f4       	brcc	.+24     	; 0x177a <__fp_trunc+0x28>
    1762:	16 16       	cp	r1, r22
    1764:	b1 1d       	adc	r27, r1
    1766:	67 2f       	mov	r22, r23
    1768:	78 2f       	mov	r23, r24
    176a:	88 27       	eor	r24, r24
    176c:	98 5f       	subi	r25, 0xF8	; 248
    176e:	f7 cf       	rjmp	.-18     	; 0x175e <__fp_trunc+0xc>
    1770:	86 95       	lsr	r24
    1772:	77 95       	ror	r23
    1774:	67 95       	ror	r22
    1776:	b1 1d       	adc	r27, r1
    1778:	93 95       	inc	r25
    177a:	96 39       	cpi	r25, 0x96	; 150
    177c:	c8 f3       	brcs	.-14     	; 0x1770 <__fp_trunc+0x1e>
    177e:	08 95       	ret

00001780 <__fp_zero>:
    1780:	e8 94       	clt

00001782 <__fp_szero>:
    1782:	bb 27       	eor	r27, r27
    1784:	66 27       	eor	r22, r22
    1786:	77 27       	eor	r23, r23
    1788:	cb 01       	movw	r24, r22
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <__gesf2>:
    178e:	81 d1       	rcall	.+770    	; 0x1a92 <__fp_cmp>
    1790:	08 f4       	brcc	.+2      	; 0x1794 <__gesf2+0x6>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	08 95       	ret

00001796 <log10>:
    1796:	0a d0       	rcall	.+20     	; 0x17ac <log>
    1798:	29 ed       	ldi	r18, 0xD9	; 217
    179a:	3b e5       	ldi	r19, 0x5B	; 91
    179c:	4e ed       	ldi	r20, 0xDE	; 222
    179e:	5e e3       	ldi	r21, 0x3E	; 62
    17a0:	78 c0       	rjmp	.+240    	; 0x1892 <__mulsf3>
    17a2:	0e f0       	brts	.+2      	; 0x17a6 <log10+0x10>
    17a4:	84 cf       	rjmp	.-248    	; 0x16ae <__fp_mpack>
    17a6:	91 cf       	rjmp	.-222    	; 0x16ca <__fp_nan>
    17a8:	68 94       	set
    17aa:	60 cf       	rjmp	.-320    	; 0x166c <__fp_inf>

000017ac <log>:
    17ac:	b8 df       	rcall	.-144    	; 0x171e <__fp_splitA>
    17ae:	c8 f3       	brcs	.-14     	; 0x17a2 <log10+0xc>
    17b0:	99 23       	and	r25, r25
    17b2:	d1 f3       	breq	.-12     	; 0x17a8 <log10+0x12>
    17b4:	c6 f3       	brts	.-16     	; 0x17a6 <log10+0x10>
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	1f 93       	push	r17
    17bc:	0f 93       	push	r16
    17be:	ff 92       	push	r15
    17c0:	c9 2f       	mov	r28, r25
    17c2:	dd 27       	eor	r29, r29
    17c4:	88 23       	and	r24, r24
    17c6:	2a f0       	brmi	.+10     	; 0x17d2 <log+0x26>
    17c8:	21 97       	sbiw	r28, 0x01	; 1
    17ca:	66 0f       	add	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	da f7       	brpl	.-10     	; 0x17c8 <log+0x1c>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f eb       	ldi	r21, 0xBF	; 191
    17da:	9f e3       	ldi	r25, 0x3F	; 63
    17dc:	88 39       	cpi	r24, 0x98	; 152
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <log+0x3c>
    17e0:	80 3e       	cpi	r24, 0xE0	; 224
    17e2:	30 f0       	brcs	.+12     	; 0x17f0 <log+0x44>
    17e4:	21 96       	adiw	r28, 0x01	; 1
    17e6:	8f 77       	andi	r24, 0x7F	; 127
    17e8:	5c de       	rcall	.-840    	; 0x14a2 <__addsf3>
    17ea:	ec e8       	ldi	r30, 0x8C	; 140
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <log+0x4a>
    17f0:	58 de       	rcall	.-848    	; 0x14a2 <__addsf3>
    17f2:	e9 eb       	ldi	r30, 0xB9	; 185
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	71 d1       	rcall	.+738    	; 0x1ada <__fp_powser>
    17f8:	8b 01       	movw	r16, r22
    17fa:	be 01       	movw	r22, r28
    17fc:	ec 01       	movw	r28, r24
    17fe:	fb 2e       	mov	r15, r27
    1800:	6f 57       	subi	r22, 0x7F	; 127
    1802:	71 09       	sbc	r23, r1
    1804:	75 95       	asr	r23
    1806:	77 1f       	adc	r23, r23
    1808:	88 0b       	sbc	r24, r24
    180a:	99 0b       	sbc	r25, r25
    180c:	e1 de       	rcall	.-574    	; 0x15d0 <__floatsisf>
    180e:	28 e1       	ldi	r18, 0x18	; 24
    1810:	32 e7       	ldi	r19, 0x72	; 114
    1812:	41 e3       	ldi	r20, 0x31	; 49
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	49 d0       	rcall	.+146    	; 0x18aa <__mulsf3x>
    1818:	af 2d       	mov	r26, r15
    181a:	98 01       	movw	r18, r16
    181c:	ae 01       	movw	r20, r28
    181e:	ff 90       	pop	r15
    1820:	0f 91       	pop	r16
    1822:	1f 91       	pop	r17
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	4d de       	rcall	.-870    	; 0x14c4 <__addsf3x>
    182a:	60 cf       	rjmp	.-320    	; 0x16ec <__fp_round>

0000182c <modf>:
    182c:	fa 01       	movw	r30, r20
    182e:	dc 01       	movw	r26, r24
    1830:	aa 0f       	add	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	9b 01       	movw	r18, r22
    1836:	ac 01       	movw	r20, r24
    1838:	bf 57       	subi	r27, 0x7F	; 127
    183a:	28 f4       	brcc	.+10     	; 0x1846 <modf+0x1a>
    183c:	22 27       	eor	r18, r18
    183e:	33 27       	eor	r19, r19
    1840:	44 27       	eor	r20, r20
    1842:	50 78       	andi	r21, 0x80	; 128
    1844:	1f c0       	rjmp	.+62     	; 0x1884 <modf+0x58>
    1846:	b7 51       	subi	r27, 0x17	; 23
    1848:	88 f4       	brcc	.+34     	; 0x186c <modf+0x40>
    184a:	ab 2f       	mov	r26, r27
    184c:	00 24       	eor	r0, r0
    184e:	46 95       	lsr	r20
    1850:	37 95       	ror	r19
    1852:	27 95       	ror	r18
    1854:	01 1c       	adc	r0, r1
    1856:	a3 95       	inc	r26
    1858:	d2 f3       	brmi	.-12     	; 0x184e <modf+0x22>
    185a:	00 20       	and	r0, r0
    185c:	69 f0       	breq	.+26     	; 0x1878 <modf+0x4c>
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	44 1f       	adc	r20, r20
    1864:	b3 95       	inc	r27
    1866:	da f3       	brmi	.-10     	; 0x185e <modf+0x32>
    1868:	0d d0       	rcall	.+26     	; 0x1884 <modf+0x58>
    186a:	1a ce       	rjmp	.-972    	; 0x14a0 <__subsf3>
    186c:	61 30       	cpi	r22, 0x01	; 1
    186e:	71 05       	cpc	r23, r1
    1870:	a0 e8       	ldi	r26, 0x80	; 128
    1872:	8a 07       	cpc	r24, r26
    1874:	b9 46       	sbci	r27, 0x69	; 105
    1876:	30 f4       	brcc	.+12     	; 0x1884 <modf+0x58>
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24
    187c:	66 27       	eor	r22, r22
    187e:	77 27       	eor	r23, r23
    1880:	88 27       	eor	r24, r24
    1882:	90 78       	andi	r25, 0x80	; 128
    1884:	30 96       	adiw	r30, 0x00	; 0
    1886:	21 f0       	breq	.+8      	; 0x1890 <modf+0x64>
    1888:	20 83       	st	Z, r18
    188a:	31 83       	std	Z+1, r19	; 0x01
    188c:	42 83       	std	Z+2, r20	; 0x02
    188e:	53 83       	std	Z+3, r21	; 0x03
    1890:	08 95       	ret

00001892 <__mulsf3>:
    1892:	0b d0       	rcall	.+22     	; 0x18aa <__mulsf3x>
    1894:	2b cf       	rjmp	.-426    	; 0x16ec <__fp_round>
    1896:	1c df       	rcall	.-456    	; 0x16d0 <__fp_pscA>
    1898:	28 f0       	brcs	.+10     	; 0x18a4 <__mulsf3+0x12>
    189a:	21 df       	rcall	.-446    	; 0x16de <__fp_pscB>
    189c:	18 f0       	brcs	.+6      	; 0x18a4 <__mulsf3+0x12>
    189e:	95 23       	and	r25, r21
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <__mulsf3+0x12>
    18a2:	e4 ce       	rjmp	.-568    	; 0x166c <__fp_inf>
    18a4:	12 cf       	rjmp	.-476    	; 0x16ca <__fp_nan>
    18a6:	11 24       	eor	r1, r1
    18a8:	6c cf       	rjmp	.-296    	; 0x1782 <__fp_szero>

000018aa <__mulsf3x>:
    18aa:	31 df       	rcall	.-414    	; 0x170e <__fp_split3>
    18ac:	a0 f3       	brcs	.-24     	; 0x1896 <__mulsf3+0x4>

000018ae <__mulsf3_pse>:
    18ae:	95 9f       	mul	r25, r21
    18b0:	d1 f3       	breq	.-12     	; 0x18a6 <__mulsf3+0x14>
    18b2:	95 0f       	add	r25, r21
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	55 1f       	adc	r21, r21
    18b8:	62 9f       	mul	r22, r18
    18ba:	f0 01       	movw	r30, r0
    18bc:	72 9f       	mul	r23, r18
    18be:	bb 27       	eor	r27, r27
    18c0:	f0 0d       	add	r31, r0
    18c2:	b1 1d       	adc	r27, r1
    18c4:	63 9f       	mul	r22, r19
    18c6:	aa 27       	eor	r26, r26
    18c8:	f0 0d       	add	r31, r0
    18ca:	b1 1d       	adc	r27, r1
    18cc:	aa 1f       	adc	r26, r26
    18ce:	64 9f       	mul	r22, r20
    18d0:	66 27       	eor	r22, r22
    18d2:	b0 0d       	add	r27, r0
    18d4:	a1 1d       	adc	r26, r1
    18d6:	66 1f       	adc	r22, r22
    18d8:	82 9f       	mul	r24, r18
    18da:	22 27       	eor	r18, r18
    18dc:	b0 0d       	add	r27, r0
    18de:	a1 1d       	adc	r26, r1
    18e0:	62 1f       	adc	r22, r18
    18e2:	73 9f       	mul	r23, r19
    18e4:	b0 0d       	add	r27, r0
    18e6:	a1 1d       	adc	r26, r1
    18e8:	62 1f       	adc	r22, r18
    18ea:	83 9f       	mul	r24, r19
    18ec:	a0 0d       	add	r26, r0
    18ee:	61 1d       	adc	r22, r1
    18f0:	22 1f       	adc	r18, r18
    18f2:	74 9f       	mul	r23, r20
    18f4:	33 27       	eor	r19, r19
    18f6:	a0 0d       	add	r26, r0
    18f8:	61 1d       	adc	r22, r1
    18fa:	23 1f       	adc	r18, r19
    18fc:	84 9f       	mul	r24, r20
    18fe:	60 0d       	add	r22, r0
    1900:	21 1d       	adc	r18, r1
    1902:	82 2f       	mov	r24, r18
    1904:	76 2f       	mov	r23, r22
    1906:	6a 2f       	mov	r22, r26
    1908:	11 24       	eor	r1, r1
    190a:	9f 57       	subi	r25, 0x7F	; 127
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	8a f0       	brmi	.+34     	; 0x1932 <__mulsf3_pse+0x84>
    1910:	e1 f0       	breq	.+56     	; 0x194a <__mulsf3_pse+0x9c>
    1912:	88 23       	and	r24, r24
    1914:	4a f0       	brmi	.+18     	; 0x1928 <__mulsf3_pse+0x7a>
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	bb 1f       	adc	r27, r27
    191c:	66 1f       	adc	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	91 50       	subi	r25, 0x01	; 1
    1924:	50 40       	sbci	r21, 0x00	; 0
    1926:	a9 f7       	brne	.-22     	; 0x1912 <__mulsf3_pse+0x64>
    1928:	9e 3f       	cpi	r25, 0xFE	; 254
    192a:	51 05       	cpc	r21, r1
    192c:	70 f0       	brcs	.+28     	; 0x194a <__mulsf3_pse+0x9c>
    192e:	9e ce       	rjmp	.-708    	; 0x166c <__fp_inf>
    1930:	28 cf       	rjmp	.-432    	; 0x1782 <__fp_szero>
    1932:	5f 3f       	cpi	r21, 0xFF	; 255
    1934:	ec f3       	brlt	.-6      	; 0x1930 <__mulsf3_pse+0x82>
    1936:	98 3e       	cpi	r25, 0xE8	; 232
    1938:	dc f3       	brlt	.-10     	; 0x1930 <__mulsf3_pse+0x82>
    193a:	86 95       	lsr	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	b7 95       	ror	r27
    1942:	f7 95       	ror	r31
    1944:	e7 95       	ror	r30
    1946:	9f 5f       	subi	r25, 0xFF	; 255
    1948:	c1 f7       	brne	.-16     	; 0x193a <__mulsf3_pse+0x8c>
    194a:	fe 2b       	or	r31, r30
    194c:	88 0f       	add	r24, r24
    194e:	91 1d       	adc	r25, r1
    1950:	96 95       	lsr	r25
    1952:	87 95       	ror	r24
    1954:	97 f9       	bld	r25, 7
    1956:	08 95       	ret

00001958 <pow>:
    1958:	fa 01       	movw	r30, r20
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	30 96       	adiw	r30, 0x00	; 0
    1960:	21 05       	cpc	r18, r1
    1962:	31 05       	cpc	r19, r1
    1964:	99 f1       	breq	.+102    	; 0x19cc <pow+0x74>
    1966:	61 15       	cp	r22, r1
    1968:	71 05       	cpc	r23, r1
    196a:	61 f4       	brne	.+24     	; 0x1984 <pow+0x2c>
    196c:	80 38       	cpi	r24, 0x80	; 128
    196e:	bf e3       	ldi	r27, 0x3F	; 63
    1970:	9b 07       	cpc	r25, r27
    1972:	49 f1       	breq	.+82     	; 0x19c6 <pow+0x6e>
    1974:	68 94       	set
    1976:	90 38       	cpi	r25, 0x80	; 128
    1978:	81 05       	cpc	r24, r1
    197a:	61 f0       	breq	.+24     	; 0x1994 <pow+0x3c>
    197c:	80 38       	cpi	r24, 0x80	; 128
    197e:	bf ef       	ldi	r27, 0xFF	; 255
    1980:	9b 07       	cpc	r25, r27
    1982:	41 f0       	breq	.+16     	; 0x1994 <pow+0x3c>
    1984:	99 23       	and	r25, r25
    1986:	42 f5       	brpl	.+80     	; 0x19d8 <pow+0x80>
    1988:	ff 3f       	cpi	r31, 0xFF	; 255
    198a:	e1 05       	cpc	r30, r1
    198c:	31 05       	cpc	r19, r1
    198e:	21 05       	cpc	r18, r1
    1990:	11 f1       	breq	.+68     	; 0x19d6 <pow+0x7e>
    1992:	e8 94       	clt
    1994:	08 94       	sec
    1996:	e7 95       	ror	r30
    1998:	d9 01       	movw	r26, r18
    199a:	aa 23       	and	r26, r26
    199c:	29 f4       	brne	.+10     	; 0x19a8 <pow+0x50>
    199e:	ab 2f       	mov	r26, r27
    19a0:	be 2f       	mov	r27, r30
    19a2:	f8 5f       	subi	r31, 0xF8	; 248
    19a4:	d0 f3       	brcs	.-12     	; 0x199a <pow+0x42>
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <pow+0x70>
    19a8:	ff 5f       	subi	r31, 0xFF	; 255
    19aa:	70 f4       	brcc	.+28     	; 0x19c8 <pow+0x70>
    19ac:	a6 95       	lsr	r26
    19ae:	e0 f7       	brcc	.-8      	; 0x19a8 <pow+0x50>
    19b0:	f7 39       	cpi	r31, 0x97	; 151
    19b2:	50 f0       	brcs	.+20     	; 0x19c8 <pow+0x70>
    19b4:	19 f0       	breq	.+6      	; 0x19bc <pow+0x64>
    19b6:	ff 3a       	cpi	r31, 0xAF	; 175
    19b8:	38 f4       	brcc	.+14     	; 0x19c8 <pow+0x70>
    19ba:	9f 77       	andi	r25, 0x7F	; 127
    19bc:	9f 93       	push	r25
    19be:	0c d0       	rcall	.+24     	; 0x19d8 <pow+0x80>
    19c0:	0f 90       	pop	r0
    19c2:	07 fc       	sbrc	r0, 7
    19c4:	90 58       	subi	r25, 0x80	; 128
    19c6:	08 95       	ret
    19c8:	3e f0       	brts	.+14     	; 0x19d8 <pow+0x80>
    19ca:	7f ce       	rjmp	.-770    	; 0x16ca <__fp_nan>
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	80 e8       	ldi	r24, 0x80	; 128
    19d2:	9f e3       	ldi	r25, 0x3F	; 63
    19d4:	08 95       	ret
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	9f 77       	andi	r25, 0x7F	; 127
    19da:	5f 93       	push	r21
    19dc:	4f 93       	push	r20
    19de:	3f 93       	push	r19
    19e0:	2f 93       	push	r18
    19e2:	e4 de       	rcall	.-568    	; 0x17ac <log>
    19e4:	2f 91       	pop	r18
    19e6:	3f 91       	pop	r19
    19e8:	4f 91       	pop	r20
    19ea:	5f 91       	pop	r21
    19ec:	52 df       	rcall	.-348    	; 0x1892 <__mulsf3>
    19ee:	25 c0       	rjmp	.+74     	; 0x1a3a <exp>

000019f0 <round>:
    19f0:	96 de       	rcall	.-724    	; 0x171e <__fp_splitA>
    19f2:	e0 f0       	brcs	.+56     	; 0x1a2c <round+0x3c>
    19f4:	9e 37       	cpi	r25, 0x7E	; 126
    19f6:	d8 f0       	brcs	.+54     	; 0x1a2e <round+0x3e>
    19f8:	96 39       	cpi	r25, 0x96	; 150
    19fa:	b8 f4       	brcc	.+46     	; 0x1a2a <round+0x3a>
    19fc:	9e 38       	cpi	r25, 0x8E	; 142
    19fe:	48 f4       	brcc	.+18     	; 0x1a12 <round+0x22>
    1a00:	67 2f       	mov	r22, r23
    1a02:	78 2f       	mov	r23, r24
    1a04:	88 27       	eor	r24, r24
    1a06:	98 5f       	subi	r25, 0xF8	; 248
    1a08:	f9 cf       	rjmp	.-14     	; 0x19fc <round+0xc>
    1a0a:	86 95       	lsr	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	93 95       	inc	r25
    1a12:	95 39       	cpi	r25, 0x95	; 149
    1a14:	d0 f3       	brcs	.-12     	; 0x1a0a <round+0x1a>
    1a16:	b6 2f       	mov	r27, r22
    1a18:	b1 70       	andi	r27, 0x01	; 1
    1a1a:	6b 0f       	add	r22, r27
    1a1c:	71 1d       	adc	r23, r1
    1a1e:	81 1d       	adc	r24, r1
    1a20:	20 f4       	brcc	.+8      	; 0x1a2a <round+0x3a>
    1a22:	87 95       	ror	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	93 95       	inc	r25
    1a2a:	26 ce       	rjmp	.-948    	; 0x1678 <__fp_mintl>
    1a2c:	40 ce       	rjmp	.-896    	; 0x16ae <__fp_mpack>
    1a2e:	a9 ce       	rjmp	.-686    	; 0x1782 <__fp_szero>
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <round+0x48>
    1a32:	0e f0       	brts	.+2      	; 0x1a36 <round+0x46>
    1a34:	1b ce       	rjmp	.-970    	; 0x166c <__fp_inf>
    1a36:	a4 ce       	rjmp	.-696    	; 0x1780 <__fp_zero>
    1a38:	48 ce       	rjmp	.-880    	; 0x16ca <__fp_nan>

00001a3a <exp>:
    1a3a:	71 de       	rcall	.-798    	; 0x171e <__fp_splitA>
    1a3c:	c8 f3       	brcs	.-14     	; 0x1a30 <round+0x40>
    1a3e:	96 38       	cpi	r25, 0x86	; 134
    1a40:	c0 f7       	brcc	.-16     	; 0x1a32 <round+0x42>
    1a42:	07 f8       	bld	r0, 7
    1a44:	0f 92       	push	r0
    1a46:	e8 94       	clt
    1a48:	2b e3       	ldi	r18, 0x3B	; 59
    1a4a:	3a ea       	ldi	r19, 0xAA	; 170
    1a4c:	48 eb       	ldi	r20, 0xB8	; 184
    1a4e:	5f e7       	ldi	r21, 0x7F	; 127
    1a50:	2e df       	rcall	.-420    	; 0x18ae <__mulsf3_pse>
    1a52:	0f 92       	push	r0
    1a54:	0f 92       	push	r0
    1a56:	0f 92       	push	r0
    1a58:	4d b7       	in	r20, 0x3d	; 61
    1a5a:	5e b7       	in	r21, 0x3e	; 62
    1a5c:	0f 92       	push	r0
    1a5e:	e6 de       	rcall	.-564    	; 0x182c <modf>
    1a60:	e6 ee       	ldi	r30, 0xE6	; 230
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	3a d0       	rcall	.+116    	; 0x1ada <__fp_powser>
    1a66:	4f 91       	pop	r20
    1a68:	5f 91       	pop	r21
    1a6a:	ef 91       	pop	r30
    1a6c:	ff 91       	pop	r31
    1a6e:	e5 95       	asr	r30
    1a70:	ee 1f       	adc	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	49 f0       	breq	.+18     	; 0x1a88 <exp+0x4e>
    1a76:	fe 57       	subi	r31, 0x7E	; 126
    1a78:	e0 68       	ori	r30, 0x80	; 128
    1a7a:	44 27       	eor	r20, r20
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	44 1f       	adc	r20, r20
    1a80:	fa 95       	dec	r31
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <exp+0x42>
    1a84:	41 95       	neg	r20
    1a86:	55 0b       	sbc	r21, r21
    1a88:	56 d0       	rcall	.+172    	; 0x1b36 <ldexp>
    1a8a:	0f 90       	pop	r0
    1a8c:	07 fe       	sbrs	r0, 7
    1a8e:	4a c0       	rjmp	.+148    	; 0x1b24 <inverse>
    1a90:	08 95       	ret

00001a92 <__fp_cmp>:
    1a92:	99 0f       	add	r25, r25
    1a94:	00 08       	sbc	r0, r0
    1a96:	55 0f       	add	r21, r21
    1a98:	aa 0b       	sbc	r26, r26
    1a9a:	e0 e8       	ldi	r30, 0x80	; 128
    1a9c:	fe ef       	ldi	r31, 0xFE	; 254
    1a9e:	16 16       	cp	r1, r22
    1aa0:	17 06       	cpc	r1, r23
    1aa2:	e8 07       	cpc	r30, r24
    1aa4:	f9 07       	cpc	r31, r25
    1aa6:	c0 f0       	brcs	.+48     	; 0x1ad8 <__fp_cmp+0x46>
    1aa8:	12 16       	cp	r1, r18
    1aaa:	13 06       	cpc	r1, r19
    1aac:	e4 07       	cpc	r30, r20
    1aae:	f5 07       	cpc	r31, r21
    1ab0:	98 f0       	brcs	.+38     	; 0x1ad8 <__fp_cmp+0x46>
    1ab2:	62 1b       	sub	r22, r18
    1ab4:	73 0b       	sbc	r23, r19
    1ab6:	84 0b       	sbc	r24, r20
    1ab8:	95 0b       	sbc	r25, r21
    1aba:	39 f4       	brne	.+14     	; 0x1aca <__fp_cmp+0x38>
    1abc:	0a 26       	eor	r0, r26
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <__fp_cmp+0x46>
    1ac0:	23 2b       	or	r18, r19
    1ac2:	24 2b       	or	r18, r20
    1ac4:	25 2b       	or	r18, r21
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <__fp_cmp+0x3e>
    1ac8:	08 95       	ret
    1aca:	0a 26       	eor	r0, r26
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <__fp_cmp+0x3e>
    1ace:	a1 40       	sbci	r26, 0x01	; 1
    1ad0:	a6 95       	lsr	r26
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	81 1d       	adc	r24, r1
    1ad6:	81 1d       	adc	r24, r1
    1ad8:	08 95       	ret

00001ada <__fp_powser>:
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	1f 93       	push	r17
    1ae0:	0f 93       	push	r16
    1ae2:	ff 92       	push	r15
    1ae4:	ef 92       	push	r14
    1ae6:	df 92       	push	r13
    1ae8:	7b 01       	movw	r14, r22
    1aea:	8c 01       	movw	r16, r24
    1aec:	68 94       	set
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <__fp_powser+0x20>
    1af0:	da 2e       	mov	r13, r26
    1af2:	ef 01       	movw	r28, r30
    1af4:	da de       	rcall	.-588    	; 0x18aa <__mulsf3x>
    1af6:	fe 01       	movw	r30, r28
    1af8:	e8 94       	clt
    1afa:	a5 91       	lpm	r26, Z+
    1afc:	25 91       	lpm	r18, Z+
    1afe:	35 91       	lpm	r19, Z+
    1b00:	45 91       	lpm	r20, Z+
    1b02:	55 91       	lpm	r21, Z+
    1b04:	ae f3       	brts	.-22     	; 0x1af0 <__fp_powser+0x16>
    1b06:	ef 01       	movw	r28, r30
    1b08:	dd dc       	rcall	.-1606   	; 0x14c4 <__addsf3x>
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	97 01       	movw	r18, r14
    1b0e:	a8 01       	movw	r20, r16
    1b10:	da 94       	dec	r13
    1b12:	79 f7       	brne	.-34     	; 0x1af2 <__fp_powser+0x18>
    1b14:	df 90       	pop	r13
    1b16:	ef 90       	pop	r14
    1b18:	ff 90       	pop	r15
    1b1a:	0f 91       	pop	r16
    1b1c:	1f 91       	pop	r17
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <inverse>:
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	80 e8       	ldi	r24, 0x80	; 128
    1b2e:	9f e3       	ldi	r25, 0x3F	; 63
    1b30:	36 c0       	rjmp	.+108    	; 0x1b9e <__divsf3>
    1b32:	9c cd       	rjmp	.-1224   	; 0x166c <__fp_inf>
    1b34:	bc cd       	rjmp	.-1160   	; 0x16ae <__fp_mpack>

00001b36 <ldexp>:
    1b36:	f3 dd       	rcall	.-1050   	; 0x171e <__fp_splitA>
    1b38:	e8 f3       	brcs	.-6      	; 0x1b34 <inverse+0x10>
    1b3a:	99 23       	and	r25, r25
    1b3c:	d9 f3       	breq	.-10     	; 0x1b34 <inverse+0x10>
    1b3e:	94 0f       	add	r25, r20
    1b40:	51 1d       	adc	r21, r1
    1b42:	bb f3       	brvs	.-18     	; 0x1b32 <inverse+0xe>
    1b44:	91 50       	subi	r25, 0x01	; 1
    1b46:	50 40       	sbci	r21, 0x00	; 0
    1b48:	94 f0       	brlt	.+36     	; 0x1b6e <ldexp+0x38>
    1b4a:	59 f0       	breq	.+22     	; 0x1b62 <ldexp+0x2c>
    1b4c:	88 23       	and	r24, r24
    1b4e:	32 f0       	brmi	.+12     	; 0x1b5c <ldexp+0x26>
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	91 50       	subi	r25, 0x01	; 1
    1b58:	50 40       	sbci	r21, 0x00	; 0
    1b5a:	c1 f7       	brne	.-16     	; 0x1b4c <ldexp+0x16>
    1b5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5e:	51 05       	cpc	r21, r1
    1b60:	44 f7       	brge	.-48     	; 0x1b32 <inverse+0xe>
    1b62:	88 0f       	add	r24, r24
    1b64:	91 1d       	adc	r25, r1
    1b66:	96 95       	lsr	r25
    1b68:	87 95       	ror	r24
    1b6a:	97 f9       	bld	r25, 7
    1b6c:	08 95       	ret
    1b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b70:	ac f0       	brlt	.+42     	; 0x1b9c <ldexp+0x66>
    1b72:	98 3e       	cpi	r25, 0xE8	; 232
    1b74:	9c f0       	brlt	.+38     	; 0x1b9c <ldexp+0x66>
    1b76:	bb 27       	eor	r27, r27
    1b78:	86 95       	lsr	r24
    1b7a:	77 95       	ror	r23
    1b7c:	67 95       	ror	r22
    1b7e:	b7 95       	ror	r27
    1b80:	08 f4       	brcc	.+2      	; 0x1b84 <ldexp+0x4e>
    1b82:	b1 60       	ori	r27, 0x01	; 1
    1b84:	93 95       	inc	r25
    1b86:	c1 f7       	brne	.-16     	; 0x1b78 <ldexp+0x42>
    1b88:	bb 0f       	add	r27, r27
    1b8a:	58 f7       	brcc	.-42     	; 0x1b62 <ldexp+0x2c>
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <ldexp+0x5c>
    1b8e:	60 ff       	sbrs	r22, 0
    1b90:	e8 cf       	rjmp	.-48     	; 0x1b62 <ldexp+0x2c>
    1b92:	6f 5f       	subi	r22, 0xFF	; 255
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	8f 4f       	sbci	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	e3 cf       	rjmp	.-58     	; 0x1b62 <ldexp+0x2c>
    1b9c:	f2 cd       	rjmp	.-1052   	; 0x1782 <__fp_szero>

00001b9e <__divsf3>:
    1b9e:	0c d0       	rcall	.+24     	; 0x1bb8 <__divsf3x>
    1ba0:	a5 cd       	rjmp	.-1206   	; 0x16ec <__fp_round>
    1ba2:	9d dd       	rcall	.-1222   	; 0x16de <__fp_pscB>
    1ba4:	40 f0       	brcs	.+16     	; 0x1bb6 <__divsf3+0x18>
    1ba6:	94 dd       	rcall	.-1240   	; 0x16d0 <__fp_pscA>
    1ba8:	30 f0       	brcs	.+12     	; 0x1bb6 <__divsf3+0x18>
    1baa:	21 f4       	brne	.+8      	; 0x1bb4 <__divsf3+0x16>
    1bac:	5f 3f       	cpi	r21, 0xFF	; 255
    1bae:	19 f0       	breq	.+6      	; 0x1bb6 <__divsf3+0x18>
    1bb0:	5d cd       	rjmp	.-1350   	; 0x166c <__fp_inf>
    1bb2:	51 11       	cpse	r21, r1
    1bb4:	e6 cd       	rjmp	.-1076   	; 0x1782 <__fp_szero>
    1bb6:	89 cd       	rjmp	.-1262   	; 0x16ca <__fp_nan>

00001bb8 <__divsf3x>:
    1bb8:	aa dd       	rcall	.-1196   	; 0x170e <__fp_split3>
    1bba:	98 f3       	brcs	.-26     	; 0x1ba2 <__divsf3+0x4>

00001bbc <__divsf3_pse>:
    1bbc:	99 23       	and	r25, r25
    1bbe:	c9 f3       	breq	.-14     	; 0x1bb2 <__divsf3+0x14>
    1bc0:	55 23       	and	r21, r21
    1bc2:	b1 f3       	breq	.-20     	; 0x1bb0 <__divsf3+0x12>
    1bc4:	95 1b       	sub	r25, r21
    1bc6:	55 0b       	sbc	r21, r21
    1bc8:	bb 27       	eor	r27, r27
    1bca:	aa 27       	eor	r26, r26
    1bcc:	62 17       	cp	r22, r18
    1bce:	73 07       	cpc	r23, r19
    1bd0:	84 07       	cpc	r24, r20
    1bd2:	38 f0       	brcs	.+14     	; 0x1be2 <__divsf3_pse+0x26>
    1bd4:	9f 5f       	subi	r25, 0xFF	; 255
    1bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	44 1f       	adc	r20, r20
    1bde:	aa 1f       	adc	r26, r26
    1be0:	a9 f3       	breq	.-22     	; 0x1bcc <__divsf3_pse+0x10>
    1be2:	33 d0       	rcall	.+102    	; 0x1c4a <__divsf3_pse+0x8e>
    1be4:	0e 2e       	mov	r0, r30
    1be6:	3a f0       	brmi	.+14     	; 0x1bf6 <__divsf3_pse+0x3a>
    1be8:	e0 e8       	ldi	r30, 0x80	; 128
    1bea:	30 d0       	rcall	.+96     	; 0x1c4c <__divsf3_pse+0x90>
    1bec:	91 50       	subi	r25, 0x01	; 1
    1bee:	50 40       	sbci	r21, 0x00	; 0
    1bf0:	e6 95       	lsr	r30
    1bf2:	00 1c       	adc	r0, r0
    1bf4:	ca f7       	brpl	.-14     	; 0x1be8 <__divsf3_pse+0x2c>
    1bf6:	29 d0       	rcall	.+82     	; 0x1c4a <__divsf3_pse+0x8e>
    1bf8:	fe 2f       	mov	r31, r30
    1bfa:	27 d0       	rcall	.+78     	; 0x1c4a <__divsf3_pse+0x8e>
    1bfc:	66 0f       	add	r22, r22
    1bfe:	77 1f       	adc	r23, r23
    1c00:	88 1f       	adc	r24, r24
    1c02:	bb 1f       	adc	r27, r27
    1c04:	26 17       	cp	r18, r22
    1c06:	37 07       	cpc	r19, r23
    1c08:	48 07       	cpc	r20, r24
    1c0a:	ab 07       	cpc	r26, r27
    1c0c:	b0 e8       	ldi	r27, 0x80	; 128
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <__divsf3_pse+0x56>
    1c10:	bb 0b       	sbc	r27, r27
    1c12:	80 2d       	mov	r24, r0
    1c14:	bf 01       	movw	r22, r30
    1c16:	ff 27       	eor	r31, r31
    1c18:	93 58       	subi	r25, 0x83	; 131
    1c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1c:	2a f0       	brmi	.+10     	; 0x1c28 <__divsf3_pse+0x6c>
    1c1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c20:	51 05       	cpc	r21, r1
    1c22:	68 f0       	brcs	.+26     	; 0x1c3e <__divsf3_pse+0x82>
    1c24:	23 cd       	rjmp	.-1466   	; 0x166c <__fp_inf>
    1c26:	ad cd       	rjmp	.-1190   	; 0x1782 <__fp_szero>
    1c28:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2a:	ec f3       	brlt	.-6      	; 0x1c26 <__divsf3_pse+0x6a>
    1c2c:	98 3e       	cpi	r25, 0xE8	; 232
    1c2e:	dc f3       	brlt	.-10     	; 0x1c26 <__divsf3_pse+0x6a>
    1c30:	86 95       	lsr	r24
    1c32:	77 95       	ror	r23
    1c34:	67 95       	ror	r22
    1c36:	b7 95       	ror	r27
    1c38:	f7 95       	ror	r31
    1c3a:	9f 5f       	subi	r25, 0xFF	; 255
    1c3c:	c9 f7       	brne	.-14     	; 0x1c30 <__divsf3_pse+0x74>
    1c3e:	88 0f       	add	r24, r24
    1c40:	91 1d       	adc	r25, r1
    1c42:	96 95       	lsr	r25
    1c44:	87 95       	ror	r24
    1c46:	97 f9       	bld	r25, 7
    1c48:	08 95       	ret
    1c4a:	e1 e0       	ldi	r30, 0x01	; 1
    1c4c:	66 0f       	add	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	bb 1f       	adc	r27, r27
    1c54:	62 17       	cp	r22, r18
    1c56:	73 07       	cpc	r23, r19
    1c58:	84 07       	cpc	r24, r20
    1c5a:	ba 07       	cpc	r27, r26
    1c5c:	20 f0       	brcs	.+8      	; 0x1c66 <__divsf3_pse+0xaa>
    1c5e:	62 1b       	sub	r22, r18
    1c60:	73 0b       	sbc	r23, r19
    1c62:	84 0b       	sbc	r24, r20
    1c64:	ba 0b       	sbc	r27, r26
    1c66:	ee 1f       	adc	r30, r30
    1c68:	88 f7       	brcc	.-30     	; 0x1c4c <__divsf3_pse+0x90>
    1c6a:	e0 95       	com	r30
    1c6c:	08 95       	ret

00001c6e <malloc>:
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	91 05       	cpc	r25, r1
    1c76:	10 f4       	brcc	.+4      	; 0x1c7c <malloc+0xe>
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	e0 91 8b 03 	lds	r30, 0x038B
    1c80:	f0 91 8c 03 	lds	r31, 0x038C
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	30 97       	sbiw	r30, 0x00	; 0
    1c8e:	39 f1       	breq	.+78     	; 0x1cde <malloc+0x70>
    1c90:	40 81       	ld	r20, Z
    1c92:	51 81       	ldd	r21, Z+1	; 0x01
    1c94:	48 17       	cp	r20, r24
    1c96:	59 07       	cpc	r21, r25
    1c98:	b8 f0       	brcs	.+46     	; 0x1cc8 <malloc+0x5a>
    1c9a:	48 17       	cp	r20, r24
    1c9c:	59 07       	cpc	r21, r25
    1c9e:	71 f4       	brne	.+28     	; 0x1cbc <malloc+0x4e>
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	10 97       	sbiw	r26, 0x00	; 0
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <malloc+0x44>
    1ca8:	13 96       	adiw	r26, 0x03	; 3
    1caa:	9c 93       	st	X, r25
    1cac:	8e 93       	st	-X, r24
    1cae:	12 97       	sbiw	r26, 0x02	; 2
    1cb0:	2c c0       	rjmp	.+88     	; 0x1d0a <malloc+0x9c>
    1cb2:	90 93 8c 03 	sts	0x038C, r25
    1cb6:	80 93 8b 03 	sts	0x038B, r24
    1cba:	27 c0       	rjmp	.+78     	; 0x1d0a <malloc+0x9c>
    1cbc:	21 15       	cp	r18, r1
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	31 f0       	breq	.+12     	; 0x1cce <malloc+0x60>
    1cc2:	42 17       	cp	r20, r18
    1cc4:	53 07       	cpc	r21, r19
    1cc6:	18 f0       	brcs	.+6      	; 0x1cce <malloc+0x60>
    1cc8:	a9 01       	movw	r20, r18
    1cca:	db 01       	movw	r26, r22
    1ccc:	01 c0       	rjmp	.+2      	; 0x1cd0 <malloc+0x62>
    1cce:	ef 01       	movw	r28, r30
    1cd0:	9a 01       	movw	r18, r20
    1cd2:	bd 01       	movw	r22, r26
    1cd4:	df 01       	movw	r26, r30
    1cd6:	02 80       	ldd	r0, Z+2	; 0x02
    1cd8:	f3 81       	ldd	r31, Z+3	; 0x03
    1cda:	e0 2d       	mov	r30, r0
    1cdc:	d7 cf       	rjmp	.-82     	; 0x1c8c <malloc+0x1e>
    1cde:	21 15       	cp	r18, r1
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	f9 f0       	breq	.+62     	; 0x1d22 <malloc+0xb4>
    1ce4:	28 1b       	sub	r18, r24
    1ce6:	39 0b       	sbc	r19, r25
    1ce8:	24 30       	cpi	r18, 0x04	; 4
    1cea:	31 05       	cpc	r19, r1
    1cec:	80 f4       	brcc	.+32     	; 0x1d0e <malloc+0xa0>
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf2:	61 15       	cp	r22, r1
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <malloc+0x92>
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	82 83       	std	Z+2, r24	; 0x02
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <malloc+0x9a>
    1d00:	90 93 8c 03 	sts	0x038C, r25
    1d04:	80 93 8b 03 	sts	0x038B, r24
    1d08:	fe 01       	movw	r30, r28
    1d0a:	32 96       	adiw	r30, 0x02	; 2
    1d0c:	44 c0       	rjmp	.+136    	; 0x1d96 <malloc+0x128>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	81 93       	st	Z+, r24
    1d16:	91 93       	st	Z+, r25
    1d18:	22 50       	subi	r18, 0x02	; 2
    1d1a:	31 09       	sbc	r19, r1
    1d1c:	39 83       	std	Y+1, r19	; 0x01
    1d1e:	28 83       	st	Y, r18
    1d20:	3a c0       	rjmp	.+116    	; 0x1d96 <malloc+0x128>
    1d22:	20 91 89 03 	lds	r18, 0x0389
    1d26:	30 91 8a 03 	lds	r19, 0x038A
    1d2a:	23 2b       	or	r18, r19
    1d2c:	41 f4       	brne	.+16     	; 0x1d3e <malloc+0xd0>
    1d2e:	20 91 08 01 	lds	r18, 0x0108
    1d32:	30 91 09 01 	lds	r19, 0x0109
    1d36:	30 93 8a 03 	sts	0x038A, r19
    1d3a:	20 93 89 03 	sts	0x0389, r18
    1d3e:	20 91 06 01 	lds	r18, 0x0106
    1d42:	30 91 07 01 	lds	r19, 0x0107
    1d46:	21 15       	cp	r18, r1
    1d48:	31 05       	cpc	r19, r1
    1d4a:	41 f4       	brne	.+16     	; 0x1d5c <malloc+0xee>
    1d4c:	2d b7       	in	r18, 0x3d	; 61
    1d4e:	3e b7       	in	r19, 0x3e	; 62
    1d50:	40 91 0a 01 	lds	r20, 0x010A
    1d54:	50 91 0b 01 	lds	r21, 0x010B
    1d58:	24 1b       	sub	r18, r20
    1d5a:	35 0b       	sbc	r19, r21
    1d5c:	e0 91 89 03 	lds	r30, 0x0389
    1d60:	f0 91 8a 03 	lds	r31, 0x038A
    1d64:	e2 17       	cp	r30, r18
    1d66:	f3 07       	cpc	r31, r19
    1d68:	a0 f4       	brcc	.+40     	; 0x1d92 <malloc+0x124>
    1d6a:	2e 1b       	sub	r18, r30
    1d6c:	3f 0b       	sbc	r19, r31
    1d6e:	28 17       	cp	r18, r24
    1d70:	39 07       	cpc	r19, r25
    1d72:	78 f0       	brcs	.+30     	; 0x1d92 <malloc+0x124>
    1d74:	ac 01       	movw	r20, r24
    1d76:	4e 5f       	subi	r20, 0xFE	; 254
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	24 17       	cp	r18, r20
    1d7c:	35 07       	cpc	r19, r21
    1d7e:	48 f0       	brcs	.+18     	; 0x1d92 <malloc+0x124>
    1d80:	4e 0f       	add	r20, r30
    1d82:	5f 1f       	adc	r21, r31
    1d84:	50 93 8a 03 	sts	0x038A, r21
    1d88:	40 93 89 03 	sts	0x0389, r20
    1d8c:	81 93       	st	Z+, r24
    1d8e:	91 93       	st	Z+, r25
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <malloc+0x128>
    1d92:	e0 e0       	ldi	r30, 0x00	; 0
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	cf 01       	movw	r24, r30
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <free>:
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <free+0xa>
    1da6:	87 c0       	rjmp	.+270    	; 0x1eb6 <free+0x118>
    1da8:	fc 01       	movw	r30, r24
    1daa:	32 97       	sbiw	r30, 0x02	; 2
    1dac:	13 82       	std	Z+3, r1	; 0x03
    1dae:	12 82       	std	Z+2, r1	; 0x02
    1db0:	c0 91 8b 03 	lds	r28, 0x038B
    1db4:	d0 91 8c 03 	lds	r29, 0x038C
    1db8:	20 97       	sbiw	r28, 0x00	; 0
    1dba:	81 f4       	brne	.+32     	; 0x1ddc <free+0x3e>
    1dbc:	20 81       	ld	r18, Z
    1dbe:	31 81       	ldd	r19, Z+1	; 0x01
    1dc0:	28 0f       	add	r18, r24
    1dc2:	39 1f       	adc	r19, r25
    1dc4:	80 91 89 03 	lds	r24, 0x0389
    1dc8:	90 91 8a 03 	lds	r25, 0x038A
    1dcc:	82 17       	cp	r24, r18
    1dce:	93 07       	cpc	r25, r19
    1dd0:	79 f5       	brne	.+94     	; 0x1e30 <free+0x92>
    1dd2:	f0 93 8a 03 	sts	0x038A, r31
    1dd6:	e0 93 89 03 	sts	0x0389, r30
    1dda:	6d c0       	rjmp	.+218    	; 0x1eb6 <free+0x118>
    1ddc:	de 01       	movw	r26, r28
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	ae 17       	cp	r26, r30
    1de4:	bf 07       	cpc	r27, r31
    1de6:	50 f4       	brcc	.+20     	; 0x1dfc <free+0x5e>
    1de8:	12 96       	adiw	r26, 0x02	; 2
    1dea:	4d 91       	ld	r20, X+
    1dec:	5c 91       	ld	r21, X
    1dee:	13 97       	sbiw	r26, 0x03	; 3
    1df0:	9d 01       	movw	r18, r26
    1df2:	41 15       	cp	r20, r1
    1df4:	51 05       	cpc	r21, r1
    1df6:	09 f1       	breq	.+66     	; 0x1e3a <free+0x9c>
    1df8:	da 01       	movw	r26, r20
    1dfa:	f3 cf       	rjmp	.-26     	; 0x1de2 <free+0x44>
    1dfc:	b3 83       	std	Z+3, r27	; 0x03
    1dfe:	a2 83       	std	Z+2, r26	; 0x02
    1e00:	40 81       	ld	r20, Z
    1e02:	51 81       	ldd	r21, Z+1	; 0x01
    1e04:	84 0f       	add	r24, r20
    1e06:	95 1f       	adc	r25, r21
    1e08:	8a 17       	cp	r24, r26
    1e0a:	9b 07       	cpc	r25, r27
    1e0c:	71 f4       	brne	.+28     	; 0x1e2a <free+0x8c>
    1e0e:	8d 91       	ld	r24, X+
    1e10:	9c 91       	ld	r25, X
    1e12:	11 97       	sbiw	r26, 0x01	; 1
    1e14:	84 0f       	add	r24, r20
    1e16:	95 1f       	adc	r25, r21
    1e18:	02 96       	adiw	r24, 0x02	; 2
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
    1e1e:	12 96       	adiw	r26, 0x02	; 2
    1e20:	8d 91       	ld	r24, X+
    1e22:	9c 91       	ld	r25, X
    1e24:	13 97       	sbiw	r26, 0x03	; 3
    1e26:	93 83       	std	Z+3, r25	; 0x03
    1e28:	82 83       	std	Z+2, r24	; 0x02
    1e2a:	21 15       	cp	r18, r1
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <free+0x9c>
    1e30:	f0 93 8c 03 	sts	0x038C, r31
    1e34:	e0 93 8b 03 	sts	0x038B, r30
    1e38:	3e c0       	rjmp	.+124    	; 0x1eb6 <free+0x118>
    1e3a:	d9 01       	movw	r26, r18
    1e3c:	13 96       	adiw	r26, 0x03	; 3
    1e3e:	fc 93       	st	X, r31
    1e40:	ee 93       	st	-X, r30
    1e42:	12 97       	sbiw	r26, 0x02	; 2
    1e44:	4d 91       	ld	r20, X+
    1e46:	5d 91       	ld	r21, X+
    1e48:	a4 0f       	add	r26, r20
    1e4a:	b5 1f       	adc	r27, r21
    1e4c:	ea 17       	cp	r30, r26
    1e4e:	fb 07       	cpc	r31, r27
    1e50:	79 f4       	brne	.+30     	; 0x1e70 <free+0xd2>
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	84 0f       	add	r24, r20
    1e58:	95 1f       	adc	r25, r21
    1e5a:	02 96       	adiw	r24, 0x02	; 2
    1e5c:	d9 01       	movw	r26, r18
    1e5e:	11 96       	adiw	r26, 0x01	; 1
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	13 96       	adiw	r26, 0x03	; 3
    1e6a:	9c 93       	st	X, r25
    1e6c:	8e 93       	st	-X, r24
    1e6e:	12 97       	sbiw	r26, 0x02	; 2
    1e70:	e0 e0       	ldi	r30, 0x00	; 0
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	19 f0       	breq	.+6      	; 0x1e82 <free+0xe4>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ec 01       	movw	r28, r24
    1e80:	f9 cf       	rjmp	.-14     	; 0x1e74 <free+0xd6>
    1e82:	ce 01       	movw	r24, r28
    1e84:	02 96       	adiw	r24, 0x02	; 2
    1e86:	28 81       	ld	r18, Y
    1e88:	39 81       	ldd	r19, Y+1	; 0x01
    1e8a:	82 0f       	add	r24, r18
    1e8c:	93 1f       	adc	r25, r19
    1e8e:	20 91 89 03 	lds	r18, 0x0389
    1e92:	30 91 8a 03 	lds	r19, 0x038A
    1e96:	28 17       	cp	r18, r24
    1e98:	39 07       	cpc	r19, r25
    1e9a:	69 f4       	brne	.+26     	; 0x1eb6 <free+0x118>
    1e9c:	30 97       	sbiw	r30, 0x00	; 0
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <free+0x10c>
    1ea0:	10 92 8c 03 	sts	0x038C, r1
    1ea4:	10 92 8b 03 	sts	0x038B, r1
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <free+0x110>
    1eaa:	13 82       	std	Z+3, r1	; 0x03
    1eac:	12 82       	std	Z+2, r1	; 0x02
    1eae:	d0 93 8a 03 	sts	0x038A, r29
    1eb2:	c0 93 89 03 	sts	0x0389, r28
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <strcat>:
    1ebc:	fb 01       	movw	r30, r22
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	0d 90       	ld	r0, X+
    1ec2:	00 20       	and	r0, r0
    1ec4:	e9 f7       	brne	.-6      	; 0x1ec0 <strcat+0x4>
    1ec6:	11 97       	sbiw	r26, 0x01	; 1
    1ec8:	01 90       	ld	r0, Z+
    1eca:	0d 92       	st	X+, r0
    1ecc:	00 20       	and	r0, r0
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <strcat+0xc>
    1ed0:	08 95       	ret

00001ed2 <strcmp>:
    1ed2:	fb 01       	movw	r30, r22
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	8d 91       	ld	r24, X+
    1ed8:	01 90       	ld	r0, Z+
    1eda:	80 19       	sub	r24, r0
    1edc:	01 10       	cpse	r0, r1
    1ede:	d9 f3       	breq	.-10     	; 0x1ed6 <strcmp+0x4>
    1ee0:	99 0b       	sbc	r25, r25
    1ee2:	08 95       	ret

00001ee4 <strpbrk>:
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	99 27       	eor	r25, r25
    1ee8:	8d 91       	ld	r24, X+
    1eea:	88 23       	and	r24, r24
    1eec:	41 f0       	breq	.+16     	; 0x1efe <strpbrk+0x1a>
    1eee:	fb 01       	movw	r30, r22
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	08 16       	cp	r0, r24
    1ef4:	01 10       	cpse	r0, r1
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <strpbrk+0xc>
    1ef8:	b9 f7       	brne	.-18     	; 0x1ee8 <strpbrk+0x4>
    1efa:	11 97       	sbiw	r26, 0x01	; 1
    1efc:	cd 01       	movw	r24, r26
    1efe:	08 95       	ret

00001f00 <sprintf>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	0d 89       	ldd	r16, Y+21	; 0x15
    1f1a:	1e 89       	ldd	r17, Y+22	; 0x16
    1f1c:	86 e0       	ldi	r24, 0x06	; 6
    1f1e:	8c 83       	std	Y+4, r24	; 0x04
    1f20:	1a 83       	std	Y+2, r17	; 0x02
    1f22:	09 83       	std	Y+1, r16	; 0x01
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	9f e7       	ldi	r25, 0x7F	; 127
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	ae 01       	movw	r20, r28
    1f2e:	47 5e       	subi	r20, 0xE7	; 231
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	6f 89       	ldd	r22, Y+23	; 0x17
    1f34:	78 8d       	ldd	r23, Y+24	; 0x18
    1f36:	ce 01       	movw	r24, r28
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <vfprintf>
    1f3e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f40:	f8 85       	ldd	r31, Y+8	; 0x08
    1f42:	e0 0f       	add	r30, r16
    1f44:	f1 1f       	adc	r31, r17
    1f46:	10 82       	st	Z, r1
    1f48:	2e 96       	adiw	r28, 0x0e	; 14
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	08 95       	ret

00001f5e <vfprintf>:
    1f5e:	2f 92       	push	r2
    1f60:	3f 92       	push	r3
    1f62:	4f 92       	push	r4
    1f64:	5f 92       	push	r5
    1f66:	6f 92       	push	r6
    1f68:	7f 92       	push	r7
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	2c 97       	sbiw	r28, 0x0c	; 12
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	7c 01       	movw	r14, r24
    1f94:	6b 01       	movw	r12, r22
    1f96:	8a 01       	movw	r16, r20
    1f98:	fc 01       	movw	r30, r24
    1f9a:	17 82       	std	Z+7, r1	; 0x07
    1f9c:	16 82       	std	Z+6, r1	; 0x06
    1f9e:	83 81       	ldd	r24, Z+3	; 0x03
    1fa0:	81 ff       	sbrs	r24, 1
    1fa2:	bd c1       	rjmp	.+890    	; 0x231e <vfprintf+0x3c0>
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	4c 01       	movw	r8, r24
    1faa:	f7 01       	movw	r30, r14
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	f6 01       	movw	r30, r12
    1fb0:	93 fd       	sbrc	r25, 3
    1fb2:	85 91       	lpm	r24, Z+
    1fb4:	93 ff       	sbrs	r25, 3
    1fb6:	81 91       	ld	r24, Z+
    1fb8:	6f 01       	movw	r12, r30
    1fba:	88 23       	and	r24, r24
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <vfprintf+0x62>
    1fbe:	ab c1       	rjmp	.+854    	; 0x2316 <vfprintf+0x3b8>
    1fc0:	85 32       	cpi	r24, 0x25	; 37
    1fc2:	39 f4       	brne	.+14     	; 0x1fd2 <vfprintf+0x74>
    1fc4:	93 fd       	sbrc	r25, 3
    1fc6:	85 91       	lpm	r24, Z+
    1fc8:	93 ff       	sbrs	r25, 3
    1fca:	81 91       	ld	r24, Z+
    1fcc:	6f 01       	movw	r12, r30
    1fce:	85 32       	cpi	r24, 0x25	; 37
    1fd0:	29 f4       	brne	.+10     	; 0x1fdc <vfprintf+0x7e>
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    1fda:	e7 cf       	rjmp	.-50     	; 0x1faa <vfprintf+0x4c>
    1fdc:	51 2c       	mov	r5, r1
    1fde:	31 2c       	mov	r3, r1
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	20 32       	cpi	r18, 0x20	; 32
    1fe4:	a0 f4       	brcc	.+40     	; 0x200e <vfprintf+0xb0>
    1fe6:	8b 32       	cpi	r24, 0x2B	; 43
    1fe8:	69 f0       	breq	.+26     	; 0x2004 <vfprintf+0xa6>
    1fea:	30 f4       	brcc	.+12     	; 0x1ff8 <vfprintf+0x9a>
    1fec:	80 32       	cpi	r24, 0x20	; 32
    1fee:	59 f0       	breq	.+22     	; 0x2006 <vfprintf+0xa8>
    1ff0:	83 32       	cpi	r24, 0x23	; 35
    1ff2:	69 f4       	brne	.+26     	; 0x200e <vfprintf+0xb0>
    1ff4:	20 61       	ori	r18, 0x10	; 16
    1ff6:	2c c0       	rjmp	.+88     	; 0x2050 <vfprintf+0xf2>
    1ff8:	8d 32       	cpi	r24, 0x2D	; 45
    1ffa:	39 f0       	breq	.+14     	; 0x200a <vfprintf+0xac>
    1ffc:	80 33       	cpi	r24, 0x30	; 48
    1ffe:	39 f4       	brne	.+14     	; 0x200e <vfprintf+0xb0>
    2000:	21 60       	ori	r18, 0x01	; 1
    2002:	26 c0       	rjmp	.+76     	; 0x2050 <vfprintf+0xf2>
    2004:	22 60       	ori	r18, 0x02	; 2
    2006:	24 60       	ori	r18, 0x04	; 4
    2008:	23 c0       	rjmp	.+70     	; 0x2050 <vfprintf+0xf2>
    200a:	28 60       	ori	r18, 0x08	; 8
    200c:	21 c0       	rjmp	.+66     	; 0x2050 <vfprintf+0xf2>
    200e:	27 fd       	sbrc	r18, 7
    2010:	27 c0       	rjmp	.+78     	; 0x2060 <vfprintf+0x102>
    2012:	30 ed       	ldi	r19, 0xD0	; 208
    2014:	38 0f       	add	r19, r24
    2016:	3a 30       	cpi	r19, 0x0A	; 10
    2018:	78 f4       	brcc	.+30     	; 0x2038 <vfprintf+0xda>
    201a:	26 ff       	sbrs	r18, 6
    201c:	06 c0       	rjmp	.+12     	; 0x202a <vfprintf+0xcc>
    201e:	fa e0       	ldi	r31, 0x0A	; 10
    2020:	5f 9e       	mul	r5, r31
    2022:	30 0d       	add	r19, r0
    2024:	11 24       	eor	r1, r1
    2026:	53 2e       	mov	r5, r19
    2028:	13 c0       	rjmp	.+38     	; 0x2050 <vfprintf+0xf2>
    202a:	8a e0       	ldi	r24, 0x0A	; 10
    202c:	38 9e       	mul	r3, r24
    202e:	30 0d       	add	r19, r0
    2030:	11 24       	eor	r1, r1
    2032:	33 2e       	mov	r3, r19
    2034:	20 62       	ori	r18, 0x20	; 32
    2036:	0c c0       	rjmp	.+24     	; 0x2050 <vfprintf+0xf2>
    2038:	8e 32       	cpi	r24, 0x2E	; 46
    203a:	21 f4       	brne	.+8      	; 0x2044 <vfprintf+0xe6>
    203c:	26 fd       	sbrc	r18, 6
    203e:	6b c1       	rjmp	.+726    	; 0x2316 <vfprintf+0x3b8>
    2040:	20 64       	ori	r18, 0x40	; 64
    2042:	06 c0       	rjmp	.+12     	; 0x2050 <vfprintf+0xf2>
    2044:	8c 36       	cpi	r24, 0x6C	; 108
    2046:	11 f4       	brne	.+4      	; 0x204c <vfprintf+0xee>
    2048:	20 68       	ori	r18, 0x80	; 128
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <vfprintf+0xf2>
    204c:	88 36       	cpi	r24, 0x68	; 104
    204e:	41 f4       	brne	.+16     	; 0x2060 <vfprintf+0x102>
    2050:	f6 01       	movw	r30, r12
    2052:	93 fd       	sbrc	r25, 3
    2054:	85 91       	lpm	r24, Z+
    2056:	93 ff       	sbrs	r25, 3
    2058:	81 91       	ld	r24, Z+
    205a:	6f 01       	movw	r12, r30
    205c:	81 11       	cpse	r24, r1
    205e:	c1 cf       	rjmp	.-126    	; 0x1fe2 <vfprintf+0x84>
    2060:	98 2f       	mov	r25, r24
    2062:	9f 7d       	andi	r25, 0xDF	; 223
    2064:	95 54       	subi	r25, 0x45	; 69
    2066:	93 30       	cpi	r25, 0x03	; 3
    2068:	28 f4       	brcc	.+10     	; 0x2074 <vfprintf+0x116>
    206a:	0c 5f       	subi	r16, 0xFC	; 252
    206c:	1f 4f       	sbci	r17, 0xFF	; 255
    206e:	ff e3       	ldi	r31, 0x3F	; 63
    2070:	f9 83       	std	Y+1, r31	; 0x01
    2072:	0d c0       	rjmp	.+26     	; 0x208e <vfprintf+0x130>
    2074:	83 36       	cpi	r24, 0x63	; 99
    2076:	31 f0       	breq	.+12     	; 0x2084 <vfprintf+0x126>
    2078:	83 37       	cpi	r24, 0x73	; 115
    207a:	71 f0       	breq	.+28     	; 0x2098 <vfprintf+0x13a>
    207c:	83 35       	cpi	r24, 0x53	; 83
    207e:	09 f0       	breq	.+2      	; 0x2082 <vfprintf+0x124>
    2080:	5b c0       	rjmp	.+182    	; 0x2138 <vfprintf+0x1da>
    2082:	22 c0       	rjmp	.+68     	; 0x20c8 <vfprintf+0x16a>
    2084:	f8 01       	movw	r30, r16
    2086:	80 81       	ld	r24, Z
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	0e 5f       	subi	r16, 0xFE	; 254
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	44 24       	eor	r4, r4
    2090:	43 94       	inc	r4
    2092:	51 2c       	mov	r5, r1
    2094:	54 01       	movw	r10, r8
    2096:	15 c0       	rjmp	.+42     	; 0x20c2 <vfprintf+0x164>
    2098:	38 01       	movw	r6, r16
    209a:	f2 e0       	ldi	r31, 0x02	; 2
    209c:	6f 0e       	add	r6, r31
    209e:	71 1c       	adc	r7, r1
    20a0:	f8 01       	movw	r30, r16
    20a2:	a0 80       	ld	r10, Z
    20a4:	b1 80       	ldd	r11, Z+1	; 0x01
    20a6:	26 ff       	sbrs	r18, 6
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <vfprintf+0x152>
    20aa:	65 2d       	mov	r22, r5
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <vfprintf+0x156>
    20b0:	6f ef       	ldi	r22, 0xFF	; 255
    20b2:	7f ef       	ldi	r23, 0xFF	; 255
    20b4:	c5 01       	movw	r24, r10
    20b6:	2c 87       	std	Y+12, r18	; 0x0c
    20b8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <strnlen>
    20bc:	2c 01       	movw	r4, r24
    20be:	83 01       	movw	r16, r6
    20c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20c2:	2f 77       	andi	r18, 0x7F	; 127
    20c4:	22 2e       	mov	r2, r18
    20c6:	17 c0       	rjmp	.+46     	; 0x20f6 <vfprintf+0x198>
    20c8:	38 01       	movw	r6, r16
    20ca:	f2 e0       	ldi	r31, 0x02	; 2
    20cc:	6f 0e       	add	r6, r31
    20ce:	71 1c       	adc	r7, r1
    20d0:	f8 01       	movw	r30, r16
    20d2:	a0 80       	ld	r10, Z
    20d4:	b1 80       	ldd	r11, Z+1	; 0x01
    20d6:	26 ff       	sbrs	r18, 6
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <vfprintf+0x182>
    20da:	65 2d       	mov	r22, r5
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <vfprintf+0x186>
    20e0:	6f ef       	ldi	r22, 0xFF	; 255
    20e2:	7f ef       	ldi	r23, 0xFF	; 255
    20e4:	c5 01       	movw	r24, r10
    20e6:	2c 87       	std	Y+12, r18	; 0x0c
    20e8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <strnlen_P>
    20ec:	2c 01       	movw	r4, r24
    20ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    20f0:	20 68       	ori	r18, 0x80	; 128
    20f2:	22 2e       	mov	r2, r18
    20f4:	83 01       	movw	r16, r6
    20f6:	23 fc       	sbrc	r2, 3
    20f8:	1b c0       	rjmp	.+54     	; 0x2130 <vfprintf+0x1d2>
    20fa:	83 2d       	mov	r24, r3
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	48 16       	cp	r4, r24
    2100:	59 06       	cpc	r5, r25
    2102:	b0 f4       	brcc	.+44     	; 0x2130 <vfprintf+0x1d2>
    2104:	b7 01       	movw	r22, r14
    2106:	80 e2       	ldi	r24, 0x20	; 32
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    210e:	3a 94       	dec	r3
    2110:	f4 cf       	rjmp	.-24     	; 0x20fa <vfprintf+0x19c>
    2112:	f5 01       	movw	r30, r10
    2114:	27 fc       	sbrc	r2, 7
    2116:	85 91       	lpm	r24, Z+
    2118:	27 fe       	sbrs	r2, 7
    211a:	81 91       	ld	r24, Z+
    211c:	5f 01       	movw	r10, r30
    211e:	b7 01       	movw	r22, r14
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    2126:	31 10       	cpse	r3, r1
    2128:	3a 94       	dec	r3
    212a:	f1 e0       	ldi	r31, 0x01	; 1
    212c:	4f 1a       	sub	r4, r31
    212e:	51 08       	sbc	r5, r1
    2130:	41 14       	cp	r4, r1
    2132:	51 04       	cpc	r5, r1
    2134:	71 f7       	brne	.-36     	; 0x2112 <vfprintf+0x1b4>
    2136:	e5 c0       	rjmp	.+458    	; 0x2302 <vfprintf+0x3a4>
    2138:	84 36       	cpi	r24, 0x64	; 100
    213a:	11 f0       	breq	.+4      	; 0x2140 <vfprintf+0x1e2>
    213c:	89 36       	cpi	r24, 0x69	; 105
    213e:	39 f5       	brne	.+78     	; 0x218e <vfprintf+0x230>
    2140:	f8 01       	movw	r30, r16
    2142:	27 ff       	sbrs	r18, 7
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <vfprintf+0x1f6>
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	0c 5f       	subi	r16, 0xFC	; 252
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	08 c0       	rjmp	.+16     	; 0x2164 <vfprintf+0x206>
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	88 27       	eor	r24, r24
    215a:	77 fd       	sbrc	r23, 7
    215c:	80 95       	com	r24
    215e:	98 2f       	mov	r25, r24
    2160:	0e 5f       	subi	r16, 0xFE	; 254
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	2f 76       	andi	r18, 0x6F	; 111
    2166:	b2 2e       	mov	r11, r18
    2168:	97 ff       	sbrs	r25, 7
    216a:	09 c0       	rjmp	.+18     	; 0x217e <vfprintf+0x220>
    216c:	90 95       	com	r25
    216e:	80 95       	com	r24
    2170:	70 95       	com	r23
    2172:	61 95       	neg	r22
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	20 68       	ori	r18, 0x80	; 128
    217c:	b2 2e       	mov	r11, r18
    217e:	2a e0       	ldi	r18, 0x0A	; 10
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	a4 01       	movw	r20, r8
    2184:	0e 94 1e 12 	call	0x243c	; 0x243c <__ultoa_invert>
    2188:	a8 2e       	mov	r10, r24
    218a:	a8 18       	sub	r10, r8
    218c:	44 c0       	rjmp	.+136    	; 0x2216 <vfprintf+0x2b8>
    218e:	85 37       	cpi	r24, 0x75	; 117
    2190:	29 f4       	brne	.+10     	; 0x219c <vfprintf+0x23e>
    2192:	2f 7e       	andi	r18, 0xEF	; 239
    2194:	b2 2e       	mov	r11, r18
    2196:	2a e0       	ldi	r18, 0x0A	; 10
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	25 c0       	rjmp	.+74     	; 0x21e6 <vfprintf+0x288>
    219c:	f2 2f       	mov	r31, r18
    219e:	f9 7f       	andi	r31, 0xF9	; 249
    21a0:	bf 2e       	mov	r11, r31
    21a2:	8f 36       	cpi	r24, 0x6F	; 111
    21a4:	c1 f0       	breq	.+48     	; 0x21d6 <vfprintf+0x278>
    21a6:	18 f4       	brcc	.+6      	; 0x21ae <vfprintf+0x250>
    21a8:	88 35       	cpi	r24, 0x58	; 88
    21aa:	79 f0       	breq	.+30     	; 0x21ca <vfprintf+0x26c>
    21ac:	b4 c0       	rjmp	.+360    	; 0x2316 <vfprintf+0x3b8>
    21ae:	80 37       	cpi	r24, 0x70	; 112
    21b0:	19 f0       	breq	.+6      	; 0x21b8 <vfprintf+0x25a>
    21b2:	88 37       	cpi	r24, 0x78	; 120
    21b4:	21 f0       	breq	.+8      	; 0x21be <vfprintf+0x260>
    21b6:	af c0       	rjmp	.+350    	; 0x2316 <vfprintf+0x3b8>
    21b8:	2f 2f       	mov	r18, r31
    21ba:	20 61       	ori	r18, 0x10	; 16
    21bc:	b2 2e       	mov	r11, r18
    21be:	b4 fe       	sbrs	r11, 4
    21c0:	0d c0       	rjmp	.+26     	; 0x21dc <vfprintf+0x27e>
    21c2:	8b 2d       	mov	r24, r11
    21c4:	84 60       	ori	r24, 0x04	; 4
    21c6:	b8 2e       	mov	r11, r24
    21c8:	09 c0       	rjmp	.+18     	; 0x21dc <vfprintf+0x27e>
    21ca:	24 ff       	sbrs	r18, 4
    21cc:	0a c0       	rjmp	.+20     	; 0x21e2 <vfprintf+0x284>
    21ce:	9f 2f       	mov	r25, r31
    21d0:	96 60       	ori	r25, 0x06	; 6
    21d2:	b9 2e       	mov	r11, r25
    21d4:	06 c0       	rjmp	.+12     	; 0x21e2 <vfprintf+0x284>
    21d6:	28 e0       	ldi	r18, 0x08	; 8
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <vfprintf+0x288>
    21dc:	20 e1       	ldi	r18, 0x10	; 16
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <vfprintf+0x288>
    21e2:	20 e1       	ldi	r18, 0x10	; 16
    21e4:	32 e0       	ldi	r19, 0x02	; 2
    21e6:	f8 01       	movw	r30, r16
    21e8:	b7 fe       	sbrs	r11, 7
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <vfprintf+0x29c>
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	0c 5f       	subi	r16, 0xFC	; 252
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	06 c0       	rjmp	.+12     	; 0x2206 <vfprintf+0x2a8>
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 5f       	subi	r16, 0xFE	; 254
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	a4 01       	movw	r20, r8
    2208:	0e 94 1e 12 	call	0x243c	; 0x243c <__ultoa_invert>
    220c:	a8 2e       	mov	r10, r24
    220e:	a8 18       	sub	r10, r8
    2210:	fb 2d       	mov	r31, r11
    2212:	ff 77       	andi	r31, 0x7F	; 127
    2214:	bf 2e       	mov	r11, r31
    2216:	b6 fe       	sbrs	r11, 6
    2218:	0b c0       	rjmp	.+22     	; 0x2230 <vfprintf+0x2d2>
    221a:	2b 2d       	mov	r18, r11
    221c:	2e 7f       	andi	r18, 0xFE	; 254
    221e:	a5 14       	cp	r10, r5
    2220:	50 f4       	brcc	.+20     	; 0x2236 <vfprintf+0x2d8>
    2222:	b4 fe       	sbrs	r11, 4
    2224:	0a c0       	rjmp	.+20     	; 0x223a <vfprintf+0x2dc>
    2226:	b2 fc       	sbrc	r11, 2
    2228:	08 c0       	rjmp	.+16     	; 0x223a <vfprintf+0x2dc>
    222a:	2b 2d       	mov	r18, r11
    222c:	2e 7e       	andi	r18, 0xEE	; 238
    222e:	05 c0       	rjmp	.+10     	; 0x223a <vfprintf+0x2dc>
    2230:	7a 2c       	mov	r7, r10
    2232:	2b 2d       	mov	r18, r11
    2234:	03 c0       	rjmp	.+6      	; 0x223c <vfprintf+0x2de>
    2236:	7a 2c       	mov	r7, r10
    2238:	01 c0       	rjmp	.+2      	; 0x223c <vfprintf+0x2de>
    223a:	75 2c       	mov	r7, r5
    223c:	24 ff       	sbrs	r18, 4
    223e:	0d c0       	rjmp	.+26     	; 0x225a <vfprintf+0x2fc>
    2240:	fe 01       	movw	r30, r28
    2242:	ea 0d       	add	r30, r10
    2244:	f1 1d       	adc	r31, r1
    2246:	80 81       	ld	r24, Z
    2248:	80 33       	cpi	r24, 0x30	; 48
    224a:	11 f4       	brne	.+4      	; 0x2250 <vfprintf+0x2f2>
    224c:	29 7e       	andi	r18, 0xE9	; 233
    224e:	09 c0       	rjmp	.+18     	; 0x2262 <vfprintf+0x304>
    2250:	22 ff       	sbrs	r18, 2
    2252:	06 c0       	rjmp	.+12     	; 0x2260 <vfprintf+0x302>
    2254:	73 94       	inc	r7
    2256:	73 94       	inc	r7
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <vfprintf+0x304>
    225a:	82 2f       	mov	r24, r18
    225c:	86 78       	andi	r24, 0x86	; 134
    225e:	09 f0       	breq	.+2      	; 0x2262 <vfprintf+0x304>
    2260:	73 94       	inc	r7
    2262:	23 fd       	sbrc	r18, 3
    2264:	13 c0       	rjmp	.+38     	; 0x228c <vfprintf+0x32e>
    2266:	20 ff       	sbrs	r18, 0
    2268:	06 c0       	rjmp	.+12     	; 0x2276 <vfprintf+0x318>
    226a:	5a 2c       	mov	r5, r10
    226c:	73 14       	cp	r7, r3
    226e:	18 f4       	brcc	.+6      	; 0x2276 <vfprintf+0x318>
    2270:	53 0c       	add	r5, r3
    2272:	57 18       	sub	r5, r7
    2274:	73 2c       	mov	r7, r3
    2276:	73 14       	cp	r7, r3
    2278:	68 f4       	brcc	.+26     	; 0x2294 <vfprintf+0x336>
    227a:	b7 01       	movw	r22, r14
    227c:	80 e2       	ldi	r24, 0x20	; 32
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	2c 87       	std	Y+12, r18	; 0x0c
    2282:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    2286:	73 94       	inc	r7
    2288:	2c 85       	ldd	r18, Y+12	; 0x0c
    228a:	f5 cf       	rjmp	.-22     	; 0x2276 <vfprintf+0x318>
    228c:	73 14       	cp	r7, r3
    228e:	10 f4       	brcc	.+4      	; 0x2294 <vfprintf+0x336>
    2290:	37 18       	sub	r3, r7
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <vfprintf+0x338>
    2294:	31 2c       	mov	r3, r1
    2296:	24 ff       	sbrs	r18, 4
    2298:	12 c0       	rjmp	.+36     	; 0x22be <vfprintf+0x360>
    229a:	b7 01       	movw	r22, r14
    229c:	80 e3       	ldi	r24, 0x30	; 48
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	2c 87       	std	Y+12, r18	; 0x0c
    22a2:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    22a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    22a8:	22 ff       	sbrs	r18, 2
    22aa:	17 c0       	rjmp	.+46     	; 0x22da <vfprintf+0x37c>
    22ac:	21 ff       	sbrs	r18, 1
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <vfprintf+0x358>
    22b0:	88 e5       	ldi	r24, 0x58	; 88
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <vfprintf+0x35c>
    22b6:	88 e7       	ldi	r24, 0x78	; 120
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	b7 01       	movw	r22, r14
    22bc:	0c c0       	rjmp	.+24     	; 0x22d6 <vfprintf+0x378>
    22be:	82 2f       	mov	r24, r18
    22c0:	86 78       	andi	r24, 0x86	; 134
    22c2:	59 f0       	breq	.+22     	; 0x22da <vfprintf+0x37c>
    22c4:	21 fd       	sbrc	r18, 1
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <vfprintf+0x36e>
    22c8:	80 e2       	ldi	r24, 0x20	; 32
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <vfprintf+0x370>
    22cc:	8b e2       	ldi	r24, 0x2B	; 43
    22ce:	27 fd       	sbrc	r18, 7
    22d0:	8d e2       	ldi	r24, 0x2D	; 45
    22d2:	b7 01       	movw	r22, r14
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    22da:	a5 14       	cp	r10, r5
    22dc:	38 f4       	brcc	.+14     	; 0x22ec <vfprintf+0x38e>
    22de:	b7 01       	movw	r22, r14
    22e0:	80 e3       	ldi	r24, 0x30	; 48
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    22e8:	5a 94       	dec	r5
    22ea:	f7 cf       	rjmp	.-18     	; 0x22da <vfprintf+0x37c>
    22ec:	aa 94       	dec	r10
    22ee:	f4 01       	movw	r30, r8
    22f0:	ea 0d       	add	r30, r10
    22f2:	f1 1d       	adc	r31, r1
    22f4:	80 81       	ld	r24, Z
    22f6:	b7 01       	movw	r22, r14
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    22fe:	a1 10       	cpse	r10, r1
    2300:	f5 cf       	rjmp	.-22     	; 0x22ec <vfprintf+0x38e>
    2302:	33 20       	and	r3, r3
    2304:	09 f4       	brne	.+2      	; 0x2308 <vfprintf+0x3aa>
    2306:	51 ce       	rjmp	.-862    	; 0x1faa <vfprintf+0x4c>
    2308:	b7 01       	movw	r22, r14
    230a:	80 e2       	ldi	r24, 0x20	; 32
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <fputc>
    2312:	3a 94       	dec	r3
    2314:	f6 cf       	rjmp	.-20     	; 0x2302 <vfprintf+0x3a4>
    2316:	f7 01       	movw	r30, r14
    2318:	86 81       	ldd	r24, Z+6	; 0x06
    231a:	97 81       	ldd	r25, Z+7	; 0x07
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <vfprintf+0x3c4>
    231e:	8f ef       	ldi	r24, 0xFF	; 255
    2320:	9f ef       	ldi	r25, 0xFF	; 255
    2322:	2c 96       	adiw	r28, 0x0c	; 12
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	bf 90       	pop	r11
    2340:	af 90       	pop	r10
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	7f 90       	pop	r7
    2348:	6f 90       	pop	r6
    234a:	5f 90       	pop	r5
    234c:	4f 90       	pop	r4
    234e:	3f 90       	pop	r3
    2350:	2f 90       	pop	r2
    2352:	08 95       	ret

00002354 <__eerd_block_m1284p>:
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22

00002358 <__eerd_blraw_m1284p>:
    2358:	fc 01       	movw	r30, r24
    235a:	f9 99       	sbic	0x1f, 1	; 31
    235c:	fe cf       	rjmp	.-4      	; 0x235a <__eerd_blraw_m1284p+0x2>
    235e:	06 c0       	rjmp	.+12     	; 0x236c <__eerd_blraw_m1284p+0x14>
    2360:	f2 bd       	out	0x22, r31	; 34
    2362:	e1 bd       	out	0x21, r30	; 33
    2364:	f8 9a       	sbi	0x1f, 0	; 31
    2366:	31 96       	adiw	r30, 0x01	; 1
    2368:	00 b4       	in	r0, 0x20	; 32
    236a:	0d 92       	st	X+, r0
    236c:	41 50       	subi	r20, 0x01	; 1
    236e:	50 40       	sbci	r21, 0x00	; 0
    2370:	b8 f7       	brcc	.-18     	; 0x2360 <__eerd_blraw_m1284p+0x8>
    2372:	08 95       	ret

00002374 <__eerd_byte_m1284p>:
    2374:	f9 99       	sbic	0x1f, 1	; 31
    2376:	fe cf       	rjmp	.-4      	; 0x2374 <__eerd_byte_m1284p>
    2378:	92 bd       	out	0x22, r25	; 34
    237a:	81 bd       	out	0x21, r24	; 33
    237c:	f8 9a       	sbi	0x1f, 0	; 31
    237e:	99 27       	eor	r25, r25
    2380:	80 b5       	in	r24, 0x20	; 32
    2382:	08 95       	ret

00002384 <__eerd_dword_m1284p>:
    2384:	a6 e1       	ldi	r26, 0x16	; 22
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	44 e0       	ldi	r20, 0x04	; 4
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__eerd_blraw_m1284p>

00002390 <__eewr_byte_m1284p>:
    2390:	26 2f       	mov	r18, r22

00002392 <__eewr_r18_m1284p>:
    2392:	f9 99       	sbic	0x1f, 1	; 31
    2394:	fe cf       	rjmp	.-4      	; 0x2392 <__eewr_r18_m1284p>
    2396:	1f ba       	out	0x1f, r1	; 31
    2398:	92 bd       	out	0x22, r25	; 34
    239a:	81 bd       	out	0x21, r24	; 33
    239c:	20 bd       	out	0x20, r18	; 32
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	fa 9a       	sbi	0x1f, 2	; 31
    23a4:	f9 9a       	sbi	0x1f, 1	; 31
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	08 95       	ret

000023ac <strnlen_P>:
    23ac:	fc 01       	movw	r30, r24
    23ae:	05 90       	lpm	r0, Z+
    23b0:	61 50       	subi	r22, 0x01	; 1
    23b2:	70 40       	sbci	r23, 0x00	; 0
    23b4:	01 10       	cpse	r0, r1
    23b6:	d8 f7       	brcc	.-10     	; 0x23ae <strnlen_P+0x2>
    23b8:	80 95       	com	r24
    23ba:	90 95       	com	r25
    23bc:	8e 0f       	add	r24, r30
    23be:	9f 1f       	adc	r25, r31
    23c0:	08 95       	ret

000023c2 <strnlen>:
    23c2:	fc 01       	movw	r30, r24
    23c4:	61 50       	subi	r22, 0x01	; 1
    23c6:	70 40       	sbci	r23, 0x00	; 0
    23c8:	01 90       	ld	r0, Z+
    23ca:	01 10       	cpse	r0, r1
    23cc:	d8 f7       	brcc	.-10     	; 0x23c4 <strnlen+0x2>
    23ce:	80 95       	com	r24
    23d0:	90 95       	com	r25
    23d2:	8e 0f       	add	r24, r30
    23d4:	9f 1f       	adc	r25, r31
    23d6:	08 95       	ret

000023d8 <fputc>:
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	18 2f       	mov	r17, r24
    23e2:	09 2f       	mov	r16, r25
    23e4:	eb 01       	movw	r28, r22
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	81 fd       	sbrc	r24, 1
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <fputc+0x1a>
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
    23ee:	9f ef       	ldi	r25, 0xFF	; 255
    23f0:	20 c0       	rjmp	.+64     	; 0x2432 <fputc+0x5a>
    23f2:	82 ff       	sbrs	r24, 2
    23f4:	10 c0       	rjmp	.+32     	; 0x2416 <fputc+0x3e>
    23f6:	4e 81       	ldd	r20, Y+6	; 0x06
    23f8:	5f 81       	ldd	r21, Y+7	; 0x07
    23fa:	2c 81       	ldd	r18, Y+4	; 0x04
    23fc:	3d 81       	ldd	r19, Y+5	; 0x05
    23fe:	42 17       	cp	r20, r18
    2400:	53 07       	cpc	r21, r19
    2402:	7c f4       	brge	.+30     	; 0x2422 <fputc+0x4a>
    2404:	e8 81       	ld	r30, Y
    2406:	f9 81       	ldd	r31, Y+1	; 0x01
    2408:	9f 01       	movw	r18, r30
    240a:	2f 5f       	subi	r18, 0xFF	; 255
    240c:	3f 4f       	sbci	r19, 0xFF	; 255
    240e:	39 83       	std	Y+1, r19	; 0x01
    2410:	28 83       	st	Y, r18
    2412:	10 83       	st	Z, r17
    2414:	06 c0       	rjmp	.+12     	; 0x2422 <fputc+0x4a>
    2416:	e8 85       	ldd	r30, Y+8	; 0x08
    2418:	f9 85       	ldd	r31, Y+9	; 0x09
    241a:	81 2f       	mov	r24, r17
    241c:	09 95       	icall
    241e:	89 2b       	or	r24, r25
    2420:	29 f7       	brne	.-54     	; 0x23ec <fputc+0x14>
    2422:	2e 81       	ldd	r18, Y+6	; 0x06
    2424:	3f 81       	ldd	r19, Y+7	; 0x07
    2426:	2f 5f       	subi	r18, 0xFF	; 255
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	3f 83       	std	Y+7, r19	; 0x07
    242c:	2e 83       	std	Y+6, r18	; 0x06
    242e:	81 2f       	mov	r24, r17
    2430:	90 2f       	mov	r25, r16
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	08 95       	ret

0000243c <__ultoa_invert>:
    243c:	fa 01       	movw	r30, r20
    243e:	aa 27       	eor	r26, r26
    2440:	28 30       	cpi	r18, 0x08	; 8
    2442:	51 f1       	breq	.+84     	; 0x2498 <__ultoa_invert+0x5c>
    2444:	20 31       	cpi	r18, 0x10	; 16
    2446:	81 f1       	breq	.+96     	; 0x24a8 <__ultoa_invert+0x6c>
    2448:	e8 94       	clt
    244a:	6f 93       	push	r22
    244c:	6e 7f       	andi	r22, 0xFE	; 254
    244e:	6e 5f       	subi	r22, 0xFE	; 254
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	8f 4f       	sbci	r24, 0xFF	; 255
    2454:	9f 4f       	sbci	r25, 0xFF	; 255
    2456:	af 4f       	sbci	r26, 0xFF	; 255
    2458:	b1 e0       	ldi	r27, 0x01	; 1
    245a:	3e d0       	rcall	.+124    	; 0x24d8 <__ultoa_invert+0x9c>
    245c:	b4 e0       	ldi	r27, 0x04	; 4
    245e:	3c d0       	rcall	.+120    	; 0x24d8 <__ultoa_invert+0x9c>
    2460:	67 0f       	add	r22, r23
    2462:	78 1f       	adc	r23, r24
    2464:	89 1f       	adc	r24, r25
    2466:	9a 1f       	adc	r25, r26
    2468:	a1 1d       	adc	r26, r1
    246a:	68 0f       	add	r22, r24
    246c:	79 1f       	adc	r23, r25
    246e:	8a 1f       	adc	r24, r26
    2470:	91 1d       	adc	r25, r1
    2472:	a1 1d       	adc	r26, r1
    2474:	6a 0f       	add	r22, r26
    2476:	71 1d       	adc	r23, r1
    2478:	81 1d       	adc	r24, r1
    247a:	91 1d       	adc	r25, r1
    247c:	a1 1d       	adc	r26, r1
    247e:	20 d0       	rcall	.+64     	; 0x24c0 <__ultoa_invert+0x84>
    2480:	09 f4       	brne	.+2      	; 0x2484 <__ultoa_invert+0x48>
    2482:	68 94       	set
    2484:	3f 91       	pop	r19
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	26 9f       	mul	r18, r22
    248a:	11 24       	eor	r1, r1
    248c:	30 19       	sub	r19, r0
    248e:	30 5d       	subi	r19, 0xD0	; 208
    2490:	31 93       	st	Z+, r19
    2492:	de f6       	brtc	.-74     	; 0x244a <__ultoa_invert+0xe>
    2494:	cf 01       	movw	r24, r30
    2496:	08 95       	ret
    2498:	46 2f       	mov	r20, r22
    249a:	47 70       	andi	r20, 0x07	; 7
    249c:	40 5d       	subi	r20, 0xD0	; 208
    249e:	41 93       	st	Z+, r20
    24a0:	b3 e0       	ldi	r27, 0x03	; 3
    24a2:	0f d0       	rcall	.+30     	; 0x24c2 <__ultoa_invert+0x86>
    24a4:	c9 f7       	brne	.-14     	; 0x2498 <__ultoa_invert+0x5c>
    24a6:	f6 cf       	rjmp	.-20     	; 0x2494 <__ultoa_invert+0x58>
    24a8:	46 2f       	mov	r20, r22
    24aa:	4f 70       	andi	r20, 0x0F	; 15
    24ac:	40 5d       	subi	r20, 0xD0	; 208
    24ae:	4a 33       	cpi	r20, 0x3A	; 58
    24b0:	18 f0       	brcs	.+6      	; 0x24b8 <__ultoa_invert+0x7c>
    24b2:	49 5d       	subi	r20, 0xD9	; 217
    24b4:	31 fd       	sbrc	r19, 1
    24b6:	40 52       	subi	r20, 0x20	; 32
    24b8:	41 93       	st	Z+, r20
    24ba:	02 d0       	rcall	.+4      	; 0x24c0 <__ultoa_invert+0x84>
    24bc:	a9 f7       	brne	.-22     	; 0x24a8 <__ultoa_invert+0x6c>
    24be:	ea cf       	rjmp	.-44     	; 0x2494 <__ultoa_invert+0x58>
    24c0:	b4 e0       	ldi	r27, 0x04	; 4
    24c2:	a6 95       	lsr	r26
    24c4:	97 95       	ror	r25
    24c6:	87 95       	ror	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	ba 95       	dec	r27
    24ce:	c9 f7       	brne	.-14     	; 0x24c2 <__ultoa_invert+0x86>
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	61 05       	cpc	r22, r1
    24d4:	71 05       	cpc	r23, r1
    24d6:	08 95       	ret
    24d8:	9b 01       	movw	r18, r22
    24da:	ac 01       	movw	r20, r24
    24dc:	0a 2e       	mov	r0, r26
    24de:	06 94       	lsr	r0
    24e0:	57 95       	ror	r21
    24e2:	47 95       	ror	r20
    24e4:	37 95       	ror	r19
    24e6:	27 95       	ror	r18
    24e8:	ba 95       	dec	r27
    24ea:	c9 f7       	brne	.-14     	; 0x24de <__ultoa_invert+0xa2>
    24ec:	62 0f       	add	r22, r18
    24ee:	73 1f       	adc	r23, r19
    24f0:	84 1f       	adc	r24, r20
    24f2:	95 1f       	adc	r25, r21
    24f4:	a0 1d       	adc	r26, r0
    24f6:	08 95       	ret

000024f8 <_exit>:
    24f8:	f8 94       	cli

000024fa <__stop_program>:
    24fa:	ff cf       	rjmp	.-2      	; 0x24fa <__stop_program>
