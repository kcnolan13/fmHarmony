
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000280  00800100  00003766  000037fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800380  00800380  00003a7a  2**0
                  ALLOC
  3 .stab         0000c69c  00000000  00000000  00003a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002d03  00000000  00000000  00010118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012e1b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      30:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_20>
      54:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_28>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	30 04       	cpc	r3, r0
      8e:	3a 04       	cpc	r3, r10
      90:	47 04       	cpc	r4, r7
      92:	56 04       	cpc	r5, r6
      94:	65 04       	cpc	r6, r5
      96:	76 04       	cpc	r7, r6
      98:	82 04       	cpc	r8, r2
      9a:	8e 04       	cpc	r8, r14
      9c:	9a 04       	cpc	r9, r10
      9e:	f3 04       	cpc	r15, r3
      a0:	f6 04       	cpc	r15, r6
      a2:	f9 04       	cpc	r15, r9
      a4:	fc 04       	cpc	r15, r12
      a6:	ff 04       	cpc	r15, r15
      a8:	02 05       	cpc	r16, r2
      aa:	05 05       	cpc	r16, r5
      ac:	08 05       	cpc	r16, r8
      ae:	0b 05       	cpc	r16, r11
      b0:	0e 05       	cpc	r16, r14
      b2:	11 05       	cpc	r17, r1
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 05       	cpc	r19, r15
      e2:	a8 4c       	sbci	r26, 0xC8	; 200
      e4:	cd b2       	in	r12, 0x1d	; 29
      e6:	d4 4e       	sbci	r29, 0xE4	; 228
      e8:	b9 38       	cpi	r27, 0x89	; 137
      ea:	36 a9       	ldd	r19, Z+54	; 0x36
      ec:	02 0c       	add	r0, r2
      ee:	50 b9       	out	0x00, r21	; 0
      f0:	91 86       	std	Z+9, r9	; 0x09
      f2:	88 08       	sbc	r8, r8
      f4:	3c a6       	std	Y+44, r3	; 0x2c
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	2a be       	out	0x3a, r2	; 58
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 08       	sbc	r3, r15
     100:	00 00       	nop
     102:	00 be       	out	0x30, r0	; 48
     104:	92 24       	eor	r9, r2
     106:	49 12       	cpse	r4, r25
     108:	3e ab       	std	Y+54, r19	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	2a be       	out	0x3a, r2	; 58
     10e:	cd cc       	rjmp	.-1638   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     110:	cc 4c       	sbci	r28, 0xCC	; 204
     112:	3e 00       	.word	0x003e	; ????
     114:	00 00       	nop
     116:	80 be       	out	0x30, r8	; 48
     118:	ab aa       	std	Y+51, r10	; 0x33
     11a:	aa aa       	std	Y+50, r10	; 0x32
     11c:	3e 00       	.word	0x003e	; ????
     11e:	00 00       	nop
     120:	00 bf       	out	0x30, r16	; 48
     122:	00 00       	nop
     124:	00 80       	ld	r0, Z
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	08 41       	sbci	r16, 0x18	; 24
     12e:	78 d3       	rcall	.+1776   	; 0x820 <print_gps_data+0x44>
     130:	bb 43       	sbci	r27, 0x3B	; 59
     132:	87 d1       	rcall	.+782    	; 0x442 <database_load+0x76>
     134:	13 3d       	cpi	r17, 0xD3	; 211
     136:	19 0e       	add	r1, r25
     138:	3c c3       	rjmp	.+1656   	; 0x7b2 <print_eeprom_station_contents+0x48>
     13a:	bd 42       	sbci	r27, 0x2D	; 45
     13c:	82 ad       	ldd	r24, Z+58	; 0x3a
     13e:	2b 3e       	cpi	r18, 0xEB	; 235
     140:	68 ec       	ldi	r22, 0xC8	; 200
     142:	82 76       	andi	r24, 0x62	; 98
     144:	be d9       	rcall	.-3204   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     146:	8f e1       	ldi	r24, 0x1F	; 31
     148:	a9 3e       	cpi	r26, 0xE9	; 233
     14a:	4c 80       	ldd	r4, Y+4	; 0x04
     14c:	ef ff       	.word	0xffef	; ????
     14e:	be 01       	movw	r22, r28
     150:	c4 ff       	sbrs	r28, 4
     152:	7f 3f       	cpi	r23, 0xFF	; 255
     154:	00 00       	nop
     156:	00 00       	nop
     158:	00 07       	cpc	r16, r16
     15a:	63 42       	sbci	r22, 0x23	; 35
     15c:	36 b7       	in	r19, 0x36	; 54
     15e:	9b d8       	rcall	.-3786   	; 0xfffff296 <__eeprom_end+0xff7ef296>
     160:	a7 1a       	sub	r10, r23
     162:	39 68       	ori	r19, 0x89	; 137
     164:	56 18       	sub	r5, r6
     166:	ae ba       	out	0x1e, r10	; 30
     168:	ab 55       	subi	r26, 0x5B	; 91
     16a:	8c 1d       	adc	r24, r12
     16c:	3c b7       	in	r19, 0x3c	; 60
     16e:	cc 57       	subi	r28, 0x7C	; 124
     170:	63 bd       	out	0x23, r22	; 35
     172:	6d ed       	ldi	r22, 0xDD	; 221
     174:	fd 75       	andi	r31, 0x5D	; 93
     176:	3e f6       	brtc	.-114    	; 0x106 <__SREG__+0xc7>
     178:	17 72       	andi	r17, 0x27	; 39
     17a:	31 bf       	out	0x31, r19	; 49
     17c:	00 00       	nop
     17e:	00 80       	ld	r0, Z
     180:	3f 4e       	sbci	r19, 0xEF	; 239

00000181 <pstr_nan>:
     181:	4e 41 4e                                            NAN

00000184 <pstr_inity>:
     184:	49 4e 49 54 59                                      INITY

00000189 <pstr_inf>:
     189:	49 4e 46                                            INF

0000018c <pwr_m10>:
     18c:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     19c:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001a4 <pwr_p10>:
     1a4:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1b4:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e4       	ldi	r29, 0x40	; 64
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	f7 e3       	ldi	r31, 0x37	; 55
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a0 38       	cpi	r26, 0x80	; 128
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	14 e0       	ldi	r17, 0x04	; 4
     1e4:	a0 e8       	ldi	r26, 0x80	; 128
     1e6:	b3 e0       	ldi	r27, 0x03	; 3
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	ad 38       	cpi	r26, 0x8D	; 141
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <main>
     1f6:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     1fe:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     202:	8c e0       	ldi	r24, 0x0C	; 12
     204:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
     208:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
     20c:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     210:	e9 ec       	ldi	r30, 0xC9	; 201
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	88 6d       	ori	r24, 0xD8	; 216
     218:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     21a:	e1 ec       	ldi	r30, 0xC1	; 193
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 6d       	ori	r24, 0xD8	; 216
     222:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     224:	e8 ec       	ldi	r30, 0xC8	; 200
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
     22e:	e0 ec       	ldi	r30, 0xC0	; 192
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	82 60       	ori	r24, 0x02	; 2
     236:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     238:	ea ec       	ldi	r30, 0xCA	; 202
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8e 60       	ori	r24, 0x0E	; 14
     240:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     242:	e2 ec       	ldi	r30, 0xC2	; 194
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	86 60       	ori	r24, 0x06	; 6
     24a:	80 83       	st	Z, r24
     24c:	08 95       	ret

0000024e <disable_gps>:

}

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	87 72       	andi	r24, 0x27	; 39
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <__vector_20>:
        rxWritePos = 0;
    }
}

//GPS serial receive interrupt behavior
ISR(USART0_RX_vect) {
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	0b b6       	in	r0, 0x3b	; 59
     266:	0f 92       	push	r0
     268:	2f 93       	push	r18
     26a:	3f 93       	push	r19
     26c:	4f 93       	push	r20
     26e:	5f 93       	push	r21
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
     280:	80 91 d8 03 	lds	r24, 0x03D8
     284:	90 91 d9 03 	lds	r25, 0x03D9
     288:	81 35       	cpi	r24, 0x51	; 81
     28a:	91 05       	cpc	r25, r1
     28c:	74 f0       	brlt	.+28     	; 0x2aa <__vector_20+0x50>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=0; i<80; i++)
            gps_rxBuffer[i]='\0';
     292:	fc 01       	movw	r30, r24
     294:	e8 57       	subi	r30, 0x78	; 120
     296:	fc 4f       	sbci	r31, 0xFC	; 252
     298:	10 82       	st	Z, r1
    int i;

    //prevent buffer overflow
    if (gps_rxCount > 80)
    {
        for (i=0; i<80; i++)
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	80 35       	cpi	r24, 0x50	; 80
     29e:	91 05       	cpc	r25, r1
     2a0:	c1 f7       	brne	.-16     	; 0x292 <__vector_20+0x38>
            gps_rxBuffer[i]='\0';

        gps_rxCount = 0; 
     2a2:	10 92 d9 03 	sts	0x03D9, r1
     2a6:	10 92 d8 03 	sts	0x03D8, r1
    }

    //Read value out of the UART buffer
    gps_rxBuffer[gps_rxCount] = UDR0;
     2aa:	e0 91 d8 03 	lds	r30, 0x03D8
     2ae:	f0 91 d9 03 	lds	r31, 0x03D9
     2b2:	80 91 c6 00 	lds	r24, 0x00C6
     2b6:	e8 57       	subi	r30, 0x78	; 120
     2b8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ba:	80 83       	st	Z, r24

    gps_rxCount ++;
     2bc:	80 91 d8 03 	lds	r24, 0x03D8
     2c0:	90 91 d9 03 	lds	r25, 0x03D9
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 d9 03 	sts	0x03D9, r25
     2ca:	80 93 d8 03 	sts	0x03D8, r24

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
     2ce:	e0 91 d8 03 	lds	r30, 0x03D8
     2d2:	f0 91 d9 03 	lds	r31, 0x03D9
     2d6:	e9 57       	subi	r30, 0x79	; 121
     2d8:	fc 4f       	sbci	r31, 0xFC	; 252
     2da:	80 81       	ld	r24, Z
     2dc:	84 32       	cpi	r24, 0x24	; 36
     2de:	99 f4       	brne	.+38     	; 0x306 <__vector_20+0xac>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
    {
        for (i=1; i<80; i++)
            gps_rxBuffer[i]='\0'; 
     2e4:	fc 01       	movw	r30, r24
     2e6:	e8 57       	subi	r30, 0x78	; 120
     2e8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ea:	10 82       	st	Z, r1
    gps_rxCount ++;

    //start new if receive $
    if (gps_rxBuffer[gps_rxCount-1]=='$')
    {
        for (i=1; i<80; i++)
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	80 35       	cpi	r24, 0x50	; 80
     2f0:	91 05       	cpc	r25, r1
     2f2:	c1 f7       	brne	.-16     	; 0x2e4 <__vector_20+0x8a>
            gps_rxBuffer[i]='\0'; 

        gps_rxBuffer[0] = '$';
     2f4:	84 e2       	ldi	r24, 0x24	; 36
     2f6:	80 93 88 03 	sts	0x0388, r24
        gps_rxCount = 1; 
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 d9 03 	sts	0x03D9, r25
     302:	80 93 d8 03 	sts	0x03D8, r24
    }

    //carriage return ----> parse the string and update the gps_data fields
    if ((gps_rxBuffer[gps_rxCount-1]=='\r')) {
     306:	e0 91 d8 03 	lds	r30, 0x03D8
     30a:	f0 91 d9 03 	lds	r31, 0x03D9
     30e:	e9 57       	subi	r30, 0x79	; 121
     310:	fc 4f       	sbci	r31, 0xFC	; 252
     312:	80 81       	ld	r24, Z
     314:	8d 30       	cpi	r24, 0x0D	; 13
     316:	79 f5       	brne	.+94     	; 0x376 <__vector_20+0x11c>
        if (tag_check(gps_rxBuffer))
     318:	88 e8       	ldi	r24, 0x88	; 136
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <tag_check>
     320:	89 2b       	or	r24, r25
     322:	49 f1       	breq	.+82     	; 0x376 <__vector_20+0x11c>
        {
            //disable gps interrupts
            disable_gps();
     324:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>

            //strip off the rxBuffer carriage return
            gps_rxBuffer[strlen((char *)gps_rxBuffer)-1] = '\0';
     328:	e8 e8       	ldi	r30, 0x88	; 136
     32a:	f3 e0       	ldi	r31, 0x03	; 3
     32c:	01 90       	ld	r0, Z+
     32e:	00 20       	and	r0, r0
     330:	e9 f7       	brne	.-6      	; 0x32c <__vector_20+0xd2>
     332:	32 97       	sbiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1

            //update the application gps_data fields
            parse_nmea(strcat((char *)gps_rxBuffer, ","), gps_data);
     336:	63 e1       	ldi	r22, 0x13	; 19
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	88 e8       	ldi	r24, 0x88	; 136
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <strcat>
     342:	6d e6       	ldi	r22, 0x6D	; 109
     344:	74 e0       	ldi	r23, 0x04	; 4
     346:	0e 94 bd 0b 	call	0x177a	; 0x177a <parse_nmea>

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);
     34a:	60 91 eb 03 	lds	r22, 0x03EB
     34e:	70 91 ec 03 	lds	r23, 0x03EC
     352:	8d e6       	ldi	r24, 0x6D	; 109
     354:	94 e0       	ldi	r25, 0x04	; 4
     356:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <update_user_gps_data>

            //clear the rxBuffer
            for (i=0; i<80; i++)
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
                gps_rxBuffer[i]='\0';
     35e:	fc 01       	movw	r30, r24
     360:	e8 57       	subi	r30, 0x78	; 120
     362:	fc 4f       	sbci	r31, 0xFC	; 252
     364:	10 82       	st	Z, r1

            //use the raw gps_data fields to populate the UserData struct
            update_user_gps_data(gps_data, user);

            //clear the rxBuffer
            for (i=0; i<80; i++)
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	80 35       	cpi	r24, 0x50	; 80
     36a:	91 05       	cpc	r25, r1
     36c:	c1 f7       	brne	.-16     	; 0x35e <__vector_20+0x104>
                gps_rxBuffer[i]='\0';
            gps_rxCount = 0;
     36e:	10 92 d9 03 	sts	0x03D9, r1
     372:	10 92 d8 03 	sts	0x03D8, r1
        }
    }
}
     376:	ff 91       	pop	r31
     378:	ef 91       	pop	r30
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	0f 90       	pop	r0
     390:	0b be       	out	0x3b, r0	; 59
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <enable_gps>:
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
     39c:	e1 ec       	ldi	r30, 0xC1	; 193
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	88 6d       	ori	r24, 0xD8	; 216
     3a4:	80 83       	st	Z, r24
     3a6:	08 95       	ret

000003a8 <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	84 b9       	out	0x04, r24	; 4
    cli();
     3ac:	f8 94       	cli
    //Init usart
    InitUSART();
     3ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     3b2:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     3b4:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	2f e3       	ldi	r18, 0x3F	; 63
     3ba:	8d e0       	ldi	r24, 0x0D	; 13
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	80 40       	sbci	r24, 0x00	; 0
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <prepare_device+0x16>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <prepare_device+0x20>
     3c8:	00 00       	nop
     3ca:	08 95       	ret

000003cc <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <my_eeprom_read_int>

    if (num_stations==255)
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	91 05       	cpc	r25, r1
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <database_load+0x24>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     3e6:	90 93 e4 03 	sts	0x03E4, r25
     3ea:	80 93 e3 03 	sts	0x03E3, r24
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <database_load+0x2c>

    if (num_stations==255)
        num_stations = 0;
     3f0:	10 92 e4 03 	sts	0x03E4, r1
     3f4:	10 92 e3 03 	sts	0x03E3, r1
     3f8:	2f e9       	ldi	r18, 0x9F	; 159
     3fa:	46 e8       	ldi	r20, 0x86	; 134
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	21 50       	subi	r18, 0x01	; 1
     400:	40 40       	sbci	r20, 0x00	; 0
     402:	50 40       	sbci	r21, 0x00	; 0
     404:	e1 f7       	brne	.-8      	; 0x3fe <database_load+0x32>
     406:	00 c0       	rjmp	.+0      	; 0x408 <database_load+0x3c>
     408:	00 00       	nop

    _delay_ms(500);
    lcd_init();
     40a:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("importing ");
     40e:	85 e1       	ldi	r24, 0x15	; 21
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    string_write_int(num_stations,3);
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 91 e3 03 	lds	r24, 0x03E3
     41e:	90 91 e4 03 	lds	r25, 0x03E4
     422:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
    string_write("\nstations...");
     426:	80 e2       	ldi	r24, 0x20	; 32
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     42e:	80 91 e3 03 	lds	r24, 0x03E3
     432:	90 91 e4 03 	lds	r25, 0x03E4
     436:	2c e1       	ldi	r18, 0x1C	; 28
     438:	fc 01       	movw	r30, r24
     43a:	2e 9f       	mul	r18, r30
     43c:	c0 01       	movw	r24, r0
     43e:	2f 9f       	mul	r18, r31
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <malloc>
     448:	90 93 ea 03 	sts	0x03EA, r25
     44c:	80 93 e9 03 	sts	0x03E9, r24

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	80 91 e3 03 	lds	r24, 0x03E3
     45c:	90 91 e4 03 	lds	r25, 0x03E4
     460:	08 17       	cp	r16, r24
     462:	19 07       	cpc	r17, r25
     464:	0c f0       	brlt	.+2      	; 0x468 <database_load+0x9c>
     466:	5c c0       	rjmp	.+184    	; 0x520 <database_load+0x154>
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     46e:	80 91 e9 03 	lds	r24, 0x03E9
     472:	90 91 ea 03 	lds	r25, 0x03EA
     476:	48 e0       	ldi	r20, 0x08	; 8
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	8c 0f       	add	r24, r28
     47c:	9d 1f       	adc	r25, r29
     47e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <my_eeprom_read_string>
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     482:	e0 90 e9 03 	lds	r14, 0x03E9
     486:	f0 90 ea 03 	lds	r15, 0x03EA
     48a:	ec 0e       	add	r14, r28
     48c:	fd 1e       	adc	r15, r29
     48e:	ce 01       	movw	r24, r28
     490:	09 96       	adiw	r24, 0x09	; 9
     492:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <my_eeprom_read_float>
     496:	f7 01       	movw	r30, r14
     498:	60 87       	std	Z+8, r22	; 0x08
     49a:	71 87       	std	Z+9, r23	; 0x09
     49c:	82 87       	std	Z+10, r24	; 0x0a
     49e:	93 87       	std	Z+11, r25	; 0x0b
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     4a0:	e0 90 e9 03 	lds	r14, 0x03E9
     4a4:	f0 90 ea 03 	lds	r15, 0x03EA
     4a8:	ec 0e       	add	r14, r28
     4aa:	fd 1e       	adc	r15, r29
     4ac:	ce 01       	movw	r24, r28
     4ae:	0d 96       	adiw	r24, 0x0d	; 13
     4b0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <my_eeprom_read_float>
     4b4:	f7 01       	movw	r30, r14
     4b6:	64 87       	std	Z+12, r22	; 0x0c
     4b8:	75 87       	std	Z+13, r23	; 0x0d
     4ba:	86 87       	std	Z+14, r24	; 0x0e
     4bc:	97 87       	std	Z+15, r25	; 0x0f
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     4be:	e0 90 e9 03 	lds	r14, 0x03E9
     4c2:	f0 90 ea 03 	lds	r15, 0x03EA
     4c6:	ec 0e       	add	r14, r28
     4c8:	fd 1e       	adc	r15, r29
     4ca:	ce 01       	movw	r24, r28
     4cc:	41 96       	adiw	r24, 0x11	; 17
     4ce:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <my_eeprom_read_float>
     4d2:	f7 01       	movw	r30, r14
     4d4:	60 8b       	std	Z+16, r22	; 0x10
     4d6:	71 8b       	std	Z+17, r23	; 0x11
     4d8:	82 8b       	std	Z+18, r24	; 0x12
     4da:	93 8b       	std	Z+19, r25	; 0x13
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     4dc:	e0 90 e9 03 	lds	r14, 0x03E9
     4e0:	f0 90 ea 03 	lds	r15, 0x03EA
     4e4:	ec 0e       	add	r14, r28
     4e6:	fd 1e       	adc	r15, r29
     4e8:	ce 01       	movw	r24, r28
     4ea:	45 96       	adiw	r24, 0x15	; 21
     4ec:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <my_eeprom_read_float>
     4f0:	f7 01       	movw	r30, r14
     4f2:	64 8b       	std	Z+20, r22	; 0x14
     4f4:	75 8b       	std	Z+21, r23	; 0x15
     4f6:	86 8b       	std	Z+22, r24	; 0x16
     4f8:	97 8b       	std	Z+23, r25	; 0x17
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     4fa:	e0 90 e9 03 	lds	r14, 0x03E9
     4fe:	f0 90 ea 03 	lds	r15, 0x03EA
     502:	ec 0e       	add	r14, r28
     504:	fd 1e       	adc	r15, r29
     506:	ce 01       	movw	r24, r28
     508:	49 96       	adiw	r24, 0x19	; 25
     50a:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <my_eeprom_read_float>
     50e:	f7 01       	movw	r30, r14
     510:	60 8f       	std	Z+24, r22	; 0x18
     512:	71 8f       	std	Z+25, r23	; 0x19
     514:	82 8f       	std	Z+26, r24	; 0x1a
     516:	93 8f       	std	Z+27, r25	; 0x1b

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     518:	0f 5f       	subi	r16, 0xFF	; 255
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	6c 96       	adiw	r28, 0x1c	; 28
     51e:	9c cf       	rjmp	.-200    	; 0x458 <database_load+0x8c>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	08 95       	ret

0000052e <database_free>:

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     52e:	10 92 e4 03 	sts	0x03E4, r1
     532:	10 92 e3 03 	sts	0x03E3, r1

    free(all_stations);
     536:	80 91 e9 03 	lds	r24, 0x03E9
     53a:	90 91 ea 03 	lds	r25, 0x03EA
     53e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <free>
    all_stations = NULL;
     542:	10 92 ea 03 	sts	0x03EA, r1
     546:	10 92 e9 03 	sts	0x03E9, r1
     54a:	08 95       	ret

0000054c <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     54c:	80 91 de 03 	lds	r24, 0x03DE
     550:	90 91 01 01 	lds	r25, 0x0101
     554:	89 13       	cpse	r24, r25
     556:	0c c0       	rjmp	.+24     	; 0x570 <detectSerialStart+0x24>
     558:	20 91 df 03 	lds	r18, 0x03DF
     55c:	28 13       	cpse	r18, r24
     55e:	08 c0       	rjmp	.+16     	; 0x570 <detectSerialStart+0x24>
     560:	30 91 e0 03 	lds	r19, 0x03E0
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	32 17       	cp	r19, r18
     56a:	21 f0       	breq	.+8      	; 0x574 <detectSerialStart+0x28>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret
        return 1;
    else
        return 0;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
}
     574:	08 95       	ret

00000576 <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial database update receive interrupt behavior
ISR(USART1_RX_vect){
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	0b b6       	in	r0, 0x3b	; 59
     582:	0f 92       	push	r0
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     59c:	80 91 df 03 	lds	r24, 0x03DF
     5a0:	80 93 e0 03 	sts	0x03E0, r24
    serial_history[1] = serial_history[0];
     5a4:	80 91 de 03 	lds	r24, 0x03DE
     5a8:	80 93 df 03 	sts	0x03DF, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     5ac:	80 91 ce 00 	lds	r24, 0x00CE
     5b0:	80 93 de 03 	sts	0x03DE, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     5b4:	80 91 86 03 	lds	r24, 0x0386
     5b8:	90 91 87 03 	lds	r25, 0x0387
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	69 f4       	brne	.+26     	; 0x5da <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     5c0:	e0 91 e1 03 	lds	r30, 0x03E1
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 91 de 03 	lds	r24, 0x03DE
     5ca:	e3 51       	subi	r30, 0x13	; 19
     5cc:	fc 4f       	sbci	r31, 0xFC	; 252
     5ce:	80 83       	st	Z, r24
        rxWritePos++;
     5d0:	80 91 e1 03 	lds	r24, 0x03E1
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	80 93 e1 03 	sts	0x03E1, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     5da:	0e 94 a6 02 	call	0x54c	; 0x54c <detectSerialStart>
     5de:	89 2b       	or	r24, r25
     5e0:	31 f0       	breq	.+12     	; 0x5ee <__vector_28+0x78>
        op_mode = MD_UPDATE;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	90 93 87 03 	sts	0x0387, r25
     5ea:	80 93 86 03 	sts	0x0386, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     5ee:	80 91 e1 03 	lds	r24, 0x03E1
     5f2:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     5f4:	10 92 e1 03 	sts	0x03E1, r1
    }
}
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	7f 91       	pop	r23
     606:	6f 91       	pop	r22
     608:	5f 91       	pop	r21
     60a:	4f 91       	pop	r20
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0b be       	out	0x3b, r0	; 59
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     61e:	80 91 de 03 	lds	r24, 0x03DE
     622:	90 91 00 01 	lds	r25, 0x0100
     626:	89 13       	cpse	r24, r25
     628:	0c c0       	rjmp	.+24     	; 0x642 <detectSerialEnd+0x24>
     62a:	20 91 df 03 	lds	r18, 0x03DF
     62e:	28 13       	cpse	r18, r24
     630:	08 c0       	rjmp	.+16     	; 0x642 <detectSerialEnd+0x24>
     632:	30 91 e0 03 	lds	r19, 0x03E0
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	32 17       	cp	r19, r18
     63c:	21 f0       	breq	.+8      	; 0x646 <detectSerialEnd+0x28>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
        return 1;
    else
        return 0;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
}
     646:	08 95       	ret

00000648 <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     648:	e0 91 e2 03 	lds	r30, 0x03E2
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	e3 51       	subi	r30, 0x13	; 19
     650:	fc 4f       	sbci	r31, 0xFC	; 252
     652:	80 81       	ld	r24, Z
     
    rxReadPos++;
     654:	90 91 e2 03 	lds	r25, 0x03E2
     658:	9f 5f       	subi	r25, 0xFF	; 255
     65a:	90 93 e2 03 	sts	0x03E2, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     65e:	90 91 e2 03 	lds	r25, 0x03E2
     662:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     664:	10 92 e2 03 	sts	0x03E2, r1
    }
    
    return ret;
}
     668:	08 95       	ret

0000066a <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     66a:	90 91 e2 03 	lds	r25, 0x03E2
     66e:	80 91 e1 03 	lds	r24, 0x03E1
     672:	98 17       	cp	r25, r24
     674:	39 f0       	breq	.+14     	; 0x684 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     676:	e0 91 e2 03 	lds	r30, 0x03E2
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e3 51       	subi	r30, 0x13	; 19
     67e:	fc 4f       	sbci	r31, 0xFC	; 252
     680:	80 81       	ld	r24, Z
     682:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     684:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     686:	08 95       	ret

00000688 <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     68e:	10 92 87 03 	sts	0x0387, r1
     692:	10 92 86 03 	sts	0x0386, r1
    updating = 0;
     696:	10 92 83 03 	sts	0x0383, r1
     69a:	10 92 82 03 	sts	0x0382, r1
    serial_timer = 0;
     69e:	10 92 da 03 	sts	0x03DA, r1
     6a2:	10 92 db 03 	sts	0x03DB, r1
     6a6:	10 92 dc 03 	sts	0x03DC, r1
     6aa:	10 92 dd 03 	sts	0x03DD, r1

    //import the new database
    lcd_init();
     6ae:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>

    if (flag==FL_SUCCESS)
     6b2:	20 97       	sbiw	r28, 0x00	; 0
     6b4:	19 f4       	brne	.+6      	; 0x6bc <terminate_serial+0x34>
        string_write("reading\ndatabase ...");
     6b6:	8d e2       	ldi	r24, 0x2D	; 45
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     6bc:	82 e4       	ldi	r24, 0x42	; 66
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>

    database_load();
     6c4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <database_load>
     6c8:	2f e3       	ldi	r18, 0x3F	; 63
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <terminate_serial+0x46>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <terminate_serial+0x50>
     6d8:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
     6da:	21 97       	sbiw	r28, 0x01	; 1
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <terminate_serial+0x5e>
        string_write("\nupdate failed\n");
     6de:	85 e5       	ldi	r24, 0x55	; 85
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     6e6:	2f e9       	ldi	r18, 0x9F	; 159
     6e8:	86 e8       	ldi	r24, 0x86	; 134
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <terminate_serial+0x64>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <terminate_serial+0x6e>
     6f6:	00 00       	nop

    _delay_ms(500);
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	8c 01       	movw	r16, r24
     708:	eb 01       	movw	r28, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     70a:	6f 3f       	cpi	r22, 0xFF	; 255
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	78 07       	cpc	r23, r24
     710:	59 f4       	brne	.+22     	; 0x728 <print_eeprom_contents+0x2a>
        end_addr = 1+num_stations*STATION_BLOCKSIZE;
     712:	80 91 e3 03 	lds	r24, 0x03E3
     716:	90 91 e4 03 	lds	r25, 0x03E4
     71a:	2c e1       	ldi	r18, 0x1C	; 28
     71c:	28 9f       	mul	r18, r24
     71e:	e0 01       	movw	r28, r0
     720:	29 9f       	mul	r18, r25
     722:	d0 0d       	add	r29, r0
     724:	11 24       	eor	r1, r1
     726:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
     728:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     72c:	0c 17       	cp	r16, r28
     72e:	1d 07       	cpc	r17, r29
     730:	bc f4       	brge	.+46     	; 0x760 <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     732:	80 91 86 03 	lds	r24, 0x0386
     736:	90 91 87 03 	lds	r25, 0x0387
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	89 f0       	breq	.+34     	; 0x760 <print_eeprom_contents+0x62>
        one_byte = my_eeprom_read_char(i);
     73e:	c8 01       	movw	r24, r16
     740:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <my_eeprom_read_char>
        if (one_byte == '\0')
     744:	81 11       	cpse	r24, r1
     746:	01 c0       	rjmp	.+2      	; 0x74a <print_eeprom_contents+0x4c>
            one_byte = '?';
     748:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     74a:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
     74e:	87 ea       	ldi	r24, 0xA7	; 167
     750:	91 e6       	ldi	r25, 0x61	; 97
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <print_eeprom_contents+0x54>
     756:	00 c0       	rjmp	.+0      	; 0x758 <print_eeprom_contents+0x5a>
     758:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     75a:	0f 5f       	subi	r16, 0xFF	; 255
     75c:	1f 4f       	sbci	r17, 0xFF	; 255
     75e:	e6 cf       	rjmp	.-52     	; 0x72c <print_eeprom_contents+0x2e>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     770:	c0 e0       	ldi	r28, 0x00	; 0
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	1c e1       	ldi	r17, 0x1C	; 28
     776:	20 91 e3 03 	lds	r18, 0x03E3
     77a:	30 91 e4 03 	lds	r19, 0x03E4
     77e:	12 9f       	mul	r17, r18
     780:	c0 01       	movw	r24, r0
     782:	13 9f       	mul	r17, r19
     784:	90 0d       	add	r25, r0
     786:	11 24       	eor	r1, r1
     788:	c8 17       	cp	r28, r24
     78a:	d9 07       	cpc	r29, r25
     78c:	b4 f4       	brge	.+44     	; 0x7ba <print_eeprom_station_contents+0x50>
    {
        if (op_mode==MD_UPDATE) return;
     78e:	80 91 86 03 	lds	r24, 0x0386
     792:	90 91 87 03 	lds	r25, 0x0387
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	81 f0       	breq	.+32     	; 0x7ba <print_eeprom_station_contents+0x50>
        one_byte = my_eeprom_read_char(start+i);
     79a:	21 96       	adiw	r28, 0x01	; 1
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <my_eeprom_read_char>
        if (one_byte == '\0')
     7a2:	81 11       	cpse	r24, r1
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <print_eeprom_station_contents+0x3e>
            one_byte = '?';
     7a6:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     7a8:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
     7ac:	87 ea       	ldi	r24, 0xA7	; 167
     7ae:	91 e6       	ldi	r25, 0x61	; 97
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <print_eeprom_station_contents+0x46>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <print_eeprom_station_contents+0x4c>
     7b6:	00 00       	nop
     7b8:	de cf       	rjmp	.-68     	; 0x776 <print_eeprom_station_contents+0xc>
        _delay_ms(100);
    }
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	08 95       	ret

000007c2 <wait_for_update>:
    }
}

void wait_for_update(void)
{
    lcd_init();
     7c2:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("update required\n...feed me...");
     7c6:	85 e6       	ldi	r24, 0x65	; 101
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     7ce:	80 91 86 03 	lds	r24, 0x0386
     7d2:	90 91 87 03 	lds	r25, 0x0387
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	d1 f7       	brne	.-12     	; 0x7ce <wait_for_update+0xc>
    }
}
     7da:	08 95       	ret

000007dc <print_gps_data>:
    _delay_ms(2000);
}

//print the formatted data stored in the UserData struct to the screen
void print_gps_data(void)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     7e0:	80 91 86 03 	lds	r24, 0x0386
     7e4:	90 91 87 03 	lds	r25, 0x0387
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <print_gps_data+0x12>
     7ec:	c4 c0       	rjmp	.+392    	; 0x976 <print_gps_data+0x19a>
    lcd_init();
     7ee:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("Printing\nGPS Data");
     7f2:	83 e8       	ldi	r24, 0x83	; 131
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     7fa:	2f e3       	ldi	r18, 0x3F	; 63
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	21 50       	subi	r18, 0x01	; 1
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <print_gps_data+0x24>
     808:	00 c0       	rjmp	.+0      	; 0x80a <print_gps_data+0x2e>
     80a:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     80c:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
     810:	c0 e0       	ldi	r28, 0x00	; 0
     812:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     814:	20 97       	sbiw	r28, 0x00	; 0
     816:	69 f0       	breq	.+26     	; 0x832 <print_gps_data+0x56>
            string_write("\n");
     818:	8c e1       	ldi	r24, 0x1C	; 28
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>

        switch (i)
     820:	fe 01       	movw	r30, r28
     822:	32 97       	sbiw	r30, 0x02	; 2
     824:	e9 30       	cpi	r30, 0x09	; 9
     826:	f1 05       	cpc	r31, r1
     828:	78 f4       	brcc	.+30     	; 0x848 <print_gps_data+0x6c>
     82a:	ea 5b       	subi	r30, 0xBA	; 186
     82c:	ff 4f       	sbci	r31, 0xFF	; 255
     82e:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
     832:	85 e9       	ldi	r24, 0x95	; 149
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_numchars(user->msg_type,8);
     83a:	68 e0       	ldi	r22, 0x08	; 8
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 91 eb 03 	lds	r24, 0x03EB
     842:	90 91 ec 03 	lds	r25, 0x03EC
     846:	81 c0       	rjmp	.+258    	; 0x94a <print_gps_data+0x16e>
            break;

            case 1:
                string_write("Time: ");
     848:	8f e9       	ldi	r24, 0x9F	; 159
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_numchars(user->utc_time,8);
     850:	80 91 eb 03 	lds	r24, 0x03EB
     854:	90 91 ec 03 	lds	r25, 0x03EC
     858:	68 e0       	ldi	r22, 0x08	; 8
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	08 96       	adiw	r24, 0x08	; 8
     85e:	75 c0       	rjmp	.+234    	; 0x94a <print_gps_data+0x16e>
            break;

            case 2:
                string_write("NRW: ");
     860:	86 ea       	ldi	r24, 0xA6	; 166
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                char_write(user->nrw);
     868:	e0 91 eb 03 	lds	r30, 0x03EB
     86c:	f0 91 ec 03 	lds	r31, 0x03EC
     870:	80 89       	ldd	r24, Z+16	; 0x10
     872:	5d c0       	rjmp	.+186    	; 0x92e <print_gps_data+0x152>
            break;

            case 3:
                string_write("Lat: ");
     874:	8c ea       	ldi	r24, 0xAC	; 172
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_float(user->lat,4);
     87c:	e0 91 eb 03 	lds	r30, 0x03EB
     880:	f0 91 ec 03 	lds	r31, 0x03EC
     884:	61 89       	ldd	r22, Z+17	; 0x11
     886:	72 89       	ldd	r23, Z+18	; 0x12
     888:	83 89       	ldd	r24, Z+19	; 0x13
     88a:	94 89       	ldd	r25, Z+20	; 0x14
     88c:	0c c0       	rjmp	.+24     	; 0x8a6 <print_gps_data+0xca>
            break;

            case 4:
                string_write("Lon: ");
     88e:	82 eb       	ldi	r24, 0xB2	; 178
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_float(user->lon,4);
     896:	e0 91 eb 03 	lds	r30, 0x03EB
     89a:	f0 91 ec 03 	lds	r31, 0x03EC
     89e:	65 89       	ldd	r22, Z+21	; 0x15
     8a0:	76 89       	ldd	r23, Z+22	; 0x16
     8a2:	87 89       	ldd	r24, Z+23	; 0x17
     8a4:	90 8d       	ldd	r25, Z+24	; 0x18
     8a6:	44 e0       	ldi	r20, 0x04	; 4
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <print_gps_data+0x10a>
            break;

            case 5:
                string_write("Speed: ");
     8ac:	88 eb       	ldi	r24, 0xB8	; 184
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_float(user->speed,1);
     8b4:	e0 91 eb 03 	lds	r30, 0x03EB
     8b8:	f0 91 ec 03 	lds	r31, 0x03EC
     8bc:	61 8d       	ldd	r22, Z+25	; 0x19
     8be:	72 8d       	ldd	r23, Z+26	; 0x1a
     8c0:	83 8d       	ldd	r24, Z+27	; 0x1b
     8c2:	94 8d       	ldd	r25, Z+28	; 0x1c
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <print_gps_data+0x10a>
            break;

            case 6:
                string_write("Course: ");
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_float(user->course,3);
     8d2:	e0 91 eb 03 	lds	r30, 0x03EB
     8d6:	f0 91 ec 03 	lds	r31, 0x03EC
     8da:	65 8d       	ldd	r22, Z+29	; 0x1d
     8dc:	76 8d       	ldd	r23, Z+30	; 0x1e
     8de:	87 8d       	ldd	r24, Z+31	; 0x1f
     8e0:	90 a1       	ldd	r25, Z+32	; 0x20
     8e2:	43 e0       	ldi	r20, 0x03	; 3
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
            break;
     8ea:	31 c0       	rjmp	.+98     	; 0x94e <print_gps_data+0x172>

            case 7:
                string_write("Date: ");
     8ec:	89 ec       	ldi	r24, 0xC9	; 201
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_numchars(user->date,8);
     8f4:	80 91 eb 03 	lds	r24, 0x03EB
     8f8:	90 91 ec 03 	lds	r25, 0x03EC
     8fc:	68 e0       	ldi	r22, 0x08	; 8
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	81 96       	adiw	r24, 0x21	; 33
     902:	23 c0       	rjmp	.+70     	; 0x94a <print_gps_data+0x16e>
            break;

            case 8:
                string_write("MagVar: ");
     904:	80 ed       	ldi	r24, 0xD0	; 208
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_numchars(user->mag_var,8);
     90c:	80 91 eb 03 	lds	r24, 0x03EB
     910:	90 91 ec 03 	lds	r25, 0x03EC
     914:	68 e0       	ldi	r22, 0x08	; 8
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	89 96       	adiw	r24, 0x29	; 41
     91a:	17 c0       	rjmp	.+46     	; 0x94a <print_gps_data+0x16e>
            break;

            case 9:
                string_write("Mode: ");
     91c:	89 ed       	ldi	r24, 0xD9	; 217
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                char_write(user->mode);
     924:	e0 91 eb 03 	lds	r30, 0x03EB
     928:	f0 91 ec 03 	lds	r31, 0x03EC
     92c:	81 a9       	ldd	r24, Z+49	; 0x31
     92e:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
            break;
     932:	0d c0       	rjmp	.+26     	; 0x94e <print_gps_data+0x172>

            case 10:
                string_write("Checksum: ");
     934:	80 ee       	ldi	r24, 0xE0	; 224
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_numchars(user->checksum,3);
     93c:	80 91 eb 03 	lds	r24, 0x03EB
     940:	90 91 ec 03 	lds	r25, 0x03EC
     944:	63 e0       	ldi	r22, 0x03	; 3
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	c2 96       	adiw	r24, 0x32	; 50
     94a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <string_write_numchars>
     94e:	2f e3       	ldi	r18, 0x3F	; 63
     950:	8d e0       	ldi	r24, 0x0D	; 13
     952:	93 e0       	ldi	r25, 0x03	; 3
     954:	21 50       	subi	r18, 0x01	; 1
     956:	80 40       	sbci	r24, 0x00	; 0
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	e1 f7       	brne	.-8      	; 0x954 <print_gps_data+0x178>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <print_gps_data+0x182>
     95e:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
     960:	80 91 86 03 	lds	r24, 0x0386
     964:	90 91 87 03 	lds	r25, 0x0387
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	29 f0       	breq	.+10     	; 0x976 <print_gps_data+0x19a>
    lcd_init();
    string_write("Printing\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
     96c:	21 96       	adiw	r28, 0x01	; 1
     96e:	cb 30       	cpi	r28, 0x0B	; 11
     970:	d1 05       	cpc	r29, r1
     972:	09 f0       	breq	.+2      	; 0x976 <print_gps_data+0x19a>
     974:	4f cf       	rjmp	.-354    	; 0x814 <print_gps_data+0x38>
        }

        _delay_ms(1000);
        if (op_mode==MD_UPDATE) return;
    }
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(void)
{
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     984:	80 91 86 03 	lds	r24, 0x0386
     988:	90 91 87 03 	lds	r25, 0x0387
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	09 f4       	brne	.+2      	; 0x992 <print_raw_gps_data+0x16>
     990:	6a c0       	rjmp	.+212    	; 0xa66 <print_raw_gps_data+0xea>
    lcd_init();
     992:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("Printing Raw\nGPS Data");
     996:	8b ee       	ldi	r24, 0xEB	; 235
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     99e:	2f e3       	ldi	r18, 0x3F	; 63
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	80 40       	sbci	r24, 0x00	; 0
     9a8:	90 40       	sbci	r25, 0x00	; 0
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <print_raw_gps_data+0x28>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <print_raw_gps_data+0x32>
     9ae:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
     9b0:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
     9b4:	0d e6       	ldi	r16, 0x6D	; 109
     9b6:	14 e0       	ldi	r17, 0x04	; 4
    int i=0;
    for (i=0; i<13; i++)
     9b8:	c0 e0       	ldi	r28, 0x00	; 0
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
     9bc:	20 97       	sbiw	r28, 0x00	; 0
     9be:	69 f0       	breq	.+26     	; 0x9da <print_raw_gps_data+0x5e>
            string_write("\n");
     9c0:	8c e1       	ldi	r24, 0x1C	; 28
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>

        switch (i)
     9c8:	fe 01       	movw	r30, r28
     9ca:	32 97       	sbiw	r30, 0x02	; 2
     9cc:	eb 30       	cpi	r30, 0x0B	; 11
     9ce:	f1 05       	cpc	r31, r1
     9d0:	38 f4       	brcc	.+14     	; 0x9e0 <print_raw_gps_data+0x64>
     9d2:	e1 5b       	subi	r30, 0xB1	; 177
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__tablejump2__>
        {
            case 0:
                string_write("Message");
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	23 c0       	rjmp	.+70     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 1:
                string_write("Time");
     9e0:	89 e0       	ldi	r24, 0x09	; 9
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	20 c0       	rjmp	.+64     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 2:
                string_write("NRW");
     9e6:	8e e0       	ldi	r24, 0x0E	; 14
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	1d c0       	rjmp	.+58     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 3:
                string_write("Lat");
     9ec:	82 e1       	ldi	r24, 0x12	; 18
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	1a c0       	rjmp	.+52     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 4:
                string_write("N/S");
     9f2:	86 e1       	ldi	r24, 0x16	; 22
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	17 c0       	rjmp	.+46     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 5:
                string_write("Lon");
     9f8:	8a e1       	ldi	r24, 0x1A	; 26
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	14 c0       	rjmp	.+40     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 6:
                string_write("E/W");
     9fe:	8e e1       	ldi	r24, 0x1E	; 30
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	11 c0       	rjmp	.+34     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 7:
                string_write("Speed");
     a04:	82 e2       	ldi	r24, 0x22	; 34
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 8:
                string_write("Course");
     a0a:	88 e2       	ldi	r24, 0x28	; 40
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0b c0       	rjmp	.+22     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 9:
                string_write("Date");
     a10:	8f e2       	ldi	r24, 0x2F	; 47
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	08 c0       	rjmp	.+16     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 10:
                string_write("MagVar");
     a16:	84 e3       	ldi	r24, 0x34	; 52
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 11:
                string_write("Mode");
     a1c:	8b e3       	ldi	r24, 0x3B	; 59
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <print_raw_gps_data+0xaa>
            break;

            case 12:
                string_write("Checksum");
     a22:	80 e4       	ldi	r24, 0x40	; 64
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
            break;
        }

        string_write(": ");
     a2a:	8f e8       	ldi	r24, 0x8F	; 143
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
        string_write(gps_data[i]);
     a32:	f8 01       	movw	r30, r16
     a34:	81 91       	ld	r24, Z+
     a36:	91 91       	ld	r25, Z+
     a38:	8f 01       	movw	r16, r30
     a3a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     a3e:	ff e9       	ldi	r31, 0x9F	; 159
     a40:	26 e8       	ldi	r18, 0x86	; 134
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	f1 50       	subi	r31, 0x01	; 1
     a46:	20 40       	sbci	r18, 0x00	; 0
     a48:	80 40       	sbci	r24, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <print_raw_gps_data+0xc8>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <print_raw_gps_data+0xd2>
     a4e:	00 00       	nop

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
     a50:	80 91 86 03 	lds	r24, 0x0386
     a54:	90 91 87 03 	lds	r25, 0x0387
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	29 f0       	breq	.+10     	; 0xa66 <print_raw_gps_data+0xea>
    lcd_init();
    string_write("Printing Raw\nGPS Data");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
     a5c:	21 96       	adiw	r28, 0x01	; 1
     a5e:	cd 30       	cpi	r28, 0x0D	; 13
     a60:	d1 05       	cpc	r29, r1
     a62:	09 f0       	breq	.+2      	; 0xa66 <print_raw_gps_data+0xea>
     a64:	ab cf       	rjmp	.-170    	; 0x9bc <print_raw_gps_data+0x40>
        string_write(gps_data[i]);

        _delay_ms(500);
        if (op_mode==MD_UPDATE) return;
    }
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(void)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
    int i;
    lcd_init();
     a74:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("wiping\nmemory...");
     a78:	89 e4       	ldi	r24, 0x49	; 73
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     a80:	c0 e0       	ldi	r28, 0x00	; 0
     a82:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     a84:	80 91 86 03 	lds	r24, 0x0386
     a88:	90 91 87 03 	lds	r25, 0x0387
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	49 f0       	breq	.+18     	; 0xaa2 <wipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     a90:	6f ef       	ldi	r22, 0xFF	; 255
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eewr_byte_m1284p>
void wipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("wiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     a98:	21 96       	adiw	r28, 0x01	; 1
     a9a:	c1 3f       	cpi	r28, 0xF1	; 241
     a9c:	8a e0       	ldi	r24, 0x0A	; 10
     a9e:	d8 07       	cpc	r29, r24
     aa0:	89 f7       	brne	.-30     	; 0xa84 <wipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     ab0:	2c e1       	ldi	r18, 0x1C	; 28
     ab2:	28 9f       	mul	r18, r24
     ab4:	80 01       	movw	r16, r0
     ab6:	29 9f       	mul	r18, r25
     ab8:	10 0d       	add	r17, r0
     aba:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     abc:	c0 e0       	ldi	r28, 0x00	; 0
     abe:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     ac0:	e0 91 e9 03 	lds	r30, 0x03E9
     ac4:	f0 91 ea 03 	lds	r31, 0x03EA
     ac8:	e0 0f       	add	r30, r16
     aca:	f1 1f       	adc	r31, r17
     acc:	ec 0f       	add	r30, r28
     ace:	fd 1f       	adc	r31, r29
     ad0:	80 81       	ld	r24, Z
     ad2:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     ad6:	21 96       	adiw	r28, 0x01	; 1
     ad8:	c8 30       	cpi	r28, 0x08	; 8
     ada:	d1 05       	cpc	r29, r1
     adc:	89 f7       	brne	.-30     	; 0xac0 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <check_database_integrity>:
    _delay_ms(500);
}

//check for database corruption
void check_database_integrity(void)
{
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     af0:	60 91 e3 03 	lds	r22, 0x03E3
     af4:	70 91 e4 03 	lds	r23, 0x03E4
     af8:	80 91 e9 03 	lds	r24, 0x03E9
     afc:	90 91 ea 03 	lds	r25, 0x03EA
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	d0 e0       	ldi	r29, 0x00	; 0
     b04:	c6 17       	cp	r28, r22
     b06:	d7 07       	cpc	r29, r23
     b08:	0c f0       	brlt	.+2      	; 0xb0c <check_database_integrity+0x24>
     b0a:	6c c0       	rjmp	.+216    	; 0xbe4 <check_database_integrity+0xfc>
     b0c:	ac 01       	movw	r20, r24
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if (((call[j] < 33)||(call[j] > 126))&&(call[j]!=' '))
     b12:	8a 01       	movw	r16, r20
     b14:	4f 5f       	subi	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	d8 01       	movw	r26, r16
     b1a:	ec 91       	ld	r30, X
     b1c:	e0 52       	subi	r30, 0x20	; 32
     b1e:	ef 35       	cpi	r30, 0x5F	; 95
     b20:	08 f4       	brcc	.+2      	; 0xb24 <check_database_integrity+0x3c>
     b22:	57 c0       	rjmp	.+174    	; 0xbd2 <check_database_integrity+0xea>
            {
                database_corrupted = 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 81 03 	sts	0x0381, r25
     b2c:	80 93 80 03 	sts	0x0380, r24
                lcd_init();
     b30:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
                string_write("CORRUPTION\nDETECTED");
     b34:	8a e5       	ldi	r24, 0x5A	; 90
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     b3c:	bf e7       	ldi	r27, 0x7F	; 127
     b3e:	ea e1       	ldi	r30, 0x1A	; 26
     b40:	f6 e0       	ldi	r31, 0x06	; 6
     b42:	b1 50       	subi	r27, 0x01	; 1
     b44:	e0 40       	sbci	r30, 0x00	; 0
     b46:	f0 40       	sbci	r31, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <check_database_integrity+0x5a>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <check_database_integrity+0x64>
     b4c:	00 00       	nop
                _delay_ms(2000);
                lcd_init();
     b4e:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
                string_write("tracing\ncorruption...");
     b52:	8e e6       	ldi	r24, 0x6E	; 110
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     b5a:	2f e9       	ldi	r18, 0x9F	; 159
     b5c:	86 e8       	ldi	r24, 0x86	; 134
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	21 50       	subi	r18, 0x01	; 1
     b62:	80 40       	sbci	r24, 0x00	; 0
     b64:	90 40       	sbci	r25, 0x00	; 0
     b66:	e1 f7       	brne	.-8      	; 0xb60 <check_database_integrity+0x78>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <check_database_integrity+0x82>
     b6a:	00 00       	nop
                _delay_ms(500);
                lcd_init();
     b6c:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
                string_write("station #");
     b70:	84 e8       	ldi	r24, 0x84	; 132
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                string_write_int(i+1,3);
     b78:	63 e0       	ldi	r22, 0x03	; 3
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
                string_write(" : ");
     b84:	8e e8       	ldi	r24, 0x8E	; 142
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
                char_write('\'');
     b8c:	87 e2       	ldi	r24, 0x27	; 39
     b8e:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
                char_write(call[j]);
     b92:	d8 01       	movw	r26, r16
     b94:	8c 91       	ld	r24, X
     b96:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
                char_write('\'');
     b9a:	87 e2       	ldi	r24, 0x27	; 39
     b9c:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
                char_write('\n');
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
     ba6:	bf e7       	ldi	r27, 0x7F	; 127
     ba8:	ea e1       	ldi	r30, 0x1A	; 26
     baa:	f6 e0       	ldi	r31, 0x06	; 6
     bac:	b1 50       	subi	r27, 0x01	; 1
     bae:	e0 40       	sbci	r30, 0x00	; 0
     bb0:	f0 40       	sbci	r31, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <check_database_integrity+0xc4>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <check_database_integrity+0xce>
     bb6:	00 00       	nop
                _delay_ms(2000);
                print_callsign(i);
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 54 05 	call	0xaa8	; 0xaa8 <print_callsign>
     bbe:	2f ef       	ldi	r18, 0xFF	; 255
     bc0:	84 e3       	ldi	r24, 0x34	; 52
     bc2:	9c e0       	ldi	r25, 0x0C	; 12
     bc4:	21 50       	subi	r18, 0x01	; 1
     bc6:	80 40       	sbci	r24, 0x00	; 0
     bc8:	90 40       	sbci	r25, 0x00	; 0
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <check_database_integrity+0xdc>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <check_database_integrity+0xe6>
     bce:	00 00       	nop
     bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <check_database_integrity+0xfc>
{
    int i, j;
    for (i=0; i<num_stations; i++)
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<8; j++)
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	28 30       	cpi	r18, 0x08	; 8
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f0       	breq	.+2      	; 0xbde <check_database_integrity+0xf6>
     bdc:	9a cf       	rjmp	.-204    	; 0xb12 <check_database_integrity+0x2a>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     bde:	21 96       	adiw	r28, 0x01	; 1
     be0:	4c 96       	adiw	r24, 0x1c	; 28
     be2:	90 cf       	rjmp	.-224    	; 0xb04 <check_database_integrity+0x1c>
                _delay_ms(4000);
                return;
            }
        }
    }
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     bf6:	80 91 86 03 	lds	r24, 0x0386
     bfa:	90 91 87 03 	lds	r25, 0x0387
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	09 f4       	brne	.+2      	; 0xc04 <print_all_callsigns+0x16>
     c02:	4d c0       	rjmp	.+154    	; 0xc9e <print_all_callsigns+0xb0>
    int i;
    lcd_init();
     c04:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write_int(num_stations,3);
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 91 e3 03 	lds	r24, 0x03E3
     c10:	90 91 e4 03 	lds	r25, 0x03E4
     c14:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
    string_write(" known\nstations");
     c18:	82 e9       	ldi	r24, 0x92	; 146
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     c20:	2f e7       	ldi	r18, 0x7F	; 127
     c22:	8a e1       	ldi	r24, 0x1A	; 26
     c24:	96 e0       	ldi	r25, 0x06	; 6
     c26:	21 50       	subi	r18, 0x01	; 1
     c28:	80 40       	sbci	r24, 0x00	; 0
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <print_all_callsigns+0x38>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <print_all_callsigns+0x42>
     c30:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     c32:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("\n");
     c36:	8c e1       	ldi	r24, 0x1C	; 28
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>

    for (i=0; i<num_stations; i++)
     c3e:	c0 e0       	ldi	r28, 0x00	; 0
     c40:	d0 e0       	ldi	r29, 0x00	; 0
     c42:	80 91 e3 03 	lds	r24, 0x03E3
     c46:	90 91 e4 03 	lds	r25, 0x03E4
     c4a:	c8 17       	cp	r28, r24
     c4c:	d9 07       	cpc	r29, r25
     c4e:	3c f5       	brge	.+78     	; 0xc9e <print_all_callsigns+0xb0>
    {
        if (op_mode==MD_UPDATE) return;
     c50:	80 91 86 03 	lds	r24, 0x0386
     c54:	90 91 87 03 	lds	r25, 0x0387
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	09 f1       	breq	.+66     	; 0xc9e <print_all_callsigns+0xb0>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
     c5c:	8c e1       	ldi	r24, 0x1C	; 28
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     c64:	8e 01       	movw	r16, r28
     c66:	0f 5f       	subi	r16, 0xFF	; 255
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	63 e0       	ldi	r22, 0x03	; 3
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	c8 01       	movw	r24, r16
     c70:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
     c74:	8f e8       	ldi	r24, 0x8F	; 143
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     c7c:	ce 01       	movw	r24, r28
     c7e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <print_callsign>

        if (op_mode==MD_UPDATE) return;
     c82:	80 91 86 03 	lds	r24, 0x0386
     c86:	90 91 87 03 	lds	r25, 0x0387
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	41 f0       	breq	.+16     	; 0xc9e <print_all_callsigns+0xb0>
     c8e:	83 e2       	ldi	r24, 0x23	; 35
     c90:	94 ef       	ldi	r25, 0xF4	; 244
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <print_all_callsigns+0xa4>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <print_all_callsigns+0xaa>
     c98:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    string_write("\n");

    for (i=0; i<num_stations; i++)
     c9a:	e8 01       	movw	r28, r16
     c9c:	d2 cf       	rjmp	.-92     	; 0xc42 <print_all_callsigns+0x54>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     cb2:	63 e0       	ldi	r22, 0x03	; 3
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
     cbc:	8f e8       	ldi	r24, 0x8F	; 143
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     cc4:	c8 01       	movw	r24, r16
     cc6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <print_callsign>
     cca:	83 e2       	ldi	r24, 0x23	; 35
     ccc:	94 ef       	ldi	r25, 0xF4	; 244
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <print_station+0x26>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <print_station+0x2c>
     cd4:	00 00       	nop
     cd6:	8c e1       	ldi	r24, 0x1C	; 28
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE)
     cde:	80 91 86 03 	lds	r24, 0x0386
     ce2:	90 91 87 03 	lds	r25, 0x0387
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	09 f4       	brne	.+2      	; 0xcec <print_station+0x44>
     cea:	b1 c0       	rjmp	.+354    	; 0xe4e <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     cec:	82 ea       	ldi	r24, 0xA2	; 162
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     cf4:	8c e1       	ldi	r24, 0x1C	; 28
     cf6:	80 9f       	mul	r24, r16
     cf8:	e0 01       	movw	r28, r0
     cfa:	81 9f       	mul	r24, r17
     cfc:	d0 0d       	add	r29, r0
     cfe:	11 24       	eor	r1, r1
     d00:	e0 91 e9 03 	lds	r30, 0x03E9
     d04:	f0 91 ea 03 	lds	r31, 0x03EA
     d08:	ec 0f       	add	r30, r28
     d0a:	fd 1f       	adc	r31, r29
     d0c:	60 85       	ldd	r22, Z+8	; 0x08
     d0e:	71 85       	ldd	r23, Z+9	; 0x09
     d10:	82 85       	ldd	r24, Z+10	; 0x0a
     d12:	93 85       	ldd	r25, Z+11	; 0x0b
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
     d1c:	83 e2       	ldi	r24, 0x23	; 35
     d1e:	94 ef       	ldi	r25, 0xF4	; 244
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <print_station+0x78>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <print_station+0x7e>
     d26:	00 00       	nop
     d28:	8c e1       	ldi	r24, 0x1C	; 28
     d2a:	93 e0       	ldi	r25, 0x03	; 3
     d2c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE)
     d30:	80 91 86 03 	lds	r24, 0x0386
     d34:	90 91 87 03 	lds	r25, 0x0387
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <print_station+0x96>
     d3c:	88 c0       	rjmp	.+272    	; 0xe4e <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     d3e:	89 ea       	ldi	r24, 0xA9	; 169
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     d46:	e0 91 e9 03 	lds	r30, 0x03E9
     d4a:	f0 91 ea 03 	lds	r31, 0x03EA
     d4e:	ec 0f       	add	r30, r28
     d50:	fd 1f       	adc	r31, r29
     d52:	64 85       	ldd	r22, Z+12	; 0x0c
     d54:	75 85       	ldd	r23, Z+13	; 0x0d
     d56:	86 85       	ldd	r24, Z+14	; 0x0e
     d58:	97 85       	ldd	r25, Z+15	; 0x0f
     d5a:	44 e0       	ldi	r20, 0x04	; 4
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
     d62:	83 e2       	ldi	r24, 0x23	; 35
     d64:	94 ef       	ldi	r25, 0xF4	; 244
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <print_station+0xbe>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <print_station+0xc4>
     d6c:	00 00       	nop
     d6e:	8c e1       	ldi	r24, 0x1C	; 28
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE)
     d76:	80 91 86 03 	lds	r24, 0x0386
     d7a:	90 91 87 03 	lds	r25, 0x0387
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	09 f4       	brne	.+2      	; 0xd84 <print_station+0xdc>
     d82:	65 c0       	rjmp	.+202    	; 0xe4e <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     d84:	8f ea       	ldi	r24, 0xAF	; 175
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     d8c:	e0 91 e9 03 	lds	r30, 0x03E9
     d90:	f0 91 ea 03 	lds	r31, 0x03EA
     d94:	ec 0f       	add	r30, r28
     d96:	fd 1f       	adc	r31, r29
     d98:	60 89       	ldd	r22, Z+16	; 0x10
     d9a:	71 89       	ldd	r23, Z+17	; 0x11
     d9c:	82 89       	ldd	r24, Z+18	; 0x12
     d9e:	93 89       	ldd	r25, Z+19	; 0x13
     da0:	44 e0       	ldi	r20, 0x04	; 4
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
     da8:	83 e2       	ldi	r24, 0x23	; 35
     daa:	94 ef       	ldi	r25, 0xF4	; 244
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <print_station+0x104>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <print_station+0x10a>
     db2:	00 00       	nop
     db4:	8c e1       	ldi	r24, 0x1C	; 28
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE)
     dbc:	80 91 86 03 	lds	r24, 0x0386
     dc0:	90 91 87 03 	lds	r25, 0x0387
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	09 f4       	brne	.+2      	; 0xdca <print_station+0x122>
     dc8:	42 c0       	rjmp	.+132    	; 0xe4e <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     dca:	85 eb       	ldi	r24, 0xB5	; 181
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     dd2:	e0 91 e9 03 	lds	r30, 0x03E9
     dd6:	f0 91 ea 03 	lds	r31, 0x03EA
     dda:	ec 0f       	add	r30, r28
     ddc:	fd 1f       	adc	r31, r29
     dde:	64 89       	ldd	r22, Z+20	; 0x14
     de0:	75 89       	ldd	r23, Z+21	; 0x15
     de2:	86 89       	ldd	r24, Z+22	; 0x16
     de4:	97 89       	ldd	r25, Z+23	; 0x17
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
     dee:	83 e2       	ldi	r24, 0x23	; 35
     df0:	94 ef       	ldi	r25, 0xF4	; 244
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <print_station+0x14a>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <print_station+0x150>
     df8:	00 00       	nop
     dfa:	8c e1       	ldi	r24, 0x1C	; 28
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE)
     e02:	80 91 86 03 	lds	r24, 0x0386
     e06:	90 91 87 03 	lds	r25, 0x0387
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	01 f1       	breq	.+64     	; 0xe4e <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     e0e:	8b eb       	ldi	r24, 0xBB	; 187
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     e16:	e0 91 e9 03 	lds	r30, 0x03E9
     e1a:	f0 91 ea 03 	lds	r31, 0x03EA
     e1e:	ec 0f       	add	r30, r28
     e20:	fd 1f       	adc	r31, r29
     e22:	60 8d       	ldd	r22, Z+24	; 0x18
     e24:	71 8d       	ldd	r23, Z+25	; 0x19
     e26:	82 8d       	ldd	r24, Z+26	; 0x1a
     e28:	93 8d       	ldd	r25, Z+27	; 0x1b
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
     e32:	83 e2       	ldi	r24, 0x23	; 35
     e34:	94 ef       	ldi	r25, 0xF4	; 244
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <print_station+0x18e>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <print_station+0x194>
     e3c:	00 00       	nop
     e3e:	8c e1       	ldi	r24, 0x1C	; 28
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE)
     e46:	80 91 86 03 	lds	r24, 0x0386
     e4a:	90 91 87 03 	lds	r25, 0x0387
        return;
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	08 95       	ret

00000e58 <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
    if (op_mode==MD_UPDATE) return;
     e5c:	80 91 86 03 	lds	r24, 0x0386
     e60:	90 91 87 03 	lds	r25, 0x0387
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	c9 f1       	breq	.+114    	; 0xeda <print_all_known_stations+0x82>
    int i;
    lcd_init();
     e68:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write_int(num_stations,3);
     e6c:	63 e0       	ldi	r22, 0x03	; 3
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 91 e3 03 	lds	r24, 0x03E3
     e74:	90 91 e4 03 	lds	r25, 0x03E4
     e78:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
    string_write(" known\nstations");
     e7c:	82 e9       	ldi	r24, 0x92	; 146
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     e84:	2f e7       	ldi	r18, 0x7F	; 127
     e86:	8a e1       	ldi	r24, 0x1A	; 26
     e88:	96 e0       	ldi	r25, 0x06	; 6
     e8a:	21 50       	subi	r18, 0x01	; 1
     e8c:	80 40       	sbci	r24, 0x00	; 0
     e8e:	90 40       	sbci	r25, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <print_all_known_stations+0x32>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <print_all_known_stations+0x3c>
     e94:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
     e96:	c0 e0       	ldi	r28, 0x00	; 0
     e98:	d0 e0       	ldi	r29, 0x00	; 0
     e9a:	80 91 e3 03 	lds	r24, 0x03E3
     e9e:	90 91 e4 03 	lds	r25, 0x03E4
     ea2:	c8 17       	cp	r28, r24
     ea4:	d9 07       	cpc	r29, r25
     ea6:	cc f4       	brge	.+50     	; 0xeda <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
     ea8:	80 91 86 03 	lds	r24, 0x0386
     eac:	90 91 87 03 	lds	r25, 0x0387
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	99 f0       	breq	.+38     	; 0xeda <print_all_known_stations+0x82>

        lcd_init();
     eb4:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
        print_station(i);
     eb8:	ce 01       	movw	r24, r28
     eba:	0e 94 54 06 	call	0xca8	; 0xca8 <print_station>

        if (op_mode==MD_UPDATE) return;
     ebe:	80 91 86 03 	lds	r24, 0x0386
     ec2:	90 91 87 03 	lds	r25, 0x0387
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	41 f0       	breq	.+16     	; 0xeda <print_all_known_stations+0x82>
     eca:	8f e4       	ldi	r24, 0x4F	; 79
     ecc:	93 ec       	ldi	r25, 0xC3	; 195
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <print_all_known_stations+0x76>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <print_all_known_stations+0x7c>
     ed4:	00 00       	nop
    string_write_int(num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<num_stations; i++)
     ed6:	21 96       	adiw	r28, 0x01	; 1
     ed8:	e0 cf       	rjmp	.-64     	; 0xe9a <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <show_nearest_station>:
        if (op_mode==MD_UPDATE) return;
    }
}

void show_nearest_station(void)
{
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
    if (op_mode==MD_UPDATE) return;
     ee8:	80 91 86 03 	lds	r24, 0x0386
     eec:	90 91 87 03 	lds	r25, 0x0387
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <show_nearest_station+0x16>
     ef4:	6d c0       	rjmp	.+218    	; 0xfd0 <show_nearest_station+0xf0>
    lcd_init();
     ef6:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("Finding Nearest\nStation...");
     efa:	82 ec       	ldi	r24, 0xC2	; 194
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     f02:	2f e7       	ldi	r18, 0x7F	; 127
     f04:	8a e1       	ldi	r24, 0x1A	; 26
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	21 50       	subi	r18, 0x01	; 1
     f0a:	80 40       	sbci	r24, 0x00	; 0
     f0c:	90 40       	sbci	r25, 0x00	; 0
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <show_nearest_station+0x28>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <show_nearest_station+0x32>
     f12:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     f14:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    nearest_station = get_nearest_station(all_stations, num_stations, user->lat, user->lon);
     f18:	e0 91 eb 03 	lds	r30, 0x03EB
     f1c:	f0 91 ec 03 	lds	r31, 0x03EC
     f20:	e5 88       	ldd	r14, Z+21	; 0x15
     f22:	f6 88       	ldd	r15, Z+22	; 0x16
     f24:	07 89       	ldd	r16, Z+23	; 0x17
     f26:	10 8d       	ldd	r17, Z+24	; 0x18
     f28:	21 89       	ldd	r18, Z+17	; 0x11
     f2a:	32 89       	ldd	r19, Z+18	; 0x12
     f2c:	43 89       	ldd	r20, Z+19	; 0x13
     f2e:	54 89       	ldd	r21, Z+20	; 0x14
     f30:	60 91 e3 03 	lds	r22, 0x03E3
     f34:	70 91 e4 03 	lds	r23, 0x03E4
     f38:	80 91 e9 03 	lds	r24, 0x03E9
     f3c:	90 91 ea 03 	lds	r25, 0x03EA
     f40:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <get_nearest_station>
     f44:	90 93 03 01 	sts	0x0103, r25
     f48:	80 93 02 01 	sts	0x0102, r24
    print_callsign(nearest_station); string_write("\n");
     f4c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <print_callsign>
     f50:	8c e1       	ldi	r24, 0x1C	; 28
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    string_write_float(my_distance_to_station(user, all_stations, nearest_station),1); string_write(" km");
     f58:	40 91 02 01 	lds	r20, 0x0102
     f5c:	50 91 03 01 	lds	r21, 0x0103
     f60:	60 91 e9 03 	lds	r22, 0x03E9
     f64:	70 91 ea 03 	lds	r23, 0x03EA
     f68:	80 91 eb 03 	lds	r24, 0x03EB
     f6c:	90 91 ec 03 	lds	r25, 0x03EC
     f70:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <my_distance_to_station>
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
     f7c:	8d ed       	ldi	r24, 0xDD	; 221
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    if (op_mode==MD_UPDATE) return;
     f84:	80 91 86 03 	lds	r24, 0x0386
     f88:	90 91 87 03 	lds	r25, 0x0387
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	01 f1       	breq	.+64     	; 0xfd0 <show_nearest_station+0xf0>
     f90:	2f ef       	ldi	r18, 0xFF	; 255
     f92:	84 e3       	ldi	r24, 0x34	; 52
     f94:	9c e0       	ldi	r25, 0x0C	; 12
     f96:	21 50       	subi	r18, 0x01	; 1
     f98:	80 40       	sbci	r24, 0x00	; 0
     f9a:	90 40       	sbci	r25, 0x00	; 0
     f9c:	e1 f7       	brne	.-8      	; 0xf96 <show_nearest_station+0xb6>
     f9e:	00 c0       	rjmp	.+0      	; 0xfa0 <show_nearest_station+0xc0>
     fa0:	00 00       	nop
    _delay_ms(4000);

    if (op_mode==MD_UPDATE) return;
     fa2:	80 91 86 03 	lds	r24, 0x0386
     fa6:	90 91 87 03 	lds	r25, 0x0387
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	89 f0       	breq	.+34     	; 0xfd0 <show_nearest_station+0xf0>
    lcd_init();    
     fae:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    print_station(nearest_station);
     fb2:	80 91 02 01 	lds	r24, 0x0102
     fb6:	90 91 03 01 	lds	r25, 0x0103
     fba:	0e 94 54 06 	call	0xca8	; 0xca8 <print_station>
     fbe:	2f e7       	ldi	r18, 0x7F	; 127
     fc0:	8a e1       	ldi	r24, 0x1A	; 26
     fc2:	96 e0       	ldi	r25, 0x06	; 6
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	80 40       	sbci	r24, 0x00	; 0
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <show_nearest_station+0xe4>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <show_nearest_station+0xee>
     fce:	00 00       	nop
    _delay_ms(2000);
}
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret

00000fda <test_earth_distance>:
        char_write(all_stations[station_index].callsign[i]);
    }
}

void test_earth_distance(void)
{
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
    lcd_init();
     fea:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("Calculating\nEarth Distances");
     fee:	81 ee       	ldi	r24, 0xE1	; 225
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
     ff6:	2f e7       	ldi	r18, 0x7F	; 127
     ff8:	8a e1       	ldi	r24, 0x1A	; 26
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	80 40       	sbci	r24, 0x00	; 0
    1000:	90 40       	sbci	r25, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <test_earth_distance+0x22>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <test_earth_distance+0x2c>
    1006:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    1008:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("Denver -> NYC:\n");
    100c:	8d ef       	ldi	r24, 0xFD	; 253
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    1014:	a1 2c       	mov	r10, r1
    1016:	b1 2c       	mov	r11, r1
    1018:	80 ed       	ldi	r24, 0xD0	; 208
    101a:	c8 2e       	mov	r12, r24
    101c:	82 ec       	ldi	r24, 0xC2	; 194
    101e:	d8 2e       	mov	r13, r24
    1020:	e1 2c       	mov	r14, r1
    1022:	f1 2c       	mov	r15, r1
    1024:	0c e1       	ldi	r16, 0x1C	; 28
    1026:	12 e4       	ldi	r17, 0x42	; 66
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	44 e9       	ldi	r20, 0x94	; 148
    102e:	52 ec       	ldi	r21, 0xC2	; 194
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	92 e4       	ldi	r25, 0x42	; 66
    1038:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
    1044:	8d ed       	ldi	r24, 0xDD	; 221
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    104c:	2f e1       	ldi	r18, 0x1F	; 31
    104e:	81 ea       	ldi	r24, 0xA1	; 161
    1050:	97 e0       	ldi	r25, 0x07	; 7
    1052:	21 50       	subi	r18, 0x01	; 1
    1054:	80 40       	sbci	r24, 0x00	; 0
    1056:	90 40       	sbci	r25, 0x00	; 0
    1058:	e1 f7       	brne	.-8      	; 0x1052 <test_earth_distance+0x78>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <test_earth_distance+0x82>
    105c:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    105e:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("North KC -> KC:\n");
    1062:	8d e0       	ldi	r24, 0x0D	; 13
    1064:	93 e0       	ldi	r25, 0x03	; 3
    1066:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    106a:	25 e3       	ldi	r18, 0x35	; 53
    106c:	a2 2e       	mov	r10, r18
    106e:	2e e1       	ldi	r18, 0x1E	; 30
    1070:	b2 2e       	mov	r11, r18
    1072:	2d eb       	ldi	r18, 0xBD	; 189
    1074:	c2 2e       	mov	r12, r18
    1076:	22 ec       	ldi	r18, 0xC2	; 194
    1078:	d2 2e       	mov	r13, r18
    107a:	12 e3       	ldi	r17, 0x32	; 50
    107c:	e1 2e       	mov	r14, r17
    107e:	15 e5       	ldi	r17, 0x55	; 85
    1080:	f1 2e       	mov	r15, r17
    1082:	0c e1       	ldi	r16, 0x1C	; 28
    1084:	12 e4       	ldi	r17, 0x42	; 66
    1086:	22 e4       	ldi	r18, 0x42	; 66
    1088:	30 e2       	ldi	r19, 0x20	; 32
    108a:	4d eb       	ldi	r20, 0xBD	; 189
    108c:	52 ec       	ldi	r21, 0xC2	; 194
    108e:	65 e2       	ldi	r22, 0x25	; 37
    1090:	76 e8       	ldi	r23, 0x86	; 134
    1092:	8c e1       	ldi	r24, 0x1C	; 28
    1094:	92 e4       	ldi	r25, 0x42	; 66
    1096:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	0e 94 be 0a 	call	0x157c	; 0x157c <string_write_float>
    10a2:	8d ed       	ldi	r24, 0xDD	; 221
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    10aa:	2f e1       	ldi	r18, 0x1F	; 31
    10ac:	81 ea       	ldi	r24, 0xA1	; 161
    10ae:	97 e0       	ldi	r25, 0x07	; 7
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	80 40       	sbci	r24, 0x00	; 0
    10b4:	90 40       	sbci	r25, 0x00	; 0
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <test_earth_distance+0xd6>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <test_earth_distance+0xe0>
    10ba:	00 00       	nop
    _delay_ms(2500);

    //just for reference, UMaine coords are: 44.900 -68.667
}
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	08 95       	ret

000010ce <wait_for_gps_lock>:

void wait_for_gps_lock(void)
{
    lcd_init();
    10ce:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    string_write("Waiting For\nGPS Lock...");
    10d2:	8e e1       	ldi	r24, 0x1E	; 30
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    
    while (!gps_locked(user))
    10da:	80 91 eb 03 	lds	r24, 0x03EB
    10de:	90 91 ec 03 	lds	r25, 0x03EC
    10e2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <gps_locked>
    10e6:	89 2b       	or	r24, r25
    10e8:	51 f4       	brne	.+20     	; 0x10fe <wait_for_gps_lock+0x30>
    10ea:	2f e9       	ldi	r18, 0x9F	; 159
    10ec:	86 e8       	ldi	r24, 0x86	; 134
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	21 50       	subi	r18, 0x01	; 1
    10f2:	80 40       	sbci	r24, 0x00	; 0
    10f4:	90 40       	sbci	r25, 0x00	; 0
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <wait_for_gps_lock+0x22>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <wait_for_gps_lock+0x2c>
    10fa:	00 00       	nop
    10fc:	ee cf       	rjmp	.-36     	; 0x10da <wait_for_gps_lock+0xc>
    {
        _delay_ms(500);
    }
    10fe:	08 95       	ret

00001100 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
    1100:	12 9a       	sbi	0x02, 2	; 2
    1102:	81 ee       	ldi	r24, 0xE1	; 225
    1104:	94 e0       	ldi	r25, 0x04	; 4
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <datarw+0x6>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <datarw+0xc>
    110c:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
    110e:	12 98       	cbi	0x02, 2	; 2
    1110:	08 95       	ret

00001112 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
    1112:	10 92 e6 03 	sts	0x03E6, r1
    1116:	10 92 e5 03 	sts	0x03E5, r1
    line_num = 1;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 05 01 	sts	0x0105, r25
    1122:	80 93 04 01 	sts	0x0104, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
    1126:	81 b1       	in	r24, 0x01	; 1
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	81 b9       	out	0x01, r24	; 1
    112c:	87 e8       	ldi	r24, 0x87	; 135
    112e:	93 e1       	ldi	r25, 0x13	; 19
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <lcd_init+0x1e>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <lcd_init+0x24>
    1136:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
    1138:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
    113a:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
    113c:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
    113e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1140:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1142:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    1144:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    1146:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    114a:	81 ee       	ldi	r24, 0xE1	; 225
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <lcd_init+0x3c>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <lcd_init+0x42>
    1154:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
    1156:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    115a:	89 ef       	ldi	r24, 0xF9	; 249
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <lcd_init+0x4c>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <lcd_init+0x52>
    1164:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
    1166:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    116a:	89 ef       	ldi	r24, 0xF9	; 249
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <lcd_init+0x5c>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <lcd_init+0x62>
    1174:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
    1176:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1178:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    117a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    117c:	13 98       	cbi	0x02, 3	; 2
    datarw();
    117e:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    1182:	89 ef       	ldi	r24, 0xF9	; 249
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <lcd_init+0x74>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <lcd_init+0x7a>
    118c:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
    118e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1190:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    1192:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1194:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1196:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    119a:	89 ef       	ldi	r24, 0xF9	; 249
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <lcd_init+0x8c>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <lcd_init+0x92>
    11a4:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
    11a6:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11a8:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    11aa:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11ac:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11ae:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    11b2:	89 ef       	ldi	r24, 0xF9	; 249
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <lcd_init+0xa4>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <lcd_init+0xaa>
    11bc:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
    11be:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11c0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    11c2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11c4:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11c6:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    11ca:	89 ef       	ldi	r24, 0xF9	; 249
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <lcd_init+0xbc>
    11d2:	00 c0       	rjmp	.+0      	; 0x11d4 <lcd_init+0xc2>
    11d4:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    11d6:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
    11d8:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
    11da:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11dc:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11de:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    11e2:	89 ef       	ldi	r24, 0xF9	; 249
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <lcd_init+0xd4>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <lcd_init+0xda>
    11ec:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
    11ee:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    11f0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    11f2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    11f4:	13 98       	cbi	0x02, 3	; 2
    datarw();
    11f6:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    11fa:	89 ef       	ldi	r24, 0xF9	; 249
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <lcd_init+0xec>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <lcd_init+0xf2>
    1204:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
    1206:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1208:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    120a:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    120c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    120e:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    1212:	89 ef       	ldi	r24, 0xF9	; 249
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <lcd_init+0x104>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <lcd_init+0x10a>
    121c:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
    121e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1220:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1222:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1224:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1226:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    122a:	89 ef       	ldi	r24, 0xF9	; 249
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <lcd_init+0x11c>
    1232:	00 c0       	rjmp	.+0      	; 0x1234 <lcd_init+0x122>
    1234:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
    1236:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    1238:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    123a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
    123c:	13 98       	cbi	0x02, 3	; 2
    datarw();
    123e:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    1242:	89 ef       	ldi	r24, 0xF9	; 249
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <lcd_init+0x134>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <lcd_init+0x13a>
    124c:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
    124e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
    1250:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
    1252:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
    1254:	13 98       	cbi	0x02, 3	; 2
    datarw();
    1256:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    125a:	89 ef       	ldi	r24, 0xF9	; 249
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <lcd_init+0x14c>
    1262:	00 c0       	rjmp	.+0      	; 0x1264 <lcd_init+0x152>
    1264:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
    1266:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
    1268:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
    126a:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
    126c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
    126e:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    1272:	89 ef       	ldi	r24, 0xF9	; 249
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <lcd_init+0x164>
    127a:	00 c0       	rjmp	.+0      	; 0x127c <lcd_init+0x16a>
    127c:	00 00       	nop
    _delay_ms(1);

	return 0;
}
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret

00001284 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	11 f4       	brne	.+4      	; 0x128c <letterwrite+0x8>
    1288:	16 9a       	sbi	0x02, 6	; 2
    128a:	01 c0       	rjmp	.+2      	; 0x128e <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
    128c:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
    128e:	61 30       	cpi	r22, 0x01	; 1
    1290:	71 05       	cpc	r23, r1
    1292:	11 f4       	brne	.+4      	; 0x1298 <letterwrite+0x14>
    1294:	15 9a       	sbi	0x02, 5	; 2
    1296:	01 c0       	rjmp	.+2      	; 0x129a <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
    1298:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
    129a:	41 30       	cpi	r20, 0x01	; 1
    129c:	51 05       	cpc	r21, r1
    129e:	11 f4       	brne	.+4      	; 0x12a4 <letterwrite+0x20>
    12a0:	14 9a       	sbi	0x02, 4	; 2
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
    12a4:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
    12a6:	21 30       	cpi	r18, 0x01	; 1
    12a8:	31 05       	cpc	r19, r1
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <letterwrite+0x2c>
    12ac:	13 9a       	sbi	0x02, 3	; 2
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
    12b0:	13 98       	cbi	0x02, 3	; 2
   	datarw();
    12b2:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    12b6:	89 ef       	ldi	r24, 0xF9	; 249
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <letterwrite+0x36>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <letterwrite+0x3c>
    12c0:	00 00       	nop
    12c2:	08 95       	ret

000012c4 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
    12ca:	81 b1       	in	r24, 0x01	; 1
    12cc:	87 78       	andi	r24, 0x87	; 135
    12ce:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
    12d0:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
    12d2:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    12d4:	12 9a       	sbi	0x02, 2	; 2
    12d6:	81 ee       	ldi	r24, 0xE1	; 225
    12d8:	94 e0       	ldi	r25, 0x04	; 4
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <instruction_read+0x16>
    12de:	00 c0       	rjmp	.+0      	; 0x12e0 <instruction_read+0x1c>
    12e0:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    12e2:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    12e4:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
    12e6:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
    12e8:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
    12ea:	12 98       	cbi	0x02, 2	; 2
    12ec:	e9 ef       	ldi	r30, 0xF9	; 249
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	31 97       	sbiw	r30, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <instruction_read+0x2c>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <instruction_read+0x32>
    12f6:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
    12f8:	12 9a       	sbi	0x02, 2	; 2
    12fa:	e1 ee       	ldi	r30, 0xE1	; 225
    12fc:	f4 e0       	ldi	r31, 0x04	; 4
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <instruction_read+0x3a>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <instruction_read+0x40>
    1304:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    1306:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
    1308:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
    130a:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
    130c:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    130e:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	26 e0       	ldi	r18, 0x06	; 6
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	2a 95       	dec	r18
    131a:	e1 f7       	brne	.-8      	; 0x1314 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
    131c:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
    131e:	d0 e0       	ldi	r29, 0x00	; 0
    1320:	35 e0       	ldi	r19, 0x05	; 5
    1322:	cc 0f       	add	r28, r28
    1324:	dd 1f       	adc	r29, r29
    1326:	3a 95       	dec	r19
    1328:	e1 f7       	brne	.-8      	; 0x1322 <instruction_read+0x5e>
    132a:	8c 2b       	or	r24, r28
    132c:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
    132e:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
    1330:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    1332:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	54 e0       	ldi	r21, 0x04	; 4
    1338:	aa 0f       	add	r26, r26
    133a:	bb 1f       	adc	r27, r27
    133c:	5a 95       	dec	r21
    133e:	e1 f7       	brne	.-8      	; 0x1338 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    1340:	8a 2b       	or	r24, r26
    1342:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    1344:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	73 e0       	ldi	r23, 0x03	; 3
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	7a 95       	dec	r23
    1350:	e1 f7       	brne	.-8      	; 0x134a <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
    1352:	8e 2b       	or	r24, r30
    1354:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    1356:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
    1362:	86 2b       	or	r24, r22
    1364:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
    1366:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
    1368:	51 b1       	in	r21, 0x01	; 1
    136a:	58 67       	ori	r21, 0x78	; 120
    136c:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    136e:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1370:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    1372:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	44 0f       	add	r20, r20
    1378:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
    137a:	84 2b       	or	r24, r20
    137c:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    137e:	16 fb       	bst	r17, 6
    1380:	22 27       	eor	r18, r18
    1382:	20 f9       	bld	r18, 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
    1386:	36 95       	lsr	r19
    1388:	32 2f       	mov	r19, r18
    138a:	22 27       	eor	r18, r18
    138c:	37 95       	ror	r19
    138e:	27 95       	ror	r18
}
    1390:	82 2b       	or	r24, r18
    1392:	93 2b       	or	r25, r19
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	08 95       	ret

0000139c <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
    139c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <instruction_read>
    13a0:	8f 77       	andi	r24, 0x7F	; 127
    13a2:	99 27       	eor	r25, r25
    return address+1;
}
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	08 95       	ret

000013a8 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
    13a8:	89 2b       	or	r24, r25
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <write_db74+0x8>
    13ac:	16 98       	cbi	0x02, 6	; 2
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <write_db74+0xa>
    else PORTA |= _BV(DB7);
    13b0:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
    13b2:	67 2b       	or	r22, r23
    13b4:	11 f4       	brne	.+4      	; 0x13ba <write_db74+0x12>
    13b6:	15 98       	cbi	0x02, 5	; 2
    13b8:	01 c0       	rjmp	.+2      	; 0x13bc <write_db74+0x14>
    else PORTA |= _BV(DB6);
    13ba:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
    13bc:	45 2b       	or	r20, r21
    13be:	11 f4       	brne	.+4      	; 0x13c4 <write_db74+0x1c>
    13c0:	14 98       	cbi	0x02, 4	; 2
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
    13c4:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
    13c6:	23 2b       	or	r18, r19
    13c8:	11 f4       	brne	.+4      	; 0x13ce <write_db74+0x26>
    13ca:	13 98       	cbi	0x02, 3	; 2
    13cc:	08 95       	ret
    else PORTA |= _BV(DB4);
    13ce:	13 9a       	sbi	0x02, 3	; 2
    13d0:	08 95       	ret

000013d2 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
    13d8:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    13da:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    13dc:	28 2f       	mov	r18, r24
    13de:	22 95       	swap	r18
    13e0:	21 70       	andi	r18, 0x01	; 1
    13e2:	85 fb       	bst	r24, 5
    13e4:	44 27       	eor	r20, r20
    13e6:	40 f9       	bld	r20, 0
    13e8:	86 fb       	bst	r24, 6
    13ea:	66 27       	eor	r22, r22
    13ec:	60 f9       	bld	r22, 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <write_db74>
    datarw();
    13fc:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    1400:	9e 01       	movw	r18, r28
    1402:	21 70       	andi	r18, 0x01	; 1
    1404:	33 27       	eor	r19, r19
    1406:	4c 2f       	mov	r20, r28
    1408:	46 95       	lsr	r20
    140a:	41 70       	andi	r20, 0x01	; 1
    140c:	c2 fb       	bst	r28, 2
    140e:	66 27       	eor	r22, r22
    1410:	60 f9       	bld	r22, 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	c3 fb       	bst	r28, 3
    1418:	88 27       	eor	r24, r24
    141a:	80 f9       	bld	r24, 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <write_db74>
    datarw();
}
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
    1426:	0c 94 80 08 	jmp	0x1100	; 0x1100 <datarw>

0000142a <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
    142a:	cf 93       	push	r28
    142c:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
    142e:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
    1430:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    1432:	84 fb       	bst	r24, 4
    1434:	22 27       	eor	r18, r18
    1436:	20 f9       	bld	r18, 0
    1438:	85 fb       	bst	r24, 5
    143a:	44 27       	eor	r20, r20
    143c:	40 f9       	bld	r20, 0
    143e:	86 fb       	bst	r24, 6
    1440:	66 27       	eor	r22, r22
    1442:	60 f9       	bld	r22, 0
    1444:	88 1f       	adc	r24, r24
    1446:	88 27       	eor	r24, r24
    1448:	88 1f       	adc	r24, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <write_db74>
    datarw();
    1456:	0e 94 80 08 	call	0x1100	; 0x1100 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    145a:	2c 2f       	mov	r18, r28
    145c:	21 70       	andi	r18, 0x01	; 1
    145e:	c1 fb       	bst	r28, 1
    1460:	44 27       	eor	r20, r20
    1462:	40 f9       	bld	r20, 0
    1464:	c2 fb       	bst	r28, 2
    1466:	66 27       	eor	r22, r22
    1468:	60 f9       	bld	r22, 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	c3 fb       	bst	r28, 3
    1472:	88 27       	eor	r24, r24
    1474:	80 f9       	bld	r24, 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <write_db74>
    datarw();
}
    147c:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
    147e:	0c 94 80 08 	jmp	0x1100	; 0x1100 <datarw>

00001482 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
    1482:	cf 93       	push	r28
    1484:	c8 2f       	mov	r28, r24
    chars_written++;
    1486:	20 91 e5 03 	lds	r18, 0x03E5
    148a:	30 91 e6 03 	lds	r19, 0x03E6
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	30 93 e6 03 	sts	0x03E6, r19
    1496:	20 93 e5 03 	sts	0x03E5, r18

    if ((chars_written==17)||(mychar=='\n'))
    149a:	21 31       	cpi	r18, 0x11	; 17
    149c:	31 05       	cpc	r19, r1
    149e:	31 f0       	breq	.+12     	; 0x14ac <char_write+0x2a>
    14a0:	8a 30       	cpi	r24, 0x0A	; 10
    14a2:	21 f0       	breq	.+8      	; 0x14ac <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    14a4:	8c 2f       	mov	r24, r28
    
}
    14a6:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
    14a8:	0c 94 15 0a 	jmp	0x142a	; 0x142a <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
    14ac:	20 91 04 01 	lds	r18, 0x0104
    14b0:	30 91 05 01 	lds	r19, 0x0105
    14b4:	21 30       	cpi	r18, 0x01	; 1
    14b6:	31 05       	cpc	r19, r1
    14b8:	79 f4       	brne	.+30     	; 0x14d8 <char_write+0x56>
        {
            set_ddram_address(0x40);
    14ba:	80 e4       	ldi	r24, 0x40	; 64
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <set_ddram_address>
            line_num = 2;
    14c2:	22 e0       	ldi	r18, 0x02	; 2
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	30 93 05 01 	sts	0x0105, r19
    14ca:	20 93 04 01 	sts	0x0104, r18
            chars_written = 0;
    14ce:	10 92 e6 03 	sts	0x03E6, r1
    14d2:	10 92 e5 03 	sts	0x03E5, r1
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <char_write+0x60>
        }
        else if (line_num==2)
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <char_write+0x60>
        {
            lcd_init();
    14de:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
        }
    }

    if (mychar!='\n')
    14e2:	ca 30       	cpi	r28, 0x0A	; 10
    14e4:	f9 f6       	brne	.-66     	; 0x14a4 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
    14f4:	0e 94 ce 09 	call	0x139c	; 0x139c <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
    14f8:	8e 01       	movw	r16, r28
    14fa:	fe 01       	movw	r30, r28
    14fc:	01 90       	ld	r0, Z+
    14fe:	00 20       	and	r0, r0
    1500:	e9 f7       	brne	.-6      	; 0x14fc <string_write+0x12>
    1502:	31 97       	sbiw	r30, 0x01	; 1
    1504:	ec 1b       	sub	r30, r28
    1506:	fd 0b       	sbc	r31, r29
    1508:	c8 01       	movw	r24, r16
    150a:	8c 1b       	sub	r24, r28
    150c:	9d 0b       	sbc	r25, r29
    150e:	8e 17       	cp	r24, r30
    1510:	9f 07       	cpc	r25, r31
    1512:	40 f4       	brcc	.+16     	; 0x1524 <string_write+0x3a>
        char_write(mystring[i]);
    1514:	f8 01       	movw	r30, r16
    1516:	81 91       	ld	r24, Z+
    1518:	8f 01       	movw	r16, r30
    151a:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
        get_current_address();
    151e:	0e 94 ce 09 	call	0x139c	; 0x139c <get_current_address>
    1522:	eb cf       	rjmp	.-42     	; 0x14fa <string_write+0x10>
    }
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	18 2f       	mov	r17, r24
    1538:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
    153a:	cb 01       	movw	r24, r22
    153c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <malloc>
    1540:	d8 2f       	mov	r29, r24
    1542:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	23 e7       	ldi	r18, 0x73	; 115
    154a:	33 e0       	ldi	r19, 0x03	; 3
    154c:	3f 93       	push	r19
    154e:	2f 93       	push	r18
    1550:	9f 93       	push	r25
    1552:	8f 93       	push	r24
    1554:	0e 94 98 18 	call	0x3130	; 0x3130 <sprintf>
    string_write(temp);
    1558:	8d 2f       	mov	r24, r29
    155a:	9c 2f       	mov	r25, r28
    155c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    free(temp);
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	8d 2f       	mov	r24, r29
    156e:	9c 2f       	mov	r25, r28
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
    1578:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <free>

0000157c <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <string_write_float+0x12>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <string_write_float+0x14>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
    1596:	ae 01       	movw	r20, r28
    1598:	4f 5f       	subi	r20, 0xFF	; 255
    159a:	5f 4f       	sbci	r21, 0xFF	; 255
    159c:	0e 94 ca 13 	call	0x2794	; 0x2794 <modf>
    15a0:	6b 01       	movw	r12, r22
    15a2:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
    15a4:	69 81       	ldd	r22, Y+1	; 0x01
    15a6:	7a 81       	ldd	r23, Y+2	; 0x02
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__fixsfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	64 e0       	ldi	r22, 0x04	; 4
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	0e 94 97 0a 	call	0x152e	; 0x152e <string_write_int>
    15bc:	80 e4       	ldi	r24, 0x40	; 64
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
    15c4:	b8 01       	movw	r22, r16
    15c6:	88 27       	eor	r24, r24
    15c8:	77 fd       	sbrc	r23, 7
    15ca:	80 95       	com	r24
    15cc:	98 2f       	mov	r25, r24
    15ce:	0e 94 13 12 	call	0x2426	; 0x2426 <__floatsisf>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	91 e4       	ldi	r25, 0x41	; 65
    15de:	0e 94 60 14 	call	0x28c0	; 0x28c0 <pow>
    15e2:	9b 01       	movw	r18, r22
    15e4:	ac 01       	movw	r20, r24
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    15ee:	0e 94 ac 14 	call	0x2958	; 0x2958 <round>
    15f2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__fixsfsi>
    15f6:	7b 01       	movw	r14, r22
    15f8:	77 ff       	sbrs	r23, 7
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <string_write_float+0x88>
    15fc:	ee 24       	eor	r14, r14
    15fe:	ff 24       	eor	r15, r15
    1600:	e6 1a       	sub	r14, r22
    1602:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
    1604:	e1 14       	cp	r14, r1
    1606:	f1 04       	cpc	r15, r1
    1608:	a1 f0       	breq	.+40     	; 0x1632 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
    160a:	b7 01       	movw	r22, r14
    160c:	88 27       	eor	r24, r24
    160e:	77 fd       	sbrc	r23, 7
    1610:	80 95       	com	r24
    1612:	98 2f       	mov	r25, r24
    1614:	0e 94 13 12 	call	0x2426	; 0x2426 <__floatsisf>
    1618:	0e 94 7f 13 	call	0x26fe	; 0x26fe <log10>
    161c:	0e 94 4e 12 	call	0x249c	; 0x249c <floor>
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 ab 10 	call	0x2156	; 0x2156 <__addsf3>
    162c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__fixsfsi>
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <string_write_float+0xba>
    } else {
        digits = 0;
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    1636:	c1 2c       	mov	r12, r1
    1638:	d1 2c       	mov	r13, r1
    163a:	06 1b       	sub	r16, r22
    163c:	17 0b       	sbc	r17, r23
    163e:	c0 16       	cp	r12, r16
    1640:	d1 06       	cpc	r13, r17
    1642:	44 f4       	brge	.+16     	; 0x1654 <string_write_float+0xd8>
    {
        string_write("0");
    1644:	86 e7       	ldi	r24, 0x76	; 118
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	c8 1a       	sub	r12, r24
    1650:	d8 0a       	sbc	r13, r24
    1652:	f5 cf       	rjmp	.-22     	; 0x163e <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
    1654:	64 e0       	ldi	r22, 0x04	; 4
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	c7 01       	movw	r24, r14
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	df 90       	pop	r13
    1670:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
    1672:	0c 94 97 0a 	jmp	0x152e	; 0x152e <string_write_int>

00001676 <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	8c 01       	movw	r16, r24
    1688:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
    168a:	0e 94 ce 09 	call	0x139c	; 0x139c <get_current_address>
    168e:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    1690:	c0 e0       	ldi	r28, 0x00	; 0
    1692:	d0 e0       	ldi	r29, 0x00	; 0
    1694:	cc 15       	cp	r28, r12
    1696:	dd 05       	cpc	r29, r13
    1698:	9c f4       	brge	.+38     	; 0x16c0 <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
    169a:	f8 01       	movw	r30, r16
    169c:	01 90       	ld	r0, Z+
    169e:	00 20       	and	r0, r0
    16a0:	e9 f7       	brne	.-6      	; 0x169c <string_write_numchars+0x26>
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	e0 1b       	sub	r30, r16
    16a6:	f1 0b       	sbc	r31, r17
    16a8:	ce 17       	cp	r28, r30
    16aa:	df 07       	cpc	r29, r31
    16ac:	48 f4       	brcc	.+18     	; 0x16c0 <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
    16ae:	f7 01       	movw	r30, r14
    16b0:	81 91       	ld	r24, Z+
    16b2:	7f 01       	movw	r14, r30
    16b4:	0e 94 41 0a 	call	0x1482	; 0x1482 <char_write>
        get_current_address();
    16b8:	0e 94 ce 09 	call	0x139c	; 0x139c <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
    16bc:	21 96       	adiw	r28, 0x01	; 1
    16be:	ea cf       	rjmp	.-44     	; 0x1694 <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	08 95       	ret

000016d2 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <tag_check+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <tag_check+0x8>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <tag_check+0xa>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
    16e0:	26 e0       	ldi	r18, 0x06	; 6
    16e2:	ec e0       	ldi	r30, 0x0C	; 12
    16e4:	f1 e0       	ldi	r31, 0x01	; 1
    16e6:	de 01       	movw	r26, r28
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	01 90       	ld	r0, Z+
    16ec:	0d 92       	st	X+, r0
    16ee:	2a 95       	dec	r18
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <tag_check+0x18>
    16f2:	fe 01       	movw	r30, r28
    16f4:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	dc 01       	movw	r26, r24
    16fc:	a2 0f       	add	r26, r18
    16fe:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
    1700:	4c 91       	ld	r20, X
    1702:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	26 30       	cpi	r18, 0x06	; 6
    170a:	31 05       	cpc	r19, r1
    170c:	b1 f7       	brne	.-20     	; 0x16fa <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
    170e:	68 e7       	ldi	r22, 0x78	; 120
    1710:	73 e0       	ldi	r23, 0x03	; 3
    1712:	ce 01       	movw	r24, r28
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcmp>
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	89 2b       	or	r24, r25
    1720:	11 f0       	breq	.+4      	; 0x1726 <tag_check+0x54>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
    1726:	c9 01       	movw	r24, r18
    1728:	26 96       	adiw	r28, 0x06	; 6
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	21 f0       	breq	.+8      	; 0x174a <strtok_single+0x10>
    src = in_str;
    1742:	90 93 e8 03 	sts	0x03E8, r25
    1746:	80 93 e7 03 	sts	0x03E7, r24

  if (src == NULL)
    174a:	c0 91 e7 03 	lds	r28, 0x03E7
    174e:	d0 91 e8 03 	lds	r29, 0x03E8
    1752:	20 97       	sbiw	r28, 0x00	; 0
    1754:	69 f0       	breq	.+26     	; 0x1770 <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
    1756:	ce 01       	movw	r24, r28
    1758:	0e 94 8a 18 	call	0x3114	; 0x3114 <strpbrk>
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	41 f0       	breq	.+16     	; 0x1770 <strtok_single+0x36>
    *p  = 0;
    1760:	fc 01       	movw	r30, r24
    1762:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
    1764:	f0 93 e8 03 	sts	0x03E8, r31
    1768:	e0 93 e7 03 	sts	0x03E7, r30
    176c:	ce 01       	movw	r24, r28
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <parse_nmea>:
#include <util/delay.h>
#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the gps_data fields
int parse_nmea(char *in_sent, char *gps_data[13]){
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	8b 01       	movw	r16, r22

	int i = 0, j=0;
	char* token;

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
    1784:	63 e1       	ldi	r22, 0x13	; 19
    1786:	71 e0       	ldi	r23, 0x01	; 1
    1788:	0e 94 9d 0b 	call	0x173a	; 0x173a <strtok_single>
    178c:	ec 01       	movw	r28, r24
	strcpy(gps_data[0], token);
    178e:	bc 01       	movw	r22, r24
    1790:	d8 01       	movw	r26, r16
    1792:	8d 91       	ld	r24, X+
    1794:	9c 91       	ld	r25, X
    1796:	0e 94 74 18 	call	0x30e8	; 0x30e8 <strcpy>

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    179a:	fe 01       	movw	r30, r28
    179c:	01 90       	ld	r0, Z+
    179e:	00 20       	and	r0, r0
    17a0:	e9 f7       	brne	.-6      	; 0x179c <parse_nmea+0x22>
    17a2:	31 97       	sbiw	r30, 0x01	; 1
    17a4:	ec 1b       	sub	r30, r28
    17a6:	fd 0b       	sbc	r31, r29
    17a8:	e0 31       	cpi	r30, 0x10	; 16
    17aa:	f1 05       	cpc	r31, r1
    17ac:	5c f4       	brge	.+22     	; 0x17c4 <parse_nmea+0x4a>
	{
		gps_data[0][j] = '\0';
    17ae:	d8 01       	movw	r26, r16
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	8e 0f       	add	r24, r30
    17b6:	9f 1f       	adc	r25, r31
    17b8:	dc 01       	movw	r26, r24
    17ba:	1c 92       	st	X, r1
	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
	strcpy(gps_data[0], token);

	//null out the rest of the gps_data field
	for (j=strlen(token); j<16; j++)
    17bc:	31 96       	adiw	r30, 0x01	; 1
    17be:	f4 cf       	rjmp	.-24     	; 0x17a8 <parse_nmea+0x2e>
    17c0:	0e 5f       	subi	r16, 0xFE	; 254
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		gps_data[0][j] = '\0';
	}

	//copy over the rest of the tokens
	while(token) 
    17c4:	cd 2b       	or	r28, r29
    17c6:	11 f1       	breq	.+68     	; 0x180c <parse_nmea+0x92>
	{
		i++;
		token = strtok_single(NULL, ",");
    17c8:	63 e1       	ldi	r22, 0x13	; 19
    17ca:	71 e0       	ldi	r23, 0x01	; 1
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 9d 0b 	call	0x173a	; 0x173a <strtok_single>
    17d4:	ec 01       	movw	r28, r24
		strcpy(gps_data[i], token);
    17d6:	bc 01       	movw	r22, r24
    17d8:	f8 01       	movw	r30, r16
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0e 94 74 18 	call	0x30e8	; 0x30e8 <strcpy>
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    17e2:	fe 01       	movw	r30, r28
    17e4:	01 90       	ld	r0, Z+
    17e6:	00 20       	and	r0, r0
    17e8:	e9 f7       	brne	.-6      	; 0x17e4 <parse_nmea+0x6a>
    17ea:	31 97       	sbiw	r30, 0x01	; 1
    17ec:	ec 1b       	sub	r30, r28
    17ee:	fd 0b       	sbc	r31, r29
    17f0:	e0 31       	cpi	r30, 0x10	; 16
    17f2:	f1 05       	cpc	r31, r1
    17f4:	2c f7       	brge	.-54     	; 0x17c0 <parse_nmea+0x46>
		{
			gps_data[i][j] = '\0';
    17f6:	d8 01       	movw	r26, r16
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	8d 91       	ld	r24, X+
    17fc:	9c 91       	ld	r25, X
    17fe:	13 97       	sbiw	r26, 0x03	; 3
    1800:	8e 0f       	add	r24, r30
    1802:	9f 1f       	adc	r25, r31
    1804:	dc 01       	movw	r26, r24
    1806:	1c 92       	st	X, r1
	{
		i++;
		token = strtok_single(NULL, ",");
		strcpy(gps_data[i], token);
		//null out the rest of the gps_data field
		for (j=strlen(token); j<16; j++)
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	f2 cf       	rjmp	.-28     	; 0x17f0 <parse_nmea+0x76>
			gps_data[i][j] = '\0';
		}
	}

	return 0;
}
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
    181a:	fc 01       	movw	r30, r24
    181c:	9f 01       	movw	r18, r30
    181e:	28 1b       	sub	r18, r24
    1820:	39 0b       	sbc	r19, r25
    1822:	26 17       	cp	r18, r22
    1824:	37 07       	cpc	r19, r23
    1826:	14 f4       	brge	.+4      	; 0x182c <wipe_chars+0x12>
	{
		str[i] = '\0';
    1828:	11 92       	st	Z+, r1
    182a:	f8 cf       	rjmp	.-16     	; 0x181c <wipe_chars+0x2>
	}
}
    182c:	08 95       	ret

0000182e <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
    182e:	af 92       	push	r10
    1830:	bf 92       	push	r11
    1832:	cf 92       	push	r12
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	27 97       	sbiw	r28, 0x07	; 7
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	5c 01       	movw	r10, r24
    1852:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
    1854:	fc 01       	movw	r30, r24
    1856:	80 81       	ld	r24, Z
    1858:	99 27       	eor	r25, r25
    185a:	87 fd       	sbrc	r24, 7
    185c:	90 95       	com	r25
    185e:	c0 97       	sbiw	r24, 0x30	; 48
    1860:	2a e0       	ldi	r18, 0x0A	; 10
    1862:	28 9f       	mul	r18, r24
    1864:	b0 01       	movw	r22, r0
    1866:	29 9f       	mul	r18, r25
    1868:	70 0d       	add	r23, r0
    186a:	11 24       	eor	r1, r1
    186c:	81 81       	ldd	r24, Z+1	; 0x01
    186e:	99 27       	eor	r25, r25
    1870:	87 fd       	sbrc	r24, 7
    1872:	90 95       	com	r25
    1874:	c0 97       	sbiw	r24, 0x30	; 48
    1876:	68 0f       	add	r22, r24
    1878:	79 1f       	adc	r23, r25
    187a:	88 27       	eor	r24, r24
    187c:	77 fd       	sbrc	r23, 7
    187e:	80 95       	com	r24
    1880:	98 2f       	mov	r25, r24
    1882:	0e 94 13 12 	call	0x2426	; 0x2426 <__floatsisf>
    1886:	6b 01       	movw	r12, r22
    1888:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
    188a:	b5 01       	movw	r22, r10
    188c:	6e 5f       	subi	r22, 0xFE	; 254
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	47 e0       	ldi	r20, 0x07	; 7
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	ce 01       	movw	r24, r28
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <strncpy>

	float minutes = strtod(temp,NULL);
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	ce 01       	movw	r24, r28
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e7       	ldi	r20, 0x70	; 112
    18ae:	52 e4       	ldi	r21, 0x42	; 66
    18b0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	c7 01       	movw	r24, r14
    18ba:	b6 01       	movw	r22, r12
    18bc:	0e 94 ab 10 	call	0x2156	; 0x2156 <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
    18c0:	13 35       	cpi	r17, 0x53	; 83
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <lat2dec+0x98>
		result *= -1;
    18c4:	90 58       	subi	r25, 0x80	; 128

	return result;

}
    18c6:	27 96       	adiw	r28, 0x07	; 7
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	bf 90       	pop	r11
    18e2:	af 90       	pop	r10
    18e4:	08 95       	ret

000018e6 <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
    18e6:	af 92       	push	r10
    18e8:	bf 92       	push	r11
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	27 97       	sbiw	r28, 0x07	; 7
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	5c 01       	movw	r10, r24
    190a:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
    190c:	fc 01       	movw	r30, r24
    190e:	80 81       	ld	r24, Z
    1910:	99 27       	eor	r25, r25
    1912:	87 fd       	sbrc	r24, 7
    1914:	90 95       	com	r25
    1916:	c0 97       	sbiw	r24, 0x30	; 48
    1918:	24 e6       	ldi	r18, 0x64	; 100
    191a:	28 9f       	mul	r18, r24
    191c:	b0 01       	movw	r22, r0
    191e:	29 9f       	mul	r18, r25
    1920:	70 0d       	add	r23, r0
    1922:	11 24       	eor	r1, r1
    1924:	81 81       	ldd	r24, Z+1	; 0x01
    1926:	99 27       	eor	r25, r25
    1928:	87 fd       	sbrc	r24, 7
    192a:	90 95       	com	r25
    192c:	c0 97       	sbiw	r24, 0x30	; 48
    192e:	4a e0       	ldi	r20, 0x0A	; 10
    1930:	48 9f       	mul	r20, r24
    1932:	90 01       	movw	r18, r0
    1934:	49 9f       	mul	r20, r25
    1936:	30 0d       	add	r19, r0
    1938:	11 24       	eor	r1, r1
    193a:	62 0f       	add	r22, r18
    193c:	73 1f       	adc	r23, r19
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	99 27       	eor	r25, r25
    1942:	87 fd       	sbrc	r24, 7
    1944:	90 95       	com	r25
    1946:	c0 97       	sbiw	r24, 0x30	; 48
    1948:	68 0f       	add	r22, r24
    194a:	79 1f       	adc	r23, r25
    194c:	88 27       	eor	r24, r24
    194e:	77 fd       	sbrc	r23, 7
    1950:	80 95       	com	r24
    1952:	98 2f       	mov	r25, r24
    1954:	0e 94 13 12 	call	0x2426	; 0x2426 <__floatsisf>
    1958:	6b 01       	movw	r12, r22
    195a:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
    195c:	b5 01       	movw	r22, r10
    195e:	6d 5f       	subi	r22, 0xFD	; 253
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	47 e0       	ldi	r20, 0x07	; 7
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	ce 01       	movw	r24, r28
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <strncpy>

	float minutes = strtod(temp,NULL);
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <strtod>

	//do the math
	float result = degrees + minutes*1/60;
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e7       	ldi	r20, 0x70	; 112
    1980:	52 e4       	ldi	r21, 0x42	; 66
    1982:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    1986:	9b 01       	movw	r18, r22
    1988:	ac 01       	movw	r20, r24
    198a:	c7 01       	movw	r24, r14
    198c:	b6 01       	movw	r22, r12
    198e:	0e 94 ab 10 	call	0x2156	; 0x2156 <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
    1992:	17 35       	cpi	r17, 0x57	; 87
    1994:	09 f4       	brne	.+2      	; 0x1998 <lon2dec+0xb2>
		result *= -1;
    1996:	90 58       	subi	r25, 0x80	; 128

	return result;
}
    1998:	27 96       	adiw	r28, 0x07	; 7
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	bf 90       	pop	r11
    19b4:	af 90       	pop	r10
    19b6:	08 95       	ret

000019b8 <update_user_gps_data>:

//use the raw gps_data fields to populate the UserData struct
void update_user_gps_data(char *gps_data[13], UserData *user)
{
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	8c 01       	movw	r16, r24
    19c6:	eb 01       	movw	r28, r22
	wipe_chars(user->msg_type,8);
    19c8:	68 e0       	ldi	r22, 0x08	; 8
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	ce 01       	movw	r24, r28
    19ce:	0e 94 0d 0c 	call	0x181a	; 0x181a <wipe_chars>
	strcpy(user->msg_type,gps_data[0]);
    19d2:	d8 01       	movw	r26, r16
    19d4:	6d 91       	ld	r22, X+
    19d6:	7c 91       	ld	r23, X
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 94 74 18 	call	0x30e8	; 0x30e8 <strcpy>

	wipe_chars(user->utc_time,8);
    19de:	68 e0       	ldi	r22, 0x08	; 8
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	ce 01       	movw	r24, r28
    19e4:	08 96       	adiw	r24, 0x08	; 8
    19e6:	0e 94 0d 0c 	call	0x181a	; 0x181a <wipe_chars>
	user->utc_time[0] = gps_data[1][0];
    19ea:	d8 01       	movw	r26, r16
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	13 97       	sbiw	r26, 0x03	; 3
    19f4:	80 81       	ld	r24, Z
    19f6:	88 87       	std	Y+8, r24	; 0x08
	user->utc_time[1] = gps_data[1][1];
    19f8:	12 96       	adiw	r26, 0x02	; 2
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	13 97       	sbiw	r26, 0x03	; 3
    1a00:	81 81       	ldd	r24, Z+1	; 0x01
    1a02:	89 87       	std	Y+9, r24	; 0x09
	user->utc_time[2] = ':';
    1a04:	8a e3       	ldi	r24, 0x3A	; 58
    1a06:	8a 87       	std	Y+10, r24	; 0x0a
	user->utc_time[3] = gps_data[1][2];
    1a08:	12 96       	adiw	r26, 0x02	; 2
    1a0a:	ed 91       	ld	r30, X+
    1a0c:	fc 91       	ld	r31, X
    1a0e:	13 97       	sbiw	r26, 0x03	; 3
    1a10:	92 81       	ldd	r25, Z+2	; 0x02
    1a12:	9b 87       	std	Y+11, r25	; 0x0b
	user->utc_time[4] = gps_data[1][3];
    1a14:	12 96       	adiw	r26, 0x02	; 2
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	13 97       	sbiw	r26, 0x03	; 3
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	9c 87       	std	Y+12, r25	; 0x0c
	user->utc_time[5] = ':';
    1a20:	8d 87       	std	Y+13, r24	; 0x0d
	user->utc_time[6] = gps_data[1][4];
    1a22:	12 96       	adiw	r26, 0x02	; 2
    1a24:	ed 91       	ld	r30, X+
    1a26:	fc 91       	ld	r31, X
    1a28:	13 97       	sbiw	r26, 0x03	; 3
    1a2a:	84 81       	ldd	r24, Z+4	; 0x04
    1a2c:	8e 87       	std	Y+14, r24	; 0x0e
	user->utc_time[7] = gps_data[1][5];
    1a2e:	12 96       	adiw	r26, 0x02	; 2
    1a30:	ed 91       	ld	r30, X+
    1a32:	fc 91       	ld	r31, X
    1a34:	13 97       	sbiw	r26, 0x03	; 3
    1a36:	85 81       	ldd	r24, Z+5	; 0x05
    1a38:	8f 87       	std	Y+15, r24	; 0x0f

	user->nrw = gps_data[2][0];
    1a3a:	14 96       	adiw	r26, 0x04	; 4
    1a3c:	ed 91       	ld	r30, X+
    1a3e:	fc 91       	ld	r31, X
    1a40:	15 97       	sbiw	r26, 0x05	; 5
    1a42:	80 81       	ld	r24, Z
    1a44:	88 8b       	std	Y+16, r24	; 0x10

	user->lat = 0;
    1a46:	19 8a       	std	Y+17, r1	; 0x11
    1a48:	1a 8a       	std	Y+18, r1	; 0x12
    1a4a:	1b 8a       	std	Y+19, r1	; 0x13
    1a4c:	1c 8a       	std	Y+20, r1	; 0x14
	user->lat = lat2dec(gps_data[3], gps_data[4][0]);
    1a4e:	18 96       	adiw	r26, 0x08	; 8
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	19 97       	sbiw	r26, 0x09	; 9
    1a56:	60 81       	ld	r22, Z
    1a58:	16 96       	adiw	r26, 0x06	; 6
    1a5a:	8d 91       	ld	r24, X+
    1a5c:	9c 91       	ld	r25, X
    1a5e:	17 97       	sbiw	r26, 0x07	; 7
    1a60:	0e 94 17 0c 	call	0x182e	; 0x182e <lat2dec>
    1a64:	69 8b       	std	Y+17, r22	; 0x11
    1a66:	7a 8b       	std	Y+18, r23	; 0x12
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14

	user->lon = 0;
    1a6c:	1d 8a       	std	Y+21, r1	; 0x15
    1a6e:	1e 8a       	std	Y+22, r1	; 0x16
    1a70:	1f 8a       	std	Y+23, r1	; 0x17
    1a72:	18 8e       	std	Y+24, r1	; 0x18
	user->lon = lon2dec(gps_data[5], gps_data[6][0]);
    1a74:	d8 01       	movw	r26, r16
    1a76:	1c 96       	adiw	r26, 0x0c	; 12
    1a78:	ed 91       	ld	r30, X+
    1a7a:	fc 91       	ld	r31, X
    1a7c:	1d 97       	sbiw	r26, 0x0d	; 13
    1a7e:	60 81       	ld	r22, Z
    1a80:	1a 96       	adiw	r26, 0x0a	; 10
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	1b 97       	sbiw	r26, 0x0b	; 11
    1a88:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <lon2dec>
    1a8c:	6d 8b       	std	Y+21, r22	; 0x15
    1a8e:	7e 8b       	std	Y+22, r23	; 0x16
    1a90:	8f 8b       	std	Y+23, r24	; 0x17
    1a92:	98 8f       	std	Y+24, r25	; 0x18

	user->speed = 0;
    1a94:	19 8e       	std	Y+25, r1	; 0x19
    1a96:	1a 8e       	std	Y+26, r1	; 0x1a
    1a98:	1b 8e       	std	Y+27, r1	; 0x1b
    1a9a:	1c 8e       	std	Y+28, r1	; 0x1c
	user->speed = (float)strtod(gps_data[7],NULL);
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	86 85       	ldd	r24, Z+14	; 0x0e
    1aa4:	97 85       	ldd	r25, Z+15	; 0x0f
    1aa6:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <strtod>
    1aaa:	69 8f       	std	Y+25, r22	; 0x19
    1aac:	7a 8f       	std	Y+26, r23	; 0x1a
    1aae:	8b 8f       	std	Y+27, r24	; 0x1b
    1ab0:	9c 8f       	std	Y+28, r25	; 0x1c

	user->course = 0;
    1ab2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ab4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ab6:	1f 8e       	std	Y+31, r1	; 0x1f
    1ab8:	18 a2       	std	Y+32, r1	; 0x20
	user->course = (float)strtod(gps_data[8],NULL);
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	d8 01       	movw	r26, r16
    1ac0:	50 96       	adiw	r26, 0x10	; 16
    1ac2:	8d 91       	ld	r24, X+
    1ac4:	9c 91       	ld	r25, X
    1ac6:	51 97       	sbiw	r26, 0x11	; 17
    1ac8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <strtod>
    1acc:	6d 8f       	std	Y+29, r22	; 0x1d
    1ace:	7e 8f       	std	Y+30, r23	; 0x1e
    1ad0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad2:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(user->date,8);
    1ad4:	68 e0       	ldi	r22, 0x08	; 8
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	ce 01       	movw	r24, r28
    1ada:	81 96       	adiw	r24, 0x21	; 33
    1adc:	0e 94 0d 0c 	call	0x181a	; 0x181a <wipe_chars>
	user->date[0] = gps_data[9][2];
    1ae0:	d8 01       	movw	r26, r16
    1ae2:	52 96       	adiw	r26, 0x12	; 18
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	53 97       	sbiw	r26, 0x13	; 19
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	89 a3       	std	Y+33, r24	; 0x21
	user->date[1] = gps_data[9][3];
    1aee:	52 96       	adiw	r26, 0x12	; 18
    1af0:	ed 91       	ld	r30, X+
    1af2:	fc 91       	ld	r31, X
    1af4:	53 97       	sbiw	r26, 0x13	; 19
    1af6:	83 81       	ldd	r24, Z+3	; 0x03
    1af8:	8a a3       	std	Y+34, r24	; 0x22
	user->date[2] = '/';
    1afa:	8f e2       	ldi	r24, 0x2F	; 47
    1afc:	8b a3       	std	Y+35, r24	; 0x23
	user->date[3] = gps_data[9][0];
    1afe:	52 96       	adiw	r26, 0x12	; 18
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	53 97       	sbiw	r26, 0x13	; 19
    1b06:	90 81       	ld	r25, Z
    1b08:	9c a3       	std	Y+36, r25	; 0x24
	user->date[4] = gps_data[9][1];
    1b0a:	52 96       	adiw	r26, 0x12	; 18
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	53 97       	sbiw	r26, 0x13	; 19
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
    1b14:	9d a3       	std	Y+37, r25	; 0x25
	user->date[5] = '/';
    1b16:	8e a3       	std	Y+38, r24	; 0x26
	user->date[6] = gps_data[9][4];
    1b18:	52 96       	adiw	r26, 0x12	; 18
    1b1a:	ed 91       	ld	r30, X+
    1b1c:	fc 91       	ld	r31, X
    1b1e:	53 97       	sbiw	r26, 0x13	; 19
    1b20:	84 81       	ldd	r24, Z+4	; 0x04
    1b22:	8f a3       	std	Y+39, r24	; 0x27
	user->date[7] = gps_data[9][5];
    1b24:	52 96       	adiw	r26, 0x12	; 18
    1b26:	ed 91       	ld	r30, X+
    1b28:	fc 91       	ld	r31, X
    1b2a:	53 97       	sbiw	r26, 0x13	; 19
    1b2c:	85 81       	ldd	r24, Z+5	; 0x05
    1b2e:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(user->mag_var,8);
    1b30:	7e 01       	movw	r14, r28
    1b32:	b9 e2       	ldi	r27, 0x29	; 41
    1b34:	eb 0e       	add	r14, r27
    1b36:	f1 1c       	adc	r15, r1
    1b38:	68 e0       	ldi	r22, 0x08	; 8
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	0e 94 0d 0c 	call	0x181a	; 0x181a <wipe_chars>
	strcpy(user->mag_var,gps_data[10]);
    1b42:	f8 01       	movw	r30, r16
    1b44:	64 89       	ldd	r22, Z+20	; 0x14
    1b46:	75 89       	ldd	r23, Z+21	; 0x15
    1b48:	c7 01       	movw	r24, r14
    1b4a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <strcpy>

	user->mode = gps_data[12][0];
    1b4e:	d8 01       	movw	r26, r16
    1b50:	58 96       	adiw	r26, 0x18	; 24
    1b52:	ed 91       	ld	r30, X+
    1b54:	fc 91       	ld	r31, X
    1b56:	59 97       	sbiw	r26, 0x19	; 25
    1b58:	80 81       	ld	r24, Z
    1b5a:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(user->checksum,3);
    1b5c:	63 e0       	ldi	r22, 0x03	; 3
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	ce 01       	movw	r24, r28
    1b62:	c2 96       	adiw	r24, 0x32	; 50
    1b64:	0e 94 0d 0c 	call	0x181a	; 0x181a <wipe_chars>
	user->checksum[0] = gps_data[12][1];
    1b68:	d8 01       	movw	r26, r16
    1b6a:	58 96       	adiw	r26, 0x18	; 24
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	59 97       	sbiw	r26, 0x19	; 25
    1b72:	81 81       	ldd	r24, Z+1	; 0x01
    1b74:	8a ab       	std	Y+50, r24	; 0x32
	user->checksum[1] = gps_data[12][2];
    1b76:	58 96       	adiw	r26, 0x18	; 24
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	59 97       	sbiw	r26, 0x19	; 25
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	8b ab       	std	Y+51, r24	; 0x33
	user->checksum[2] = gps_data[12][3];
    1b82:	58 96       	adiw	r26, 0x18	; 24
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	59 97       	sbiw	r26, 0x19	; 25
    1b8a:	83 81       	ldd	r24, Z+3	; 0x03
    1b8c:	8c ab       	std	Y+52, r24	; 0x34
}
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	08 95       	ret

00001b9c <earth_distance>:
    return earth_distance(user->lat, user->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
    1b9c:	4f 92       	push	r4
    1b9e:	5f 92       	push	r5
    1ba0:	6f 92       	push	r6
    1ba2:	7f 92       	push	r7
    1ba4:	8f 92       	push	r8
    1ba6:	9f 92       	push	r9
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	60 97       	sbiw	r28, 0x10	; 16
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	2b 01       	movw	r4, r22
    1bce:	3c 01       	movw	r6, r24
    1bd0:	29 87       	std	Y+9, r18	; 0x09
    1bd2:	3a 87       	std	Y+10, r19	; 0x0a
    1bd4:	4b 87       	std	Y+11, r20	; 0x0b
    1bd6:	5c 87       	std	Y+12, r21	; 0x0c
    1bd8:	e9 82       	std	Y+1, r14	; 0x01
    1bda:	fa 82       	std	Y+2, r15	; 0x02
    1bdc:	0b 83       	std	Y+3, r16	; 0x03
    1bde:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    1be0:	9b 01       	movw	r18, r22
    1be2:	ac 01       	movw	r20, r24
    1be4:	c8 01       	movw	r24, r16
    1be6:	b7 01       	movw	r22, r14
    1be8:	0e 94 aa 10 	call	0x2154	; 0x2154 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1bec:	2b ed       	ldi	r18, 0xDB	; 219
    1bee:	3f e0       	ldi	r19, 0x0F	; 15
    1bf0:	49 e4       	ldi	r20, 0x49	; 73
    1bf2:	50 e4       	ldi	r21, 0x40	; 64
    1bf4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	44 e3       	ldi	r20, 0x34	; 52
    1bfe:	53 e4       	ldi	r21, 0x43	; 67
    1c00:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1c10:	0e 94 cc 14 	call	0x2998	; 0x2998 <sin>
    1c14:	6d 83       	std	Y+5, r22	; 0x05
    1c16:	7e 83       	std	Y+6, r23	; 0x06
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1c1c:	2b ed       	ldi	r18, 0xDB	; 219
    1c1e:	3f e0       	ldi	r19, 0x0F	; 15
    1c20:	49 e4       	ldi	r20, 0x49	; 73
    1c22:	50 e4       	ldi	r21, 0x40	; 64
    1c24:	c3 01       	movw	r24, r6
    1c26:	b2 01       	movw	r22, r4
    1c28:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	44 e3       	ldi	r20, 0x34	; 52
    1c32:	53 e4       	ldi	r21, 0x43	; 67
    1c34:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1c38:	0e 94 75 11 	call	0x22ea	; 0x22ea <cos>
    1c3c:	2b 01       	movw	r4, r22
    1c3e:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1c40:	2b ed       	ldi	r18, 0xDB	; 219
    1c42:	3f e0       	ldi	r19, 0x0F	; 15
    1c44:	49 e4       	ldi	r20, 0x49	; 73
    1c46:	50 e4       	ldi	r21, 0x40	; 64
    1c48:	c8 01       	movw	r24, r16
    1c4a:	b7 01       	movw	r22, r14
    1c4c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	44 e3       	ldi	r20, 0x34	; 52
    1c56:	53 e4       	ldi	r21, 0x43	; 67
    1c58:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1c5c:	0e 94 75 11 	call	0x22ea	; 0x22ea <cos>
    1c60:	69 83       	std	Y+1, r22	; 0x01
    1c62:	7a 83       	std	Y+2, r23	; 0x02
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
    1c68:	29 85       	ldd	r18, Y+9	; 0x09
    1c6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c6c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c6e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c70:	c6 01       	movw	r24, r12
    1c72:	b5 01       	movw	r22, r10
    1c74:	0e 94 aa 10 	call	0x2154	; 0x2154 <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1c78:	2b ed       	ldi	r18, 0xDB	; 219
    1c7a:	3f e0       	ldi	r19, 0x0F	; 15
    1c7c:	49 e4       	ldi	r20, 0x49	; 73
    1c7e:	50 e4       	ldi	r21, 0x40	; 64
    1c80:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	44 e3       	ldi	r20, 0x34	; 52
    1c8a:	53 e4       	ldi	r21, 0x43	; 67
    1c8c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1c9c:	0e 94 cc 14 	call	0x2998	; 0x2998 <sin>
    1ca0:	4b 01       	movw	r8, r22
    1ca2:	5c 01       	movw	r10, r24
    1ca4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca8:	4f 81       	ldd	r20, Y+7	; 0x07
    1caa:	58 85       	ldd	r21, Y+8	; 0x08
    1cac:	ca 01       	movw	r24, r20
    1cae:	b9 01       	movw	r22, r18
    1cb0:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1cb4:	6b 01       	movw	r12, r22
    1cb6:	7c 01       	movw	r14, r24
    1cb8:	29 81       	ldd	r18, Y+1	; 0x01
    1cba:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbc:	4b 81       	ldd	r20, Y+3	; 0x03
    1cbe:	5c 81       	ldd	r21, Y+4	; 0x04
    1cc0:	c3 01       	movw	r24, r6
    1cc2:	b2 01       	movw	r22, r4
    1cc4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1cc8:	a5 01       	movw	r20, r10
    1cca:	94 01       	movw	r18, r8
    1ccc:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1cd0:	a5 01       	movw	r20, r10
    1cd2:	94 01       	movw	r18, r8
    1cd4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	c7 01       	movw	r24, r14
    1cde:	b6 01       	movw	r22, r12
    1ce0:	0e 94 ab 10 	call	0x2156	; 0x2156 <__addsf3>
    1ce4:	6b 01       	movw	r12, r22
    1ce6:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
    1ce8:	9b 01       	movw	r18, r22
    1cea:	ac 01       	movw	r20, r24
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	80 e8       	ldi	r24, 0x80	; 128
    1cf2:	9f e3       	ldi	r25, 0x3F	; 63
    1cf4:	0e 94 aa 10 	call	0x2154	; 0x2154 <__subsf3>
    1cf8:	0e 94 d6 14 	call	0x29ac	; 0x29ac <sqrt>
    1cfc:	9b 01       	movw	r18, r22
    1cfe:	ac 01       	movw	r20, r24
    1d00:	c7 01       	movw	r24, r14
    1d02:	b6 01       	movw	r22, r12
    1d04:	2d 87       	std	Y+13, r18	; 0x0d
    1d06:	3e 87       	std	Y+14, r19	; 0x0e
    1d08:	4f 87       	std	Y+15, r20	; 0x0f
    1d0a:	58 8b       	std	Y+16, r21	; 0x10
    1d0c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <sqrt>
    1d10:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d12:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d14:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d16:	58 89       	ldd	r21, Y+16	; 0x10
    1d18:	0e 94 1e 11 	call	0x223c	; 0x223c <atan2>
    1d1c:	9b 01       	movw	r18, r22
    1d1e:	ac 01       	movw	r20, r24
    1d20:	0e 94 ab 10 	call	0x2156	; 0x2156 <__addsf3>
    double distance = R*c;
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	38 e1       	ldi	r19, 0x18	; 24
    1d28:	47 ec       	ldi	r20, 0xC7	; 199
    1d2a:	55 e4       	ldi	r21, 0x45	; 69
    1d2c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>

    return (float)distance;
}
    1d30:	60 96       	adiw	r28, 0x10	; 16
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	df 90       	pop	r13
    1d4a:	cf 90       	pop	r12
    1d4c:	bf 90       	pop	r11
    1d4e:	af 90       	pop	r10
    1d50:	9f 90       	pop	r9
    1d52:	8f 90       	pop	r8
    1d54:	7f 90       	pop	r7
    1d56:	6f 90       	pop	r6
    1d58:	5f 90       	pop	r5
    1d5a:	4f 90       	pop	r4
    1d5c:	08 95       	ret

00001d5e <get_nearest_station>:

//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(Station *all_stations, int num_stations, float lat, float lon)
{
    1d5e:	2f 92       	push	r2
    1d60:	3f 92       	push	r3
    1d62:	4f 92       	push	r4
    1d64:	5f 92       	push	r5
    1d66:	6f 92       	push	r6
    1d68:	7f 92       	push	r7
    1d6a:	8f 92       	push	r8
    1d6c:	9f 92       	push	r9
    1d6e:	af 92       	push	r10
    1d70:	bf 92       	push	r11
    1d72:	cf 92       	push	r12
    1d74:	df 92       	push	r13
    1d76:	ef 92       	push	r14
    1d78:	ff 92       	push	r15
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	2c 97       	sbiw	r28, 0x0c	; 12
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	7e 83       	std	Y+6, r23	; 0x06
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	29 01       	movw	r4, r18
    1d98:	3a 01       	movw	r6, r20
    1d9a:	ef 82       	std	Y+7, r14	; 0x07
    1d9c:	f8 86       	std	Y+8, r15	; 0x08
    1d9e:	09 87       	std	Y+9, r16	; 0x09
    1da0:	1a 87       	std	Y+10, r17	; 0x0a
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1da6:	1c 86       	std	Y+12, r1	; 0x0c
    1da8:	1b 86       	std	Y+11, r1	; 0x0b

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(Station *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    int station_index = -1, i;
    1daa:	2f ef       	ldi	r18, 0xFF	; 255
    1dac:	2b 83       	std	Y+3, r18	; 0x03
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	3c 83       	std	Y+4, r19	; 0x04
//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(Station *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    1db2:	21 2c       	mov	r2, r1
    1db4:	31 2c       	mov	r3, r1
    1db6:	80 e8       	ldi	r24, 0x80	; 128
    1db8:	88 2e       	mov	r8, r24
    1dba:	9f eb       	ldi	r25, 0xBF	; 191
    1dbc:	99 2e       	mov	r9, r25
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1dc4:	fe 81       	ldd	r31, Y+6	; 0x06
    1dc6:	8e 17       	cp	r24, r30
    1dc8:	9f 07       	cpc	r25, r31
    1dca:	f4 f5       	brge	.+124    	; 0x1e48 <get_nearest_station+0xea>
    {
        float temp = earth_distance(lat, lon, all_stations[i].lat, all_stations[i].lon);
    1dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dce:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd0:	a0 88       	ldd	r10, Z+16	; 0x10
    1dd2:	b1 88       	ldd	r11, Z+17	; 0x11
    1dd4:	c2 88       	ldd	r12, Z+18	; 0x12
    1dd6:	d3 88       	ldd	r13, Z+19	; 0x13
    1dd8:	e4 84       	ldd	r14, Z+12	; 0x0c
    1dda:	f5 84       	ldd	r15, Z+13	; 0x0d
    1ddc:	06 85       	ldd	r16, Z+14	; 0x0e
    1dde:	17 85       	ldd	r17, Z+15	; 0x0f
    1de0:	2f 81       	ldd	r18, Y+7	; 0x07
    1de2:	38 85       	ldd	r19, Y+8	; 0x08
    1de4:	49 85       	ldd	r20, Y+9	; 0x09
    1de6:	5a 85       	ldd	r21, Y+10	; 0x0a
    1de8:	c3 01       	movw	r24, r6
    1dea:	b2 01       	movw	r22, r4
    1dec:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <earth_distance>
    1df0:	7b 01       	movw	r14, r22
    1df2:	8c 01       	movw	r16, r24
        if ((temp < min_dist)||(min_dist==-1))
    1df4:	91 01       	movw	r18, r2
    1df6:	a4 01       	movw	r20, r8
    1df8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__cmpsf2>
    1dfc:	87 fd       	sbrc	r24, 7
    1dfe:	0d c0       	rjmp	.+26     	; 0x1e1a <get_nearest_station+0xbc>
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f eb       	ldi	r21, 0xBF	; 191
    1e08:	b1 01       	movw	r22, r2
    1e0a:	c4 01       	movw	r24, r8
    1e0c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__cmpsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <get_nearest_station+0xc6>
    1e14:	71 01       	movw	r14, r2
    1e16:	84 01       	movw	r16, r8
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <get_nearest_station+0xce>
    1e1a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e1c:	fb 83       	std	Y+3, r31	; 0x03
    1e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e20:	2c 83       	std	Y+4, r18	; 0x04
    1e22:	04 c0       	rjmp	.+8      	; 0x1e2c <get_nearest_station+0xce>
    1e24:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e26:	3b 83       	std	Y+3, r19	; 0x03
    1e28:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2a:	8c 83       	std	Y+4, r24	; 0x04
{
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1e2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1e2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1e30:	31 96       	adiw	r30, 0x01	; 1
    1e32:	fc 87       	std	Y+12, r31	; 0x0c
    1e34:	eb 87       	std	Y+11, r30	; 0x0b
    1e36:	29 81       	ldd	r18, Y+1	; 0x01
    1e38:	3a 81       	ldd	r19, Y+2	; 0x02
    1e3a:	24 5e       	subi	r18, 0xE4	; 228
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	3a 83       	std	Y+2, r19	; 0x02
    1e40:	29 83       	std	Y+1, r18	; 0x01
    1e42:	17 01       	movw	r2, r14
    1e44:	48 01       	movw	r8, r16
    1e46:	bb cf       	rjmp	.-138    	; 0x1dbe <get_nearest_station+0x60>
            min_dist = temp;
        }
    }

    return station_index;
}
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	2c 96       	adiw	r28, 0x0c	; 12
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	bf 90       	pop	r11
    1e6a:	af 90       	pop	r10
    1e6c:	9f 90       	pop	r9
    1e6e:	8f 90       	pop	r8
    1e70:	7f 90       	pop	r7
    1e72:	6f 90       	pop	r6
    1e74:	5f 90       	pop	r5
    1e76:	4f 90       	pop	r4
    1e78:	3f 90       	pop	r3
    1e7a:	2f 90       	pop	r2
    1e7c:	08 95       	ret

00001e7e <my_distance_to_station>:

//find the distance from the user to a particular station
float my_distance_to_station(UserData * user, Station *all_stations, int station_index)
{
    1e7e:	af 92       	push	r10
    1e80:	bf 92       	push	r11
    1e82:	cf 92       	push	r12
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    return earth_distance(user->lat, user->lon, all_stations[station_index].lat, all_stations[station_index].lon);
    1e8e:	ec e1       	ldi	r30, 0x1C	; 28
    1e90:	e4 9f       	mul	r30, r20
    1e92:	90 01       	movw	r18, r0
    1e94:	e5 9f       	mul	r30, r21
    1e96:	30 0d       	add	r19, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	62 0f       	add	r22, r18
    1e9c:	73 1f       	adc	r23, r19
    1e9e:	fb 01       	movw	r30, r22
    1ea0:	a0 88       	ldd	r10, Z+16	; 0x10
    1ea2:	b1 88       	ldd	r11, Z+17	; 0x11
    1ea4:	c2 88       	ldd	r12, Z+18	; 0x12
    1ea6:	d3 88       	ldd	r13, Z+19	; 0x13
    1ea8:	e4 84       	ldd	r14, Z+12	; 0x0c
    1eaa:	f5 84       	ldd	r15, Z+13	; 0x0d
    1eac:	06 85       	ldd	r16, Z+14	; 0x0e
    1eae:	17 85       	ldd	r17, Z+15	; 0x0f
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	25 89       	ldd	r18, Z+21	; 0x15
    1eb4:	36 89       	ldd	r19, Z+22	; 0x16
    1eb6:	47 89       	ldd	r20, Z+23	; 0x17
    1eb8:	50 8d       	ldd	r21, Z+24	; 0x18
    1eba:	61 89       	ldd	r22, Z+17	; 0x11
    1ebc:	72 89       	ldd	r23, Z+18	; 0x12
    1ebe:	83 89       	ldd	r24, Z+19	; 0x13
    1ec0:	94 89       	ldd	r25, Z+20	; 0x14
    1ec2:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <earth_distance>
}
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	08 95       	ret

00001ed8 <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1ed8:	2b ed       	ldi	r18, 0xDB	; 219
    1eda:	3f e0       	ldi	r19, 0x0F	; 15
    1edc:	49 e4       	ldi	r20, 0x49	; 73
    1ede:	50 e4       	ldi	r21, 0x40	; 64
    1ee0:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	44 e3       	ldi	r20, 0x34	; 52
    1eea:	53 e4       	ldi	r21, 0x43	; 67
    1eec:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divsf3>
}
    1ef0:	08 95       	ret

00001ef2 <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(UserData *user)
{
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	ec 01       	movw	r28, r24
    1ef8:	fc 01       	movw	r30, r24
    int i;
    for (i=0; i<4; i++)
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (user->msg_type[i]=='\0')
    1efe:	21 91       	ld	r18, Z+
    1f00:	22 23       	and	r18, r18
    1f02:	69 f1       	breq	.+90     	; 0x1f5e <gps_locked+0x6c>

//make sure there is valid GPS data to work with
int gps_locked(UserData *user)
{
    int i;
    for (i=0; i<4; i++)
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	91 05       	cpc	r25, r1
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <gps_locked+0xc>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	fe 01       	movw	r30, r28
    1f12:	e8 0f       	add	r30, r24
    1f14:	f9 1f       	adc	r31, r25
            return 0;
    }

    for (i=0; i<4; i++)
    {
        if (user->utc_time[i]=='\0')
    1f16:	20 85       	ldd	r18, Z+8	; 0x08
    1f18:	22 23       	and	r18, r18
    1f1a:	09 f1       	breq	.+66     	; 0x1f5e <gps_locked+0x6c>
    {
        if (user->msg_type[i]=='\0')
            return 0;
    }

    for (i=0; i<4; i++)
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	84 30       	cpi	r24, 0x04	; 4
    1f20:	91 05       	cpc	r25, r1
    1f22:	b1 f7       	brne	.-20     	; 0x1f10 <gps_locked+0x1e>
    {
        if (user->utc_time[i]=='\0')
            return 0;
    }

    if ((user->lat==0)||(user->lon==0))
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	a9 01       	movw	r20, r18
    1f2a:	69 89       	ldd	r22, Y+17	; 0x11
    1f2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f30:	9c 89       	ldd	r25, Y+20	; 0x14
    1f32:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__cmpsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	91 f0       	breq	.+36     	; 0x1f5e <gps_locked+0x6c>
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	a9 01       	movw	r20, r18
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__cmpsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	39 f0       	breq	.+14     	; 0x1f5e <gps_locked+0x6c>
        return 0;

    if (user->checksum[0] != '*')
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	2a a9       	ldd	r18, Y+50	; 0x32
    1f56:	2a 32       	cpi	r18, 0x2A	; 42
    1f58:	21 f0       	breq	.+8      	; 0x1f62 <gps_locked+0x70>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <gps_locked+0x70>
{
    int i;
    for (i=0; i<4; i++)
    {
        if (user->msg_type[i]=='\0')
            return 0;
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    if (user->checksum[0] != '*')
        return 0;

    return 1;

    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

00001f68 <my_eeprom_read_int>:
//---- EEPROM Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1f68:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__eerd_byte_m1284p>
    return (temp_num);
}
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	08 95       	ret

00001f70 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    1f70:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__eerd_byte_m1284p>

00001f74 <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1f74:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__eerd_dword_m1284p>

00001f78 <my_eeprom_read_string>:
    1f78:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__eerd_block_m1284p>

00001f7c <main>:
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	1f 92       	push	r1
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <prepare_device>
    1f8a:	0d e6       	ldi	r16, 0x6D	; 109
    1f8c:	14 e0       	ldi	r17, 0x04	; 4
    1f8e:	80 e1       	ldi	r24, 0x10	; 16
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <malloc>
    1f96:	f8 01       	movw	r30, r16
    1f98:	81 93       	st	Z+, r24
    1f9a:	91 93       	st	Z+, r25
    1f9c:	8f 01       	movw	r16, r30
    1f9e:	f4 e0       	ldi	r31, 0x04	; 4
    1fa0:	07 38       	cpi	r16, 0x87	; 135
    1fa2:	1f 07       	cpc	r17, r31
    1fa4:	a1 f7       	brne	.-24     	; 0x1f8e <main+0x12>
    1fa6:	85 e3       	ldi	r24, 0x35	; 53
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <malloc>
    1fae:	90 93 ec 03 	sts	0x03EC, r25
    1fb2:	80 93 eb 03 	sts	0x03EB, r24
    1fb6:	86 e3       	ldi	r24, 0x36	; 54
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    1fbe:	0e 94 e6 01 	call	0x3cc	; 0x3cc <database_load>
    1fc2:	2f e3       	ldi	r18, 0x3F	; 63
    1fc4:	8d e0       	ldi	r24, 0x0D	; 13
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	21 50       	subi	r18, 0x01	; 1
    1fca:	80 40       	sbci	r24, 0x00	; 0
    1fcc:	90 40       	sbci	r25, 0x00	; 0
    1fce:	e1 f7       	brne	.-8      	; 0x1fc8 <main+0x4c>
    1fd0:	00 c0       	rjmp	.+0      	; 0x1fd2 <main+0x56>
    1fd2:	00 00       	nop
    1fd4:	02 e0       	ldi	r16, 0x02	; 2
    1fd6:	10 e0       	ldi	r17, 0x00	; 0
    1fd8:	e0 90 86 03 	lds	r14, 0x0386
    1fdc:	f0 90 87 03 	lds	r15, 0x0387
    1fe0:	e1 e0       	ldi	r30, 0x01	; 1
    1fe2:	ee 16       	cp	r14, r30
    1fe4:	f1 04       	cpc	r15, r1
    1fe6:	39 f1       	breq	.+78     	; 0x2036 <main+0xba>
    1fe8:	f2 e0       	ldi	r31, 0x02	; 2
    1fea:	ef 16       	cp	r14, r31
    1fec:	f1 04       	cpc	r15, r1
    1fee:	01 f1       	breq	.+64     	; 0x2030 <main+0xb4>
    1ff0:	ef 28       	or	r14, r15
    1ff2:	91 f7       	brne	.-28     	; 0x1fd8 <main+0x5c>
    1ff4:	80 91 e3 03 	lds	r24, 0x03E3
    1ff8:	90 91 e4 03 	lds	r25, 0x03E4
    1ffc:	18 16       	cp	r1, r24
    1ffe:	19 06       	cpc	r1, r25
    2000:	24 f0       	brlt	.+8      	; 0x200a <main+0x8e>
    2002:	10 93 87 03 	sts	0x0387, r17
    2006:	00 93 86 03 	sts	0x0386, r16
    200a:	0e 94 ce 01 	call	0x39c	; 0x39c <enable_gps>
    200e:	80 91 eb 03 	lds	r24, 0x03EB
    2012:	90 91 ec 03 	lds	r25, 0x03EC
    2016:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <gps_locked>
    201a:	89 2b       	or	r24, r25
    201c:	11 f4       	brne	.+4      	; 0x2022 <main+0xa6>
    201e:	0e 94 67 08 	call	0x10ce	; 0x10ce <wait_for_gps_lock>
    2022:	0e 94 70 07 	call	0xee0	; 0xee0 <show_nearest_station>
    2026:	0e 94 ee 03 	call	0x7dc	; 0x7dc <print_gps_data>
    202a:	0e 94 f7 05 	call	0xbee	; 0xbee <print_all_callsigns>
    202e:	d4 cf       	rjmp	.-88     	; 0x1fd8 <main+0x5c>
    2030:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <wait_for_update>
    2034:	d1 cf       	rjmp	.-94     	; 0x1fd8 <main+0x5c>
    2036:	0e 94 27 01 	call	0x24e	; 0x24e <disable_gps>
    203a:	80 91 82 03 	lds	r24, 0x0382
    203e:	90 91 83 03 	lds	r25, 0x0383
    2042:	89 2b       	or	r24, r25
    2044:	a1 f4       	brne	.+40     	; 0x206e <main+0xf2>
    2046:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    204a:	8a e4       	ldi	r24, 0x4A	; 74
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    2052:	f0 92 83 03 	sts	0x0383, r15
    2056:	e0 92 82 03 	sts	0x0382, r14
    205a:	10 92 81 03 	sts	0x0381, r1
    205e:	10 92 80 03 	sts	0x0380, r1
    2062:	10 92 85 03 	sts	0x0385, r1
    2066:	10 92 84 03 	sts	0x0384, r1
    206a:	0e 94 97 02 	call	0x52e	; 0x52e <database_free>
    206e:	90 91 e2 03 	lds	r25, 0x03E2
    2072:	80 91 e1 03 	lds	r24, 0x03E1
    2076:	98 17       	cp	r25, r24
    2078:	e9 f1       	breq	.+122    	; 0x20f4 <main+0x178>
    207a:	10 92 da 03 	sts	0x03DA, r1
    207e:	10 92 db 03 	sts	0x03DB, r1
    2082:	10 92 dc 03 	sts	0x03DC, r1
    2086:	10 92 dd 03 	sts	0x03DD, r1
    208a:	0e 94 24 03 	call	0x648	; 0x648 <getChar>
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	0e 94 0f 03 	call	0x61e	; 0x61e <detectSerialEnd>
    2094:	69 81       	ldd	r22, Y+1	; 0x01
    2096:	89 2b       	or	r24, r25
    2098:	e9 f0       	breq	.+58     	; 0x20d4 <main+0x158>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 44 03 	call	0x688	; 0x688 <terminate_serial>
    20a2:	0e 94 74 05 	call	0xae8	; 0xae8 <check_database_integrity>
    20a6:	80 91 80 03 	lds	r24, 0x0380
    20aa:	90 91 81 03 	lds	r25, 0x0381
    20ae:	89 2b       	or	r24, r25
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <main+0x138>
    20b2:	49 c0       	rjmp	.+146    	; 0x2146 <main+0x1ca>
    20b4:	0e 94 89 08 	call	0x1112	; 0x1112 <lcd_init>
    20b8:	83 e6       	ldi	r24, 0x63	; 99
    20ba:	93 e0       	ldi	r25, 0x03	; 3
    20bc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <string_write>
    20c0:	2f e3       	ldi	r18, 0x3F	; 63
    20c2:	8d e0       	ldi	r24, 0x0D	; 13
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	21 50       	subi	r18, 0x01	; 1
    20c8:	80 40       	sbci	r24, 0x00	; 0
    20ca:	90 40       	sbci	r25, 0x00	; 0
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <main+0x14a>
    20ce:	00 c0       	rjmp	.+0      	; 0x20d0 <main+0x154>
    20d0:	00 00       	nop
    20d2:	82 cf       	rjmp	.-252    	; 0x1fd8 <main+0x5c>
    20d4:	80 91 84 03 	lds	r24, 0x0384
    20d8:	90 91 85 03 	lds	r25, 0x0385
    20dc:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eewr_byte_m1284p>
    20e0:	80 91 84 03 	lds	r24, 0x0384
    20e4:	90 91 85 03 	lds	r25, 0x0385
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	90 93 85 03 	sts	0x0385, r25
    20ee:	80 93 84 03 	sts	0x0384, r24
    20f2:	72 cf       	rjmp	.-284    	; 0x1fd8 <main+0x5c>
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	60 91 da 03 	lds	r22, 0x03DA
    2100:	70 91 db 03 	lds	r23, 0x03DB
    2104:	80 91 dc 03 	lds	r24, 0x03DC
    2108:	90 91 dd 03 	lds	r25, 0x03DD
    210c:	0e 94 ab 10 	call	0x2156	; 0x2156 <__addsf3>
    2110:	60 93 da 03 	sts	0x03DA, r22
    2114:	70 93 db 03 	sts	0x03DB, r23
    2118:	80 93 dc 03 	sts	0x03DC, r24
    211c:	90 93 dd 03 	sts	0x03DD, r25
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e5       	ldi	r19, 0x50	; 80
    2124:	43 e4       	ldi	r20, 0x43	; 67
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
    212c:	18 16       	cp	r1, r24
    212e:	0c f0       	brlt	.+2      	; 0x2132 <main+0x1b6>
    2130:	53 cf       	rjmp	.-346    	; 0x1fd8 <main+0x5c>
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 44 03 	call	0x688	; 0x688 <terminate_serial>
    213a:	60 e2       	ldi	r22, 0x20	; 32
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 7f 03 	call	0x6fe	; 0x6fe <print_eeprom_contents>
    2146:	0e 94 38 05 	call	0xa70	; 0xa70 <wipe_eeprom>
    214a:	10 93 87 03 	sts	0x0387, r17
    214e:	00 93 86 03 	sts	0x0386, r16
    2152:	42 cf       	rjmp	.-380    	; 0x1fd8 <main+0x5c>

00002154 <__subsf3>:
    2154:	50 58       	subi	r21, 0x80	; 128

00002156 <__addsf3>:
    2156:	bb 27       	eor	r27, r27
    2158:	aa 27       	eor	r26, r26
    215a:	0e d0       	rcall	.+28     	; 0x2178 <__addsf3x>
    215c:	63 c2       	rjmp	.+1222   	; 0x2624 <__fp_round>
    215e:	2c d2       	rcall	.+1112   	; 0x25b8 <__fp_pscA>
    2160:	30 f0       	brcs	.+12     	; 0x216e <__addsf3+0x18>
    2162:	31 d2       	rcall	.+1122   	; 0x25c6 <__fp_pscB>
    2164:	20 f0       	brcs	.+8      	; 0x216e <__addsf3+0x18>
    2166:	31 f4       	brne	.+12     	; 0x2174 <__addsf3+0x1e>
    2168:	9f 3f       	cpi	r25, 0xFF	; 255
    216a:	11 f4       	brne	.+4      	; 0x2170 <__addsf3+0x1a>
    216c:	1e f4       	brtc	.+6      	; 0x2174 <__addsf3+0x1e>
    216e:	fc c1       	rjmp	.+1016   	; 0x2568 <__fp_nan>
    2170:	0e f4       	brtc	.+2      	; 0x2174 <__addsf3+0x1e>
    2172:	e0 95       	com	r30
    2174:	e7 fb       	bst	r30, 7
    2176:	c9 c1       	rjmp	.+914    	; 0x250a <__fp_inf>

00002178 <__addsf3x>:
    2178:	e9 2f       	mov	r30, r25
    217a:	76 d2       	rcall	.+1260   	; 0x2668 <__fp_split3>
    217c:	80 f3       	brcs	.-32     	; 0x215e <__addsf3+0x8>
    217e:	ba 17       	cp	r27, r26
    2180:	62 07       	cpc	r22, r18
    2182:	73 07       	cpc	r23, r19
    2184:	84 07       	cpc	r24, r20
    2186:	95 07       	cpc	r25, r21
    2188:	18 f0       	brcs	.+6      	; 0x2190 <__addsf3x+0x18>
    218a:	71 f4       	brne	.+28     	; 0x21a8 <__addsf3x+0x30>
    218c:	9e f5       	brtc	.+102    	; 0x21f4 <__addsf3x+0x7c>
    218e:	a5 c2       	rjmp	.+1354   	; 0x26da <__fp_zero>
    2190:	0e f4       	brtc	.+2      	; 0x2194 <__addsf3x+0x1c>
    2192:	e0 95       	com	r30
    2194:	0b 2e       	mov	r0, r27
    2196:	ba 2f       	mov	r27, r26
    2198:	a0 2d       	mov	r26, r0
    219a:	0b 01       	movw	r0, r22
    219c:	b9 01       	movw	r22, r18
    219e:	90 01       	movw	r18, r0
    21a0:	0c 01       	movw	r0, r24
    21a2:	ca 01       	movw	r24, r20
    21a4:	a0 01       	movw	r20, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	ff 27       	eor	r31, r31
    21aa:	59 1b       	sub	r21, r25
    21ac:	99 f0       	breq	.+38     	; 0x21d4 <__addsf3x+0x5c>
    21ae:	59 3f       	cpi	r21, 0xF9	; 249
    21b0:	50 f4       	brcc	.+20     	; 0x21c6 <__addsf3x+0x4e>
    21b2:	50 3e       	cpi	r21, 0xE0	; 224
    21b4:	68 f1       	brcs	.+90     	; 0x2210 <__addsf3x+0x98>
    21b6:	1a 16       	cp	r1, r26
    21b8:	f0 40       	sbci	r31, 0x00	; 0
    21ba:	a2 2f       	mov	r26, r18
    21bc:	23 2f       	mov	r18, r19
    21be:	34 2f       	mov	r19, r20
    21c0:	44 27       	eor	r20, r20
    21c2:	58 5f       	subi	r21, 0xF8	; 248
    21c4:	f3 cf       	rjmp	.-26     	; 0x21ac <__addsf3x+0x34>
    21c6:	46 95       	lsr	r20
    21c8:	37 95       	ror	r19
    21ca:	27 95       	ror	r18
    21cc:	a7 95       	ror	r26
    21ce:	f0 40       	sbci	r31, 0x00	; 0
    21d0:	53 95       	inc	r21
    21d2:	c9 f7       	brne	.-14     	; 0x21c6 <__addsf3x+0x4e>
    21d4:	7e f4       	brtc	.+30     	; 0x21f4 <__addsf3x+0x7c>
    21d6:	1f 16       	cp	r1, r31
    21d8:	ba 0b       	sbc	r27, r26
    21da:	62 0b       	sbc	r22, r18
    21dc:	73 0b       	sbc	r23, r19
    21de:	84 0b       	sbc	r24, r20
    21e0:	ba f0       	brmi	.+46     	; 0x2210 <__addsf3x+0x98>
    21e2:	91 50       	subi	r25, 0x01	; 1
    21e4:	a1 f0       	breq	.+40     	; 0x220e <__addsf3x+0x96>
    21e6:	ff 0f       	add	r31, r31
    21e8:	bb 1f       	adc	r27, r27
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	c2 f7       	brpl	.-16     	; 0x21e2 <__addsf3x+0x6a>
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <__addsf3x+0x98>
    21f4:	ba 0f       	add	r27, r26
    21f6:	62 1f       	adc	r22, r18
    21f8:	73 1f       	adc	r23, r19
    21fa:	84 1f       	adc	r24, r20
    21fc:	48 f4       	brcc	.+18     	; 0x2210 <__addsf3x+0x98>
    21fe:	87 95       	ror	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	b7 95       	ror	r27
    2206:	f7 95       	ror	r31
    2208:	9e 3f       	cpi	r25, 0xFE	; 254
    220a:	08 f0       	brcs	.+2      	; 0x220e <__addsf3x+0x96>
    220c:	b3 cf       	rjmp	.-154    	; 0x2174 <__addsf3+0x1e>
    220e:	93 95       	inc	r25
    2210:	88 0f       	add	r24, r24
    2212:	08 f0       	brcs	.+2      	; 0x2216 <__addsf3x+0x9e>
    2214:	99 27       	eor	r25, r25
    2216:	ee 0f       	add	r30, r30
    2218:	97 95       	ror	r25
    221a:	87 95       	ror	r24
    221c:	08 95       	ret
    221e:	cc d1       	rcall	.+920    	; 0x25b8 <__fp_pscA>
    2220:	58 f0       	brcs	.+22     	; 0x2238 <__addsf3x+0xc0>
    2222:	80 e8       	ldi	r24, 0x80	; 128
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	09 f4       	brne	.+2      	; 0x222a <__addsf3x+0xb2>
    2228:	9e ef       	ldi	r25, 0xFE	; 254
    222a:	cd d1       	rcall	.+922    	; 0x25c6 <__fp_pscB>
    222c:	28 f0       	brcs	.+10     	; 0x2238 <__addsf3x+0xc0>
    222e:	40 e8       	ldi	r20, 0x80	; 128
    2230:	51 e0       	ldi	r21, 0x01	; 1
    2232:	59 f4       	brne	.+22     	; 0x224a <atan2+0xe>
    2234:	5e ef       	ldi	r21, 0xFE	; 254
    2236:	09 c0       	rjmp	.+18     	; 0x224a <atan2+0xe>
    2238:	97 c1       	rjmp	.+814    	; 0x2568 <__fp_nan>
    223a:	4f c2       	rjmp	.+1182   	; 0x26da <__fp_zero>

0000223c <atan2>:
    223c:	e9 2f       	mov	r30, r25
    223e:	e0 78       	andi	r30, 0x80	; 128
    2240:	13 d2       	rcall	.+1062   	; 0x2668 <__fp_split3>
    2242:	68 f3       	brcs	.-38     	; 0x221e <__addsf3x+0xa6>
    2244:	09 2e       	mov	r0, r25
    2246:	05 2a       	or	r0, r21
    2248:	c1 f3       	breq	.-16     	; 0x223a <__addsf3x+0xc2>
    224a:	26 17       	cp	r18, r22
    224c:	37 07       	cpc	r19, r23
    224e:	48 07       	cpc	r20, r24
    2250:	59 07       	cpc	r21, r25
    2252:	38 f0       	brcs	.+14     	; 0x2262 <atan2+0x26>
    2254:	0e 2e       	mov	r0, r30
    2256:	07 f8       	bld	r0, 7
    2258:	e0 25       	eor	r30, r0
    225a:	69 f0       	breq	.+26     	; 0x2276 <atan2+0x3a>
    225c:	e0 25       	eor	r30, r0
    225e:	e0 64       	ori	r30, 0x40	; 64
    2260:	0a c0       	rjmp	.+20     	; 0x2276 <atan2+0x3a>
    2262:	ef 63       	ori	r30, 0x3F	; 63
    2264:	07 f8       	bld	r0, 7
    2266:	00 94       	com	r0
    2268:	07 fa       	bst	r0, 7
    226a:	db 01       	movw	r26, r22
    226c:	b9 01       	movw	r22, r18
    226e:	9d 01       	movw	r18, r26
    2270:	dc 01       	movw	r26, r24
    2272:	ca 01       	movw	r24, r20
    2274:	ad 01       	movw	r20, r26
    2276:	ef 93       	push	r30
    2278:	4a d0       	rcall	.+148    	; 0x230e <__divsf3_pse>
    227a:	d4 d1       	rcall	.+936    	; 0x2624 <__fp_round>
    227c:	0a d0       	rcall	.+20     	; 0x2292 <atan>
    227e:	5f 91       	pop	r21
    2280:	55 23       	and	r21, r21
    2282:	31 f0       	breq	.+12     	; 0x2290 <atan2+0x54>
    2284:	2b ed       	ldi	r18, 0xDB	; 219
    2286:	3f e0       	ldi	r19, 0x0F	; 15
    2288:	49 e4       	ldi	r20, 0x49	; 73
    228a:	50 fd       	sbrc	r21, 0
    228c:	49 ec       	ldi	r20, 0xC9	; 201
    228e:	63 cf       	rjmp	.-314    	; 0x2156 <__addsf3>
    2290:	08 95       	ret

00002292 <atan>:
    2292:	df 93       	push	r29
    2294:	dd 27       	eor	r29, r29
    2296:	b9 2f       	mov	r27, r25
    2298:	bf 77       	andi	r27, 0x7F	; 127
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	16 16       	cp	r1, r22
    22a0:	17 06       	cpc	r1, r23
    22a2:	48 07       	cpc	r20, r24
    22a4:	5b 07       	cpc	r21, r27
    22a6:	10 f4       	brcc	.+4      	; 0x22ac <atan+0x1a>
    22a8:	d9 2f       	mov	r29, r25
    22aa:	22 d2       	rcall	.+1092   	; 0x26f0 <inverse>
    22ac:	9f 93       	push	r25
    22ae:	8f 93       	push	r24
    22b0:	7f 93       	push	r23
    22b2:	6f 93       	push	r22
    22b4:	b9 d3       	rcall	.+1906   	; 0x2a28 <square>
    22b6:	e4 eb       	ldi	r30, 0xB4	; 180
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	59 d1       	rcall	.+690    	; 0x256e <__fp_powser>
    22bc:	b3 d1       	rcall	.+870    	; 0x2624 <__fp_round>
    22be:	2f 91       	pop	r18
    22c0:	3f 91       	pop	r19
    22c2:	4f 91       	pop	r20
    22c4:	5f 91       	pop	r21
    22c6:	a5 d2       	rcall	.+1354   	; 0x2812 <__mulsf3x>
    22c8:	dd 23       	and	r29, r29
    22ca:	49 f0       	breq	.+18     	; 0x22de <atan+0x4c>
    22cc:	90 58       	subi	r25, 0x80	; 128
    22ce:	a2 ea       	ldi	r26, 0xA2	; 162
    22d0:	2a ed       	ldi	r18, 0xDA	; 218
    22d2:	3f e0       	ldi	r19, 0x0F	; 15
    22d4:	49 ec       	ldi	r20, 0xC9	; 201
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	d0 78       	andi	r29, 0x80	; 128
    22da:	5d 27       	eor	r21, r29
    22dc:	4d df       	rcall	.-358    	; 0x2178 <__addsf3x>
    22de:	df 91       	pop	r29
    22e0:	a1 c1       	rjmp	.+834    	; 0x2624 <__fp_round>

000022e2 <__cmpsf2>:
    22e2:	ef d0       	rcall	.+478    	; 0x24c2 <__fp_cmp>
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <__cmpsf2+0x6>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	08 95       	ret

000022ea <cos>:
    22ea:	75 d1       	rcall	.+746    	; 0x25d6 <__fp_rempio2>
    22ec:	e3 95       	inc	r30
    22ee:	ab c1       	rjmp	.+854    	; 0x2646 <__fp_sinus>

000022f0 <__divsf3>:
    22f0:	0c d0       	rcall	.+24     	; 0x230a <__divsf3x>
    22f2:	98 c1       	rjmp	.+816    	; 0x2624 <__fp_round>
    22f4:	68 d1       	rcall	.+720    	; 0x25c6 <__fp_pscB>
    22f6:	40 f0       	brcs	.+16     	; 0x2308 <__divsf3+0x18>
    22f8:	5f d1       	rcall	.+702    	; 0x25b8 <__fp_pscA>
    22fa:	30 f0       	brcs	.+12     	; 0x2308 <__divsf3+0x18>
    22fc:	21 f4       	brne	.+8      	; 0x2306 <__divsf3+0x16>
    22fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2300:	19 f0       	breq	.+6      	; 0x2308 <__divsf3+0x18>
    2302:	03 c1       	rjmp	.+518    	; 0x250a <__fp_inf>
    2304:	51 11       	cpse	r21, r1
    2306:	ea c1       	rjmp	.+980    	; 0x26dc <__fp_szero>
    2308:	2f c1       	rjmp	.+606    	; 0x2568 <__fp_nan>

0000230a <__divsf3x>:
    230a:	ae d1       	rcall	.+860    	; 0x2668 <__fp_split3>
    230c:	98 f3       	brcs	.-26     	; 0x22f4 <__divsf3+0x4>

0000230e <__divsf3_pse>:
    230e:	99 23       	and	r25, r25
    2310:	c9 f3       	breq	.-14     	; 0x2304 <__divsf3+0x14>
    2312:	55 23       	and	r21, r21
    2314:	b1 f3       	breq	.-20     	; 0x2302 <__divsf3+0x12>
    2316:	95 1b       	sub	r25, r21
    2318:	55 0b       	sbc	r21, r21
    231a:	bb 27       	eor	r27, r27
    231c:	aa 27       	eor	r26, r26
    231e:	62 17       	cp	r22, r18
    2320:	73 07       	cpc	r23, r19
    2322:	84 07       	cpc	r24, r20
    2324:	38 f0       	brcs	.+14     	; 0x2334 <__divsf3_pse+0x26>
    2326:	9f 5f       	subi	r25, 0xFF	; 255
    2328:	5f 4f       	sbci	r21, 0xFF	; 255
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	44 1f       	adc	r20, r20
    2330:	aa 1f       	adc	r26, r26
    2332:	a9 f3       	breq	.-22     	; 0x231e <__divsf3_pse+0x10>
    2334:	33 d0       	rcall	.+102    	; 0x239c <__divsf3_pse+0x8e>
    2336:	0e 2e       	mov	r0, r30
    2338:	3a f0       	brmi	.+14     	; 0x2348 <__divsf3_pse+0x3a>
    233a:	e0 e8       	ldi	r30, 0x80	; 128
    233c:	30 d0       	rcall	.+96     	; 0x239e <__divsf3_pse+0x90>
    233e:	91 50       	subi	r25, 0x01	; 1
    2340:	50 40       	sbci	r21, 0x00	; 0
    2342:	e6 95       	lsr	r30
    2344:	00 1c       	adc	r0, r0
    2346:	ca f7       	brpl	.-14     	; 0x233a <__divsf3_pse+0x2c>
    2348:	29 d0       	rcall	.+82     	; 0x239c <__divsf3_pse+0x8e>
    234a:	fe 2f       	mov	r31, r30
    234c:	27 d0       	rcall	.+78     	; 0x239c <__divsf3_pse+0x8e>
    234e:	66 0f       	add	r22, r22
    2350:	77 1f       	adc	r23, r23
    2352:	88 1f       	adc	r24, r24
    2354:	bb 1f       	adc	r27, r27
    2356:	26 17       	cp	r18, r22
    2358:	37 07       	cpc	r19, r23
    235a:	48 07       	cpc	r20, r24
    235c:	ab 07       	cpc	r26, r27
    235e:	b0 e8       	ldi	r27, 0x80	; 128
    2360:	09 f0       	breq	.+2      	; 0x2364 <__divsf3_pse+0x56>
    2362:	bb 0b       	sbc	r27, r27
    2364:	80 2d       	mov	r24, r0
    2366:	bf 01       	movw	r22, r30
    2368:	ff 27       	eor	r31, r31
    236a:	93 58       	subi	r25, 0x83	; 131
    236c:	5f 4f       	sbci	r21, 0xFF	; 255
    236e:	2a f0       	brmi	.+10     	; 0x237a <__divsf3_pse+0x6c>
    2370:	9e 3f       	cpi	r25, 0xFE	; 254
    2372:	51 05       	cpc	r21, r1
    2374:	68 f0       	brcs	.+26     	; 0x2390 <__divsf3_pse+0x82>
    2376:	c9 c0       	rjmp	.+402    	; 0x250a <__fp_inf>
    2378:	b1 c1       	rjmp	.+866    	; 0x26dc <__fp_szero>
    237a:	5f 3f       	cpi	r21, 0xFF	; 255
    237c:	ec f3       	brlt	.-6      	; 0x2378 <__divsf3_pse+0x6a>
    237e:	98 3e       	cpi	r25, 0xE8	; 232
    2380:	dc f3       	brlt	.-10     	; 0x2378 <__divsf3_pse+0x6a>
    2382:	86 95       	lsr	r24
    2384:	77 95       	ror	r23
    2386:	67 95       	ror	r22
    2388:	b7 95       	ror	r27
    238a:	f7 95       	ror	r31
    238c:	9f 5f       	subi	r25, 0xFF	; 255
    238e:	c9 f7       	brne	.-14     	; 0x2382 <__divsf3_pse+0x74>
    2390:	88 0f       	add	r24, r24
    2392:	91 1d       	adc	r25, r1
    2394:	96 95       	lsr	r25
    2396:	87 95       	ror	r24
    2398:	97 f9       	bld	r25, 7
    239a:	08 95       	ret
    239c:	e1 e0       	ldi	r30, 0x01	; 1
    239e:	66 0f       	add	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	88 1f       	adc	r24, r24
    23a4:	bb 1f       	adc	r27, r27
    23a6:	62 17       	cp	r22, r18
    23a8:	73 07       	cpc	r23, r19
    23aa:	84 07       	cpc	r24, r20
    23ac:	ba 07       	cpc	r27, r26
    23ae:	20 f0       	brcs	.+8      	; 0x23b8 <__divsf3_pse+0xaa>
    23b0:	62 1b       	sub	r22, r18
    23b2:	73 0b       	sbc	r23, r19
    23b4:	84 0b       	sbc	r24, r20
    23b6:	ba 0b       	sbc	r27, r26
    23b8:	ee 1f       	adc	r30, r30
    23ba:	88 f7       	brcc	.-30     	; 0x239e <__divsf3_pse+0x90>
    23bc:	e0 95       	com	r30
    23be:	08 95       	ret

000023c0 <__fixsfsi>:
    23c0:	04 d0       	rcall	.+8      	; 0x23ca <__fixunssfsi>
    23c2:	68 94       	set
    23c4:	b1 11       	cpse	r27, r1
    23c6:	8a c1       	rjmp	.+788    	; 0x26dc <__fp_szero>
    23c8:	08 95       	ret

000023ca <__fixunssfsi>:
    23ca:	56 d1       	rcall	.+684    	; 0x2678 <__fp_splitA>
    23cc:	88 f0       	brcs	.+34     	; 0x23f0 <__fixunssfsi+0x26>
    23ce:	9f 57       	subi	r25, 0x7F	; 127
    23d0:	90 f0       	brcs	.+36     	; 0x23f6 <__fixunssfsi+0x2c>
    23d2:	b9 2f       	mov	r27, r25
    23d4:	99 27       	eor	r25, r25
    23d6:	b7 51       	subi	r27, 0x17	; 23
    23d8:	a0 f0       	brcs	.+40     	; 0x2402 <__fixunssfsi+0x38>
    23da:	d1 f0       	breq	.+52     	; 0x2410 <__fixunssfsi+0x46>
    23dc:	66 0f       	add	r22, r22
    23de:	77 1f       	adc	r23, r23
    23e0:	88 1f       	adc	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	1a f0       	brmi	.+6      	; 0x23ec <__fixunssfsi+0x22>
    23e6:	ba 95       	dec	r27
    23e8:	c9 f7       	brne	.-14     	; 0x23dc <__fixunssfsi+0x12>
    23ea:	12 c0       	rjmp	.+36     	; 0x2410 <__fixunssfsi+0x46>
    23ec:	b1 30       	cpi	r27, 0x01	; 1
    23ee:	81 f0       	breq	.+32     	; 0x2410 <__fixunssfsi+0x46>
    23f0:	74 d1       	rcall	.+744    	; 0x26da <__fp_zero>
    23f2:	b1 e0       	ldi	r27, 0x01	; 1
    23f4:	08 95       	ret
    23f6:	71 c1       	rjmp	.+738    	; 0x26da <__fp_zero>
    23f8:	67 2f       	mov	r22, r23
    23fa:	78 2f       	mov	r23, r24
    23fc:	88 27       	eor	r24, r24
    23fe:	b8 5f       	subi	r27, 0xF8	; 248
    2400:	39 f0       	breq	.+14     	; 0x2410 <__fixunssfsi+0x46>
    2402:	b9 3f       	cpi	r27, 0xF9	; 249
    2404:	cc f3       	brlt	.-14     	; 0x23f8 <__fixunssfsi+0x2e>
    2406:	86 95       	lsr	r24
    2408:	77 95       	ror	r23
    240a:	67 95       	ror	r22
    240c:	b3 95       	inc	r27
    240e:	d9 f7       	brne	.-10     	; 0x2406 <__fixunssfsi+0x3c>
    2410:	3e f4       	brtc	.+14     	; 0x2420 <__fixunssfsi+0x56>
    2412:	90 95       	com	r25
    2414:	80 95       	com	r24
    2416:	70 95       	com	r23
    2418:	61 95       	neg	r22
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	8f 4f       	sbci	r24, 0xFF	; 255
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	08 95       	ret

00002422 <__floatunsisf>:
    2422:	e8 94       	clt
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <__floatsisf+0x12>

00002426 <__floatsisf>:
    2426:	97 fb       	bst	r25, 7
    2428:	3e f4       	brtc	.+14     	; 0x2438 <__floatsisf+0x12>
    242a:	90 95       	com	r25
    242c:	80 95       	com	r24
    242e:	70 95       	com	r23
    2430:	61 95       	neg	r22
    2432:	7f 4f       	sbci	r23, 0xFF	; 255
    2434:	8f 4f       	sbci	r24, 0xFF	; 255
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	99 23       	and	r25, r25
    243a:	a9 f0       	breq	.+42     	; 0x2466 <__floatsisf+0x40>
    243c:	f9 2f       	mov	r31, r25
    243e:	96 e9       	ldi	r25, 0x96	; 150
    2440:	bb 27       	eor	r27, r27
    2442:	93 95       	inc	r25
    2444:	f6 95       	lsr	r31
    2446:	87 95       	ror	r24
    2448:	77 95       	ror	r23
    244a:	67 95       	ror	r22
    244c:	b7 95       	ror	r27
    244e:	f1 11       	cpse	r31, r1
    2450:	f8 cf       	rjmp	.-16     	; 0x2442 <__floatsisf+0x1c>
    2452:	fa f4       	brpl	.+62     	; 0x2492 <__floatsisf+0x6c>
    2454:	bb 0f       	add	r27, r27
    2456:	11 f4       	brne	.+4      	; 0x245c <__floatsisf+0x36>
    2458:	60 ff       	sbrs	r22, 0
    245a:	1b c0       	rjmp	.+54     	; 0x2492 <__floatsisf+0x6c>
    245c:	6f 5f       	subi	r22, 0xFF	; 255
    245e:	7f 4f       	sbci	r23, 0xFF	; 255
    2460:	8f 4f       	sbci	r24, 0xFF	; 255
    2462:	9f 4f       	sbci	r25, 0xFF	; 255
    2464:	16 c0       	rjmp	.+44     	; 0x2492 <__floatsisf+0x6c>
    2466:	88 23       	and	r24, r24
    2468:	11 f0       	breq	.+4      	; 0x246e <__floatsisf+0x48>
    246a:	96 e9       	ldi	r25, 0x96	; 150
    246c:	11 c0       	rjmp	.+34     	; 0x2490 <__floatsisf+0x6a>
    246e:	77 23       	and	r23, r23
    2470:	21 f0       	breq	.+8      	; 0x247a <__floatsisf+0x54>
    2472:	9e e8       	ldi	r25, 0x8E	; 142
    2474:	87 2f       	mov	r24, r23
    2476:	76 2f       	mov	r23, r22
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <__floatsisf+0x5e>
    247a:	66 23       	and	r22, r22
    247c:	71 f0       	breq	.+28     	; 0x249a <__floatsisf+0x74>
    247e:	96 e8       	ldi	r25, 0x86	; 134
    2480:	86 2f       	mov	r24, r22
    2482:	70 e0       	ldi	r23, 0x00	; 0
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	2a f0       	brmi	.+10     	; 0x2492 <__floatsisf+0x6c>
    2488:	9a 95       	dec	r25
    248a:	66 0f       	add	r22, r22
    248c:	77 1f       	adc	r23, r23
    248e:	88 1f       	adc	r24, r24
    2490:	da f7       	brpl	.-10     	; 0x2488 <__floatsisf+0x62>
    2492:	88 0f       	add	r24, r24
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	97 f9       	bld	r25, 7
    249a:	08 95       	ret

0000249c <floor>:
    249c:	07 d1       	rcall	.+526    	; 0x26ac <__fp_trunc>
    249e:	80 f0       	brcs	.+32     	; 0x24c0 <floor+0x24>
    24a0:	9f 37       	cpi	r25, 0x7F	; 127
    24a2:	40 f4       	brcc	.+16     	; 0x24b4 <floor+0x18>
    24a4:	91 11       	cpse	r25, r1
    24a6:	0e f0       	brts	.+2      	; 0x24aa <floor+0xe>
    24a8:	19 c1       	rjmp	.+562    	; 0x26dc <__fp_szero>
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	80 e8       	ldi	r24, 0x80	; 128
    24b0:	9f eb       	ldi	r25, 0xBF	; 191
    24b2:	08 95       	ret
    24b4:	26 f4       	brtc	.+8      	; 0x24be <floor+0x22>
    24b6:	1b 16       	cp	r1, r27
    24b8:	61 1d       	adc	r22, r1
    24ba:	71 1d       	adc	r23, r1
    24bc:	81 1d       	adc	r24, r1
    24be:	2b c0       	rjmp	.+86     	; 0x2516 <__fp_mintl>
    24c0:	45 c0       	rjmp	.+138    	; 0x254c <__fp_mpack>

000024c2 <__fp_cmp>:
    24c2:	99 0f       	add	r25, r25
    24c4:	00 08       	sbc	r0, r0
    24c6:	55 0f       	add	r21, r21
    24c8:	aa 0b       	sbc	r26, r26
    24ca:	e0 e8       	ldi	r30, 0x80	; 128
    24cc:	fe ef       	ldi	r31, 0xFE	; 254
    24ce:	16 16       	cp	r1, r22
    24d0:	17 06       	cpc	r1, r23
    24d2:	e8 07       	cpc	r30, r24
    24d4:	f9 07       	cpc	r31, r25
    24d6:	c0 f0       	brcs	.+48     	; 0x2508 <__fp_cmp+0x46>
    24d8:	12 16       	cp	r1, r18
    24da:	13 06       	cpc	r1, r19
    24dc:	e4 07       	cpc	r30, r20
    24de:	f5 07       	cpc	r31, r21
    24e0:	98 f0       	brcs	.+38     	; 0x2508 <__fp_cmp+0x46>
    24e2:	62 1b       	sub	r22, r18
    24e4:	73 0b       	sbc	r23, r19
    24e6:	84 0b       	sbc	r24, r20
    24e8:	95 0b       	sbc	r25, r21
    24ea:	39 f4       	brne	.+14     	; 0x24fa <__fp_cmp+0x38>
    24ec:	0a 26       	eor	r0, r26
    24ee:	61 f0       	breq	.+24     	; 0x2508 <__fp_cmp+0x46>
    24f0:	23 2b       	or	r18, r19
    24f2:	24 2b       	or	r18, r20
    24f4:	25 2b       	or	r18, r21
    24f6:	21 f4       	brne	.+8      	; 0x2500 <__fp_cmp+0x3e>
    24f8:	08 95       	ret
    24fa:	0a 26       	eor	r0, r26
    24fc:	09 f4       	brne	.+2      	; 0x2500 <__fp_cmp+0x3e>
    24fe:	a1 40       	sbci	r26, 0x01	; 1
    2500:	a6 95       	lsr	r26
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	81 1d       	adc	r24, r1
    2506:	81 1d       	adc	r24, r1
    2508:	08 95       	ret

0000250a <__fp_inf>:
    250a:	97 f9       	bld	r25, 7
    250c:	9f 67       	ori	r25, 0x7F	; 127
    250e:	80 e8       	ldi	r24, 0x80	; 128
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	08 95       	ret

00002516 <__fp_mintl>:
    2516:	88 23       	and	r24, r24
    2518:	71 f4       	brne	.+28     	; 0x2536 <__fp_mintl+0x20>
    251a:	77 23       	and	r23, r23
    251c:	21 f0       	breq	.+8      	; 0x2526 <__fp_mintl+0x10>
    251e:	98 50       	subi	r25, 0x08	; 8
    2520:	87 2b       	or	r24, r23
    2522:	76 2f       	mov	r23, r22
    2524:	07 c0       	rjmp	.+14     	; 0x2534 <__fp_mintl+0x1e>
    2526:	66 23       	and	r22, r22
    2528:	11 f4       	brne	.+4      	; 0x252e <__fp_mintl+0x18>
    252a:	99 27       	eor	r25, r25
    252c:	0d c0       	rjmp	.+26     	; 0x2548 <__fp_mintl+0x32>
    252e:	90 51       	subi	r25, 0x10	; 16
    2530:	86 2b       	or	r24, r22
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	2a f0       	brmi	.+10     	; 0x2542 <__fp_mintl+0x2c>
    2538:	9a 95       	dec	r25
    253a:	66 0f       	add	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	da f7       	brpl	.-10     	; 0x2538 <__fp_mintl+0x22>
    2542:	88 0f       	add	r24, r24
    2544:	96 95       	lsr	r25
    2546:	87 95       	ror	r24
    2548:	97 f9       	bld	r25, 7
    254a:	08 95       	ret

0000254c <__fp_mpack>:
    254c:	9f 3f       	cpi	r25, 0xFF	; 255
    254e:	31 f0       	breq	.+12     	; 0x255c <__fp_mpack_finite+0xc>

00002550 <__fp_mpack_finite>:
    2550:	91 50       	subi	r25, 0x01	; 1
    2552:	20 f4       	brcc	.+8      	; 0x255c <__fp_mpack_finite+0xc>
    2554:	87 95       	ror	r24
    2556:	77 95       	ror	r23
    2558:	67 95       	ror	r22
    255a:	b7 95       	ror	r27
    255c:	88 0f       	add	r24, r24
    255e:	91 1d       	adc	r25, r1
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	97 f9       	bld	r25, 7
    2566:	08 95       	ret

00002568 <__fp_nan>:
    2568:	9f ef       	ldi	r25, 0xFF	; 255
    256a:	80 ec       	ldi	r24, 0xC0	; 192
    256c:	08 95       	ret

0000256e <__fp_powser>:
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	1f 93       	push	r17
    2574:	0f 93       	push	r16
    2576:	ff 92       	push	r15
    2578:	ef 92       	push	r14
    257a:	df 92       	push	r13
    257c:	7b 01       	movw	r14, r22
    257e:	8c 01       	movw	r16, r24
    2580:	68 94       	set
    2582:	05 c0       	rjmp	.+10     	; 0x258e <__fp_powser+0x20>
    2584:	da 2e       	mov	r13, r26
    2586:	ef 01       	movw	r28, r30
    2588:	44 d1       	rcall	.+648    	; 0x2812 <__mulsf3x>
    258a:	fe 01       	movw	r30, r28
    258c:	e8 94       	clt
    258e:	a5 91       	lpm	r26, Z+
    2590:	25 91       	lpm	r18, Z+
    2592:	35 91       	lpm	r19, Z+
    2594:	45 91       	lpm	r20, Z+
    2596:	55 91       	lpm	r21, Z+
    2598:	ae f3       	brts	.-22     	; 0x2584 <__fp_powser+0x16>
    259a:	ef 01       	movw	r28, r30
    259c:	ed dd       	rcall	.-1062   	; 0x2178 <__addsf3x>
    259e:	fe 01       	movw	r30, r28
    25a0:	97 01       	movw	r18, r14
    25a2:	a8 01       	movw	r20, r16
    25a4:	da 94       	dec	r13
    25a6:	79 f7       	brne	.-34     	; 0x2586 <__fp_powser+0x18>
    25a8:	df 90       	pop	r13
    25aa:	ef 90       	pop	r14
    25ac:	ff 90       	pop	r15
    25ae:	0f 91       	pop	r16
    25b0:	1f 91       	pop	r17
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <__fp_pscA>:
    25b8:	00 24       	eor	r0, r0
    25ba:	0a 94       	dec	r0
    25bc:	16 16       	cp	r1, r22
    25be:	17 06       	cpc	r1, r23
    25c0:	18 06       	cpc	r1, r24
    25c2:	09 06       	cpc	r0, r25
    25c4:	08 95       	ret

000025c6 <__fp_pscB>:
    25c6:	00 24       	eor	r0, r0
    25c8:	0a 94       	dec	r0
    25ca:	12 16       	cp	r1, r18
    25cc:	13 06       	cpc	r1, r19
    25ce:	14 06       	cpc	r1, r20
    25d0:	05 06       	cpc	r0, r21
    25d2:	08 95       	ret
    25d4:	c9 cf       	rjmp	.-110    	; 0x2568 <__fp_nan>

000025d6 <__fp_rempio2>:
    25d6:	50 d0       	rcall	.+160    	; 0x2678 <__fp_splitA>
    25d8:	e8 f3       	brcs	.-6      	; 0x25d4 <__fp_pscB+0xe>
    25da:	e8 94       	clt
    25dc:	e0 e0       	ldi	r30, 0x00	; 0
    25de:	bb 27       	eor	r27, r27
    25e0:	9f 57       	subi	r25, 0x7F	; 127
    25e2:	f0 f0       	brcs	.+60     	; 0x2620 <__fp_rempio2+0x4a>
    25e4:	2a ed       	ldi	r18, 0xDA	; 218
    25e6:	3f e0       	ldi	r19, 0x0F	; 15
    25e8:	49 ec       	ldi	r20, 0xC9	; 201
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <__fp_rempio2+0x22>
    25ec:	ee 0f       	add	r30, r30
    25ee:	bb 0f       	add	r27, r27
    25f0:	66 1f       	adc	r22, r22
    25f2:	77 1f       	adc	r23, r23
    25f4:	88 1f       	adc	r24, r24
    25f6:	28 f0       	brcs	.+10     	; 0x2602 <__fp_rempio2+0x2c>
    25f8:	b2 3a       	cpi	r27, 0xA2	; 162
    25fa:	62 07       	cpc	r22, r18
    25fc:	73 07       	cpc	r23, r19
    25fe:	84 07       	cpc	r24, r20
    2600:	28 f0       	brcs	.+10     	; 0x260c <__fp_rempio2+0x36>
    2602:	b2 5a       	subi	r27, 0xA2	; 162
    2604:	62 0b       	sbc	r22, r18
    2606:	73 0b       	sbc	r23, r19
    2608:	84 0b       	sbc	r24, r20
    260a:	e3 95       	inc	r30
    260c:	9a 95       	dec	r25
    260e:	72 f7       	brpl	.-36     	; 0x25ec <__fp_rempio2+0x16>
    2610:	80 38       	cpi	r24, 0x80	; 128
    2612:	30 f4       	brcc	.+12     	; 0x2620 <__fp_rempio2+0x4a>
    2614:	9a 95       	dec	r25
    2616:	bb 0f       	add	r27, r27
    2618:	66 1f       	adc	r22, r22
    261a:	77 1f       	adc	r23, r23
    261c:	88 1f       	adc	r24, r24
    261e:	d2 f7       	brpl	.-12     	; 0x2614 <__fp_rempio2+0x3e>
    2620:	90 48       	sbci	r25, 0x80	; 128
    2622:	96 cf       	rjmp	.-212    	; 0x2550 <__fp_mpack_finite>

00002624 <__fp_round>:
    2624:	09 2e       	mov	r0, r25
    2626:	03 94       	inc	r0
    2628:	00 0c       	add	r0, r0
    262a:	11 f4       	brne	.+4      	; 0x2630 <__fp_round+0xc>
    262c:	88 23       	and	r24, r24
    262e:	52 f0       	brmi	.+20     	; 0x2644 <__fp_round+0x20>
    2630:	bb 0f       	add	r27, r27
    2632:	40 f4       	brcc	.+16     	; 0x2644 <__fp_round+0x20>
    2634:	bf 2b       	or	r27, r31
    2636:	11 f4       	brne	.+4      	; 0x263c <__fp_round+0x18>
    2638:	60 ff       	sbrs	r22, 0
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <__fp_round+0x20>
    263c:	6f 5f       	subi	r22, 0xFF	; 255
    263e:	7f 4f       	sbci	r23, 0xFF	; 255
    2640:	8f 4f       	sbci	r24, 0xFF	; 255
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	08 95       	ret

00002646 <__fp_sinus>:
    2646:	ef 93       	push	r30
    2648:	e0 ff       	sbrs	r30, 0
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <__fp_sinus+0x12>
    264c:	a2 ea       	ldi	r26, 0xA2	; 162
    264e:	2a ed       	ldi	r18, 0xDA	; 218
    2650:	3f e0       	ldi	r19, 0x0F	; 15
    2652:	49 ec       	ldi	r20, 0xC9	; 201
    2654:	5f eb       	ldi	r21, 0xBF	; 191
    2656:	90 dd       	rcall	.-1248   	; 0x2178 <__addsf3x>
    2658:	e5 df       	rcall	.-54     	; 0x2624 <__fp_round>
    265a:	0f 90       	pop	r0
    265c:	03 94       	inc	r0
    265e:	01 fc       	sbrc	r0, 1
    2660:	90 58       	subi	r25, 0x80	; 128
    2662:	e1 ee       	ldi	r30, 0xE1	; 225
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	1b c2       	rjmp	.+1078   	; 0x2a9e <__fp_powsodd>

00002668 <__fp_split3>:
    2668:	57 fd       	sbrc	r21, 7
    266a:	90 58       	subi	r25, 0x80	; 128
    266c:	44 0f       	add	r20, r20
    266e:	55 1f       	adc	r21, r21
    2670:	59 f0       	breq	.+22     	; 0x2688 <__fp_splitA+0x10>
    2672:	5f 3f       	cpi	r21, 0xFF	; 255
    2674:	71 f0       	breq	.+28     	; 0x2692 <__fp_splitA+0x1a>
    2676:	47 95       	ror	r20

00002678 <__fp_splitA>:
    2678:	88 0f       	add	r24, r24
    267a:	97 fb       	bst	r25, 7
    267c:	99 1f       	adc	r25, r25
    267e:	61 f0       	breq	.+24     	; 0x2698 <__fp_splitA+0x20>
    2680:	9f 3f       	cpi	r25, 0xFF	; 255
    2682:	79 f0       	breq	.+30     	; 0x26a2 <__fp_splitA+0x2a>
    2684:	87 95       	ror	r24
    2686:	08 95       	ret
    2688:	12 16       	cp	r1, r18
    268a:	13 06       	cpc	r1, r19
    268c:	14 06       	cpc	r1, r20
    268e:	55 1f       	adc	r21, r21
    2690:	f2 cf       	rjmp	.-28     	; 0x2676 <__fp_split3+0xe>
    2692:	46 95       	lsr	r20
    2694:	f1 df       	rcall	.-30     	; 0x2678 <__fp_splitA>
    2696:	08 c0       	rjmp	.+16     	; 0x26a8 <__fp_splitA+0x30>
    2698:	16 16       	cp	r1, r22
    269a:	17 06       	cpc	r1, r23
    269c:	18 06       	cpc	r1, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	f1 cf       	rjmp	.-30     	; 0x2684 <__fp_splitA+0xc>
    26a2:	86 95       	lsr	r24
    26a4:	71 05       	cpc	r23, r1
    26a6:	61 05       	cpc	r22, r1
    26a8:	08 94       	sec
    26aa:	08 95       	ret

000026ac <__fp_trunc>:
    26ac:	e5 df       	rcall	.-54     	; 0x2678 <__fp_splitA>
    26ae:	a0 f0       	brcs	.+40     	; 0x26d8 <__fp_trunc+0x2c>
    26b0:	be e7       	ldi	r27, 0x7E	; 126
    26b2:	b9 17       	cp	r27, r25
    26b4:	88 f4       	brcc	.+34     	; 0x26d8 <__fp_trunc+0x2c>
    26b6:	bb 27       	eor	r27, r27
    26b8:	9f 38       	cpi	r25, 0x8F	; 143
    26ba:	60 f4       	brcc	.+24     	; 0x26d4 <__fp_trunc+0x28>
    26bc:	16 16       	cp	r1, r22
    26be:	b1 1d       	adc	r27, r1
    26c0:	67 2f       	mov	r22, r23
    26c2:	78 2f       	mov	r23, r24
    26c4:	88 27       	eor	r24, r24
    26c6:	98 5f       	subi	r25, 0xF8	; 248
    26c8:	f7 cf       	rjmp	.-18     	; 0x26b8 <__fp_trunc+0xc>
    26ca:	86 95       	lsr	r24
    26cc:	77 95       	ror	r23
    26ce:	67 95       	ror	r22
    26d0:	b1 1d       	adc	r27, r1
    26d2:	93 95       	inc	r25
    26d4:	96 39       	cpi	r25, 0x96	; 150
    26d6:	c8 f3       	brcs	.-14     	; 0x26ca <__fp_trunc+0x1e>
    26d8:	08 95       	ret

000026da <__fp_zero>:
    26da:	e8 94       	clt

000026dc <__fp_szero>:
    26dc:	bb 27       	eor	r27, r27
    26de:	66 27       	eor	r22, r22
    26e0:	77 27       	eor	r23, r23
    26e2:	cb 01       	movw	r24, r22
    26e4:	97 f9       	bld	r25, 7
    26e6:	08 95       	ret

000026e8 <__gesf2>:
    26e8:	ec de       	rcall	.-552    	; 0x24c2 <__fp_cmp>
    26ea:	08 f4       	brcc	.+2      	; 0x26ee <__gesf2+0x6>
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	08 95       	ret

000026f0 <inverse>:
    26f0:	9b 01       	movw	r18, r22
    26f2:	ac 01       	movw	r20, r24
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	80 e8       	ldi	r24, 0x80	; 128
    26fa:	9f e3       	ldi	r25, 0x3F	; 63
    26fc:	f9 cd       	rjmp	.-1038   	; 0x22f0 <__divsf3>

000026fe <log10>:
    26fe:	0a d0       	rcall	.+20     	; 0x2714 <log>
    2700:	29 ed       	ldi	r18, 0xD9	; 217
    2702:	3b e5       	ldi	r19, 0x5B	; 91
    2704:	4e ed       	ldi	r20, 0xDE	; 222
    2706:	5e e3       	ldi	r21, 0x3E	; 62
    2708:	78 c0       	rjmp	.+240    	; 0x27fa <__mulsf3>
    270a:	0e f0       	brts	.+2      	; 0x270e <log10+0x10>
    270c:	1f cf       	rjmp	.-450    	; 0x254c <__fp_mpack>
    270e:	2c cf       	rjmp	.-424    	; 0x2568 <__fp_nan>
    2710:	68 94       	set
    2712:	fb ce       	rjmp	.-522    	; 0x250a <__fp_inf>

00002714 <log>:
    2714:	b1 df       	rcall	.-158    	; 0x2678 <__fp_splitA>
    2716:	c8 f3       	brcs	.-14     	; 0x270a <log10+0xc>
    2718:	99 23       	and	r25, r25
    271a:	d1 f3       	breq	.-12     	; 0x2710 <log10+0x12>
    271c:	c6 f3       	brts	.-16     	; 0x270e <log10+0x10>
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	1f 93       	push	r17
    2724:	0f 93       	push	r16
    2726:	ff 92       	push	r15
    2728:	c9 2f       	mov	r28, r25
    272a:	dd 27       	eor	r29, r29
    272c:	88 23       	and	r24, r24
    272e:	2a f0       	brmi	.+10     	; 0x273a <log+0x26>
    2730:	21 97       	sbiw	r28, 0x01	; 1
    2732:	66 0f       	add	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	88 1f       	adc	r24, r24
    2738:	da f7       	brpl	.-10     	; 0x2730 <log+0x1c>
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f eb       	ldi	r21, 0xBF	; 191
    2742:	9f e3       	ldi	r25, 0x3F	; 63
    2744:	88 39       	cpi	r24, 0x98	; 152
    2746:	20 f0       	brcs	.+8      	; 0x2750 <log+0x3c>
    2748:	80 3e       	cpi	r24, 0xE0	; 224
    274a:	30 f0       	brcs	.+12     	; 0x2758 <log+0x44>
    274c:	21 96       	adiw	r28, 0x01	; 1
    274e:	8f 77       	andi	r24, 0x7F	; 127
    2750:	02 dd       	rcall	.-1532   	; 0x2156 <__addsf3>
    2752:	ef ef       	ldi	r30, 0xFF	; 255
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	03 c0       	rjmp	.+6      	; 0x275e <log+0x4a>
    2758:	fe dc       	rcall	.-1540   	; 0x2156 <__addsf3>
    275a:	ec e2       	ldi	r30, 0x2C	; 44
    275c:	f1 e0       	ldi	r31, 0x01	; 1
    275e:	07 df       	rcall	.-498    	; 0x256e <__fp_powser>
    2760:	8b 01       	movw	r16, r22
    2762:	be 01       	movw	r22, r28
    2764:	ec 01       	movw	r28, r24
    2766:	fb 2e       	mov	r15, r27
    2768:	6f 57       	subi	r22, 0x7F	; 127
    276a:	71 09       	sbc	r23, r1
    276c:	75 95       	asr	r23
    276e:	77 1f       	adc	r23, r23
    2770:	88 0b       	sbc	r24, r24
    2772:	99 0b       	sbc	r25, r25
    2774:	58 de       	rcall	.-848    	; 0x2426 <__floatsisf>
    2776:	28 e1       	ldi	r18, 0x18	; 24
    2778:	32 e7       	ldi	r19, 0x72	; 114
    277a:	41 e3       	ldi	r20, 0x31	; 49
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	49 d0       	rcall	.+146    	; 0x2812 <__mulsf3x>
    2780:	af 2d       	mov	r26, r15
    2782:	98 01       	movw	r18, r16
    2784:	ae 01       	movw	r20, r28
    2786:	ff 90       	pop	r15
    2788:	0f 91       	pop	r16
    278a:	1f 91       	pop	r17
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	f3 dc       	rcall	.-1562   	; 0x2178 <__addsf3x>
    2792:	48 cf       	rjmp	.-368    	; 0x2624 <__fp_round>

00002794 <modf>:
    2794:	fa 01       	movw	r30, r20
    2796:	dc 01       	movw	r26, r24
    2798:	aa 0f       	add	r26, r26
    279a:	bb 1f       	adc	r27, r27
    279c:	9b 01       	movw	r18, r22
    279e:	ac 01       	movw	r20, r24
    27a0:	bf 57       	subi	r27, 0x7F	; 127
    27a2:	28 f4       	brcc	.+10     	; 0x27ae <modf+0x1a>
    27a4:	22 27       	eor	r18, r18
    27a6:	33 27       	eor	r19, r19
    27a8:	44 27       	eor	r20, r20
    27aa:	50 78       	andi	r21, 0x80	; 128
    27ac:	1f c0       	rjmp	.+62     	; 0x27ec <modf+0x58>
    27ae:	b7 51       	subi	r27, 0x17	; 23
    27b0:	88 f4       	brcc	.+34     	; 0x27d4 <modf+0x40>
    27b2:	ab 2f       	mov	r26, r27
    27b4:	00 24       	eor	r0, r0
    27b6:	46 95       	lsr	r20
    27b8:	37 95       	ror	r19
    27ba:	27 95       	ror	r18
    27bc:	01 1c       	adc	r0, r1
    27be:	a3 95       	inc	r26
    27c0:	d2 f3       	brmi	.-12     	; 0x27b6 <modf+0x22>
    27c2:	00 20       	and	r0, r0
    27c4:	69 f0       	breq	.+26     	; 0x27e0 <modf+0x4c>
    27c6:	22 0f       	add	r18, r18
    27c8:	33 1f       	adc	r19, r19
    27ca:	44 1f       	adc	r20, r20
    27cc:	b3 95       	inc	r27
    27ce:	da f3       	brmi	.-10     	; 0x27c6 <modf+0x32>
    27d0:	0d d0       	rcall	.+26     	; 0x27ec <modf+0x58>
    27d2:	c0 cc       	rjmp	.-1664   	; 0x2154 <__subsf3>
    27d4:	61 30       	cpi	r22, 0x01	; 1
    27d6:	71 05       	cpc	r23, r1
    27d8:	a0 e8       	ldi	r26, 0x80	; 128
    27da:	8a 07       	cpc	r24, r26
    27dc:	b9 46       	sbci	r27, 0x69	; 105
    27de:	30 f4       	brcc	.+12     	; 0x27ec <modf+0x58>
    27e0:	9b 01       	movw	r18, r22
    27e2:	ac 01       	movw	r20, r24
    27e4:	66 27       	eor	r22, r22
    27e6:	77 27       	eor	r23, r23
    27e8:	88 27       	eor	r24, r24
    27ea:	90 78       	andi	r25, 0x80	; 128
    27ec:	30 96       	adiw	r30, 0x00	; 0
    27ee:	21 f0       	breq	.+8      	; 0x27f8 <modf+0x64>
    27f0:	20 83       	st	Z, r18
    27f2:	31 83       	std	Z+1, r19	; 0x01
    27f4:	42 83       	std	Z+2, r20	; 0x02
    27f6:	53 83       	std	Z+3, r21	; 0x03
    27f8:	08 95       	ret

000027fa <__mulsf3>:
    27fa:	0b d0       	rcall	.+22     	; 0x2812 <__mulsf3x>
    27fc:	13 cf       	rjmp	.-474    	; 0x2624 <__fp_round>
    27fe:	dc de       	rcall	.-584    	; 0x25b8 <__fp_pscA>
    2800:	28 f0       	brcs	.+10     	; 0x280c <__mulsf3+0x12>
    2802:	e1 de       	rcall	.-574    	; 0x25c6 <__fp_pscB>
    2804:	18 f0       	brcs	.+6      	; 0x280c <__mulsf3+0x12>
    2806:	95 23       	and	r25, r21
    2808:	09 f0       	breq	.+2      	; 0x280c <__mulsf3+0x12>
    280a:	7f ce       	rjmp	.-770    	; 0x250a <__fp_inf>
    280c:	ad ce       	rjmp	.-678    	; 0x2568 <__fp_nan>
    280e:	11 24       	eor	r1, r1
    2810:	65 cf       	rjmp	.-310    	; 0x26dc <__fp_szero>

00002812 <__mulsf3x>:
    2812:	2a df       	rcall	.-428    	; 0x2668 <__fp_split3>
    2814:	a0 f3       	brcs	.-24     	; 0x27fe <__mulsf3+0x4>

00002816 <__mulsf3_pse>:
    2816:	95 9f       	mul	r25, r21
    2818:	d1 f3       	breq	.-12     	; 0x280e <__mulsf3+0x14>
    281a:	95 0f       	add	r25, r21
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	55 1f       	adc	r21, r21
    2820:	62 9f       	mul	r22, r18
    2822:	f0 01       	movw	r30, r0
    2824:	72 9f       	mul	r23, r18
    2826:	bb 27       	eor	r27, r27
    2828:	f0 0d       	add	r31, r0
    282a:	b1 1d       	adc	r27, r1
    282c:	63 9f       	mul	r22, r19
    282e:	aa 27       	eor	r26, r26
    2830:	f0 0d       	add	r31, r0
    2832:	b1 1d       	adc	r27, r1
    2834:	aa 1f       	adc	r26, r26
    2836:	64 9f       	mul	r22, r20
    2838:	66 27       	eor	r22, r22
    283a:	b0 0d       	add	r27, r0
    283c:	a1 1d       	adc	r26, r1
    283e:	66 1f       	adc	r22, r22
    2840:	82 9f       	mul	r24, r18
    2842:	22 27       	eor	r18, r18
    2844:	b0 0d       	add	r27, r0
    2846:	a1 1d       	adc	r26, r1
    2848:	62 1f       	adc	r22, r18
    284a:	73 9f       	mul	r23, r19
    284c:	b0 0d       	add	r27, r0
    284e:	a1 1d       	adc	r26, r1
    2850:	62 1f       	adc	r22, r18
    2852:	83 9f       	mul	r24, r19
    2854:	a0 0d       	add	r26, r0
    2856:	61 1d       	adc	r22, r1
    2858:	22 1f       	adc	r18, r18
    285a:	74 9f       	mul	r23, r20
    285c:	33 27       	eor	r19, r19
    285e:	a0 0d       	add	r26, r0
    2860:	61 1d       	adc	r22, r1
    2862:	23 1f       	adc	r18, r19
    2864:	84 9f       	mul	r24, r20
    2866:	60 0d       	add	r22, r0
    2868:	21 1d       	adc	r18, r1
    286a:	82 2f       	mov	r24, r18
    286c:	76 2f       	mov	r23, r22
    286e:	6a 2f       	mov	r22, r26
    2870:	11 24       	eor	r1, r1
    2872:	9f 57       	subi	r25, 0x7F	; 127
    2874:	50 40       	sbci	r21, 0x00	; 0
    2876:	8a f0       	brmi	.+34     	; 0x289a <__mulsf3_pse+0x84>
    2878:	e1 f0       	breq	.+56     	; 0x28b2 <__mulsf3_pse+0x9c>
    287a:	88 23       	and	r24, r24
    287c:	4a f0       	brmi	.+18     	; 0x2890 <__mulsf3_pse+0x7a>
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	bb 1f       	adc	r27, r27
    2884:	66 1f       	adc	r22, r22
    2886:	77 1f       	adc	r23, r23
    2888:	88 1f       	adc	r24, r24
    288a:	91 50       	subi	r25, 0x01	; 1
    288c:	50 40       	sbci	r21, 0x00	; 0
    288e:	a9 f7       	brne	.-22     	; 0x287a <__mulsf3_pse+0x64>
    2890:	9e 3f       	cpi	r25, 0xFE	; 254
    2892:	51 05       	cpc	r21, r1
    2894:	70 f0       	brcs	.+28     	; 0x28b2 <__mulsf3_pse+0x9c>
    2896:	39 ce       	rjmp	.-910    	; 0x250a <__fp_inf>
    2898:	21 cf       	rjmp	.-446    	; 0x26dc <__fp_szero>
    289a:	5f 3f       	cpi	r21, 0xFF	; 255
    289c:	ec f3       	brlt	.-6      	; 0x2898 <__mulsf3_pse+0x82>
    289e:	98 3e       	cpi	r25, 0xE8	; 232
    28a0:	dc f3       	brlt	.-10     	; 0x2898 <__mulsf3_pse+0x82>
    28a2:	86 95       	lsr	r24
    28a4:	77 95       	ror	r23
    28a6:	67 95       	ror	r22
    28a8:	b7 95       	ror	r27
    28aa:	f7 95       	ror	r31
    28ac:	e7 95       	ror	r30
    28ae:	9f 5f       	subi	r25, 0xFF	; 255
    28b0:	c1 f7       	brne	.-16     	; 0x28a2 <__mulsf3_pse+0x8c>
    28b2:	fe 2b       	or	r31, r30
    28b4:	88 0f       	add	r24, r24
    28b6:	91 1d       	adc	r25, r1
    28b8:	96 95       	lsr	r25
    28ba:	87 95       	ror	r24
    28bc:	97 f9       	bld	r25, 7
    28be:	08 95       	ret

000028c0 <pow>:
    28c0:	fa 01       	movw	r30, r20
    28c2:	ee 0f       	add	r30, r30
    28c4:	ff 1f       	adc	r31, r31
    28c6:	30 96       	adiw	r30, 0x00	; 0
    28c8:	21 05       	cpc	r18, r1
    28ca:	31 05       	cpc	r19, r1
    28cc:	99 f1       	breq	.+102    	; 0x2934 <pow+0x74>
    28ce:	61 15       	cp	r22, r1
    28d0:	71 05       	cpc	r23, r1
    28d2:	61 f4       	brne	.+24     	; 0x28ec <pow+0x2c>
    28d4:	80 38       	cpi	r24, 0x80	; 128
    28d6:	bf e3       	ldi	r27, 0x3F	; 63
    28d8:	9b 07       	cpc	r25, r27
    28da:	49 f1       	breq	.+82     	; 0x292e <pow+0x6e>
    28dc:	68 94       	set
    28de:	90 38       	cpi	r25, 0x80	; 128
    28e0:	81 05       	cpc	r24, r1
    28e2:	61 f0       	breq	.+24     	; 0x28fc <pow+0x3c>
    28e4:	80 38       	cpi	r24, 0x80	; 128
    28e6:	bf ef       	ldi	r27, 0xFF	; 255
    28e8:	9b 07       	cpc	r25, r27
    28ea:	41 f0       	breq	.+16     	; 0x28fc <pow+0x3c>
    28ec:	99 23       	and	r25, r25
    28ee:	42 f5       	brpl	.+80     	; 0x2940 <pow+0x80>
    28f0:	ff 3f       	cpi	r31, 0xFF	; 255
    28f2:	e1 05       	cpc	r30, r1
    28f4:	31 05       	cpc	r19, r1
    28f6:	21 05       	cpc	r18, r1
    28f8:	11 f1       	breq	.+68     	; 0x293e <pow+0x7e>
    28fa:	e8 94       	clt
    28fc:	08 94       	sec
    28fe:	e7 95       	ror	r30
    2900:	d9 01       	movw	r26, r18
    2902:	aa 23       	and	r26, r26
    2904:	29 f4       	brne	.+10     	; 0x2910 <pow+0x50>
    2906:	ab 2f       	mov	r26, r27
    2908:	be 2f       	mov	r27, r30
    290a:	f8 5f       	subi	r31, 0xF8	; 248
    290c:	d0 f3       	brcs	.-12     	; 0x2902 <pow+0x42>
    290e:	10 c0       	rjmp	.+32     	; 0x2930 <pow+0x70>
    2910:	ff 5f       	subi	r31, 0xFF	; 255
    2912:	70 f4       	brcc	.+28     	; 0x2930 <pow+0x70>
    2914:	a6 95       	lsr	r26
    2916:	e0 f7       	brcc	.-8      	; 0x2910 <pow+0x50>
    2918:	f7 39       	cpi	r31, 0x97	; 151
    291a:	50 f0       	brcs	.+20     	; 0x2930 <pow+0x70>
    291c:	19 f0       	breq	.+6      	; 0x2924 <pow+0x64>
    291e:	ff 3a       	cpi	r31, 0xAF	; 175
    2920:	38 f4       	brcc	.+14     	; 0x2930 <pow+0x70>
    2922:	9f 77       	andi	r25, 0x7F	; 127
    2924:	9f 93       	push	r25
    2926:	0c d0       	rcall	.+24     	; 0x2940 <pow+0x80>
    2928:	0f 90       	pop	r0
    292a:	07 fc       	sbrc	r0, 7
    292c:	90 58       	subi	r25, 0x80	; 128
    292e:	08 95       	ret
    2930:	3e f0       	brts	.+14     	; 0x2940 <pow+0x80>
    2932:	1a ce       	rjmp	.-972    	; 0x2568 <__fp_nan>
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	80 e8       	ldi	r24, 0x80	; 128
    293a:	9f e3       	ldi	r25, 0x3F	; 63
    293c:	08 95       	ret
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	9f 77       	andi	r25, 0x7F	; 127
    2942:	5f 93       	push	r21
    2944:	4f 93       	push	r20
    2946:	3f 93       	push	r19
    2948:	2f 93       	push	r18
    294a:	e4 de       	rcall	.-568    	; 0x2714 <log>
    294c:	2f 91       	pop	r18
    294e:	3f 91       	pop	r19
    2950:	4f 91       	pop	r20
    2952:	5f 91       	pop	r21
    2954:	52 df       	rcall	.-348    	; 0x27fa <__mulsf3>
    2956:	70 c0       	rjmp	.+224    	; 0x2a38 <exp>

00002958 <round>:
    2958:	8f de       	rcall	.-738    	; 0x2678 <__fp_splitA>
    295a:	e0 f0       	brcs	.+56     	; 0x2994 <round+0x3c>
    295c:	9e 37       	cpi	r25, 0x7E	; 126
    295e:	d8 f0       	brcs	.+54     	; 0x2996 <round+0x3e>
    2960:	96 39       	cpi	r25, 0x96	; 150
    2962:	b8 f4       	brcc	.+46     	; 0x2992 <round+0x3a>
    2964:	9e 38       	cpi	r25, 0x8E	; 142
    2966:	48 f4       	brcc	.+18     	; 0x297a <round+0x22>
    2968:	67 2f       	mov	r22, r23
    296a:	78 2f       	mov	r23, r24
    296c:	88 27       	eor	r24, r24
    296e:	98 5f       	subi	r25, 0xF8	; 248
    2970:	f9 cf       	rjmp	.-14     	; 0x2964 <round+0xc>
    2972:	86 95       	lsr	r24
    2974:	77 95       	ror	r23
    2976:	67 95       	ror	r22
    2978:	93 95       	inc	r25
    297a:	95 39       	cpi	r25, 0x95	; 149
    297c:	d0 f3       	brcs	.-12     	; 0x2972 <round+0x1a>
    297e:	b6 2f       	mov	r27, r22
    2980:	b1 70       	andi	r27, 0x01	; 1
    2982:	6b 0f       	add	r22, r27
    2984:	71 1d       	adc	r23, r1
    2986:	81 1d       	adc	r24, r1
    2988:	20 f4       	brcc	.+8      	; 0x2992 <round+0x3a>
    298a:	87 95       	ror	r24
    298c:	77 95       	ror	r23
    298e:	67 95       	ror	r22
    2990:	93 95       	inc	r25
    2992:	c1 cd       	rjmp	.-1150   	; 0x2516 <__fp_mintl>
    2994:	db cd       	rjmp	.-1098   	; 0x254c <__fp_mpack>
    2996:	a2 ce       	rjmp	.-700    	; 0x26dc <__fp_szero>

00002998 <sin>:
    2998:	9f 93       	push	r25
    299a:	1d de       	rcall	.-966    	; 0x25d6 <__fp_rempio2>
    299c:	0f 90       	pop	r0
    299e:	07 fc       	sbrc	r0, 7
    29a0:	ee 5f       	subi	r30, 0xFE	; 254
    29a2:	51 ce       	rjmp	.-862    	; 0x2646 <__fp_sinus>
    29a4:	11 f4       	brne	.+4      	; 0x29aa <sin+0x12>
    29a6:	0e f4       	brtc	.+2      	; 0x29aa <sin+0x12>
    29a8:	df cd       	rjmp	.-1090   	; 0x2568 <__fp_nan>
    29aa:	d0 cd       	rjmp	.-1120   	; 0x254c <__fp_mpack>

000029ac <sqrt>:
    29ac:	65 de       	rcall	.-822    	; 0x2678 <__fp_splitA>
    29ae:	d0 f3       	brcs	.-12     	; 0x29a4 <sin+0xc>
    29b0:	99 23       	and	r25, r25
    29b2:	d9 f3       	breq	.-10     	; 0x29aa <sin+0x12>
    29b4:	ce f3       	brts	.-14     	; 0x29a8 <sin+0x10>
    29b6:	9f 57       	subi	r25, 0x7F	; 127
    29b8:	55 0b       	sbc	r21, r21
    29ba:	87 ff       	sbrs	r24, 7
    29bc:	69 d0       	rcall	.+210    	; 0x2a90 <__fp_norm2>
    29be:	00 24       	eor	r0, r0
    29c0:	a0 e6       	ldi	r26, 0x60	; 96
    29c2:	40 ea       	ldi	r20, 0xA0	; 160
    29c4:	90 01       	movw	r18, r0
    29c6:	80 58       	subi	r24, 0x80	; 128
    29c8:	56 95       	lsr	r21
    29ca:	97 95       	ror	r25
    29cc:	28 f4       	brcc	.+10     	; 0x29d8 <sqrt+0x2c>
    29ce:	80 5c       	subi	r24, 0xC0	; 192
    29d0:	66 0f       	add	r22, r22
    29d2:	77 1f       	adc	r23, r23
    29d4:	88 1f       	adc	r24, r24
    29d6:	20 f0       	brcs	.+8      	; 0x29e0 <sqrt+0x34>
    29d8:	26 17       	cp	r18, r22
    29da:	37 07       	cpc	r19, r23
    29dc:	48 07       	cpc	r20, r24
    29de:	30 f4       	brcc	.+12     	; 0x29ec <sqrt+0x40>
    29e0:	62 1b       	sub	r22, r18
    29e2:	73 0b       	sbc	r23, r19
    29e4:	84 0b       	sbc	r24, r20
    29e6:	20 29       	or	r18, r0
    29e8:	31 29       	or	r19, r1
    29ea:	4a 2b       	or	r20, r26
    29ec:	a6 95       	lsr	r26
    29ee:	17 94       	ror	r1
    29f0:	07 94       	ror	r0
    29f2:	20 25       	eor	r18, r0
    29f4:	31 25       	eor	r19, r1
    29f6:	4a 27       	eor	r20, r26
    29f8:	58 f7       	brcc	.-42     	; 0x29d0 <sqrt+0x24>
    29fa:	66 0f       	add	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	20 f0       	brcs	.+8      	; 0x2a0a <sqrt+0x5e>
    2a02:	26 17       	cp	r18, r22
    2a04:	37 07       	cpc	r19, r23
    2a06:	48 07       	cpc	r20, r24
    2a08:	30 f4       	brcc	.+12     	; 0x2a16 <sqrt+0x6a>
    2a0a:	62 0b       	sbc	r22, r18
    2a0c:	73 0b       	sbc	r23, r19
    2a0e:	84 0b       	sbc	r24, r20
    2a10:	20 0d       	add	r18, r0
    2a12:	31 1d       	adc	r19, r1
    2a14:	41 1d       	adc	r20, r1
    2a16:	a0 95       	com	r26
    2a18:	81 f7       	brne	.-32     	; 0x29fa <sqrt+0x4e>
    2a1a:	b9 01       	movw	r22, r18
    2a1c:	84 2f       	mov	r24, r20
    2a1e:	91 58       	subi	r25, 0x81	; 129
    2a20:	88 0f       	add	r24, r24
    2a22:	96 95       	lsr	r25
    2a24:	87 95       	ror	r24
    2a26:	08 95       	ret

00002a28 <square>:
    2a28:	9b 01       	movw	r18, r22
    2a2a:	ac 01       	movw	r20, r24
    2a2c:	e6 ce       	rjmp	.-564    	; 0x27fa <__mulsf3>
    2a2e:	19 f4       	brne	.+6      	; 0x2a36 <square+0xe>
    2a30:	0e f0       	brts	.+2      	; 0x2a34 <square+0xc>
    2a32:	6b cd       	rjmp	.-1322   	; 0x250a <__fp_inf>
    2a34:	52 ce       	rjmp	.-860    	; 0x26da <__fp_zero>
    2a36:	98 cd       	rjmp	.-1232   	; 0x2568 <__fp_nan>

00002a38 <exp>:
    2a38:	1f de       	rcall	.-962    	; 0x2678 <__fp_splitA>
    2a3a:	c8 f3       	brcs	.-14     	; 0x2a2e <square+0x6>
    2a3c:	96 38       	cpi	r25, 0x86	; 134
    2a3e:	c0 f7       	brcc	.-16     	; 0x2a30 <square+0x8>
    2a40:	07 f8       	bld	r0, 7
    2a42:	0f 92       	push	r0
    2a44:	e8 94       	clt
    2a46:	2b e3       	ldi	r18, 0x3B	; 59
    2a48:	3a ea       	ldi	r19, 0xAA	; 170
    2a4a:	48 eb       	ldi	r20, 0xB8	; 184
    2a4c:	5f e7       	ldi	r21, 0x7F	; 127
    2a4e:	e3 de       	rcall	.-570    	; 0x2816 <__mulsf3_pse>
    2a50:	0f 92       	push	r0
    2a52:	0f 92       	push	r0
    2a54:	0f 92       	push	r0
    2a56:	4d b7       	in	r20, 0x3d	; 61
    2a58:	5e b7       	in	r21, 0x3e	; 62
    2a5a:	0f 92       	push	r0
    2a5c:	9b de       	rcall	.-714    	; 0x2794 <modf>
    2a5e:	e9 e5       	ldi	r30, 0x59	; 89
    2a60:	f1 e0       	ldi	r31, 0x01	; 1
    2a62:	85 dd       	rcall	.-1270   	; 0x256e <__fp_powser>
    2a64:	4f 91       	pop	r20
    2a66:	5f 91       	pop	r21
    2a68:	ef 91       	pop	r30
    2a6a:	ff 91       	pop	r31
    2a6c:	e5 95       	asr	r30
    2a6e:	ee 1f       	adc	r30, r30
    2a70:	ff 1f       	adc	r31, r31
    2a72:	49 f0       	breq	.+18     	; 0x2a86 <exp+0x4e>
    2a74:	fe 57       	subi	r31, 0x7E	; 126
    2a76:	e0 68       	ori	r30, 0x80	; 128
    2a78:	44 27       	eor	r20, r20
    2a7a:	ee 0f       	add	r30, r30
    2a7c:	44 1f       	adc	r20, r20
    2a7e:	fa 95       	dec	r31
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <exp+0x42>
    2a82:	41 95       	neg	r20
    2a84:	55 0b       	sbc	r21, r21
    2a86:	1e d0       	rcall	.+60     	; 0x2ac4 <ldexp>
    2a88:	0f 90       	pop	r0
    2a8a:	07 fe       	sbrs	r0, 7
    2a8c:	31 ce       	rjmp	.-926    	; 0x26f0 <inverse>
    2a8e:	08 95       	ret

00002a90 <__fp_norm2>:
    2a90:	91 50       	subi	r25, 0x01	; 1
    2a92:	50 40       	sbci	r21, 0x00	; 0
    2a94:	66 0f       	add	r22, r22
    2a96:	77 1f       	adc	r23, r23
    2a98:	88 1f       	adc	r24, r24
    2a9a:	d2 f7       	brpl	.-12     	; 0x2a90 <__fp_norm2>
    2a9c:	08 95       	ret

00002a9e <__fp_powsodd>:
    2a9e:	9f 93       	push	r25
    2aa0:	8f 93       	push	r24
    2aa2:	7f 93       	push	r23
    2aa4:	6f 93       	push	r22
    2aa6:	ff 93       	push	r31
    2aa8:	ef 93       	push	r30
    2aaa:	9b 01       	movw	r18, r22
    2aac:	ac 01       	movw	r20, r24
    2aae:	a5 de       	rcall	.-694    	; 0x27fa <__mulsf3>
    2ab0:	ef 91       	pop	r30
    2ab2:	ff 91       	pop	r31
    2ab4:	5c dd       	rcall	.-1352   	; 0x256e <__fp_powser>
    2ab6:	2f 91       	pop	r18
    2ab8:	3f 91       	pop	r19
    2aba:	4f 91       	pop	r20
    2abc:	5f 91       	pop	r21
    2abe:	9d ce       	rjmp	.-710    	; 0x27fa <__mulsf3>
    2ac0:	24 cd       	rjmp	.-1464   	; 0x250a <__fp_inf>
    2ac2:	44 cd       	rjmp	.-1400   	; 0x254c <__fp_mpack>

00002ac4 <ldexp>:
    2ac4:	d9 dd       	rcall	.-1102   	; 0x2678 <__fp_splitA>
    2ac6:	e8 f3       	brcs	.-6      	; 0x2ac2 <__fp_powsodd+0x24>
    2ac8:	99 23       	and	r25, r25
    2aca:	d9 f3       	breq	.-10     	; 0x2ac2 <__fp_powsodd+0x24>
    2acc:	94 0f       	add	r25, r20
    2ace:	51 1d       	adc	r21, r1
    2ad0:	bb f3       	brvs	.-18     	; 0x2ac0 <__fp_powsodd+0x22>
    2ad2:	91 50       	subi	r25, 0x01	; 1
    2ad4:	50 40       	sbci	r21, 0x00	; 0
    2ad6:	94 f0       	brlt	.+36     	; 0x2afc <ldexp+0x38>
    2ad8:	59 f0       	breq	.+22     	; 0x2af0 <ldexp+0x2c>
    2ada:	88 23       	and	r24, r24
    2adc:	32 f0       	brmi	.+12     	; 0x2aea <ldexp+0x26>
    2ade:	66 0f       	add	r22, r22
    2ae0:	77 1f       	adc	r23, r23
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	91 50       	subi	r25, 0x01	; 1
    2ae6:	50 40       	sbci	r21, 0x00	; 0
    2ae8:	c1 f7       	brne	.-16     	; 0x2ada <ldexp+0x16>
    2aea:	9e 3f       	cpi	r25, 0xFE	; 254
    2aec:	51 05       	cpc	r21, r1
    2aee:	44 f7       	brge	.-48     	; 0x2ac0 <__fp_powsodd+0x22>
    2af0:	88 0f       	add	r24, r24
    2af2:	91 1d       	adc	r25, r1
    2af4:	96 95       	lsr	r25
    2af6:	87 95       	ror	r24
    2af8:	97 f9       	bld	r25, 7
    2afa:	08 95       	ret
    2afc:	5f 3f       	cpi	r21, 0xFF	; 255
    2afe:	ac f0       	brlt	.+42     	; 0x2b2a <ldexp+0x66>
    2b00:	98 3e       	cpi	r25, 0xE8	; 232
    2b02:	9c f0       	brlt	.+38     	; 0x2b2a <ldexp+0x66>
    2b04:	bb 27       	eor	r27, r27
    2b06:	86 95       	lsr	r24
    2b08:	77 95       	ror	r23
    2b0a:	67 95       	ror	r22
    2b0c:	b7 95       	ror	r27
    2b0e:	08 f4       	brcc	.+2      	; 0x2b12 <ldexp+0x4e>
    2b10:	b1 60       	ori	r27, 0x01	; 1
    2b12:	93 95       	inc	r25
    2b14:	c1 f7       	brne	.-16     	; 0x2b06 <ldexp+0x42>
    2b16:	bb 0f       	add	r27, r27
    2b18:	58 f7       	brcc	.-42     	; 0x2af0 <ldexp+0x2c>
    2b1a:	11 f4       	brne	.+4      	; 0x2b20 <ldexp+0x5c>
    2b1c:	60 ff       	sbrs	r22, 0
    2b1e:	e8 cf       	rjmp	.-48     	; 0x2af0 <ldexp+0x2c>
    2b20:	6f 5f       	subi	r22, 0xFF	; 255
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255
    2b24:	8f 4f       	sbci	r24, 0xFF	; 255
    2b26:	9f 4f       	sbci	r25, 0xFF	; 255
    2b28:	e3 cf       	rjmp	.-58     	; 0x2af0 <ldexp+0x2c>
    2b2a:	d8 cd       	rjmp	.-1104   	; 0x26dc <__fp_szero>

00002b2c <__tablejump2__>:
    2b2c:	ee 0f       	add	r30, r30
    2b2e:	ff 1f       	adc	r31, r31

00002b30 <__tablejump__>:
    2b30:	05 90       	lpm	r0, Z+
    2b32:	f4 91       	lpm	r31, Z
    2b34:	e0 2d       	mov	r30, r0
    2b36:	09 94       	ijmp

00002b38 <malloc>:
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	91 05       	cpc	r25, r1
    2b40:	10 f4       	brcc	.+4      	; 0x2b46 <malloc+0xe>
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	e0 91 89 04 	lds	r30, 0x0489
    2b4a:	f0 91 8a 04 	lds	r31, 0x048A
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	a0 e0       	ldi	r26, 0x00	; 0
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	30 97       	sbiw	r30, 0x00	; 0
    2b58:	39 f1       	breq	.+78     	; 0x2ba8 <malloc+0x70>
    2b5a:	40 81       	ld	r20, Z
    2b5c:	51 81       	ldd	r21, Z+1	; 0x01
    2b5e:	48 17       	cp	r20, r24
    2b60:	59 07       	cpc	r21, r25
    2b62:	b8 f0       	brcs	.+46     	; 0x2b92 <malloc+0x5a>
    2b64:	48 17       	cp	r20, r24
    2b66:	59 07       	cpc	r21, r25
    2b68:	71 f4       	brne	.+28     	; 0x2b86 <malloc+0x4e>
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	10 97       	sbiw	r26, 0x00	; 0
    2b70:	29 f0       	breq	.+10     	; 0x2b7c <malloc+0x44>
    2b72:	13 96       	adiw	r26, 0x03	; 3
    2b74:	9c 93       	st	X, r25
    2b76:	8e 93       	st	-X, r24
    2b78:	12 97       	sbiw	r26, 0x02	; 2
    2b7a:	2c c0       	rjmp	.+88     	; 0x2bd4 <malloc+0x9c>
    2b7c:	90 93 8a 04 	sts	0x048A, r25
    2b80:	80 93 89 04 	sts	0x0489, r24
    2b84:	27 c0       	rjmp	.+78     	; 0x2bd4 <malloc+0x9c>
    2b86:	21 15       	cp	r18, r1
    2b88:	31 05       	cpc	r19, r1
    2b8a:	31 f0       	breq	.+12     	; 0x2b98 <malloc+0x60>
    2b8c:	42 17       	cp	r20, r18
    2b8e:	53 07       	cpc	r21, r19
    2b90:	18 f0       	brcs	.+6      	; 0x2b98 <malloc+0x60>
    2b92:	a9 01       	movw	r20, r18
    2b94:	db 01       	movw	r26, r22
    2b96:	01 c0       	rjmp	.+2      	; 0x2b9a <malloc+0x62>
    2b98:	ef 01       	movw	r28, r30
    2b9a:	9a 01       	movw	r18, r20
    2b9c:	bd 01       	movw	r22, r26
    2b9e:	df 01       	movw	r26, r30
    2ba0:	02 80       	ldd	r0, Z+2	; 0x02
    2ba2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ba4:	e0 2d       	mov	r30, r0
    2ba6:	d7 cf       	rjmp	.-82     	; 0x2b56 <malloc+0x1e>
    2ba8:	21 15       	cp	r18, r1
    2baa:	31 05       	cpc	r19, r1
    2bac:	f9 f0       	breq	.+62     	; 0x2bec <malloc+0xb4>
    2bae:	28 1b       	sub	r18, r24
    2bb0:	39 0b       	sbc	r19, r25
    2bb2:	24 30       	cpi	r18, 0x04	; 4
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	80 f4       	brcc	.+32     	; 0x2bd8 <malloc+0xa0>
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbc:	61 15       	cp	r22, r1
    2bbe:	71 05       	cpc	r23, r1
    2bc0:	21 f0       	breq	.+8      	; 0x2bca <malloc+0x92>
    2bc2:	fb 01       	movw	r30, r22
    2bc4:	93 83       	std	Z+3, r25	; 0x03
    2bc6:	82 83       	std	Z+2, r24	; 0x02
    2bc8:	04 c0       	rjmp	.+8      	; 0x2bd2 <malloc+0x9a>
    2bca:	90 93 8a 04 	sts	0x048A, r25
    2bce:	80 93 89 04 	sts	0x0489, r24
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	32 96       	adiw	r30, 0x02	; 2
    2bd6:	44 c0       	rjmp	.+136    	; 0x2c60 <malloc+0x128>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e2 0f       	add	r30, r18
    2bdc:	f3 1f       	adc	r31, r19
    2bde:	81 93       	st	Z+, r24
    2be0:	91 93       	st	Z+, r25
    2be2:	22 50       	subi	r18, 0x02	; 2
    2be4:	31 09       	sbc	r19, r1
    2be6:	39 83       	std	Y+1, r19	; 0x01
    2be8:	28 83       	st	Y, r18
    2bea:	3a c0       	rjmp	.+116    	; 0x2c60 <malloc+0x128>
    2bec:	20 91 87 04 	lds	r18, 0x0487
    2bf0:	30 91 88 04 	lds	r19, 0x0488
    2bf4:	23 2b       	or	r18, r19
    2bf6:	41 f4       	brne	.+16     	; 0x2c08 <malloc+0xd0>
    2bf8:	20 91 08 01 	lds	r18, 0x0108
    2bfc:	30 91 09 01 	lds	r19, 0x0109
    2c00:	30 93 88 04 	sts	0x0488, r19
    2c04:	20 93 87 04 	sts	0x0487, r18
    2c08:	20 91 06 01 	lds	r18, 0x0106
    2c0c:	30 91 07 01 	lds	r19, 0x0107
    2c10:	21 15       	cp	r18, r1
    2c12:	31 05       	cpc	r19, r1
    2c14:	41 f4       	brne	.+16     	; 0x2c26 <malloc+0xee>
    2c16:	2d b7       	in	r18, 0x3d	; 61
    2c18:	3e b7       	in	r19, 0x3e	; 62
    2c1a:	40 91 0a 01 	lds	r20, 0x010A
    2c1e:	50 91 0b 01 	lds	r21, 0x010B
    2c22:	24 1b       	sub	r18, r20
    2c24:	35 0b       	sbc	r19, r21
    2c26:	e0 91 87 04 	lds	r30, 0x0487
    2c2a:	f0 91 88 04 	lds	r31, 0x0488
    2c2e:	e2 17       	cp	r30, r18
    2c30:	f3 07       	cpc	r31, r19
    2c32:	a0 f4       	brcc	.+40     	; 0x2c5c <malloc+0x124>
    2c34:	2e 1b       	sub	r18, r30
    2c36:	3f 0b       	sbc	r19, r31
    2c38:	28 17       	cp	r18, r24
    2c3a:	39 07       	cpc	r19, r25
    2c3c:	78 f0       	brcs	.+30     	; 0x2c5c <malloc+0x124>
    2c3e:	ac 01       	movw	r20, r24
    2c40:	4e 5f       	subi	r20, 0xFE	; 254
    2c42:	5f 4f       	sbci	r21, 0xFF	; 255
    2c44:	24 17       	cp	r18, r20
    2c46:	35 07       	cpc	r19, r21
    2c48:	48 f0       	brcs	.+18     	; 0x2c5c <malloc+0x124>
    2c4a:	4e 0f       	add	r20, r30
    2c4c:	5f 1f       	adc	r21, r31
    2c4e:	50 93 88 04 	sts	0x0488, r21
    2c52:	40 93 87 04 	sts	0x0487, r20
    2c56:	81 93       	st	Z+, r24
    2c58:	91 93       	st	Z+, r25
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <malloc+0x128>
    2c5c:	e0 e0       	ldi	r30, 0x00	; 0
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	cf 01       	movw	r24, r30
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	08 95       	ret

00002c68 <free>:
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <free+0xa>
    2c70:	87 c0       	rjmp	.+270    	; 0x2d80 <free+0x118>
    2c72:	fc 01       	movw	r30, r24
    2c74:	32 97       	sbiw	r30, 0x02	; 2
    2c76:	13 82       	std	Z+3, r1	; 0x03
    2c78:	12 82       	std	Z+2, r1	; 0x02
    2c7a:	c0 91 89 04 	lds	r28, 0x0489
    2c7e:	d0 91 8a 04 	lds	r29, 0x048A
    2c82:	20 97       	sbiw	r28, 0x00	; 0
    2c84:	81 f4       	brne	.+32     	; 0x2ca6 <free+0x3e>
    2c86:	20 81       	ld	r18, Z
    2c88:	31 81       	ldd	r19, Z+1	; 0x01
    2c8a:	28 0f       	add	r18, r24
    2c8c:	39 1f       	adc	r19, r25
    2c8e:	80 91 87 04 	lds	r24, 0x0487
    2c92:	90 91 88 04 	lds	r25, 0x0488
    2c96:	82 17       	cp	r24, r18
    2c98:	93 07       	cpc	r25, r19
    2c9a:	79 f5       	brne	.+94     	; 0x2cfa <free+0x92>
    2c9c:	f0 93 88 04 	sts	0x0488, r31
    2ca0:	e0 93 87 04 	sts	0x0487, r30
    2ca4:	6d c0       	rjmp	.+218    	; 0x2d80 <free+0x118>
    2ca6:	de 01       	movw	r26, r28
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	ae 17       	cp	r26, r30
    2cae:	bf 07       	cpc	r27, r31
    2cb0:	50 f4       	brcc	.+20     	; 0x2cc6 <free+0x5e>
    2cb2:	12 96       	adiw	r26, 0x02	; 2
    2cb4:	4d 91       	ld	r20, X+
    2cb6:	5c 91       	ld	r21, X
    2cb8:	13 97       	sbiw	r26, 0x03	; 3
    2cba:	9d 01       	movw	r18, r26
    2cbc:	41 15       	cp	r20, r1
    2cbe:	51 05       	cpc	r21, r1
    2cc0:	09 f1       	breq	.+66     	; 0x2d04 <free+0x9c>
    2cc2:	da 01       	movw	r26, r20
    2cc4:	f3 cf       	rjmp	.-26     	; 0x2cac <free+0x44>
    2cc6:	b3 83       	std	Z+3, r27	; 0x03
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	40 81       	ld	r20, Z
    2ccc:	51 81       	ldd	r21, Z+1	; 0x01
    2cce:	84 0f       	add	r24, r20
    2cd0:	95 1f       	adc	r25, r21
    2cd2:	8a 17       	cp	r24, r26
    2cd4:	9b 07       	cpc	r25, r27
    2cd6:	71 f4       	brne	.+28     	; 0x2cf4 <free+0x8c>
    2cd8:	8d 91       	ld	r24, X+
    2cda:	9c 91       	ld	r25, X
    2cdc:	11 97       	sbiw	r26, 0x01	; 1
    2cde:	84 0f       	add	r24, r20
    2ce0:	95 1f       	adc	r25, r21
    2ce2:	02 96       	adiw	r24, 0x02	; 2
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	80 83       	st	Z, r24
    2ce8:	12 96       	adiw	r26, 0x02	; 2
    2cea:	8d 91       	ld	r24, X+
    2cec:	9c 91       	ld	r25, X
    2cee:	13 97       	sbiw	r26, 0x03	; 3
    2cf0:	93 83       	std	Z+3, r25	; 0x03
    2cf2:	82 83       	std	Z+2, r24	; 0x02
    2cf4:	21 15       	cp	r18, r1
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	29 f4       	brne	.+10     	; 0x2d04 <free+0x9c>
    2cfa:	f0 93 8a 04 	sts	0x048A, r31
    2cfe:	e0 93 89 04 	sts	0x0489, r30
    2d02:	3e c0       	rjmp	.+124    	; 0x2d80 <free+0x118>
    2d04:	d9 01       	movw	r26, r18
    2d06:	13 96       	adiw	r26, 0x03	; 3
    2d08:	fc 93       	st	X, r31
    2d0a:	ee 93       	st	-X, r30
    2d0c:	12 97       	sbiw	r26, 0x02	; 2
    2d0e:	4d 91       	ld	r20, X+
    2d10:	5d 91       	ld	r21, X+
    2d12:	a4 0f       	add	r26, r20
    2d14:	b5 1f       	adc	r27, r21
    2d16:	ea 17       	cp	r30, r26
    2d18:	fb 07       	cpc	r31, r27
    2d1a:	79 f4       	brne	.+30     	; 0x2d3a <free+0xd2>
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	84 0f       	add	r24, r20
    2d22:	95 1f       	adc	r25, r21
    2d24:	02 96       	adiw	r24, 0x02	; 2
    2d26:	d9 01       	movw	r26, r18
    2d28:	11 96       	adiw	r26, 0x01	; 1
    2d2a:	9c 93       	st	X, r25
    2d2c:	8e 93       	st	-X, r24
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	13 96       	adiw	r26, 0x03	; 3
    2d34:	9c 93       	st	X, r25
    2d36:	8e 93       	st	-X, r24
    2d38:	12 97       	sbiw	r26, 0x02	; 2
    2d3a:	e0 e0       	ldi	r30, 0x00	; 0
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <free+0xe4>
    2d46:	fe 01       	movw	r30, r28
    2d48:	ec 01       	movw	r28, r24
    2d4a:	f9 cf       	rjmp	.-14     	; 0x2d3e <free+0xd6>
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	02 96       	adiw	r24, 0x02	; 2
    2d50:	28 81       	ld	r18, Y
    2d52:	39 81       	ldd	r19, Y+1	; 0x01
    2d54:	82 0f       	add	r24, r18
    2d56:	93 1f       	adc	r25, r19
    2d58:	20 91 87 04 	lds	r18, 0x0487
    2d5c:	30 91 88 04 	lds	r19, 0x0488
    2d60:	28 17       	cp	r18, r24
    2d62:	39 07       	cpc	r19, r25
    2d64:	69 f4       	brne	.+26     	; 0x2d80 <free+0x118>
    2d66:	30 97       	sbiw	r30, 0x00	; 0
    2d68:	29 f4       	brne	.+10     	; 0x2d74 <free+0x10c>
    2d6a:	10 92 8a 04 	sts	0x048A, r1
    2d6e:	10 92 89 04 	sts	0x0489, r1
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <free+0x110>
    2d74:	13 82       	std	Z+3, r1	; 0x03
    2d76:	12 82       	std	Z+2, r1	; 0x02
    2d78:	d0 93 88 04 	sts	0x0488, r29
    2d7c:	c0 93 87 04 	sts	0x0487, r28
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <strtod>:
    2d86:	4f 92       	push	r4
    2d88:	5f 92       	push	r5
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	8b 01       	movw	r16, r22
    2da8:	61 15       	cp	r22, r1
    2daa:	71 05       	cpc	r23, r1
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <strtod+0x30>
    2dae:	db 01       	movw	r26, r22
    2db0:	8c 93       	st	X, r24
    2db2:	11 96       	adiw	r26, 0x01	; 1
    2db4:	9c 93       	st	X, r25
    2db6:	ec 01       	movw	r28, r24
    2db8:	5e 01       	movw	r10, r28
    2dba:	bf ef       	ldi	r27, 0xFF	; 255
    2dbc:	ab 1a       	sub	r10, r27
    2dbe:	bb 0a       	sbc	r11, r27
    2dc0:	75 01       	movw	r14, r10
    2dc2:	c8 80       	ld	r12, Y
    2dc4:	8c 2d       	mov	r24, r12
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 40 18 	call	0x3080	; 0x3080 <isspace>
    2dcc:	89 2b       	or	r24, r25
    2dce:	11 f0       	breq	.+4      	; 0x2dd4 <strtod+0x4e>
    2dd0:	e5 01       	movw	r28, r10
    2dd2:	f2 cf       	rjmp	.-28     	; 0x2db8 <strtod+0x32>
    2dd4:	ed e2       	ldi	r30, 0x2D	; 45
    2dd6:	ce 12       	cpse	r12, r30
    2dd8:	08 c0       	rjmp	.+16     	; 0x2dea <strtod+0x64>
    2dda:	7e 01       	movw	r14, r28
    2ddc:	f2 e0       	ldi	r31, 0x02	; 2
    2dde:	ef 0e       	add	r14, r31
    2de0:	f1 1c       	adc	r15, r1
    2de2:	c9 80       	ldd	r12, Y+1	; 0x01
    2de4:	dd 24       	eor	r13, r13
    2de6:	d3 94       	inc	r13
    2de8:	09 c0       	rjmp	.+18     	; 0x2dfc <strtod+0x76>
    2dea:	2b e2       	ldi	r18, 0x2B	; 43
    2dec:	c2 12       	cpse	r12, r18
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <strtod+0x74>
    2df0:	7e 01       	movw	r14, r28
    2df2:	42 e0       	ldi	r20, 0x02	; 2
    2df4:	e4 0e       	add	r14, r20
    2df6:	f1 1c       	adc	r15, r1
    2df8:	c9 80       	ldd	r12, Y+1	; 0x01
    2dfa:	d1 2c       	mov	r13, r1
    2dfc:	e7 01       	movw	r28, r14
    2dfe:	21 97       	sbiw	r28, 0x01	; 1
    2e00:	43 e0       	ldi	r20, 0x03	; 3
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	69 e8       	ldi	r22, 0x89	; 137
    2e06:	71 e0       	ldi	r23, 0x01	; 1
    2e08:	ce 01       	movw	r24, r28
    2e0a:	0e 94 48 18 	call	0x3090	; 0x3090 <strncasecmp_P>
    2e0e:	89 2b       	or	r24, r25
    2e10:	d1 f4       	brne	.+52     	; 0x2e46 <strtod+0xc0>
    2e12:	e7 01       	movw	r28, r14
    2e14:	22 96       	adiw	r28, 0x02	; 2
    2e16:	45 e0       	ldi	r20, 0x05	; 5
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	64 e8       	ldi	r22, 0x84	; 132
    2e1c:	71 e0       	ldi	r23, 0x01	; 1
    2e1e:	ce 01       	movw	r24, r28
    2e20:	0e 94 48 18 	call	0x3090	; 0x3090 <strncasecmp_P>
    2e24:	89 2b       	or	r24, r25
    2e26:	11 f4       	brne	.+4      	; 0x2e2c <strtod+0xa6>
    2e28:	e7 01       	movw	r28, r14
    2e2a:	27 96       	adiw	r28, 0x07	; 7
    2e2c:	01 15       	cp	r16, r1
    2e2e:	11 05       	cpc	r17, r1
    2e30:	19 f0       	breq	.+6      	; 0x2e38 <strtod+0xb2>
    2e32:	d8 01       	movw	r26, r16
    2e34:	cd 93       	st	X+, r28
    2e36:	dc 93       	st	X, r29
    2e38:	d1 10       	cpse	r13, r1
    2e3a:	08 c1       	rjmp	.+528    	; 0x304c <strtod+0x2c6>
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	80 e8       	ldi	r24, 0x80	; 128
    2e42:	9f e7       	ldi	r25, 0x7F	; 127
    2e44:	0c c1       	rjmp	.+536    	; 0x305e <strtod+0x2d8>
    2e46:	43 e0       	ldi	r20, 0x03	; 3
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	61 e8       	ldi	r22, 0x81	; 129
    2e4c:	71 e0       	ldi	r23, 0x01	; 1
    2e4e:	ce 01       	movw	r24, r28
    2e50:	0e 94 48 18 	call	0x3090	; 0x3090 <strncasecmp_P>
    2e54:	89 2b       	or	r24, r25
    2e56:	59 f4       	brne	.+22     	; 0x2e6e <strtod+0xe8>
    2e58:	01 15       	cp	r16, r1
    2e5a:	11 05       	cpc	r17, r1
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <strtod+0xda>
    2e5e:	fb c0       	rjmp	.+502    	; 0x3056 <strtod+0x2d0>
    2e60:	b2 e0       	ldi	r27, 0x02	; 2
    2e62:	eb 0e       	add	r14, r27
    2e64:	f1 1c       	adc	r15, r1
    2e66:	f8 01       	movw	r30, r16
    2e68:	f1 82       	std	Z+1, r15	; 0x01
    2e6a:	e0 82       	st	Z, r14
    2e6c:	f4 c0       	rjmp	.+488    	; 0x3056 <strtod+0x2d0>
    2e6e:	f7 01       	movw	r30, r14
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	70 e0       	ldi	r23, 0x00	; 0
    2e74:	cb 01       	movw	r24, r22
    2e76:	c0 e0       	ldi	r28, 0x00	; 0
    2e78:	d0 e0       	ldi	r29, 0x00	; 0
    2e7a:	7f 01       	movw	r14, r30
    2e7c:	a0 ed       	ldi	r26, 0xD0	; 208
    2e7e:	aa 2e       	mov	r10, r26
    2e80:	ac 0c       	add	r10, r12
    2e82:	29 e0       	ldi	r18, 0x09	; 9
    2e84:	2a 15       	cp	r18, r10
    2e86:	30 f1       	brcs	.+76     	; 0x2ed4 <strtod+0x14e>
    2e88:	4d 2d       	mov	r20, r13
    2e8a:	42 60       	ori	r20, 0x02	; 2
    2e8c:	b4 2e       	mov	r11, r20
    2e8e:	2d 2d       	mov	r18, r13
    2e90:	28 70       	andi	r18, 0x08	; 8
    2e92:	d2 fe       	sbrs	r13, 2
    2e94:	04 c0       	rjmp	.+8      	; 0x2e9e <strtod+0x118>
    2e96:	21 11       	cpse	r18, r1
    2e98:	25 c0       	rjmp	.+74     	; 0x2ee4 <strtod+0x15e>
    2e9a:	21 96       	adiw	r28, 0x01	; 1
    2e9c:	23 c0       	rjmp	.+70     	; 0x2ee4 <strtod+0x15e>
    2e9e:	21 11       	cpse	r18, r1
    2ea0:	21 97       	sbiw	r28, 0x01	; 1
    2ea2:	a5 e0       	ldi	r26, 0x05	; 5
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	9b 01       	movw	r18, r22
    2ea8:	ac 01       	movw	r20, r24
    2eaa:	0e 94 97 1b 	call	0x372e	; 0x372e <__muluhisi3>
    2eae:	66 0f       	add	r22, r22
    2eb0:	77 1f       	adc	r23, r23
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	6a 0d       	add	r22, r10
    2eb8:	71 1d       	adc	r23, r1
    2eba:	81 1d       	adc	r24, r1
    2ebc:	91 1d       	adc	r25, r1
    2ebe:	68 39       	cpi	r22, 0x98	; 152
    2ec0:	a9 e9       	ldi	r26, 0x99	; 153
    2ec2:	7a 07       	cpc	r23, r26
    2ec4:	8a 07       	cpc	r24, r26
    2ec6:	a9 e1       	ldi	r26, 0x19	; 25
    2ec8:	9a 07       	cpc	r25, r26
    2eca:	60 f0       	brcs	.+24     	; 0x2ee4 <strtod+0x15e>
    2ecc:	bd 2d       	mov	r27, r13
    2ece:	b6 60       	ori	r27, 0x06	; 6
    2ed0:	bb 2e       	mov	r11, r27
    2ed2:	08 c0       	rjmp	.+16     	; 0x2ee4 <strtod+0x15e>
    2ed4:	2e ef       	ldi	r18, 0xFE	; 254
    2ed6:	a2 12       	cpse	r10, r18
    2ed8:	0a c0       	rjmp	.+20     	; 0x2eee <strtod+0x168>
    2eda:	d3 fc       	sbrc	r13, 3
    2edc:	50 c0       	rjmp	.+160    	; 0x2f7e <strtod+0x1f8>
    2ede:	4d 2d       	mov	r20, r13
    2ee0:	48 60       	ori	r20, 0x08	; 8
    2ee2:	b4 2e       	mov	r11, r20
    2ee4:	31 96       	adiw	r30, 0x01	; 1
    2ee6:	d7 01       	movw	r26, r14
    2ee8:	cc 90       	ld	r12, X
    2eea:	db 2c       	mov	r13, r11
    2eec:	c6 cf       	rjmp	.-116    	; 0x2e7a <strtod+0xf4>
    2eee:	2c 2d       	mov	r18, r12
    2ef0:	2f 7d       	andi	r18, 0xDF	; 223
    2ef2:	25 34       	cpi	r18, 0x45	; 69
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <strtod+0x172>
    2ef6:	43 c0       	rjmp	.+134    	; 0x2f7e <strtod+0x1f8>
    2ef8:	a0 81       	ld	r26, Z
    2efa:	ad 32       	cpi	r26, 0x2D	; 45
    2efc:	41 f4       	brne	.+16     	; 0x2f0e <strtod+0x188>
    2efe:	bd 2d       	mov	r27, r13
    2f00:	b0 61       	ori	r27, 0x10	; 16
    2f02:	db 2e       	mov	r13, r27
    2f04:	7f 01       	movw	r14, r30
    2f06:	22 e0       	ldi	r18, 0x02	; 2
    2f08:	e2 0e       	add	r14, r18
    2f0a:	f1 1c       	adc	r15, r1
    2f0c:	0c c0       	rjmp	.+24     	; 0x2f26 <strtod+0x1a0>
    2f0e:	7f 01       	movw	r14, r30
    2f10:	ab 32       	cpi	r26, 0x2B	; 43
    2f12:	31 f0       	breq	.+12     	; 0x2f20 <strtod+0x19a>
    2f14:	4f ef       	ldi	r20, 0xFF	; 255
    2f16:	e4 1a       	sub	r14, r20
    2f18:	f4 0a       	sbc	r15, r20
    2f1a:	21 e0       	ldi	r18, 0x01	; 1
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	06 c0       	rjmp	.+12     	; 0x2f2c <strtod+0x1a6>
    2f20:	a2 e0       	ldi	r26, 0x02	; 2
    2f22:	ea 0e       	add	r14, r26
    2f24:	f1 1c       	adc	r15, r1
    2f26:	a1 81       	ldd	r26, Z+1	; 0x01
    2f28:	22 e0       	ldi	r18, 0x02	; 2
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	a0 53       	subi	r26, 0x30	; 48
    2f2e:	aa 30       	cpi	r26, 0x0A	; 10
    2f30:	18 f0       	brcs	.+6      	; 0x2f38 <strtod+0x1b2>
    2f32:	e2 1a       	sub	r14, r18
    2f34:	f3 0a       	sbc	r15, r19
    2f36:	23 c0       	rjmp	.+70     	; 0x2f7e <strtod+0x1f8>
    2f38:	f7 01       	movw	r30, r14
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	20 38       	cpi	r18, 0x80	; 128
    2f40:	bc e0       	ldi	r27, 0x0C	; 12
    2f42:	3b 07       	cpc	r19, r27
    2f44:	5c f4       	brge	.+22     	; 0x2f5c <strtod+0x1d6>
    2f46:	a9 01       	movw	r20, r18
    2f48:	44 0f       	add	r20, r20
    2f4a:	55 1f       	adc	r21, r21
    2f4c:	44 0f       	add	r20, r20
    2f4e:	55 1f       	adc	r21, r21
    2f50:	24 0f       	add	r18, r20
    2f52:	35 1f       	adc	r19, r21
    2f54:	22 0f       	add	r18, r18
    2f56:	33 1f       	adc	r19, r19
    2f58:	2a 0f       	add	r18, r26
    2f5a:	31 1d       	adc	r19, r1
    2f5c:	af 01       	movw	r20, r30
    2f5e:	4f 5f       	subi	r20, 0xFF	; 255
    2f60:	5f 4f       	sbci	r21, 0xFF	; 255
    2f62:	7a 01       	movw	r14, r20
    2f64:	a0 81       	ld	r26, Z
    2f66:	a0 53       	subi	r26, 0x30	; 48
    2f68:	aa 30       	cpi	r26, 0x0A	; 10
    2f6a:	10 f4       	brcc	.+4      	; 0x2f70 <strtod+0x1ea>
    2f6c:	fa 01       	movw	r30, r20
    2f6e:	e7 cf       	rjmp	.-50     	; 0x2f3e <strtod+0x1b8>
    2f70:	d4 fe       	sbrs	r13, 4
    2f72:	03 c0       	rjmp	.+6      	; 0x2f7a <strtod+0x1f4>
    2f74:	31 95       	neg	r19
    2f76:	21 95       	neg	r18
    2f78:	31 09       	sbc	r19, r1
    2f7a:	c2 0f       	add	r28, r18
    2f7c:	d3 1f       	adc	r29, r19
    2f7e:	d1 fe       	sbrs	r13, 1
    2f80:	09 c0       	rjmp	.+18     	; 0x2f94 <strtod+0x20e>
    2f82:	01 15       	cp	r16, r1
    2f84:	11 05       	cpc	r17, r1
    2f86:	31 f0       	breq	.+12     	; 0x2f94 <strtod+0x20e>
    2f88:	e1 e0       	ldi	r30, 0x01	; 1
    2f8a:	ee 1a       	sub	r14, r30
    2f8c:	f1 08       	sbc	r15, r1
    2f8e:	d8 01       	movw	r26, r16
    2f90:	ed 92       	st	X+, r14
    2f92:	fc 92       	st	X, r15
    2f94:	0e 94 11 12 	call	0x2422	; 0x2422 <__floatunsisf>
    2f98:	2d 2d       	mov	r18, r13
    2f9a:	23 70       	andi	r18, 0x03	; 3
    2f9c:	23 30       	cpi	r18, 0x03	; 3
    2f9e:	19 f0       	breq	.+6      	; 0x2fa6 <strtod+0x220>
    2fa0:	6b 01       	movw	r12, r22
    2fa2:	7c 01       	movw	r14, r24
    2fa4:	06 c0       	rjmp	.+12     	; 0x2fb2 <strtod+0x22c>
    2fa6:	6b 01       	movw	r12, r22
    2fa8:	7c 01       	movw	r14, r24
    2faa:	f7 fa       	bst	r15, 7
    2fac:	f0 94       	com	r15
    2fae:	f7 f8       	bld	r15, 7
    2fb0:	f0 94       	com	r15
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	c7 01       	movw	r24, r14
    2fba:	b6 01       	movw	r22, r12
    2fbc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__cmpsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <strtod+0x240>
    2fc4:	40 c0       	rjmp	.+128    	; 0x3046 <strtod+0x2c0>
    2fc6:	d7 ff       	sbrs	r29, 7
    2fc8:	06 c0       	rjmp	.+12     	; 0x2fd6 <strtod+0x250>
    2fca:	d1 95       	neg	r29
    2fcc:	c1 95       	neg	r28
    2fce:	d1 09       	sbc	r29, r1
    2fd0:	00 ea       	ldi	r16, 0xA0	; 160
    2fd2:	11 e0       	ldi	r17, 0x01	; 1
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <strtod+0x254>
    2fd6:	08 eb       	ldi	r16, 0xB8	; 184
    2fd8:	11 e0       	ldi	r17, 0x01	; 1
    2fda:	48 01       	movw	r8, r16
    2fdc:	b8 e1       	ldi	r27, 0x18	; 24
    2fde:	8b 1a       	sub	r8, r27
    2fe0:	91 08       	sbc	r9, r1
    2fe2:	90 e2       	ldi	r25, 0x20	; 32
    2fe4:	a9 2e       	mov	r10, r25
    2fe6:	b1 2c       	mov	r11, r1
    2fe8:	f8 01       	movw	r30, r16
    2fea:	45 90       	lpm	r4, Z+
    2fec:	55 90       	lpm	r5, Z+
    2fee:	65 90       	lpm	r6, Z+
    2ff0:	74 90       	lpm	r7, Z
    2ff2:	ca 15       	cp	r28, r10
    2ff4:	db 05       	cpc	r29, r11
    2ff6:	5c f0       	brlt	.+22     	; 0x300e <strtod+0x288>
    2ff8:	a3 01       	movw	r20, r6
    2ffa:	92 01       	movw	r18, r4
    2ffc:	c7 01       	movw	r24, r14
    2ffe:	b6 01       	movw	r22, r12
    3000:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulsf3>
    3004:	6b 01       	movw	r12, r22
    3006:	7c 01       	movw	r14, r24
    3008:	ca 19       	sub	r28, r10
    300a:	db 09       	sbc	r29, r11
    300c:	f2 cf       	rjmp	.-28     	; 0x2ff2 <strtod+0x26c>
    300e:	04 50       	subi	r16, 0x04	; 4
    3010:	11 09       	sbc	r17, r1
    3012:	b5 94       	asr	r11
    3014:	a7 94       	ror	r10
    3016:	08 15       	cp	r16, r8
    3018:	19 05       	cpc	r17, r9
    301a:	31 f7       	brne	.-52     	; 0x2fe8 <strtod+0x262>
    301c:	8e 2d       	mov	r24, r14
    301e:	88 0f       	add	r24, r24
    3020:	8f 2d       	mov	r24, r15
    3022:	88 1f       	adc	r24, r24
    3024:	8f 3f       	cpi	r24, 0xFF	; 255
    3026:	49 f0       	breq	.+18     	; 0x303a <strtod+0x2b4>
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	a9 01       	movw	r20, r18
    302e:	c7 01       	movw	r24, r14
    3030:	b6 01       	movw	r22, r12
    3032:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__cmpsf2>
    3036:	81 11       	cpse	r24, r1
    3038:	06 c0       	rjmp	.+12     	; 0x3046 <strtod+0x2c0>
    303a:	82 e2       	ldi	r24, 0x22	; 34
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	90 93 8c 04 	sts	0x048C, r25
    3042:	80 93 8b 04 	sts	0x048B, r24
    3046:	c7 01       	movw	r24, r14
    3048:	b6 01       	movw	r22, r12
    304a:	09 c0       	rjmp	.+18     	; 0x305e <strtod+0x2d8>
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	80 e8       	ldi	r24, 0x80	; 128
    3052:	9f ef       	ldi	r25, 0xFF	; 255
    3054:	04 c0       	rjmp	.+8      	; 0x305e <strtod+0x2d8>
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	80 ec       	ldi	r24, 0xC0	; 192
    305c:	9f e7       	ldi	r25, 0x7F	; 127
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	ff 90       	pop	r15
    3068:	ef 90       	pop	r14
    306a:	df 90       	pop	r13
    306c:	cf 90       	pop	r12
    306e:	bf 90       	pop	r11
    3070:	af 90       	pop	r10
    3072:	9f 90       	pop	r9
    3074:	8f 90       	pop	r8
    3076:	7f 90       	pop	r7
    3078:	6f 90       	pop	r6
    307a:	5f 90       	pop	r5
    307c:	4f 90       	pop	r4
    307e:	08 95       	ret

00003080 <isspace>:
    3080:	91 11       	cpse	r25, r1
    3082:	ac c2       	rjmp	.+1368   	; 0x35dc <__ctype_isfalse>
    3084:	80 32       	cpi	r24, 0x20	; 32
    3086:	19 f0       	breq	.+6      	; 0x308e <isspace+0xe>
    3088:	89 50       	subi	r24, 0x09	; 9
    308a:	85 50       	subi	r24, 0x05	; 5
    308c:	d0 f7       	brcc	.-12     	; 0x3082 <isspace+0x2>
    308e:	08 95       	ret

00003090 <strncasecmp_P>:
    3090:	fb 01       	movw	r30, r22
    3092:	dc 01       	movw	r26, r24
    3094:	41 50       	subi	r20, 0x01	; 1
    3096:	50 40       	sbci	r21, 0x00	; 0
    3098:	88 f0       	brcs	.+34     	; 0x30bc <strncasecmp_P+0x2c>
    309a:	8d 91       	ld	r24, X+
    309c:	81 34       	cpi	r24, 0x41	; 65
    309e:	1c f0       	brlt	.+6      	; 0x30a6 <strncasecmp_P+0x16>
    30a0:	8b 35       	cpi	r24, 0x5B	; 91
    30a2:	0c f4       	brge	.+2      	; 0x30a6 <strncasecmp_P+0x16>
    30a4:	80 5e       	subi	r24, 0xE0	; 224
    30a6:	65 91       	lpm	r22, Z+
    30a8:	61 34       	cpi	r22, 0x41	; 65
    30aa:	1c f0       	brlt	.+6      	; 0x30b2 <strncasecmp_P+0x22>
    30ac:	6b 35       	cpi	r22, 0x5B	; 91
    30ae:	0c f4       	brge	.+2      	; 0x30b2 <strncasecmp_P+0x22>
    30b0:	60 5e       	subi	r22, 0xE0	; 224
    30b2:	86 1b       	sub	r24, r22
    30b4:	61 11       	cpse	r22, r1
    30b6:	71 f3       	breq	.-36     	; 0x3094 <strncasecmp_P+0x4>
    30b8:	99 0b       	sbc	r25, r25
    30ba:	08 95       	ret
    30bc:	88 1b       	sub	r24, r24
    30be:	fc cf       	rjmp	.-8      	; 0x30b8 <strncasecmp_P+0x28>

000030c0 <strcat>:
    30c0:	fb 01       	movw	r30, r22
    30c2:	dc 01       	movw	r26, r24
    30c4:	0d 90       	ld	r0, X+
    30c6:	00 20       	and	r0, r0
    30c8:	e9 f7       	brne	.-6      	; 0x30c4 <strcat+0x4>
    30ca:	11 97       	sbiw	r26, 0x01	; 1
    30cc:	01 90       	ld	r0, Z+
    30ce:	0d 92       	st	X+, r0
    30d0:	00 20       	and	r0, r0
    30d2:	e1 f7       	brne	.-8      	; 0x30cc <strcat+0xc>
    30d4:	08 95       	ret

000030d6 <strcmp>:
    30d6:	fb 01       	movw	r30, r22
    30d8:	dc 01       	movw	r26, r24
    30da:	8d 91       	ld	r24, X+
    30dc:	01 90       	ld	r0, Z+
    30de:	80 19       	sub	r24, r0
    30e0:	01 10       	cpse	r0, r1
    30e2:	d9 f3       	breq	.-10     	; 0x30da <strcmp+0x4>
    30e4:	99 0b       	sbc	r25, r25
    30e6:	08 95       	ret

000030e8 <strcpy>:
    30e8:	fb 01       	movw	r30, r22
    30ea:	dc 01       	movw	r26, r24
    30ec:	01 90       	ld	r0, Z+
    30ee:	0d 92       	st	X+, r0
    30f0:	00 20       	and	r0, r0
    30f2:	e1 f7       	brne	.-8      	; 0x30ec <strcpy+0x4>
    30f4:	08 95       	ret

000030f6 <strncpy>:
    30f6:	fb 01       	movw	r30, r22
    30f8:	dc 01       	movw	r26, r24
    30fa:	41 50       	subi	r20, 0x01	; 1
    30fc:	50 40       	sbci	r21, 0x00	; 0
    30fe:	48 f0       	brcs	.+18     	; 0x3112 <strncpy+0x1c>
    3100:	01 90       	ld	r0, Z+
    3102:	0d 92       	st	X+, r0
    3104:	00 20       	and	r0, r0
    3106:	c9 f7       	brne	.-14     	; 0x30fa <strncpy+0x4>
    3108:	01 c0       	rjmp	.+2      	; 0x310c <strncpy+0x16>
    310a:	1d 92       	st	X+, r1
    310c:	41 50       	subi	r20, 0x01	; 1
    310e:	50 40       	sbci	r21, 0x00	; 0
    3110:	e0 f7       	brcc	.-8      	; 0x310a <strncpy+0x14>
    3112:	08 95       	ret

00003114 <strpbrk>:
    3114:	dc 01       	movw	r26, r24
    3116:	99 27       	eor	r25, r25
    3118:	8d 91       	ld	r24, X+
    311a:	88 23       	and	r24, r24
    311c:	41 f0       	breq	.+16     	; 0x312e <strpbrk+0x1a>
    311e:	fb 01       	movw	r30, r22
    3120:	01 90       	ld	r0, Z+
    3122:	08 16       	cp	r0, r24
    3124:	01 10       	cpse	r0, r1
    3126:	e1 f7       	brne	.-8      	; 0x3120 <strpbrk+0xc>
    3128:	b9 f7       	brne	.-18     	; 0x3118 <strpbrk+0x4>
    312a:	11 97       	sbiw	r26, 0x01	; 1
    312c:	cd 01       	movw	r24, r26
    312e:	08 95       	ret

00003130 <sprintf>:
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	2e 97       	sbiw	r28, 0x0e	; 14
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	0d 89       	ldd	r16, Y+21	; 0x15
    314a:	1e 89       	ldd	r17, Y+22	; 0x16
    314c:	86 e0       	ldi	r24, 0x06	; 6
    314e:	8c 83       	std	Y+4, r24	; 0x04
    3150:	1a 83       	std	Y+2, r17	; 0x02
    3152:	09 83       	std	Y+1, r16	; 0x01
    3154:	8f ef       	ldi	r24, 0xFF	; 255
    3156:	9f e7       	ldi	r25, 0x7F	; 127
    3158:	9e 83       	std	Y+6, r25	; 0x06
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	ae 01       	movw	r20, r28
    315e:	47 5e       	subi	r20, 0xE7	; 231
    3160:	5f 4f       	sbci	r21, 0xFF	; 255
    3162:	6f 89       	ldd	r22, Y+23	; 0x17
    3164:	78 8d       	ldd	r23, Y+24	; 0x18
    3166:	ce 01       	movw	r24, r28
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	0e 94 c7 18 	call	0x318e	; 0x318e <vfprintf>
    316e:	ef 81       	ldd	r30, Y+7	; 0x07
    3170:	f8 85       	ldd	r31, Y+8	; 0x08
    3172:	e0 0f       	add	r30, r16
    3174:	f1 1f       	adc	r31, r17
    3176:	10 82       	st	Z, r1
    3178:	2e 96       	adiw	r28, 0x0e	; 14
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	08 95       	ret

0000318e <vfprintf>:
    318e:	2f 92       	push	r2
    3190:	3f 92       	push	r3
    3192:	4f 92       	push	r4
    3194:	5f 92       	push	r5
    3196:	6f 92       	push	r6
    3198:	7f 92       	push	r7
    319a:	8f 92       	push	r8
    319c:	9f 92       	push	r9
    319e:	af 92       	push	r10
    31a0:	bf 92       	push	r11
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	2c 97       	sbiw	r28, 0x0c	; 12
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	7c 01       	movw	r14, r24
    31c4:	6b 01       	movw	r12, r22
    31c6:	8a 01       	movw	r16, r20
    31c8:	fc 01       	movw	r30, r24
    31ca:	17 82       	std	Z+7, r1	; 0x07
    31cc:	16 82       	std	Z+6, r1	; 0x06
    31ce:	83 81       	ldd	r24, Z+3	; 0x03
    31d0:	81 ff       	sbrs	r24, 1
    31d2:	bd c1       	rjmp	.+890    	; 0x354e <vfprintf+0x3c0>
    31d4:	ce 01       	movw	r24, r28
    31d6:	01 96       	adiw	r24, 0x01	; 1
    31d8:	4c 01       	movw	r8, r24
    31da:	f7 01       	movw	r30, r14
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	f6 01       	movw	r30, r12
    31e0:	93 fd       	sbrc	r25, 3
    31e2:	85 91       	lpm	r24, Z+
    31e4:	93 ff       	sbrs	r25, 3
    31e6:	81 91       	ld	r24, Z+
    31e8:	6f 01       	movw	r12, r30
    31ea:	88 23       	and	r24, r24
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <vfprintf+0x62>
    31ee:	ab c1       	rjmp	.+854    	; 0x3546 <vfprintf+0x3b8>
    31f0:	85 32       	cpi	r24, 0x25	; 37
    31f2:	39 f4       	brne	.+14     	; 0x3202 <vfprintf+0x74>
    31f4:	93 fd       	sbrc	r25, 3
    31f6:	85 91       	lpm	r24, Z+
    31f8:	93 ff       	sbrs	r25, 3
    31fa:	81 91       	ld	r24, Z+
    31fc:	6f 01       	movw	r12, r30
    31fe:	85 32       	cpi	r24, 0x25	; 37
    3200:	29 f4       	brne	.+10     	; 0x320c <vfprintf+0x7e>
    3202:	b7 01       	movw	r22, r14
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    320a:	e7 cf       	rjmp	.-50     	; 0x31da <vfprintf+0x4c>
    320c:	51 2c       	mov	r5, r1
    320e:	31 2c       	mov	r3, r1
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	20 32       	cpi	r18, 0x20	; 32
    3214:	a0 f4       	brcc	.+40     	; 0x323e <vfprintf+0xb0>
    3216:	8b 32       	cpi	r24, 0x2B	; 43
    3218:	69 f0       	breq	.+26     	; 0x3234 <vfprintf+0xa6>
    321a:	30 f4       	brcc	.+12     	; 0x3228 <vfprintf+0x9a>
    321c:	80 32       	cpi	r24, 0x20	; 32
    321e:	59 f0       	breq	.+22     	; 0x3236 <vfprintf+0xa8>
    3220:	83 32       	cpi	r24, 0x23	; 35
    3222:	69 f4       	brne	.+26     	; 0x323e <vfprintf+0xb0>
    3224:	20 61       	ori	r18, 0x10	; 16
    3226:	2c c0       	rjmp	.+88     	; 0x3280 <vfprintf+0xf2>
    3228:	8d 32       	cpi	r24, 0x2D	; 45
    322a:	39 f0       	breq	.+14     	; 0x323a <vfprintf+0xac>
    322c:	80 33       	cpi	r24, 0x30	; 48
    322e:	39 f4       	brne	.+14     	; 0x323e <vfprintf+0xb0>
    3230:	21 60       	ori	r18, 0x01	; 1
    3232:	26 c0       	rjmp	.+76     	; 0x3280 <vfprintf+0xf2>
    3234:	22 60       	ori	r18, 0x02	; 2
    3236:	24 60       	ori	r18, 0x04	; 4
    3238:	23 c0       	rjmp	.+70     	; 0x3280 <vfprintf+0xf2>
    323a:	28 60       	ori	r18, 0x08	; 8
    323c:	21 c0       	rjmp	.+66     	; 0x3280 <vfprintf+0xf2>
    323e:	27 fd       	sbrc	r18, 7
    3240:	27 c0       	rjmp	.+78     	; 0x3290 <vfprintf+0x102>
    3242:	30 ed       	ldi	r19, 0xD0	; 208
    3244:	38 0f       	add	r19, r24
    3246:	3a 30       	cpi	r19, 0x0A	; 10
    3248:	78 f4       	brcc	.+30     	; 0x3268 <vfprintf+0xda>
    324a:	26 ff       	sbrs	r18, 6
    324c:	06 c0       	rjmp	.+12     	; 0x325a <vfprintf+0xcc>
    324e:	fa e0       	ldi	r31, 0x0A	; 10
    3250:	5f 9e       	mul	r5, r31
    3252:	30 0d       	add	r19, r0
    3254:	11 24       	eor	r1, r1
    3256:	53 2e       	mov	r5, r19
    3258:	13 c0       	rjmp	.+38     	; 0x3280 <vfprintf+0xf2>
    325a:	8a e0       	ldi	r24, 0x0A	; 10
    325c:	38 9e       	mul	r3, r24
    325e:	30 0d       	add	r19, r0
    3260:	11 24       	eor	r1, r1
    3262:	33 2e       	mov	r3, r19
    3264:	20 62       	ori	r18, 0x20	; 32
    3266:	0c c0       	rjmp	.+24     	; 0x3280 <vfprintf+0xf2>
    3268:	8e 32       	cpi	r24, 0x2E	; 46
    326a:	21 f4       	brne	.+8      	; 0x3274 <vfprintf+0xe6>
    326c:	26 fd       	sbrc	r18, 6
    326e:	6b c1       	rjmp	.+726    	; 0x3546 <vfprintf+0x3b8>
    3270:	20 64       	ori	r18, 0x40	; 64
    3272:	06 c0       	rjmp	.+12     	; 0x3280 <vfprintf+0xf2>
    3274:	8c 36       	cpi	r24, 0x6C	; 108
    3276:	11 f4       	brne	.+4      	; 0x327c <vfprintf+0xee>
    3278:	20 68       	ori	r18, 0x80	; 128
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <vfprintf+0xf2>
    327c:	88 36       	cpi	r24, 0x68	; 104
    327e:	41 f4       	brne	.+16     	; 0x3290 <vfprintf+0x102>
    3280:	f6 01       	movw	r30, r12
    3282:	93 fd       	sbrc	r25, 3
    3284:	85 91       	lpm	r24, Z+
    3286:	93 ff       	sbrs	r25, 3
    3288:	81 91       	ld	r24, Z+
    328a:	6f 01       	movw	r12, r30
    328c:	81 11       	cpse	r24, r1
    328e:	c1 cf       	rjmp	.-126    	; 0x3212 <vfprintf+0x84>
    3290:	98 2f       	mov	r25, r24
    3292:	9f 7d       	andi	r25, 0xDF	; 223
    3294:	95 54       	subi	r25, 0x45	; 69
    3296:	93 30       	cpi	r25, 0x03	; 3
    3298:	28 f4       	brcc	.+10     	; 0x32a4 <vfprintf+0x116>
    329a:	0c 5f       	subi	r16, 0xFC	; 252
    329c:	1f 4f       	sbci	r17, 0xFF	; 255
    329e:	ff e3       	ldi	r31, 0x3F	; 63
    32a0:	f9 83       	std	Y+1, r31	; 0x01
    32a2:	0d c0       	rjmp	.+26     	; 0x32be <vfprintf+0x130>
    32a4:	83 36       	cpi	r24, 0x63	; 99
    32a6:	31 f0       	breq	.+12     	; 0x32b4 <vfprintf+0x126>
    32a8:	83 37       	cpi	r24, 0x73	; 115
    32aa:	71 f0       	breq	.+28     	; 0x32c8 <vfprintf+0x13a>
    32ac:	83 35       	cpi	r24, 0x53	; 83
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <vfprintf+0x124>
    32b0:	5b c0       	rjmp	.+182    	; 0x3368 <vfprintf+0x1da>
    32b2:	22 c0       	rjmp	.+68     	; 0x32f8 <vfprintf+0x16a>
    32b4:	f8 01       	movw	r30, r16
    32b6:	80 81       	ld	r24, Z
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	0e 5f       	subi	r16, 0xFE	; 254
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
    32be:	44 24       	eor	r4, r4
    32c0:	43 94       	inc	r4
    32c2:	51 2c       	mov	r5, r1
    32c4:	54 01       	movw	r10, r8
    32c6:	15 c0       	rjmp	.+42     	; 0x32f2 <vfprintf+0x164>
    32c8:	38 01       	movw	r6, r16
    32ca:	f2 e0       	ldi	r31, 0x02	; 2
    32cc:	6f 0e       	add	r6, r31
    32ce:	71 1c       	adc	r7, r1
    32d0:	f8 01       	movw	r30, r16
    32d2:	a0 80       	ld	r10, Z
    32d4:	b1 80       	ldd	r11, Z+1	; 0x01
    32d6:	26 ff       	sbrs	r18, 6
    32d8:	03 c0       	rjmp	.+6      	; 0x32e0 <vfprintf+0x152>
    32da:	65 2d       	mov	r22, r5
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <vfprintf+0x156>
    32e0:	6f ef       	ldi	r22, 0xFF	; 255
    32e2:	7f ef       	ldi	r23, 0xFF	; 255
    32e4:	c5 01       	movw	r24, r10
    32e6:	2c 87       	std	Y+12, r18	; 0x0c
    32e8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strnlen>
    32ec:	2c 01       	movw	r4, r24
    32ee:	83 01       	movw	r16, r6
    32f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    32f2:	2f 77       	andi	r18, 0x7F	; 127
    32f4:	22 2e       	mov	r2, r18
    32f6:	17 c0       	rjmp	.+46     	; 0x3326 <vfprintf+0x198>
    32f8:	38 01       	movw	r6, r16
    32fa:	f2 e0       	ldi	r31, 0x02	; 2
    32fc:	6f 0e       	add	r6, r31
    32fe:	71 1c       	adc	r7, r1
    3300:	f8 01       	movw	r30, r16
    3302:	a0 80       	ld	r10, Z
    3304:	b1 80       	ldd	r11, Z+1	; 0x01
    3306:	26 ff       	sbrs	r18, 6
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <vfprintf+0x182>
    330a:	65 2d       	mov	r22, r5
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <vfprintf+0x186>
    3310:	6f ef       	ldi	r22, 0xFF	; 255
    3312:	7f ef       	ldi	r23, 0xFF	; 255
    3314:	c5 01       	movw	r24, r10
    3316:	2c 87       	std	Y+12, r18	; 0x0c
    3318:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <strnlen_P>
    331c:	2c 01       	movw	r4, r24
    331e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3320:	20 68       	ori	r18, 0x80	; 128
    3322:	22 2e       	mov	r2, r18
    3324:	83 01       	movw	r16, r6
    3326:	23 fc       	sbrc	r2, 3
    3328:	1b c0       	rjmp	.+54     	; 0x3360 <vfprintf+0x1d2>
    332a:	83 2d       	mov	r24, r3
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	48 16       	cp	r4, r24
    3330:	59 06       	cpc	r5, r25
    3332:	b0 f4       	brcc	.+44     	; 0x3360 <vfprintf+0x1d2>
    3334:	b7 01       	movw	r22, r14
    3336:	80 e2       	ldi	r24, 0x20	; 32
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    333e:	3a 94       	dec	r3
    3340:	f4 cf       	rjmp	.-24     	; 0x332a <vfprintf+0x19c>
    3342:	f5 01       	movw	r30, r10
    3344:	27 fc       	sbrc	r2, 7
    3346:	85 91       	lpm	r24, Z+
    3348:	27 fe       	sbrs	r2, 7
    334a:	81 91       	ld	r24, Z+
    334c:	5f 01       	movw	r10, r30
    334e:	b7 01       	movw	r22, r14
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    3356:	31 10       	cpse	r3, r1
    3358:	3a 94       	dec	r3
    335a:	f1 e0       	ldi	r31, 0x01	; 1
    335c:	4f 1a       	sub	r4, r31
    335e:	51 08       	sbc	r5, r1
    3360:	41 14       	cp	r4, r1
    3362:	51 04       	cpc	r5, r1
    3364:	71 f7       	brne	.-36     	; 0x3342 <vfprintf+0x1b4>
    3366:	e5 c0       	rjmp	.+458    	; 0x3532 <vfprintf+0x3a4>
    3368:	84 36       	cpi	r24, 0x64	; 100
    336a:	11 f0       	breq	.+4      	; 0x3370 <vfprintf+0x1e2>
    336c:	89 36       	cpi	r24, 0x69	; 105
    336e:	39 f5       	brne	.+78     	; 0x33be <vfprintf+0x230>
    3370:	f8 01       	movw	r30, r16
    3372:	27 ff       	sbrs	r18, 7
    3374:	07 c0       	rjmp	.+14     	; 0x3384 <vfprintf+0x1f6>
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	0c 5f       	subi	r16, 0xFC	; 252
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	08 c0       	rjmp	.+16     	; 0x3394 <vfprintf+0x206>
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	88 27       	eor	r24, r24
    338a:	77 fd       	sbrc	r23, 7
    338c:	80 95       	com	r24
    338e:	98 2f       	mov	r25, r24
    3390:	0e 5f       	subi	r16, 0xFE	; 254
    3392:	1f 4f       	sbci	r17, 0xFF	; 255
    3394:	2f 76       	andi	r18, 0x6F	; 111
    3396:	b2 2e       	mov	r11, r18
    3398:	97 ff       	sbrs	r25, 7
    339a:	09 c0       	rjmp	.+18     	; 0x33ae <vfprintf+0x220>
    339c:	90 95       	com	r25
    339e:	80 95       	com	r24
    33a0:	70 95       	com	r23
    33a2:	61 95       	neg	r22
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	8f 4f       	sbci	r24, 0xFF	; 255
    33a8:	9f 4f       	sbci	r25, 0xFF	; 255
    33aa:	20 68       	ori	r18, 0x80	; 128
    33ac:	b2 2e       	mov	r11, r18
    33ae:	2a e0       	ldi	r18, 0x0A	; 10
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	a4 01       	movw	r20, r8
    33b4:	0e 94 39 1b 	call	0x3672	; 0x3672 <__ultoa_invert>
    33b8:	a8 2e       	mov	r10, r24
    33ba:	a8 18       	sub	r10, r8
    33bc:	44 c0       	rjmp	.+136    	; 0x3446 <vfprintf+0x2b8>
    33be:	85 37       	cpi	r24, 0x75	; 117
    33c0:	29 f4       	brne	.+10     	; 0x33cc <vfprintf+0x23e>
    33c2:	2f 7e       	andi	r18, 0xEF	; 239
    33c4:	b2 2e       	mov	r11, r18
    33c6:	2a e0       	ldi	r18, 0x0A	; 10
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	25 c0       	rjmp	.+74     	; 0x3416 <vfprintf+0x288>
    33cc:	f2 2f       	mov	r31, r18
    33ce:	f9 7f       	andi	r31, 0xF9	; 249
    33d0:	bf 2e       	mov	r11, r31
    33d2:	8f 36       	cpi	r24, 0x6F	; 111
    33d4:	c1 f0       	breq	.+48     	; 0x3406 <vfprintf+0x278>
    33d6:	18 f4       	brcc	.+6      	; 0x33de <vfprintf+0x250>
    33d8:	88 35       	cpi	r24, 0x58	; 88
    33da:	79 f0       	breq	.+30     	; 0x33fa <vfprintf+0x26c>
    33dc:	b4 c0       	rjmp	.+360    	; 0x3546 <vfprintf+0x3b8>
    33de:	80 37       	cpi	r24, 0x70	; 112
    33e0:	19 f0       	breq	.+6      	; 0x33e8 <vfprintf+0x25a>
    33e2:	88 37       	cpi	r24, 0x78	; 120
    33e4:	21 f0       	breq	.+8      	; 0x33ee <vfprintf+0x260>
    33e6:	af c0       	rjmp	.+350    	; 0x3546 <vfprintf+0x3b8>
    33e8:	2f 2f       	mov	r18, r31
    33ea:	20 61       	ori	r18, 0x10	; 16
    33ec:	b2 2e       	mov	r11, r18
    33ee:	b4 fe       	sbrs	r11, 4
    33f0:	0d c0       	rjmp	.+26     	; 0x340c <vfprintf+0x27e>
    33f2:	8b 2d       	mov	r24, r11
    33f4:	84 60       	ori	r24, 0x04	; 4
    33f6:	b8 2e       	mov	r11, r24
    33f8:	09 c0       	rjmp	.+18     	; 0x340c <vfprintf+0x27e>
    33fa:	24 ff       	sbrs	r18, 4
    33fc:	0a c0       	rjmp	.+20     	; 0x3412 <vfprintf+0x284>
    33fe:	9f 2f       	mov	r25, r31
    3400:	96 60       	ori	r25, 0x06	; 6
    3402:	b9 2e       	mov	r11, r25
    3404:	06 c0       	rjmp	.+12     	; 0x3412 <vfprintf+0x284>
    3406:	28 e0       	ldi	r18, 0x08	; 8
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	05 c0       	rjmp	.+10     	; 0x3416 <vfprintf+0x288>
    340c:	20 e1       	ldi	r18, 0x10	; 16
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <vfprintf+0x288>
    3412:	20 e1       	ldi	r18, 0x10	; 16
    3414:	32 e0       	ldi	r19, 0x02	; 2
    3416:	f8 01       	movw	r30, r16
    3418:	b7 fe       	sbrs	r11, 7
    341a:	07 c0       	rjmp	.+14     	; 0x342a <vfprintf+0x29c>
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	0c 5f       	subi	r16, 0xFC	; 252
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	06 c0       	rjmp	.+12     	; 0x3436 <vfprintf+0x2a8>
    342a:	60 81       	ld	r22, Z
    342c:	71 81       	ldd	r23, Z+1	; 0x01
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 5f       	subi	r16, 0xFE	; 254
    3434:	1f 4f       	sbci	r17, 0xFF	; 255
    3436:	a4 01       	movw	r20, r8
    3438:	0e 94 39 1b 	call	0x3672	; 0x3672 <__ultoa_invert>
    343c:	a8 2e       	mov	r10, r24
    343e:	a8 18       	sub	r10, r8
    3440:	fb 2d       	mov	r31, r11
    3442:	ff 77       	andi	r31, 0x7F	; 127
    3444:	bf 2e       	mov	r11, r31
    3446:	b6 fe       	sbrs	r11, 6
    3448:	0b c0       	rjmp	.+22     	; 0x3460 <vfprintf+0x2d2>
    344a:	2b 2d       	mov	r18, r11
    344c:	2e 7f       	andi	r18, 0xFE	; 254
    344e:	a5 14       	cp	r10, r5
    3450:	50 f4       	brcc	.+20     	; 0x3466 <vfprintf+0x2d8>
    3452:	b4 fe       	sbrs	r11, 4
    3454:	0a c0       	rjmp	.+20     	; 0x346a <vfprintf+0x2dc>
    3456:	b2 fc       	sbrc	r11, 2
    3458:	08 c0       	rjmp	.+16     	; 0x346a <vfprintf+0x2dc>
    345a:	2b 2d       	mov	r18, r11
    345c:	2e 7e       	andi	r18, 0xEE	; 238
    345e:	05 c0       	rjmp	.+10     	; 0x346a <vfprintf+0x2dc>
    3460:	7a 2c       	mov	r7, r10
    3462:	2b 2d       	mov	r18, r11
    3464:	03 c0       	rjmp	.+6      	; 0x346c <vfprintf+0x2de>
    3466:	7a 2c       	mov	r7, r10
    3468:	01 c0       	rjmp	.+2      	; 0x346c <vfprintf+0x2de>
    346a:	75 2c       	mov	r7, r5
    346c:	24 ff       	sbrs	r18, 4
    346e:	0d c0       	rjmp	.+26     	; 0x348a <vfprintf+0x2fc>
    3470:	fe 01       	movw	r30, r28
    3472:	ea 0d       	add	r30, r10
    3474:	f1 1d       	adc	r31, r1
    3476:	80 81       	ld	r24, Z
    3478:	80 33       	cpi	r24, 0x30	; 48
    347a:	11 f4       	brne	.+4      	; 0x3480 <vfprintf+0x2f2>
    347c:	29 7e       	andi	r18, 0xE9	; 233
    347e:	09 c0       	rjmp	.+18     	; 0x3492 <vfprintf+0x304>
    3480:	22 ff       	sbrs	r18, 2
    3482:	06 c0       	rjmp	.+12     	; 0x3490 <vfprintf+0x302>
    3484:	73 94       	inc	r7
    3486:	73 94       	inc	r7
    3488:	04 c0       	rjmp	.+8      	; 0x3492 <vfprintf+0x304>
    348a:	82 2f       	mov	r24, r18
    348c:	86 78       	andi	r24, 0x86	; 134
    348e:	09 f0       	breq	.+2      	; 0x3492 <vfprintf+0x304>
    3490:	73 94       	inc	r7
    3492:	23 fd       	sbrc	r18, 3
    3494:	13 c0       	rjmp	.+38     	; 0x34bc <vfprintf+0x32e>
    3496:	20 ff       	sbrs	r18, 0
    3498:	06 c0       	rjmp	.+12     	; 0x34a6 <vfprintf+0x318>
    349a:	5a 2c       	mov	r5, r10
    349c:	73 14       	cp	r7, r3
    349e:	18 f4       	brcc	.+6      	; 0x34a6 <vfprintf+0x318>
    34a0:	53 0c       	add	r5, r3
    34a2:	57 18       	sub	r5, r7
    34a4:	73 2c       	mov	r7, r3
    34a6:	73 14       	cp	r7, r3
    34a8:	68 f4       	brcc	.+26     	; 0x34c4 <vfprintf+0x336>
    34aa:	b7 01       	movw	r22, r14
    34ac:	80 e2       	ldi	r24, 0x20	; 32
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	2c 87       	std	Y+12, r18	; 0x0c
    34b2:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    34b6:	73 94       	inc	r7
    34b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    34ba:	f5 cf       	rjmp	.-22     	; 0x34a6 <vfprintf+0x318>
    34bc:	73 14       	cp	r7, r3
    34be:	10 f4       	brcc	.+4      	; 0x34c4 <vfprintf+0x336>
    34c0:	37 18       	sub	r3, r7
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <vfprintf+0x338>
    34c4:	31 2c       	mov	r3, r1
    34c6:	24 ff       	sbrs	r18, 4
    34c8:	12 c0       	rjmp	.+36     	; 0x34ee <vfprintf+0x360>
    34ca:	b7 01       	movw	r22, r14
    34cc:	80 e3       	ldi	r24, 0x30	; 48
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	2c 87       	std	Y+12, r18	; 0x0c
    34d2:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    34d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    34d8:	22 ff       	sbrs	r18, 2
    34da:	17 c0       	rjmp	.+46     	; 0x350a <vfprintf+0x37c>
    34dc:	21 ff       	sbrs	r18, 1
    34de:	03 c0       	rjmp	.+6      	; 0x34e6 <vfprintf+0x358>
    34e0:	88 e5       	ldi	r24, 0x58	; 88
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <vfprintf+0x35c>
    34e6:	88 e7       	ldi	r24, 0x78	; 120
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	b7 01       	movw	r22, r14
    34ec:	0c c0       	rjmp	.+24     	; 0x3506 <vfprintf+0x378>
    34ee:	82 2f       	mov	r24, r18
    34f0:	86 78       	andi	r24, 0x86	; 134
    34f2:	59 f0       	breq	.+22     	; 0x350a <vfprintf+0x37c>
    34f4:	21 fd       	sbrc	r18, 1
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <vfprintf+0x36e>
    34f8:	80 e2       	ldi	r24, 0x20	; 32
    34fa:	01 c0       	rjmp	.+2      	; 0x34fe <vfprintf+0x370>
    34fc:	8b e2       	ldi	r24, 0x2B	; 43
    34fe:	27 fd       	sbrc	r18, 7
    3500:	8d e2       	ldi	r24, 0x2D	; 45
    3502:	b7 01       	movw	r22, r14
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    350a:	a5 14       	cp	r10, r5
    350c:	38 f4       	brcc	.+14     	; 0x351c <vfprintf+0x38e>
    350e:	b7 01       	movw	r22, r14
    3510:	80 e3       	ldi	r24, 0x30	; 48
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    3518:	5a 94       	dec	r5
    351a:	f7 cf       	rjmp	.-18     	; 0x350a <vfprintf+0x37c>
    351c:	aa 94       	dec	r10
    351e:	f4 01       	movw	r30, r8
    3520:	ea 0d       	add	r30, r10
    3522:	f1 1d       	adc	r31, r1
    3524:	80 81       	ld	r24, Z
    3526:	b7 01       	movw	r22, r14
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    352e:	a1 10       	cpse	r10, r1
    3530:	f5 cf       	rjmp	.-22     	; 0x351c <vfprintf+0x38e>
    3532:	33 20       	and	r3, r3
    3534:	09 f4       	brne	.+2      	; 0x3538 <vfprintf+0x3aa>
    3536:	51 ce       	rjmp	.-862    	; 0x31da <vfprintf+0x4c>
    3538:	b7 01       	movw	r22, r14
    353a:	80 e2       	ldi	r24, 0x20	; 32
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 07 1b 	call	0x360e	; 0x360e <fputc>
    3542:	3a 94       	dec	r3
    3544:	f6 cf       	rjmp	.-20     	; 0x3532 <vfprintf+0x3a4>
    3546:	f7 01       	movw	r30, r14
    3548:	86 81       	ldd	r24, Z+6	; 0x06
    354a:	97 81       	ldd	r25, Z+7	; 0x07
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <vfprintf+0x3c4>
    354e:	8f ef       	ldi	r24, 0xFF	; 255
    3550:	9f ef       	ldi	r25, 0xFF	; 255
    3552:	2c 96       	adiw	r28, 0x0c	; 12
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	ff 90       	pop	r15
    3568:	ef 90       	pop	r14
    356a:	df 90       	pop	r13
    356c:	cf 90       	pop	r12
    356e:	bf 90       	pop	r11
    3570:	af 90       	pop	r10
    3572:	9f 90       	pop	r9
    3574:	8f 90       	pop	r8
    3576:	7f 90       	pop	r7
    3578:	6f 90       	pop	r6
    357a:	5f 90       	pop	r5
    357c:	4f 90       	pop	r4
    357e:	3f 90       	pop	r3
    3580:	2f 90       	pop	r2
    3582:	08 95       	ret

00003584 <__eerd_block_m1284p>:
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22

00003588 <__eerd_blraw_m1284p>:
    3588:	fc 01       	movw	r30, r24
    358a:	f9 99       	sbic	0x1f, 1	; 31
    358c:	fe cf       	rjmp	.-4      	; 0x358a <__eerd_blraw_m1284p+0x2>
    358e:	06 c0       	rjmp	.+12     	; 0x359c <__eerd_blraw_m1284p+0x14>
    3590:	f2 bd       	out	0x22, r31	; 34
    3592:	e1 bd       	out	0x21, r30	; 33
    3594:	f8 9a       	sbi	0x1f, 0	; 31
    3596:	31 96       	adiw	r30, 0x01	; 1
    3598:	00 b4       	in	r0, 0x20	; 32
    359a:	0d 92       	st	X+, r0
    359c:	41 50       	subi	r20, 0x01	; 1
    359e:	50 40       	sbci	r21, 0x00	; 0
    35a0:	b8 f7       	brcc	.-18     	; 0x3590 <__eerd_blraw_m1284p+0x8>
    35a2:	08 95       	ret

000035a4 <__eerd_byte_m1284p>:
    35a4:	f9 99       	sbic	0x1f, 1	; 31
    35a6:	fe cf       	rjmp	.-4      	; 0x35a4 <__eerd_byte_m1284p>
    35a8:	92 bd       	out	0x22, r25	; 34
    35aa:	81 bd       	out	0x21, r24	; 33
    35ac:	f8 9a       	sbi	0x1f, 0	; 31
    35ae:	99 27       	eor	r25, r25
    35b0:	80 b5       	in	r24, 0x20	; 32
    35b2:	08 95       	ret

000035b4 <__eerd_dword_m1284p>:
    35b4:	a6 e1       	ldi	r26, 0x16	; 22
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	44 e0       	ldi	r20, 0x04	; 4
    35ba:	50 e0       	ldi	r21, 0x00	; 0
    35bc:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__eerd_blraw_m1284p>

000035c0 <__eewr_byte_m1284p>:
    35c0:	26 2f       	mov	r18, r22

000035c2 <__eewr_r18_m1284p>:
    35c2:	f9 99       	sbic	0x1f, 1	; 31
    35c4:	fe cf       	rjmp	.-4      	; 0x35c2 <__eewr_r18_m1284p>
    35c6:	1f ba       	out	0x1f, r1	; 31
    35c8:	92 bd       	out	0x22, r25	; 34
    35ca:	81 bd       	out	0x21, r24	; 33
    35cc:	20 bd       	out	0x20, r18	; 32
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	fa 9a       	sbi	0x1f, 2	; 31
    35d4:	f9 9a       	sbi	0x1f, 1	; 31
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	08 95       	ret

000035dc <__ctype_isfalse>:
    35dc:	99 27       	eor	r25, r25
    35de:	88 27       	eor	r24, r24

000035e0 <__ctype_istrue>:
    35e0:	08 95       	ret

000035e2 <strnlen_P>:
    35e2:	fc 01       	movw	r30, r24
    35e4:	05 90       	lpm	r0, Z+
    35e6:	61 50       	subi	r22, 0x01	; 1
    35e8:	70 40       	sbci	r23, 0x00	; 0
    35ea:	01 10       	cpse	r0, r1
    35ec:	d8 f7       	brcc	.-10     	; 0x35e4 <strnlen_P+0x2>
    35ee:	80 95       	com	r24
    35f0:	90 95       	com	r25
    35f2:	8e 0f       	add	r24, r30
    35f4:	9f 1f       	adc	r25, r31
    35f6:	08 95       	ret

000035f8 <strnlen>:
    35f8:	fc 01       	movw	r30, r24
    35fa:	61 50       	subi	r22, 0x01	; 1
    35fc:	70 40       	sbci	r23, 0x00	; 0
    35fe:	01 90       	ld	r0, Z+
    3600:	01 10       	cpse	r0, r1
    3602:	d8 f7       	brcc	.-10     	; 0x35fa <strnlen+0x2>
    3604:	80 95       	com	r24
    3606:	90 95       	com	r25
    3608:	8e 0f       	add	r24, r30
    360a:	9f 1f       	adc	r25, r31
    360c:	08 95       	ret

0000360e <fputc>:
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	18 2f       	mov	r17, r24
    3618:	09 2f       	mov	r16, r25
    361a:	eb 01       	movw	r28, r22
    361c:	8b 81       	ldd	r24, Y+3	; 0x03
    361e:	81 fd       	sbrc	r24, 1
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <fputc+0x1a>
    3622:	8f ef       	ldi	r24, 0xFF	; 255
    3624:	9f ef       	ldi	r25, 0xFF	; 255
    3626:	20 c0       	rjmp	.+64     	; 0x3668 <fputc+0x5a>
    3628:	82 ff       	sbrs	r24, 2
    362a:	10 c0       	rjmp	.+32     	; 0x364c <fputc+0x3e>
    362c:	4e 81       	ldd	r20, Y+6	; 0x06
    362e:	5f 81       	ldd	r21, Y+7	; 0x07
    3630:	2c 81       	ldd	r18, Y+4	; 0x04
    3632:	3d 81       	ldd	r19, Y+5	; 0x05
    3634:	42 17       	cp	r20, r18
    3636:	53 07       	cpc	r21, r19
    3638:	7c f4       	brge	.+30     	; 0x3658 <fputc+0x4a>
    363a:	e8 81       	ld	r30, Y
    363c:	f9 81       	ldd	r31, Y+1	; 0x01
    363e:	9f 01       	movw	r18, r30
    3640:	2f 5f       	subi	r18, 0xFF	; 255
    3642:	3f 4f       	sbci	r19, 0xFF	; 255
    3644:	39 83       	std	Y+1, r19	; 0x01
    3646:	28 83       	st	Y, r18
    3648:	10 83       	st	Z, r17
    364a:	06 c0       	rjmp	.+12     	; 0x3658 <fputc+0x4a>
    364c:	e8 85       	ldd	r30, Y+8	; 0x08
    364e:	f9 85       	ldd	r31, Y+9	; 0x09
    3650:	81 2f       	mov	r24, r17
    3652:	09 95       	icall
    3654:	89 2b       	or	r24, r25
    3656:	29 f7       	brne	.-54     	; 0x3622 <fputc+0x14>
    3658:	2e 81       	ldd	r18, Y+6	; 0x06
    365a:	3f 81       	ldd	r19, Y+7	; 0x07
    365c:	2f 5f       	subi	r18, 0xFF	; 255
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	3f 83       	std	Y+7, r19	; 0x07
    3662:	2e 83       	std	Y+6, r18	; 0x06
    3664:	81 2f       	mov	r24, r17
    3666:	90 2f       	mov	r25, r16
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <__ultoa_invert>:
    3672:	fa 01       	movw	r30, r20
    3674:	aa 27       	eor	r26, r26
    3676:	28 30       	cpi	r18, 0x08	; 8
    3678:	51 f1       	breq	.+84     	; 0x36ce <__ultoa_invert+0x5c>
    367a:	20 31       	cpi	r18, 0x10	; 16
    367c:	81 f1       	breq	.+96     	; 0x36de <__ultoa_invert+0x6c>
    367e:	e8 94       	clt
    3680:	6f 93       	push	r22
    3682:	6e 7f       	andi	r22, 0xFE	; 254
    3684:	6e 5f       	subi	r22, 0xFE	; 254
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	8f 4f       	sbci	r24, 0xFF	; 255
    368a:	9f 4f       	sbci	r25, 0xFF	; 255
    368c:	af 4f       	sbci	r26, 0xFF	; 255
    368e:	b1 e0       	ldi	r27, 0x01	; 1
    3690:	3e d0       	rcall	.+124    	; 0x370e <__ultoa_invert+0x9c>
    3692:	b4 e0       	ldi	r27, 0x04	; 4
    3694:	3c d0       	rcall	.+120    	; 0x370e <__ultoa_invert+0x9c>
    3696:	67 0f       	add	r22, r23
    3698:	78 1f       	adc	r23, r24
    369a:	89 1f       	adc	r24, r25
    369c:	9a 1f       	adc	r25, r26
    369e:	a1 1d       	adc	r26, r1
    36a0:	68 0f       	add	r22, r24
    36a2:	79 1f       	adc	r23, r25
    36a4:	8a 1f       	adc	r24, r26
    36a6:	91 1d       	adc	r25, r1
    36a8:	a1 1d       	adc	r26, r1
    36aa:	6a 0f       	add	r22, r26
    36ac:	71 1d       	adc	r23, r1
    36ae:	81 1d       	adc	r24, r1
    36b0:	91 1d       	adc	r25, r1
    36b2:	a1 1d       	adc	r26, r1
    36b4:	20 d0       	rcall	.+64     	; 0x36f6 <__ultoa_invert+0x84>
    36b6:	09 f4       	brne	.+2      	; 0x36ba <__ultoa_invert+0x48>
    36b8:	68 94       	set
    36ba:	3f 91       	pop	r19
    36bc:	2a e0       	ldi	r18, 0x0A	; 10
    36be:	26 9f       	mul	r18, r22
    36c0:	11 24       	eor	r1, r1
    36c2:	30 19       	sub	r19, r0
    36c4:	30 5d       	subi	r19, 0xD0	; 208
    36c6:	31 93       	st	Z+, r19
    36c8:	de f6       	brtc	.-74     	; 0x3680 <__ultoa_invert+0xe>
    36ca:	cf 01       	movw	r24, r30
    36cc:	08 95       	ret
    36ce:	46 2f       	mov	r20, r22
    36d0:	47 70       	andi	r20, 0x07	; 7
    36d2:	40 5d       	subi	r20, 0xD0	; 208
    36d4:	41 93       	st	Z+, r20
    36d6:	b3 e0       	ldi	r27, 0x03	; 3
    36d8:	0f d0       	rcall	.+30     	; 0x36f8 <__ultoa_invert+0x86>
    36da:	c9 f7       	brne	.-14     	; 0x36ce <__ultoa_invert+0x5c>
    36dc:	f6 cf       	rjmp	.-20     	; 0x36ca <__ultoa_invert+0x58>
    36de:	46 2f       	mov	r20, r22
    36e0:	4f 70       	andi	r20, 0x0F	; 15
    36e2:	40 5d       	subi	r20, 0xD0	; 208
    36e4:	4a 33       	cpi	r20, 0x3A	; 58
    36e6:	18 f0       	brcs	.+6      	; 0x36ee <__ultoa_invert+0x7c>
    36e8:	49 5d       	subi	r20, 0xD9	; 217
    36ea:	31 fd       	sbrc	r19, 1
    36ec:	40 52       	subi	r20, 0x20	; 32
    36ee:	41 93       	st	Z+, r20
    36f0:	02 d0       	rcall	.+4      	; 0x36f6 <__ultoa_invert+0x84>
    36f2:	a9 f7       	brne	.-22     	; 0x36de <__ultoa_invert+0x6c>
    36f4:	ea cf       	rjmp	.-44     	; 0x36ca <__ultoa_invert+0x58>
    36f6:	b4 e0       	ldi	r27, 0x04	; 4
    36f8:	a6 95       	lsr	r26
    36fa:	97 95       	ror	r25
    36fc:	87 95       	ror	r24
    36fe:	77 95       	ror	r23
    3700:	67 95       	ror	r22
    3702:	ba 95       	dec	r27
    3704:	c9 f7       	brne	.-14     	; 0x36f8 <__ultoa_invert+0x86>
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	61 05       	cpc	r22, r1
    370a:	71 05       	cpc	r23, r1
    370c:	08 95       	ret
    370e:	9b 01       	movw	r18, r22
    3710:	ac 01       	movw	r20, r24
    3712:	0a 2e       	mov	r0, r26
    3714:	06 94       	lsr	r0
    3716:	57 95       	ror	r21
    3718:	47 95       	ror	r20
    371a:	37 95       	ror	r19
    371c:	27 95       	ror	r18
    371e:	ba 95       	dec	r27
    3720:	c9 f7       	brne	.-14     	; 0x3714 <__ultoa_invert+0xa2>
    3722:	62 0f       	add	r22, r18
    3724:	73 1f       	adc	r23, r19
    3726:	84 1f       	adc	r24, r20
    3728:	95 1f       	adc	r25, r21
    372a:	a0 1d       	adc	r26, r0
    372c:	08 95       	ret

0000372e <__muluhisi3>:
    372e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__umulhisi3>
    3732:	a5 9f       	mul	r26, r21
    3734:	90 0d       	add	r25, r0
    3736:	b4 9f       	mul	r27, r20
    3738:	90 0d       	add	r25, r0
    373a:	a4 9f       	mul	r26, r20
    373c:	80 0d       	add	r24, r0
    373e:	91 1d       	adc	r25, r1
    3740:	11 24       	eor	r1, r1
    3742:	08 95       	ret

00003744 <__umulhisi3>:
    3744:	a2 9f       	mul	r26, r18
    3746:	b0 01       	movw	r22, r0
    3748:	b3 9f       	mul	r27, r19
    374a:	c0 01       	movw	r24, r0
    374c:	a3 9f       	mul	r26, r19
    374e:	70 0d       	add	r23, r0
    3750:	81 1d       	adc	r24, r1
    3752:	11 24       	eor	r1, r1
    3754:	91 1d       	adc	r25, r1
    3756:	b2 9f       	mul	r27, r18
    3758:	70 0d       	add	r23, r0
    375a:	81 1d       	adc	r24, r1
    375c:	11 24       	eor	r1, r1
    375e:	91 1d       	adc	r25, r1
    3760:	08 95       	ret

00003762 <_exit>:
    3762:	f8 94       	cli

00003764 <__stop_program>:
    3764:	ff cf       	rjmp	.-2      	; 0x3764 <__stop_program>
