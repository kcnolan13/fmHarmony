
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000358  00800100  000043f6  0000448a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800458  00800458  000047e2  2**0
                  ALLOC
  3 .stab         0000d818  00000000  00000000  000047e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003034  00000000  00000000  00011ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00015030  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_3>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_16>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_20>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_28>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      84:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	fa 14       	cp	r15, r10
      8e:	4e 15       	cp	r20, r14
      90:	c6 15       	cp	r28, r6
      92:	db 15       	cp	r29, r11
      94:	f8 15       	cp	r31, r8
      96:	40 16       	cp	r4, r16
      98:	44 16       	cp	r4, r20
      9a:	17 0f       	add	r17, r23
      9c:	1d 0f       	add	r17, r29
      9e:	26 0f       	add	r18, r22
      a0:	31 0f       	add	r19, r17
      a2:	3a 0f       	add	r19, r26
      a4:	47 0f       	add	r20, r23
      a6:	4f 0f       	add	r20, r31
      a8:	57 0f       	add	r21, r23
      aa:	5f 0f       	add	r21, r31
      ac:	57 10       	cpse	r5, r7
      ae:	5a 10       	cpse	r5, r10
      b0:	5d 10       	cpse	r5, r13
      b2:	60 10       	cpse	r6, r0
      b4:	63 10       	cpse	r6, r3
      b6:	66 10       	cpse	r6, r6
      b8:	69 10       	cpse	r6, r9
      ba:	6c 10       	cpse	r6, r12
      bc:	6f 10       	cpse	r6, r15
      be:	72 10       	cpse	r7, r2
      c0:	75 10       	cpse	r7, r5
      c2:	08 4a       	sbci	r16, 0xA8	; 168
      c4:	d7 3b       	cpi	r29, 0xB7	; 183
      c6:	3b ce       	rjmp	.-906    	; 0xfffffd3e <__eeprom_end+0xff7efd3e>
      c8:	01 6e       	ori	r16, 0xE1	; 225
      ca:	84 bc       	out	0x24, r8	; 36
      cc:	bf fd       	.word	0xfdbf	; ????
      ce:	c1 2f       	mov	r28, r17
      d0:	3d 6c       	ori	r19, 0xCD	; 205
      d2:	74 31       	cpi	r23, 0x14	; 20
      d4:	9a bd       	out	0x2a, r25	; 42
      d6:	56 83       	std	Z+6, r21	; 0x06
      d8:	3d da       	rcall	.-2950   	; 0xfffff554 <__eeprom_end+0xff7ef554>
      da:	3d 00       	.word	0x003d	; ????
      dc:	c7 7f       	andi	r28, 0xF7	; 247
      de:	11 be       	out	0x31, r1	; 49
      e0:	d9 e4       	ldi	r29, 0x49	; 73
      e2:	bb 4c       	sbci	r27, 0xCB	; 203
      e4:	3e 91       	ld	r19, -X
      e6:	6b aa       	std	Y+51, r6	; 0x33
      e8:	aa be       	out	0x3a, r10	; 58
      ea:	00 00       	nop
      ec:	00 80       	ld	r0, Z
      ee:	3f 05       	cpc	r19, r15
      f0:	a8 4c       	sbci	r26, 0xC8	; 200
      f2:	cd b2       	in	r12, 0x1d	; 29
      f4:	d4 4e       	sbci	r29, 0xE4	; 228
      f6:	b9 38       	cpi	r27, 0x89	; 137
      f8:	36 a9       	ldd	r19, Z+54	; 0x36
      fa:	02 0c       	add	r0, r2
      fc:	50 b9       	out	0x00, r21	; 0
      fe:	91 86       	std	Z+9, r9	; 0x09
     100:	88 08       	sbc	r8, r8
     102:	3c a6       	std	Y+44, r3	; 0x2c
     104:	aa aa       	std	Y+50, r10	; 0x32
     106:	2a be       	out	0x3a, r2	; 58
     108:	00 00       	nop
     10a:	00 80       	ld	r0, Z
     10c:	3f 08       	sbc	r3, r15
     10e:	00 00       	nop
     110:	00 be       	out	0x30, r0	; 48
     112:	92 24       	eor	r9, r2
     114:	49 12       	cpse	r4, r25
     116:	3e ab       	std	Y+54, r19	; 0x36
     118:	aa aa       	std	Y+50, r10	; 0x32
     11a:	2a be       	out	0x3a, r2	; 58
     11c:	cd cc       	rjmp	.-1638   	; 0xfffffab8 <__eeprom_end+0xff7efab8>
     11e:	cc 4c       	sbci	r28, 0xCC	; 204
     120:	3e 00       	.word	0x003e	; ????
     122:	00 00       	nop
     124:	80 be       	out	0x30, r8	; 48
     126:	ab aa       	std	Y+51, r10	; 0x33
     128:	aa aa       	std	Y+50, r10	; 0x32
     12a:	3e 00       	.word	0x003e	; ????
     12c:	00 00       	nop
     12e:	00 bf       	out	0x30, r16	; 48
     130:	00 00       	nop
     132:	00 80       	ld	r0, Z
     134:	3f 00       	.word	0x003f	; ????
     136:	00 00       	nop
     138:	00 00       	nop
     13a:	08 41       	sbci	r16, 0x18	; 24
     13c:	78 d3       	rcall	.+1776   	; 0x82e <set_ddram_address+0x2a>
     13e:	bb 43       	sbci	r27, 0x3B	; 59
     140:	87 d1       	rcall	.+782    	; 0x450 <__vector_20+0x88>
     142:	13 3d       	cpi	r17, 0xD3	; 211
     144:	19 0e       	add	r1, r25
     146:	3c c3       	rjmp	.+1656   	; 0x7c0 <instruction_read+0xca>
     148:	bd 42       	sbci	r27, 0x2D	; 45
     14a:	82 ad       	ldd	r24, Z+58	; 0x3a
     14c:	2b 3e       	cpi	r18, 0xEB	; 235
     14e:	68 ec       	ldi	r22, 0xC8	; 200
     150:	82 76       	andi	r24, 0x62	; 98
     152:	be d9       	rcall	.-3204   	; 0xfffff4d0 <__eeprom_end+0xff7ef4d0>
     154:	8f e1       	ldi	r24, 0x1F	; 31
     156:	a9 3e       	cpi	r26, 0xE9	; 233
     158:	4c 80       	ldd	r4, Y+4	; 0x04
     15a:	ef ff       	.word	0xffef	; ????
     15c:	be 01       	movw	r22, r28
     15e:	c4 ff       	sbrs	r28, 4
     160:	7f 3f       	cpi	r23, 0xFF	; 255
     162:	00 00       	nop
     164:	00 00       	nop
     166:	00 07       	cpc	r16, r16
     168:	63 42       	sbci	r22, 0x23	; 35
     16a:	36 b7       	in	r19, 0x36	; 54
     16c:	9b d8       	rcall	.-3786   	; 0xfffff2a4 <__eeprom_end+0xff7ef2a4>
     16e:	a7 1a       	sub	r10, r23
     170:	39 68       	ori	r19, 0x89	; 137
     172:	56 18       	sub	r5, r6
     174:	ae ba       	out	0x1e, r10	; 30
     176:	ab 55       	subi	r26, 0x5B	; 91
     178:	8c 1d       	adc	r24, r12
     17a:	3c b7       	in	r19, 0x3c	; 60
     17c:	cc 57       	subi	r28, 0x7C	; 124
     17e:	63 bd       	out	0x23, r22	; 35
     180:	6d ed       	ldi	r22, 0xDD	; 221
     182:	fd 75       	andi	r31, 0x5D	; 93
     184:	3e f6       	brtc	.-114    	; 0x114 <__SREG__+0xd5>
     186:	17 72       	andi	r17, 0x27	; 39
     188:	31 bf       	out	0x31, r19	; 49
     18a:	00 00       	nop
     18c:	00 80       	ld	r0, Z
     18e:	3f 4e       	sbci	r19, 0xEF	; 239

0000018f <pstr_nan>:
     18f:	4e 41 4e                                            NAN

00000192 <pstr_inity>:
     192:	49 4e 49 54 59                                      INITY

00000197 <pstr_inf>:
     197:	49 4e 46                                            INF

0000019a <pwr_m10>:
     19a:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1aa:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001b2 <pwr_p10>:
     1b2:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1c2:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d0 e4       	ldi	r29, 0x40	; 64
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
     1d6:	14 e0       	ldi	r17, 0x04	; 4
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	e6 ef       	ldi	r30, 0xF6	; 246
     1de:	f3 e4       	ldi	r31, 0x43	; 67
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0b bf       	out	0x3b, r16	; 59
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x14>
     1e6:	07 90       	elpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a8 35       	cpi	r26, 0x58	; 88
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0x10>

000001f0 <__do_clear_bss>:
     1f0:	14 e0       	ldi	r17, 0x04	; 4
     1f2:	a8 e5       	ldi	r26, 0x58	; 88
     1f4:	b4 e0       	ldi	r27, 0x04	; 4
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a4 36       	cpi	r26, 0x64	; 100
     1fc:	b1 07       	cpc	r27, r17
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 8c 14 	call	0x2918	; 0x2918 <main>
     204:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <__vector_3>:
    return 0; //should never get here.
}


//---- PIN CHANGE INTERRUPT (PUSHBUTTON PRESSED) ----//
ISR(INT2_vect) {
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	0b b6       	in	r0, 0x3b	; 59
     218:	0f 92       	push	r0
     21a:	8f 93       	push	r24
     21c:	9f 93       	push	r25
     21e:	af 93       	push	r26
     220:	bf 93       	push	r27
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
    if (device->button_pressable)
     226:	e0 91 5c 04 	lds	r30, 0x045C
     22a:	f0 91 5d 04 	lds	r31, 0x045D
     22e:	df 01       	movw	r26, r30
     230:	af 5f       	subi	r26, 0xFF	; 255
     232:	be 4f       	sbci	r27, 0xFE	; 254
     234:	8d 91       	ld	r24, X+
     236:	9c 91       	ld	r25, X
     238:	89 2b       	or	r24, r25
     23a:	e1 f1       	breq	.+120    	; 0x2b4 <__vector_3+0xa8>
    {
        //increment the op_mode
        device->op_mode++;
     23c:	80 85       	ldd	r24, Z+8	; 0x08
     23e:	91 85       	ldd	r25, Z+9	; 0x09
     240:	01 96       	adiw	r24, 0x01	; 1
     242:	91 87       	std	Z+9, r25	; 0x09
     244:	80 87       	std	Z+8, r24	; 0x08
        //loop the op_mode
        if (device->op_mode >= NUM_MODES)
     246:	80 85       	ldd	r24, Z+8	; 0x08
     248:	91 85       	ldd	r25, Z+9	; 0x09
     24a:	05 97       	sbiw	r24, 0x05	; 5
     24c:	14 f0       	brlt	.+4      	; 0x252 <__vector_3+0x46>
            device->op_mode = 0;
     24e:	11 86       	std	Z+9, r1	; 0x09
     250:	10 86       	std	Z+8, r1	; 0x08
        //light up the mode LEDs
        switch (device->op_mode)
     252:	80 85       	ldd	r24, Z+8	; 0x08
     254:	91 85       	ldd	r25, Z+9	; 0x09
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	91 05       	cpc	r25, r1
     25a:	b9 f0       	breq	.+46     	; 0x28a <__vector_3+0x7e>
     25c:	44 f4       	brge	.+16     	; 0x26e <__vector_3+0x62>
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	81 f0       	breq	.+32     	; 0x282 <__vector_3+0x76>
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	d9 f4       	brne	.+54     	; 0x29c <__vector_3+0x90>
            case 0:
                PORTB |= 1<<PB0;
                PORTB &= ~((1<<PB3)|(1<<PB1));
            break;
            case 1:
                PORTB |= 1<<PB1;
     266:	29 9a       	sbi	0x05, 1	; 5
                PORTB &= ~((1<<PB3)|(1<<PB0));
     268:	85 b1       	in	r24, 0x05	; 5
     26a:	86 7f       	andi	r24, 0xF6	; 246
     26c:	19 c0       	rjmp	.+50     	; 0x2a0 <__vector_3+0x94>
        device->op_mode++;
        //loop the op_mode
        if (device->op_mode >= NUM_MODES)
            device->op_mode = 0;
        //light up the mode LEDs
        switch (device->op_mode)
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	91 05       	cpc	r25, r1
     272:	79 f0       	breq	.+30     	; 0x292 <__vector_3+0x86>
     274:	04 97       	sbiw	r24, 0x04	; 4
     276:	91 f4       	brne	.+36     	; 0x29c <__vector_3+0x90>
            case 3:
                PORTB |= ((1<<PB1)|(1<<PB0));
                PORTB &= ~(1<<PB3);
            break;
            case 4:
                PORTB |= ((1<<PB3)|(1<<PB1));
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	8a 60       	ori	r24, 0x0A	; 10
     27c:	85 b9       	out	0x05, r24	; 5
                PORTB &= ~(1<<PB0);
     27e:	28 98       	cbi	0x05, 0	; 5
            break;
     280:	10 c0       	rjmp	.+32     	; 0x2a2 <__vector_3+0x96>
            device->op_mode = 0;
        //light up the mode LEDs
        switch (device->op_mode)
        {
            case 0:
                PORTB |= 1<<PB0;
     282:	28 9a       	sbi	0x05, 0	; 5
                PORTB &= ~((1<<PB3)|(1<<PB1));
     284:	85 b1       	in	r24, 0x05	; 5
     286:	85 7f       	andi	r24, 0xF5	; 245
     288:	0b c0       	rjmp	.+22     	; 0x2a0 <__vector_3+0x94>
            case 1:
                PORTB |= 1<<PB1;
                PORTB &= ~((1<<PB3)|(1<<PB0));
            break;
            case 2:
                PORTB |= 1<<PB3;
     28a:	2b 9a       	sbi	0x05, 3	; 5
                PORTB &= ~((1<<PB1)|(1<<PB0));
     28c:	85 b1       	in	r24, 0x05	; 5
     28e:	8c 7f       	andi	r24, 0xFC	; 252
     290:	07 c0       	rjmp	.+14     	; 0x2a0 <__vector_3+0x94>
            break;
            case 3:
                PORTB |= ((1<<PB1)|(1<<PB0));
     292:	85 b1       	in	r24, 0x05	; 5
     294:	83 60       	ori	r24, 0x03	; 3
     296:	85 b9       	out	0x05, r24	; 5
                PORTB &= ~(1<<PB3);
     298:	2b 98       	cbi	0x05, 3	; 5
            break;
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <__vector_3+0x96>
            case 4:
                PORTB |= ((1<<PB3)|(1<<PB1));
                PORTB &= ~(1<<PB0);
            break;
            default:
                PORTB |= ((1<<PB3)|(1<<PB1)|(1<<PB0));
     29c:	85 b1       	in	r24, 0x05	; 5
     29e:	8b 60       	ori	r24, 0x0B	; 11
     2a0:	85 b9       	out	0x05, r24	; 5
            break;
        }
        //debounce the button
        device->button_pressable = 0;
     2a2:	e0 91 5c 04 	lds	r30, 0x045C
     2a6:	f0 91 5d 04 	lds	r31, 0x045D
     2aa:	ef 5f       	subi	r30, 0xFF	; 255
     2ac:	fe 4f       	sbci	r31, 0xFE	; 254
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	10 82       	st	Z, r1
        //reset the debounce timer
        TCNT0 = 0x00;
     2b2:	16 bc       	out	0x26, r1	; 38
    }
}
     2b4:	ff 91       	pop	r31
     2b6:	ef 91       	pop	r30
     2b8:	bf 91       	pop	r27
     2ba:	af 91       	pop	r26
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	0f 90       	pop	r0
     2c2:	0b be       	out	0x3b, r0	; 59
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <__vector_16>:

//---- TIMER INTERRUPT (PUSHBUTTON DEBOUNCE) ----//
ISR(TIMER0_COMPA_vect) {
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	0b b6       	in	r0, 0x3b	; 59
     2da:	0f 92       	push	r0
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	ef 93       	push	r30
     2e2:	ff 93       	push	r31
    //start accepting new button presses
    device->button_pressable = 1;
     2e4:	e0 91 5c 04 	lds	r30, 0x045C
     2e8:	f0 91 5d 04 	lds	r31, 0x045D
     2ec:	ef 5f       	subi	r30, 0xFF	; 255
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	91 83       	std	Z+1, r25	; 0x01
     2f6:	80 83       	st	Z, r24
}
     2f8:	ff 91       	pop	r31
     2fa:	ef 91       	pop	r30
     2fc:	9f 91       	pop	r25
     2fe:	8f 91       	pop	r24
     300:	0f 90       	pop	r0
     302:	0b be       	out	0x3b, r0	; 59
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	1f 90       	pop	r1
     30c:	18 95       	reti

0000030e <__vector_28>:

//---- SERIAL DATABASE UPDATE INTERRUPT ----//
ISR(USART1_RX_vect){
     30e:	1f 92       	push	r1
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	0f 92       	push	r0
     316:	11 24       	eor	r1, r1
     318:	0b b6       	in	r0, 0x3b	; 59
     31a:	0f 92       	push	r0
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	ef 93       	push	r30
     332:	ff 93       	push	r31
    //remember the last 3 bytes received (to handle start + end sequences)
    device->serial_history[2] = device->serial_history[1];
     334:	80 91 5c 04 	lds	r24, 0x045C
     338:	90 91 5d 04 	lds	r25, 0x045D
     33c:	fc 01       	movw	r30, r24
     33e:	ef 56       	subi	r30, 0x6F	; 111
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	20 81       	ld	r18, Z
     344:	dc 01       	movw	r26, r24
     346:	ae 56       	subi	r26, 0x6E	; 110
     348:	bf 4f       	sbci	r27, 0xFF	; 255
     34a:	2c 93       	st	X, r18
    device->serial_history[1] = device->serial_history[0];
     34c:	dc 01       	movw	r26, r24
     34e:	a0 57       	subi	r26, 0x70	; 112
     350:	bf 4f       	sbci	r27, 0xFF	; 255
     352:	2c 91       	ld	r18, X
     354:	20 83       	st	Z, r18
    //Read most recent value out of the UART buffer
    device->serial_history[0] = UDR1;
     356:	20 91 ce 00 	lds	r18, 0x00CE
     35a:	2c 93       	st	X, r18
    //if a serial update is in progress, write to the receive buffer
    if (device->op_mode==MD_UPDATE)
     35c:	fc 01       	movw	r30, r24
     35e:	20 85       	ldd	r18, Z+8	; 0x08
     360:	31 85       	ldd	r19, Z+9	; 0x09
     362:	26 30       	cpi	r18, 0x06	; 6
     364:	31 05       	cpc	r19, r1
     366:	61 f4       	brne	.+24     	; 0x380 <__vector_28+0x72>
    {
        device->rxBuffer[device->rxWritePos] = device->serial_history[0];
     368:	e1 57       	subi	r30, 0x71	; 113
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	30 81       	ld	r19, Z
     36e:	2c 91       	ld	r18, X
     370:	dc 01       	movw	r26, r24
     372:	a3 0f       	add	r26, r19
     374:	b1 1d       	adc	r27, r1
     376:	1e 96       	adiw	r26, 0x0e	; 14
     378:	2c 93       	st	X, r18
        device->rxWritePos++;
     37a:	20 81       	ld	r18, Z
     37c:	2f 5f       	subi	r18, 0xFF	; 255
     37e:	20 83       	st	Z, r18
    }   
    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart(device)){
     380:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <detectSerialStart>
     384:	e0 91 5c 04 	lds	r30, 0x045C
     388:	f0 91 5d 04 	lds	r31, 0x045D
     38c:	89 2b       	or	r24, r25
     38e:	21 f0       	breq	.+8      	; 0x398 <__vector_28+0x8a>
        device->op_mode = MD_UPDATE;
     390:	86 e0       	ldi	r24, 0x06	; 6
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	91 87       	std	Z+9, r25	; 0x09
     396:	80 87       	std	Z+8, r24	; 0x08
    }
    //make the receive buffer loop
    if(device->rxWritePos >= RX_BUFFER_SIZE)
     398:	e1 57       	subi	r30, 0x71	; 113
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	80 81       	ld	r24, Z
     39e:	87 fd       	sbrc	r24, 7
    {
        device->rxWritePos = 0;
     3a0:	10 82       	st	Z, r1
    }
}
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	0f 90       	pop	r0
     3bc:	0b be       	out	0x3b, r0	; 59
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <__vector_20>:

//---- SERIAL GPS INTERRUPT ----//
ISR(USART0_RX_vect) {
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	0b b6       	in	r0, 0x3b	; 59
     3d4:	0f 92       	push	r0
     3d6:	2f 93       	push	r18
     3d8:	3f 93       	push	r19
     3da:	4f 93       	push	r20
     3dc:	5f 93       	push	r21
     3de:	6f 93       	push	r22
     3e0:	7f 93       	push	r23
     3e2:	8f 93       	push	r24
     3e4:	9f 93       	push	r25
     3e6:	af 93       	push	r26
     3e8:	bf 93       	push	r27
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
    int k;
    //prevent buffer overflow
    if (device->gps_rxCount > GPS_RX_BUFFER_SIZE)
     3ee:	80 91 5c 04 	lds	r24, 0x045C
     3f2:	90 91 5d 04 	lds	r25, 0x045D
     3f6:	fc 01       	movw	r30, r24
     3f8:	ed 56       	subi	r30, 0x6D	; 109
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	20 81       	ld	r18, Z
     3fe:	31 81       	ldd	r19, Z+1	; 0x01
     400:	21 35       	cpi	r18, 0x51	; 81
     402:	31 05       	cpc	r19, r1
     404:	7c f0       	brlt	.+30     	; 0x424 <__vector_20+0x5c>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
    {
        for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
            device->gps_rxBuffer[k]='\0';
     40a:	dc 01       	movw	r26, r24
     40c:	a2 0f       	add	r26, r18
     40e:	b3 1f       	adc	r27, r19
     410:	ab 56       	subi	r26, 0x6B	; 107
     412:	bf 4f       	sbci	r27, 0xFF	; 255
     414:	1c 92       	st	X, r1
ISR(USART0_RX_vect) {
    int k;
    //prevent buffer overflow
    if (device->gps_rxCount > GPS_RX_BUFFER_SIZE)
    {
        for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	20 35       	cpi	r18, 0x50	; 80
     41c:	31 05       	cpc	r19, r1
     41e:	a9 f7       	brne	.-22     	; 0x40a <__vector_20+0x42>
            device->gps_rxBuffer[k]='\0';

        device->gps_rxCount = 0; 
     420:	11 82       	std	Z+1, r1	; 0x01
     422:	10 82       	st	Z, r1
    }
    //Read value out of the UART buffer
    device->gps_rxBuffer[device->gps_rxCount] = UDR0;
     424:	20 81       	ld	r18, Z
     426:	31 81       	ldd	r19, Z+1	; 0x01
     428:	40 91 c6 00 	lds	r20, 0x00C6
     42c:	28 0f       	add	r18, r24
     42e:	39 1f       	adc	r19, r25
     430:	d9 01       	movw	r26, r18
     432:	ab 56       	subi	r26, 0x6B	; 107
     434:	bf 4f       	sbci	r27, 0xFF	; 255
     436:	4c 93       	st	X, r20
    device->gps_rxCount ++;
     438:	20 81       	ld	r18, Z
     43a:	31 81       	ldd	r19, Z+1	; 0x01
     43c:	2f 5f       	subi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	31 83       	std	Z+1, r19	; 0x01
     442:	20 83       	st	Z, r18
    //start new buffer if receive $
    if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
     444:	a0 81       	ld	r26, Z
     446:	b1 81       	ldd	r27, Z+1	; 0x01
     448:	a8 0f       	add	r26, r24
     44a:	b9 1f       	adc	r27, r25
     44c:	ac 56       	subi	r26, 0x6C	; 108
     44e:	bf 4f       	sbci	r27, 0xFF	; 255
     450:	2c 91       	ld	r18, X
     452:	24 32       	cpi	r18, 0x24	; 36
     454:	b1 f4       	brne	.+44     	; 0x482 <__vector_20+0xba>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	30 e0       	ldi	r19, 0x00	; 0
    {
        for (k=1; k<GPS_RX_BUFFER_SIZE; k++)
            device->gps_rxBuffer[k]='\0'; 
     45a:	dc 01       	movw	r26, r24
     45c:	a2 0f       	add	r26, r18
     45e:	b3 1f       	adc	r27, r19
     460:	ab 56       	subi	r26, 0x6B	; 107
     462:	bf 4f       	sbci	r27, 0xFF	; 255
     464:	1c 92       	st	X, r1
    device->gps_rxBuffer[device->gps_rxCount] = UDR0;
    device->gps_rxCount ++;
    //start new buffer if receive $
    if (device->gps_rxBuffer[device->gps_rxCount-1]=='$')
    {
        for (k=1; k<GPS_RX_BUFFER_SIZE; k++)
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	20 35       	cpi	r18, 0x50	; 80
     46c:	31 05       	cpc	r19, r1
     46e:	a9 f7       	brne	.-22     	; 0x45a <__vector_20+0x92>
            device->gps_rxBuffer[k]='\0'; 

        device->gps_rxBuffer[0] = '$';
     470:	24 e2       	ldi	r18, 0x24	; 36
     472:	dc 01       	movw	r26, r24
     474:	ab 56       	subi	r26, 0x6B	; 107
     476:	bf 4f       	sbci	r27, 0xFF	; 255
     478:	2c 93       	st	X, r18
        device->gps_rxCount = 1; 
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	31 83       	std	Z+1, r19	; 0x01
     480:	20 83       	st	Z, r18
    }
    //carriage return ----> parse the raw sentence data and set the gps struct update trigger
    if ((device->gps_rxBuffer[device->gps_rxCount-1]=='\r')) {
     482:	01 90       	ld	r0, Z+
     484:	f0 81       	ld	r31, Z
     486:	e0 2d       	mov	r30, r0
     488:	e8 0f       	add	r30, r24
     48a:	f9 1f       	adc	r31, r25
     48c:	ec 56       	subi	r30, 0x6C	; 108
     48e:	ff 4f       	sbci	r31, 0xFF	; 255
     490:	20 81       	ld	r18, Z
     492:	2d 30       	cpi	r18, 0x0D	; 13
     494:	d9 f5       	brne	.+118    	; 0x50c <__vector_20+0x144>
        if (tag_check(device->gps_rxBuffer))
     496:	8b 56       	subi	r24, 0x6B	; 107
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	0e 94 8b 05 	call	0xb16	; 0xb16 <tag_check>
     49e:	89 2b       	or	r24, r25
     4a0:	a9 f1       	breq	.+106    	; 0x50c <__vector_20+0x144>
        {
            //no more gps interrupts are needed (or desired) for now
            disable_gps();
     4a2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <disable_gps>
            //strip off the rxBuffer carriage return and replace with ,
            device->gps_rxBuffer[device->gps_rxCount-1] = ',';
     4a6:	80 91 5c 04 	lds	r24, 0x045C
     4aa:	90 91 5d 04 	lds	r25, 0x045D
     4ae:	fc 01       	movw	r30, r24
     4b0:	ed 56       	subi	r30, 0x6D	; 109
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	01 90       	ld	r0, Z+
     4b6:	f0 81       	ld	r31, Z
     4b8:	e0 2d       	mov	r30, r0
     4ba:	e8 0f       	add	r30, r24
     4bc:	f9 1f       	adc	r31, r25
     4be:	ec 56       	subi	r30, 0x6C	; 108
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	2c e2       	ldi	r18, 0x2C	; 44
     4c4:	20 83       	st	Z, r18
            //parse the sentence and populate the raw_gps_data fields
            parse_nmea(device->gps_rxBuffer, device->raw_gps_data);
     4c6:	bc 01       	movw	r22, r24
     4c8:	6b 51       	subi	r22, 0x1B	; 27
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
     4cc:	8b 56       	subi	r24, 0x6B	; 107
     4ce:	9f 4f       	sbci	r25, 0xFF	; 255
     4d0:	0e 94 df 05 	call	0xbbe	; 0xbbe <parse_nmea>
            //trigger a gps_data struct update
            device->gps_update_trigger = 1;
     4d4:	20 91 5c 04 	lds	r18, 0x045C
     4d8:	30 91 5d 04 	lds	r19, 0x045D
     4dc:	f9 01       	movw	r30, r18
     4de:	e1 50       	subi	r30, 0x01	; 1
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
            //clear the rxBuffer
            for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
                device->gps_rxBuffer[k]='\0';
     4ee:	f9 01       	movw	r30, r18
     4f0:	e8 0f       	add	r30, r24
     4f2:	f9 1f       	adc	r31, r25
     4f4:	eb 56       	subi	r30, 0x6B	; 107
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	10 82       	st	Z, r1
            //parse the sentence and populate the raw_gps_data fields
            parse_nmea(device->gps_rxBuffer, device->raw_gps_data);
            //trigger a gps_data struct update
            device->gps_update_trigger = 1;
            //clear the rxBuffer
            for (k=0; k<GPS_RX_BUFFER_SIZE; k++)
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	80 35       	cpi	r24, 0x50	; 80
     4fe:	91 05       	cpc	r25, r1
     500:	b1 f7       	brne	.-20     	; 0x4ee <__vector_20+0x126>
                device->gps_rxBuffer[k]='\0';
            device->gps_rxCount = 0;
     502:	f9 01       	movw	r30, r18
     504:	ed 56       	subi	r30, 0x6D	; 109
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	11 82       	std	Z+1, r1	; 0x01
     50a:	10 82       	st	Z, r1
        }
    }
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0b be       	out	0x3b, r0	; 59
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     532:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     534:	81 ee       	ldi	r24, 0xE1	; 225
     536:	94 e0       	ldi	r25, 0x04	; 4
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <datarw+0x6>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <datarw+0xc>
     53e:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     540:	12 98       	cbi	0x02, 2	; 2
     542:	08 95       	ret

00000544 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     544:	10 92 59 04 	sts	0x0459, r1
     548:	10 92 58 04 	sts	0x0458, r1
    line_num = 1;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	90 93 01 01 	sts	0x0101, r25
     554:	80 93 00 01 	sts	0x0100, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     558:	81 b1       	in	r24, 0x01	; 1
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	81 b9       	out	0x01, r24	; 1
     55e:	87 e8       	ldi	r24, 0x87	; 135
     560:	93 e1       	ldi	r25, 0x13	; 19
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <lcd_init+0x1e>
     566:	00 c0       	rjmp	.+0      	; 0x568 <lcd_init+0x24>
     568:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     56a:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     56c:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     56e:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     570:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     572:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     574:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     576:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     578:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     57c:	81 ee       	ldi	r24, 0xE1	; 225
     57e:	94 e0       	ldi	r25, 0x04	; 4
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x3c>
     584:	00 c0       	rjmp	.+0      	; 0x586 <lcd_init+0x42>
     586:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     588:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     58c:	89 ef       	ldi	r24, 0xF9	; 249
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <lcd_init+0x4c>
     594:	00 c0       	rjmp	.+0      	; 0x596 <lcd_init+0x52>
     596:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     598:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     59c:	89 ef       	ldi	r24, 0xF9	; 249
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <lcd_init+0x5c>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <lcd_init+0x62>
     5a6:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     5a8:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     5aa:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     5ac:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     5ae:	13 98       	cbi	0x02, 3	; 2
    datarw();
     5b0:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     5b4:	89 ef       	ldi	r24, 0xF9	; 249
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <lcd_init+0x74>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <lcd_init+0x7a>
     5be:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     5c0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     5c2:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     5c4:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     5c6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     5c8:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     5cc:	89 ef       	ldi	r24, 0xF9	; 249
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <lcd_init+0x8c>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <lcd_init+0x92>
     5d6:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     5d8:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     5da:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     5dc:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     5de:	13 98       	cbi	0x02, 3	; 2
    datarw();
     5e0:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     5e4:	89 ef       	ldi	r24, 0xF9	; 249
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <lcd_init+0xa4>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <lcd_init+0xaa>
     5ee:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     5f0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     5f2:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     5f4:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     5f6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     5f8:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     5fc:	89 ef       	ldi	r24, 0xF9	; 249
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <lcd_init+0xbc>
     604:	00 c0       	rjmp	.+0      	; 0x606 <lcd_init+0xc2>
     606:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     608:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     60a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     60c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     60e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     610:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     614:	89 ef       	ldi	r24, 0xF9	; 249
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <lcd_init+0xd4>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <lcd_init+0xda>
     61e:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     620:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     622:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     624:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     626:	13 98       	cbi	0x02, 3	; 2
    datarw();
     628:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     62c:	89 ef       	ldi	r24, 0xF9	; 249
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <lcd_init+0xec>
     634:	00 c0       	rjmp	.+0      	; 0x636 <lcd_init+0xf2>
     636:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     638:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     63a:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     63c:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     63e:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     640:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     644:	89 ef       	ldi	r24, 0xF9	; 249
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <lcd_init+0x104>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <lcd_init+0x10a>
     64e:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     650:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     652:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     654:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     656:	13 98       	cbi	0x02, 3	; 2
    datarw();
     658:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     65c:	89 ef       	ldi	r24, 0xF9	; 249
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <lcd_init+0x11c>
     664:	00 c0       	rjmp	.+0      	; 0x666 <lcd_init+0x122>
     666:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     668:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     66a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     66c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     66e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     670:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     674:	89 ef       	ldi	r24, 0xF9	; 249
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <lcd_init+0x134>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <lcd_init+0x13a>
     67e:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     680:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     682:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     684:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     686:	13 98       	cbi	0x02, 3	; 2
    datarw();
     688:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     68c:	89 ef       	ldi	r24, 0xF9	; 249
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <lcd_init+0x14c>
     694:	00 c0       	rjmp	.+0      	; 0x696 <lcd_init+0x152>
     696:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     698:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     69a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     69c:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     69e:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     6a0:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     6a4:	89 ef       	ldi	r24, 0xF9	; 249
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <lcd_init+0x164>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <lcd_init+0x16a>
     6ae:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	08 95       	ret

000006b6 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	11 f4       	brne	.+4      	; 0x6be <letterwrite+0x8>
     6ba:	16 9a       	sbi	0x02, 6	; 2
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     6be:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     6c0:	61 30       	cpi	r22, 0x01	; 1
     6c2:	71 05       	cpc	r23, r1
     6c4:	11 f4       	brne	.+4      	; 0x6ca <letterwrite+0x14>
     6c6:	15 9a       	sbi	0x02, 5	; 2
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     6ca:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     6cc:	41 30       	cpi	r20, 0x01	; 1
     6ce:	51 05       	cpc	r21, r1
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <letterwrite+0x20>
     6d2:	14 9a       	sbi	0x02, 4	; 2
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     6d6:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     6d8:	21 30       	cpi	r18, 0x01	; 1
     6da:	31 05       	cpc	r19, r1
     6dc:	11 f4       	brne	.+4      	; 0x6e2 <letterwrite+0x2c>
     6de:	13 9a       	sbi	0x02, 3	; 2
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     6e2:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     6e4:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
     6e8:	89 ef       	ldi	r24, 0xF9	; 249
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <letterwrite+0x36>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <letterwrite+0x3c>
     6f2:	00 00       	nop
     6f4:	08 95       	ret

000006f6 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     6fc:	81 b1       	in	r24, 0x01	; 1
     6fe:	87 78       	andi	r24, 0x87	; 135
     700:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     702:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     704:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     706:	12 9a       	sbi	0x02, 2	; 2
     708:	81 ee       	ldi	r24, 0xE1	; 225
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <instruction_read+0x16>
     710:	00 c0       	rjmp	.+0      	; 0x712 <instruction_read+0x1c>
     712:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     714:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     716:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     718:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     71a:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     71c:	12 98       	cbi	0x02, 2	; 2
     71e:	e9 ef       	ldi	r30, 0xF9	; 249
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <instruction_read+0x2c>
     726:	00 c0       	rjmp	.+0      	; 0x728 <instruction_read+0x32>
     728:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     72a:	12 9a       	sbi	0x02, 2	; 2
     72c:	e1 ee       	ldi	r30, 0xE1	; 225
     72e:	f4 e0       	ldi	r31, 0x04	; 4
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <instruction_read+0x3a>
     734:	00 c0       	rjmp	.+0      	; 0x736 <instruction_read+0x40>
     736:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     738:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     73a:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     73c:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     73e:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     740:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	26 e0       	ldi	r18, 0x06	; 6
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	2a 95       	dec	r18
     74c:	e1 f7       	brne	.-8      	; 0x746 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     74e:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     750:	d0 e0       	ldi	r29, 0x00	; 0
     752:	35 e0       	ldi	r19, 0x05	; 5
     754:	cc 0f       	add	r28, r28
     756:	dd 1f       	adc	r29, r29
     758:	3a 95       	dec	r19
     75a:	e1 f7       	brne	.-8      	; 0x754 <instruction_read+0x5e>
     75c:	8c 2b       	or	r24, r28
     75e:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     760:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     762:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     764:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	54 e0       	ldi	r21, 0x04	; 4
     76a:	aa 0f       	add	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	5a 95       	dec	r21
     770:	e1 f7       	brne	.-8      	; 0x76a <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     772:	8a 2b       	or	r24, r26
     774:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     776:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	73 e0       	ldi	r23, 0x03	; 3
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	7a 95       	dec	r23
     782:	e1 f7       	brne	.-8      	; 0x77c <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     784:	8e 2b       	or	r24, r30
     786:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     788:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	66 0f       	add	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     794:	86 2b       	or	r24, r22
     796:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     798:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     79a:	51 b1       	in	r21, 0x01	; 1
     79c:	58 67       	ori	r21, 0x78	; 120
     79e:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     7a0:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     7a2:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     7a4:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	44 0f       	add	r20, r20
     7aa:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     7ac:	84 2b       	or	r24, r20
     7ae:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     7b0:	16 fb       	bst	r17, 6
     7b2:	22 27       	eor	r18, r18
     7b4:	20 f9       	bld	r18, 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     7b8:	36 95       	lsr	r19
     7ba:	32 2f       	mov	r19, r18
     7bc:	22 27       	eor	r18, r18
     7be:	37 95       	ror	r19
     7c0:	27 95       	ror	r18
}
     7c2:	82 2b       	or	r24, r18
     7c4:	93 2b       	or	r25, r19
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     7ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <instruction_read>
     7d2:	8f 77       	andi	r24, 0x7F	; 127
     7d4:	99 27       	eor	r25, r25
    return address+1;
}
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	08 95       	ret

000007da <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     7da:	89 2b       	or	r24, r25
     7dc:	11 f4       	brne	.+4      	; 0x7e2 <write_db74+0x8>
     7de:	16 98       	cbi	0x02, 6	; 2
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <write_db74+0xa>
    else PORTA |= _BV(DB7);
     7e2:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     7e4:	67 2b       	or	r22, r23
     7e6:	11 f4       	brne	.+4      	; 0x7ec <write_db74+0x12>
     7e8:	15 98       	cbi	0x02, 5	; 2
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <write_db74+0x14>
    else PORTA |= _BV(DB6);
     7ec:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     7ee:	45 2b       	or	r20, r21
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <write_db74+0x1c>
     7f2:	14 98       	cbi	0x02, 4	; 2
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     7f6:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     7f8:	23 2b       	or	r18, r19
     7fa:	11 f4       	brne	.+4      	; 0x800 <write_db74+0x26>
     7fc:	13 98       	cbi	0x02, 3	; 2
     7fe:	08 95       	ret
    else PORTA |= _BV(DB4);
     800:	13 9a       	sbi	0x02, 3	; 2
     802:	08 95       	ret

00000804 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     80a:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     80c:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     80e:	28 2f       	mov	r18, r24
     810:	22 95       	swap	r18
     812:	21 70       	andi	r18, 0x01	; 1
     814:	85 fb       	bst	r24, 5
     816:	44 27       	eor	r20, r20
     818:	40 f9       	bld	r20, 0
     81a:	86 fb       	bst	r24, 6
     81c:	66 27       	eor	r22, r22
     81e:	60 f9       	bld	r22, 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 ed 03 	call	0x7da	; 0x7da <write_db74>
    datarw();
     82e:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     832:	9e 01       	movw	r18, r28
     834:	21 70       	andi	r18, 0x01	; 1
     836:	33 27       	eor	r19, r19
     838:	4c 2f       	mov	r20, r28
     83a:	46 95       	lsr	r20
     83c:	41 70       	andi	r20, 0x01	; 1
     83e:	c2 fb       	bst	r28, 2
     840:	66 27       	eor	r22, r22
     842:	60 f9       	bld	r22, 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	c3 fb       	bst	r28, 3
     84a:	88 27       	eor	r24, r24
     84c:	80 f9       	bld	r24, 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 ed 03 	call	0x7da	; 0x7da <write_db74>
    datarw();
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     858:	0c 94 99 02 	jmp	0x532	; 0x532 <datarw>

0000085c <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     85c:	cf 93       	push	r28
     85e:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     860:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     862:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     864:	84 fb       	bst	r24, 4
     866:	22 27       	eor	r18, r18
     868:	20 f9       	bld	r18, 0
     86a:	85 fb       	bst	r24, 5
     86c:	44 27       	eor	r20, r20
     86e:	40 f9       	bld	r20, 0
     870:	86 fb       	bst	r24, 6
     872:	66 27       	eor	r22, r22
     874:	60 f9       	bld	r22, 0
     876:	88 1f       	adc	r24, r24
     878:	88 27       	eor	r24, r24
     87a:	88 1f       	adc	r24, r24
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 ed 03 	call	0x7da	; 0x7da <write_db74>
    datarw();
     888:	0e 94 99 02 	call	0x532	; 0x532 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     88c:	2c 2f       	mov	r18, r28
     88e:	21 70       	andi	r18, 0x01	; 1
     890:	c1 fb       	bst	r28, 1
     892:	44 27       	eor	r20, r20
     894:	40 f9       	bld	r20, 0
     896:	c2 fb       	bst	r28, 2
     898:	66 27       	eor	r22, r22
     89a:	60 f9       	bld	r22, 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	c3 fb       	bst	r28, 3
     8a4:	88 27       	eor	r24, r24
     8a6:	80 f9       	bld	r24, 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 ed 03 	call	0x7da	; 0x7da <write_db74>
    datarw();
}
     8ae:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     8b0:	0c 94 99 02 	jmp	0x532	; 0x532 <datarw>

000008b4 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     8b4:	cf 93       	push	r28
     8b6:	c8 2f       	mov	r28, r24
    chars_written++;
     8b8:	20 91 58 04 	lds	r18, 0x0458
     8bc:	30 91 59 04 	lds	r19, 0x0459
     8c0:	2f 5f       	subi	r18, 0xFF	; 255
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	30 93 59 04 	sts	0x0459, r19
     8c8:	20 93 58 04 	sts	0x0458, r18

    if ((chars_written==17)||(mychar=='\n'))
     8cc:	21 31       	cpi	r18, 0x11	; 17
     8ce:	31 05       	cpc	r19, r1
     8d0:	31 f0       	breq	.+12     	; 0x8de <char_write+0x2a>
     8d2:	8a 30       	cpi	r24, 0x0A	; 10
     8d4:	21 f0       	breq	.+8      	; 0x8de <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     8d6:	8c 2f       	mov	r24, r28
    
}
     8d8:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     8da:	0c 94 2e 04 	jmp	0x85c	; 0x85c <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     8de:	20 91 00 01 	lds	r18, 0x0100
     8e2:	30 91 01 01 	lds	r19, 0x0101
     8e6:	21 30       	cpi	r18, 0x01	; 1
     8e8:	31 05       	cpc	r19, r1
     8ea:	79 f4       	brne	.+30     	; 0x90a <char_write+0x56>
        {
            set_ddram_address(0x40);
     8ec:	80 e4       	ldi	r24, 0x40	; 64
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 02 04 	call	0x804	; 0x804 <set_ddram_address>
            line_num = 2;
     8f4:	22 e0       	ldi	r18, 0x02	; 2
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	30 93 01 01 	sts	0x0101, r19
     8fc:	20 93 00 01 	sts	0x0100, r18
            chars_written = 0;
     900:	10 92 59 04 	sts	0x0459, r1
     904:	10 92 58 04 	sts	0x0458, r1
     908:	05 c0       	rjmp	.+10     	; 0x914 <char_write+0x60>
        }
        else if (line_num==2)
     90a:	22 30       	cpi	r18, 0x02	; 2
     90c:	31 05       	cpc	r19, r1
     90e:	11 f4       	brne	.+4      	; 0x914 <char_write+0x60>
        {
            lcd_init();
     910:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
        }
    }

    if (mychar!='\n')
     914:	ca 30       	cpi	r28, 0x0A	; 10
     916:	f9 f6       	brne	.-66     	; 0x8d6 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <string_write>:
	_delay_ms(5);
	PORTA &= ~_BV(E);
}

void string_write(char *mystring)
{
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
    int i;
    get_current_address();
     926:	0e 94 e7 03 	call	0x7ce	; 0x7ce <get_current_address>
    //printf("writing string\n");
    for (i=0; i<strlen(mystring); i++) {
     92a:	8e 01       	movw	r16, r28
     92c:	fe 01       	movw	r30, r28
     92e:	01 90       	ld	r0, Z+
     930:	00 20       	and	r0, r0
     932:	e9 f7       	brne	.-6      	; 0x92e <string_write+0x12>
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	ec 1b       	sub	r30, r28
     938:	fd 0b       	sbc	r31, r29
     93a:	c8 01       	movw	r24, r16
     93c:	8c 1b       	sub	r24, r28
     93e:	9d 0b       	sbc	r25, r29
     940:	8e 17       	cp	r24, r30
     942:	9f 07       	cpc	r25, r31
     944:	40 f4       	brcc	.+16     	; 0x956 <string_write+0x3a>
        char_write(mystring[i]);
     946:	f8 01       	movw	r30, r16
     948:	81 91       	ld	r24, Z+
     94a:	8f 01       	movw	r16, r30
     94c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
        get_current_address();
     950:	0e 94 e7 03 	call	0x7ce	; 0x7ce <get_current_address>
     954:	eb cf       	rjmp	.-42     	; 0x92c <string_write+0x10>
    }
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <string_write_int>:
    else PORTA |= _BV(DB4);
}

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	18 2f       	mov	r17, r24
     96a:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     96c:	cb 01       	movw	r24, r22
     96e:	0e 94 ef 1b 	call	0x37de	; 0x37de <malloc>
     972:	ec 01       	movw	r28, r24
    if (temp==NULL)
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	51 f4       	brne	.+20     	; 0x98c <string_write_int+0x2c>
    {
            lcd_init();
     978:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
            string_write("bad malloc");
     97c:	8f e2       	ldi	r24, 0x2F	; 47
     97e:	91 e0       	ldi	r25, 0x01	; 1
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    if (temp==NULL)
    {
            lcd_init();
            string_write("bad malloc");
     988:	0c 94 8e 04 	jmp	0x91c	; 0x91c <string_write>
            return;
    }
    sprintf(temp,"%d",num);
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	83 ee       	ldi	r24, 0xE3	; 227
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <sprintf>
    string_write(temp);
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    free(temp);
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	ce 01       	movw	r24, r28
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
            string_write("bad malloc");
            return;
    }
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     9bc:	0c 94 87 1c 	jmp	0x390e	; 0x390e <free>

000009c0 <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <string_write_float+0x12>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <string_write_float+0x14>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     9da:	ae 01       	movw	r20, r28
     9dc:	4f 5f       	subi	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	0e 94 1d 1a 	call	0x343a	; 0x343a <modf>
     9e4:	6b 01       	movw	r12, r22
     9e6:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     9e8:	69 81       	ldd	r22, Y+1	; 0x01
     9ea:	7a 81       	ldd	r23, Y+2	; 0x02
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	0e 94 33 18 	call	0x3066	; 0x3066 <__fixsfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
     a00:	8c e5       	ldi	r24, 0x5C	; 92
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     a08:	b8 01       	movw	r22, r16
     a0a:	88 27       	eor	r24, r24
     a0c:	77 fd       	sbrc	r23, 7
     a0e:	80 95       	com	r24
     a10:	98 2f       	mov	r25, r24
     a12:	0e 94 66 18 	call	0x30cc	; 0x30cc <__floatsisf>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	80 e2       	ldi	r24, 0x20	; 32
     a20:	91 e4       	ldi	r25, 0x41	; 65
     a22:	0e 94 b3 1a 	call	0x3566	; 0x3566 <pow>
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	c7 01       	movw	r24, r14
     a2c:	b6 01       	movw	r22, r12
     a2e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     a32:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <round>
     a36:	0e 94 33 18 	call	0x3066	; 0x3066 <__fixsfsi>
     a3a:	7b 01       	movw	r14, r22
     a3c:	77 ff       	sbrs	r23, 7
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <string_write_float+0x88>
     a40:	ee 24       	eor	r14, r14
     a42:	ff 24       	eor	r15, r15
     a44:	e6 1a       	sub	r14, r22
     a46:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     a48:	e1 14       	cp	r14, r1
     a4a:	f1 04       	cpc	r15, r1
     a4c:	a1 f0       	breq	.+40     	; 0xa76 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     a4e:	b7 01       	movw	r22, r14
     a50:	88 27       	eor	r24, r24
     a52:	77 fd       	sbrc	r23, 7
     a54:	80 95       	com	r24
     a56:	98 2f       	mov	r25, r24
     a58:	0e 94 66 18 	call	0x30cc	; 0x30cc <__floatsisf>
     a5c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <log10>
     a60:	0e 94 a1 18 	call	0x3142	; 0x3142 <floor>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e8       	ldi	r20, 0x80	; 128
     a6a:	5f e3       	ldi	r21, 0x3F	; 63
     a6c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
     a70:	0e 94 33 18 	call	0x3066	; 0x3066 <__fixsfsi>
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <string_write_float+0xba>
    } else {
        digits = 0;
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     a7a:	c1 2c       	mov	r12, r1
     a7c:	d1 2c       	mov	r13, r1
     a7e:	06 1b       	sub	r16, r22
     a80:	17 0b       	sbc	r17, r23
     a82:	c0 16       	cp	r12, r16
     a84:	d1 06       	cpc	r13, r17
     a86:	44 f4       	brge	.+16     	; 0xa98 <string_write_float+0xd8>
    {
        string_write("0");
     a88:	86 ee       	ldi	r24, 0xE6	; 230
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	c8 1a       	sub	r12, r24
     a94:	d8 0a       	sbc	r13, r24
     a96:	f5 cf       	rjmp	.-22     	; 0xa82 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	c7 01       	movw	r24, r14
}
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     ab6:	0c 94 b0 04 	jmp	0x960	; 0x960 <string_write_int>

00000aba <string_write_numchars>:
}

void string_write_numchars(char *mystring, int num_chars)
{
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	8c 01       	movw	r16, r24
     acc:	6b 01       	movw	r12, r22
    int i;
    get_current_address();
     ace:	0e 94 e7 03 	call	0x7ce	; 0x7ce <get_current_address>
     ad2:	78 01       	movw	r14, r16
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     ad4:	c0 e0       	ldi	r28, 0x00	; 0
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
     ad8:	cc 15       	cp	r28, r12
     ada:	dd 05       	cpc	r29, r13
     adc:	9c f4       	brge	.+38     	; 0xb04 <string_write_numchars+0x4a>
        
        if (i >= strlen(mystring)) 
     ade:	f8 01       	movw	r30, r16
     ae0:	01 90       	ld	r0, Z+
     ae2:	00 20       	and	r0, r0
     ae4:	e9 f7       	brne	.-6      	; 0xae0 <string_write_numchars+0x26>
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	e0 1b       	sub	r30, r16
     aea:	f1 0b       	sbc	r31, r17
     aec:	ce 17       	cp	r28, r30
     aee:	df 07       	cpc	r29, r31
     af0:	48 f4       	brcc	.+18     	; 0xb04 <string_write_numchars+0x4a>
            break;
        char_write(mystring[i]);
     af2:	f7 01       	movw	r30, r14
     af4:	81 91       	ld	r24, Z+
     af6:	7f 01       	movw	r14, r30
     af8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
        get_current_address();
     afc:	0e 94 e7 03 	call	0x7ce	; 0x7ce <get_current_address>
void string_write_numchars(char *mystring, int num_chars)
{
    int i;
    get_current_address();
    //printf("writing string\n");
    for (i=0; i<num_chars; i++) {
     b00:	21 96       	adiw	r28, 0x01	; 1
     b02:	ea cf       	rjmp	.-44     	; 0xad8 <string_write_numchars+0x1e>
        if (i >= strlen(mystring)) 
            break;
        char_write(mystring[i]);
        get_current_address();
    }
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <tag_check>:

	return 0;
}

//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <tag_check+0x6>
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <tag_check+0x8>
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <tag_check+0xa>
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
	char token[6] = "$12345";
     b24:	26 e0       	ldi	r18, 0x06	; 6
     b26:	e8 e0       	ldi	r30, 0x08	; 8
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	de 01       	movw	r26, r28
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	01 90       	ld	r0, Z+
     b30:	0d 92       	st	X+, r0
     b32:	2a 95       	dec	r18
     b34:	e1 f7       	brne	.-8      	; 0xb2e <tag_check+0x18>
     b36:	fe 01       	movw	r30, r28
     b38:	31 96       	adiw	r30, 0x01	; 1
	int x = 0;

	for (x = 0; x <6; x ++){
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	dc 01       	movw	r26, r24
     b40:	a2 0f       	add	r26, r18
     b42:	b3 1f       	adc	r27, r19
	        token[x] = in_sent[x];
     b44:	4c 91       	ld	r20, X
     b46:	41 93       	st	Z+, r20
//Make sure the NMEA sentence leads with $GPRMC
int tag_check(volatile char *in_sent){
	char token[6] = "$12345";
	int x = 0;

	for (x = 0; x <6; x ++){
     b48:	2f 5f       	subi	r18, 0xFF	; 255
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	26 30       	cpi	r18, 0x06	; 6
     b4e:	31 05       	cpc	r19, r1
     b50:	b1 f7       	brne	.-20     	; 0xb3e <tag_check+0x28>
	        token[x] = in_sent[x];
	}
	if (strcmp(token,"$GPRMC") ==0) 
     b52:	68 ee       	ldi	r22, 0xE8	; 232
     b54:	71 e0       	ldi	r23, 0x01	; 1
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <strcmp>
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	89 2b       	or	r24, r25
     b64:	11 f0       	breq	.+4      	; 0xb6a <tag_check+0x54>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
     b6a:	c9 01       	movw	r24, r18
     b6c:	26 96       	adiw	r28, 0x06	; 6
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <strtok_single>:


//Tokenize the nmea_string (one token per function call)
char *strtok_single (char * in_str, char const * delims)
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
  static char  * src = NULL;

  char  *  p,  * ret = 0;

  if (in_str != NULL)
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	21 f0       	breq	.+8      	; 0xb8e <strtok_single+0x10>
    src = in_str;
     b86:	90 93 5b 04 	sts	0x045B, r25
     b8a:	80 93 5a 04 	sts	0x045A, r24

  if (src == NULL)
     b8e:	c0 91 5a 04 	lds	r28, 0x045A
     b92:	d0 91 5b 04 	lds	r29, 0x045B
     b96:	20 97       	sbiw	r28, 0x00	; 0
     b98:	69 f0       	breq	.+26     	; 0xbb4 <strtok_single+0x36>
    return NULL;

  if ((p = strpbrk (src, delims)) != NULL) {
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <strpbrk>
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	41 f0       	breq	.+16     	; 0xbb4 <strtok_single+0x36>
    *p  = 0;
     ba4:	fc 01       	movw	r30, r24
     ba6:	11 92       	st	Z+, r1
    ret = src;
    src = ++p;
     ba8:	f0 93 5b 04 	sts	0x045B, r31
     bac:	e0 93 5a 04 	sts	0x045A, r30
     bb0:	ce 01       	movw	r24, r28
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <strtok_single+0x3a>

  if (in_str != NULL)
    src = in_str;

  if (src == NULL)
    return NULL;
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
    ret = src;
    src = ++p;
  }

  return ret;
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <parse_nmea>:

#include "geolocation.h"
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile char *in_sent, char * volatile *raw_gps_data){
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <parse_nmea+0x16>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <parse_nmea+0x18>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <parse_nmea+0x1a>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	6b 01       	movw	r12, r22

	int l = 0, m =0;
	char* token;

	//null out the raw_gps_data field
	for (m=0; m<GPS_FIELD_LEN; m++)
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
	{
		raw_gps_data[0][m] = '\0';
     be2:	d6 01       	movw	r26, r12
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	e2 0f       	add	r30, r18
     bea:	f3 1f       	adc	r31, r19
     bec:	10 82       	st	Z, r1

	int l = 0, m =0;
	char* token;

	//null out the raw_gps_data field
	for (m=0; m<GPS_FIELD_LEN; m++)
     bee:	2f 5f       	subi	r18, 0xFF	; 255
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	20 31       	cpi	r18, 0x10	; 16
     bf4:	31 05       	cpc	r19, r1
     bf6:	a9 f7       	brne	.-22     	; 0xbe2 <parse_nmea+0x24>
	{
		raw_gps_data[0][m] = '\0';
	}

	//copy over the first token
	token = strtok_single((char *)in_sent, ",");
     bf8:	6f ee       	ldi	r22, 0xEF	; 239
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <strtok_single>
     c00:	5c 01       	movw	r10, r24
	//strcpy(raw_gps_data[0], token);

	char token2[6] = "$GPRMC";
     c02:	86 e0       	ldi	r24, 0x06	; 6
     c04:	e8 ee       	ldi	r30, 0xE8	; 232
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	de 01       	movw	r26, r28
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	8a 95       	dec	r24
     c12:	e1 f7       	brne	.-8      	; 0xc0c <parse_nmea+0x4e>
	strncpy(raw_gps_data[0],token2,6);
     c14:	f6 01       	movw	r30, r12
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	46 e0       	ldi	r20, 0x06	; 6
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	be 01       	movw	r22, r28
     c20:	6f 5f       	subi	r22, 0xFF	; 255
     c22:	7f 4f       	sbci	r23, 0xFF	; 255
     c24:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <strncpy>
#include "lcd.h"

//Parse the NMEA nmea_string and populate the raw_gps_data fields
int parse_nmea(volatile char *in_sent, char * volatile *raw_gps_data){

	int l = 0, m =0;
     c28:	00 e0       	ldi	r16, 0x00	; 0
     c2a:	10 e0       	ldi	r17, 0x00	; 0

	char token2[6] = "$GPRMC";
	strncpy(raw_gps_data[0],token2,6);

	//copy over the rest of the tokens
	while((token) && (l<NUM_GPS_FIELDS-1)) 
     c2c:	ab 28       	or	r10, r11
     c2e:	21 f1       	breq	.+72     	; 0xc78 <parse_nmea+0xba>
     c30:	0c 30       	cpi	r16, 0x0C	; 12
     c32:	11 05       	cpc	r17, r1
     c34:	09 f1       	breq	.+66     	; 0xc78 <parse_nmea+0xba>
	{
		l++;
     c36:	0f 5f       	subi	r16, 0xFF	; 255
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
     c3a:	78 01       	movw	r14, r16
     c3c:	ee 0c       	add	r14, r14
     c3e:	ff 1c       	adc	r15, r15
     c40:	ec 0c       	add	r14, r12
     c42:	fd 1c       	adc	r15, r13

		//null out the raw_gps_data field
		for (m=0; m<GPS_FIELD_LEN; m++)
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
		{
			raw_gps_data[l][m] = '\0';
     c48:	d7 01       	movw	r26, r14
     c4a:	ed 91       	ld	r30, X+
     c4c:	fc 91       	ld	r31, X
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	10 82       	st	Z, r1
	while((token) && (l<NUM_GPS_FIELDS-1)) 
	{
		l++;

		//null out the raw_gps_data field
		for (m=0; m<GPS_FIELD_LEN; m++)
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	80 31       	cpi	r24, 0x10	; 16
     c58:	91 05       	cpc	r25, r1
     c5a:	b1 f7       	brne	.-20     	; 0xc48 <parse_nmea+0x8a>
		{
			raw_gps_data[l][m] = '\0';
		}

		token = strtok_single(NULL, ",");
     c5c:	6f ee       	ldi	r22, 0xEF	; 239
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 bf 05 	call	0xb7e	; 0xb7e <strtok_single>
     c68:	5c 01       	movw	r10, r24
		strcpy(raw_gps_data[l], token);
     c6a:	f7 01       	movw	r30, r14
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	b5 01       	movw	r22, r10
     c72:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <strcpy>
     c76:	da cf       	rjmp	.-76     	; 0xc2c <parse_nmea+0x6e>
	}

	return 0;
}
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	26 96       	adiw	r28, 0x06	; 6
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	08 95       	ret

00000c9e <wipe_chars>:
}

void wipe_chars(char *str, int num)
{
	int i;
	for (i=0; i<num; i++)
     c9e:	fc 01       	movw	r30, r24
     ca0:	9f 01       	movw	r18, r30
     ca2:	28 1b       	sub	r18, r24
     ca4:	39 0b       	sbc	r19, r25
     ca6:	26 17       	cp	r18, r22
     ca8:	37 07       	cpc	r19, r23
     caa:	14 f4       	brge	.+4      	; 0xcb0 <wipe_chars+0x12>
	{
		str[i] = '\0';
     cac:	11 92       	st	Z+, r1
     cae:	f8 cf       	rjmp	.-16     	; 0xca0 <wipe_chars+0x2>
	}
}
     cb0:	08 95       	ret

00000cb2 <lat2dec>:

//convert GPRMC-style latitude to decimal degrees
float lat2dec(char lat[9], char N_indicator)
{
     cb2:	af 92       	push	r10
     cb4:	bf 92       	push	r11
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	27 97       	sbiw	r28, 0x07	; 7
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	5c 01       	movw	r10, r24
     cd6:	16 2f       	mov	r17, r22
	//GPRMC latitude = ddmm.mmmm

	//obtain degrees
	float degrees = (float)(((int)(lat[0]-'0'))*10+(int)(lat[1]-'0'));
     cd8:	fc 01       	movw	r30, r24
     cda:	80 81       	ld	r24, Z
     cdc:	99 27       	eor	r25, r25
     cde:	87 fd       	sbrc	r24, 7
     ce0:	90 95       	com	r25
     ce2:	c0 97       	sbiw	r24, 0x30	; 48
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	28 9f       	mul	r18, r24
     ce8:	b0 01       	movw	r22, r0
     cea:	29 9f       	mul	r18, r25
     cec:	70 0d       	add	r23, r0
     cee:	11 24       	eor	r1, r1
     cf0:	81 81       	ldd	r24, Z+1	; 0x01
     cf2:	99 27       	eor	r25, r25
     cf4:	87 fd       	sbrc	r24, 7
     cf6:	90 95       	com	r25
     cf8:	c0 97       	sbiw	r24, 0x30	; 48
     cfa:	68 0f       	add	r22, r24
     cfc:	79 1f       	adc	r23, r25
     cfe:	88 27       	eor	r24, r24
     d00:	77 fd       	sbrc	r23, 7
     d02:	80 95       	com	r24
     d04:	98 2f       	mov	r25, r24
     d06:	0e 94 66 18 	call	0x30cc	; 0x30cc <__floatsisf>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lat[2],7);
     d0e:	b5 01       	movw	r22, r10
     d10:	6e 5f       	subi	r22, 0xFE	; 254
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	47 e0       	ldi	r20, 0x07	; 7
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <strncpy>

	float minutes = strtod(temp,NULL);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e7       	ldi	r20, 0x70	; 112
     d32:	52 e4       	ldi	r21, 0x42	; 66
     d34:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
     d38:	9b 01       	movw	r18, r22
     d3a:	ac 01       	movw	r20, r24
     d3c:	c7 01       	movw	r24, r14
     d3e:	b6 01       	movw	r22, r12
     d40:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>

	//adjust for N/S indicator
	if (N_indicator == 'S')
     d44:	13 35       	cpi	r17, 0x53	; 83
     d46:	09 f4       	brne	.+2      	; 0xd4a <lat2dec+0x98>
		result *= -1;
     d48:	90 58       	subi	r25, 0x80	; 128

	return result;

}
     d4a:	27 96       	adiw	r28, 0x07	; 7
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	bf 90       	pop	r11
     d66:	af 90       	pop	r10
     d68:	08 95       	ret

00000d6a <lon2dec>:

//convert GPRMC-style longitude to decimal degrees
float lon2dec(char lon[10], char E_indicator)
{
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	27 97       	sbiw	r28, 0x07	; 7
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	5c 01       	movw	r10, r24
     d8e:	16 2f       	mov	r17, r22
	//GPRMC longitude = dddmm.mmmm

	//obtain degrees
	float degrees = (float)((int)(lon[0]-'0')*100+(int)(lon[1]-'0')*10+(int)(lon[2]-'0'));
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	99 27       	eor	r25, r25
     d96:	87 fd       	sbrc	r24, 7
     d98:	90 95       	com	r25
     d9a:	c0 97       	sbiw	r24, 0x30	; 48
     d9c:	24 e6       	ldi	r18, 0x64	; 100
     d9e:	28 9f       	mul	r18, r24
     da0:	b0 01       	movw	r22, r0
     da2:	29 9f       	mul	r18, r25
     da4:	70 0d       	add	r23, r0
     da6:	11 24       	eor	r1, r1
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	99 27       	eor	r25, r25
     dac:	87 fd       	sbrc	r24, 7
     dae:	90 95       	com	r25
     db0:	c0 97       	sbiw	r24, 0x30	; 48
     db2:	4a e0       	ldi	r20, 0x0A	; 10
     db4:	48 9f       	mul	r20, r24
     db6:	90 01       	movw	r18, r0
     db8:	49 9f       	mul	r20, r25
     dba:	30 0d       	add	r19, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	62 0f       	add	r22, r18
     dc0:	73 1f       	adc	r23, r19
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	99 27       	eor	r25, r25
     dc6:	87 fd       	sbrc	r24, 7
     dc8:	90 95       	com	r25
     dca:	c0 97       	sbiw	r24, 0x30	; 48
     dcc:	68 0f       	add	r22, r24
     dce:	79 1f       	adc	r23, r25
     dd0:	88 27       	eor	r24, r24
     dd2:	77 fd       	sbrc	r23, 7
     dd4:	80 95       	com	r24
     dd6:	98 2f       	mov	r25, r24
     dd8:	0e 94 66 18 	call	0x30cc	; 0x30cc <__floatsisf>
     ddc:	6b 01       	movw	r12, r22
     dde:	7c 01       	movw	r14, r24

	//obtain minutes
	char temp[7];
	strncpy(temp,(char *)&lon[3],7);
     de0:	b5 01       	movw	r22, r10
     de2:	6d 5f       	subi	r22, 0xFD	; 253
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	47 e0       	ldi	r20, 0x07	; 7
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <strncpy>

	float minutes = strtod(temp,NULL);
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <strtod>

	//do the math
	float result = degrees + minutes*1/60;
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e7       	ldi	r20, 0x70	; 112
     e04:	52 e4       	ldi	r21, 0x42	; 66
     e06:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c7 01       	movw	r24, r14
     e10:	b6 01       	movw	r22, r12
     e12:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>

	//adjust for N/S indicator
	if (E_indicator == 'W')
     e16:	17 35       	cpi	r17, 0x57	; 87
     e18:	09 f4       	brne	.+2      	; 0xe1c <lon2dec+0xb2>
		result *= -1;
     e1a:	90 58       	subi	r25, 0x80	; 128

	return result;
}
     e1c:	27 96       	adiw	r28, 0x07	; 7
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	08 95       	ret

00000e3c <update_user_gps_data>:

//use the raw gps_data fields to populate the GPS_DATA struct
void update_user_gps_data(char * volatile *raw_gps_data, GPS_DATA *gps_data)
{
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	8c 01       	movw	r16, r24
     e4e:	eb 01       	movw	r28, r22
	float temp;
	wipe_chars(gps_data->msg_type,8);
     e50:	68 e0       	ldi	r22, 0x08	; 8
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wipe_chars>
	strcpy(gps_data->msg_type,raw_gps_data[0]);
     e5a:	d8 01       	movw	r26, r16
     e5c:	6d 91       	ld	r22, X+
     e5e:	7c 91       	ld	r23, X
     e60:	ce 01       	movw	r24, r28
     e62:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <strcpy>

	wipe_chars(gps_data->utc_time,8);
     e66:	68 e0       	ldi	r22, 0x08	; 8
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	ce 01       	movw	r24, r28
     e6c:	08 96       	adiw	r24, 0x08	; 8
     e6e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wipe_chars>
	gps_data->utc_time[0] = raw_gps_data[1][0];
     e72:	d8 01       	movw	r26, r16
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	ed 91       	ld	r30, X+
     e78:	fc 91       	ld	r31, X
     e7a:	13 97       	sbiw	r26, 0x03	; 3
     e7c:	80 81       	ld	r24, Z
     e7e:	88 87       	std	Y+8, r24	; 0x08
	gps_data->utc_time[1] = raw_gps_data[1][1];
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	ed 91       	ld	r30, X+
     e84:	fc 91       	ld	r31, X
     e86:	13 97       	sbiw	r26, 0x03	; 3
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	89 87       	std	Y+9, r24	; 0x09
	gps_data->utc_time[2] = ':';
     e8c:	8a e3       	ldi	r24, 0x3A	; 58
     e8e:	8a 87       	std	Y+10, r24	; 0x0a
	gps_data->utc_time[3] = raw_gps_data[1][2];
     e90:	12 96       	adiw	r26, 0x02	; 2
     e92:	ed 91       	ld	r30, X+
     e94:	fc 91       	ld	r31, X
     e96:	13 97       	sbiw	r26, 0x03	; 3
     e98:	92 81       	ldd	r25, Z+2	; 0x02
     e9a:	9b 87       	std	Y+11, r25	; 0x0b
	gps_data->utc_time[4] = raw_gps_data[1][3];
     e9c:	12 96       	adiw	r26, 0x02	; 2
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	13 97       	sbiw	r26, 0x03	; 3
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	9c 87       	std	Y+12, r25	; 0x0c
	gps_data->utc_time[5] = ':';
     ea8:	8d 87       	std	Y+13, r24	; 0x0d
	gps_data->utc_time[6] = raw_gps_data[1][4];
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	13 97       	sbiw	r26, 0x03	; 3
     eb2:	84 81       	ldd	r24, Z+4	; 0x04
     eb4:	8e 87       	std	Y+14, r24	; 0x0e
	gps_data->utc_time[7] = raw_gps_data[1][5];
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	13 97       	sbiw	r26, 0x03	; 3
     ebe:	85 81       	ldd	r24, Z+5	; 0x05
     ec0:	8f 87       	std	Y+15, r24	; 0x0f

	gps_data->nrw = raw_gps_data[2][0];
     ec2:	14 96       	adiw	r26, 0x04	; 4
     ec4:	ed 91       	ld	r30, X+
     ec6:	fc 91       	ld	r31, X
     ec8:	15 97       	sbiw	r26, 0x05	; 5
     eca:	80 81       	ld	r24, Z
     ecc:	88 8b       	std	Y+16, r24	; 0x10

	gps_data->lat = 0;
     ece:	19 8a       	std	Y+17, r1	; 0x11
     ed0:	1a 8a       	std	Y+18, r1	; 0x12
     ed2:	1b 8a       	std	Y+19, r1	; 0x13
     ed4:	1c 8a       	std	Y+20, r1	; 0x14
	temp = lat2dec(raw_gps_data[3], raw_gps_data[4][0]);
     ed6:	18 96       	adiw	r26, 0x08	; 8
     ed8:	ed 91       	ld	r30, X+
     eda:	fc 91       	ld	r31, X
     edc:	19 97       	sbiw	r26, 0x09	; 9
     ede:	16 96       	adiw	r26, 0x06	; 6
     ee0:	8d 91       	ld	r24, X+
     ee2:	9c 91       	ld	r25, X
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	60 81       	ld	r22, Z
     ee8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <lat2dec>
     eec:	6b 01       	movw	r12, r22
     eee:	7c 01       	movw	r14, r24

	//handle invalid latitudes
	if ((temp >= -90)&&(temp <= 90))
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	44 eb       	ldi	r20, 0xB4	; 180
     ef6:	52 ec       	ldi	r21, 0xC2	; 194
     ef8:	0e 94 c7 19 	call	0x338e	; 0x338e <__gesf2>
     efc:	87 fd       	sbrc	r24, 7
     efe:	0e c0       	rjmp	.+28     	; 0xf1c <update_user_gps_data+0xe0>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	44 eb       	ldi	r20, 0xB4	; 180
     f06:	52 e4       	ldi	r21, 0x42	; 66
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
     f10:	18 16       	cp	r1, r24
     f12:	24 f0       	brlt	.+8      	; 0xf1c <update_user_gps_data+0xe0>
		gps_data->lat = temp;
     f14:	c9 8a       	std	Y+17, r12	; 0x11
     f16:	da 8a       	std	Y+18, r13	; 0x12
     f18:	eb 8a       	std	Y+19, r14	; 0x13
     f1a:	fc 8a       	std	Y+20, r15	; 0x14

	gps_data->lon = 0;
     f1c:	1d 8a       	std	Y+21, r1	; 0x15
     f1e:	1e 8a       	std	Y+22, r1	; 0x16
     f20:	1f 8a       	std	Y+23, r1	; 0x17
     f22:	18 8e       	std	Y+24, r1	; 0x18
	temp = lon2dec(raw_gps_data[5], raw_gps_data[6][0]);
     f24:	d8 01       	movw	r26, r16
     f26:	1c 96       	adiw	r26, 0x0c	; 12
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	1d 97       	sbiw	r26, 0x0d	; 13
     f2e:	1a 96       	adiw	r26, 0x0a	; 10
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	1b 97       	sbiw	r26, 0x0b	; 11
     f36:	60 81       	ld	r22, Z
     f38:	0e 94 b5 06 	call	0xd6a	; 0xd6a <lon2dec>
     f3c:	6b 01       	movw	r12, r22
     f3e:	7c 01       	movw	r14, r24

	//handle invalid longitudes
	if ((temp >= -180)&&(temp <= 180))
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	44 e3       	ldi	r20, 0x34	; 52
     f46:	53 ec       	ldi	r21, 0xC3	; 195
     f48:	0e 94 c7 19 	call	0x338e	; 0x338e <__gesf2>
     f4c:	87 fd       	sbrc	r24, 7
     f4e:	0e c0       	rjmp	.+28     	; 0xf6c <update_user_gps_data+0x130>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	44 e3       	ldi	r20, 0x34	; 52
     f56:	53 e4       	ldi	r21, 0x43	; 67
     f58:	c7 01       	movw	r24, r14
     f5a:	b6 01       	movw	r22, r12
     f5c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
     f60:	18 16       	cp	r1, r24
     f62:	24 f0       	brlt	.+8      	; 0xf6c <update_user_gps_data+0x130>
		gps_data->lon = temp;
     f64:	cd 8a       	std	Y+21, r12	; 0x15
     f66:	de 8a       	std	Y+22, r13	; 0x16
     f68:	ef 8a       	std	Y+23, r14	; 0x17
     f6a:	f8 8e       	std	Y+24, r15	; 0x18

	gps_data->speed = 0;
     f6c:	19 8e       	std	Y+25, r1	; 0x19
     f6e:	1a 8e       	std	Y+26, r1	; 0x1a
     f70:	1b 8e       	std	Y+27, r1	; 0x1b
     f72:	1c 8e       	std	Y+28, r1	; 0x1c
	gps_data->speed = (float)strtod(raw_gps_data[7],NULL);
     f74:	f8 01       	movw	r30, r16
     f76:	86 85       	ldd	r24, Z+14	; 0x0e
     f78:	97 85       	ldd	r25, Z+15	; 0x0f
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <strtod>
     f82:	69 8f       	std	Y+25, r22	; 0x19
     f84:	7a 8f       	std	Y+26, r23	; 0x1a
     f86:	8b 8f       	std	Y+27, r24	; 0x1b
     f88:	9c 8f       	std	Y+28, r25	; 0x1c

	gps_data->course = 0;
     f8a:	1d 8e       	std	Y+29, r1	; 0x1d
     f8c:	1e 8e       	std	Y+30, r1	; 0x1e
     f8e:	1f 8e       	std	Y+31, r1	; 0x1f
     f90:	18 a2       	std	Y+32, r1	; 0x20
	gps_data->course = (float)strtod(raw_gps_data[8],NULL);
     f92:	d8 01       	movw	r26, r16
     f94:	50 96       	adiw	r26, 0x10	; 16
     f96:	8d 91       	ld	r24, X+
     f98:	9c 91       	ld	r25, X
     f9a:	51 97       	sbiw	r26, 0x11	; 17
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <strtod>
     fa4:	6d 8f       	std	Y+29, r22	; 0x1d
     fa6:	7e 8f       	std	Y+30, r23	; 0x1e
     fa8:	8f 8f       	std	Y+31, r24	; 0x1f
     faa:	98 a3       	std	Y+32, r25	; 0x20

	wipe_chars(gps_data->date,8);
     fac:	68 e0       	ldi	r22, 0x08	; 8
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	ce 01       	movw	r24, r28
     fb2:	81 96       	adiw	r24, 0x21	; 33
     fb4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wipe_chars>
	gps_data->date[0] = raw_gps_data[9][2];
     fb8:	d8 01       	movw	r26, r16
     fba:	52 96       	adiw	r26, 0x12	; 18
     fbc:	ed 91       	ld	r30, X+
     fbe:	fc 91       	ld	r31, X
     fc0:	53 97       	sbiw	r26, 0x13	; 19
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	89 a3       	std	Y+33, r24	; 0x21
	gps_data->date[1] = raw_gps_data[9][3];
     fc6:	52 96       	adiw	r26, 0x12	; 18
     fc8:	ed 91       	ld	r30, X+
     fca:	fc 91       	ld	r31, X
     fcc:	53 97       	sbiw	r26, 0x13	; 19
     fce:	83 81       	ldd	r24, Z+3	; 0x03
     fd0:	8a a3       	std	Y+34, r24	; 0x22
	gps_data->date[2] = '/';
     fd2:	8f e2       	ldi	r24, 0x2F	; 47
     fd4:	8b a3       	std	Y+35, r24	; 0x23
	gps_data->date[3] = raw_gps_data[9][0];
     fd6:	52 96       	adiw	r26, 0x12	; 18
     fd8:	ed 91       	ld	r30, X+
     fda:	fc 91       	ld	r31, X
     fdc:	53 97       	sbiw	r26, 0x13	; 19
     fde:	90 81       	ld	r25, Z
     fe0:	9c a3       	std	Y+36, r25	; 0x24
	gps_data->date[4] = raw_gps_data[9][1];
     fe2:	52 96       	adiw	r26, 0x12	; 18
     fe4:	ed 91       	ld	r30, X+
     fe6:	fc 91       	ld	r31, X
     fe8:	53 97       	sbiw	r26, 0x13	; 19
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	9d a3       	std	Y+37, r25	; 0x25
	gps_data->date[5] = '/';
     fee:	8e a3       	std	Y+38, r24	; 0x26
	gps_data->date[6] = raw_gps_data[9][4];
     ff0:	52 96       	adiw	r26, 0x12	; 18
     ff2:	ed 91       	ld	r30, X+
     ff4:	fc 91       	ld	r31, X
     ff6:	53 97       	sbiw	r26, 0x13	; 19
     ff8:	84 81       	ldd	r24, Z+4	; 0x04
     ffa:	8f a3       	std	Y+39, r24	; 0x27
	gps_data->date[7] = raw_gps_data[9][5];
     ffc:	52 96       	adiw	r26, 0x12	; 18
     ffe:	ed 91       	ld	r30, X+
    1000:	fc 91       	ld	r31, X
    1002:	53 97       	sbiw	r26, 0x13	; 19
    1004:	85 81       	ldd	r24, Z+5	; 0x05
    1006:	88 a7       	std	Y+40, r24	; 0x28

	wipe_chars(gps_data->mag_var,8);
    1008:	7e 01       	movw	r14, r28
    100a:	b9 e2       	ldi	r27, 0x29	; 41
    100c:	eb 0e       	add	r14, r27
    100e:	f1 1c       	adc	r15, r1
    1010:	68 e0       	ldi	r22, 0x08	; 8
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	c7 01       	movw	r24, r14
    1016:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wipe_chars>
	strcpy(gps_data->mag_var,raw_gps_data[10]);
    101a:	f8 01       	movw	r30, r16
    101c:	64 89       	ldd	r22, Z+20	; 0x14
    101e:	75 89       	ldd	r23, Z+21	; 0x15
    1020:	c7 01       	movw	r24, r14
    1022:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <strcpy>

	gps_data->mode = raw_gps_data[12][0];
    1026:	d8 01       	movw	r26, r16
    1028:	58 96       	adiw	r26, 0x18	; 24
    102a:	ed 91       	ld	r30, X+
    102c:	fc 91       	ld	r31, X
    102e:	59 97       	sbiw	r26, 0x19	; 25
    1030:	80 81       	ld	r24, Z
    1032:	89 ab       	std	Y+49, r24	; 0x31

	wipe_chars(gps_data->checksum,3);
    1034:	63 e0       	ldi	r22, 0x03	; 3
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	ce 01       	movw	r24, r28
    103a:	c2 96       	adiw	r24, 0x32	; 50
    103c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wipe_chars>
	gps_data->checksum[0] = raw_gps_data[12][1];
    1040:	d8 01       	movw	r26, r16
    1042:	58 96       	adiw	r26, 0x18	; 24
    1044:	ed 91       	ld	r30, X+
    1046:	fc 91       	ld	r31, X
    1048:	59 97       	sbiw	r26, 0x19	; 25
    104a:	81 81       	ldd	r24, Z+1	; 0x01
    104c:	8a ab       	std	Y+50, r24	; 0x32
	gps_data->checksum[1] = raw_gps_data[12][2];
    104e:	58 96       	adiw	r26, 0x18	; 24
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	59 97       	sbiw	r26, 0x19	; 25
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	8b ab       	std	Y+51, r24	; 0x33
	gps_data->checksum[2] = raw_gps_data[12][3];
    105a:	58 96       	adiw	r26, 0x18	; 24
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	59 97       	sbiw	r26, 0x19	; 25
    1062:	83 81       	ldd	r24, Z+3	; 0x03
    1064:	8c ab       	std	Y+52, r24	; 0x34
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	08 95       	ret

00001078 <calculate_bearings>:
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
}

//calculate the absolute and relative bearings to the nearest station 
int calculate_bearings(GPS_DATA *gps_data, DATABASE *fm_stations)
{
    1078:	4f 92       	push	r4
    107a:	5f 92       	push	r5
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	e0 97       	sbiw	r28, 0x30	; 48
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	8c 01       	movw	r16, r24
    10aa:	5b 01       	movw	r10, r22
	double y, x, bearing, lat1, lat2, lon1, lon2;
	float slice;

	//16-point compass 
	char *str_bearings[] = {"N  ", "NNE", "NE ", "ENE", "E  ", "ESE", "SE ", "SSE", "S  ", "SSW", "SW ", "WSW", "W  ", "WNW", "NW ", "NNW"};
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	ef e0       	ldi	r30, 0x0F	; 15
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	de 01       	movw	r26, r28
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	8a 95       	dec	r24
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <calculate_bearings+0x3e>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    10be:	2b ed       	ldi	r18, 0xDB	; 219
    10c0:	3f e0       	ldi	r19, 0x0F	; 15
    10c2:	49 e4       	ldi	r20, 0x49	; 73
    10c4:	50 e4       	ldi	r21, 0x40	; 64
    10c6:	f8 01       	movw	r30, r16
    10c8:	61 89       	ldd	r22, Z+17	; 0x11
    10ca:	72 89       	ldd	r23, Z+18	; 0x12
    10cc:	83 89       	ldd	r24, Z+19	; 0x13
    10ce:	94 89       	ldd	r25, Z+20	; 0x14
    10d0:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	44 e3       	ldi	r20, 0x34	; 52
    10da:	53 e4       	ldi	r21, 0x43	; 67
    10dc:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    10e0:	6b 01       	movw	r12, r22
    10e2:	7c 01       	movw	r14, r24
	//16-point compass 
	char *str_bearings[] = {"N  ", "NNE", "NE ", "ENE", "E  ", "ESE", "SE ", "SSE", "S  ", "SSW", "SW ", "WSW", "W  ", "WNW", "NW ", "NNW"};

	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);
	lat2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_station].lat);
    10e4:	f5 01       	movw	r30, r10
    10e6:	24 81       	ldd	r18, Z+4	; 0x04
    10e8:	35 81       	ldd	r19, Z+5	; 0x05
    10ea:	4c e1       	ldi	r20, 0x1C	; 28
    10ec:	42 9f       	mul	r20, r18
    10ee:	c0 01       	movw	r24, r0
    10f0:	43 9f       	mul	r20, r19
    10f2:	90 0d       	add	r25, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	60 80       	ld	r6, Z
    10f8:	71 80       	ldd	r7, Z+1	; 0x01
    10fa:	68 0e       	add	r6, r24
    10fc:	79 1e       	adc	r7, r25
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    10fe:	2b ed       	ldi	r18, 0xDB	; 219
    1100:	3f e0       	ldi	r19, 0x0F	; 15
    1102:	49 e4       	ldi	r20, 0x49	; 73
    1104:	50 e4       	ldi	r21, 0x40	; 64
    1106:	f3 01       	movw	r30, r6
    1108:	64 85       	ldd	r22, Z+12	; 0x0c
    110a:	75 85       	ldd	r23, Z+13	; 0x0d
    110c:	86 85       	ldd	r24, Z+14	; 0x0e
    110e:	97 85       	ldd	r25, Z+15	; 0x0f
    1110:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	44 e3       	ldi	r20, 0x34	; 52
    111a:	53 e4       	ldi	r21, 0x43	; 67
    111c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    1120:	4b 01       	movw	r8, r22
    1122:	5c 01       	movw	r10, r24
    1124:	2b ed       	ldi	r18, 0xDB	; 219
    1126:	3f e0       	ldi	r19, 0x0F	; 15
    1128:	49 e4       	ldi	r20, 0x49	; 73
    112a:	50 e4       	ldi	r21, 0x40	; 64
    112c:	f3 01       	movw	r30, r6
    112e:	60 89       	ldd	r22, Z+16	; 0x10
    1130:	71 89       	ldd	r23, Z+17	; 0x11
    1132:	82 89       	ldd	r24, Z+18	; 0x12
    1134:	93 89       	ldd	r25, Z+19	; 0x13
    1136:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	44 e3       	ldi	r20, 0x34	; 52
    1140:	53 e4       	ldi	r21, 0x43	; 67
    1142:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    1146:	2b 01       	movw	r4, r22
    1148:	3c 01       	movw	r6, r24
    114a:	2b ed       	ldi	r18, 0xDB	; 219
    114c:	3f e0       	ldi	r19, 0x0F	; 15
    114e:	49 e4       	ldi	r20, 0x49	; 73
    1150:	50 e4       	ldi	r21, 0x40	; 64
    1152:	f8 01       	movw	r30, r16
    1154:	65 89       	ldd	r22, Z+21	; 0x15
    1156:	76 89       	ldd	r23, Z+22	; 0x16
    1158:	87 89       	ldd	r24, Z+23	; 0x17
    115a:	90 8d       	ldd	r25, Z+24	; 0x18
    115c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	44 e3       	ldi	r20, 0x34	; 52
    1166:	53 e4       	ldi	r21, 0x43	; 67
    1168:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    116c:	9b 01       	movw	r18, r22
    116e:	ac 01       	movw	r20, r24
	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);
	lat2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_station].lat);
	lon2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_station].lon);

	y = sin(lon2 - lon1)*cos(lat2);
    1170:	c3 01       	movw	r24, r6
    1172:	b2 01       	movw	r22, r4
    1174:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__subsf3>
    1178:	69 a3       	std	Y+33, r22	; 0x21
    117a:	7a a3       	std	Y+34, r23	; 0x22
    117c:	8b a3       	std	Y+35, r24	; 0x23
    117e:	9c a3       	std	Y+36, r25	; 0x24
    1180:	0e 94 1f 1b 	call	0x363e	; 0x363e <sin>
    1184:	6d a3       	std	Y+37, r22	; 0x25
    1186:	7e a3       	std	Y+38, r23	; 0x26
    1188:	8f a3       	std	Y+39, r24	; 0x27
    118a:	98 a7       	std	Y+40, r25	; 0x28
    118c:	c5 01       	movw	r24, r10
    118e:	b4 01       	movw	r22, r8
    1190:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <cos>
    1194:	2b 01       	movw	r4, r22
    1196:	3c 01       	movw	r6, r24
	x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2 - lon1);
    1198:	c7 01       	movw	r24, r14
    119a:	b6 01       	movw	r22, r12
    119c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <cos>
    11a0:	69 a7       	std	Y+41, r22	; 0x29
    11a2:	7a a7       	std	Y+42, r23	; 0x2a
    11a4:	8b a7       	std	Y+43, r24	; 0x2b
    11a6:	9c a7       	std	Y+44, r25	; 0x2c
    11a8:	c5 01       	movw	r24, r10
    11aa:	b4 01       	movw	r22, r8
    11ac:	0e 94 1f 1b 	call	0x363e	; 0x363e <sin>
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	c7 01       	movw	r24, r14
    11b6:	b6 01       	movw	r22, r12
    11b8:	2d a7       	std	Y+45, r18	; 0x2d
    11ba:	3e a7       	std	Y+46, r19	; 0x2e
    11bc:	4f a7       	std	Y+47, r20	; 0x2f
    11be:	58 ab       	std	Y+48, r21	; 0x30
    11c0:	0e 94 1f 1b 	call	0x363e	; 0x363e <sin>
    11c4:	6b 01       	movw	r12, r22
    11c6:	7c 01       	movw	r14, r24
    11c8:	69 a1       	ldd	r22, Y+33	; 0x21
    11ca:	7a a1       	ldd	r23, Y+34	; 0x22
    11cc:	8b a1       	ldd	r24, Y+35	; 0x23
    11ce:	9c a1       	ldd	r25, Y+36	; 0x24
    11d0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <cos>
    11d4:	69 a3       	std	Y+33, r22	; 0x21
    11d6:	7a a3       	std	Y+34, r23	; 0x22
    11d8:	8b a3       	std	Y+35, r24	; 0x23
    11da:	9c a3       	std	Y+36, r25	; 0x24
    11dc:	2d a5       	ldd	r18, Y+45	; 0x2d
    11de:	3e a5       	ldd	r19, Y+46	; 0x2e
    11e0:	4f a5       	ldd	r20, Y+47	; 0x2f
    11e2:	58 a9       	ldd	r21, Y+48	; 0x30
    11e4:	69 a5       	ldd	r22, Y+41	; 0x29
    11e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    11e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ec:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    11f0:	4b 01       	movw	r8, r22
    11f2:	5c 01       	movw	r10, r24
    11f4:	a3 01       	movw	r20, r6
    11f6:	92 01       	movw	r18, r4
    11f8:	c7 01       	movw	r24, r14
    11fa:	b6 01       	movw	r22, r12
    11fc:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1200:	29 a1       	ldd	r18, Y+33	; 0x21
    1202:	3a a1       	ldd	r19, Y+34	; 0x22
    1204:	4b a1       	ldd	r20, Y+35	; 0x23
    1206:	5c a1       	ldd	r21, Y+36	; 0x24
    1208:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	c5 01       	movw	r24, r10
    1212:	b4 01       	movw	r22, r8
    1214:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__subsf3>
    1218:	6b 01       	movw	r12, r22
    121a:	7c 01       	movw	r14, r24
	lat1 = to_radians((double)gps_data->lat);
	lon1 = to_radians((double)gps_data->lon);
	lat2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_station].lat);
	lon2 = to_radians((double)fm_stations->all_stations[fm_stations->nearest_station].lon);

	y = sin(lon2 - lon1)*cos(lat2);
    121c:	a3 01       	movw	r20, r6
    121e:	92 01       	movw	r18, r4
    1220:	6d a1       	ldd	r22, Y+37	; 0x25
    1222:	7e a1       	ldd	r23, Y+38	; 0x26
    1224:	8f a1       	ldd	r24, Y+39	; 0x27
    1226:	98 a5       	ldd	r25, Y+40	; 0x28
    1228:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
	x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2 - lon1);

	//the absolute bearing to nearest station
	bearing = to_degrees(atan2(y, x));
    122c:	a7 01       	movw	r20, r14
    122e:	96 01       	movw	r18, r12
    1230:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <atan2>
}

//convert an angle from radians to degrees
double to_degrees(double radian_angle)
{
	return 180*radian_angle/(M_PI);
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	44 e3       	ldi	r20, 0x34	; 52
    123a:	53 e4       	ldi	r21, 0x43	; 67
    123c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1240:	2b ed       	ldi	r18, 0xDB	; 219
    1242:	3f e0       	ldi	r19, 0x0F	; 15
    1244:	49 e4       	ldi	r20, 0x49	; 73
    1246:	50 e4       	ldi	r21, 0x40	; 64
    1248:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    124c:	6b 01       	movw	r12, r22
    124e:	7c 01       	movw	r14, r24

	//the absolute bearing to nearest station
	bearing = to_degrees(atan2(y, x));

	//keep bearing between 0 - 360
	if (bearing < 0)
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	a9 01       	movw	r20, r18
    1256:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    125a:	87 ff       	sbrs	r24, 7
    125c:	0a c0       	rjmp	.+20     	; 0x1272 <calculate_bearings+0x1fa>
		bearing += 360;
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	44 eb       	ldi	r20, 0xB4	; 180
    1264:	53 e4       	ldi	r21, 0x43	; 67
    1266:	c7 01       	movw	r24, r14
    1268:	b6 01       	movw	r22, r12
    126a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    126e:	6b 01       	movw	r12, r22
    1270:	7c 01       	movw	r14, r24

	gps_data->abs_bearing_nearest = (float)bearing;
    1272:	f8 01       	movw	r30, r16
    1274:	c5 aa       	std	Z+53, r12	; 0x35
    1276:	d6 aa       	std	Z+54, r13	; 0x36
    1278:	e7 aa       	std	Z+55, r14	; 0x37
    127a:	f0 ae       	std	Z+56, r15	; 0x38
	/*lcd_init();
	string_write("bearing = "); string_write_float((float)bearing,1);
	_delay_ms(3000);*/

	//get the relative bearing to nearest station
	gps_data->rel_bearing_nearest = gps_data->abs_bearing_nearest - gps_data->course;
    127c:	25 8d       	ldd	r18, Z+29	; 0x1d
    127e:	36 8d       	ldd	r19, Z+30	; 0x1e
    1280:	47 8d       	ldd	r20, Z+31	; 0x1f
    1282:	50 a1       	ldd	r21, Z+32	; 0x20
    1284:	c7 01       	movw	r24, r14
    1286:	b6 01       	movw	r22, r12
    1288:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__subsf3>
    128c:	4b 01       	movw	r8, r22
    128e:	5c 01       	movw	r10, r24

	//keep within 0-360
	if (gps_data->rel_bearing_nearest < 0)
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    129a:	87 fd       	sbrc	r24, 7
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <calculate_bearings+0x232>
	/*lcd_init();
	string_write("bearing = "); string_write_float((float)bearing,1);
	_delay_ms(3000);*/

	//get the relative bearing to nearest station
	gps_data->rel_bearing_nearest = gps_data->abs_bearing_nearest - gps_data->course;
    129e:	f8 01       	movw	r30, r16
    12a0:	81 ae       	std	Z+57, r8	; 0x39
    12a2:	92 ae       	std	Z+58, r9	; 0x3a
    12a4:	a3 ae       	std	Z+59, r10	; 0x3b
    12a6:	b4 ae       	std	Z+60, r11	; 0x3c
    12a8:	0d c0       	rjmp	.+26     	; 0x12c4 <calculate_bearings+0x24c>

	//keep within 0-360
	if (gps_data->rel_bearing_nearest < 0)
		gps_data->rel_bearing_nearest += 360;
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	44 eb       	ldi	r20, 0xB4	; 180
    12b0:	53 e4       	ldi	r21, 0x43	; 67
    12b2:	c5 01       	movw	r24, r10
    12b4:	b4 01       	movw	r22, r8
    12b6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    12ba:	f8 01       	movw	r30, r16
    12bc:	61 af       	std	Z+57, r22	; 0x39
    12be:	72 af       	std	Z+58, r23	; 0x3a
    12c0:	83 af       	std	Z+59, r24	; 0x3b
    12c2:	94 af       	std	Z+60, r25	; 0x3c

	//get the absolute bearing strings
	slice = gps_data->abs_bearing_nearest/360*16;
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	44 eb       	ldi	r20, 0xB4	; 180
    12ca:	53 e4       	ldi	r21, 0x43	; 67
    12cc:	c7 01       	movw	r24, r14
    12ce:	b6 01       	movw	r22, r12
    12d0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e8       	ldi	r20, 0x80	; 128
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    12e0:	6b 01       	movw	r12, r22
    12e2:	7c 01       	movw	r14, r24

	if ((slice<=0.5)||(slice>=15.5))
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    12f0:	98 01       	movw	r18, r16
    12f2:	23 5c       	subi	r18, 0xC3	; 195
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	59 01       	movw	r10, r18
    12f8:	18 16       	cp	r1, r24
    12fa:	54 f4       	brge	.+20     	; 0x1310 <calculate_bearings+0x298>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	48 e7       	ldi	r20, 0x78	; 120
    1302:	51 e4       	ldi	r21, 0x41	; 65
    1304:	c7 01       	movw	r24, r14
    1306:	b6 01       	movw	r22, r12
    1308:	0e 94 c7 19 	call	0x338e	; 0x338e <__gesf2>
    130c:	87 fd       	sbrc	r24, 7
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <calculate_bearings+0x29e>
	{
		//bearing is NORTH
		strncpy(gps_data->str_abs_bearing_nearest, str_bearings[0], 3);
    1310:	69 81       	ldd	r22, Y+1	; 0x01
    1312:	7a 81       	ldd	r23, Y+2	; 0x02
    1314:	15 c0       	rjmp	.+42     	; 0x1340 <calculate_bearings+0x2c8>
	} else {
		//bearing fits normal convention
		strncpy(gps_data->str_abs_bearing_nearest, str_bearings[(int)(slice+0.5)], 3);
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	c7 01       	movw	r24, r14
    1320:	b6 01       	movw	r22, r12
    1322:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    1326:	0e 94 33 18 	call	0x3066	; 0x3066 <__fixsfsi>
    132a:	fb 01       	movw	r30, r22
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	8c 0f       	add	r24, r28
    1336:	9d 1f       	adc	r25, r29
    1338:	e8 0f       	add	r30, r24
    133a:	f9 1f       	adc	r31, r25
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	43 e0       	ldi	r20, 0x03	; 3
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	c5 01       	movw	r24, r10
    1346:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <strncpy>
	}

	//get the course strings
	slice = gps_data->course/360*16;
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	44 eb       	ldi	r20, 0xB4	; 180
    1350:	53 e4       	ldi	r21, 0x43	; 67
    1352:	f8 01       	movw	r30, r16
    1354:	65 8d       	ldd	r22, Z+29	; 0x1d
    1356:	76 8d       	ldd	r23, Z+30	; 0x1e
    1358:	87 8d       	ldd	r24, Z+31	; 0x1f
    135a:	90 a1       	ldd	r25, Z+32	; 0x20
    135c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    136c:	6b 01       	movw	r12, r22
    136e:	7c 01       	movw	r14, r24

	if ((slice<=0.5)||(slice>=15.5))
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	5f e3       	ldi	r21, 0x3F	; 63
    1378:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    137c:	00 5c       	subi	r16, 0xC0	; 192
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	18 16       	cp	r1, r24
    1382:	54 f4       	brge	.+20     	; 0x1398 <calculate_bearings+0x320>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	48 e7       	ldi	r20, 0x78	; 120
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	c7 01       	movw	r24, r14
    138e:	b6 01       	movw	r22, r12
    1390:	0e 94 c7 19 	call	0x338e	; 0x338e <__gesf2>
    1394:	87 fd       	sbrc	r24, 7
    1396:	03 c0       	rjmp	.+6      	; 0x139e <calculate_bearings+0x326>
	{
		//course is NORTH
		strncpy(gps_data->str_course, str_bearings[0], 3);
    1398:	69 81       	ldd	r22, Y+1	; 0x01
    139a:	7a 81       	ldd	r23, Y+2	; 0x02
    139c:	15 c0       	rjmp	.+42     	; 0x13c8 <calculate_bearings+0x350>
	} else {
		//course fits normal convention
		strncpy(gps_data->str_course, str_bearings[(int)(slice+0.5)], 3);
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	5f e3       	ldi	r21, 0x3F	; 63
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    13ae:	0e 94 33 18 	call	0x3066	; 0x3066 <__fixsfsi>
    13b2:	fb 01       	movw	r30, r22
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	21 e0       	ldi	r18, 0x01	; 1
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	2c 0f       	add	r18, r28
    13be:	3d 1f       	adc	r19, r29
    13c0:	e2 0f       	add	r30, r18
    13c2:	f3 1f       	adc	r31, r19
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	43 e0       	ldi	r20, 0x03	; 3
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	c8 01       	movw	r24, r16
    13ce:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <strncpy>
	}

	return 1;
}
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	e0 96       	adiw	r28, 0x30	; 48
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	af 90       	pop	r10
    13f6:	9f 90       	pop	r9
    13f8:	8f 90       	pop	r8
    13fa:	7f 90       	pop	r7
    13fc:	6f 90       	pop	r6
    13fe:	5f 90       	pop	r5
    1400:	4f 90       	pop	r4
    1402:	08 95       	ret

00001404 <earth_distance>:

//use the haversine fomula to calculate the great-circle distance between two coordinate pairs
float earth_distance(float lat1, float lon1, float lat2, float lon2)
{
    1404:	4f 92       	push	r4
    1406:	5f 92       	push	r5
    1408:	6f 92       	push	r6
    140a:	7f 92       	push	r7
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	60 97       	sbiw	r28, 0x10	; 16
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	2b 01       	movw	r4, r22
    1436:	3c 01       	movw	r6, r24
    1438:	29 87       	std	Y+9, r18	; 0x09
    143a:	3a 87       	std	Y+10, r19	; 0x0a
    143c:	4b 87       	std	Y+11, r20	; 0x0b
    143e:	5c 87       	std	Y+12, r21	; 0x0c
    1440:	e9 82       	std	Y+1, r14	; 0x01
    1442:	fa 82       	std	Y+2, r15	; 0x02
    1444:	0b 83       	std	Y+3, r16	; 0x03
    1446:	1c 83       	std	Y+4, r17	; 0x04
    double R = 6371;

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	c8 01       	movw	r24, r16
    144e:	b7 01       	movw	r22, r14
    1450:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1454:	2b ed       	ldi	r18, 0xDB	; 219
    1456:	3f e0       	ldi	r19, 0x0F	; 15
    1458:	49 e4       	ldi	r20, 0x49	; 73
    145a:	50 e4       	ldi	r21, 0x40	; 64
    145c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	44 e3       	ldi	r20, 0x34	; 52
    1466:	53 e4       	ldi	r21, 0x43	; 67
    1468:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1478:	0e 94 1f 1b 	call	0x363e	; 0x363e <sin>
    147c:	6d 83       	std	Y+5, r22	; 0x05
    147e:	7e 83       	std	Y+6, r23	; 0x06
    1480:	8f 83       	std	Y+7, r24	; 0x07
    1482:	98 87       	std	Y+8, r25	; 0x08
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1484:	2b ed       	ldi	r18, 0xDB	; 219
    1486:	3f e0       	ldi	r19, 0x0F	; 15
    1488:	49 e4       	ldi	r20, 0x49	; 73
    148a:	50 e4       	ldi	r21, 0x40	; 64
    148c:	c3 01       	movw	r24, r6
    148e:	b2 01       	movw	r22, r4
    1490:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	44 e3       	ldi	r20, 0x34	; 52
    149a:	53 e4       	ldi	r21, 0x43	; 67
    149c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    14a0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <cos>
    14a4:	2b 01       	movw	r4, r22
    14a6:	3c 01       	movw	r6, r24
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    14a8:	2b ed       	ldi	r18, 0xDB	; 219
    14aa:	3f e0       	ldi	r19, 0x0F	; 15
    14ac:	49 e4       	ldi	r20, 0x49	; 73
    14ae:	50 e4       	ldi	r21, 0x40	; 64
    14b0:	c8 01       	movw	r24, r16
    14b2:	b7 01       	movw	r22, r14
    14b4:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	44 e3       	ldi	r20, 0x34	; 52
    14be:	53 e4       	ldi	r21, 0x43	; 67
    14c0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    14c4:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <cos>
    14c8:	69 83       	std	Y+1, r22	; 0x01
    14ca:	7a 83       	std	Y+2, r23	; 0x02
    14cc:	8b 83       	std	Y+3, r24	; 0x03
    14ce:	9c 83       	std	Y+4, r25	; 0x04

    double theta1 = to_radians((double)lat1);
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);
    14d0:	29 85       	ldd	r18, Y+9	; 0x09
    14d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    14d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    14d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    14d8:	c6 01       	movw	r24, r12
    14da:	b5 01       	movw	r22, r10
    14dc:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__subsf3>
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    14e0:	2b ed       	ldi	r18, 0xDB	; 219
    14e2:	3f e0       	ldi	r19, 0x0F	; 15
    14e4:	49 e4       	ldi	r20, 0x49	; 73
    14e6:	50 e4       	ldi	r21, 0x40	; 64
    14e8:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	44 e3       	ldi	r20, 0x34	; 52
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
    double theta2 = to_radians((double)lat2);

    double dtheta = to_radians((double)lat2 - (double)lat1);
    double dlambda = to_radians((double)lon2 - (double)lon1);

    double a = sin(dtheta/2)*sin(dtheta/2) + cos(theta1)*cos(theta2)*sin(dlambda/2)*sin(dlambda/2);
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1504:	0e 94 1f 1b 	call	0x363e	; 0x363e <sin>
    1508:	4b 01       	movw	r8, r22
    150a:	5c 01       	movw	r10, r24
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	4f 81       	ldd	r20, Y+7	; 0x07
    1512:	58 85       	ldd	r21, Y+8	; 0x08
    1514:	ca 01       	movw	r24, r20
    1516:	b9 01       	movw	r22, r18
    1518:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    151c:	6b 01       	movw	r12, r22
    151e:	7c 01       	movw	r14, r24
    1520:	29 81       	ldd	r18, Y+1	; 0x01
    1522:	3a 81       	ldd	r19, Y+2	; 0x02
    1524:	4b 81       	ldd	r20, Y+3	; 0x03
    1526:	5c 81       	ldd	r21, Y+4	; 0x04
    1528:	c3 01       	movw	r24, r6
    152a:	b2 01       	movw	r22, r4
    152c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1530:	a5 01       	movw	r20, r10
    1532:	94 01       	movw	r18, r8
    1534:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1538:	a5 01       	movw	r20, r10
    153a:	94 01       	movw	r18, r8
    153c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
    1544:	c7 01       	movw	r24, r14
    1546:	b6 01       	movw	r22, r12
    1548:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    154c:	6b 01       	movw	r12, r22
    154e:	7c 01       	movw	r14, r24
    double c = 2*atan2(sqrt(a), sqrt(1-a));
    1550:	9b 01       	movw	r18, r22
    1552:	ac 01       	movw	r20, r24
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	80 e8       	ldi	r24, 0x80	; 128
    155a:	9f e3       	ldi	r25, 0x3F	; 63
    155c:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__subsf3>
    1560:	0e 94 29 1b 	call	0x3652	; 0x3652 <sqrt>
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
    156c:	2d 87       	std	Y+13, r18	; 0x0d
    156e:	3e 87       	std	Y+14, r19	; 0x0e
    1570:	4f 87       	std	Y+15, r20	; 0x0f
    1572:	58 8b       	std	Y+16, r21	; 0x10
    1574:	0e 94 29 1b 	call	0x3652	; 0x3652 <sqrt>
    1578:	2d 85       	ldd	r18, Y+13	; 0x0d
    157a:	3e 85       	ldd	r19, Y+14	; 0x0e
    157c:	4f 85       	ldd	r20, Y+15	; 0x0f
    157e:	58 89       	ldd	r21, Y+16	; 0x10
    1580:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <atan2>
    1584:	9b 01       	movw	r18, r22
    1586:	ac 01       	movw	r20, r24
    1588:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    double distance = R*c;
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	38 e1       	ldi	r19, 0x18	; 24
    1590:	47 ec       	ldi	r20, 0xC7	; 199
    1592:	55 e4       	ldi	r21, 0x45	; 69
    1594:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>

    return (float)distance;
}
    1598:	60 96       	adiw	r28, 0x10	; 16
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	9f 90       	pop	r9
    15ba:	8f 90       	pop	r8
    15bc:	7f 90       	pop	r7
    15be:	6f 90       	pop	r6
    15c0:	5f 90       	pop	r5
    15c2:	4f 90       	pop	r4
    15c4:	08 95       	ret

000015c6 <get_nearest_station>:

//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(STATION *all_stations, int num_stations, float lat, float lon)
{
    15c6:	2f 92       	push	r2
    15c8:	3f 92       	push	r3
    15ca:	4f 92       	push	r4
    15cc:	5f 92       	push	r5
    15ce:	6f 92       	push	r6
    15d0:	7f 92       	push	r7
    15d2:	8f 92       	push	r8
    15d4:	9f 92       	push	r9
    15d6:	af 92       	push	r10
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	2c 97       	sbiw	r28, 0x0c	; 12
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	7e 83       	std	Y+6, r23	; 0x06
    15fc:	6d 83       	std	Y+5, r22	; 0x05
    15fe:	29 01       	movw	r4, r18
    1600:	3a 01       	movw	r6, r20
    1602:	ef 82       	std	Y+7, r14	; 0x07
    1604:	f8 86       	std	Y+8, r15	; 0x08
    1606:	09 87       	std	Y+9, r16	; 0x09
    1608:	1a 87       	std	Y+10, r17	; 0x0a
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    160e:	1c 86       	std	Y+12, r1	; 0x0c
    1610:	1b 86       	std	Y+11, r1	; 0x0b

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(STATION *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    int station_index = -1, i;
    1612:	2f ef       	ldi	r18, 0xFF	; 255
    1614:	2b 83       	std	Y+3, r18	; 0x03
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	3c 83       	std	Y+4, r19	; 0x04
//---- GEO-POSITIONAL ALGORITHMS ----//

//find the closest station to a lat/lon coordinate pair
int get_nearest_station(STATION *all_stations, int num_stations, float lat, float lon)
{
    float min_dist = -1;
    161a:	21 2c       	mov	r2, r1
    161c:	31 2c       	mov	r3, r1
    161e:	30 e8       	ldi	r19, 0x80	; 128
    1620:	83 2e       	mov	r8, r19
    1622:	4f eb       	ldi	r20, 0xBF	; 191
    1624:	94 2e       	mov	r9, r20
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1626:	8b 85       	ldd	r24, Y+11	; 0x0b
    1628:	9c 85       	ldd	r25, Y+12	; 0x0c
    162a:	ed 81       	ldd	r30, Y+5	; 0x05
    162c:	fe 81       	ldd	r31, Y+6	; 0x06
    162e:	8e 17       	cp	r24, r30
    1630:	9f 07       	cpc	r25, r31
    1632:	f4 f5       	brge	.+124    	; 0x16b0 <get_nearest_station+0xea>
    {
        float temp = earth_distance(lat, lon, all_stations[i].lat, all_stations[i].lon);
    1634:	e9 81       	ldd	r30, Y+1	; 0x01
    1636:	fa 81       	ldd	r31, Y+2	; 0x02
    1638:	a0 88       	ldd	r10, Z+16	; 0x10
    163a:	b1 88       	ldd	r11, Z+17	; 0x11
    163c:	c2 88       	ldd	r12, Z+18	; 0x12
    163e:	d3 88       	ldd	r13, Z+19	; 0x13
    1640:	e4 84       	ldd	r14, Z+12	; 0x0c
    1642:	f5 84       	ldd	r15, Z+13	; 0x0d
    1644:	06 85       	ldd	r16, Z+14	; 0x0e
    1646:	17 85       	ldd	r17, Z+15	; 0x0f
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
    164a:	38 85       	ldd	r19, Y+8	; 0x08
    164c:	49 85       	ldd	r20, Y+9	; 0x09
    164e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1650:	c3 01       	movw	r24, r6
    1652:	b2 01       	movw	r22, r4
    1654:	0e 94 02 0a 	call	0x1404	; 0x1404 <earth_distance>
    1658:	7b 01       	movw	r14, r22
    165a:	8c 01       	movw	r16, r24
        if ((temp < min_dist)||(min_dist==-1))
    165c:	91 01       	movw	r18, r2
    165e:	a4 01       	movw	r20, r8
    1660:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    1664:	87 fd       	sbrc	r24, 7
    1666:	0d c0       	rjmp	.+26     	; 0x1682 <get_nearest_station+0xbc>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f eb       	ldi	r21, 0xBF	; 191
    1670:	b1 01       	movw	r22, r2
    1672:	c4 01       	movw	r24, r8
    1674:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    1678:	88 23       	and	r24, r24
    167a:	41 f0       	breq	.+16     	; 0x168c <get_nearest_station+0xc6>
    167c:	71 01       	movw	r14, r2
    167e:	84 01       	movw	r16, r8
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <get_nearest_station+0xce>
    1682:	fb 85       	ldd	r31, Y+11	; 0x0b
    1684:	fb 83       	std	Y+3, r31	; 0x03
    1686:	2c 85       	ldd	r18, Y+12	; 0x0c
    1688:	2c 83       	std	Y+4, r18	; 0x04
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <get_nearest_station+0xce>
    168c:	3b 85       	ldd	r19, Y+11	; 0x0b
    168e:	3b 83       	std	Y+3, r19	; 0x03
    1690:	8c 85       	ldd	r24, Y+12	; 0x0c
    1692:	8c 83       	std	Y+4, r24	; 0x04
{
    float min_dist = -1;
    int station_index = -1, i;

    //compute earth distance to all stations --> track min distance
    for (i=0; i<num_stations; i++)
    1694:	eb 85       	ldd	r30, Y+11	; 0x0b
    1696:	fc 85       	ldd	r31, Y+12	; 0x0c
    1698:	31 96       	adiw	r30, 0x01	; 1
    169a:	fc 87       	std	Y+12, r31	; 0x0c
    169c:	eb 87       	std	Y+11, r30	; 0x0b
    169e:	29 81       	ldd	r18, Y+1	; 0x01
    16a0:	3a 81       	ldd	r19, Y+2	; 0x02
    16a2:	24 5e       	subi	r18, 0xE4	; 228
    16a4:	3f 4f       	sbci	r19, 0xFF	; 255
    16a6:	3a 83       	std	Y+2, r19	; 0x02
    16a8:	29 83       	std	Y+1, r18	; 0x01
    16aa:	17 01       	movw	r2, r14
    16ac:	48 01       	movw	r8, r16
    16ae:	bb cf       	rjmp	.-138    	; 0x1626 <get_nearest_station+0x60>
            min_dist = temp;
        }
    }

    return station_index;
}
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	2c 96       	adiw	r28, 0x0c	; 12
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	7f 90       	pop	r7
    16da:	6f 90       	pop	r6
    16dc:	5f 90       	pop	r5
    16de:	4f 90       	pop	r4
    16e0:	3f 90       	pop	r3
    16e2:	2f 90       	pop	r2
    16e4:	08 95       	ret

000016e6 <my_distance_to_station>:

//find the distance from the user to a particular station
float my_distance_to_station(GPS_DATA * gps_data, STATION *all_stations, int station_index)
{
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    return earth_distance(gps_data->lat, gps_data->lon, all_stations[station_index].lat, all_stations[station_index].lon);
    16f6:	ec e1       	ldi	r30, 0x1C	; 28
    16f8:	e4 9f       	mul	r30, r20
    16fa:	90 01       	movw	r18, r0
    16fc:	e5 9f       	mul	r30, r21
    16fe:	30 0d       	add	r19, r0
    1700:	11 24       	eor	r1, r1
    1702:	62 0f       	add	r22, r18
    1704:	73 1f       	adc	r23, r19
    1706:	fb 01       	movw	r30, r22
    1708:	a0 88       	ldd	r10, Z+16	; 0x10
    170a:	b1 88       	ldd	r11, Z+17	; 0x11
    170c:	c2 88       	ldd	r12, Z+18	; 0x12
    170e:	d3 88       	ldd	r13, Z+19	; 0x13
    1710:	e4 84       	ldd	r14, Z+12	; 0x0c
    1712:	f5 84       	ldd	r15, Z+13	; 0x0d
    1714:	06 85       	ldd	r16, Z+14	; 0x0e
    1716:	17 85       	ldd	r17, Z+15	; 0x0f
    1718:	fc 01       	movw	r30, r24
    171a:	25 89       	ldd	r18, Z+21	; 0x15
    171c:	36 89       	ldd	r19, Z+22	; 0x16
    171e:	47 89       	ldd	r20, Z+23	; 0x17
    1720:	50 8d       	ldd	r21, Z+24	; 0x18
    1722:	61 89       	ldd	r22, Z+17	; 0x11
    1724:	72 89       	ldd	r23, Z+18	; 0x12
    1726:	83 89       	ldd	r24, Z+19	; 0x13
    1728:	94 89       	ldd	r25, Z+20	; 0x14
    172a:	0e 94 02 0a 	call	0x1404	; 0x1404 <earth_distance>
}
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	08 95       	ret

00001740 <to_radians>:
}

//convert an angle from degrees to radians
double to_radians(double decimal_angle)
{
    return (M_PI)*decimal_angle/180;
    1740:	2b ed       	ldi	r18, 0xDB	; 219
    1742:	3f e0       	ldi	r19, 0x0F	; 15
    1744:	49 e4       	ldi	r20, 0x49	; 73
    1746:	50 e4       	ldi	r21, 0x40	; 64
    1748:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	44 e3       	ldi	r20, 0x34	; 52
    1752:	53 e4       	ldi	r21, 0x43	; 67
    1754:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
}
    1758:	08 95       	ret

0000175a <to_degrees>:

//convert an angle from radians to degrees
double to_degrees(double radian_angle)
{
	return 180*radian_angle/(M_PI);
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	44 e3       	ldi	r20, 0x34	; 52
    1760:	53 e4       	ldi	r21, 0x43	; 67
    1762:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    1766:	2b ed       	ldi	r18, 0xDB	; 219
    1768:	3f e0       	ldi	r19, 0x0F	; 15
    176a:	49 e4       	ldi	r20, 0x49	; 73
    176c:	50 e4       	ldi	r21, 0x40	; 64
    176e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__divsf3>
}
    1772:	08 95       	ret

00001774 <gps_locked>:

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
{
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	ec 01       	movw	r28, r24
    177a:	fc 01       	movw	r30, r24
    int i;
    for (i=0; i<4; i++)
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    {
        if (gps_data->msg_type[i]=='\0')
    1780:	21 91       	ld	r18, Z+
    1782:	22 23       	and	r18, r18
    1784:	69 f1       	breq	.+90     	; 0x17e0 <gps_locked+0x6c>

//make sure there is valid GPS data to work with
int gps_locked(GPS_DATA *gps_data)
{
    int i;
    for (i=0; i<4; i++)
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	91 05       	cpc	r25, r1
    178c:	c9 f7       	brne	.-14     	; 0x1780 <gps_locked+0xc>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fe 01       	movw	r30, r28
    1794:	e8 0f       	add	r30, r24
    1796:	f9 1f       	adc	r31, r25
            return 0;
    }

    for (i=0; i<4; i++)
    {
        if (gps_data->utc_time[i]=='\0')
    1798:	20 85       	ldd	r18, Z+8	; 0x08
    179a:	22 23       	and	r18, r18
    179c:	09 f1       	breq	.+66     	; 0x17e0 <gps_locked+0x6c>
    {
        if (gps_data->msg_type[i]=='\0')
            return 0;
    }

    for (i=0; i<4; i++)
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	91 05       	cpc	r25, r1
    17a4:	b1 f7       	brne	.-20     	; 0x1792 <gps_locked+0x1e>
    {
        if (gps_data->utc_time[i]=='\0')
            return 0;
    }

    if ((gps_data->lat==0)||(gps_data->lon==0))
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	a9 01       	movw	r20, r18
    17ac:	69 89       	ldd	r22, Y+17	; 0x11
    17ae:	7a 89       	ldd	r23, Y+18	; 0x12
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	91 f0       	breq	.+36     	; 0x17e0 <gps_locked+0x6c>
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	6d 89       	ldd	r22, Y+21	; 0x15
    17c4:	7e 89       	ldd	r23, Y+22	; 0x16
    17c6:	8f 89       	ldd	r24, Y+23	; 0x17
    17c8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ca:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	39 f0       	breq	.+14     	; 0x17e0 <gps_locked+0x6c>
        return 0;

    if (gps_data->checksum[0] != '*')
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	2a a9       	ldd	r18, Y+50	; 0x32
    17d8:	2a 32       	cpi	r18, 0x2A	; 42
    17da:	21 f0       	breq	.+8      	; 0x17e4 <gps_locked+0x70>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <gps_locked+0x70>
{
    int i;
    for (i=0; i<4; i++)
    {
        if (gps_data->msg_type[i]=='\0')
            return 0;
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    /*if ((gps_data->course < 0)||(gps_data->course>=360))
    	return 0;*/

    return 1;

    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <my_eeprom_read_int>:
//---- Database Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    17ea:	0e 94 1a 21 	call	0x4234	; 0x4234 <__eerd_byte_m1284p>
    return (temp_num);
}
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	08 95       	ret

000017f2 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
    17f2:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__eerd_byte_m1284p>

000017f6 <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    17f6:	0c 94 22 21 	jmp	0x4244	; 0x4244 <__eerd_dword_m1284p>

000017fa <my_eeprom_read_string>:
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    17fa:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <__eerd_block_m1284p>

000017fe <database_load>:
}

//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	8c 01       	movw	r16, r24
//---- Database Operations ----//

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 1a 21 	call	0x4234	; 0x4234 <__eerd_byte_m1284p>
    1818:	90 e0       	ldi	r25, 0x00	; 0
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
        fm_stations->num_stations = 0;
    181a:	f8 01       	movw	r30, r16
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
    181c:	8f 3f       	cpi	r24, 0xFF	; 255
    181e:	91 05       	cpc	r25, r1
    1820:	19 f0       	breq	.+6      	; 0x1828 <database_load+0x2a>
//load the FM Stations database from EEPROM into program memory
int database_load(DATABASE *fm_stations)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    fm_stations->num_stations = my_eeprom_read_int(0);
    1822:	93 83       	std	Z+3, r25	; 0x03
    1824:	82 83       	std	Z+2, r24	; 0x02
    1826:	02 c0       	rjmp	.+4      	; 0x182c <database_load+0x2e>

    //EEPROM defaults to 255 -- this means no station data in EEPROM
    if (fm_stations->num_stations==255)
        fm_stations->num_stations = 0;
    1828:	13 82       	std	Z+3, r1	; 0x03
    182a:	12 82       	std	Z+2, r1	; 0x02
    182c:	ff e9       	ldi	r31, 0x9F	; 159
    182e:	26 e8       	ldi	r18, 0x86	; 134
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	f1 50       	subi	r31, 0x01	; 1
    1834:	20 40       	sbci	r18, 0x00	; 0
    1836:	40 40       	sbci	r20, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <database_load+0x34>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <database_load+0x3e>
    183c:	00 00       	nop

    _delay_ms(500);
    lcd_init();
    183e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("importing ");
    1842:	81 e3       	ldi	r24, 0x31	; 49
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_int(fm_stations->num_stations,3);
    184a:	63 e0       	ldi	r22, 0x03	; 3
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	f8 01       	movw	r30, r16
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
    string_write("\nstations...");
    1858:	8c e3       	ldi	r24, 0x3C	; 60
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

    //allocate memory for all the station structures
    fm_stations->all_stations = (STATION *)malloc(fm_stations->num_stations*sizeof(STATION));
    1860:	f8 01       	movw	r30, r16
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	2c e1       	ldi	r18, 0x1C	; 28
    1868:	ac 01       	movw	r20, r24
    186a:	24 9f       	mul	r18, r20
    186c:	c0 01       	movw	r24, r0
    186e:	25 9f       	mul	r18, r21
    1870:	90 0d       	add	r25, r0
    1872:	11 24       	eor	r1, r1
    1874:	0e 94 ef 1b 	call	0x37de	; 0x37de <malloc>
    1878:	f8 01       	movw	r30, r16
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
    if (fm_stations->all_stations == NULL)
    187e:	89 2b       	or	r24, r25
    1880:	29 f0       	breq	.+10     	; 0x188c <database_load+0x8e>
    1882:	c0 e0       	ldi	r28, 0x00	; 0
    1884:	d0 e0       	ldi	r29, 0x00	; 0
    1886:	c1 2c       	mov	r12, r1
    1888:	d1 2c       	mov	r13, r1
    188a:	09 c0       	rjmp	.+18     	; 0x189e <database_load+0xa0>
    {
            lcd_init();
    188c:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
            string_write("bad malloc");
    1890:	8f e2       	ldi	r24, 0x2F	; 47
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
            //database failed to load
            return 0;
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	4c c0       	rjmp	.+152    	; 0x1936 <database_load+0x138>
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    189e:	f8 01       	movw	r30, r16
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	c8 16       	cp	r12, r24
    18a6:	d9 06       	cpc	r13, r25
    18a8:	0c f0       	brlt	.+2      	; 0x18ac <database_load+0xae>
    18aa:	43 c0       	rjmp	.+134    	; 0x1932 <database_load+0x134>
    18ac:	be 01       	movw	r22, r28
    18ae:	6f 5f       	subi	r22, 0xFF	; 255
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
    18b2:	f8 01       	movw	r30, r16
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
    18b8:	48 e0       	ldi	r20, 0x08	; 8
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	8c 0f       	add	r24, r28
    18be:	9d 1f       	adc	r25, r29
    18c0:	0e 94 0a 21 	call	0x4214	; 0x4214 <__eerd_block_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    18c4:	f8 01       	movw	r30, r16
    18c6:	e0 80       	ld	r14, Z
    18c8:	f1 80       	ldd	r15, Z+1	; 0x01
    18ca:	ec 0e       	add	r14, r28
    18cc:	fd 1e       	adc	r15, r29
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    18ce:	ce 01       	movw	r24, r28
    18d0:	09 96       	adiw	r24, 0x09	; 9
    18d2:	0e 94 22 21 	call	0x4244	; 0x4244 <__eerd_dword_m1284p>
    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
    18d6:	f7 01       	movw	r30, r14
    18d8:	60 87       	std	Z+8, r22	; 0x08
    18da:	71 87       	std	Z+9, r23	; 0x09
    18dc:	82 87       	std	Z+10, r24	; 0x0a
    18de:	93 87       	std	Z+11, r25	; 0x0b
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    18e0:	ce 01       	movw	r24, r28
    18e2:	0d 96       	adiw	r24, 0x0d	; 13
    18e4:	0e 94 22 21 	call	0x4244	; 0x4244 <__eerd_dword_m1284p>
    for (i=0; i<fm_stations->num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
    18e8:	f7 01       	movw	r30, r14
    18ea:	64 87       	std	Z+12, r22	; 0x0c
    18ec:	75 87       	std	Z+13, r23	; 0x0d
    18ee:	86 87       	std	Z+14, r24	; 0x0e
    18f0:	97 87       	std	Z+15, r25	; 0x0f
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    18f2:	ce 01       	movw	r24, r28
    18f4:	41 96       	adiw	r24, 0x11	; 17
    18f6:	0e 94 22 21 	call	0x4244	; 0x4244 <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
    18fa:	f7 01       	movw	r30, r14
    18fc:	60 8b       	std	Z+16, r22	; 0x10
    18fe:	71 8b       	std	Z+17, r23	; 0x11
    1900:	82 8b       	std	Z+18, r24	; 0x12
    1902:	93 8b       	std	Z+19, r25	; 0x13
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1904:	ce 01       	movw	r24, r28
    1906:	45 96       	adiw	r24, 0x15	; 21
    1908:	0e 94 22 21 	call	0x4244	; 0x4244 <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
    190c:	f7 01       	movw	r30, r14
    190e:	64 8b       	std	Z+20, r22	; 0x14
    1910:	75 8b       	std	Z+21, r23	; 0x15
    1912:	86 8b       	std	Z+22, r24	; 0x16
    1914:	97 8b       	std	Z+23, r25	; 0x17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
    1916:	ce 01       	movw	r24, r28
    1918:	49 96       	adiw	r24, 0x19	; 25
    191a:	0e 94 22 21 	call	0x4244	; 0x4244 <__eerd_dword_m1284p>
        my_eeprom_read_string(fm_stations->all_stations[i].callsign,start,8); start += 8;
        fm_stations->all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    191e:	f7 01       	movw	r30, r14
    1920:	60 8f       	std	Z+24, r22	; 0x18
    1922:	71 8f       	std	Z+25, r23	; 0x19
    1924:	82 8f       	std	Z+26, r24	; 0x1a
    1926:	93 8f       	std	Z+27, r25	; 0x1b
            //database failed to load
            return 0;
    }

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<fm_stations->num_stations; i++)
    1928:	ff ef       	ldi	r31, 0xFF	; 255
    192a:	cf 1a       	sub	r12, r31
    192c:	df 0a       	sbc	r13, r31
    192e:	6c 96       	adiw	r28, 0x1c	; 28
    1930:	b6 cf       	rjmp	.-148    	; 0x189e <database_load+0xa0>
        fm_stations->all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        fm_stations->all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }

    //database loaded successfully
    return 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	cf 90       	pop	r12
    1946:	08 95       	ret

00001948 <database_free>:

//free the FM Stations database from program memory
int database_free(DATABASE *fm_stations)
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24

    free(fm_stations->all_stations);
    194e:	88 81       	ld	r24, Y
    1950:	99 81       	ldd	r25, Y+1	; 0x01
    1952:	0e 94 87 1c 	call	0x390e	; 0x390e <free>
    fm_stations->all_stations = NULL;
    1956:	19 82       	std	Y+1, r1	; 0x01
    1958:	18 82       	st	Y, r1

    return 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the serial Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
    1964:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
    1968:	8c e0       	ldi	r24, 0x0C	; 12
    196a:	80 93 cc 00 	sts	0x00CC, r24

    // Set the GPS Baud Rate.
    UBRR0H = 0;
    196e:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;
    1972:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    1976:	e9 ec       	ldi	r30, 0xC9	; 201
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	88 6d       	ori	r24, 0xD8	; 216
    197e:	80 83       	st	Z, r24
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    1980:	e1 ec       	ldi	r30, 0xC1	; 193
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	88 6d       	ori	r24, 0xD8	; 216
    1988:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
    198a:	e8 ec       	ldi	r30, 0xC8	; 200
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	82 60       	ori	r24, 0x02	; 2
    1992:	80 83       	st	Z, r24
    UCSR0A |= (1 << U2X0 );
    1994:	e0 ec       	ldi	r30, 0xC0	; 192
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	82 60       	ori	r24, 0x02	; 2
    199c:	80 83       	st	Z, r24
    
    // Set the DB Update Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
    199e:	ea ec       	ldi	r30, 0xCA	; 202
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8e 60       	ori	r24, 0x0E	; 14
    19a6:	80 83       	st	Z, r24

    // Set the GPS Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 1
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    19a8:	e2 ec       	ldi	r30, 0xC2	; 194
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	86 60       	ori	r24, 0x06	; 6
    19b0:	80 83       	st	Z, r24
    19b2:	08 95       	ret

000019b4 <InitPCI>:
void InitPCI(void)
{
    //SET UP EXTERNAL INTERRUPT 2

    //trigger external interrupt 2 on falling edge
    EICRA |= (1 << ISC21);
    19b4:	e9 e6       	ldi	r30, 0x69	; 105
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	80 83       	st	Z, r24
    EICRA &= ~(1<<ISC20);
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7e       	andi	r24, 0xEF	; 239
    19c2:	80 83       	st	Z, r24

    //enable external interrupt 2 
    EIMSK |= (1 << INT2);
    19c4:	ea 9a       	sbi	0x1d, 2	; 29

    //set Port B Pin 2 as Input
    DDRB &= ~(1<<PB2);
    19c6:	22 98       	cbi	0x04, 2	; 4
    //enable pull-up resistor
    PORTB |= (1<<PB2);
    19c8:	2a 9a       	sbi	0x05, 2	; 5

    //enable PB0, PB1, PB3 as Outputs
    DDRB |= ((1<<PB0)|(1<<PB1)|(1<<PB3));
    19ca:	84 b1       	in	r24, 0x04	; 4
    19cc:	8b 60       	ori	r24, 0x0B	; 11
    19ce:	84 b9       	out	0x04, r24	; 4

    //turn on the first LED
    PORTB |= (1<<PB0);
    19d0:	28 9a       	sbi	0x05, 0	; 5

    //set normal output compare modes
    //TCCR0A &= ~((1<<COM0A1)|(1<<COM0A0))
    
    //prescale the default clock by /1024
    TCCR0B |= ((1<<CS02)|(1<<CS00));
    19d2:	85 b5       	in	r24, 0x25	; 37
    19d4:	85 60       	ori	r24, 0x05	; 5
    19d6:	85 bd       	out	0x25, r24	; 37
    TCCR0B &= ~(1<<CS01);
    19d8:	85 b5       	in	r24, 0x25	; 37
    19da:	8d 7f       	andi	r24, 0xFD	; 253
    19dc:	85 bd       	out	0x25, r24	; 37

    //set the max internal counter value
    uint8_t debounce_delay = 244/2; //roughly 1/8th of a second
    OCR0A = debounce_delay;
    19de:	8a e7       	ldi	r24, 0x7A	; 122
    19e0:	87 bd       	out	0x27, r24	; 39

    //enable the timer interrupt
    TIMSK0 |= (1<<OCIE0A);
    19e2:	ee e6       	ldi	r30, 0x6E	; 110
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	82 60       	ori	r24, 0x02	; 2
    19ea:	80 83       	st	Z, r24
    19ec:	08 95       	ret

000019ee <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
int prepare_device(volatile DEV_STATE *device)
{
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	ec 01       	movw	r28, r24
    int i, j;
    DDRB = 0xFF;
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	84 b9       	out	0x04, r24	; 4
    cli();
    19fc:	f8 94       	cli

    //Init usart
    InitUSART();
    19fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <InitUSART>

    //Enable Pin Change Interrupts (for the pushbutton)
    InitPCI();
    1a02:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <InitPCI>

    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
    1a06:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
    1a08:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    1a0c:	2f e3       	ldi	r18, 0x3F	; 63
    1a0e:	8d e0       	ldi	r24, 0x0D	; 13
    1a10:	93 e0       	ldi	r25, 0x03	; 3
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	80 40       	sbci	r24, 0x00	; 0
    1a16:	90 40       	sbci	r25, 0x00	; 0
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <prepare_device+0x24>
    1a1a:	00 c0       	rjmp	.+0      	; 0x1a1c <prepare_device+0x2e>
    1a1c:	00 00       	nop
    _delay_ms(1000);

    //choose starting DEV_STATE params
    device->serial_timer = 0;
    1a1e:	18 82       	st	Y, r1
    1a20:	19 82       	std	Y+1, r1	; 0x01
    1a22:	1a 82       	std	Y+2, r1	; 0x02
    1a24:	1b 82       	std	Y+3, r1	; 0x03
    device->updating = 0;
    1a26:	1d 82       	std	Y+5, r1	; 0x05
    1a28:	1c 82       	std	Y+4, r1	; 0x04
    device->eeprom_index = 0;
    1a2a:	1f 82       	std	Y+7, r1	; 0x07
    1a2c:	1e 82       	std	Y+6, r1	; 0x06
    device->op_mode = MD_NORMAL;
    1a2e:	19 86       	std	Y+9, r1	; 0x09
    1a30:	18 86       	std	Y+8, r1	; 0x08
    device->op_mode_prior = MD_NORMAL;
    1a32:	1b 86       	std	Y+11, r1	; 0x0b
    1a34:	1a 86       	std	Y+10, r1	; 0x0a
    device->serialStartChar = '$';
    1a36:	84 e2       	ldi	r24, 0x24	; 36
    1a38:	8c 87       	std	Y+12, r24	; 0x0c
    device->serialEndChar = '^';
    1a3a:	8e e5       	ldi	r24, 0x5E	; 94
    1a3c:	8d 87       	std	Y+13, r24	; 0x0d

    device->rxReadPos = 0;
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e2 57       	subi	r30, 0x72	; 114
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	10 82       	st	Z, r1
    device->rxWritePos = 0;
    1a46:	fe 01       	movw	r30, r28
    1a48:	e1 57       	subi	r30, 0x71	; 113
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	10 82       	st	Z, r1
    device->gps_update_trigger = 0;
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e1 50       	subi	r30, 0x01	; 1
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	11 82       	std	Z+1, r1	; 0x01
    1a56:	10 82       	st	Z, r1
    device->button_pressable = 1;
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ef 5f       	subi	r30, 0xFF	; 255
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24

    for (i=0; i<3; i++)
    {
        device->serial_history[i] = 'K';
    1a66:	fe 01       	movw	r30, r28
    1a68:	e0 57       	subi	r30, 0x70	; 112
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	8b e4       	ldi	r24, 0x4B	; 75
    1a6e:	80 83       	st	Z, r24
    1a70:	fe 01       	movw	r30, r28
    1a72:	ef 56       	subi	r30, 0x6F	; 111
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ee 56       	subi	r30, 0x6E	; 110
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 83       	st	Z, r24
    }

    device->gps_rxCount = 0;
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 56       	subi	r30, 0x6D	; 109
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	11 82       	std	Z+1, r1	; 0x01
    1a88:	10 82       	st	Z, r1

    for (i=0; i<RX_BUFFER_SIZE; i++)
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e8 0f       	add	r30, r24
    1a92:	f9 1f       	adc	r31, r25
    1a94:	16 86       	std	Z+14, r1	; 0x0e
        device->serial_history[i] = 'K';
    }

    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	80 38       	cpi	r24, 0x80	; 128
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	c1 f7       	brne	.-16     	; 0x1a8e <prepare_device+0xa0>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
        device->rxBuffer[i] = '\0';

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
        device->gps_rxBuffer[i] = '\0';
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e8 0f       	add	r30, r24
    1aa6:	f9 1f       	adc	r31, r25
    1aa8:	eb 56       	subi	r30, 0x6B	; 107
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	10 82       	st	Z, r1
    device->gps_rxCount = 0;

    for (i=0; i<RX_BUFFER_SIZE; i++)
        device->rxBuffer[i] = '\0';

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	80 35       	cpi	r24, 0x50	; 80
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	b1 f7       	brne	.-20     	; 0x1aa2 <prepare_device+0xb4>
    1ab6:	00 e0       	ldi	r16, 0x00	; 0
    1ab8:	10 e0       	ldi	r17, 0x00	; 0
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(16*sizeof(char));
    1aba:	80 e1       	ldi	r24, 0x10	; 16
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 ef 1b 	call	0x37de	; 0x37de <malloc>
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	ec 0f       	add	r30, r28
    1aca:	fd 1f       	adc	r31, r29
    1acc:	eb 51       	subi	r30, 0x1B	; 27
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
        if (device->raw_gps_data[i] == NULL)
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	89 2b       	or	r24, r25
    1ada:	49 f4       	brne	.+18     	; 0x1aee <prepare_device+0x100>
        {
            lcd_init();
    1adc:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
            string_write("bad malloc");
    1ae0:	8f e2       	ldi	r24, 0x2F	; 47
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
            return 0;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <prepare_device+0x128>

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    {
        device->raw_gps_data[i] = (char *)malloc(16*sizeof(char));
        if (device->raw_gps_data[i] == NULL)
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
            return 0;
        } else {
            //null out each of the raw gps data strings
            for (j=0; j<GPS_FIELD_LEN; j++)
            {
                device->raw_gps_data[i][j] = '\0';
    1af2:	df 01       	movw	r26, r30
    1af4:	ed 91       	ld	r30, X+
    1af6:	fc 91       	ld	r31, X
    1af8:	11 97       	sbiw	r26, 0x01	; 1
    1afa:	e8 0f       	add	r30, r24
    1afc:	f9 1f       	adc	r31, r25
    1afe:	10 82       	st	Z, r1
            lcd_init();
            string_write("bad malloc");
            return 0;
        } else {
            //null out each of the raw gps data strings
            for (j=0; j<GPS_FIELD_LEN; j++)
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	80 31       	cpi	r24, 0x10	; 16
    1b04:	91 05       	cpc	r25, r1
    1b06:	b1 f7       	brne	.-20     	; 0x1af4 <prepare_device+0x106>

    for (i=0; i<GPS_RX_BUFFER_SIZE; i++)
        device->gps_rxBuffer[i] = '\0';

    //allocate memory for each of the raw_gps_data fields
    for (i=0; i<NUM_GPS_FIELDS; i++)
    1b08:	0f 5f       	subi	r16, 0xFF	; 255
    1b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0c:	0d 30       	cpi	r16, 0x0D	; 13
    1b0e:	11 05       	cpc	r17, r1
    1b10:	a1 f6       	brne	.-88     	; 0x1aba <prepare_device+0xcc>
                device->raw_gps_data[i][j] = '\0';
            }
        }
    }

    return 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <disable_gps>:

void disable_gps(void)
{
    UCSR0B &= ~((1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0));
    1b20:	e1 ec       	ldi	r30, 0xC1	; 193
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	87 72       	andi	r24, 0x27	; 39
    1b28:	80 83       	st	Z, r24
    1b2a:	08 95       	ret

00001b2c <enable_gps>:
}

void enable_gps(void)
{
    UCSR0B |= (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    1b2c:	e1 ec       	ldi	r30, 0xC1	; 193
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 6d       	ori	r24, 0xD8	; 216
    1b34:	80 83       	st	Z, r24
    1b36:	08 95       	ret

00001b38 <detectSerialStart>:

//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(volatile DEV_STATE *device)
{
    1b38:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialStartChar)&&(device->serial_history[1]==device->serialStartChar)&&(device->serial_history[2]==device->serialStartChar))
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	a0 57       	subi	r26, 0x70	; 112
    1b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b40:	9c 91       	ld	r25, X
    1b42:	84 85       	ldd	r24, Z+12	; 0x0c
    1b44:	98 13       	cpse	r25, r24
    1b46:	12 c0       	rjmp	.+36     	; 0x1b6c <detectSerialStart+0x34>
    1b48:	df 01       	movw	r26, r30
    1b4a:	af 56       	subi	r26, 0x6F	; 111
    1b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4e:	9c 91       	ld	r25, X
    1b50:	84 85       	ldd	r24, Z+12	; 0x0c
    1b52:	98 13       	cpse	r25, r24
    1b54:	0b c0       	rjmp	.+22     	; 0x1b6c <detectSerialStart+0x34>
    1b56:	df 01       	movw	r26, r30
    1b58:	ae 56       	subi	r26, 0x6E	; 110
    1b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5c:	3c 91       	ld	r19, X
    1b5e:	24 85       	ldd	r18, Z+12	; 0x0c
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	32 17       	cp	r19, r18
    1b66:	21 f0       	breq	.+8      	; 0x1b70 <detectSerialStart+0x38>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	08 95       	ret
        return 1;
    else
        return 0;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
}
    1b70:	08 95       	ret

00001b72 <detectSerialEnd>:

//catch the serial update end sequence
int detectSerialEnd(volatile DEV_STATE *device)
{
    1b72:	fc 01       	movw	r30, r24
    if ((device->serial_history[0]==device->serialEndChar)&&(device->serial_history[1]==device->serialEndChar)&&(device->serial_history[2]==device->serialEndChar))
    1b74:	dc 01       	movw	r26, r24
    1b76:	a0 57       	subi	r26, 0x70	; 112
    1b78:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7a:	9c 91       	ld	r25, X
    1b7c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b7e:	98 13       	cpse	r25, r24
    1b80:	12 c0       	rjmp	.+36     	; 0x1ba6 <detectSerialEnd+0x34>
    1b82:	df 01       	movw	r26, r30
    1b84:	af 56       	subi	r26, 0x6F	; 111
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	9c 91       	ld	r25, X
    1b8a:	85 85       	ldd	r24, Z+13	; 0x0d
    1b8c:	98 13       	cpse	r25, r24
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <detectSerialEnd+0x34>
    1b90:	df 01       	movw	r26, r30
    1b92:	ae 56       	subi	r26, 0x6E	; 110
    1b94:	bf 4f       	sbci	r27, 0xFF	; 255
    1b96:	3c 91       	ld	r19, X
    1b98:	25 85       	ldd	r18, Z+13	; 0x0d
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	32 17       	cp	r19, r18
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <detectSerialEnd+0x38>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	08 95       	ret
        return 1;
    else
        return 0;
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
}
    1baa:	08 95       	ret

00001bac <getChar>:
//read a char from the serial update buffer
char getChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    
    ret = device->rxBuffer[device->rxReadPos];
    1bac:	fc 01       	movw	r30, r24
    1bae:	e2 57       	subi	r30, 0x72	; 114
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	20 81       	ld	r18, Z
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	a2 0f       	add	r26, r18
    1bb8:	b1 1d       	adc	r27, r1
    1bba:	1e 96       	adiw	r26, 0x0e	; 14
    1bbc:	8c 91       	ld	r24, X
     
    device->rxReadPos++;
    1bbe:	90 81       	ld	r25, Z
    1bc0:	9f 5f       	subi	r25, 0xFF	; 255
    1bc2:	90 83       	st	Z, r25
     
    if(device->rxReadPos >= RX_BUFFER_SIZE)
    1bc4:	90 81       	ld	r25, Z
    1bc6:	97 fd       	sbrc	r25, 7
    {
        device->rxReadPos = 0;
    1bc8:	10 82       	st	Z, r1
    }
    
    return ret;
}
    1bca:	08 95       	ret

00001bcc <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
     
    if(device->rxReadPos != device->rxWritePos)
    1bcc:	fc 01       	movw	r30, r24
    1bce:	e2 57       	subi	r30, 0x72	; 114
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	30 81       	ld	r19, Z
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	a1 57       	subi	r26, 0x71	; 113
    1bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bda:	2c 91       	ld	r18, X
    1bdc:	32 17       	cp	r19, r18
    1bde:	31 f0       	breq	.+12     	; 0x1bec <peekChar+0x20>
    {
        ret = device->rxBuffer[device->rxReadPos];
    1be0:	20 81       	ld	r18, Z
    1be2:	fc 01       	movw	r30, r24
    1be4:	e2 0f       	add	r30, r18
    1be6:	f1 1d       	adc	r31, r1
    1be8:	86 85       	ldd	r24, Z+14	; 0x0e
    1bea:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(volatile DEV_STATE *device)
{
    char ret = '\0';
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = device->rxBuffer[device->rxReadPos];
    }
     
    return ret;
}
    1bee:	08 95       	ret

00001bf0 <terminate_serial>:

//terminate the serial update with a certain status
int terminate_serial(volatile DEV_STATE *device, DATABASE *fm_stations, int flag)
{
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	8b 01       	movw	r16, r22
    1bfc:	ea 01       	movw	r28, r20
    device->op_mode = MD_NORMAL;
    1bfe:	11 86       	std	Z+9, r1	; 0x09
    1c00:	10 86       	std	Z+8, r1	; 0x08
    device->updating = 0;
    1c02:	15 82       	std	Z+5, r1	; 0x05
    1c04:	14 82       	std	Z+4, r1	; 0x04
    device->serial_timer = 0;
    1c06:	10 82       	st	Z, r1
    1c08:	11 82       	std	Z+1, r1	; 0x01
    1c0a:	12 82       	std	Z+2, r1	; 0x02
    1c0c:	13 82       	std	Z+3, r1	; 0x03

    //import the new database
    lcd_init();
    1c0e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>

    if (flag==FL_SUCCESS)
    1c12:	20 97       	sbiw	r28, 0x00	; 0
    1c14:	19 f4       	brne	.+6      	; 0x1c1c <terminate_serial+0x2c>
        string_write("reading\ndatabase ...");
    1c16:	89 e4       	ldi	r24, 0x49	; 73
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <terminate_serial+0x30>
    else
        string_write("ERROR:\ntimeout ...");
    1c1c:	8e e5       	ldi	r24, 0x5E	; 94
    1c1e:	92 e0       	ldi	r25, 0x02	; 2
    1c20:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

    database_load(fm_stations);
    1c24:	c8 01       	movw	r24, r16
    1c26:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <database_load>
    1c2a:	2f e3       	ldi	r18, 0x3F	; 63
    1c2c:	8d e0       	ldi	r24, 0x0D	; 13
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	21 50       	subi	r18, 0x01	; 1
    1c32:	80 40       	sbci	r24, 0x00	; 0
    1c34:	90 40       	sbci	r25, 0x00	; 0
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <terminate_serial+0x40>
    1c38:	00 c0       	rjmp	.+0      	; 0x1c3a <terminate_serial+0x4a>
    1c3a:	00 00       	nop
    _delay_ms(1000);

    if (flag==FL_FAIL)
    1c3c:	21 97       	sbiw	r28, 0x01	; 1
    1c3e:	21 f4       	brne	.+8      	; 0x1c48 <terminate_serial+0x58>
        string_write("\nupdate failed\n");
    1c40:	81 e7       	ldi	r24, 0x71	; 113
    1c42:	92 e0       	ldi	r25, 0x02	; 2
    1c44:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    1c48:	2f e9       	ldi	r18, 0x9F	; 159
    1c4a:	86 e8       	ldi	r24, 0x86	; 134
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	80 40       	sbci	r24, 0x00	; 0
    1c52:	90 40       	sbci	r25, 0x00	; 0
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <terminate_serial+0x5e>
    1c56:	00 c0       	rjmp	.+0      	; 0x1c58 <terminate_serial+0x68>
    1c58:	00 00       	nop

    _delay_ms(500);
    return 1;
}
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <print_eeprom_contents>:



//print the EEPROM contents for an address range
void print_eeprom_contents(volatile DEV_STATE *device, DATABASE *fm_stations, int start_addr, int end_addr)
{
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	7c 01       	movw	r14, r24
    1c76:	8a 01       	movw	r16, r20
    1c78:	e9 01       	movw	r28, r18
    int i=0;
    char one_byte;

    if (end_addr == -1)
    1c7a:	2f 3f       	cpi	r18, 0xFF	; 255
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	38 07       	cpc	r19, r24
    1c80:	51 f4       	brne	.+20     	; 0x1c96 <print_eeprom_contents+0x2e>
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;
    1c82:	fb 01       	movw	r30, r22
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	2c e1       	ldi	r18, 0x1C	; 28
    1c8a:	28 9f       	mul	r18, r24
    1c8c:	e0 01       	movw	r28, r0
    1c8e:	29 9f       	mul	r18, r25
    1c90:	d0 0d       	add	r29, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	21 96       	adiw	r28, 0x01	; 1

    lcd_init();
    1c96:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
    1c9a:	0c 17       	cp	r16, r28
    1c9c:	1d 07       	cpc	r17, r29
    1c9e:	cc f4       	brge	.+50     	; 0x1cd2 <print_eeprom_contents+0x6a>
    {
        if (device->op_mode != device->op_mode_prior) return;
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	20 85       	ldd	r18, Z+8	; 0x08
    1ca4:	31 85       	ldd	r19, Z+9	; 0x09
    1ca6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ca8:	93 85       	ldd	r25, Z+11	; 0x0b
    1caa:	28 17       	cp	r18, r24
    1cac:	39 07       	cpc	r19, r25
    1cae:	89 f4       	brne	.+34     	; 0x1cd2 <print_eeprom_contents+0x6a>
        one_byte = my_eeprom_read_char(i);
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <my_eeprom_read_char>
        if (one_byte == '\0')
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <print_eeprom_contents+0x54>
            one_byte = '?';
    1cba:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    1cbc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    1cc0:	87 ea       	ldi	r24, 0xA7	; 167
    1cc2:	91 e6       	ldi	r25, 0x61	; 97
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <print_eeprom_contents+0x5c>
    1cc8:	00 c0       	rjmp	.+0      	; 0x1cca <print_eeprom_contents+0x62>
    1cca:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+fm_stations->num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
    1ccc:	0f 5f       	subi	r16, 0xFF	; 255
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	e4 cf       	rjmp	.-56     	; 0x1c9a <print_eeprom_contents+0x32>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	08 95       	ret

00001ce0 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    1ce0:	df 92       	push	r13
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	8c 01       	movw	r16, r24
    1cf0:	7b 01       	movw	r14, r22
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*fm_stations->num_stations; i++)
    1cf2:	c0 e0       	ldi	r28, 0x00	; 0
    1cf4:	d0 e0       	ldi	r29, 0x00	; 0
    1cf6:	3c e1       	ldi	r19, 0x1C	; 28
    1cf8:	d3 2e       	mov	r13, r19
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	22 81       	ldd	r18, Z+2	; 0x02
    1cfe:	33 81       	ldd	r19, Z+3	; 0x03
    1d00:	d2 9e       	mul	r13, r18
    1d02:	c0 01       	movw	r24, r0
    1d04:	d3 9e       	mul	r13, r19
    1d06:	90 0d       	add	r25, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	c8 17       	cp	r28, r24
    1d0c:	d9 07       	cpc	r29, r25
    1d0e:	c4 f4       	brge	.+48     	; 0x1d40 <print_eeprom_station_contents+0x60>
    {
        if (device->op_mode != device->op_mode_prior) return;
    1d10:	f8 01       	movw	r30, r16
    1d12:	20 85       	ldd	r18, Z+8	; 0x08
    1d14:	31 85       	ldd	r19, Z+9	; 0x09
    1d16:	82 85       	ldd	r24, Z+10	; 0x0a
    1d18:	93 85       	ldd	r25, Z+11	; 0x0b
    1d1a:	28 17       	cp	r18, r24
    1d1c:	39 07       	cpc	r19, r25
    1d1e:	81 f4       	brne	.+32     	; 0x1d40 <print_eeprom_station_contents+0x60>
        one_byte = my_eeprom_read_char(start+i);
    1d20:	21 96       	adiw	r28, 0x01	; 1
    1d22:	ce 01       	movw	r24, r28
    1d24:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <my_eeprom_read_char>
        if (one_byte == '\0')
    1d28:	81 11       	cpse	r24, r1
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <print_eeprom_station_contents+0x4e>
            one_byte = '?';
    1d2c:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
    1d2e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    1d32:	87 ea       	ldi	r24, 0xA7	; 167
    1d34:	91 e6       	ldi	r25, 0x61	; 97
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <print_eeprom_station_contents+0x56>
    1d3a:	00 c0       	rjmp	.+0      	; 0x1d3c <print_eeprom_station_contents+0x5c>
    1d3c:	00 00       	nop
    1d3e:	dd cf       	rjmp	.-70     	; 0x1cfa <print_eeprom_station_contents+0x1a>
        _delay_ms(100);
    }
}
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	08 95       	ret

00001d50 <wait_for_update>:
    }

}

void wait_for_update(volatile DEV_STATE *device)
{
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	ec 01       	movw	r28, r24
    lcd_init();
    1d56:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("update required\n...feed me...");
    1d5a:	81 e8       	ldi	r24, 0x81	; 129
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    while (1)
    {
        if (device->op_mode != device->op_mode_prior) return;
    1d62:	28 85       	ldd	r18, Y+8	; 0x08
    1d64:	39 85       	ldd	r19, Y+9	; 0x09
    1d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6a:	28 17       	cp	r18, r24
    1d6c:	39 07       	cpc	r19, r25
    1d6e:	c9 f3       	breq	.-14     	; 0x1d62 <wait_for_update+0x12>
    }
}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <print_gps_data>:
    //_delay_ms(2000);
}

//print the formatted data stored in the GPS_DATA struct to the screen
void print_gps_data(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    1d76:	6f 92       	push	r6
    1d78:	7f 92       	push	r7
    1d7a:	8f 92       	push	r8
    1d7c:	9f 92       	push	r9
    1d7e:	af 92       	push	r10
    1d80:	bf 92       	push	r11
    1d82:	cf 92       	push	r12
    1d84:	df 92       	push	r13
    1d86:	ef 92       	push	r14
    1d88:	ff 92       	push	r15
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	7c 01       	movw	r14, r24
    1d94:	eb 01       	movw	r28, r22
    if (device->op_mode != device->op_mode_prior) return;
    1d96:	fc 01       	movw	r30, r24
    1d98:	20 85       	ldd	r18, Z+8	; 0x08
    1d9a:	31 85       	ldd	r19, Z+9	; 0x09
    1d9c:	82 85       	ldd	r24, Z+10	; 0x0a
    1d9e:	93 85       	ldd	r25, Z+11	; 0x0b
    1da0:	28 17       	cp	r18, r24
    1da2:	39 07       	cpc	r19, r25
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <print_gps_data+0x32>
    1da6:	ab c0       	rjmp	.+342    	; 0x1efe <print_gps_data+0x188>
    lcd_init();
    1da8:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Latest\nGPS Data:");
    1dac:	8f e9       	ldi	r24, 0x9F	; 159
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    1db4:	ff e3       	ldi	r31, 0x3F	; 63
    1db6:	2d e0       	ldi	r18, 0x0D	; 13
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	f1 50       	subi	r31, 0x01	; 1
    1dbc:	20 40       	sbci	r18, 0x00	; 0
    1dbe:	80 40       	sbci	r24, 0x00	; 0
    1dc0:	e1 f7       	brne	.-8      	; 0x1dba <print_gps_data+0x44>
    1dc2:	00 c0       	rjmp	.+0      	; 0x1dc4 <print_gps_data+0x4e>
    1dc4:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    1dc6:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    int i=0;
    for (i=0; i<11; i++)
    1dca:	00 e0       	ldi	r16, 0x00	; 0
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
                string_write_numchars(gps_data->msg_type,8);
            break;

            case 1:
                string_write("Time: ");
                string_write_numchars(gps_data->utc_time,8);
    1dce:	3e 01       	movw	r6, r28
    1dd0:	98 e0       	ldi	r25, 0x08	; 8
    1dd2:	69 0e       	add	r6, r25
    1dd4:	71 1c       	adc	r7, r1
                char_write(gps_data->mode);
            break;

            case 10:
                string_write("Checksum: ");
                string_write_numchars(gps_data->checksum,3);
    1dd6:	6e 01       	movw	r12, r28
    1dd8:	e2 e3       	ldi	r30, 0x32	; 50
    1dda:	ce 0e       	add	r12, r30
    1ddc:	d1 1c       	adc	r13, r1
                string_write_numchars(gps_data->date,8);
            break;

            case 8:
                string_write("MagVar: ");
                string_write_numchars(gps_data->mag_var,8);
    1dde:	5e 01       	movw	r10, r28
    1de0:	f9 e2       	ldi	r31, 0x29	; 41
    1de2:	af 0e       	add	r10, r31
    1de4:	b1 1c       	adc	r11, r1
                string_write_float(gps_data->course,1);
            break;

            case 7:
                string_write("Date: ");
                string_write_numchars(gps_data->date,8);
    1de6:	4e 01       	movw	r8, r28
    1de8:	21 e2       	ldi	r18, 0x21	; 33
    1dea:	82 0e       	add	r8, r18
    1dec:	91 1c       	adc	r9, r1
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    {

        if (i>0)
    1dee:	01 15       	cp	r16, r1
    1df0:	11 05       	cpc	r17, r1
    1df2:	69 f0       	breq	.+26     	; 0x1e0e <print_gps_data+0x98>
            string_write("\n");
    1df4:	85 e6       	ldi	r24, 0x65	; 101
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

        switch (i)
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	32 97       	sbiw	r30, 0x02	; 2
    1e00:	e9 30       	cpi	r30, 0x09	; 9
    1e02:	f1 05       	cpc	r31, r1
    1e04:	60 f4       	brcc	.+24     	; 0x1e1e <print_gps_data+0xa8>
    1e06:	e3 5b       	subi	r30, 0xB3	; 179
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__tablejump2__>
        {
            case 0:
                string_write("Message: "); 
    1e0e:	80 eb       	ldi	r24, 0xB0	; 176
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_numchars(gps_data->msg_type,8);
    1e16:	68 e0       	ldi	r22, 0x08	; 8
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	57 c0       	rjmp	.+174    	; 0x1ecc <print_gps_data+0x156>
            break;

            case 1:
                string_write("Time: ");
    1e1e:	8a eb       	ldi	r24, 0xBA	; 186
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_numchars(gps_data->utc_time,8);
    1e26:	68 e0       	ldi	r22, 0x08	; 8
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	c3 01       	movw	r24, r6
    1e2c:	4f c0       	rjmp	.+158    	; 0x1ecc <print_gps_data+0x156>
            break;

            case 2:
                string_write("NRW: ");
    1e2e:	81 ec       	ldi	r24, 0xC1	; 193
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                char_write(gps_data->nrw);
    1e36:	88 89       	ldd	r24, Y+16	; 0x10
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <print_gps_data+0x142>
            break;

            case 3:
                string_write("Lat: ");
    1e3a:	87 ec       	ldi	r24, 0xC7	; 199
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_float(gps_data->lat,4);
    1e42:	69 89       	ldd	r22, Y+17	; 0x11
    1e44:	7a 89       	ldd	r23, Y+18	; 0x12
    1e46:	8b 89       	ldd	r24, Y+19	; 0x13
    1e48:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4a:	08 c0       	rjmp	.+16     	; 0x1e5c <print_gps_data+0xe6>
            break;

            case 4:
                string_write("Lon: ");
    1e4c:	8d ec       	ldi	r24, 0xCD	; 205
    1e4e:	92 e0       	ldi	r25, 0x02	; 2
    1e50:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_float(gps_data->lon,4);
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	44 e0       	ldi	r20, 0x04	; 4
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	13 c0       	rjmp	.+38     	; 0x1e88 <print_gps_data+0x112>
            break;

            case 5:
                string_write("Speed: ");
    1e62:	82 eb       	ldi	r24, 0xB2	; 178
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_float(gps_data->speed,1);
    1e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e72:	08 c0       	rjmp	.+16     	; 0x1e84 <print_gps_data+0x10e>
            break;

            case 6:
                string_write("Course: ");
    1e74:	84 ea       	ldi	r24, 0xA4	; 164
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_float(gps_data->course,1);
    1e7c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e7e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e82:	98 a1       	ldd	r25, Y+32	; 0x20
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    1e8c:	21 c0       	rjmp	.+66     	; 0x1ed0 <print_gps_data+0x15a>
            break;

            case 7:
                string_write("Date: ");
    1e8e:	83 ed       	ldi	r24, 0xD3	; 211
    1e90:	92 e0       	ldi	r25, 0x02	; 2
    1e92:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_numchars(gps_data->date,8);
    1e96:	68 e0       	ldi	r22, 0x08	; 8
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	c4 01       	movw	r24, r8
    1e9c:	17 c0       	rjmp	.+46     	; 0x1ecc <print_gps_data+0x156>
            break;

            case 8:
                string_write("MagVar: ");
    1e9e:	8a ed       	ldi	r24, 0xDA	; 218
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_numchars(gps_data->mag_var,8);
    1ea6:	68 e0       	ldi	r22, 0x08	; 8
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	c5 01       	movw	r24, r10
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <print_gps_data+0x156>
            break;

            case 9:
                string_write("Mode: ");
    1eae:	83 ee       	ldi	r24, 0xE3	; 227
    1eb0:	92 e0       	ldi	r25, 0x02	; 2
    1eb2:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                char_write(gps_data->mode);
    1eb6:	89 a9       	ldd	r24, Y+49	; 0x31
    1eb8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <print_gps_data+0x15a>
            break;

            case 10:
                string_write("Checksum: ");
    1ebe:	8a ee       	ldi	r24, 0xEA	; 234
    1ec0:	92 e0       	ldi	r25, 0x02	; 2
    1ec2:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
                string_write_numchars(gps_data->checksum,3);
    1ec6:	63 e0       	ldi	r22, 0x03	; 3
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	c6 01       	movw	r24, r12
    1ecc:	0e 94 5d 05 	call	0xaba	; 0xaba <string_write_numchars>
    1ed0:	8f e3       	ldi	r24, 0x3F	; 63
    1ed2:	9d e0       	ldi	r25, 0x0D	; 13
    1ed4:	e3 e0       	ldi	r30, 0x03	; 3
    1ed6:	81 50       	subi	r24, 0x01	; 1
    1ed8:	90 40       	sbci	r25, 0x00	; 0
    1eda:	e0 40       	sbci	r30, 0x00	; 0
    1edc:	e1 f7       	brne	.-8      	; 0x1ed6 <print_gps_data+0x160>
    1ede:	00 c0       	rjmp	.+0      	; 0x1ee0 <print_gps_data+0x16a>
    1ee0:	00 00       	nop
            break;
        }

        _delay_ms(1000);
        if (device->op_mode != device->op_mode_prior) return;
    1ee2:	f7 01       	movw	r30, r14
    1ee4:	20 85       	ldd	r18, Z+8	; 0x08
    1ee6:	31 85       	ldd	r19, Z+9	; 0x09
    1ee8:	82 85       	ldd	r24, Z+10	; 0x0a
    1eea:	93 85       	ldd	r25, Z+11	; 0x0b
    1eec:	28 17       	cp	r18, r24
    1eee:	39 07       	cpc	r19, r25
    1ef0:	31 f4       	brne	.+12     	; 0x1efe <print_gps_data+0x188>
    lcd_init();
    string_write("Latest\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<11; i++)
    1ef2:	0f 5f       	subi	r16, 0xFF	; 255
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	0b 30       	cpi	r16, 0x0B	; 11
    1ef8:	11 05       	cpc	r17, r1
    1efa:	09 f0       	breq	.+2      	; 0x1efe <print_gps_data+0x188>
    1efc:	78 cf       	rjmp	.-272    	; 0x1dee <print_gps_data+0x78>
        }

        _delay_ms(1000);
        if (device->op_mode != device->op_mode_prior) return;
    }
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	af 90       	pop	r10
    1f12:	9f 90       	pop	r9
    1f14:	8f 90       	pop	r8
    1f16:	7f 90       	pop	r7
    1f18:	6f 90       	pop	r6
    1f1a:	08 95       	ret

00001f1c <print_gps_data_concise>:

void print_gps_data_concise(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	eb 01       	movw	r28, r22
    int i;
    if (device->op_mode != device->op_mode_prior) return;
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 85       	ldd	r18, Z+8	; 0x08
    1f26:	31 85       	ldd	r19, Z+9	; 0x09
    1f28:	82 85       	ldd	r24, Z+10	; 0x0a
    1f2a:	93 85       	ldd	r25, Z+11	; 0x0b
    1f2c:	28 17       	cp	r18, r24
    1f2e:	39 07       	cpc	r19, r25
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <print_gps_data_concise+0x18>
    1f32:	84 c0       	rjmp	.+264    	; 0x203c <print_gps_data_concise+0x120>

    lcd_init();
    1f34:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Date: ");
    1f38:	83 ed       	ldi	r24, 0xD3	; 211
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_numchars(gps_data->date,8); char_write('\n');
    1f40:	68 e0       	ldi	r22, 0x08	; 8
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	ce 01       	movw	r24, r28
    1f46:	81 96       	adiw	r24, 0x21	; 33
    1f48:	0e 94 5d 05 	call	0xaba	; 0xaba <string_write_numchars>
    1f4c:	8a e0       	ldi	r24, 0x0A	; 10
    1f4e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    string_write("UTC: ");
    1f52:	85 ef       	ldi	r24, 0xF5	; 245
    1f54:	92 e0       	ldi	r25, 0x02	; 2
    1f56:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_numchars(gps_data->utc_time,8);
    1f5a:	68 e0       	ldi	r22, 0x08	; 8
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	ce 01       	movw	r24, r28
    1f60:	08 96       	adiw	r24, 0x08	; 8
    1f62:	0e 94 5d 05 	call	0xaba	; 0xaba <string_write_numchars>
    1f66:	ff eb       	ldi	r31, 0xBF	; 191
    1f68:	27 e2       	ldi	r18, 0x27	; 39
    1f6a:	89 e0       	ldi	r24, 0x09	; 9
    1f6c:	f1 50       	subi	r31, 0x01	; 1
    1f6e:	20 40       	sbci	r18, 0x00	; 0
    1f70:	80 40       	sbci	r24, 0x00	; 0
    1f72:	e1 f7       	brne	.-8      	; 0x1f6c <print_gps_data_concise+0x50>
    1f74:	00 c0       	rjmp	.+0      	; 0x1f76 <print_gps_data_concise+0x5a>
    1f76:	00 00       	nop
    _delay_ms(3000);

    lcd_init();
    1f78:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Lat: ");
    1f7c:	87 ec       	ldi	r24, 0xC7	; 199
    1f7e:	92 e0       	ldi	r25, 0x02	; 2
    1f80:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_float(gps_data->lat,4); char_write('\n');
    1f84:	69 89       	ldd	r22, Y+17	; 0x11
    1f86:	7a 89       	ldd	r23, Y+18	; 0x12
    1f88:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8c:	44 e0       	ldi	r20, 0x04	; 4
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    1f94:	8a e0       	ldi	r24, 0x0A	; 10
    1f96:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    string_write("Lon: ");
    1f9a:	8d ec       	ldi	r24, 0xCD	; 205
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_float(gps_data->lon,4);
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	44 e0       	ldi	r20, 0x04	; 4
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    1fb2:	9f eb       	ldi	r25, 0xBF	; 191
    1fb4:	e7 e2       	ldi	r30, 0x27	; 39
    1fb6:	f9 e0       	ldi	r31, 0x09	; 9
    1fb8:	91 50       	subi	r25, 0x01	; 1
    1fba:	e0 40       	sbci	r30, 0x00	; 0
    1fbc:	f0 40       	sbci	r31, 0x00	; 0
    1fbe:	e1 f7       	brne	.-8      	; 0x1fb8 <print_gps_data_concise+0x9c>
    1fc0:	00 c0       	rjmp	.+0      	; 0x1fc2 <print_gps_data_concise+0xa6>
    1fc2:	00 00       	nop
    _delay_ms(3000);

    lcd_init();
    1fc4:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Course: ");
    1fc8:	84 ea       	ldi	r24, 0xA4	; 164
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_float(gps_data->course,1); string_write(" or ");
    1fd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fd2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1fd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fd6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    1fe0:	8d ea       	ldi	r24, 0xAD	; 173
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

    //write out the abs bearing chars
    for (i=0; i<3; i++)
        char_write(gps_data->str_course[i]);
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e0 5c       	subi	r30, 0xC0	; 192
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ef 5b       	subi	r30, 0xBF	; 191
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2000:	fe 01       	movw	r30, r28
    2002:	ee 5b       	subi	r30, 0xBE	; 190
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    char_write('\n');
    200c:	8a e0       	ldi	r24, 0x0A	; 10
    200e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>

    string_write("Speed: ");
    2012:	82 eb       	ldi	r24, 0xB2	; 178
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_float(gps_data->speed,1);
    201a:	69 8d       	ldd	r22, Y+25	; 0x19
    201c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    202a:	2f eb       	ldi	r18, 0xBF	; 191
    202c:	87 e2       	ldi	r24, 0x27	; 39
    202e:	99 e0       	ldi	r25, 0x09	; 9
    2030:	21 50       	subi	r18, 0x01	; 1
    2032:	80 40       	sbci	r24, 0x00	; 0
    2034:	90 40       	sbci	r25, 0x00	; 0
    2036:	e1 f7       	brne	.-8      	; 0x2030 <print_gps_data_concise+0x114>
    2038:	00 c0       	rjmp	.+0      	; 0x203a <print_gps_data_concise+0x11e>
    203a:	00 00       	nop
    _delay_ms(3000);
}
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	08 95       	ret

00002042 <print_raw_gps_data>:

//print the raw gps data in the gps_data string array to the screen
void print_raw_gps_data(volatile DEV_STATE *device)
{
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	8c 01       	movw	r16, r24
    if (device->op_mode != device->op_mode_prior) return;
    204c:	fc 01       	movw	r30, r24
    204e:	20 85       	ldd	r18, Z+8	; 0x08
    2050:	31 85       	ldd	r19, Z+9	; 0x09
    2052:	82 85       	ldd	r24, Z+10	; 0x0a
    2054:	93 85       	ldd	r25, Z+11	; 0x0b
    2056:	28 17       	cp	r18, r24
    2058:	39 07       	cpc	r19, r25
    205a:	09 f0       	breq	.+2      	; 0x205e <print_raw_gps_data+0x1c>
    205c:	70 c0       	rjmp	.+224    	; 0x213e <print_raw_gps_data+0xfc>
    lcd_init();
    205e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Raw\nGPS Data:");
    2062:	8b ef       	ldi	r24, 0xFB	; 251
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    206a:	ff e3       	ldi	r31, 0x3F	; 63
    206c:	2d e0       	ldi	r18, 0x0D	; 13
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	f1 50       	subi	r31, 0x01	; 1
    2072:	20 40       	sbci	r18, 0x00	; 0
    2074:	80 40       	sbci	r24, 0x00	; 0
    2076:	e1 f7       	brne	.-8      	; 0x2070 <print_raw_gps_data+0x2e>
    2078:	00 c0       	rjmp	.+0      	; 0x207a <print_raw_gps_data+0x38>
    207a:	00 00       	nop
    _delay_ms(1000);
    lcd_init();
    207c:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    int i=0;
    for (i=0; i<13; i++)
    2080:	c0 e0       	ldi	r28, 0x00	; 0
    2082:	d0 e0       	ldi	r29, 0x00	; 0
    {

        if (i>0)
    2084:	20 97       	sbiw	r28, 0x00	; 0
    2086:	69 f0       	breq	.+26     	; 0x20a2 <print_raw_gps_data+0x60>
            string_write("\n");
    2088:	85 e6       	ldi	r24, 0x65	; 101
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

        switch (i)
    2090:	fe 01       	movw	r30, r28
    2092:	32 97       	sbiw	r30, 0x02	; 2
    2094:	eb 30       	cpi	r30, 0x0B	; 11
    2096:	f1 05       	cpc	r31, r1
    2098:	38 f4       	brcc	.+14     	; 0x20a8 <print_raw_gps_data+0x66>
    209a:	ea 5a       	subi	r30, 0xAA	; 170
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__tablejump2__>
        {
            case 0:
                string_write("Message");
    20a2:	89 e0       	ldi	r24, 0x09	; 9
    20a4:	93 e0       	ldi	r25, 0x03	; 3
    20a6:	23 c0       	rjmp	.+70     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 1:
                string_write("Time");
    20a8:	81 e1       	ldi	r24, 0x11	; 17
    20aa:	93 e0       	ldi	r25, 0x03	; 3
    20ac:	20 c0       	rjmp	.+64     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 2:
                string_write("NRW");
    20ae:	86 e1       	ldi	r24, 0x16	; 22
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	1d c0       	rjmp	.+58     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 3:
                string_write("Lat");
    20b4:	8a e1       	ldi	r24, 0x1A	; 26
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	1a c0       	rjmp	.+52     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 4:
                string_write("N/S");
    20ba:	8e e1       	ldi	r24, 0x1E	; 30
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	17 c0       	rjmp	.+46     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 5:
                string_write("Lon");
    20c0:	82 e2       	ldi	r24, 0x22	; 34
    20c2:	93 e0       	ldi	r25, 0x03	; 3
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 6:
                string_write("E/W");
    20c6:	86 e2       	ldi	r24, 0x26	; 38
    20c8:	93 e0       	ldi	r25, 0x03	; 3
    20ca:	11 c0       	rjmp	.+34     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 7:
                string_write("Speed");
    20cc:	8a e2       	ldi	r24, 0x2A	; 42
    20ce:	93 e0       	ldi	r25, 0x03	; 3
    20d0:	0e c0       	rjmp	.+28     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 8:
                string_write("Course");
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	0b c0       	rjmp	.+22     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 9:
                string_write("Date");
    20d8:	87 e3       	ldi	r24, 0x37	; 55
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	08 c0       	rjmp	.+16     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 10:
                string_write("MagVar");
    20de:	8c e3       	ldi	r24, 0x3C	; 60
    20e0:	93 e0       	ldi	r25, 0x03	; 3
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 11:
                string_write("Mode");
    20e4:	83 e4       	ldi	r24, 0x43	; 67
    20e6:	93 e0       	ldi	r25, 0x03	; 3
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <print_raw_gps_data+0xac>
            break;

            case 12:
                string_write("Checksum");
    20ea:	88 e4       	ldi	r24, 0x48	; 72
    20ec:	93 e0       	ldi	r25, 0x03	; 3
    20ee:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
            break;
        }

        string_write(": ");
    20f2:	84 e5       	ldi	r24, 0x54	; 84
    20f4:	94 e0       	ldi	r25, 0x04	; 4
    20f6:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
        string_write(device->raw_gps_data[i]);
    20fa:	ce 01       	movw	r24, r28
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	80 0f       	add	r24, r16
    2102:	91 1f       	adc	r25, r17
    2104:	fc 01       	movw	r30, r24
    2106:	eb 51       	subi	r30, 0x1B	; 27
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2112:	9f e9       	ldi	r25, 0x9F	; 159
    2114:	e6 e8       	ldi	r30, 0x86	; 134
    2116:	f1 e0       	ldi	r31, 0x01	; 1
    2118:	91 50       	subi	r25, 0x01	; 1
    211a:	e0 40       	sbci	r30, 0x00	; 0
    211c:	f0 40       	sbci	r31, 0x00	; 0
    211e:	e1 f7       	brne	.-8      	; 0x2118 <print_raw_gps_data+0xd6>
    2120:	00 c0       	rjmp	.+0      	; 0x2122 <print_raw_gps_data+0xe0>
    2122:	00 00       	nop

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    2124:	f8 01       	movw	r30, r16
    2126:	20 85       	ldd	r18, Z+8	; 0x08
    2128:	31 85       	ldd	r19, Z+9	; 0x09
    212a:	82 85       	ldd	r24, Z+10	; 0x0a
    212c:	93 85       	ldd	r25, Z+11	; 0x0b
    212e:	28 17       	cp	r18, r24
    2130:	39 07       	cpc	r19, r25
    2132:	29 f4       	brne	.+10     	; 0x213e <print_raw_gps_data+0xfc>
    lcd_init();
    string_write("Raw\nGPS Data:");
    _delay_ms(1000);
    lcd_init();
    int i=0;
    for (i=0; i<13; i++)
    2134:	21 96       	adiw	r28, 0x01	; 1
    2136:	cd 30       	cpi	r28, 0x0D	; 13
    2138:	d1 05       	cpc	r29, r1
    213a:	09 f0       	breq	.+2      	; 0x213e <print_raw_gps_data+0xfc>
    213c:	a3 cf       	rjmp	.-186    	; 0x2084 <print_raw_gps_data+0x42>
        string_write(device->raw_gps_data[i]);

        _delay_ms(500);
        if (device->op_mode != device->op_mode_prior) return;
    }
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	08 95       	ret

00002148 <wipe_eeprom>:
        return;
}

//wipe 100-stations-worth of EEPROM data
void wipe_eeprom(volatile DEV_STATE *device)
{
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	8c 01       	movw	r16, r24
    int i;
    lcd_init();
    2152:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("wiping \nmemory...");
    2156:	81 e5       	ldi	r24, 0x51	; 81
    2158:	93 e0       	ldi	r25, 0x03	; 3
    215a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    215e:	c0 e0       	ldi	r28, 0x00	; 0
    2160:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (device->op_mode != device->op_mode_prior) return;
    2162:	f8 01       	movw	r30, r16
    2164:	20 85       	ldd	r18, Z+8	; 0x08
    2166:	31 85       	ldd	r19, Z+9	; 0x09
    2168:	82 85       	ldd	r24, Z+10	; 0x0a
    216a:	93 85       	ldd	r25, Z+11	; 0x0b
    216c:	28 17       	cp	r18, r24
    216e:	39 07       	cpc	r19, r25
    2170:	49 f4       	brne	.+18     	; 0x2184 <wipe_eeprom+0x3c>
        eeprom_write_byte((uint8_t *)i,255);
    2172:	6f ef       	ldi	r22, 0xFF	; 255
    2174:	ce 01       	movw	r24, r28
    2176:	0e 94 28 21 	call	0x4250	; 0x4250 <__eewr_byte_m1284p>
void wipe_eeprom(volatile DEV_STATE *device)
{
    int i;
    lcd_init();
    string_write("wiping \nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
    217a:	21 96       	adiw	r28, 0x01	; 1
    217c:	c1 3f       	cpi	r28, 0xF1	; 241
    217e:	fa e0       	ldi	r31, 0x0A	; 10
    2180:	df 07       	cpc	r29, r31
    2182:	79 f7       	brne	.-34     	; 0x2162 <wipe_eeprom+0x1a>
    {
        if (device->op_mode != device->op_mode_prior) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	08 95       	ret

0000218e <print_callsign>:

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    218e:	ef 92       	push	r14
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	8c 01       	movw	r16, r24
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    219c:	8c e1       	ldi	r24, 0x1C	; 28
    219e:	86 9f       	mul	r24, r22
    21a0:	70 01       	movw	r14, r0
    21a2:	87 9f       	mul	r24, r23
    21a4:	f0 0c       	add	r15, r0
    21a6:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    21a8:	c0 e0       	ldi	r28, 0x00	; 0
    21aa:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    21ac:	d8 01       	movw	r26, r16
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	ee 0d       	add	r30, r14
    21b4:	ff 1d       	adc	r31, r15
    21b6:	ec 0f       	add	r30, r28
    21b8:	fd 1f       	adc	r31, r29
    21ba:	80 81       	ld	r24, Z
    21bc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(DATABASE *fm_stations, int station_index)
{
    int i;
    for (i=0; i<8; i++) 
    21c0:	21 96       	adiw	r28, 0x01	; 1
    21c2:	c8 30       	cpi	r28, 0x08	; 8
    21c4:	d1 05       	cpc	r29, r1
    21c6:	91 f7       	brne	.-28     	; 0x21ac <print_callsign+0x1e>
    {
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    }
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	08 95       	ret

000021d6 <print_all_callsigns>:
    }
}

//quickly print all known callsigns to the screen
void print_all_callsigns(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	ec 01       	movw	r28, r24
    21e8:	7b 01       	movw	r14, r22
    if (device->op_mode != device->op_mode_prior) return;
    21ea:	28 85       	ldd	r18, Y+8	; 0x08
    21ec:	39 85       	ldd	r19, Y+9	; 0x09
    21ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	09 f0       	breq	.+2      	; 0x21fa <print_all_callsigns+0x24>
    21f8:	4d c0       	rjmp	.+154    	; 0x2294 <print_all_callsigns+0xbe>
    int i;
    lcd_init();
    21fa:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    21fe:	63 e0       	ldi	r22, 0x03	; 3
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	f7 01       	movw	r30, r14
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
    string_write(" known\nstations");
    220c:	83 e6       	ldi	r24, 0x63	; 99
    220e:	93 e0       	ldi	r25, 0x03	; 3
    2210:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2214:	ff e7       	ldi	r31, 0x7F	; 127
    2216:	2a e1       	ldi	r18, 0x1A	; 26
    2218:	86 e0       	ldi	r24, 0x06	; 6
    221a:	f1 50       	subi	r31, 0x01	; 1
    221c:	20 40       	sbci	r18, 0x00	; 0
    221e:	80 40       	sbci	r24, 0x00	; 0
    2220:	e1 f7       	brne	.-8      	; 0x221a <print_all_callsigns+0x44>
    2222:	00 c0       	rjmp	.+0      	; 0x2224 <print_all_callsigns+0x4e>
    2224:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    2226:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    char_write('\n');
    222a:	8a e0       	ldi	r24, 0x0A	; 10
    222c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>

    for (i=0; i<fm_stations->num_stations; i++)
    2230:	00 e0       	ldi	r16, 0x00	; 0
    2232:	10 e0       	ldi	r17, 0x00	; 0
    2234:	f7 01       	movw	r30, r14
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	08 17       	cp	r16, r24
    223c:	19 07       	cpc	r17, r25
    223e:	54 f5       	brge	.+84     	; 0x2294 <print_all_callsigns+0xbe>
    {
        if (device->op_mode != device->op_mode_prior) return;
    2240:	28 85       	ldd	r18, Y+8	; 0x08
    2242:	39 85       	ldd	r19, Y+9	; 0x09
    2244:	8a 85       	ldd	r24, Y+10	; 0x0a
    2246:	9b 85       	ldd	r25, Y+11	; 0x0b
    2248:	28 17       	cp	r18, r24
    224a:	39 07       	cpc	r19, r25
    224c:	19 f5       	brne	.+70     	; 0x2294 <print_all_callsigns+0xbe>

        char_write('\n'); string_write_int(i+1,3); string_write(": "); print_callsign(fm_stations, i);
    224e:	8a e0       	ldi	r24, 0x0A	; 10
    2250:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2254:	68 01       	movw	r12, r16
    2256:	9f ef       	ldi	r25, 0xFF	; 255
    2258:	c9 1a       	sub	r12, r25
    225a:	d9 0a       	sbc	r13, r25
    225c:	63 e0       	ldi	r22, 0x03	; 3
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	c6 01       	movw	r24, r12
    2262:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
    2266:	84 e5       	ldi	r24, 0x54	; 84
    2268:	94 e0       	ldi	r25, 0x04	; 4
    226a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    226e:	b8 01       	movw	r22, r16
    2270:	c7 01       	movw	r24, r14
    2272:	0e 94 c7 10 	call	0x218e	; 0x218e <print_callsign>

        if (device->op_mode != device->op_mode_prior) return;
    2276:	28 85       	ldd	r18, Y+8	; 0x08
    2278:	39 85       	ldd	r19, Y+9	; 0x09
    227a:	8a 85       	ldd	r24, Y+10	; 0x0a
    227c:	9b 85       	ldd	r25, Y+11	; 0x0b
    227e:	28 17       	cp	r18, r24
    2280:	39 07       	cpc	r19, r25
    2282:	41 f4       	brne	.+16     	; 0x2294 <print_all_callsigns+0xbe>
    2284:	e3 e2       	ldi	r30, 0x23	; 35
    2286:	f4 ef       	ldi	r31, 0xF4	; 244
    2288:	31 97       	sbiw	r30, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <print_all_callsigns+0xb2>
    228c:	00 c0       	rjmp	.+0      	; 0x228e <print_all_callsigns+0xb8>
    228e:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    char_write('\n');

    for (i=0; i<fm_stations->num_stations; i++)
    2290:	86 01       	movw	r16, r12
    2292:	d0 cf       	rjmp	.-96     	; 0x2234 <print_all_callsigns+0x5e>
        if (device->op_mode != device->op_mode_prior) return;

        _delay_ms(250);   
    }

}
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	08 95       	ret

000022a6 <show_nearest_station>:
        if (device->op_mode != device->op_mode_prior) return;
    }
}

void show_nearest_station(volatile DEV_STATE *device, DATABASE *fm_stations, GPS_DATA *gps_data)
{
    22a6:	af 92       	push	r10
    22a8:	bf 92       	push	r11
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	5c 01       	movw	r10, r24
    22bc:	eb 01       	movw	r28, r22
    22be:	6a 01       	movw	r12, r20
    int i;
    if (device->op_mode != device->op_mode_prior) return;
    22c0:	fc 01       	movw	r30, r24
    22c2:	20 85       	ldd	r18, Z+8	; 0x08
    22c4:	31 85       	ldd	r19, Z+9	; 0x09
    22c6:	82 85       	ldd	r24, Z+10	; 0x0a
    22c8:	93 85       	ldd	r25, Z+11	; 0x0b
    22ca:	28 17       	cp	r18, r24
    22cc:	39 07       	cpc	r19, r25
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <show_nearest_station+0x2c>
    22d0:	b2 c0       	rjmp	.+356    	; 0x2436 <show_nearest_station+0x190>
    lcd_init();
    22d2:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Finding Nearest\nStation...");
    22d6:	83 e7       	ldi	r24, 0x73	; 115
    22d8:	93 e0       	ldi	r25, 0x03	; 3
    22da:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    22de:	ff e7       	ldi	r31, 0x7F	; 127
    22e0:	2a e1       	ldi	r18, 0x1A	; 26
    22e2:	86 e0       	ldi	r24, 0x06	; 6
    22e4:	f1 50       	subi	r31, 0x01	; 1
    22e6:	20 40       	sbci	r18, 0x00	; 0
    22e8:	80 40       	sbci	r24, 0x00	; 0
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <show_nearest_station+0x3e>
    22ec:	00 c0       	rjmp	.+0      	; 0x22ee <show_nearest_station+0x48>
    22ee:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    22f0:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>

    fm_stations->nearest_station = get_nearest_station(fm_stations->all_stations, fm_stations->num_stations, gps_data->lat, gps_data->lon);
    22f4:	f6 01       	movw	r30, r12
    22f6:	e5 88       	ldd	r14, Z+21	; 0x15
    22f8:	f6 88       	ldd	r15, Z+22	; 0x16
    22fa:	07 89       	ldd	r16, Z+23	; 0x17
    22fc:	10 8d       	ldd	r17, Z+24	; 0x18
    22fe:	21 89       	ldd	r18, Z+17	; 0x11
    2300:	32 89       	ldd	r19, Z+18	; 0x12
    2302:	43 89       	ldd	r20, Z+19	; 0x13
    2304:	54 89       	ldd	r21, Z+20	; 0x14
    2306:	6a 81       	ldd	r22, Y+2	; 0x02
    2308:	7b 81       	ldd	r23, Y+3	; 0x03
    230a:	88 81       	ld	r24, Y
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <get_nearest_station>
    2312:	9d 83       	std	Y+5, r25	; 0x05
    2314:	8c 83       	std	Y+4, r24	; 0x04

    calculate_bearings(gps_data, fm_stations);
    2316:	be 01       	movw	r22, r28
    2318:	c6 01       	movw	r24, r12
    231a:	0e 94 3c 08 	call	0x1078	; 0x1078 <calculate_bearings>

    print_callsign(fm_stations, fm_stations->nearest_station); string_write("  "); string_write_float(fm_stations->all_stations[fm_stations->nearest_station].freq,1); string_write("\n");
    231e:	6c 81       	ldd	r22, Y+4	; 0x04
    2320:	7d 81       	ldd	r23, Y+5	; 0x05
    2322:	ce 01       	movw	r24, r28
    2324:	0e 94 c7 10 	call	0x218e	; 0x218e <print_callsign>
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	92 e0       	ldi	r25, 0x02	; 2
    232c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2330:	2c 81       	ldd	r18, Y+4	; 0x04
    2332:	3d 81       	ldd	r19, Y+5	; 0x05
    2334:	4c e1       	ldi	r20, 0x1C	; 28
    2336:	42 9f       	mul	r20, r18
    2338:	c0 01       	movw	r24, r0
    233a:	43 9f       	mul	r20, r19
    233c:	90 0d       	add	r25, r0
    233e:	11 24       	eor	r1, r1
    2340:	e8 81       	ld	r30, Y
    2342:	f9 81       	ldd	r31, Y+1	; 0x01
    2344:	e8 0f       	add	r30, r24
    2346:	f9 1f       	adc	r31, r25
    2348:	60 85       	ldd	r22, Z+8	; 0x08
    234a:	71 85       	ldd	r23, Z+9	; 0x09
    234c:	82 85       	ldd	r24, Z+10	; 0x0a
    234e:	93 85       	ldd	r25, Z+11	; 0x0b
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2358:	85 e6       	ldi	r24, 0x65	; 101
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    string_write_float(my_distance_to_station(gps_data, fm_stations->all_stations, fm_stations->nearest_station),1); string_write(" km, ");
    2360:	4c 81       	ldd	r20, Y+4	; 0x04
    2362:	5d 81       	ldd	r21, Y+5	; 0x05
    2364:	68 81       	ld	r22, Y
    2366:	79 81       	ldd	r23, Y+1	; 0x01
    2368:	c6 01       	movw	r24, r12
    236a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <my_distance_to_station>
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2376:	8e e8       	ldi	r24, 0x8E	; 142
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>

    //write out the abs bearing chars
    for (i=0; i<3; i++)
        char_write(gps_data->str_abs_bearing_nearest[i]);
    237e:	f6 01       	movw	r30, r12
    2380:	85 ad       	ldd	r24, Z+61	; 0x3d
    2382:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2386:	f6 01       	movw	r30, r12
    2388:	86 ad       	ldd	r24, Z+62	; 0x3e
    238a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    238e:	f6 01       	movw	r30, r12
    2390:	87 ad       	ldd	r24, Z+63	; 0x3f
    2392:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>

    if (device->op_mode != device->op_mode_prior) return;
    2396:	f5 01       	movw	r30, r10
    2398:	20 85       	ldd	r18, Z+8	; 0x08
    239a:	31 85       	ldd	r19, Z+9	; 0x09
    239c:	82 85       	ldd	r24, Z+10	; 0x0a
    239e:	93 85       	ldd	r25, Z+11	; 0x0b
    23a0:	28 17       	cp	r18, r24
    23a2:	39 07       	cpc	r19, r25
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <show_nearest_station+0x102>
    23a6:	47 c0       	rjmp	.+142    	; 0x2436 <show_nearest_station+0x190>
    23a8:	ff e3       	ldi	r31, 0x3F	; 63
    23aa:	22 e4       	ldi	r18, 0x42	; 66
    23ac:	8f e0       	ldi	r24, 0x0F	; 15
    23ae:	f1 50       	subi	r31, 0x01	; 1
    23b0:	20 40       	sbci	r18, 0x00	; 0
    23b2:	80 40       	sbci	r24, 0x00	; 0
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <show_nearest_station+0x108>
    23b6:	00 c0       	rjmp	.+0      	; 0x23b8 <show_nearest_station+0x112>
    23b8:	00 00       	nop

    _delay_ms(5000);

    if (device->op_mode != device->op_mode_prior) return;
    23ba:	f5 01       	movw	r30, r10
    23bc:	20 85       	ldd	r18, Z+8	; 0x08
    23be:	31 85       	ldd	r19, Z+9	; 0x09
    23c0:	82 85       	ldd	r24, Z+10	; 0x0a
    23c2:	93 85       	ldd	r25, Z+11	; 0x0b
    23c4:	28 17       	cp	r18, r24
    23c6:	39 07       	cpc	r19, r25
    23c8:	b1 f5       	brne	.+108    	; 0x2436 <show_nearest_station+0x190>

    lcd_init();
    23ca:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("A.Bear: "); string_write_float(gps_data->abs_bearing_nearest,1); char_write(DEG_SYMBOL); char_write('\n');
    23ce:	84 e9       	ldi	r24, 0x94	; 148
    23d0:	93 e0       	ldi	r25, 0x03	; 3
    23d2:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    23d6:	f6 01       	movw	r30, r12
    23d8:	65 a9       	ldd	r22, Z+53	; 0x35
    23da:	76 a9       	ldd	r23, Z+54	; 0x36
    23dc:	87 a9       	ldd	r24, Z+55	; 0x37
    23de:	90 ad       	ldd	r25, Z+56	; 0x38
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    23e8:	87 ed       	ldi	r24, 0xD7	; 215
    23ea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    23ee:	8a e0       	ldi	r24, 0x0A	; 10
    23f0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    //string_write("Course: "); string_write_float(gps_data->course,1); char_write(DEG_SYMBOL); char_write('\n');
    string_write("R.Bear: "); string_write_float(gps_data->rel_bearing_nearest,1); char_write(DEG_SYMBOL);
    23f4:	8d e9       	ldi	r24, 0x9D	; 157
    23f6:	93 e0       	ldi	r25, 0x03	; 3
    23f8:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    23fc:	f6 01       	movw	r30, r12
    23fe:	61 ad       	ldd	r22, Z+57	; 0x39
    2400:	72 ad       	ldd	r23, Z+58	; 0x3a
    2402:	83 ad       	ldd	r24, Z+59	; 0x3b
    2404:	94 ad       	ldd	r25, Z+60	; 0x3c
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    240e:	87 ed       	ldi	r24, 0xD7	; 215
    2410:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>

    if (device->op_mode != device->op_mode_prior) return;
    2414:	f5 01       	movw	r30, r10
    2416:	20 85       	ldd	r18, Z+8	; 0x08
    2418:	31 85       	ldd	r19, Z+9	; 0x09
    241a:	82 85       	ldd	r24, Z+10	; 0x0a
    241c:	93 85       	ldd	r25, Z+11	; 0x0b
    241e:	28 17       	cp	r18, r24
    2420:	39 07       	cpc	r19, r25
    2422:	49 f4       	brne	.+18     	; 0x2436 <show_nearest_station+0x190>
    2424:	ff e3       	ldi	r31, 0x3F	; 63
    2426:	22 e4       	ldi	r18, 0x42	; 66
    2428:	8f e0       	ldi	r24, 0x0F	; 15
    242a:	f1 50       	subi	r31, 0x01	; 1
    242c:	20 40       	sbci	r18, 0x00	; 0
    242e:	80 40       	sbci	r24, 0x00	; 0
    2430:	e1 f7       	brne	.-8      	; 0x242a <show_nearest_station+0x184>
    2432:	00 c0       	rjmp	.+0      	; 0x2434 <show_nearest_station+0x18e>
    2434:	00 00       	nop
    _delay_ms(5000);

    //lcd_init();    
    //print_station(device, fm_stations, fm_stations->nearest_station);
    //_delay_ms(2000);
}
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	08 95       	ret

0000244c <print_station>:
    }
}

//print the informatoin held for a single station to the LCD
void print_station(volatile DEV_STATE *device, DATABASE *fm_stations, int index)
{
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	ec 01       	movw	r28, r24
    245e:	8b 01       	movw	r16, r22
    2460:	6a 01       	movw	r12, r20
    string_write_int(index+1,3); string_write(": "); print_callsign(fm_stations, index); _delay_ms(250); string_write("\n"); 
    2462:	63 e0       	ldi	r22, 0x03	; 3
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	ca 01       	movw	r24, r20
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
    246e:	84 e5       	ldi	r24, 0x54	; 84
    2470:	94 e0       	ldi	r25, 0x04	; 4
    2472:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2476:	b6 01       	movw	r22, r12
    2478:	c8 01       	movw	r24, r16
    247a:	0e 94 c7 10 	call	0x218e	; 0x218e <print_callsign>
    247e:	83 e2       	ldi	r24, 0x23	; 35
    2480:	94 ef       	ldi	r25, 0xF4	; 244
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <print_station+0x36>
    2486:	00 c0       	rjmp	.+0      	; 0x2488 <print_station+0x3c>
    2488:	00 00       	nop
    248a:	85 e6       	ldi	r24, 0x65	; 101
    248c:	91 e0       	ldi	r25, 0x01	; 1
    248e:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    if (device->op_mode==MD_UPDATE)
    2492:	88 85       	ldd	r24, Y+8	; 0x08
    2494:	99 85       	ldd	r25, Y+9	; 0x09
    2496:	06 97       	sbiw	r24, 0x06	; 6
    2498:	09 f4       	brne	.+2      	; 0x249c <print_station+0x50>
    249a:	a1 c0       	rjmp	.+322    	; 0x25de <print_station+0x192>
        return;
    string_write("freq: "); string_write_float(fm_stations->all_stations[index].freq,1); _delay_ms(250); string_write("\n");
    249c:	86 ea       	ldi	r24, 0xA6	; 166
    249e:	93 e0       	ldi	r25, 0x03	; 3
    24a0:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    24a4:	8c e1       	ldi	r24, 0x1C	; 28
    24a6:	8c 9d       	mul	r24, r12
    24a8:	70 01       	movw	r14, r0
    24aa:	8d 9d       	mul	r24, r13
    24ac:	f0 0c       	add	r15, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	d8 01       	movw	r26, r16
    24b2:	ed 91       	ld	r30, X+
    24b4:	fc 91       	ld	r31, X
    24b6:	ee 0d       	add	r30, r14
    24b8:	ff 1d       	adc	r31, r15
    24ba:	60 85       	ldd	r22, Z+8	; 0x08
    24bc:	71 85       	ldd	r23, Z+9	; 0x09
    24be:	82 85       	ldd	r24, Z+10	; 0x0a
    24c0:	93 85       	ldd	r25, Z+11	; 0x0b
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	50 e0       	ldi	r21, 0x00	; 0
    24c6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    24ca:	83 e2       	ldi	r24, 0x23	; 35
    24cc:	94 ef       	ldi	r25, 0xF4	; 244
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <print_station+0x82>
    24d2:	00 c0       	rjmp	.+0      	; 0x24d4 <print_station+0x88>
    24d4:	00 00       	nop
    24d6:	85 e6       	ldi	r24, 0x65	; 101
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    if (device->op_mode==MD_UPDATE)
    24de:	88 85       	ldd	r24, Y+8	; 0x08
    24e0:	99 85       	ldd	r25, Y+9	; 0x09
    24e2:	06 97       	sbiw	r24, 0x06	; 6
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <print_station+0x9c>
    24e6:	7b c0       	rjmp	.+246    	; 0x25de <print_station+0x192>
        return;
    string_write("lat: "); string_write_float(fm_stations->all_stations[index].lat,4); _delay_ms(250); string_write("\n");
    24e8:	8d ea       	ldi	r24, 0xAD	; 173
    24ea:	93 e0       	ldi	r25, 0x03	; 3
    24ec:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    24f0:	d8 01       	movw	r26, r16
    24f2:	ed 91       	ld	r30, X+
    24f4:	fc 91       	ld	r31, X
    24f6:	ee 0d       	add	r30, r14
    24f8:	ff 1d       	adc	r31, r15
    24fa:	64 85       	ldd	r22, Z+12	; 0x0c
    24fc:	75 85       	ldd	r23, Z+13	; 0x0d
    24fe:	86 85       	ldd	r24, Z+14	; 0x0e
    2500:	97 85       	ldd	r25, Z+15	; 0x0f
    2502:	44 e0       	ldi	r20, 0x04	; 4
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    250a:	83 e2       	ldi	r24, 0x23	; 35
    250c:	94 ef       	ldi	r25, 0xF4	; 244
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <print_station+0xc2>
    2512:	00 c0       	rjmp	.+0      	; 0x2514 <print_station+0xc8>
    2514:	00 00       	nop
    2516:	85 e6       	ldi	r24, 0x65	; 101
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    if (device->op_mode==MD_UPDATE)
    251e:	88 85       	ldd	r24, Y+8	; 0x08
    2520:	99 85       	ldd	r25, Y+9	; 0x09
    2522:	06 97       	sbiw	r24, 0x06	; 6
    2524:	09 f4       	brne	.+2      	; 0x2528 <print_station+0xdc>
    2526:	5b c0       	rjmp	.+182    	; 0x25de <print_station+0x192>
        return;
    string_write("lon: "); string_write_float(fm_stations->all_stations[index].lon,4); _delay_ms(250); string_write("\n");
    2528:	83 eb       	ldi	r24, 0xB3	; 179
    252a:	93 e0       	ldi	r25, 0x03	; 3
    252c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2530:	d8 01       	movw	r26, r16
    2532:	ed 91       	ld	r30, X+
    2534:	fc 91       	ld	r31, X
    2536:	ee 0d       	add	r30, r14
    2538:	ff 1d       	adc	r31, r15
    253a:	60 89       	ldd	r22, Z+16	; 0x10
    253c:	71 89       	ldd	r23, Z+17	; 0x11
    253e:	82 89       	ldd	r24, Z+18	; 0x12
    2540:	93 89       	ldd	r25, Z+19	; 0x13
    2542:	44 e0       	ldi	r20, 0x04	; 4
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    254a:	83 e2       	ldi	r24, 0x23	; 35
    254c:	94 ef       	ldi	r25, 0xF4	; 244
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <print_station+0x102>
    2552:	00 c0       	rjmp	.+0      	; 0x2554 <print_station+0x108>
    2554:	00 00       	nop
    2556:	85 e6       	ldi	r24, 0x65	; 101
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    if (device->op_mode==MD_UPDATE)
    255e:	88 85       	ldd	r24, Y+8	; 0x08
    2560:	99 85       	ldd	r25, Y+9	; 0x09
    2562:	06 97       	sbiw	r24, 0x06	; 6
    2564:	e1 f1       	breq	.+120    	; 0x25de <print_station+0x192>
        return;
    string_write("erp: "); string_write_float(fm_stations->all_stations[index].erp,1); _delay_ms(250); string_write("\n");
    2566:	89 eb       	ldi	r24, 0xB9	; 185
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    256e:	d8 01       	movw	r26, r16
    2570:	ed 91       	ld	r30, X+
    2572:	fc 91       	ld	r31, X
    2574:	ee 0d       	add	r30, r14
    2576:	ff 1d       	adc	r31, r15
    2578:	64 89       	ldd	r22, Z+20	; 0x14
    257a:	75 89       	ldd	r23, Z+21	; 0x15
    257c:	86 89       	ldd	r24, Z+22	; 0x16
    257e:	97 89       	ldd	r25, Z+23	; 0x17
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2588:	83 e2       	ldi	r24, 0x23	; 35
    258a:	94 ef       	ldi	r25, 0xF4	; 244
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <print_station+0x140>
    2590:	00 c0       	rjmp	.+0      	; 0x2592 <print_station+0x146>
    2592:	00 00       	nop
    2594:	85 e6       	ldi	r24, 0x65	; 101
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    if (device->op_mode==MD_UPDATE)
    259c:	88 85       	ldd	r24, Y+8	; 0x08
    259e:	99 85       	ldd	r25, Y+9	; 0x09
    25a0:	06 97       	sbiw	r24, 0x06	; 6
    25a2:	e9 f0       	breq	.+58     	; 0x25de <print_station+0x192>
        return;
    string_write("haat: "); string_write_float(fm_stations->all_stations[index].haat,0); _delay_ms(250); string_write("\n");
    25a4:	8f eb       	ldi	r24, 0xBF	; 191
    25a6:	93 e0       	ldi	r25, 0x03	; 3
    25a8:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    25ac:	d8 01       	movw	r26, r16
    25ae:	ed 91       	ld	r30, X+
    25b0:	fc 91       	ld	r31, X
    25b2:	ee 0d       	add	r30, r14
    25b4:	ff 1d       	adc	r31, r15
    25b6:	60 8d       	ldd	r22, Z+24	; 0x18
    25b8:	71 8d       	ldd	r23, Z+25	; 0x19
    25ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    25bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    25c6:	83 e2       	ldi	r24, 0x23	; 35
    25c8:	94 ef       	ldi	r25, 0xF4	; 244
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <print_station+0x17e>
    25ce:	00 c0       	rjmp	.+0      	; 0x25d0 <print_station+0x184>
    25d0:	00 00       	nop
    25d2:	85 e6       	ldi	r24, 0x65	; 101
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    if (device->op_mode==MD_UPDATE)
    25da:	88 85       	ldd	r24, Y+8	; 0x08
    25dc:	99 85       	ldd	r25, Y+9	; 0x09
        return;
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	08 95       	ret

000025f0 <print_all_known_stations>:
    }
}

//print the information held for all stations to the screen
void print_all_known_stations(volatile DEV_STATE *device, DATABASE *fm_stations)
{
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	ec 01       	movw	r28, r24
    25fe:	7b 01       	movw	r14, r22
    if (device->op_mode != device->op_mode_prior) return;
    2600:	28 85       	ldd	r18, Y+8	; 0x08
    2602:	39 85       	ldd	r19, Y+9	; 0x09
    2604:	8a 85       	ldd	r24, Y+10	; 0x0a
    2606:	9b 85       	ldd	r25, Y+11	; 0x0b
    2608:	28 17       	cp	r18, r24
    260a:	39 07       	cpc	r19, r25
    260c:	e1 f5       	brne	.+120    	; 0x2686 <print_all_known_stations+0x96>
    int i;
    lcd_init();
    260e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write_int(fm_stations->num_stations,3);
    2612:	63 e0       	ldi	r22, 0x03	; 3
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	f7 01       	movw	r30, r14
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
    string_write(" known\nstations");
    2620:	83 e6       	ldi	r24, 0x63	; 99
    2622:	93 e0       	ldi	r25, 0x03	; 3
    2624:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2628:	ff e7       	ldi	r31, 0x7F	; 127
    262a:	2a e1       	ldi	r18, 0x1A	; 26
    262c:	86 e0       	ldi	r24, 0x06	; 6
    262e:	f1 50       	subi	r31, 0x01	; 1
    2630:	20 40       	sbci	r18, 0x00	; 0
    2632:	80 40       	sbci	r24, 0x00	; 0
    2634:	e1 f7       	brne	.-8      	; 0x262e <print_all_known_stations+0x3e>
    2636:	00 c0       	rjmp	.+0      	; 0x2638 <print_all_known_stations+0x48>
    2638:	00 00       	nop

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    263a:	00 e0       	ldi	r16, 0x00	; 0
    263c:	10 e0       	ldi	r17, 0x00	; 0
    263e:	f7 01       	movw	r30, r14
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	08 17       	cp	r16, r24
    2646:	19 07       	cpc	r17, r25
    2648:	f4 f4       	brge	.+60     	; 0x2686 <print_all_known_stations+0x96>
    {
        if (device->op_mode != device->op_mode_prior) return;
    264a:	28 85       	ldd	r18, Y+8	; 0x08
    264c:	39 85       	ldd	r19, Y+9	; 0x09
    264e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2650:	9b 85       	ldd	r25, Y+11	; 0x0b
    2652:	28 17       	cp	r18, r24
    2654:	39 07       	cpc	r19, r25
    2656:	b9 f4       	brne	.+46     	; 0x2686 <print_all_known_stations+0x96>

        lcd_init();
    2658:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
        print_station(device, fm_stations, i);
    265c:	a8 01       	movw	r20, r16
    265e:	b7 01       	movw	r22, r14
    2660:	ce 01       	movw	r24, r28
    2662:	0e 94 26 12 	call	0x244c	; 0x244c <print_station>

        if (device->op_mode != device->op_mode_prior) return;
    2666:	28 85       	ldd	r18, Y+8	; 0x08
    2668:	39 85       	ldd	r19, Y+9	; 0x09
    266a:	8a 85       	ldd	r24, Y+10	; 0x0a
    266c:	9b 85       	ldd	r25, Y+11	; 0x0b
    266e:	28 17       	cp	r18, r24
    2670:	39 07       	cpc	r19, r25
    2672:	49 f4       	brne	.+18     	; 0x2686 <print_all_known_stations+0x96>
    2674:	ef e4       	ldi	r30, 0x4F	; 79
    2676:	f3 ec       	ldi	r31, 0xC3	; 195
    2678:	31 97       	sbiw	r30, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <print_all_known_stations+0x88>
    267c:	00 c0       	rjmp	.+0      	; 0x267e <print_all_known_stations+0x8e>
    267e:	00 00       	nop
    string_write_int(fm_stations->num_stations,3);
    string_write(" known\nstations");

    _delay_ms(2000);

    for (i=0; i<fm_stations->num_stations; i++)
    2680:	0f 5f       	subi	r16, 0xFF	; 255
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	dc cf       	rjmp	.-72     	; 0x263e <print_all_known_stations+0x4e>

        if (device->op_mode != device->op_mode_prior) return;

        _delay_ms(200);   
    }
}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	08 95       	ret

00002694 <test_earth_distance>:
        char_write(fm_stations->all_stations[station_index].callsign[i]);
    }
}

void test_earth_distance(void)
{
    2694:	af 92       	push	r10
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    lcd_init();
    26a4:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Calculating\nEarth Distances");
    26a8:	86 ec       	ldi	r24, 0xC6	; 198
    26aa:	93 e0       	ldi	r25, 0x03	; 3
    26ac:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    26b0:	2f e7       	ldi	r18, 0x7F	; 127
    26b2:	8a e1       	ldi	r24, 0x1A	; 26
    26b4:	96 e0       	ldi	r25, 0x06	; 6
    26b6:	21 50       	subi	r18, 0x01	; 1
    26b8:	80 40       	sbci	r24, 0x00	; 0
    26ba:	90 40       	sbci	r25, 0x00	; 0
    26bc:	e1 f7       	brne	.-8      	; 0x26b6 <test_earth_distance+0x22>
    26be:	00 c0       	rjmp	.+0      	; 0x26c0 <test_earth_distance+0x2c>
    26c0:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
    26c2:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Denver -> NYC:\n");
    26c6:	82 ee       	ldi	r24, 0xE2	; 226
    26c8:	93 e0       	ldi	r25, 0x03	; 3
    26ca:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    float lat1 = 40+43/60;
    float lon1 = -1*(74+1/60);
    float lat2 = 39+45/60;
    float lon2 = -1*(104+59/60);
    float distance = earth_distance(lat1, lon1, lat2, lon2);
    26ce:	a1 2c       	mov	r10, r1
    26d0:	b1 2c       	mov	r11, r1
    26d2:	50 ed       	ldi	r21, 0xD0	; 208
    26d4:	c5 2e       	mov	r12, r21
    26d6:	52 ec       	ldi	r21, 0xC2	; 194
    26d8:	d5 2e       	mov	r13, r21
    26da:	e1 2c       	mov	r14, r1
    26dc:	f1 2c       	mov	r15, r1
    26de:	0c e1       	ldi	r16, 0x1C	; 28
    26e0:	12 e4       	ldi	r17, 0x42	; 66
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	44 e9       	ldi	r20, 0x94	; 148
    26e8:	52 ec       	ldi	r21, 0xC2	; 194
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	80 e2       	ldi	r24, 0x20	; 32
    26f0:	92 e4       	ldi	r25, 0x42	; 66
    26f2:	0e 94 02 0a 	call	0x1404	; 0x1404 <earth_distance>
    //should be about 2625 km
    string_write_float(distance,1); string_write(" km");
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    26fe:	82 ef       	ldi	r24, 0xF2	; 242
    2700:	93 e0       	ldi	r25, 0x03	; 3
    2702:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2706:	2f e1       	ldi	r18, 0x1F	; 31
    2708:	81 ea       	ldi	r24, 0xA1	; 161
    270a:	97 e0       	ldi	r25, 0x07	; 7
    270c:	21 50       	subi	r18, 0x01	; 1
    270e:	80 40       	sbci	r24, 0x00	; 0
    2710:	90 40       	sbci	r25, 0x00	; 0
    2712:	e1 f7       	brne	.-8      	; 0x270c <test_earth_distance+0x78>
    2714:	00 c0       	rjmp	.+0      	; 0x2716 <test_earth_distance+0x82>
    2716:	00 00       	nop
    _delay_ms(2500);

    lcd_init();
    2718:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("North KC -> KC:\n");
    271c:	86 ef       	ldi	r24, 0xF6	; 246
    271e:	93 e0       	ldi	r25, 0x03	; 3
    2720:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    lat1 = 39.131;
    lon1 = -94.563;
    lat2 = 39.0832;
    lon2 = -94.559;
    distance = earth_distance(lat1, lon1, lat2, lon2);
    2724:	75 e3       	ldi	r23, 0x35	; 53
    2726:	a7 2e       	mov	r10, r23
    2728:	7e e1       	ldi	r23, 0x1E	; 30
    272a:	b7 2e       	mov	r11, r23
    272c:	7d eb       	ldi	r23, 0xBD	; 189
    272e:	c7 2e       	mov	r12, r23
    2730:	72 ec       	ldi	r23, 0xC2	; 194
    2732:	d7 2e       	mov	r13, r23
    2734:	12 e3       	ldi	r17, 0x32	; 50
    2736:	e1 2e       	mov	r14, r17
    2738:	15 e5       	ldi	r17, 0x55	; 85
    273a:	f1 2e       	mov	r15, r17
    273c:	0c e1       	ldi	r16, 0x1C	; 28
    273e:	12 e4       	ldi	r17, 0x42	; 66
    2740:	22 e4       	ldi	r18, 0x42	; 66
    2742:	30 e2       	ldi	r19, 0x20	; 32
    2744:	4d eb       	ldi	r20, 0xBD	; 189
    2746:	52 ec       	ldi	r21, 0xC2	; 194
    2748:	65 e2       	ldi	r22, 0x25	; 37
    274a:	76 e8       	ldi	r23, 0x86	; 134
    274c:	8c e1       	ldi	r24, 0x1C	; 28
    274e:	92 e4       	ldi	r25, 0x42	; 66
    2750:	0e 94 02 0a 	call	0x1404	; 0x1404 <earth_distance>
    //should be somewhere around 5 km
    string_write_float(distance,1); string_write(" km");
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    275c:	82 ef       	ldi	r24, 0xF2	; 242
    275e:	93 e0       	ldi	r25, 0x03	; 3
    2760:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2764:	2f e1       	ldi	r18, 0x1F	; 31
    2766:	81 ea       	ldi	r24, 0xA1	; 161
    2768:	97 e0       	ldi	r25, 0x07	; 7
    276a:	21 50       	subi	r18, 0x01	; 1
    276c:	80 40       	sbci	r24, 0x00	; 0
    276e:	90 40       	sbci	r25, 0x00	; 0
    2770:	e1 f7       	brne	.-8      	; 0x276a <test_earth_distance+0xd6>
    2772:	00 c0       	rjmp	.+0      	; 0x2774 <test_earth_distance+0xe0>
    2774:	00 00       	nop
    _delay_ms(2500);

    //just for reference, UMaine coords are: 44.900 -68.667
}
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	bf 90       	pop	r11
    2784:	af 90       	pop	r10
    2786:	08 95       	ret

00002788 <wait_for_gps_lock>:

void wait_for_gps_lock(volatile DEV_STATE *device, GPS_DATA *gps_data)
{
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	ec 01       	movw	r28, r24
    2792:	8b 01       	movw	r16, r22
    lcd_init();
    2794:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    string_write("Waiting For\nGPS Lock...");
    2798:	87 e0       	ldi	r24, 0x07	; 7
    279a:	94 e0       	ldi	r25, 0x04	; 4
    279c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    27a0:	2f e3       	ldi	r18, 0x3F	; 63
    27a2:	8d e0       	ldi	r24, 0x0D	; 13
    27a4:	93 e0       	ldi	r25, 0x03	; 3
    27a6:	21 50       	subi	r18, 0x01	; 1
    27a8:	80 40       	sbci	r24, 0x00	; 0
    27aa:	90 40       	sbci	r25, 0x00	; 0
    27ac:	e1 f7       	brne	.-8      	; 0x27a6 <wait_for_gps_lock+0x1e>
    27ae:	00 c0       	rjmp	.+0      	; 0x27b0 <wait_for_gps_lock+0x28>
    27b0:	00 00       	nop
    _delay_ms(1000);
    while (!(gps_locked(gps_data)))
    27b2:	c8 01       	movw	r24, r16
    27b4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <gps_locked>
    27b8:	89 2b       	or	r24, r25
    27ba:	91 f4       	brne	.+36     	; 0x27e0 <wait_for_gps_lock+0x58>
    {
        lcd_init();
    27bc:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
        print_gps_data(device, gps_data);
    27c0:	b8 01       	movw	r22, r16
    27c2:	ce 01       	movw	r24, r28
    27c4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <print_gps_data>
        if (device->op_mode != device->op_mode_prior) return;
    27c8:	28 85       	ldd	r18, Y+8	; 0x08
    27ca:	39 85       	ldd	r19, Y+9	; 0x09
    27cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d0:	28 17       	cp	r18, r24
    27d2:	39 07       	cpc	r19, r25
    27d4:	79 f4       	brne	.+30     	; 0x27f4 <wait_for_gps_lock+0x6c>
    27d6:	83 e2       	ldi	r24, 0x23	; 35
    27d8:	94 ef       	ldi	r25, 0xF4	; 244
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <wait_for_gps_lock+0x52>
    27de:	e7 cf       	rjmp	.-50     	; 0x27ae <wait_for_gps_lock+0x26>
        _delay_ms(250);
    }
    lcd_init();
    27e0:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    print_gps_data(device, gps_data);
    27e4:	b8 01       	movw	r22, r16
    27e6:	ce 01       	movw	r24, r28
}
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
        print_gps_data(device, gps_data);
        if (device->op_mode != device->op_mode_prior) return;
        _delay_ms(250);
    }
    lcd_init();
    print_gps_data(device, gps_data);
    27f0:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <print_gps_data>
}
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <check_database_integrity>:
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	ec 01       	movw	r28, r24
    280c:	6a 81       	ldd	r22, Y+2	; 0x02
    280e:	7b 81       	ldd	r23, Y+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	00 e0       	ldi	r16, 0x00	; 0
    2816:	10 e0       	ldi	r17, 0x00	; 0
    2818:	06 17       	cp	r16, r22
    281a:	17 07       	cpc	r17, r23
    281c:	0c f0       	brlt	.+2      	; 0x2820 <check_database_integrity+0x22>
    281e:	71 c0       	rjmp	.+226    	; 0x2902 <check_database_integrity+0x104>
    2820:	88 81       	ld	r24, Y
    2822:	99 81       	ldd	r25, Y+1	; 0x01
    2824:	82 0f       	add	r24, r18
    2826:	93 1f       	adc	r25, r19
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	7c 01       	movw	r14, r24
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	d7 01       	movw	r26, r14
    2832:	ec 91       	ld	r30, X
    2834:	e0 52       	subi	r30, 0x20	; 32
    2836:	ef 35       	cpi	r30, 0x5F	; 95
    2838:	08 f4       	brcc	.+2      	; 0x283c <check_database_integrity+0x3e>
    283a:	58 c0       	rjmp	.+176    	; 0x28ec <check_database_integrity+0xee>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9f 83       	std	Y+7, r25	; 0x07
    2842:	8e 83       	std	Y+6, r24	; 0x06
    2844:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2848:	8f e1       	ldi	r24, 0x1F	; 31
    284a:	94 e0       	ldi	r25, 0x04	; 4
    284c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2850:	bf e7       	ldi	r27, 0x7F	; 127
    2852:	ea e1       	ldi	r30, 0x1A	; 26
    2854:	f6 e0       	ldi	r31, 0x06	; 6
    2856:	b1 50       	subi	r27, 0x01	; 1
    2858:	e0 40       	sbci	r30, 0x00	; 0
    285a:	f0 40       	sbci	r31, 0x00	; 0
    285c:	e1 f7       	brne	.-8      	; 0x2856 <check_database_integrity+0x58>
    285e:	00 c0       	rjmp	.+0      	; 0x2860 <check_database_integrity+0x62>
    2860:	00 00       	nop
    2862:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2866:	83 e3       	ldi	r24, 0x33	; 51
    2868:	94 e0       	ldi	r25, 0x04	; 4
    286a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    286e:	2f e9       	ldi	r18, 0x9F	; 159
    2870:	86 e8       	ldi	r24, 0x86	; 134
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	21 50       	subi	r18, 0x01	; 1
    2876:	80 40       	sbci	r24, 0x00	; 0
    2878:	90 40       	sbci	r25, 0x00	; 0
    287a:	e1 f7       	brne	.-8      	; 0x2874 <check_database_integrity+0x76>
    287c:	00 c0       	rjmp	.+0      	; 0x287e <check_database_integrity+0x80>
    287e:	00 00       	nop
    2880:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2884:	89 e4       	ldi	r24, 0x49	; 73
    2886:	94 e0       	ldi	r25, 0x04	; 4
    2888:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    288c:	63 e0       	ldi	r22, 0x03	; 3
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	c8 01       	movw	r24, r16
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	0e 94 b0 04 	call	0x960	; 0x960 <string_write_int>
    2898:	83 e5       	ldi	r24, 0x53	; 83
    289a:	94 e0       	ldi	r25, 0x04	; 4
    289c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    28a0:	87 e2       	ldi	r24, 0x27	; 39
    28a2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    28a6:	d7 01       	movw	r26, r14
    28a8:	8c 91       	ld	r24, X
    28aa:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    28ae:	87 e2       	ldi	r24, 0x27	; 39
    28b0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    28b4:	8a e0       	ldi	r24, 0x0A	; 10
    28b6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    28ba:	bf e7       	ldi	r27, 0x7F	; 127
    28bc:	ea e1       	ldi	r30, 0x1A	; 26
    28be:	f6 e0       	ldi	r31, 0x06	; 6
    28c0:	b1 50       	subi	r27, 0x01	; 1
    28c2:	e0 40       	sbci	r30, 0x00	; 0
    28c4:	f0 40       	sbci	r31, 0x00	; 0
    28c6:	e1 f7       	brne	.-8      	; 0x28c0 <check_database_integrity+0xc2>
    28c8:	00 c0       	rjmp	.+0      	; 0x28ca <check_database_integrity+0xcc>
    28ca:	00 00       	nop
    28cc:	b8 01       	movw	r22, r16
    28ce:	ce 01       	movw	r24, r28
    28d0:	0e 94 c7 10 	call	0x218e	; 0x218e <print_callsign>
    28d4:	2f ef       	ldi	r18, 0xFF	; 255
    28d6:	84 e3       	ldi	r24, 0x34	; 52
    28d8:	9c e0       	ldi	r25, 0x0C	; 12
    28da:	21 50       	subi	r18, 0x01	; 1
    28dc:	80 40       	sbci	r24, 0x00	; 0
    28de:	90 40       	sbci	r25, 0x00	; 0
    28e0:	e1 f7       	brne	.-8      	; 0x28da <check_database_integrity+0xdc>
    28e2:	00 c0       	rjmp	.+0      	; 0x28e4 <check_database_integrity+0xe6>
    28e4:	00 00       	nop
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <check_database_integrity+0x10c>
    28ec:	4f 5f       	subi	r20, 0xFF	; 255
    28ee:	5f 4f       	sbci	r21, 0xFF	; 255
    28f0:	48 30       	cpi	r20, 0x08	; 8
    28f2:	51 05       	cpc	r21, r1
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <check_database_integrity+0xfa>
    28f6:	9a cf       	rjmp	.-204    	; 0x282c <check_database_integrity+0x2e>
    28f8:	0f 5f       	subi	r16, 0xFF	; 255
    28fa:	1f 4f       	sbci	r17, 0xFF	; 255
    28fc:	24 5e       	subi	r18, 0xE4	; 228
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2900:	8b cf       	rjmp	.-234    	; 0x2818 <check_database_integrity+0x1a>
    2902:	1f 82       	std	Y+7, r1	; 0x07
    2904:	1e 82       	std	Y+6, r1	; 0x06
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	08 95       	ret

00002918 <main>:
    2918:	4f 92       	push	r4
    291a:	5f 92       	push	r5
    291c:	6f 92       	push	r6
    291e:	7f 92       	push	r7
    2920:	8f 92       	push	r8
    2922:	9f 92       	push	r9
    2924:	af 92       	push	r10
    2926:	bf 92       	push	r11
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	1f 92       	push	r1
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	83 e0       	ldi	r24, 0x03	; 3
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	0e 94 ef 1b 	call	0x37de	; 0x37de <malloc>
    2946:	90 93 5d 04 	sts	0x045D, r25
    294a:	80 93 5c 04 	sts	0x045C, r24
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	39 f4       	brne	.+14     	; 0x2960 <main+0x48>
    2952:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2956:	8f e2       	ldi	r24, 0x2F	; 47
    2958:	91 e0       	ldi	r25, 0x01	; 1
    295a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    295e:	39 c2       	rjmp	.+1138   	; 0x2dd2 <main+0x4ba>
    2960:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <prepare_device>
    2964:	89 2b       	or	r24, r25
    2966:	09 f4       	brne	.+2      	; 0x296a <main+0x52>
    2968:	34 c2       	rjmp	.+1128   	; 0x2dd2 <main+0x4ba>
    296a:	83 e4       	ldi	r24, 0x43	; 67
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 ef 1b 	call	0x37de	; 0x37de <malloc>
    2972:	2c 01       	movw	r4, r24
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f3       	breq	.-38     	; 0x2952 <main+0x3a>
    2978:	88 e0       	ldi	r24, 0x08	; 8
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 ef 1b 	call	0x37de	; 0x37de <malloc>
    2980:	8c 01       	movw	r16, r24
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	31 f3       	breq	.-52     	; 0x2952 <main+0x3a>
    2986:	8a e3       	ldi	r24, 0x3A	; 58
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    298e:	c8 01       	movw	r24, r16
    2990:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <database_load>
    2994:	2f e3       	ldi	r18, 0x3F	; 63
    2996:	8d e0       	ldi	r24, 0x0D	; 13
    2998:	93 e0       	ldi	r25, 0x03	; 3
    299a:	21 50       	subi	r18, 0x01	; 1
    299c:	80 40       	sbci	r24, 0x00	; 0
    299e:	90 40       	sbci	r25, 0x00	; 0
    29a0:	e1 f7       	brne	.-8      	; 0x299a <main+0x82>
    29a2:	00 c0       	rjmp	.+0      	; 0x29a4 <main+0x8c>
    29a4:	00 00       	nop
    29a6:	85 e0       	ldi	r24, 0x05	; 5
    29a8:	c8 2e       	mov	r12, r24
    29aa:	d1 2c       	mov	r13, r1
    29ac:	32 01       	movw	r6, r4
    29ae:	a0 e4       	ldi	r26, 0x40	; 64
    29b0:	6a 0e       	add	r6, r26
    29b2:	71 1c       	adc	r7, r1
    29b4:	52 01       	movw	r10, r4
    29b6:	b1 e4       	ldi	r27, 0x41	; 65
    29b8:	ab 0e       	add	r10, r27
    29ba:	b1 1c       	adc	r11, r1
    29bc:	42 01       	movw	r8, r4
    29be:	e2 e4       	ldi	r30, 0x42	; 66
    29c0:	8e 0e       	add	r8, r30
    29c2:	91 1c       	adc	r9, r1
    29c4:	a0 91 5c 04 	lds	r26, 0x045C
    29c8:	b0 91 5d 04 	lds	r27, 0x045D
    29cc:	18 96       	adiw	r26, 0x08	; 8
    29ce:	8d 91       	ld	r24, X+
    29d0:	9c 91       	ld	r25, X
    29d2:	19 97       	sbiw	r26, 0x09	; 9
    29d4:	1b 96       	adiw	r26, 0x0b	; 11
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
    29da:	1a 97       	sbiw	r26, 0x0a	; 10
    29dc:	18 96       	adiw	r26, 0x08	; 8
    29de:	8d 91       	ld	r24, X+
    29e0:	9c 91       	ld	r25, X
    29e2:	19 97       	sbiw	r26, 0x09	; 9
    29e4:	87 30       	cpi	r24, 0x07	; 7
    29e6:	91 05       	cpc	r25, r1
    29e8:	88 f7       	brcc	.-30     	; 0x29cc <main+0xb4>
    29ea:	8a 5b       	subi	r24, 0xBA	; 186
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	fc 01       	movw	r30, r24
    29f0:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__tablejump2__>
    29f4:	f8 01       	movw	r30, r16
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	18 16       	cp	r1, r24
    29fc:	19 06       	cpc	r1, r25
    29fe:	2c f0       	brlt	.+10     	; 0x2a0a <main+0xf2>
    2a00:	19 96       	adiw	r26, 0x09	; 9
    2a02:	dc 92       	st	X, r13
    2a04:	ce 92       	st	-X, r12
    2a06:	18 97       	sbiw	r26, 0x08	; 8
    2a08:	dd cf       	rjmp	.-70     	; 0x29c4 <main+0xac>
    2a0a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <enable_gps>
    2a0e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2a12:	8e e4       	ldi	r24, 0x4E	; 78
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2a1a:	ff eb       	ldi	r31, 0xBF	; 191
    2a1c:	27 e2       	ldi	r18, 0x27	; 39
    2a1e:	89 e0       	ldi	r24, 0x09	; 9
    2a20:	f1 50       	subi	r31, 0x01	; 1
    2a22:	20 40       	sbci	r18, 0x00	; 0
    2a24:	80 40       	sbci	r24, 0x00	; 0
    2a26:	e1 f7       	brne	.-8      	; 0x2a20 <main+0x108>
    2a28:	00 c0       	rjmp	.+0      	; 0x2a2a <main+0x112>
    2a2a:	00 00       	nop
    2a2c:	80 91 5c 04 	lds	r24, 0x045C
    2a30:	90 91 5d 04 	lds	r25, 0x045D
    2a34:	fc 01       	movw	r30, r24
    2a36:	e1 50       	subi	r30, 0x01	; 1
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	20 81       	ld	r18, Z
    2a3c:	31 81       	ldd	r19, Z+1	; 0x01
    2a3e:	23 2b       	or	r18, r19
    2a40:	69 f0       	breq	.+26     	; 0x2a5c <main+0x144>
    2a42:	b2 01       	movw	r22, r4
    2a44:	8b 51       	subi	r24, 0x1B	; 27
    2a46:	9f 4f       	sbci	r25, 0xFF	; 255
    2a48:	0e 94 1e 07 	call	0xe3c	; 0xe3c <update_user_gps_data>
    2a4c:	e0 91 5c 04 	lds	r30, 0x045C
    2a50:	f0 91 5d 04 	lds	r31, 0x045D
    2a54:	e1 50       	subi	r30, 0x01	; 1
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	11 82       	std	Z+1, r1	; 0x01
    2a5a:	10 82       	st	Z, r1
    2a5c:	c2 01       	movw	r24, r4
    2a5e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <gps_locked>
    2a62:	89 2b       	or	r24, r25
    2a64:	49 f0       	breq	.+18     	; 0x2a78 <main+0x160>
    2a66:	a2 01       	movw	r20, r4
    2a68:	b8 01       	movw	r22, r16
    2a6a:	80 91 5c 04 	lds	r24, 0x045C
    2a6e:	90 91 5d 04 	lds	r25, 0x045D
    2a72:	0e 94 53 11 	call	0x22a6	; 0x22a6 <show_nearest_station>
    2a76:	a6 cf       	rjmp	.-180    	; 0x29c4 <main+0xac>
    2a78:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2a7c:	88 e5       	ldi	r24, 0x58	; 88
    2a7e:	91 e0       	ldi	r25, 0x01	; 1
    2a80:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2a84:	87 e6       	ldi	r24, 0x67	; 103
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2a8c:	9f e7       	ldi	r25, 0x7F	; 127
    2a8e:	aa e1       	ldi	r26, 0x1A	; 26
    2a90:	b6 e0       	ldi	r27, 0x06	; 6
    2a92:	91 50       	subi	r25, 0x01	; 1
    2a94:	a0 40       	sbci	r26, 0x00	; 0
    2a96:	b0 40       	sbci	r27, 0x00	; 0
    2a98:	e1 f7       	brne	.-8      	; 0x2a92 <main+0x17a>
    2a9a:	ef c0       	rjmp	.+478    	; 0x2c7a <main+0x362>
    2a9c:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2aa0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <enable_gps>
    2aa4:	80 91 5c 04 	lds	r24, 0x045C
    2aa8:	90 91 5d 04 	lds	r25, 0x045D
    2aac:	fc 01       	movw	r30, r24
    2aae:	e1 50       	subi	r30, 0x01	; 1
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	20 81       	ld	r18, Z
    2ab4:	31 81       	ldd	r19, Z+1	; 0x01
    2ab6:	23 2b       	or	r18, r19
    2ab8:	69 f0       	breq	.+26     	; 0x2ad4 <main+0x1bc>
    2aba:	b2 01       	movw	r22, r4
    2abc:	8b 51       	subi	r24, 0x1B	; 27
    2abe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <update_user_gps_data>
    2ac4:	e0 91 5c 04 	lds	r30, 0x045C
    2ac8:	f0 91 5d 04 	lds	r31, 0x045D
    2acc:	e1 50       	subi	r30, 0x01	; 1
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	11 82       	std	Z+1, r1	; 0x01
    2ad2:	10 82       	st	Z, r1
    2ad4:	c2 01       	movw	r24, r4
    2ad6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <gps_locked>
    2ada:	89 2b       	or	r24, r25
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <main+0x1c8>
    2ade:	44 c0       	rjmp	.+136    	; 0x2b68 <main+0x250>
    2ae0:	85 e7       	ldi	r24, 0x75	; 117
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2ae8:	ef e9       	ldi	r30, 0x9F	; 159
    2aea:	f6 e8       	ldi	r31, 0x86	; 134
    2aec:	21 e0       	ldi	r18, 0x01	; 1
    2aee:	e1 50       	subi	r30, 0x01	; 1
    2af0:	f0 40       	sbci	r31, 0x00	; 0
    2af2:	20 40       	sbci	r18, 0x00	; 0
    2af4:	e1 f7       	brne	.-8      	; 0x2aee <main+0x1d6>
    2af6:	00 c0       	rjmp	.+0      	; 0x2af8 <main+0x1e0>
    2af8:	00 00       	nop
    2afa:	d2 01       	movw	r26, r4
    2afc:	51 96       	adiw	r26, 0x11	; 17
    2afe:	6d 91       	ld	r22, X+
    2b00:	7d 91       	ld	r23, X+
    2b02:	8d 91       	ld	r24, X+
    2b04:	9c 91       	ld	r25, X
    2b06:	54 97       	sbiw	r26, 0x14	; 20
    2b08:	43 e0       	ldi	r20, 0x03	; 3
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2b10:	e3 e2       	ldi	r30, 0x23	; 35
    2b12:	f4 ef       	ldi	r31, 0xF4	; 244
    2b14:	31 97       	sbiw	r30, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <main+0x1fc>
    2b18:	00 c0       	rjmp	.+0      	; 0x2b1a <main+0x202>
    2b1a:	00 00       	nop
    2b1c:	81 e9       	ldi	r24, 0x91	; 145
    2b1e:	93 e0       	ldi	r25, 0x03	; 3
    2b20:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2b24:	83 e2       	ldi	r24, 0x23	; 35
    2b26:	94 ef       	ldi	r25, 0xF4	; 244
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <main+0x210>
    2b2c:	00 c0       	rjmp	.+0      	; 0x2b2e <main+0x216>
    2b2e:	00 00       	nop
    2b30:	d2 01       	movw	r26, r4
    2b32:	55 96       	adiw	r26, 0x15	; 21
    2b34:	6d 91       	ld	r22, X+
    2b36:	7d 91       	ld	r23, X+
    2b38:	8d 91       	ld	r24, X+
    2b3a:	9c 91       	ld	r25, X
    2b3c:	58 97       	sbiw	r26, 0x18	; 24
    2b3e:	43 e0       	ldi	r20, 0x03	; 3
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2b46:	bf eb       	ldi	r27, 0xBF	; 191
    2b48:	e7 e2       	ldi	r30, 0x27	; 39
    2b4a:	f9 e0       	ldi	r31, 0x09	; 9
    2b4c:	b1 50       	subi	r27, 0x01	; 1
    2b4e:	e0 40       	sbci	r30, 0x00	; 0
    2b50:	f0 40       	sbci	r31, 0x00	; 0
    2b52:	e1 f7       	brne	.-8      	; 0x2b4c <main+0x234>
    2b54:	00 c0       	rjmp	.+0      	; 0x2b56 <main+0x23e>
    2b56:	00 00       	nop
    2b58:	b2 01       	movw	r22, r4
    2b5a:	80 91 5c 04 	lds	r24, 0x045C
    2b5e:	90 91 5d 04 	lds	r25, 0x045D
    2b62:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <print_gps_data_concise>
    2b66:	2e cf       	rjmp	.-420    	; 0x29c4 <main+0xac>
    2b68:	88 e5       	ldi	r24, 0x58	; 88
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2b70:	87 e6       	ldi	r24, 0x67	; 103
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2b78:	2f e7       	ldi	r18, 0x7F	; 127
    2b7a:	8a e1       	ldi	r24, 0x1A	; 26
    2b7c:	96 e0       	ldi	r25, 0x06	; 6
    2b7e:	21 50       	subi	r18, 0x01	; 1
    2b80:	80 40       	sbci	r24, 0x00	; 0
    2b82:	90 40       	sbci	r25, 0x00	; 0
    2b84:	e1 f7       	brne	.-8      	; 0x2b7e <main+0x266>
    2b86:	00 c0       	rjmp	.+0      	; 0x2b88 <main+0x270>
    2b88:	00 00       	nop
    2b8a:	2b c0       	rjmp	.+86     	; 0x2be2 <main+0x2ca>
    2b8c:	8f e7       	ldi	r24, 0x7F	; 127
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2b94:	af eb       	ldi	r26, 0xBF	; 191
    2b96:	b7 e2       	ldi	r27, 0x27	; 39
    2b98:	e9 e0       	ldi	r30, 0x09	; 9
    2b9a:	a1 50       	subi	r26, 0x01	; 1
    2b9c:	b0 40       	sbci	r27, 0x00	; 0
    2b9e:	e0 40       	sbci	r30, 0x00	; 0
    2ba0:	e1 f7       	brne	.-8      	; 0x2b9a <main+0x282>
    2ba2:	00 c0       	rjmp	.+0      	; 0x2ba4 <main+0x28c>
    2ba4:	00 00       	nop
    2ba6:	b8 01       	movw	r22, r16
    2ba8:	80 91 5c 04 	lds	r24, 0x045C
    2bac:	90 91 5d 04 	lds	r25, 0x045D
    2bb0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <print_all_known_stations>
    2bb4:	07 cf       	rjmp	.-498    	; 0x29c4 <main+0xac>
    2bb6:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2bba:	84 e9       	ldi	r24, 0x94	; 148
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2bc2:	ff eb       	ldi	r31, 0xBF	; 191
    2bc4:	27 e2       	ldi	r18, 0x27	; 39
    2bc6:	89 e0       	ldi	r24, 0x09	; 9
    2bc8:	f1 50       	subi	r31, 0x01	; 1
    2bca:	20 40       	sbci	r18, 0x00	; 0
    2bcc:	80 40       	sbci	r24, 0x00	; 0
    2bce:	e1 f7       	brne	.-8      	; 0x2bc8 <main+0x2b0>
    2bd0:	00 c0       	rjmp	.+0      	; 0x2bd2 <main+0x2ba>
    2bd2:	00 00       	nop
    2bd4:	b2 01       	movw	r22, r4
    2bd6:	80 91 5c 04 	lds	r24, 0x045C
    2bda:	90 91 5d 04 	lds	r25, 0x045D
    2bde:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <print_gps_data>
    2be2:	80 91 5c 04 	lds	r24, 0x045C
    2be6:	90 91 5d 04 	lds	r25, 0x045D
    2bea:	0e 94 21 10 	call	0x2042	; 0x2042 <print_raw_gps_data>
    2bee:	ea ce       	rjmp	.-556    	; 0x29c4 <main+0xac>
    2bf0:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2bf4:	8c e9       	ldi	r24, 0x9C	; 156
    2bf6:	91 e0       	ldi	r25, 0x01	; 1
    2bf8:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2bfc:	9f eb       	ldi	r25, 0xBF	; 191
    2bfe:	a7 e2       	ldi	r26, 0x27	; 39
    2c00:	b9 e0       	ldi	r27, 0x09	; 9
    2c02:	91 50       	subi	r25, 0x01	; 1
    2c04:	a0 40       	sbci	r26, 0x00	; 0
    2c06:	b0 40       	sbci	r27, 0x00	; 0
    2c08:	e1 f7       	brne	.-8      	; 0x2c02 <main+0x2ea>
    2c0a:	00 c0       	rjmp	.+0      	; 0x2c0c <main+0x2f4>
    2c0c:	00 00       	nop
    2c0e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2c12:	84 ea       	ldi	r24, 0xA4	; 164
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2c1a:	f2 01       	movw	r30, r4
    2c1c:	65 8d       	ldd	r22, Z+29	; 0x1d
    2c1e:	76 8d       	ldd	r23, Z+30	; 0x1e
    2c20:	87 8d       	ldd	r24, Z+31	; 0x1f
    2c22:	90 a1       	ldd	r25, Z+32	; 0x20
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2c2c:	8d ea       	ldi	r24, 0xAD	; 173
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2c34:	d3 01       	movw	r26, r6
    2c36:	8c 91       	ld	r24, X
    2c38:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2c3c:	f5 01       	movw	r30, r10
    2c3e:	80 81       	ld	r24, Z
    2c40:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2c44:	d4 01       	movw	r26, r8
    2c46:	8c 91       	ld	r24, X
    2c48:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2c4c:	8a e0       	ldi	r24, 0x0A	; 10
    2c4e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <char_write>
    2c52:	82 eb       	ldi	r24, 0xB2	; 178
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2c5a:	f2 01       	movw	r30, r4
    2c5c:	61 8d       	ldd	r22, Z+25	; 0x19
    2c5e:	72 8d       	ldd	r23, Z+26	; 0x1a
    2c60:	83 8d       	ldd	r24, Z+27	; 0x1b
    2c62:	94 8d       	ldd	r25, Z+28	; 0x1c
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <string_write_float>
    2c6c:	ff eb       	ldi	r31, 0xBF	; 191
    2c6e:	27 e2       	ldi	r18, 0x27	; 39
    2c70:	89 e0       	ldi	r24, 0x09	; 9
    2c72:	f1 50       	subi	r31, 0x01	; 1
    2c74:	20 40       	sbci	r18, 0x00	; 0
    2c76:	80 40       	sbci	r24, 0x00	; 0
    2c78:	e1 f7       	brne	.-8      	; 0x2c72 <main+0x35a>
    2c7a:	00 c0       	rjmp	.+0      	; 0x2c7c <main+0x364>
    2c7c:	00 00       	nop
    2c7e:	a2 ce       	rjmp	.-700    	; 0x29c4 <main+0xac>
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <wait_for_update>
    2c86:	9e ce       	rjmp	.-708    	; 0x29c4 <main+0xac>
    2c88:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <disable_gps>
    2c8c:	e0 91 5c 04 	lds	r30, 0x045C
    2c90:	f0 91 5d 04 	lds	r31, 0x045D
    2c94:	84 81       	ldd	r24, Z+4	; 0x04
    2c96:	95 81       	ldd	r25, Z+5	; 0x05
    2c98:	89 2b       	or	r24, r25
    2c9a:	c1 f4       	brne	.+48     	; 0x2ccc <main+0x3b4>
    2c9c:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2ca0:	8a eb       	ldi	r24, 0xBA	; 186
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2ca8:	e0 91 5c 04 	lds	r30, 0x045C
    2cac:	f0 91 5d 04 	lds	r31, 0x045D
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	95 83       	std	Z+5, r25	; 0x05
    2cb6:	84 83       	std	Z+4, r24	; 0x04
    2cb8:	d8 01       	movw	r26, r16
    2cba:	17 96       	adiw	r26, 0x07	; 7
    2cbc:	1c 92       	st	X, r1
    2cbe:	1e 92       	st	-X, r1
    2cc0:	16 97       	sbiw	r26, 0x06	; 6
    2cc2:	17 82       	std	Z+7, r1	; 0x07
    2cc4:	16 82       	std	Z+6, r1	; 0x06
    2cc6:	c8 01       	movw	r24, r16
    2cc8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <database_free>
    2ccc:	e0 90 5c 04 	lds	r14, 0x045C
    2cd0:	f0 90 5d 04 	lds	r15, 0x045D
    2cd4:	f7 01       	movw	r30, r14
    2cd6:	e2 57       	subi	r30, 0x72	; 114
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	90 81       	ld	r25, Z
    2cdc:	f7 01       	movw	r30, r14
    2cde:	e1 57       	subi	r30, 0x71	; 113
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	98 17       	cp	r25, r24
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <main+0x3d2>
    2ce8:	44 c0       	rjmp	.+136    	; 0x2d72 <main+0x45a>
    2cea:	f7 01       	movw	r30, r14
    2cec:	10 82       	st	Z, r1
    2cee:	11 82       	std	Z+1, r1	; 0x01
    2cf0:	12 82       	std	Z+2, r1	; 0x02
    2cf2:	13 82       	std	Z+3, r1	; 0x03
    2cf4:	c7 01       	movw	r24, r14
    2cf6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <getChar>
    2cfa:	68 2f       	mov	r22, r24
    2cfc:	80 91 5c 04 	lds	r24, 0x045C
    2d00:	90 91 5d 04 	lds	r25, 0x045D
    2d04:	69 83       	std	Y+1, r22	; 0x01
    2d06:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <detectSerialEnd>
    2d0a:	e0 91 5c 04 	lds	r30, 0x045C
    2d0e:	f0 91 5d 04 	lds	r31, 0x045D
    2d12:	69 81       	ldd	r22, Y+1	; 0x01
    2d14:	89 2b       	or	r24, r25
    2d16:	f9 f0       	breq	.+62     	; 0x2d56 <main+0x43e>
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	b8 01       	movw	r22, r16
    2d1e:	cf 01       	movw	r24, r30
    2d20:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <terminate_serial>
    2d24:	c8 01       	movw	r24, r16
    2d26:	0e 94 ff 13 	call	0x27fe	; 0x27fe <check_database_integrity>
    2d2a:	d8 01       	movw	r26, r16
    2d2c:	16 96       	adiw	r26, 0x06	; 6
    2d2e:	8d 91       	ld	r24, X+
    2d30:	9c 91       	ld	r25, X
    2d32:	17 97       	sbiw	r26, 0x07	; 7
    2d34:	89 2b       	or	r24, r25
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <main+0x422>
    2d38:	3f c0       	rjmp	.+126    	; 0x2db8 <main+0x4a0>
    2d3a:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_init>
    2d3e:	83 ed       	ldi	r24, 0xD3	; 211
    2d40:	91 e0       	ldi	r25, 0x01	; 1
    2d42:	0e 94 8e 04 	call	0x91c	; 0x91c <string_write>
    2d46:	bf e3       	ldi	r27, 0x3F	; 63
    2d48:	ed e0       	ldi	r30, 0x0D	; 13
    2d4a:	f3 e0       	ldi	r31, 0x03	; 3
    2d4c:	b1 50       	subi	r27, 0x01	; 1
    2d4e:	e0 40       	sbci	r30, 0x00	; 0
    2d50:	f0 40       	sbci	r31, 0x00	; 0
    2d52:	e1 f7       	brne	.-8      	; 0x2d4c <main+0x434>
    2d54:	92 cf       	rjmp	.-220    	; 0x2c7a <main+0x362>
    2d56:	86 81       	ldd	r24, Z+6	; 0x06
    2d58:	97 81       	ldd	r25, Z+7	; 0x07
    2d5a:	0e 94 28 21 	call	0x4250	; 0x4250 <__eewr_byte_m1284p>
    2d5e:	e0 91 5c 04 	lds	r30, 0x045C
    2d62:	f0 91 5d 04 	lds	r31, 0x045D
    2d66:	86 81       	ldd	r24, Z+6	; 0x06
    2d68:	97 81       	ldd	r25, Z+7	; 0x07
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	97 83       	std	Z+7, r25	; 0x07
    2d6e:	86 83       	std	Z+6, r24	; 0x06
    2d70:	29 ce       	rjmp	.-942    	; 0x29c4 <main+0xac>
    2d72:	d7 01       	movw	r26, r14
    2d74:	6d 91       	ld	r22, X+
    2d76:	7d 91       	ld	r23, X+
    2d78:	8d 91       	ld	r24, X+
    2d7a:	9c 91       	ld	r25, X
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__addsf3>
    2d88:	f7 01       	movw	r30, r14
    2d8a:	60 83       	st	Z, r22
    2d8c:	71 83       	std	Z+1, r23	; 0x01
    2d8e:	82 83       	std	Z+2, r24	; 0x02
    2d90:	93 83       	std	Z+3, r25	; 0x03
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e5       	ldi	r19, 0x50	; 80
    2d9e:	43 e4       	ldi	r20, 0x43	; 67
    2da0:	57 e4       	ldi	r21, 0x47	; 71
    2da2:	0e 94 c7 19 	call	0x338e	; 0x338e <__gesf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	0c f0       	brlt	.+2      	; 0x2dac <main+0x494>
    2daa:	0c ce       	rjmp	.-1000   	; 0x29c4 <main+0xac>
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	b8 01       	movw	r22, r16
    2db2:	c7 01       	movw	r24, r14
    2db4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <terminate_serial>
    2db8:	80 91 5c 04 	lds	r24, 0x045C
    2dbc:	90 91 5d 04 	lds	r25, 0x045D
    2dc0:	0e 94 a4 10 	call	0x2148	; 0x2148 <wipe_eeprom>
    2dc4:	e0 91 5c 04 	lds	r30, 0x045C
    2dc8:	f0 91 5d 04 	lds	r31, 0x045D
    2dcc:	d1 86       	std	Z+9, r13	; 0x09
    2dce:	c0 86       	std	Z+8, r12	; 0x08
    2dd0:	f9 cd       	rjmp	.-1038   	; 0x29c4 <main+0xac>
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0f 90       	pop	r0
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	df 90       	pop	r13
    2de6:	cf 90       	pop	r12
    2de8:	bf 90       	pop	r11
    2dea:	af 90       	pop	r10
    2dec:	9f 90       	pop	r9
    2dee:	8f 90       	pop	r8
    2df0:	7f 90       	pop	r7
    2df2:	6f 90       	pop	r6
    2df4:	5f 90       	pop	r5
    2df6:	4f 90       	pop	r4
    2df8:	08 95       	ret

00002dfa <__subsf3>:
    2dfa:	50 58       	subi	r21, 0x80	; 128

00002dfc <__addsf3>:
    2dfc:	bb 27       	eor	r27, r27
    2dfe:	aa 27       	eor	r26, r26
    2e00:	0e d0       	rcall	.+28     	; 0x2e1e <__addsf3x>
    2e02:	63 c2       	rjmp	.+1222   	; 0x32ca <__fp_round>
    2e04:	2c d2       	rcall	.+1112   	; 0x325e <__fp_pscA>
    2e06:	30 f0       	brcs	.+12     	; 0x2e14 <__addsf3+0x18>
    2e08:	31 d2       	rcall	.+1122   	; 0x326c <__fp_pscB>
    2e0a:	20 f0       	brcs	.+8      	; 0x2e14 <__addsf3+0x18>
    2e0c:	31 f4       	brne	.+12     	; 0x2e1a <__addsf3+0x1e>
    2e0e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e10:	11 f4       	brne	.+4      	; 0x2e16 <__addsf3+0x1a>
    2e12:	1e f4       	brtc	.+6      	; 0x2e1a <__addsf3+0x1e>
    2e14:	fc c1       	rjmp	.+1016   	; 0x320e <__fp_nan>
    2e16:	0e f4       	brtc	.+2      	; 0x2e1a <__addsf3+0x1e>
    2e18:	e0 95       	com	r30
    2e1a:	e7 fb       	bst	r30, 7
    2e1c:	c9 c1       	rjmp	.+914    	; 0x31b0 <__fp_inf>

00002e1e <__addsf3x>:
    2e1e:	e9 2f       	mov	r30, r25
    2e20:	76 d2       	rcall	.+1260   	; 0x330e <__fp_split3>
    2e22:	80 f3       	brcs	.-32     	; 0x2e04 <__addsf3+0x8>
    2e24:	ba 17       	cp	r27, r26
    2e26:	62 07       	cpc	r22, r18
    2e28:	73 07       	cpc	r23, r19
    2e2a:	84 07       	cpc	r24, r20
    2e2c:	95 07       	cpc	r25, r21
    2e2e:	18 f0       	brcs	.+6      	; 0x2e36 <__addsf3x+0x18>
    2e30:	71 f4       	brne	.+28     	; 0x2e4e <__addsf3x+0x30>
    2e32:	9e f5       	brtc	.+102    	; 0x2e9a <__addsf3x+0x7c>
    2e34:	a5 c2       	rjmp	.+1354   	; 0x3380 <__fp_zero>
    2e36:	0e f4       	brtc	.+2      	; 0x2e3a <__addsf3x+0x1c>
    2e38:	e0 95       	com	r30
    2e3a:	0b 2e       	mov	r0, r27
    2e3c:	ba 2f       	mov	r27, r26
    2e3e:	a0 2d       	mov	r26, r0
    2e40:	0b 01       	movw	r0, r22
    2e42:	b9 01       	movw	r22, r18
    2e44:	90 01       	movw	r18, r0
    2e46:	0c 01       	movw	r0, r24
    2e48:	ca 01       	movw	r24, r20
    2e4a:	a0 01       	movw	r20, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	ff 27       	eor	r31, r31
    2e50:	59 1b       	sub	r21, r25
    2e52:	99 f0       	breq	.+38     	; 0x2e7a <__addsf3x+0x5c>
    2e54:	59 3f       	cpi	r21, 0xF9	; 249
    2e56:	50 f4       	brcc	.+20     	; 0x2e6c <__addsf3x+0x4e>
    2e58:	50 3e       	cpi	r21, 0xE0	; 224
    2e5a:	68 f1       	brcs	.+90     	; 0x2eb6 <__addsf3x+0x98>
    2e5c:	1a 16       	cp	r1, r26
    2e5e:	f0 40       	sbci	r31, 0x00	; 0
    2e60:	a2 2f       	mov	r26, r18
    2e62:	23 2f       	mov	r18, r19
    2e64:	34 2f       	mov	r19, r20
    2e66:	44 27       	eor	r20, r20
    2e68:	58 5f       	subi	r21, 0xF8	; 248
    2e6a:	f3 cf       	rjmp	.-26     	; 0x2e52 <__addsf3x+0x34>
    2e6c:	46 95       	lsr	r20
    2e6e:	37 95       	ror	r19
    2e70:	27 95       	ror	r18
    2e72:	a7 95       	ror	r26
    2e74:	f0 40       	sbci	r31, 0x00	; 0
    2e76:	53 95       	inc	r21
    2e78:	c9 f7       	brne	.-14     	; 0x2e6c <__addsf3x+0x4e>
    2e7a:	7e f4       	brtc	.+30     	; 0x2e9a <__addsf3x+0x7c>
    2e7c:	1f 16       	cp	r1, r31
    2e7e:	ba 0b       	sbc	r27, r26
    2e80:	62 0b       	sbc	r22, r18
    2e82:	73 0b       	sbc	r23, r19
    2e84:	84 0b       	sbc	r24, r20
    2e86:	ba f0       	brmi	.+46     	; 0x2eb6 <__addsf3x+0x98>
    2e88:	91 50       	subi	r25, 0x01	; 1
    2e8a:	a1 f0       	breq	.+40     	; 0x2eb4 <__addsf3x+0x96>
    2e8c:	ff 0f       	add	r31, r31
    2e8e:	bb 1f       	adc	r27, r27
    2e90:	66 1f       	adc	r22, r22
    2e92:	77 1f       	adc	r23, r23
    2e94:	88 1f       	adc	r24, r24
    2e96:	c2 f7       	brpl	.-16     	; 0x2e88 <__addsf3x+0x6a>
    2e98:	0e c0       	rjmp	.+28     	; 0x2eb6 <__addsf3x+0x98>
    2e9a:	ba 0f       	add	r27, r26
    2e9c:	62 1f       	adc	r22, r18
    2e9e:	73 1f       	adc	r23, r19
    2ea0:	84 1f       	adc	r24, r20
    2ea2:	48 f4       	brcc	.+18     	; 0x2eb6 <__addsf3x+0x98>
    2ea4:	87 95       	ror	r24
    2ea6:	77 95       	ror	r23
    2ea8:	67 95       	ror	r22
    2eaa:	b7 95       	ror	r27
    2eac:	f7 95       	ror	r31
    2eae:	9e 3f       	cpi	r25, 0xFE	; 254
    2eb0:	08 f0       	brcs	.+2      	; 0x2eb4 <__addsf3x+0x96>
    2eb2:	b3 cf       	rjmp	.-154    	; 0x2e1a <__addsf3+0x1e>
    2eb4:	93 95       	inc	r25
    2eb6:	88 0f       	add	r24, r24
    2eb8:	08 f0       	brcs	.+2      	; 0x2ebc <__addsf3x+0x9e>
    2eba:	99 27       	eor	r25, r25
    2ebc:	ee 0f       	add	r30, r30
    2ebe:	97 95       	ror	r25
    2ec0:	87 95       	ror	r24
    2ec2:	08 95       	ret
    2ec4:	cc d1       	rcall	.+920    	; 0x325e <__fp_pscA>
    2ec6:	58 f0       	brcs	.+22     	; 0x2ede <__addsf3x+0xc0>
    2ec8:	80 e8       	ldi	r24, 0x80	; 128
    2eca:	91 e0       	ldi	r25, 0x01	; 1
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <__addsf3x+0xb2>
    2ece:	9e ef       	ldi	r25, 0xFE	; 254
    2ed0:	cd d1       	rcall	.+922    	; 0x326c <__fp_pscB>
    2ed2:	28 f0       	brcs	.+10     	; 0x2ede <__addsf3x+0xc0>
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	51 e0       	ldi	r21, 0x01	; 1
    2ed8:	59 f4       	brne	.+22     	; 0x2ef0 <atan2+0xe>
    2eda:	5e ef       	ldi	r21, 0xFE	; 254
    2edc:	09 c0       	rjmp	.+18     	; 0x2ef0 <atan2+0xe>
    2ede:	97 c1       	rjmp	.+814    	; 0x320e <__fp_nan>
    2ee0:	4f c2       	rjmp	.+1182   	; 0x3380 <__fp_zero>

00002ee2 <atan2>:
    2ee2:	e9 2f       	mov	r30, r25
    2ee4:	e0 78       	andi	r30, 0x80	; 128
    2ee6:	13 d2       	rcall	.+1062   	; 0x330e <__fp_split3>
    2ee8:	68 f3       	brcs	.-38     	; 0x2ec4 <__addsf3x+0xa6>
    2eea:	09 2e       	mov	r0, r25
    2eec:	05 2a       	or	r0, r21
    2eee:	c1 f3       	breq	.-16     	; 0x2ee0 <__addsf3x+0xc2>
    2ef0:	26 17       	cp	r18, r22
    2ef2:	37 07       	cpc	r19, r23
    2ef4:	48 07       	cpc	r20, r24
    2ef6:	59 07       	cpc	r21, r25
    2ef8:	38 f0       	brcs	.+14     	; 0x2f08 <atan2+0x26>
    2efa:	0e 2e       	mov	r0, r30
    2efc:	07 f8       	bld	r0, 7
    2efe:	e0 25       	eor	r30, r0
    2f00:	69 f0       	breq	.+26     	; 0x2f1c <atan2+0x3a>
    2f02:	e0 25       	eor	r30, r0
    2f04:	e0 64       	ori	r30, 0x40	; 64
    2f06:	0a c0       	rjmp	.+20     	; 0x2f1c <atan2+0x3a>
    2f08:	ef 63       	ori	r30, 0x3F	; 63
    2f0a:	07 f8       	bld	r0, 7
    2f0c:	00 94       	com	r0
    2f0e:	07 fa       	bst	r0, 7
    2f10:	db 01       	movw	r26, r22
    2f12:	b9 01       	movw	r22, r18
    2f14:	9d 01       	movw	r18, r26
    2f16:	dc 01       	movw	r26, r24
    2f18:	ca 01       	movw	r24, r20
    2f1a:	ad 01       	movw	r20, r26
    2f1c:	ef 93       	push	r30
    2f1e:	4a d0       	rcall	.+148    	; 0x2fb4 <__divsf3_pse>
    2f20:	d4 d1       	rcall	.+936    	; 0x32ca <__fp_round>
    2f22:	0a d0       	rcall	.+20     	; 0x2f38 <atan>
    2f24:	5f 91       	pop	r21
    2f26:	55 23       	and	r21, r21
    2f28:	31 f0       	breq	.+12     	; 0x2f36 <atan2+0x54>
    2f2a:	2b ed       	ldi	r18, 0xDB	; 219
    2f2c:	3f e0       	ldi	r19, 0x0F	; 15
    2f2e:	49 e4       	ldi	r20, 0x49	; 73
    2f30:	50 fd       	sbrc	r21, 0
    2f32:	49 ec       	ldi	r20, 0xC9	; 201
    2f34:	63 cf       	rjmp	.-314    	; 0x2dfc <__addsf3>
    2f36:	08 95       	ret

00002f38 <atan>:
    2f38:	df 93       	push	r29
    2f3a:	dd 27       	eor	r29, r29
    2f3c:	b9 2f       	mov	r27, r25
    2f3e:	bf 77       	andi	r27, 0x7F	; 127
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	5f e3       	ldi	r21, 0x3F	; 63
    2f44:	16 16       	cp	r1, r22
    2f46:	17 06       	cpc	r1, r23
    2f48:	48 07       	cpc	r20, r24
    2f4a:	5b 07       	cpc	r21, r27
    2f4c:	10 f4       	brcc	.+4      	; 0x2f52 <atan+0x1a>
    2f4e:	d9 2f       	mov	r29, r25
    2f50:	22 d2       	rcall	.+1092   	; 0x3396 <inverse>
    2f52:	9f 93       	push	r25
    2f54:	8f 93       	push	r24
    2f56:	7f 93       	push	r23
    2f58:	6f 93       	push	r22
    2f5a:	b9 d3       	rcall	.+1906   	; 0x36ce <square>
    2f5c:	e2 ec       	ldi	r30, 0xC2	; 194
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	59 d1       	rcall	.+690    	; 0x3214 <__fp_powser>
    2f62:	b3 d1       	rcall	.+870    	; 0x32ca <__fp_round>
    2f64:	2f 91       	pop	r18
    2f66:	3f 91       	pop	r19
    2f68:	4f 91       	pop	r20
    2f6a:	5f 91       	pop	r21
    2f6c:	a5 d2       	rcall	.+1354   	; 0x34b8 <__mulsf3x>
    2f6e:	dd 23       	and	r29, r29
    2f70:	49 f0       	breq	.+18     	; 0x2f84 <atan+0x4c>
    2f72:	90 58       	subi	r25, 0x80	; 128
    2f74:	a2 ea       	ldi	r26, 0xA2	; 162
    2f76:	2a ed       	ldi	r18, 0xDA	; 218
    2f78:	3f e0       	ldi	r19, 0x0F	; 15
    2f7a:	49 ec       	ldi	r20, 0xC9	; 201
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	d0 78       	andi	r29, 0x80	; 128
    2f80:	5d 27       	eor	r21, r29
    2f82:	4d df       	rcall	.-358    	; 0x2e1e <__addsf3x>
    2f84:	df 91       	pop	r29
    2f86:	a1 c1       	rjmp	.+834    	; 0x32ca <__fp_round>

00002f88 <__cmpsf2>:
    2f88:	ef d0       	rcall	.+478    	; 0x3168 <__fp_cmp>
    2f8a:	08 f4       	brcc	.+2      	; 0x2f8e <__cmpsf2+0x6>
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	08 95       	ret

00002f90 <cos>:
    2f90:	75 d1       	rcall	.+746    	; 0x327c <__fp_rempio2>
    2f92:	e3 95       	inc	r30
    2f94:	ab c1       	rjmp	.+854    	; 0x32ec <__fp_sinus>

00002f96 <__divsf3>:
    2f96:	0c d0       	rcall	.+24     	; 0x2fb0 <__divsf3x>
    2f98:	98 c1       	rjmp	.+816    	; 0x32ca <__fp_round>
    2f9a:	68 d1       	rcall	.+720    	; 0x326c <__fp_pscB>
    2f9c:	40 f0       	brcs	.+16     	; 0x2fae <__divsf3+0x18>
    2f9e:	5f d1       	rcall	.+702    	; 0x325e <__fp_pscA>
    2fa0:	30 f0       	brcs	.+12     	; 0x2fae <__divsf3+0x18>
    2fa2:	21 f4       	brne	.+8      	; 0x2fac <__divsf3+0x16>
    2fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    2fa6:	19 f0       	breq	.+6      	; 0x2fae <__divsf3+0x18>
    2fa8:	03 c1       	rjmp	.+518    	; 0x31b0 <__fp_inf>
    2faa:	51 11       	cpse	r21, r1
    2fac:	ea c1       	rjmp	.+980    	; 0x3382 <__fp_szero>
    2fae:	2f c1       	rjmp	.+606    	; 0x320e <__fp_nan>

00002fb0 <__divsf3x>:
    2fb0:	ae d1       	rcall	.+860    	; 0x330e <__fp_split3>
    2fb2:	98 f3       	brcs	.-26     	; 0x2f9a <__divsf3+0x4>

00002fb4 <__divsf3_pse>:
    2fb4:	99 23       	and	r25, r25
    2fb6:	c9 f3       	breq	.-14     	; 0x2faa <__divsf3+0x14>
    2fb8:	55 23       	and	r21, r21
    2fba:	b1 f3       	breq	.-20     	; 0x2fa8 <__divsf3+0x12>
    2fbc:	95 1b       	sub	r25, r21
    2fbe:	55 0b       	sbc	r21, r21
    2fc0:	bb 27       	eor	r27, r27
    2fc2:	aa 27       	eor	r26, r26
    2fc4:	62 17       	cp	r22, r18
    2fc6:	73 07       	cpc	r23, r19
    2fc8:	84 07       	cpc	r24, r20
    2fca:	38 f0       	brcs	.+14     	; 0x2fda <__divsf3_pse+0x26>
    2fcc:	9f 5f       	subi	r25, 0xFF	; 255
    2fce:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd0:	22 0f       	add	r18, r18
    2fd2:	33 1f       	adc	r19, r19
    2fd4:	44 1f       	adc	r20, r20
    2fd6:	aa 1f       	adc	r26, r26
    2fd8:	a9 f3       	breq	.-22     	; 0x2fc4 <__divsf3_pse+0x10>
    2fda:	33 d0       	rcall	.+102    	; 0x3042 <__divsf3_pse+0x8e>
    2fdc:	0e 2e       	mov	r0, r30
    2fde:	3a f0       	brmi	.+14     	; 0x2fee <__divsf3_pse+0x3a>
    2fe0:	e0 e8       	ldi	r30, 0x80	; 128
    2fe2:	30 d0       	rcall	.+96     	; 0x3044 <__divsf3_pse+0x90>
    2fe4:	91 50       	subi	r25, 0x01	; 1
    2fe6:	50 40       	sbci	r21, 0x00	; 0
    2fe8:	e6 95       	lsr	r30
    2fea:	00 1c       	adc	r0, r0
    2fec:	ca f7       	brpl	.-14     	; 0x2fe0 <__divsf3_pse+0x2c>
    2fee:	29 d0       	rcall	.+82     	; 0x3042 <__divsf3_pse+0x8e>
    2ff0:	fe 2f       	mov	r31, r30
    2ff2:	27 d0       	rcall	.+78     	; 0x3042 <__divsf3_pse+0x8e>
    2ff4:	66 0f       	add	r22, r22
    2ff6:	77 1f       	adc	r23, r23
    2ff8:	88 1f       	adc	r24, r24
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	26 17       	cp	r18, r22
    2ffe:	37 07       	cpc	r19, r23
    3000:	48 07       	cpc	r20, r24
    3002:	ab 07       	cpc	r26, r27
    3004:	b0 e8       	ldi	r27, 0x80	; 128
    3006:	09 f0       	breq	.+2      	; 0x300a <__divsf3_pse+0x56>
    3008:	bb 0b       	sbc	r27, r27
    300a:	80 2d       	mov	r24, r0
    300c:	bf 01       	movw	r22, r30
    300e:	ff 27       	eor	r31, r31
    3010:	93 58       	subi	r25, 0x83	; 131
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	2a f0       	brmi	.+10     	; 0x3020 <__divsf3_pse+0x6c>
    3016:	9e 3f       	cpi	r25, 0xFE	; 254
    3018:	51 05       	cpc	r21, r1
    301a:	68 f0       	brcs	.+26     	; 0x3036 <__divsf3_pse+0x82>
    301c:	c9 c0       	rjmp	.+402    	; 0x31b0 <__fp_inf>
    301e:	b1 c1       	rjmp	.+866    	; 0x3382 <__fp_szero>
    3020:	5f 3f       	cpi	r21, 0xFF	; 255
    3022:	ec f3       	brlt	.-6      	; 0x301e <__divsf3_pse+0x6a>
    3024:	98 3e       	cpi	r25, 0xE8	; 232
    3026:	dc f3       	brlt	.-10     	; 0x301e <__divsf3_pse+0x6a>
    3028:	86 95       	lsr	r24
    302a:	77 95       	ror	r23
    302c:	67 95       	ror	r22
    302e:	b7 95       	ror	r27
    3030:	f7 95       	ror	r31
    3032:	9f 5f       	subi	r25, 0xFF	; 255
    3034:	c9 f7       	brne	.-14     	; 0x3028 <__divsf3_pse+0x74>
    3036:	88 0f       	add	r24, r24
    3038:	91 1d       	adc	r25, r1
    303a:	96 95       	lsr	r25
    303c:	87 95       	ror	r24
    303e:	97 f9       	bld	r25, 7
    3040:	08 95       	ret
    3042:	e1 e0       	ldi	r30, 0x01	; 1
    3044:	66 0f       	add	r22, r22
    3046:	77 1f       	adc	r23, r23
    3048:	88 1f       	adc	r24, r24
    304a:	bb 1f       	adc	r27, r27
    304c:	62 17       	cp	r22, r18
    304e:	73 07       	cpc	r23, r19
    3050:	84 07       	cpc	r24, r20
    3052:	ba 07       	cpc	r27, r26
    3054:	20 f0       	brcs	.+8      	; 0x305e <__divsf3_pse+0xaa>
    3056:	62 1b       	sub	r22, r18
    3058:	73 0b       	sbc	r23, r19
    305a:	84 0b       	sbc	r24, r20
    305c:	ba 0b       	sbc	r27, r26
    305e:	ee 1f       	adc	r30, r30
    3060:	88 f7       	brcc	.-30     	; 0x3044 <__divsf3_pse+0x90>
    3062:	e0 95       	com	r30
    3064:	08 95       	ret

00003066 <__fixsfsi>:
    3066:	04 d0       	rcall	.+8      	; 0x3070 <__fixunssfsi>
    3068:	68 94       	set
    306a:	b1 11       	cpse	r27, r1
    306c:	8a c1       	rjmp	.+788    	; 0x3382 <__fp_szero>
    306e:	08 95       	ret

00003070 <__fixunssfsi>:
    3070:	56 d1       	rcall	.+684    	; 0x331e <__fp_splitA>
    3072:	88 f0       	brcs	.+34     	; 0x3096 <__fixunssfsi+0x26>
    3074:	9f 57       	subi	r25, 0x7F	; 127
    3076:	90 f0       	brcs	.+36     	; 0x309c <__fixunssfsi+0x2c>
    3078:	b9 2f       	mov	r27, r25
    307a:	99 27       	eor	r25, r25
    307c:	b7 51       	subi	r27, 0x17	; 23
    307e:	a0 f0       	brcs	.+40     	; 0x30a8 <__fixunssfsi+0x38>
    3080:	d1 f0       	breq	.+52     	; 0x30b6 <__fixunssfsi+0x46>
    3082:	66 0f       	add	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	1a f0       	brmi	.+6      	; 0x3092 <__fixunssfsi+0x22>
    308c:	ba 95       	dec	r27
    308e:	c9 f7       	brne	.-14     	; 0x3082 <__fixunssfsi+0x12>
    3090:	12 c0       	rjmp	.+36     	; 0x30b6 <__fixunssfsi+0x46>
    3092:	b1 30       	cpi	r27, 0x01	; 1
    3094:	81 f0       	breq	.+32     	; 0x30b6 <__fixunssfsi+0x46>
    3096:	74 d1       	rcall	.+744    	; 0x3380 <__fp_zero>
    3098:	b1 e0       	ldi	r27, 0x01	; 1
    309a:	08 95       	ret
    309c:	71 c1       	rjmp	.+738    	; 0x3380 <__fp_zero>
    309e:	67 2f       	mov	r22, r23
    30a0:	78 2f       	mov	r23, r24
    30a2:	88 27       	eor	r24, r24
    30a4:	b8 5f       	subi	r27, 0xF8	; 248
    30a6:	39 f0       	breq	.+14     	; 0x30b6 <__fixunssfsi+0x46>
    30a8:	b9 3f       	cpi	r27, 0xF9	; 249
    30aa:	cc f3       	brlt	.-14     	; 0x309e <__fixunssfsi+0x2e>
    30ac:	86 95       	lsr	r24
    30ae:	77 95       	ror	r23
    30b0:	67 95       	ror	r22
    30b2:	b3 95       	inc	r27
    30b4:	d9 f7       	brne	.-10     	; 0x30ac <__fixunssfsi+0x3c>
    30b6:	3e f4       	brtc	.+14     	; 0x30c6 <__fixunssfsi+0x56>
    30b8:	90 95       	com	r25
    30ba:	80 95       	com	r24
    30bc:	70 95       	com	r23
    30be:	61 95       	neg	r22
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	8f 4f       	sbci	r24, 0xFF	; 255
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	08 95       	ret

000030c8 <__floatunsisf>:
    30c8:	e8 94       	clt
    30ca:	09 c0       	rjmp	.+18     	; 0x30de <__floatsisf+0x12>

000030cc <__floatsisf>:
    30cc:	97 fb       	bst	r25, 7
    30ce:	3e f4       	brtc	.+14     	; 0x30de <__floatsisf+0x12>
    30d0:	90 95       	com	r25
    30d2:	80 95       	com	r24
    30d4:	70 95       	com	r23
    30d6:	61 95       	neg	r22
    30d8:	7f 4f       	sbci	r23, 0xFF	; 255
    30da:	8f 4f       	sbci	r24, 0xFF	; 255
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	99 23       	and	r25, r25
    30e0:	a9 f0       	breq	.+42     	; 0x310c <__floatsisf+0x40>
    30e2:	f9 2f       	mov	r31, r25
    30e4:	96 e9       	ldi	r25, 0x96	; 150
    30e6:	bb 27       	eor	r27, r27
    30e8:	93 95       	inc	r25
    30ea:	f6 95       	lsr	r31
    30ec:	87 95       	ror	r24
    30ee:	77 95       	ror	r23
    30f0:	67 95       	ror	r22
    30f2:	b7 95       	ror	r27
    30f4:	f1 11       	cpse	r31, r1
    30f6:	f8 cf       	rjmp	.-16     	; 0x30e8 <__floatsisf+0x1c>
    30f8:	fa f4       	brpl	.+62     	; 0x3138 <__floatsisf+0x6c>
    30fa:	bb 0f       	add	r27, r27
    30fc:	11 f4       	brne	.+4      	; 0x3102 <__floatsisf+0x36>
    30fe:	60 ff       	sbrs	r22, 0
    3100:	1b c0       	rjmp	.+54     	; 0x3138 <__floatsisf+0x6c>
    3102:	6f 5f       	subi	r22, 0xFF	; 255
    3104:	7f 4f       	sbci	r23, 0xFF	; 255
    3106:	8f 4f       	sbci	r24, 0xFF	; 255
    3108:	9f 4f       	sbci	r25, 0xFF	; 255
    310a:	16 c0       	rjmp	.+44     	; 0x3138 <__floatsisf+0x6c>
    310c:	88 23       	and	r24, r24
    310e:	11 f0       	breq	.+4      	; 0x3114 <__floatsisf+0x48>
    3110:	96 e9       	ldi	r25, 0x96	; 150
    3112:	11 c0       	rjmp	.+34     	; 0x3136 <__floatsisf+0x6a>
    3114:	77 23       	and	r23, r23
    3116:	21 f0       	breq	.+8      	; 0x3120 <__floatsisf+0x54>
    3118:	9e e8       	ldi	r25, 0x8E	; 142
    311a:	87 2f       	mov	r24, r23
    311c:	76 2f       	mov	r23, r22
    311e:	05 c0       	rjmp	.+10     	; 0x312a <__floatsisf+0x5e>
    3120:	66 23       	and	r22, r22
    3122:	71 f0       	breq	.+28     	; 0x3140 <__floatsisf+0x74>
    3124:	96 e8       	ldi	r25, 0x86	; 134
    3126:	86 2f       	mov	r24, r22
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	2a f0       	brmi	.+10     	; 0x3138 <__floatsisf+0x6c>
    312e:	9a 95       	dec	r25
    3130:	66 0f       	add	r22, r22
    3132:	77 1f       	adc	r23, r23
    3134:	88 1f       	adc	r24, r24
    3136:	da f7       	brpl	.-10     	; 0x312e <__floatsisf+0x62>
    3138:	88 0f       	add	r24, r24
    313a:	96 95       	lsr	r25
    313c:	87 95       	ror	r24
    313e:	97 f9       	bld	r25, 7
    3140:	08 95       	ret

00003142 <floor>:
    3142:	07 d1       	rcall	.+526    	; 0x3352 <__fp_trunc>
    3144:	80 f0       	brcs	.+32     	; 0x3166 <floor+0x24>
    3146:	9f 37       	cpi	r25, 0x7F	; 127
    3148:	40 f4       	brcc	.+16     	; 0x315a <floor+0x18>
    314a:	91 11       	cpse	r25, r1
    314c:	0e f0       	brts	.+2      	; 0x3150 <floor+0xe>
    314e:	19 c1       	rjmp	.+562    	; 0x3382 <__fp_szero>
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	80 e8       	ldi	r24, 0x80	; 128
    3156:	9f eb       	ldi	r25, 0xBF	; 191
    3158:	08 95       	ret
    315a:	26 f4       	brtc	.+8      	; 0x3164 <floor+0x22>
    315c:	1b 16       	cp	r1, r27
    315e:	61 1d       	adc	r22, r1
    3160:	71 1d       	adc	r23, r1
    3162:	81 1d       	adc	r24, r1
    3164:	2b c0       	rjmp	.+86     	; 0x31bc <__fp_mintl>
    3166:	45 c0       	rjmp	.+138    	; 0x31f2 <__fp_mpack>

00003168 <__fp_cmp>:
    3168:	99 0f       	add	r25, r25
    316a:	00 08       	sbc	r0, r0
    316c:	55 0f       	add	r21, r21
    316e:	aa 0b       	sbc	r26, r26
    3170:	e0 e8       	ldi	r30, 0x80	; 128
    3172:	fe ef       	ldi	r31, 0xFE	; 254
    3174:	16 16       	cp	r1, r22
    3176:	17 06       	cpc	r1, r23
    3178:	e8 07       	cpc	r30, r24
    317a:	f9 07       	cpc	r31, r25
    317c:	c0 f0       	brcs	.+48     	; 0x31ae <__fp_cmp+0x46>
    317e:	12 16       	cp	r1, r18
    3180:	13 06       	cpc	r1, r19
    3182:	e4 07       	cpc	r30, r20
    3184:	f5 07       	cpc	r31, r21
    3186:	98 f0       	brcs	.+38     	; 0x31ae <__fp_cmp+0x46>
    3188:	62 1b       	sub	r22, r18
    318a:	73 0b       	sbc	r23, r19
    318c:	84 0b       	sbc	r24, r20
    318e:	95 0b       	sbc	r25, r21
    3190:	39 f4       	brne	.+14     	; 0x31a0 <__fp_cmp+0x38>
    3192:	0a 26       	eor	r0, r26
    3194:	61 f0       	breq	.+24     	; 0x31ae <__fp_cmp+0x46>
    3196:	23 2b       	or	r18, r19
    3198:	24 2b       	or	r18, r20
    319a:	25 2b       	or	r18, r21
    319c:	21 f4       	brne	.+8      	; 0x31a6 <__fp_cmp+0x3e>
    319e:	08 95       	ret
    31a0:	0a 26       	eor	r0, r26
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <__fp_cmp+0x3e>
    31a4:	a1 40       	sbci	r26, 0x01	; 1
    31a6:	a6 95       	lsr	r26
    31a8:	8f ef       	ldi	r24, 0xFF	; 255
    31aa:	81 1d       	adc	r24, r1
    31ac:	81 1d       	adc	r24, r1
    31ae:	08 95       	ret

000031b0 <__fp_inf>:
    31b0:	97 f9       	bld	r25, 7
    31b2:	9f 67       	ori	r25, 0x7F	; 127
    31b4:	80 e8       	ldi	r24, 0x80	; 128
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	08 95       	ret

000031bc <__fp_mintl>:
    31bc:	88 23       	and	r24, r24
    31be:	71 f4       	brne	.+28     	; 0x31dc <__fp_mintl+0x20>
    31c0:	77 23       	and	r23, r23
    31c2:	21 f0       	breq	.+8      	; 0x31cc <__fp_mintl+0x10>
    31c4:	98 50       	subi	r25, 0x08	; 8
    31c6:	87 2b       	or	r24, r23
    31c8:	76 2f       	mov	r23, r22
    31ca:	07 c0       	rjmp	.+14     	; 0x31da <__fp_mintl+0x1e>
    31cc:	66 23       	and	r22, r22
    31ce:	11 f4       	brne	.+4      	; 0x31d4 <__fp_mintl+0x18>
    31d0:	99 27       	eor	r25, r25
    31d2:	0d c0       	rjmp	.+26     	; 0x31ee <__fp_mintl+0x32>
    31d4:	90 51       	subi	r25, 0x10	; 16
    31d6:	86 2b       	or	r24, r22
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	2a f0       	brmi	.+10     	; 0x31e8 <__fp_mintl+0x2c>
    31de:	9a 95       	dec	r25
    31e0:	66 0f       	add	r22, r22
    31e2:	77 1f       	adc	r23, r23
    31e4:	88 1f       	adc	r24, r24
    31e6:	da f7       	brpl	.-10     	; 0x31de <__fp_mintl+0x22>
    31e8:	88 0f       	add	r24, r24
    31ea:	96 95       	lsr	r25
    31ec:	87 95       	ror	r24
    31ee:	97 f9       	bld	r25, 7
    31f0:	08 95       	ret

000031f2 <__fp_mpack>:
    31f2:	9f 3f       	cpi	r25, 0xFF	; 255
    31f4:	31 f0       	breq	.+12     	; 0x3202 <__fp_mpack_finite+0xc>

000031f6 <__fp_mpack_finite>:
    31f6:	91 50       	subi	r25, 0x01	; 1
    31f8:	20 f4       	brcc	.+8      	; 0x3202 <__fp_mpack_finite+0xc>
    31fa:	87 95       	ror	r24
    31fc:	77 95       	ror	r23
    31fe:	67 95       	ror	r22
    3200:	b7 95       	ror	r27
    3202:	88 0f       	add	r24, r24
    3204:	91 1d       	adc	r25, r1
    3206:	96 95       	lsr	r25
    3208:	87 95       	ror	r24
    320a:	97 f9       	bld	r25, 7
    320c:	08 95       	ret

0000320e <__fp_nan>:
    320e:	9f ef       	ldi	r25, 0xFF	; 255
    3210:	80 ec       	ldi	r24, 0xC0	; 192
    3212:	08 95       	ret

00003214 <__fp_powser>:
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	1f 93       	push	r17
    321a:	0f 93       	push	r16
    321c:	ff 92       	push	r15
    321e:	ef 92       	push	r14
    3220:	df 92       	push	r13
    3222:	7b 01       	movw	r14, r22
    3224:	8c 01       	movw	r16, r24
    3226:	68 94       	set
    3228:	05 c0       	rjmp	.+10     	; 0x3234 <__fp_powser+0x20>
    322a:	da 2e       	mov	r13, r26
    322c:	ef 01       	movw	r28, r30
    322e:	44 d1       	rcall	.+648    	; 0x34b8 <__mulsf3x>
    3230:	fe 01       	movw	r30, r28
    3232:	e8 94       	clt
    3234:	a5 91       	lpm	r26, Z+
    3236:	25 91       	lpm	r18, Z+
    3238:	35 91       	lpm	r19, Z+
    323a:	45 91       	lpm	r20, Z+
    323c:	55 91       	lpm	r21, Z+
    323e:	ae f3       	brts	.-22     	; 0x322a <__fp_powser+0x16>
    3240:	ef 01       	movw	r28, r30
    3242:	ed dd       	rcall	.-1062   	; 0x2e1e <__addsf3x>
    3244:	fe 01       	movw	r30, r28
    3246:	97 01       	movw	r18, r14
    3248:	a8 01       	movw	r20, r16
    324a:	da 94       	dec	r13
    324c:	79 f7       	brne	.-34     	; 0x322c <__fp_powser+0x18>
    324e:	df 90       	pop	r13
    3250:	ef 90       	pop	r14
    3252:	ff 90       	pop	r15
    3254:	0f 91       	pop	r16
    3256:	1f 91       	pop	r17
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <__fp_pscA>:
    325e:	00 24       	eor	r0, r0
    3260:	0a 94       	dec	r0
    3262:	16 16       	cp	r1, r22
    3264:	17 06       	cpc	r1, r23
    3266:	18 06       	cpc	r1, r24
    3268:	09 06       	cpc	r0, r25
    326a:	08 95       	ret

0000326c <__fp_pscB>:
    326c:	00 24       	eor	r0, r0
    326e:	0a 94       	dec	r0
    3270:	12 16       	cp	r1, r18
    3272:	13 06       	cpc	r1, r19
    3274:	14 06       	cpc	r1, r20
    3276:	05 06       	cpc	r0, r21
    3278:	08 95       	ret
    327a:	c9 cf       	rjmp	.-110    	; 0x320e <__fp_nan>

0000327c <__fp_rempio2>:
    327c:	50 d0       	rcall	.+160    	; 0x331e <__fp_splitA>
    327e:	e8 f3       	brcs	.-6      	; 0x327a <__fp_pscB+0xe>
    3280:	e8 94       	clt
    3282:	e0 e0       	ldi	r30, 0x00	; 0
    3284:	bb 27       	eor	r27, r27
    3286:	9f 57       	subi	r25, 0x7F	; 127
    3288:	f0 f0       	brcs	.+60     	; 0x32c6 <__fp_rempio2+0x4a>
    328a:	2a ed       	ldi	r18, 0xDA	; 218
    328c:	3f e0       	ldi	r19, 0x0F	; 15
    328e:	49 ec       	ldi	r20, 0xC9	; 201
    3290:	06 c0       	rjmp	.+12     	; 0x329e <__fp_rempio2+0x22>
    3292:	ee 0f       	add	r30, r30
    3294:	bb 0f       	add	r27, r27
    3296:	66 1f       	adc	r22, r22
    3298:	77 1f       	adc	r23, r23
    329a:	88 1f       	adc	r24, r24
    329c:	28 f0       	brcs	.+10     	; 0x32a8 <__fp_rempio2+0x2c>
    329e:	b2 3a       	cpi	r27, 0xA2	; 162
    32a0:	62 07       	cpc	r22, r18
    32a2:	73 07       	cpc	r23, r19
    32a4:	84 07       	cpc	r24, r20
    32a6:	28 f0       	brcs	.+10     	; 0x32b2 <__fp_rempio2+0x36>
    32a8:	b2 5a       	subi	r27, 0xA2	; 162
    32aa:	62 0b       	sbc	r22, r18
    32ac:	73 0b       	sbc	r23, r19
    32ae:	84 0b       	sbc	r24, r20
    32b0:	e3 95       	inc	r30
    32b2:	9a 95       	dec	r25
    32b4:	72 f7       	brpl	.-36     	; 0x3292 <__fp_rempio2+0x16>
    32b6:	80 38       	cpi	r24, 0x80	; 128
    32b8:	30 f4       	brcc	.+12     	; 0x32c6 <__fp_rempio2+0x4a>
    32ba:	9a 95       	dec	r25
    32bc:	bb 0f       	add	r27, r27
    32be:	66 1f       	adc	r22, r22
    32c0:	77 1f       	adc	r23, r23
    32c2:	88 1f       	adc	r24, r24
    32c4:	d2 f7       	brpl	.-12     	; 0x32ba <__fp_rempio2+0x3e>
    32c6:	90 48       	sbci	r25, 0x80	; 128
    32c8:	96 cf       	rjmp	.-212    	; 0x31f6 <__fp_mpack_finite>

000032ca <__fp_round>:
    32ca:	09 2e       	mov	r0, r25
    32cc:	03 94       	inc	r0
    32ce:	00 0c       	add	r0, r0
    32d0:	11 f4       	brne	.+4      	; 0x32d6 <__fp_round+0xc>
    32d2:	88 23       	and	r24, r24
    32d4:	52 f0       	brmi	.+20     	; 0x32ea <__fp_round+0x20>
    32d6:	bb 0f       	add	r27, r27
    32d8:	40 f4       	brcc	.+16     	; 0x32ea <__fp_round+0x20>
    32da:	bf 2b       	or	r27, r31
    32dc:	11 f4       	brne	.+4      	; 0x32e2 <__fp_round+0x18>
    32de:	60 ff       	sbrs	r22, 0
    32e0:	04 c0       	rjmp	.+8      	; 0x32ea <__fp_round+0x20>
    32e2:	6f 5f       	subi	r22, 0xFF	; 255
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	8f 4f       	sbci	r24, 0xFF	; 255
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	08 95       	ret

000032ec <__fp_sinus>:
    32ec:	ef 93       	push	r30
    32ee:	e0 ff       	sbrs	r30, 0
    32f0:	06 c0       	rjmp	.+12     	; 0x32fe <__fp_sinus+0x12>
    32f2:	a2 ea       	ldi	r26, 0xA2	; 162
    32f4:	2a ed       	ldi	r18, 0xDA	; 218
    32f6:	3f e0       	ldi	r19, 0x0F	; 15
    32f8:	49 ec       	ldi	r20, 0xC9	; 201
    32fa:	5f eb       	ldi	r21, 0xBF	; 191
    32fc:	90 dd       	rcall	.-1248   	; 0x2e1e <__addsf3x>
    32fe:	e5 df       	rcall	.-54     	; 0x32ca <__fp_round>
    3300:	0f 90       	pop	r0
    3302:	03 94       	inc	r0
    3304:	01 fc       	sbrc	r0, 1
    3306:	90 58       	subi	r25, 0x80	; 128
    3308:	ef ee       	ldi	r30, 0xEF	; 239
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	1b c2       	rjmp	.+1078   	; 0x3744 <__fp_powsodd>

0000330e <__fp_split3>:
    330e:	57 fd       	sbrc	r21, 7
    3310:	90 58       	subi	r25, 0x80	; 128
    3312:	44 0f       	add	r20, r20
    3314:	55 1f       	adc	r21, r21
    3316:	59 f0       	breq	.+22     	; 0x332e <__fp_splitA+0x10>
    3318:	5f 3f       	cpi	r21, 0xFF	; 255
    331a:	71 f0       	breq	.+28     	; 0x3338 <__fp_splitA+0x1a>
    331c:	47 95       	ror	r20

0000331e <__fp_splitA>:
    331e:	88 0f       	add	r24, r24
    3320:	97 fb       	bst	r25, 7
    3322:	99 1f       	adc	r25, r25
    3324:	61 f0       	breq	.+24     	; 0x333e <__fp_splitA+0x20>
    3326:	9f 3f       	cpi	r25, 0xFF	; 255
    3328:	79 f0       	breq	.+30     	; 0x3348 <__fp_splitA+0x2a>
    332a:	87 95       	ror	r24
    332c:	08 95       	ret
    332e:	12 16       	cp	r1, r18
    3330:	13 06       	cpc	r1, r19
    3332:	14 06       	cpc	r1, r20
    3334:	55 1f       	adc	r21, r21
    3336:	f2 cf       	rjmp	.-28     	; 0x331c <__fp_split3+0xe>
    3338:	46 95       	lsr	r20
    333a:	f1 df       	rcall	.-30     	; 0x331e <__fp_splitA>
    333c:	08 c0       	rjmp	.+16     	; 0x334e <__fp_splitA+0x30>
    333e:	16 16       	cp	r1, r22
    3340:	17 06       	cpc	r1, r23
    3342:	18 06       	cpc	r1, r24
    3344:	99 1f       	adc	r25, r25
    3346:	f1 cf       	rjmp	.-30     	; 0x332a <__fp_splitA+0xc>
    3348:	86 95       	lsr	r24
    334a:	71 05       	cpc	r23, r1
    334c:	61 05       	cpc	r22, r1
    334e:	08 94       	sec
    3350:	08 95       	ret

00003352 <__fp_trunc>:
    3352:	e5 df       	rcall	.-54     	; 0x331e <__fp_splitA>
    3354:	a0 f0       	brcs	.+40     	; 0x337e <__fp_trunc+0x2c>
    3356:	be e7       	ldi	r27, 0x7E	; 126
    3358:	b9 17       	cp	r27, r25
    335a:	88 f4       	brcc	.+34     	; 0x337e <__fp_trunc+0x2c>
    335c:	bb 27       	eor	r27, r27
    335e:	9f 38       	cpi	r25, 0x8F	; 143
    3360:	60 f4       	brcc	.+24     	; 0x337a <__fp_trunc+0x28>
    3362:	16 16       	cp	r1, r22
    3364:	b1 1d       	adc	r27, r1
    3366:	67 2f       	mov	r22, r23
    3368:	78 2f       	mov	r23, r24
    336a:	88 27       	eor	r24, r24
    336c:	98 5f       	subi	r25, 0xF8	; 248
    336e:	f7 cf       	rjmp	.-18     	; 0x335e <__fp_trunc+0xc>
    3370:	86 95       	lsr	r24
    3372:	77 95       	ror	r23
    3374:	67 95       	ror	r22
    3376:	b1 1d       	adc	r27, r1
    3378:	93 95       	inc	r25
    337a:	96 39       	cpi	r25, 0x96	; 150
    337c:	c8 f3       	brcs	.-14     	; 0x3370 <__fp_trunc+0x1e>
    337e:	08 95       	ret

00003380 <__fp_zero>:
    3380:	e8 94       	clt

00003382 <__fp_szero>:
    3382:	bb 27       	eor	r27, r27
    3384:	66 27       	eor	r22, r22
    3386:	77 27       	eor	r23, r23
    3388:	cb 01       	movw	r24, r22
    338a:	97 f9       	bld	r25, 7
    338c:	08 95       	ret

0000338e <__gesf2>:
    338e:	ec de       	rcall	.-552    	; 0x3168 <__fp_cmp>
    3390:	08 f4       	brcc	.+2      	; 0x3394 <__gesf2+0x6>
    3392:	8f ef       	ldi	r24, 0xFF	; 255
    3394:	08 95       	ret

00003396 <inverse>:
    3396:	9b 01       	movw	r18, r22
    3398:	ac 01       	movw	r20, r24
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	80 e8       	ldi	r24, 0x80	; 128
    33a0:	9f e3       	ldi	r25, 0x3F	; 63
    33a2:	f9 cd       	rjmp	.-1038   	; 0x2f96 <__divsf3>

000033a4 <log10>:
    33a4:	0a d0       	rcall	.+20     	; 0x33ba <log>
    33a6:	29 ed       	ldi	r18, 0xD9	; 217
    33a8:	3b e5       	ldi	r19, 0x5B	; 91
    33aa:	4e ed       	ldi	r20, 0xDE	; 222
    33ac:	5e e3       	ldi	r21, 0x3E	; 62
    33ae:	78 c0       	rjmp	.+240    	; 0x34a0 <__mulsf3>
    33b0:	0e f0       	brts	.+2      	; 0x33b4 <log10+0x10>
    33b2:	1f cf       	rjmp	.-450    	; 0x31f2 <__fp_mpack>
    33b4:	2c cf       	rjmp	.-424    	; 0x320e <__fp_nan>
    33b6:	68 94       	set
    33b8:	fb ce       	rjmp	.-522    	; 0x31b0 <__fp_inf>

000033ba <log>:
    33ba:	b1 df       	rcall	.-158    	; 0x331e <__fp_splitA>
    33bc:	c8 f3       	brcs	.-14     	; 0x33b0 <log10+0xc>
    33be:	99 23       	and	r25, r25
    33c0:	d1 f3       	breq	.-12     	; 0x33b6 <log10+0x12>
    33c2:	c6 f3       	brts	.-16     	; 0x33b4 <log10+0x10>
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	1f 93       	push	r17
    33ca:	0f 93       	push	r16
    33cc:	ff 92       	push	r15
    33ce:	c9 2f       	mov	r28, r25
    33d0:	dd 27       	eor	r29, r29
    33d2:	88 23       	and	r24, r24
    33d4:	2a f0       	brmi	.+10     	; 0x33e0 <log+0x26>
    33d6:	21 97       	sbiw	r28, 0x01	; 1
    33d8:	66 0f       	add	r22, r22
    33da:	77 1f       	adc	r23, r23
    33dc:	88 1f       	adc	r24, r24
    33de:	da f7       	brpl	.-10     	; 0x33d6 <log+0x1c>
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e8       	ldi	r20, 0x80	; 128
    33e6:	5f eb       	ldi	r21, 0xBF	; 191
    33e8:	9f e3       	ldi	r25, 0x3F	; 63
    33ea:	88 39       	cpi	r24, 0x98	; 152
    33ec:	20 f0       	brcs	.+8      	; 0x33f6 <log+0x3c>
    33ee:	80 3e       	cpi	r24, 0xE0	; 224
    33f0:	30 f0       	brcs	.+12     	; 0x33fe <log+0x44>
    33f2:	21 96       	adiw	r28, 0x01	; 1
    33f4:	8f 77       	andi	r24, 0x7F	; 127
    33f6:	02 dd       	rcall	.-1532   	; 0x2dfc <__addsf3>
    33f8:	ed e0       	ldi	r30, 0x0D	; 13
    33fa:	f1 e0       	ldi	r31, 0x01	; 1
    33fc:	03 c0       	rjmp	.+6      	; 0x3404 <log+0x4a>
    33fe:	fe dc       	rcall	.-1540   	; 0x2dfc <__addsf3>
    3400:	ea e3       	ldi	r30, 0x3A	; 58
    3402:	f1 e0       	ldi	r31, 0x01	; 1
    3404:	07 df       	rcall	.-498    	; 0x3214 <__fp_powser>
    3406:	8b 01       	movw	r16, r22
    3408:	be 01       	movw	r22, r28
    340a:	ec 01       	movw	r28, r24
    340c:	fb 2e       	mov	r15, r27
    340e:	6f 57       	subi	r22, 0x7F	; 127
    3410:	71 09       	sbc	r23, r1
    3412:	75 95       	asr	r23
    3414:	77 1f       	adc	r23, r23
    3416:	88 0b       	sbc	r24, r24
    3418:	99 0b       	sbc	r25, r25
    341a:	58 de       	rcall	.-848    	; 0x30cc <__floatsisf>
    341c:	28 e1       	ldi	r18, 0x18	; 24
    341e:	32 e7       	ldi	r19, 0x72	; 114
    3420:	41 e3       	ldi	r20, 0x31	; 49
    3422:	5f e3       	ldi	r21, 0x3F	; 63
    3424:	49 d0       	rcall	.+146    	; 0x34b8 <__mulsf3x>
    3426:	af 2d       	mov	r26, r15
    3428:	98 01       	movw	r18, r16
    342a:	ae 01       	movw	r20, r28
    342c:	ff 90       	pop	r15
    342e:	0f 91       	pop	r16
    3430:	1f 91       	pop	r17
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	f3 dc       	rcall	.-1562   	; 0x2e1e <__addsf3x>
    3438:	48 cf       	rjmp	.-368    	; 0x32ca <__fp_round>

0000343a <modf>:
    343a:	fa 01       	movw	r30, r20
    343c:	dc 01       	movw	r26, r24
    343e:	aa 0f       	add	r26, r26
    3440:	bb 1f       	adc	r27, r27
    3442:	9b 01       	movw	r18, r22
    3444:	ac 01       	movw	r20, r24
    3446:	bf 57       	subi	r27, 0x7F	; 127
    3448:	28 f4       	brcc	.+10     	; 0x3454 <modf+0x1a>
    344a:	22 27       	eor	r18, r18
    344c:	33 27       	eor	r19, r19
    344e:	44 27       	eor	r20, r20
    3450:	50 78       	andi	r21, 0x80	; 128
    3452:	1f c0       	rjmp	.+62     	; 0x3492 <modf+0x58>
    3454:	b7 51       	subi	r27, 0x17	; 23
    3456:	88 f4       	brcc	.+34     	; 0x347a <modf+0x40>
    3458:	ab 2f       	mov	r26, r27
    345a:	00 24       	eor	r0, r0
    345c:	46 95       	lsr	r20
    345e:	37 95       	ror	r19
    3460:	27 95       	ror	r18
    3462:	01 1c       	adc	r0, r1
    3464:	a3 95       	inc	r26
    3466:	d2 f3       	brmi	.-12     	; 0x345c <modf+0x22>
    3468:	00 20       	and	r0, r0
    346a:	69 f0       	breq	.+26     	; 0x3486 <modf+0x4c>
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	44 1f       	adc	r20, r20
    3472:	b3 95       	inc	r27
    3474:	da f3       	brmi	.-10     	; 0x346c <modf+0x32>
    3476:	0d d0       	rcall	.+26     	; 0x3492 <modf+0x58>
    3478:	c0 cc       	rjmp	.-1664   	; 0x2dfa <__subsf3>
    347a:	61 30       	cpi	r22, 0x01	; 1
    347c:	71 05       	cpc	r23, r1
    347e:	a0 e8       	ldi	r26, 0x80	; 128
    3480:	8a 07       	cpc	r24, r26
    3482:	b9 46       	sbci	r27, 0x69	; 105
    3484:	30 f4       	brcc	.+12     	; 0x3492 <modf+0x58>
    3486:	9b 01       	movw	r18, r22
    3488:	ac 01       	movw	r20, r24
    348a:	66 27       	eor	r22, r22
    348c:	77 27       	eor	r23, r23
    348e:	88 27       	eor	r24, r24
    3490:	90 78       	andi	r25, 0x80	; 128
    3492:	30 96       	adiw	r30, 0x00	; 0
    3494:	21 f0       	breq	.+8      	; 0x349e <modf+0x64>
    3496:	20 83       	st	Z, r18
    3498:	31 83       	std	Z+1, r19	; 0x01
    349a:	42 83       	std	Z+2, r20	; 0x02
    349c:	53 83       	std	Z+3, r21	; 0x03
    349e:	08 95       	ret

000034a0 <__mulsf3>:
    34a0:	0b d0       	rcall	.+22     	; 0x34b8 <__mulsf3x>
    34a2:	13 cf       	rjmp	.-474    	; 0x32ca <__fp_round>
    34a4:	dc de       	rcall	.-584    	; 0x325e <__fp_pscA>
    34a6:	28 f0       	brcs	.+10     	; 0x34b2 <__mulsf3+0x12>
    34a8:	e1 de       	rcall	.-574    	; 0x326c <__fp_pscB>
    34aa:	18 f0       	brcs	.+6      	; 0x34b2 <__mulsf3+0x12>
    34ac:	95 23       	and	r25, r21
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <__mulsf3+0x12>
    34b0:	7f ce       	rjmp	.-770    	; 0x31b0 <__fp_inf>
    34b2:	ad ce       	rjmp	.-678    	; 0x320e <__fp_nan>
    34b4:	11 24       	eor	r1, r1
    34b6:	65 cf       	rjmp	.-310    	; 0x3382 <__fp_szero>

000034b8 <__mulsf3x>:
    34b8:	2a df       	rcall	.-428    	; 0x330e <__fp_split3>
    34ba:	a0 f3       	brcs	.-24     	; 0x34a4 <__mulsf3+0x4>

000034bc <__mulsf3_pse>:
    34bc:	95 9f       	mul	r25, r21
    34be:	d1 f3       	breq	.-12     	; 0x34b4 <__mulsf3+0x14>
    34c0:	95 0f       	add	r25, r21
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	55 1f       	adc	r21, r21
    34c6:	62 9f       	mul	r22, r18
    34c8:	f0 01       	movw	r30, r0
    34ca:	72 9f       	mul	r23, r18
    34cc:	bb 27       	eor	r27, r27
    34ce:	f0 0d       	add	r31, r0
    34d0:	b1 1d       	adc	r27, r1
    34d2:	63 9f       	mul	r22, r19
    34d4:	aa 27       	eor	r26, r26
    34d6:	f0 0d       	add	r31, r0
    34d8:	b1 1d       	adc	r27, r1
    34da:	aa 1f       	adc	r26, r26
    34dc:	64 9f       	mul	r22, r20
    34de:	66 27       	eor	r22, r22
    34e0:	b0 0d       	add	r27, r0
    34e2:	a1 1d       	adc	r26, r1
    34e4:	66 1f       	adc	r22, r22
    34e6:	82 9f       	mul	r24, r18
    34e8:	22 27       	eor	r18, r18
    34ea:	b0 0d       	add	r27, r0
    34ec:	a1 1d       	adc	r26, r1
    34ee:	62 1f       	adc	r22, r18
    34f0:	73 9f       	mul	r23, r19
    34f2:	b0 0d       	add	r27, r0
    34f4:	a1 1d       	adc	r26, r1
    34f6:	62 1f       	adc	r22, r18
    34f8:	83 9f       	mul	r24, r19
    34fa:	a0 0d       	add	r26, r0
    34fc:	61 1d       	adc	r22, r1
    34fe:	22 1f       	adc	r18, r18
    3500:	74 9f       	mul	r23, r20
    3502:	33 27       	eor	r19, r19
    3504:	a0 0d       	add	r26, r0
    3506:	61 1d       	adc	r22, r1
    3508:	23 1f       	adc	r18, r19
    350a:	84 9f       	mul	r24, r20
    350c:	60 0d       	add	r22, r0
    350e:	21 1d       	adc	r18, r1
    3510:	82 2f       	mov	r24, r18
    3512:	76 2f       	mov	r23, r22
    3514:	6a 2f       	mov	r22, r26
    3516:	11 24       	eor	r1, r1
    3518:	9f 57       	subi	r25, 0x7F	; 127
    351a:	50 40       	sbci	r21, 0x00	; 0
    351c:	8a f0       	brmi	.+34     	; 0x3540 <__mulsf3_pse+0x84>
    351e:	e1 f0       	breq	.+56     	; 0x3558 <__mulsf3_pse+0x9c>
    3520:	88 23       	and	r24, r24
    3522:	4a f0       	brmi	.+18     	; 0x3536 <__mulsf3_pse+0x7a>
    3524:	ee 0f       	add	r30, r30
    3526:	ff 1f       	adc	r31, r31
    3528:	bb 1f       	adc	r27, r27
    352a:	66 1f       	adc	r22, r22
    352c:	77 1f       	adc	r23, r23
    352e:	88 1f       	adc	r24, r24
    3530:	91 50       	subi	r25, 0x01	; 1
    3532:	50 40       	sbci	r21, 0x00	; 0
    3534:	a9 f7       	brne	.-22     	; 0x3520 <__mulsf3_pse+0x64>
    3536:	9e 3f       	cpi	r25, 0xFE	; 254
    3538:	51 05       	cpc	r21, r1
    353a:	70 f0       	brcs	.+28     	; 0x3558 <__mulsf3_pse+0x9c>
    353c:	39 ce       	rjmp	.-910    	; 0x31b0 <__fp_inf>
    353e:	21 cf       	rjmp	.-446    	; 0x3382 <__fp_szero>
    3540:	5f 3f       	cpi	r21, 0xFF	; 255
    3542:	ec f3       	brlt	.-6      	; 0x353e <__mulsf3_pse+0x82>
    3544:	98 3e       	cpi	r25, 0xE8	; 232
    3546:	dc f3       	brlt	.-10     	; 0x353e <__mulsf3_pse+0x82>
    3548:	86 95       	lsr	r24
    354a:	77 95       	ror	r23
    354c:	67 95       	ror	r22
    354e:	b7 95       	ror	r27
    3550:	f7 95       	ror	r31
    3552:	e7 95       	ror	r30
    3554:	9f 5f       	subi	r25, 0xFF	; 255
    3556:	c1 f7       	brne	.-16     	; 0x3548 <__mulsf3_pse+0x8c>
    3558:	fe 2b       	or	r31, r30
    355a:	88 0f       	add	r24, r24
    355c:	91 1d       	adc	r25, r1
    355e:	96 95       	lsr	r25
    3560:	87 95       	ror	r24
    3562:	97 f9       	bld	r25, 7
    3564:	08 95       	ret

00003566 <pow>:
    3566:	fa 01       	movw	r30, r20
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	30 96       	adiw	r30, 0x00	; 0
    356e:	21 05       	cpc	r18, r1
    3570:	31 05       	cpc	r19, r1
    3572:	99 f1       	breq	.+102    	; 0x35da <pow+0x74>
    3574:	61 15       	cp	r22, r1
    3576:	71 05       	cpc	r23, r1
    3578:	61 f4       	brne	.+24     	; 0x3592 <pow+0x2c>
    357a:	80 38       	cpi	r24, 0x80	; 128
    357c:	bf e3       	ldi	r27, 0x3F	; 63
    357e:	9b 07       	cpc	r25, r27
    3580:	49 f1       	breq	.+82     	; 0x35d4 <pow+0x6e>
    3582:	68 94       	set
    3584:	90 38       	cpi	r25, 0x80	; 128
    3586:	81 05       	cpc	r24, r1
    3588:	61 f0       	breq	.+24     	; 0x35a2 <pow+0x3c>
    358a:	80 38       	cpi	r24, 0x80	; 128
    358c:	bf ef       	ldi	r27, 0xFF	; 255
    358e:	9b 07       	cpc	r25, r27
    3590:	41 f0       	breq	.+16     	; 0x35a2 <pow+0x3c>
    3592:	99 23       	and	r25, r25
    3594:	42 f5       	brpl	.+80     	; 0x35e6 <pow+0x80>
    3596:	ff 3f       	cpi	r31, 0xFF	; 255
    3598:	e1 05       	cpc	r30, r1
    359a:	31 05       	cpc	r19, r1
    359c:	21 05       	cpc	r18, r1
    359e:	11 f1       	breq	.+68     	; 0x35e4 <pow+0x7e>
    35a0:	e8 94       	clt
    35a2:	08 94       	sec
    35a4:	e7 95       	ror	r30
    35a6:	d9 01       	movw	r26, r18
    35a8:	aa 23       	and	r26, r26
    35aa:	29 f4       	brne	.+10     	; 0x35b6 <pow+0x50>
    35ac:	ab 2f       	mov	r26, r27
    35ae:	be 2f       	mov	r27, r30
    35b0:	f8 5f       	subi	r31, 0xF8	; 248
    35b2:	d0 f3       	brcs	.-12     	; 0x35a8 <pow+0x42>
    35b4:	10 c0       	rjmp	.+32     	; 0x35d6 <pow+0x70>
    35b6:	ff 5f       	subi	r31, 0xFF	; 255
    35b8:	70 f4       	brcc	.+28     	; 0x35d6 <pow+0x70>
    35ba:	a6 95       	lsr	r26
    35bc:	e0 f7       	brcc	.-8      	; 0x35b6 <pow+0x50>
    35be:	f7 39       	cpi	r31, 0x97	; 151
    35c0:	50 f0       	brcs	.+20     	; 0x35d6 <pow+0x70>
    35c2:	19 f0       	breq	.+6      	; 0x35ca <pow+0x64>
    35c4:	ff 3a       	cpi	r31, 0xAF	; 175
    35c6:	38 f4       	brcc	.+14     	; 0x35d6 <pow+0x70>
    35c8:	9f 77       	andi	r25, 0x7F	; 127
    35ca:	9f 93       	push	r25
    35cc:	0c d0       	rcall	.+24     	; 0x35e6 <pow+0x80>
    35ce:	0f 90       	pop	r0
    35d0:	07 fc       	sbrc	r0, 7
    35d2:	90 58       	subi	r25, 0x80	; 128
    35d4:	08 95       	ret
    35d6:	3e f0       	brts	.+14     	; 0x35e6 <pow+0x80>
    35d8:	1a ce       	rjmp	.-972    	; 0x320e <__fp_nan>
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	80 e8       	ldi	r24, 0x80	; 128
    35e0:	9f e3       	ldi	r25, 0x3F	; 63
    35e2:	08 95       	ret
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	9f 77       	andi	r25, 0x7F	; 127
    35e8:	5f 93       	push	r21
    35ea:	4f 93       	push	r20
    35ec:	3f 93       	push	r19
    35ee:	2f 93       	push	r18
    35f0:	e4 de       	rcall	.-568    	; 0x33ba <log>
    35f2:	2f 91       	pop	r18
    35f4:	3f 91       	pop	r19
    35f6:	4f 91       	pop	r20
    35f8:	5f 91       	pop	r21
    35fa:	52 df       	rcall	.-348    	; 0x34a0 <__mulsf3>
    35fc:	70 c0       	rjmp	.+224    	; 0x36de <exp>

000035fe <round>:
    35fe:	8f de       	rcall	.-738    	; 0x331e <__fp_splitA>
    3600:	e0 f0       	brcs	.+56     	; 0x363a <round+0x3c>
    3602:	9e 37       	cpi	r25, 0x7E	; 126
    3604:	d8 f0       	brcs	.+54     	; 0x363c <round+0x3e>
    3606:	96 39       	cpi	r25, 0x96	; 150
    3608:	b8 f4       	brcc	.+46     	; 0x3638 <round+0x3a>
    360a:	9e 38       	cpi	r25, 0x8E	; 142
    360c:	48 f4       	brcc	.+18     	; 0x3620 <round+0x22>
    360e:	67 2f       	mov	r22, r23
    3610:	78 2f       	mov	r23, r24
    3612:	88 27       	eor	r24, r24
    3614:	98 5f       	subi	r25, 0xF8	; 248
    3616:	f9 cf       	rjmp	.-14     	; 0x360a <round+0xc>
    3618:	86 95       	lsr	r24
    361a:	77 95       	ror	r23
    361c:	67 95       	ror	r22
    361e:	93 95       	inc	r25
    3620:	95 39       	cpi	r25, 0x95	; 149
    3622:	d0 f3       	brcs	.-12     	; 0x3618 <round+0x1a>
    3624:	b6 2f       	mov	r27, r22
    3626:	b1 70       	andi	r27, 0x01	; 1
    3628:	6b 0f       	add	r22, r27
    362a:	71 1d       	adc	r23, r1
    362c:	81 1d       	adc	r24, r1
    362e:	20 f4       	brcc	.+8      	; 0x3638 <round+0x3a>
    3630:	87 95       	ror	r24
    3632:	77 95       	ror	r23
    3634:	67 95       	ror	r22
    3636:	93 95       	inc	r25
    3638:	c1 cd       	rjmp	.-1150   	; 0x31bc <__fp_mintl>
    363a:	db cd       	rjmp	.-1098   	; 0x31f2 <__fp_mpack>
    363c:	a2 ce       	rjmp	.-700    	; 0x3382 <__fp_szero>

0000363e <sin>:
    363e:	9f 93       	push	r25
    3640:	1d de       	rcall	.-966    	; 0x327c <__fp_rempio2>
    3642:	0f 90       	pop	r0
    3644:	07 fc       	sbrc	r0, 7
    3646:	ee 5f       	subi	r30, 0xFE	; 254
    3648:	51 ce       	rjmp	.-862    	; 0x32ec <__fp_sinus>
    364a:	11 f4       	brne	.+4      	; 0x3650 <sin+0x12>
    364c:	0e f4       	brtc	.+2      	; 0x3650 <sin+0x12>
    364e:	df cd       	rjmp	.-1090   	; 0x320e <__fp_nan>
    3650:	d0 cd       	rjmp	.-1120   	; 0x31f2 <__fp_mpack>

00003652 <sqrt>:
    3652:	65 de       	rcall	.-822    	; 0x331e <__fp_splitA>
    3654:	d0 f3       	brcs	.-12     	; 0x364a <sin+0xc>
    3656:	99 23       	and	r25, r25
    3658:	d9 f3       	breq	.-10     	; 0x3650 <sin+0x12>
    365a:	ce f3       	brts	.-14     	; 0x364e <sin+0x10>
    365c:	9f 57       	subi	r25, 0x7F	; 127
    365e:	55 0b       	sbc	r21, r21
    3660:	87 ff       	sbrs	r24, 7
    3662:	69 d0       	rcall	.+210    	; 0x3736 <__fp_norm2>
    3664:	00 24       	eor	r0, r0
    3666:	a0 e6       	ldi	r26, 0x60	; 96
    3668:	40 ea       	ldi	r20, 0xA0	; 160
    366a:	90 01       	movw	r18, r0
    366c:	80 58       	subi	r24, 0x80	; 128
    366e:	56 95       	lsr	r21
    3670:	97 95       	ror	r25
    3672:	28 f4       	brcc	.+10     	; 0x367e <sqrt+0x2c>
    3674:	80 5c       	subi	r24, 0xC0	; 192
    3676:	66 0f       	add	r22, r22
    3678:	77 1f       	adc	r23, r23
    367a:	88 1f       	adc	r24, r24
    367c:	20 f0       	brcs	.+8      	; 0x3686 <sqrt+0x34>
    367e:	26 17       	cp	r18, r22
    3680:	37 07       	cpc	r19, r23
    3682:	48 07       	cpc	r20, r24
    3684:	30 f4       	brcc	.+12     	; 0x3692 <sqrt+0x40>
    3686:	62 1b       	sub	r22, r18
    3688:	73 0b       	sbc	r23, r19
    368a:	84 0b       	sbc	r24, r20
    368c:	20 29       	or	r18, r0
    368e:	31 29       	or	r19, r1
    3690:	4a 2b       	or	r20, r26
    3692:	a6 95       	lsr	r26
    3694:	17 94       	ror	r1
    3696:	07 94       	ror	r0
    3698:	20 25       	eor	r18, r0
    369a:	31 25       	eor	r19, r1
    369c:	4a 27       	eor	r20, r26
    369e:	58 f7       	brcc	.-42     	; 0x3676 <sqrt+0x24>
    36a0:	66 0f       	add	r22, r22
    36a2:	77 1f       	adc	r23, r23
    36a4:	88 1f       	adc	r24, r24
    36a6:	20 f0       	brcs	.+8      	; 0x36b0 <sqrt+0x5e>
    36a8:	26 17       	cp	r18, r22
    36aa:	37 07       	cpc	r19, r23
    36ac:	48 07       	cpc	r20, r24
    36ae:	30 f4       	brcc	.+12     	; 0x36bc <sqrt+0x6a>
    36b0:	62 0b       	sbc	r22, r18
    36b2:	73 0b       	sbc	r23, r19
    36b4:	84 0b       	sbc	r24, r20
    36b6:	20 0d       	add	r18, r0
    36b8:	31 1d       	adc	r19, r1
    36ba:	41 1d       	adc	r20, r1
    36bc:	a0 95       	com	r26
    36be:	81 f7       	brne	.-32     	; 0x36a0 <sqrt+0x4e>
    36c0:	b9 01       	movw	r22, r18
    36c2:	84 2f       	mov	r24, r20
    36c4:	91 58       	subi	r25, 0x81	; 129
    36c6:	88 0f       	add	r24, r24
    36c8:	96 95       	lsr	r25
    36ca:	87 95       	ror	r24
    36cc:	08 95       	ret

000036ce <square>:
    36ce:	9b 01       	movw	r18, r22
    36d0:	ac 01       	movw	r20, r24
    36d2:	e6 ce       	rjmp	.-564    	; 0x34a0 <__mulsf3>
    36d4:	19 f4       	brne	.+6      	; 0x36dc <square+0xe>
    36d6:	0e f0       	brts	.+2      	; 0x36da <square+0xc>
    36d8:	6b cd       	rjmp	.-1322   	; 0x31b0 <__fp_inf>
    36da:	52 ce       	rjmp	.-860    	; 0x3380 <__fp_zero>
    36dc:	98 cd       	rjmp	.-1232   	; 0x320e <__fp_nan>

000036de <exp>:
    36de:	1f de       	rcall	.-962    	; 0x331e <__fp_splitA>
    36e0:	c8 f3       	brcs	.-14     	; 0x36d4 <square+0x6>
    36e2:	96 38       	cpi	r25, 0x86	; 134
    36e4:	c0 f7       	brcc	.-16     	; 0x36d6 <square+0x8>
    36e6:	07 f8       	bld	r0, 7
    36e8:	0f 92       	push	r0
    36ea:	e8 94       	clt
    36ec:	2b e3       	ldi	r18, 0x3B	; 59
    36ee:	3a ea       	ldi	r19, 0xAA	; 170
    36f0:	48 eb       	ldi	r20, 0xB8	; 184
    36f2:	5f e7       	ldi	r21, 0x7F	; 127
    36f4:	e3 de       	rcall	.-570    	; 0x34bc <__mulsf3_pse>
    36f6:	0f 92       	push	r0
    36f8:	0f 92       	push	r0
    36fa:	0f 92       	push	r0
    36fc:	4d b7       	in	r20, 0x3d	; 61
    36fe:	5e b7       	in	r21, 0x3e	; 62
    3700:	0f 92       	push	r0
    3702:	9b de       	rcall	.-714    	; 0x343a <modf>
    3704:	e7 e6       	ldi	r30, 0x67	; 103
    3706:	f1 e0       	ldi	r31, 0x01	; 1
    3708:	85 dd       	rcall	.-1270   	; 0x3214 <__fp_powser>
    370a:	4f 91       	pop	r20
    370c:	5f 91       	pop	r21
    370e:	ef 91       	pop	r30
    3710:	ff 91       	pop	r31
    3712:	e5 95       	asr	r30
    3714:	ee 1f       	adc	r30, r30
    3716:	ff 1f       	adc	r31, r31
    3718:	49 f0       	breq	.+18     	; 0x372c <exp+0x4e>
    371a:	fe 57       	subi	r31, 0x7E	; 126
    371c:	e0 68       	ori	r30, 0x80	; 128
    371e:	44 27       	eor	r20, r20
    3720:	ee 0f       	add	r30, r30
    3722:	44 1f       	adc	r20, r20
    3724:	fa 95       	dec	r31
    3726:	e1 f7       	brne	.-8      	; 0x3720 <exp+0x42>
    3728:	41 95       	neg	r20
    372a:	55 0b       	sbc	r21, r21
    372c:	1e d0       	rcall	.+60     	; 0x376a <ldexp>
    372e:	0f 90       	pop	r0
    3730:	07 fe       	sbrs	r0, 7
    3732:	31 ce       	rjmp	.-926    	; 0x3396 <inverse>
    3734:	08 95       	ret

00003736 <__fp_norm2>:
    3736:	91 50       	subi	r25, 0x01	; 1
    3738:	50 40       	sbci	r21, 0x00	; 0
    373a:	66 0f       	add	r22, r22
    373c:	77 1f       	adc	r23, r23
    373e:	88 1f       	adc	r24, r24
    3740:	d2 f7       	brpl	.-12     	; 0x3736 <__fp_norm2>
    3742:	08 95       	ret

00003744 <__fp_powsodd>:
    3744:	9f 93       	push	r25
    3746:	8f 93       	push	r24
    3748:	7f 93       	push	r23
    374a:	6f 93       	push	r22
    374c:	ff 93       	push	r31
    374e:	ef 93       	push	r30
    3750:	9b 01       	movw	r18, r22
    3752:	ac 01       	movw	r20, r24
    3754:	a5 de       	rcall	.-694    	; 0x34a0 <__mulsf3>
    3756:	ef 91       	pop	r30
    3758:	ff 91       	pop	r31
    375a:	5c dd       	rcall	.-1352   	; 0x3214 <__fp_powser>
    375c:	2f 91       	pop	r18
    375e:	3f 91       	pop	r19
    3760:	4f 91       	pop	r20
    3762:	5f 91       	pop	r21
    3764:	9d ce       	rjmp	.-710    	; 0x34a0 <__mulsf3>
    3766:	24 cd       	rjmp	.-1464   	; 0x31b0 <__fp_inf>
    3768:	44 cd       	rjmp	.-1400   	; 0x31f2 <__fp_mpack>

0000376a <ldexp>:
    376a:	d9 dd       	rcall	.-1102   	; 0x331e <__fp_splitA>
    376c:	e8 f3       	brcs	.-6      	; 0x3768 <__fp_powsodd+0x24>
    376e:	99 23       	and	r25, r25
    3770:	d9 f3       	breq	.-10     	; 0x3768 <__fp_powsodd+0x24>
    3772:	94 0f       	add	r25, r20
    3774:	51 1d       	adc	r21, r1
    3776:	bb f3       	brvs	.-18     	; 0x3766 <__fp_powsodd+0x22>
    3778:	91 50       	subi	r25, 0x01	; 1
    377a:	50 40       	sbci	r21, 0x00	; 0
    377c:	94 f0       	brlt	.+36     	; 0x37a2 <ldexp+0x38>
    377e:	59 f0       	breq	.+22     	; 0x3796 <ldexp+0x2c>
    3780:	88 23       	and	r24, r24
    3782:	32 f0       	brmi	.+12     	; 0x3790 <ldexp+0x26>
    3784:	66 0f       	add	r22, r22
    3786:	77 1f       	adc	r23, r23
    3788:	88 1f       	adc	r24, r24
    378a:	91 50       	subi	r25, 0x01	; 1
    378c:	50 40       	sbci	r21, 0x00	; 0
    378e:	c1 f7       	brne	.-16     	; 0x3780 <ldexp+0x16>
    3790:	9e 3f       	cpi	r25, 0xFE	; 254
    3792:	51 05       	cpc	r21, r1
    3794:	44 f7       	brge	.-48     	; 0x3766 <__fp_powsodd+0x22>
    3796:	88 0f       	add	r24, r24
    3798:	91 1d       	adc	r25, r1
    379a:	96 95       	lsr	r25
    379c:	87 95       	ror	r24
    379e:	97 f9       	bld	r25, 7
    37a0:	08 95       	ret
    37a2:	5f 3f       	cpi	r21, 0xFF	; 255
    37a4:	ac f0       	brlt	.+42     	; 0x37d0 <ldexp+0x66>
    37a6:	98 3e       	cpi	r25, 0xE8	; 232
    37a8:	9c f0       	brlt	.+38     	; 0x37d0 <ldexp+0x66>
    37aa:	bb 27       	eor	r27, r27
    37ac:	86 95       	lsr	r24
    37ae:	77 95       	ror	r23
    37b0:	67 95       	ror	r22
    37b2:	b7 95       	ror	r27
    37b4:	08 f4       	brcc	.+2      	; 0x37b8 <ldexp+0x4e>
    37b6:	b1 60       	ori	r27, 0x01	; 1
    37b8:	93 95       	inc	r25
    37ba:	c1 f7       	brne	.-16     	; 0x37ac <ldexp+0x42>
    37bc:	bb 0f       	add	r27, r27
    37be:	58 f7       	brcc	.-42     	; 0x3796 <ldexp+0x2c>
    37c0:	11 f4       	brne	.+4      	; 0x37c6 <ldexp+0x5c>
    37c2:	60 ff       	sbrs	r22, 0
    37c4:	e8 cf       	rjmp	.-48     	; 0x3796 <ldexp+0x2c>
    37c6:	6f 5f       	subi	r22, 0xFF	; 255
    37c8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ca:	8f 4f       	sbci	r24, 0xFF	; 255
    37cc:	9f 4f       	sbci	r25, 0xFF	; 255
    37ce:	e3 cf       	rjmp	.-58     	; 0x3796 <ldexp+0x2c>
    37d0:	d8 cd       	rjmp	.-1104   	; 0x3382 <__fp_szero>

000037d2 <__tablejump2__>:
    37d2:	ee 0f       	add	r30, r30
    37d4:	ff 1f       	adc	r31, r31

000037d6 <__tablejump__>:
    37d6:	05 90       	lpm	r0, Z+
    37d8:	f4 91       	lpm	r31, Z
    37da:	e0 2d       	mov	r30, r0
    37dc:	09 94       	ijmp

000037de <malloc>:
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	82 30       	cpi	r24, 0x02	; 2
    37e4:	91 05       	cpc	r25, r1
    37e6:	10 f4       	brcc	.+4      	; 0x37ec <malloc+0xe>
    37e8:	82 e0       	ldi	r24, 0x02	; 2
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	e0 91 60 04 	lds	r30, 0x0460
    37f0:	f0 91 61 04 	lds	r31, 0x0461
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	a0 e0       	ldi	r26, 0x00	; 0
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	30 97       	sbiw	r30, 0x00	; 0
    37fe:	39 f1       	breq	.+78     	; 0x384e <malloc+0x70>
    3800:	40 81       	ld	r20, Z
    3802:	51 81       	ldd	r21, Z+1	; 0x01
    3804:	48 17       	cp	r20, r24
    3806:	59 07       	cpc	r21, r25
    3808:	b8 f0       	brcs	.+46     	; 0x3838 <malloc+0x5a>
    380a:	48 17       	cp	r20, r24
    380c:	59 07       	cpc	r21, r25
    380e:	71 f4       	brne	.+28     	; 0x382c <malloc+0x4e>
    3810:	82 81       	ldd	r24, Z+2	; 0x02
    3812:	93 81       	ldd	r25, Z+3	; 0x03
    3814:	10 97       	sbiw	r26, 0x00	; 0
    3816:	29 f0       	breq	.+10     	; 0x3822 <malloc+0x44>
    3818:	13 96       	adiw	r26, 0x03	; 3
    381a:	9c 93       	st	X, r25
    381c:	8e 93       	st	-X, r24
    381e:	12 97       	sbiw	r26, 0x02	; 2
    3820:	2c c0       	rjmp	.+88     	; 0x387a <malloc+0x9c>
    3822:	90 93 61 04 	sts	0x0461, r25
    3826:	80 93 60 04 	sts	0x0460, r24
    382a:	27 c0       	rjmp	.+78     	; 0x387a <malloc+0x9c>
    382c:	21 15       	cp	r18, r1
    382e:	31 05       	cpc	r19, r1
    3830:	31 f0       	breq	.+12     	; 0x383e <malloc+0x60>
    3832:	42 17       	cp	r20, r18
    3834:	53 07       	cpc	r21, r19
    3836:	18 f0       	brcs	.+6      	; 0x383e <malloc+0x60>
    3838:	a9 01       	movw	r20, r18
    383a:	db 01       	movw	r26, r22
    383c:	01 c0       	rjmp	.+2      	; 0x3840 <malloc+0x62>
    383e:	ef 01       	movw	r28, r30
    3840:	9a 01       	movw	r18, r20
    3842:	bd 01       	movw	r22, r26
    3844:	df 01       	movw	r26, r30
    3846:	02 80       	ldd	r0, Z+2	; 0x02
    3848:	f3 81       	ldd	r31, Z+3	; 0x03
    384a:	e0 2d       	mov	r30, r0
    384c:	d7 cf       	rjmp	.-82     	; 0x37fc <malloc+0x1e>
    384e:	21 15       	cp	r18, r1
    3850:	31 05       	cpc	r19, r1
    3852:	f9 f0       	breq	.+62     	; 0x3892 <malloc+0xb4>
    3854:	28 1b       	sub	r18, r24
    3856:	39 0b       	sbc	r19, r25
    3858:	24 30       	cpi	r18, 0x04	; 4
    385a:	31 05       	cpc	r19, r1
    385c:	80 f4       	brcc	.+32     	; 0x387e <malloc+0xa0>
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	9b 81       	ldd	r25, Y+3	; 0x03
    3862:	61 15       	cp	r22, r1
    3864:	71 05       	cpc	r23, r1
    3866:	21 f0       	breq	.+8      	; 0x3870 <malloc+0x92>
    3868:	fb 01       	movw	r30, r22
    386a:	93 83       	std	Z+3, r25	; 0x03
    386c:	82 83       	std	Z+2, r24	; 0x02
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <malloc+0x9a>
    3870:	90 93 61 04 	sts	0x0461, r25
    3874:	80 93 60 04 	sts	0x0460, r24
    3878:	fe 01       	movw	r30, r28
    387a:	32 96       	adiw	r30, 0x02	; 2
    387c:	44 c0       	rjmp	.+136    	; 0x3906 <malloc+0x128>
    387e:	fe 01       	movw	r30, r28
    3880:	e2 0f       	add	r30, r18
    3882:	f3 1f       	adc	r31, r19
    3884:	81 93       	st	Z+, r24
    3886:	91 93       	st	Z+, r25
    3888:	22 50       	subi	r18, 0x02	; 2
    388a:	31 09       	sbc	r19, r1
    388c:	39 83       	std	Y+1, r19	; 0x01
    388e:	28 83       	st	Y, r18
    3890:	3a c0       	rjmp	.+116    	; 0x3906 <malloc+0x128>
    3892:	20 91 5e 04 	lds	r18, 0x045E
    3896:	30 91 5f 04 	lds	r19, 0x045F
    389a:	23 2b       	or	r18, r19
    389c:	41 f4       	brne	.+16     	; 0x38ae <malloc+0xd0>
    389e:	20 91 04 01 	lds	r18, 0x0104
    38a2:	30 91 05 01 	lds	r19, 0x0105
    38a6:	30 93 5f 04 	sts	0x045F, r19
    38aa:	20 93 5e 04 	sts	0x045E, r18
    38ae:	20 91 02 01 	lds	r18, 0x0102
    38b2:	30 91 03 01 	lds	r19, 0x0103
    38b6:	21 15       	cp	r18, r1
    38b8:	31 05       	cpc	r19, r1
    38ba:	41 f4       	brne	.+16     	; 0x38cc <malloc+0xee>
    38bc:	2d b7       	in	r18, 0x3d	; 61
    38be:	3e b7       	in	r19, 0x3e	; 62
    38c0:	40 91 06 01 	lds	r20, 0x0106
    38c4:	50 91 07 01 	lds	r21, 0x0107
    38c8:	24 1b       	sub	r18, r20
    38ca:	35 0b       	sbc	r19, r21
    38cc:	e0 91 5e 04 	lds	r30, 0x045E
    38d0:	f0 91 5f 04 	lds	r31, 0x045F
    38d4:	e2 17       	cp	r30, r18
    38d6:	f3 07       	cpc	r31, r19
    38d8:	a0 f4       	brcc	.+40     	; 0x3902 <malloc+0x124>
    38da:	2e 1b       	sub	r18, r30
    38dc:	3f 0b       	sbc	r19, r31
    38de:	28 17       	cp	r18, r24
    38e0:	39 07       	cpc	r19, r25
    38e2:	78 f0       	brcs	.+30     	; 0x3902 <malloc+0x124>
    38e4:	ac 01       	movw	r20, r24
    38e6:	4e 5f       	subi	r20, 0xFE	; 254
    38e8:	5f 4f       	sbci	r21, 0xFF	; 255
    38ea:	24 17       	cp	r18, r20
    38ec:	35 07       	cpc	r19, r21
    38ee:	48 f0       	brcs	.+18     	; 0x3902 <malloc+0x124>
    38f0:	4e 0f       	add	r20, r30
    38f2:	5f 1f       	adc	r21, r31
    38f4:	50 93 5f 04 	sts	0x045F, r21
    38f8:	40 93 5e 04 	sts	0x045E, r20
    38fc:	81 93       	st	Z+, r24
    38fe:	91 93       	st	Z+, r25
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <malloc+0x128>
    3902:	e0 e0       	ldi	r30, 0x00	; 0
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	cf 01       	movw	r24, r30
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <free>:
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	09 f4       	brne	.+2      	; 0x3918 <free+0xa>
    3916:	87 c0       	rjmp	.+270    	; 0x3a26 <free+0x118>
    3918:	fc 01       	movw	r30, r24
    391a:	32 97       	sbiw	r30, 0x02	; 2
    391c:	13 82       	std	Z+3, r1	; 0x03
    391e:	12 82       	std	Z+2, r1	; 0x02
    3920:	c0 91 60 04 	lds	r28, 0x0460
    3924:	d0 91 61 04 	lds	r29, 0x0461
    3928:	20 97       	sbiw	r28, 0x00	; 0
    392a:	81 f4       	brne	.+32     	; 0x394c <free+0x3e>
    392c:	20 81       	ld	r18, Z
    392e:	31 81       	ldd	r19, Z+1	; 0x01
    3930:	28 0f       	add	r18, r24
    3932:	39 1f       	adc	r19, r25
    3934:	80 91 5e 04 	lds	r24, 0x045E
    3938:	90 91 5f 04 	lds	r25, 0x045F
    393c:	82 17       	cp	r24, r18
    393e:	93 07       	cpc	r25, r19
    3940:	79 f5       	brne	.+94     	; 0x39a0 <free+0x92>
    3942:	f0 93 5f 04 	sts	0x045F, r31
    3946:	e0 93 5e 04 	sts	0x045E, r30
    394a:	6d c0       	rjmp	.+218    	; 0x3a26 <free+0x118>
    394c:	de 01       	movw	r26, r28
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	ae 17       	cp	r26, r30
    3954:	bf 07       	cpc	r27, r31
    3956:	50 f4       	brcc	.+20     	; 0x396c <free+0x5e>
    3958:	12 96       	adiw	r26, 0x02	; 2
    395a:	4d 91       	ld	r20, X+
    395c:	5c 91       	ld	r21, X
    395e:	13 97       	sbiw	r26, 0x03	; 3
    3960:	9d 01       	movw	r18, r26
    3962:	41 15       	cp	r20, r1
    3964:	51 05       	cpc	r21, r1
    3966:	09 f1       	breq	.+66     	; 0x39aa <free+0x9c>
    3968:	da 01       	movw	r26, r20
    396a:	f3 cf       	rjmp	.-26     	; 0x3952 <free+0x44>
    396c:	b3 83       	std	Z+3, r27	; 0x03
    396e:	a2 83       	std	Z+2, r26	; 0x02
    3970:	40 81       	ld	r20, Z
    3972:	51 81       	ldd	r21, Z+1	; 0x01
    3974:	84 0f       	add	r24, r20
    3976:	95 1f       	adc	r25, r21
    3978:	8a 17       	cp	r24, r26
    397a:	9b 07       	cpc	r25, r27
    397c:	71 f4       	brne	.+28     	; 0x399a <free+0x8c>
    397e:	8d 91       	ld	r24, X+
    3980:	9c 91       	ld	r25, X
    3982:	11 97       	sbiw	r26, 0x01	; 1
    3984:	84 0f       	add	r24, r20
    3986:	95 1f       	adc	r25, r21
    3988:	02 96       	adiw	r24, 0x02	; 2
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	80 83       	st	Z, r24
    398e:	12 96       	adiw	r26, 0x02	; 2
    3990:	8d 91       	ld	r24, X+
    3992:	9c 91       	ld	r25, X
    3994:	13 97       	sbiw	r26, 0x03	; 3
    3996:	93 83       	std	Z+3, r25	; 0x03
    3998:	82 83       	std	Z+2, r24	; 0x02
    399a:	21 15       	cp	r18, r1
    399c:	31 05       	cpc	r19, r1
    399e:	29 f4       	brne	.+10     	; 0x39aa <free+0x9c>
    39a0:	f0 93 61 04 	sts	0x0461, r31
    39a4:	e0 93 60 04 	sts	0x0460, r30
    39a8:	3e c0       	rjmp	.+124    	; 0x3a26 <free+0x118>
    39aa:	d9 01       	movw	r26, r18
    39ac:	13 96       	adiw	r26, 0x03	; 3
    39ae:	fc 93       	st	X, r31
    39b0:	ee 93       	st	-X, r30
    39b2:	12 97       	sbiw	r26, 0x02	; 2
    39b4:	4d 91       	ld	r20, X+
    39b6:	5d 91       	ld	r21, X+
    39b8:	a4 0f       	add	r26, r20
    39ba:	b5 1f       	adc	r27, r21
    39bc:	ea 17       	cp	r30, r26
    39be:	fb 07       	cpc	r31, r27
    39c0:	79 f4       	brne	.+30     	; 0x39e0 <free+0xd2>
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	84 0f       	add	r24, r20
    39c8:	95 1f       	adc	r25, r21
    39ca:	02 96       	adiw	r24, 0x02	; 2
    39cc:	d9 01       	movw	r26, r18
    39ce:	11 96       	adiw	r26, 0x01	; 1
    39d0:	9c 93       	st	X, r25
    39d2:	8e 93       	st	-X, r24
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	13 96       	adiw	r26, 0x03	; 3
    39da:	9c 93       	st	X, r25
    39dc:	8e 93       	st	-X, r24
    39de:	12 97       	sbiw	r26, 0x02	; 2
    39e0:	e0 e0       	ldi	r30, 0x00	; 0
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	9b 81       	ldd	r25, Y+3	; 0x03
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	19 f0       	breq	.+6      	; 0x39f2 <free+0xe4>
    39ec:	fe 01       	movw	r30, r28
    39ee:	ec 01       	movw	r28, r24
    39f0:	f9 cf       	rjmp	.-14     	; 0x39e4 <free+0xd6>
    39f2:	ce 01       	movw	r24, r28
    39f4:	02 96       	adiw	r24, 0x02	; 2
    39f6:	28 81       	ld	r18, Y
    39f8:	39 81       	ldd	r19, Y+1	; 0x01
    39fa:	82 0f       	add	r24, r18
    39fc:	93 1f       	adc	r25, r19
    39fe:	20 91 5e 04 	lds	r18, 0x045E
    3a02:	30 91 5f 04 	lds	r19, 0x045F
    3a06:	28 17       	cp	r18, r24
    3a08:	39 07       	cpc	r19, r25
    3a0a:	69 f4       	brne	.+26     	; 0x3a26 <free+0x118>
    3a0c:	30 97       	sbiw	r30, 0x00	; 0
    3a0e:	29 f4       	brne	.+10     	; 0x3a1a <free+0x10c>
    3a10:	10 92 61 04 	sts	0x0461, r1
    3a14:	10 92 60 04 	sts	0x0460, r1
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <free+0x110>
    3a1a:	13 82       	std	Z+3, r1	; 0x03
    3a1c:	12 82       	std	Z+2, r1	; 0x02
    3a1e:	d0 93 5f 04 	sts	0x045F, r29
    3a22:	c0 93 5e 04 	sts	0x045E, r28
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	08 95       	ret

00003a2c <strtod>:
    3a2c:	4f 92       	push	r4
    3a2e:	5f 92       	push	r5
    3a30:	6f 92       	push	r6
    3a32:	7f 92       	push	r7
    3a34:	8f 92       	push	r8
    3a36:	9f 92       	push	r9
    3a38:	af 92       	push	r10
    3a3a:	bf 92       	push	r11
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	61 15       	cp	r22, r1
    3a50:	71 05       	cpc	r23, r1
    3a52:	21 f0       	breq	.+8      	; 0x3a5c <strtod+0x30>
    3a54:	db 01       	movw	r26, r22
    3a56:	8c 93       	st	X, r24
    3a58:	11 96       	adiw	r26, 0x01	; 1
    3a5a:	9c 93       	st	X, r25
    3a5c:	ec 01       	movw	r28, r24
    3a5e:	5e 01       	movw	r10, r28
    3a60:	bf ef       	ldi	r27, 0xFF	; 255
    3a62:	ab 1a       	sub	r10, r27
    3a64:	bb 0a       	sbc	r11, r27
    3a66:	75 01       	movw	r14, r10
    3a68:	c8 80       	ld	r12, Y
    3a6a:	8c 2d       	mov	r24, r12
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <isspace>
    3a72:	89 2b       	or	r24, r25
    3a74:	11 f0       	breq	.+4      	; 0x3a7a <strtod+0x4e>
    3a76:	e5 01       	movw	r28, r10
    3a78:	f2 cf       	rjmp	.-28     	; 0x3a5e <strtod+0x32>
    3a7a:	ed e2       	ldi	r30, 0x2D	; 45
    3a7c:	ce 12       	cpse	r12, r30
    3a7e:	08 c0       	rjmp	.+16     	; 0x3a90 <strtod+0x64>
    3a80:	7e 01       	movw	r14, r28
    3a82:	f2 e0       	ldi	r31, 0x02	; 2
    3a84:	ef 0e       	add	r14, r31
    3a86:	f1 1c       	adc	r15, r1
    3a88:	c9 80       	ldd	r12, Y+1	; 0x01
    3a8a:	dd 24       	eor	r13, r13
    3a8c:	d3 94       	inc	r13
    3a8e:	09 c0       	rjmp	.+18     	; 0x3aa2 <strtod+0x76>
    3a90:	2b e2       	ldi	r18, 0x2B	; 43
    3a92:	c2 12       	cpse	r12, r18
    3a94:	05 c0       	rjmp	.+10     	; 0x3aa0 <strtod+0x74>
    3a96:	7e 01       	movw	r14, r28
    3a98:	42 e0       	ldi	r20, 0x02	; 2
    3a9a:	e4 0e       	add	r14, r20
    3a9c:	f1 1c       	adc	r15, r1
    3a9e:	c9 80       	ldd	r12, Y+1	; 0x01
    3aa0:	d1 2c       	mov	r13, r1
    3aa2:	e7 01       	movw	r28, r14
    3aa4:	21 97       	sbiw	r28, 0x01	; 1
    3aa6:	43 e0       	ldi	r20, 0x03	; 3
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	67 e9       	ldi	r22, 0x97	; 151
    3aac:	71 e0       	ldi	r23, 0x01	; 1
    3aae:	ce 01       	movw	r24, r28
    3ab0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <strncasecmp_P>
    3ab4:	89 2b       	or	r24, r25
    3ab6:	d1 f4       	brne	.+52     	; 0x3aec <strtod+0xc0>
    3ab8:	e7 01       	movw	r28, r14
    3aba:	22 96       	adiw	r28, 0x02	; 2
    3abc:	45 e0       	ldi	r20, 0x05	; 5
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	62 e9       	ldi	r22, 0x92	; 146
    3ac2:	71 e0       	ldi	r23, 0x01	; 1
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <strncasecmp_P>
    3aca:	89 2b       	or	r24, r25
    3acc:	11 f4       	brne	.+4      	; 0x3ad2 <strtod+0xa6>
    3ace:	e7 01       	movw	r28, r14
    3ad0:	27 96       	adiw	r28, 0x07	; 7
    3ad2:	01 15       	cp	r16, r1
    3ad4:	11 05       	cpc	r17, r1
    3ad6:	19 f0       	breq	.+6      	; 0x3ade <strtod+0xb2>
    3ad8:	d8 01       	movw	r26, r16
    3ada:	cd 93       	st	X+, r28
    3adc:	dc 93       	st	X, r29
    3ade:	d1 10       	cpse	r13, r1
    3ae0:	08 c1       	rjmp	.+528    	; 0x3cf2 <strtod+0x2c6>
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	80 e8       	ldi	r24, 0x80	; 128
    3ae8:	9f e7       	ldi	r25, 0x7F	; 127
    3aea:	0c c1       	rjmp	.+536    	; 0x3d04 <strtod+0x2d8>
    3aec:	43 e0       	ldi	r20, 0x03	; 3
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	6f e8       	ldi	r22, 0x8F	; 143
    3af2:	71 e0       	ldi	r23, 0x01	; 1
    3af4:	ce 01       	movw	r24, r28
    3af6:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <strncasecmp_P>
    3afa:	89 2b       	or	r24, r25
    3afc:	59 f4       	brne	.+22     	; 0x3b14 <strtod+0xe8>
    3afe:	01 15       	cp	r16, r1
    3b00:	11 05       	cpc	r17, r1
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <strtod+0xda>
    3b04:	fb c0       	rjmp	.+502    	; 0x3cfc <strtod+0x2d0>
    3b06:	b2 e0       	ldi	r27, 0x02	; 2
    3b08:	eb 0e       	add	r14, r27
    3b0a:	f1 1c       	adc	r15, r1
    3b0c:	f8 01       	movw	r30, r16
    3b0e:	f1 82       	std	Z+1, r15	; 0x01
    3b10:	e0 82       	st	Z, r14
    3b12:	f4 c0       	rjmp	.+488    	; 0x3cfc <strtod+0x2d0>
    3b14:	f7 01       	movw	r30, r14
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	70 e0       	ldi	r23, 0x00	; 0
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	c0 e0       	ldi	r28, 0x00	; 0
    3b1e:	d0 e0       	ldi	r29, 0x00	; 0
    3b20:	7f 01       	movw	r14, r30
    3b22:	a0 ed       	ldi	r26, 0xD0	; 208
    3b24:	aa 2e       	mov	r10, r26
    3b26:	ac 0c       	add	r10, r12
    3b28:	29 e0       	ldi	r18, 0x09	; 9
    3b2a:	2a 15       	cp	r18, r10
    3b2c:	30 f1       	brcs	.+76     	; 0x3b7a <strtod+0x14e>
    3b2e:	4d 2d       	mov	r20, r13
    3b30:	42 60       	ori	r20, 0x02	; 2
    3b32:	b4 2e       	mov	r11, r20
    3b34:	2d 2d       	mov	r18, r13
    3b36:	28 70       	andi	r18, 0x08	; 8
    3b38:	d2 fe       	sbrs	r13, 2
    3b3a:	04 c0       	rjmp	.+8      	; 0x3b44 <strtod+0x118>
    3b3c:	21 11       	cpse	r18, r1
    3b3e:	25 c0       	rjmp	.+74     	; 0x3b8a <strtod+0x15e>
    3b40:	21 96       	adiw	r28, 0x01	; 1
    3b42:	23 c0       	rjmp	.+70     	; 0x3b8a <strtod+0x15e>
    3b44:	21 11       	cpse	r18, r1
    3b46:	21 97       	sbiw	r28, 0x01	; 1
    3b48:	a5 e0       	ldi	r26, 0x05	; 5
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	9b 01       	movw	r18, r22
    3b4e:	ac 01       	movw	r20, r24
    3b50:	0e 94 df 21 	call	0x43be	; 0x43be <__muluhisi3>
    3b54:	66 0f       	add	r22, r22
    3b56:	77 1f       	adc	r23, r23
    3b58:	88 1f       	adc	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	6a 0d       	add	r22, r10
    3b5e:	71 1d       	adc	r23, r1
    3b60:	81 1d       	adc	r24, r1
    3b62:	91 1d       	adc	r25, r1
    3b64:	68 39       	cpi	r22, 0x98	; 152
    3b66:	a9 e9       	ldi	r26, 0x99	; 153
    3b68:	7a 07       	cpc	r23, r26
    3b6a:	8a 07       	cpc	r24, r26
    3b6c:	a9 e1       	ldi	r26, 0x19	; 25
    3b6e:	9a 07       	cpc	r25, r26
    3b70:	60 f0       	brcs	.+24     	; 0x3b8a <strtod+0x15e>
    3b72:	bd 2d       	mov	r27, r13
    3b74:	b6 60       	ori	r27, 0x06	; 6
    3b76:	bb 2e       	mov	r11, r27
    3b78:	08 c0       	rjmp	.+16     	; 0x3b8a <strtod+0x15e>
    3b7a:	2e ef       	ldi	r18, 0xFE	; 254
    3b7c:	a2 12       	cpse	r10, r18
    3b7e:	0a c0       	rjmp	.+20     	; 0x3b94 <strtod+0x168>
    3b80:	d3 fc       	sbrc	r13, 3
    3b82:	50 c0       	rjmp	.+160    	; 0x3c24 <strtod+0x1f8>
    3b84:	4d 2d       	mov	r20, r13
    3b86:	48 60       	ori	r20, 0x08	; 8
    3b88:	b4 2e       	mov	r11, r20
    3b8a:	31 96       	adiw	r30, 0x01	; 1
    3b8c:	d7 01       	movw	r26, r14
    3b8e:	cc 90       	ld	r12, X
    3b90:	db 2c       	mov	r13, r11
    3b92:	c6 cf       	rjmp	.-116    	; 0x3b20 <strtod+0xf4>
    3b94:	2c 2d       	mov	r18, r12
    3b96:	2f 7d       	andi	r18, 0xDF	; 223
    3b98:	25 34       	cpi	r18, 0x45	; 69
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <strtod+0x172>
    3b9c:	43 c0       	rjmp	.+134    	; 0x3c24 <strtod+0x1f8>
    3b9e:	a0 81       	ld	r26, Z
    3ba0:	ad 32       	cpi	r26, 0x2D	; 45
    3ba2:	41 f4       	brne	.+16     	; 0x3bb4 <strtod+0x188>
    3ba4:	bd 2d       	mov	r27, r13
    3ba6:	b0 61       	ori	r27, 0x10	; 16
    3ba8:	db 2e       	mov	r13, r27
    3baa:	7f 01       	movw	r14, r30
    3bac:	22 e0       	ldi	r18, 0x02	; 2
    3bae:	e2 0e       	add	r14, r18
    3bb0:	f1 1c       	adc	r15, r1
    3bb2:	0c c0       	rjmp	.+24     	; 0x3bcc <strtod+0x1a0>
    3bb4:	7f 01       	movw	r14, r30
    3bb6:	ab 32       	cpi	r26, 0x2B	; 43
    3bb8:	31 f0       	breq	.+12     	; 0x3bc6 <strtod+0x19a>
    3bba:	4f ef       	ldi	r20, 0xFF	; 255
    3bbc:	e4 1a       	sub	r14, r20
    3bbe:	f4 0a       	sbc	r15, r20
    3bc0:	21 e0       	ldi	r18, 0x01	; 1
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	06 c0       	rjmp	.+12     	; 0x3bd2 <strtod+0x1a6>
    3bc6:	a2 e0       	ldi	r26, 0x02	; 2
    3bc8:	ea 0e       	add	r14, r26
    3bca:	f1 1c       	adc	r15, r1
    3bcc:	a1 81       	ldd	r26, Z+1	; 0x01
    3bce:	22 e0       	ldi	r18, 0x02	; 2
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	a0 53       	subi	r26, 0x30	; 48
    3bd4:	aa 30       	cpi	r26, 0x0A	; 10
    3bd6:	18 f0       	brcs	.+6      	; 0x3bde <strtod+0x1b2>
    3bd8:	e2 1a       	sub	r14, r18
    3bda:	f3 0a       	sbc	r15, r19
    3bdc:	23 c0       	rjmp	.+70     	; 0x3c24 <strtod+0x1f8>
    3bde:	f7 01       	movw	r30, r14
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	20 38       	cpi	r18, 0x80	; 128
    3be6:	bc e0       	ldi	r27, 0x0C	; 12
    3be8:	3b 07       	cpc	r19, r27
    3bea:	5c f4       	brge	.+22     	; 0x3c02 <strtod+0x1d6>
    3bec:	a9 01       	movw	r20, r18
    3bee:	44 0f       	add	r20, r20
    3bf0:	55 1f       	adc	r21, r21
    3bf2:	44 0f       	add	r20, r20
    3bf4:	55 1f       	adc	r21, r21
    3bf6:	24 0f       	add	r18, r20
    3bf8:	35 1f       	adc	r19, r21
    3bfa:	22 0f       	add	r18, r18
    3bfc:	33 1f       	adc	r19, r19
    3bfe:	2a 0f       	add	r18, r26
    3c00:	31 1d       	adc	r19, r1
    3c02:	af 01       	movw	r20, r30
    3c04:	4f 5f       	subi	r20, 0xFF	; 255
    3c06:	5f 4f       	sbci	r21, 0xFF	; 255
    3c08:	7a 01       	movw	r14, r20
    3c0a:	a0 81       	ld	r26, Z
    3c0c:	a0 53       	subi	r26, 0x30	; 48
    3c0e:	aa 30       	cpi	r26, 0x0A	; 10
    3c10:	10 f4       	brcc	.+4      	; 0x3c16 <strtod+0x1ea>
    3c12:	fa 01       	movw	r30, r20
    3c14:	e7 cf       	rjmp	.-50     	; 0x3be4 <strtod+0x1b8>
    3c16:	d4 fe       	sbrs	r13, 4
    3c18:	03 c0       	rjmp	.+6      	; 0x3c20 <strtod+0x1f4>
    3c1a:	31 95       	neg	r19
    3c1c:	21 95       	neg	r18
    3c1e:	31 09       	sbc	r19, r1
    3c20:	c2 0f       	add	r28, r18
    3c22:	d3 1f       	adc	r29, r19
    3c24:	d1 fe       	sbrs	r13, 1
    3c26:	09 c0       	rjmp	.+18     	; 0x3c3a <strtod+0x20e>
    3c28:	01 15       	cp	r16, r1
    3c2a:	11 05       	cpc	r17, r1
    3c2c:	31 f0       	breq	.+12     	; 0x3c3a <strtod+0x20e>
    3c2e:	e1 e0       	ldi	r30, 0x01	; 1
    3c30:	ee 1a       	sub	r14, r30
    3c32:	f1 08       	sbc	r15, r1
    3c34:	d8 01       	movw	r26, r16
    3c36:	ed 92       	st	X+, r14
    3c38:	fc 92       	st	X, r15
    3c3a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__floatunsisf>
    3c3e:	2d 2d       	mov	r18, r13
    3c40:	23 70       	andi	r18, 0x03	; 3
    3c42:	23 30       	cpi	r18, 0x03	; 3
    3c44:	19 f0       	breq	.+6      	; 0x3c4c <strtod+0x220>
    3c46:	6b 01       	movw	r12, r22
    3c48:	7c 01       	movw	r14, r24
    3c4a:	06 c0       	rjmp	.+12     	; 0x3c58 <strtod+0x22c>
    3c4c:	6b 01       	movw	r12, r22
    3c4e:	7c 01       	movw	r14, r24
    3c50:	f7 fa       	bst	r15, 7
    3c52:	f0 94       	com	r15
    3c54:	f7 f8       	bld	r15, 7
    3c56:	f0 94       	com	r15
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	a9 01       	movw	r20, r18
    3c5e:	c7 01       	movw	r24, r14
    3c60:	b6 01       	movw	r22, r12
    3c62:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <strtod+0x240>
    3c6a:	40 c0       	rjmp	.+128    	; 0x3cec <strtod+0x2c0>
    3c6c:	d7 ff       	sbrs	r29, 7
    3c6e:	06 c0       	rjmp	.+12     	; 0x3c7c <strtod+0x250>
    3c70:	d1 95       	neg	r29
    3c72:	c1 95       	neg	r28
    3c74:	d1 09       	sbc	r29, r1
    3c76:	0e ea       	ldi	r16, 0xAE	; 174
    3c78:	11 e0       	ldi	r17, 0x01	; 1
    3c7a:	02 c0       	rjmp	.+4      	; 0x3c80 <strtod+0x254>
    3c7c:	06 ec       	ldi	r16, 0xC6	; 198
    3c7e:	11 e0       	ldi	r17, 0x01	; 1
    3c80:	48 01       	movw	r8, r16
    3c82:	b8 e1       	ldi	r27, 0x18	; 24
    3c84:	8b 1a       	sub	r8, r27
    3c86:	91 08       	sbc	r9, r1
    3c88:	90 e2       	ldi	r25, 0x20	; 32
    3c8a:	a9 2e       	mov	r10, r25
    3c8c:	b1 2c       	mov	r11, r1
    3c8e:	f8 01       	movw	r30, r16
    3c90:	45 90       	lpm	r4, Z+
    3c92:	55 90       	lpm	r5, Z+
    3c94:	65 90       	lpm	r6, Z+
    3c96:	74 90       	lpm	r7, Z
    3c98:	ca 15       	cp	r28, r10
    3c9a:	db 05       	cpc	r29, r11
    3c9c:	5c f0       	brlt	.+22     	; 0x3cb4 <strtod+0x288>
    3c9e:	a3 01       	movw	r20, r6
    3ca0:	92 01       	movw	r18, r4
    3ca2:	c7 01       	movw	r24, r14
    3ca4:	b6 01       	movw	r22, r12
    3ca6:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
    3caa:	6b 01       	movw	r12, r22
    3cac:	7c 01       	movw	r14, r24
    3cae:	ca 19       	sub	r28, r10
    3cb0:	db 09       	sbc	r29, r11
    3cb2:	f2 cf       	rjmp	.-28     	; 0x3c98 <strtod+0x26c>
    3cb4:	04 50       	subi	r16, 0x04	; 4
    3cb6:	11 09       	sbc	r17, r1
    3cb8:	b5 94       	asr	r11
    3cba:	a7 94       	ror	r10
    3cbc:	08 15       	cp	r16, r8
    3cbe:	19 05       	cpc	r17, r9
    3cc0:	31 f7       	brne	.-52     	; 0x3c8e <strtod+0x262>
    3cc2:	8e 2d       	mov	r24, r14
    3cc4:	88 0f       	add	r24, r24
    3cc6:	8f 2d       	mov	r24, r15
    3cc8:	88 1f       	adc	r24, r24
    3cca:	8f 3f       	cpi	r24, 0xFF	; 255
    3ccc:	49 f0       	breq	.+18     	; 0x3ce0 <strtod+0x2b4>
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	a9 01       	movw	r20, r18
    3cd4:	c7 01       	movw	r24, r14
    3cd6:	b6 01       	movw	r22, r12
    3cd8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__cmpsf2>
    3cdc:	81 11       	cpse	r24, r1
    3cde:	06 c0       	rjmp	.+12     	; 0x3cec <strtod+0x2c0>
    3ce0:	82 e2       	ldi	r24, 0x22	; 34
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	90 93 63 04 	sts	0x0463, r25
    3ce8:	80 93 62 04 	sts	0x0462, r24
    3cec:	c7 01       	movw	r24, r14
    3cee:	b6 01       	movw	r22, r12
    3cf0:	09 c0       	rjmp	.+18     	; 0x3d04 <strtod+0x2d8>
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	80 e8       	ldi	r24, 0x80	; 128
    3cf8:	9f ef       	ldi	r25, 0xFF	; 255
    3cfa:	04 c0       	rjmp	.+8      	; 0x3d04 <strtod+0x2d8>
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	80 ec       	ldi	r24, 0xC0	; 192
    3d02:	9f e7       	ldi	r25, 0x7F	; 127
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	1f 91       	pop	r17
    3d0a:	0f 91       	pop	r16
    3d0c:	ff 90       	pop	r15
    3d0e:	ef 90       	pop	r14
    3d10:	df 90       	pop	r13
    3d12:	cf 90       	pop	r12
    3d14:	bf 90       	pop	r11
    3d16:	af 90       	pop	r10
    3d18:	9f 90       	pop	r9
    3d1a:	8f 90       	pop	r8
    3d1c:	7f 90       	pop	r7
    3d1e:	6f 90       	pop	r6
    3d20:	5f 90       	pop	r5
    3d22:	4f 90       	pop	r4
    3d24:	08 95       	ret

00003d26 <isspace>:
    3d26:	91 11       	cpse	r25, r1
    3d28:	a1 c2       	rjmp	.+1346   	; 0x426c <__ctype_isfalse>
    3d2a:	80 32       	cpi	r24, 0x20	; 32
    3d2c:	19 f0       	breq	.+6      	; 0x3d34 <isspace+0xe>
    3d2e:	89 50       	subi	r24, 0x09	; 9
    3d30:	85 50       	subi	r24, 0x05	; 5
    3d32:	d0 f7       	brcc	.-12     	; 0x3d28 <isspace+0x2>
    3d34:	08 95       	ret

00003d36 <strncasecmp_P>:
    3d36:	fb 01       	movw	r30, r22
    3d38:	dc 01       	movw	r26, r24
    3d3a:	41 50       	subi	r20, 0x01	; 1
    3d3c:	50 40       	sbci	r21, 0x00	; 0
    3d3e:	88 f0       	brcs	.+34     	; 0x3d62 <strncasecmp_P+0x2c>
    3d40:	8d 91       	ld	r24, X+
    3d42:	81 34       	cpi	r24, 0x41	; 65
    3d44:	1c f0       	brlt	.+6      	; 0x3d4c <strncasecmp_P+0x16>
    3d46:	8b 35       	cpi	r24, 0x5B	; 91
    3d48:	0c f4       	brge	.+2      	; 0x3d4c <strncasecmp_P+0x16>
    3d4a:	80 5e       	subi	r24, 0xE0	; 224
    3d4c:	65 91       	lpm	r22, Z+
    3d4e:	61 34       	cpi	r22, 0x41	; 65
    3d50:	1c f0       	brlt	.+6      	; 0x3d58 <strncasecmp_P+0x22>
    3d52:	6b 35       	cpi	r22, 0x5B	; 91
    3d54:	0c f4       	brge	.+2      	; 0x3d58 <strncasecmp_P+0x22>
    3d56:	60 5e       	subi	r22, 0xE0	; 224
    3d58:	86 1b       	sub	r24, r22
    3d5a:	61 11       	cpse	r22, r1
    3d5c:	71 f3       	breq	.-36     	; 0x3d3a <strncasecmp_P+0x4>
    3d5e:	99 0b       	sbc	r25, r25
    3d60:	08 95       	ret
    3d62:	88 1b       	sub	r24, r24
    3d64:	fc cf       	rjmp	.-8      	; 0x3d5e <strncasecmp_P+0x28>

00003d66 <strcmp>:
    3d66:	fb 01       	movw	r30, r22
    3d68:	dc 01       	movw	r26, r24
    3d6a:	8d 91       	ld	r24, X+
    3d6c:	01 90       	ld	r0, Z+
    3d6e:	80 19       	sub	r24, r0
    3d70:	01 10       	cpse	r0, r1
    3d72:	d9 f3       	breq	.-10     	; 0x3d6a <strcmp+0x4>
    3d74:	99 0b       	sbc	r25, r25
    3d76:	08 95       	ret

00003d78 <strcpy>:
    3d78:	fb 01       	movw	r30, r22
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	01 90       	ld	r0, Z+
    3d7e:	0d 92       	st	X+, r0
    3d80:	00 20       	and	r0, r0
    3d82:	e1 f7       	brne	.-8      	; 0x3d7c <strcpy+0x4>
    3d84:	08 95       	ret

00003d86 <strncpy>:
    3d86:	fb 01       	movw	r30, r22
    3d88:	dc 01       	movw	r26, r24
    3d8a:	41 50       	subi	r20, 0x01	; 1
    3d8c:	50 40       	sbci	r21, 0x00	; 0
    3d8e:	48 f0       	brcs	.+18     	; 0x3da2 <strncpy+0x1c>
    3d90:	01 90       	ld	r0, Z+
    3d92:	0d 92       	st	X+, r0
    3d94:	00 20       	and	r0, r0
    3d96:	c9 f7       	brne	.-14     	; 0x3d8a <strncpy+0x4>
    3d98:	01 c0       	rjmp	.+2      	; 0x3d9c <strncpy+0x16>
    3d9a:	1d 92       	st	X+, r1
    3d9c:	41 50       	subi	r20, 0x01	; 1
    3d9e:	50 40       	sbci	r21, 0x00	; 0
    3da0:	e0 f7       	brcc	.-8      	; 0x3d9a <strncpy+0x14>
    3da2:	08 95       	ret

00003da4 <strpbrk>:
    3da4:	dc 01       	movw	r26, r24
    3da6:	99 27       	eor	r25, r25
    3da8:	8d 91       	ld	r24, X+
    3daa:	88 23       	and	r24, r24
    3dac:	41 f0       	breq	.+16     	; 0x3dbe <strpbrk+0x1a>
    3dae:	fb 01       	movw	r30, r22
    3db0:	01 90       	ld	r0, Z+
    3db2:	08 16       	cp	r0, r24
    3db4:	01 10       	cpse	r0, r1
    3db6:	e1 f7       	brne	.-8      	; 0x3db0 <strpbrk+0xc>
    3db8:	b9 f7       	brne	.-18     	; 0x3da8 <strpbrk+0x4>
    3dba:	11 97       	sbiw	r26, 0x01	; 1
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	08 95       	ret

00003dc0 <sprintf>:
    3dc0:	0f 93       	push	r16
    3dc2:	1f 93       	push	r17
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    3dcc:	2e 97       	sbiw	r28, 0x0e	; 14
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	de bf       	out	0x3e, r29	; 62
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	cd bf       	out	0x3d, r28	; 61
    3dd8:	0d 89       	ldd	r16, Y+21	; 0x15
    3dda:	1e 89       	ldd	r17, Y+22	; 0x16
    3ddc:	86 e0       	ldi	r24, 0x06	; 6
    3dde:	8c 83       	std	Y+4, r24	; 0x04
    3de0:	1a 83       	std	Y+2, r17	; 0x02
    3de2:	09 83       	std	Y+1, r16	; 0x01
    3de4:	8f ef       	ldi	r24, 0xFF	; 255
    3de6:	9f e7       	ldi	r25, 0x7F	; 127
    3de8:	9e 83       	std	Y+6, r25	; 0x06
    3dea:	8d 83       	std	Y+5, r24	; 0x05
    3dec:	ae 01       	movw	r20, r28
    3dee:	47 5e       	subi	r20, 0xE7	; 231
    3df0:	5f 4f       	sbci	r21, 0xFF	; 255
    3df2:	6f 89       	ldd	r22, Y+23	; 0x17
    3df4:	78 8d       	ldd	r23, Y+24	; 0x18
    3df6:	ce 01       	movw	r24, r28
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <vfprintf>
    3dfe:	ef 81       	ldd	r30, Y+7	; 0x07
    3e00:	f8 85       	ldd	r31, Y+8	; 0x08
    3e02:	e0 0f       	add	r30, r16
    3e04:	f1 1f       	adc	r31, r17
    3e06:	10 82       	st	Z, r1
    3e08:	2e 96       	adiw	r28, 0x0e	; 14
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	08 95       	ret

00003e1e <vfprintf>:
    3e1e:	2f 92       	push	r2
    3e20:	3f 92       	push	r3
    3e22:	4f 92       	push	r4
    3e24:	5f 92       	push	r5
    3e26:	6f 92       	push	r6
    3e28:	7f 92       	push	r7
    3e2a:	8f 92       	push	r8
    3e2c:	9f 92       	push	r9
    3e2e:	af 92       	push	r10
    3e30:	bf 92       	push	r11
    3e32:	cf 92       	push	r12
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	2c 97       	sbiw	r28, 0x0c	; 12
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	7c 01       	movw	r14, r24
    3e54:	6b 01       	movw	r12, r22
    3e56:	8a 01       	movw	r16, r20
    3e58:	fc 01       	movw	r30, r24
    3e5a:	17 82       	std	Z+7, r1	; 0x07
    3e5c:	16 82       	std	Z+6, r1	; 0x06
    3e5e:	83 81       	ldd	r24, Z+3	; 0x03
    3e60:	81 ff       	sbrs	r24, 1
    3e62:	bd c1       	rjmp	.+890    	; 0x41de <__stack+0xdf>
    3e64:	ce 01       	movw	r24, r28
    3e66:	01 96       	adiw	r24, 0x01	; 1
    3e68:	4c 01       	movw	r8, r24
    3e6a:	f7 01       	movw	r30, r14
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	f6 01       	movw	r30, r12
    3e70:	93 fd       	sbrc	r25, 3
    3e72:	85 91       	lpm	r24, Z+
    3e74:	93 ff       	sbrs	r25, 3
    3e76:	81 91       	ld	r24, Z+
    3e78:	6f 01       	movw	r12, r30
    3e7a:	88 23       	and	r24, r24
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <vfprintf+0x62>
    3e7e:	ab c1       	rjmp	.+854    	; 0x41d6 <__stack+0xd7>
    3e80:	85 32       	cpi	r24, 0x25	; 37
    3e82:	39 f4       	brne	.+14     	; 0x3e92 <vfprintf+0x74>
    3e84:	93 fd       	sbrc	r25, 3
    3e86:	85 91       	lpm	r24, Z+
    3e88:	93 ff       	sbrs	r25, 3
    3e8a:	81 91       	ld	r24, Z+
    3e8c:	6f 01       	movw	r12, r30
    3e8e:	85 32       	cpi	r24, 0x25	; 37
    3e90:	29 f4       	brne	.+10     	; 0x3e9c <vfprintf+0x7e>
    3e92:	b7 01       	movw	r22, r14
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    3e9a:	e7 cf       	rjmp	.-50     	; 0x3e6a <vfprintf+0x4c>
    3e9c:	51 2c       	mov	r5, r1
    3e9e:	31 2c       	mov	r3, r1
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	20 32       	cpi	r18, 0x20	; 32
    3ea4:	a0 f4       	brcc	.+40     	; 0x3ece <vfprintf+0xb0>
    3ea6:	8b 32       	cpi	r24, 0x2B	; 43
    3ea8:	69 f0       	breq	.+26     	; 0x3ec4 <vfprintf+0xa6>
    3eaa:	30 f4       	brcc	.+12     	; 0x3eb8 <vfprintf+0x9a>
    3eac:	80 32       	cpi	r24, 0x20	; 32
    3eae:	59 f0       	breq	.+22     	; 0x3ec6 <vfprintf+0xa8>
    3eb0:	83 32       	cpi	r24, 0x23	; 35
    3eb2:	69 f4       	brne	.+26     	; 0x3ece <vfprintf+0xb0>
    3eb4:	20 61       	ori	r18, 0x10	; 16
    3eb6:	2c c0       	rjmp	.+88     	; 0x3f10 <vfprintf+0xf2>
    3eb8:	8d 32       	cpi	r24, 0x2D	; 45
    3eba:	39 f0       	breq	.+14     	; 0x3eca <vfprintf+0xac>
    3ebc:	80 33       	cpi	r24, 0x30	; 48
    3ebe:	39 f4       	brne	.+14     	; 0x3ece <vfprintf+0xb0>
    3ec0:	21 60       	ori	r18, 0x01	; 1
    3ec2:	26 c0       	rjmp	.+76     	; 0x3f10 <vfprintf+0xf2>
    3ec4:	22 60       	ori	r18, 0x02	; 2
    3ec6:	24 60       	ori	r18, 0x04	; 4
    3ec8:	23 c0       	rjmp	.+70     	; 0x3f10 <vfprintf+0xf2>
    3eca:	28 60       	ori	r18, 0x08	; 8
    3ecc:	21 c0       	rjmp	.+66     	; 0x3f10 <vfprintf+0xf2>
    3ece:	27 fd       	sbrc	r18, 7
    3ed0:	27 c0       	rjmp	.+78     	; 0x3f20 <vfprintf+0x102>
    3ed2:	30 ed       	ldi	r19, 0xD0	; 208
    3ed4:	38 0f       	add	r19, r24
    3ed6:	3a 30       	cpi	r19, 0x0A	; 10
    3ed8:	78 f4       	brcc	.+30     	; 0x3ef8 <vfprintf+0xda>
    3eda:	26 ff       	sbrs	r18, 6
    3edc:	06 c0       	rjmp	.+12     	; 0x3eea <vfprintf+0xcc>
    3ede:	fa e0       	ldi	r31, 0x0A	; 10
    3ee0:	5f 9e       	mul	r5, r31
    3ee2:	30 0d       	add	r19, r0
    3ee4:	11 24       	eor	r1, r1
    3ee6:	53 2e       	mov	r5, r19
    3ee8:	13 c0       	rjmp	.+38     	; 0x3f10 <vfprintf+0xf2>
    3eea:	8a e0       	ldi	r24, 0x0A	; 10
    3eec:	38 9e       	mul	r3, r24
    3eee:	30 0d       	add	r19, r0
    3ef0:	11 24       	eor	r1, r1
    3ef2:	33 2e       	mov	r3, r19
    3ef4:	20 62       	ori	r18, 0x20	; 32
    3ef6:	0c c0       	rjmp	.+24     	; 0x3f10 <vfprintf+0xf2>
    3ef8:	8e 32       	cpi	r24, 0x2E	; 46
    3efa:	21 f4       	brne	.+8      	; 0x3f04 <vfprintf+0xe6>
    3efc:	26 fd       	sbrc	r18, 6
    3efe:	6b c1       	rjmp	.+726    	; 0x41d6 <__stack+0xd7>
    3f00:	20 64       	ori	r18, 0x40	; 64
    3f02:	06 c0       	rjmp	.+12     	; 0x3f10 <vfprintf+0xf2>
    3f04:	8c 36       	cpi	r24, 0x6C	; 108
    3f06:	11 f4       	brne	.+4      	; 0x3f0c <vfprintf+0xee>
    3f08:	20 68       	ori	r18, 0x80	; 128
    3f0a:	02 c0       	rjmp	.+4      	; 0x3f10 <vfprintf+0xf2>
    3f0c:	88 36       	cpi	r24, 0x68	; 104
    3f0e:	41 f4       	brne	.+16     	; 0x3f20 <vfprintf+0x102>
    3f10:	f6 01       	movw	r30, r12
    3f12:	93 fd       	sbrc	r25, 3
    3f14:	85 91       	lpm	r24, Z+
    3f16:	93 ff       	sbrs	r25, 3
    3f18:	81 91       	ld	r24, Z+
    3f1a:	6f 01       	movw	r12, r30
    3f1c:	81 11       	cpse	r24, r1
    3f1e:	c1 cf       	rjmp	.-126    	; 0x3ea2 <vfprintf+0x84>
    3f20:	98 2f       	mov	r25, r24
    3f22:	9f 7d       	andi	r25, 0xDF	; 223
    3f24:	95 54       	subi	r25, 0x45	; 69
    3f26:	93 30       	cpi	r25, 0x03	; 3
    3f28:	28 f4       	brcc	.+10     	; 0x3f34 <vfprintf+0x116>
    3f2a:	0c 5f       	subi	r16, 0xFC	; 252
    3f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2e:	ff e3       	ldi	r31, 0x3F	; 63
    3f30:	f9 83       	std	Y+1, r31	; 0x01
    3f32:	0d c0       	rjmp	.+26     	; 0x3f4e <vfprintf+0x130>
    3f34:	83 36       	cpi	r24, 0x63	; 99
    3f36:	31 f0       	breq	.+12     	; 0x3f44 <vfprintf+0x126>
    3f38:	83 37       	cpi	r24, 0x73	; 115
    3f3a:	71 f0       	breq	.+28     	; 0x3f58 <vfprintf+0x13a>
    3f3c:	83 35       	cpi	r24, 0x53	; 83
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <vfprintf+0x124>
    3f40:	5b c0       	rjmp	.+182    	; 0x3ff8 <vfprintf+0x1da>
    3f42:	22 c0       	rjmp	.+68     	; 0x3f88 <vfprintf+0x16a>
    3f44:	f8 01       	movw	r30, r16
    3f46:	80 81       	ld	r24, Z
    3f48:	89 83       	std	Y+1, r24	; 0x01
    3f4a:	0e 5f       	subi	r16, 0xFE	; 254
    3f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4e:	44 24       	eor	r4, r4
    3f50:	43 94       	inc	r4
    3f52:	51 2c       	mov	r5, r1
    3f54:	54 01       	movw	r10, r8
    3f56:	15 c0       	rjmp	.+42     	; 0x3f82 <vfprintf+0x164>
    3f58:	38 01       	movw	r6, r16
    3f5a:	f2 e0       	ldi	r31, 0x02	; 2
    3f5c:	6f 0e       	add	r6, r31
    3f5e:	71 1c       	adc	r7, r1
    3f60:	f8 01       	movw	r30, r16
    3f62:	a0 80       	ld	r10, Z
    3f64:	b1 80       	ldd	r11, Z+1	; 0x01
    3f66:	26 ff       	sbrs	r18, 6
    3f68:	03 c0       	rjmp	.+6      	; 0x3f70 <vfprintf+0x152>
    3f6a:	65 2d       	mov	r22, r5
    3f6c:	70 e0       	ldi	r23, 0x00	; 0
    3f6e:	02 c0       	rjmp	.+4      	; 0x3f74 <vfprintf+0x156>
    3f70:	6f ef       	ldi	r22, 0xFF	; 255
    3f72:	7f ef       	ldi	r23, 0xFF	; 255
    3f74:	c5 01       	movw	r24, r10
    3f76:	2c 87       	std	Y+12, r18	; 0x0c
    3f78:	0e 94 44 21 	call	0x4288	; 0x4288 <strnlen>
    3f7c:	2c 01       	movw	r4, r24
    3f7e:	83 01       	movw	r16, r6
    3f80:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f82:	2f 77       	andi	r18, 0x7F	; 127
    3f84:	22 2e       	mov	r2, r18
    3f86:	17 c0       	rjmp	.+46     	; 0x3fb6 <vfprintf+0x198>
    3f88:	38 01       	movw	r6, r16
    3f8a:	f2 e0       	ldi	r31, 0x02	; 2
    3f8c:	6f 0e       	add	r6, r31
    3f8e:	71 1c       	adc	r7, r1
    3f90:	f8 01       	movw	r30, r16
    3f92:	a0 80       	ld	r10, Z
    3f94:	b1 80       	ldd	r11, Z+1	; 0x01
    3f96:	26 ff       	sbrs	r18, 6
    3f98:	03 c0       	rjmp	.+6      	; 0x3fa0 <vfprintf+0x182>
    3f9a:	65 2d       	mov	r22, r5
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	02 c0       	rjmp	.+4      	; 0x3fa4 <vfprintf+0x186>
    3fa0:	6f ef       	ldi	r22, 0xFF	; 255
    3fa2:	7f ef       	ldi	r23, 0xFF	; 255
    3fa4:	c5 01       	movw	r24, r10
    3fa6:	2c 87       	std	Y+12, r18	; 0x0c
    3fa8:	0e 94 39 21 	call	0x4272	; 0x4272 <strnlen_P>
    3fac:	2c 01       	movw	r4, r24
    3fae:	2c 85       	ldd	r18, Y+12	; 0x0c
    3fb0:	20 68       	ori	r18, 0x80	; 128
    3fb2:	22 2e       	mov	r2, r18
    3fb4:	83 01       	movw	r16, r6
    3fb6:	23 fc       	sbrc	r2, 3
    3fb8:	1b c0       	rjmp	.+54     	; 0x3ff0 <vfprintf+0x1d2>
    3fba:	83 2d       	mov	r24, r3
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	48 16       	cp	r4, r24
    3fc0:	59 06       	cpc	r5, r25
    3fc2:	b0 f4       	brcc	.+44     	; 0x3ff0 <vfprintf+0x1d2>
    3fc4:	b7 01       	movw	r22, r14
    3fc6:	80 e2       	ldi	r24, 0x20	; 32
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    3fce:	3a 94       	dec	r3
    3fd0:	f4 cf       	rjmp	.-24     	; 0x3fba <vfprintf+0x19c>
    3fd2:	f5 01       	movw	r30, r10
    3fd4:	27 fc       	sbrc	r2, 7
    3fd6:	85 91       	lpm	r24, Z+
    3fd8:	27 fe       	sbrs	r2, 7
    3fda:	81 91       	ld	r24, Z+
    3fdc:	5f 01       	movw	r10, r30
    3fde:	b7 01       	movw	r22, r14
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    3fe6:	31 10       	cpse	r3, r1
    3fe8:	3a 94       	dec	r3
    3fea:	f1 e0       	ldi	r31, 0x01	; 1
    3fec:	4f 1a       	sub	r4, r31
    3fee:	51 08       	sbc	r5, r1
    3ff0:	41 14       	cp	r4, r1
    3ff2:	51 04       	cpc	r5, r1
    3ff4:	71 f7       	brne	.-36     	; 0x3fd2 <vfprintf+0x1b4>
    3ff6:	e5 c0       	rjmp	.+458    	; 0x41c2 <__stack+0xc3>
    3ff8:	84 36       	cpi	r24, 0x64	; 100
    3ffa:	11 f0       	breq	.+4      	; 0x4000 <vfprintf+0x1e2>
    3ffc:	89 36       	cpi	r24, 0x69	; 105
    3ffe:	39 f5       	brne	.+78     	; 0x404e <vfprintf+0x230>
    4000:	f8 01       	movw	r30, r16
    4002:	27 ff       	sbrs	r18, 7
    4004:	07 c0       	rjmp	.+14     	; 0x4014 <vfprintf+0x1f6>
    4006:	60 81       	ld	r22, Z
    4008:	71 81       	ldd	r23, Z+1	; 0x01
    400a:	82 81       	ldd	r24, Z+2	; 0x02
    400c:	93 81       	ldd	r25, Z+3	; 0x03
    400e:	0c 5f       	subi	r16, 0xFC	; 252
    4010:	1f 4f       	sbci	r17, 0xFF	; 255
    4012:	08 c0       	rjmp	.+16     	; 0x4024 <vfprintf+0x206>
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	88 27       	eor	r24, r24
    401a:	77 fd       	sbrc	r23, 7
    401c:	80 95       	com	r24
    401e:	98 2f       	mov	r25, r24
    4020:	0e 5f       	subi	r16, 0xFE	; 254
    4022:	1f 4f       	sbci	r17, 0xFF	; 255
    4024:	2f 76       	andi	r18, 0x6F	; 111
    4026:	b2 2e       	mov	r11, r18
    4028:	97 ff       	sbrs	r25, 7
    402a:	09 c0       	rjmp	.+18     	; 0x403e <vfprintf+0x220>
    402c:	90 95       	com	r25
    402e:	80 95       	com	r24
    4030:	70 95       	com	r23
    4032:	61 95       	neg	r22
    4034:	7f 4f       	sbci	r23, 0xFF	; 255
    4036:	8f 4f       	sbci	r24, 0xFF	; 255
    4038:	9f 4f       	sbci	r25, 0xFF	; 255
    403a:	20 68       	ori	r18, 0x80	; 128
    403c:	b2 2e       	mov	r11, r18
    403e:	2a e0       	ldi	r18, 0x0A	; 10
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	a4 01       	movw	r20, r8
    4044:	0e 94 81 21 	call	0x4302	; 0x4302 <__ultoa_invert>
    4048:	a8 2e       	mov	r10, r24
    404a:	a8 18       	sub	r10, r8
    404c:	44 c0       	rjmp	.+136    	; 0x40d6 <vfprintf+0x2b8>
    404e:	85 37       	cpi	r24, 0x75	; 117
    4050:	29 f4       	brne	.+10     	; 0x405c <vfprintf+0x23e>
    4052:	2f 7e       	andi	r18, 0xEF	; 239
    4054:	b2 2e       	mov	r11, r18
    4056:	2a e0       	ldi	r18, 0x0A	; 10
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	25 c0       	rjmp	.+74     	; 0x40a6 <vfprintf+0x288>
    405c:	f2 2f       	mov	r31, r18
    405e:	f9 7f       	andi	r31, 0xF9	; 249
    4060:	bf 2e       	mov	r11, r31
    4062:	8f 36       	cpi	r24, 0x6F	; 111
    4064:	c1 f0       	breq	.+48     	; 0x4096 <vfprintf+0x278>
    4066:	18 f4       	brcc	.+6      	; 0x406e <vfprintf+0x250>
    4068:	88 35       	cpi	r24, 0x58	; 88
    406a:	79 f0       	breq	.+30     	; 0x408a <vfprintf+0x26c>
    406c:	b4 c0       	rjmp	.+360    	; 0x41d6 <__stack+0xd7>
    406e:	80 37       	cpi	r24, 0x70	; 112
    4070:	19 f0       	breq	.+6      	; 0x4078 <vfprintf+0x25a>
    4072:	88 37       	cpi	r24, 0x78	; 120
    4074:	21 f0       	breq	.+8      	; 0x407e <vfprintf+0x260>
    4076:	af c0       	rjmp	.+350    	; 0x41d6 <__stack+0xd7>
    4078:	2f 2f       	mov	r18, r31
    407a:	20 61       	ori	r18, 0x10	; 16
    407c:	b2 2e       	mov	r11, r18
    407e:	b4 fe       	sbrs	r11, 4
    4080:	0d c0       	rjmp	.+26     	; 0x409c <vfprintf+0x27e>
    4082:	8b 2d       	mov	r24, r11
    4084:	84 60       	ori	r24, 0x04	; 4
    4086:	b8 2e       	mov	r11, r24
    4088:	09 c0       	rjmp	.+18     	; 0x409c <vfprintf+0x27e>
    408a:	24 ff       	sbrs	r18, 4
    408c:	0a c0       	rjmp	.+20     	; 0x40a2 <vfprintf+0x284>
    408e:	9f 2f       	mov	r25, r31
    4090:	96 60       	ori	r25, 0x06	; 6
    4092:	b9 2e       	mov	r11, r25
    4094:	06 c0       	rjmp	.+12     	; 0x40a2 <vfprintf+0x284>
    4096:	28 e0       	ldi	r18, 0x08	; 8
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	05 c0       	rjmp	.+10     	; 0x40a6 <vfprintf+0x288>
    409c:	20 e1       	ldi	r18, 0x10	; 16
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	02 c0       	rjmp	.+4      	; 0x40a6 <vfprintf+0x288>
    40a2:	20 e1       	ldi	r18, 0x10	; 16
    40a4:	32 e0       	ldi	r19, 0x02	; 2
    40a6:	f8 01       	movw	r30, r16
    40a8:	b7 fe       	sbrs	r11, 7
    40aa:	07 c0       	rjmp	.+14     	; 0x40ba <vfprintf+0x29c>
    40ac:	60 81       	ld	r22, Z
    40ae:	71 81       	ldd	r23, Z+1	; 0x01
    40b0:	82 81       	ldd	r24, Z+2	; 0x02
    40b2:	93 81       	ldd	r25, Z+3	; 0x03
    40b4:	0c 5f       	subi	r16, 0xFC	; 252
    40b6:	1f 4f       	sbci	r17, 0xFF	; 255
    40b8:	06 c0       	rjmp	.+12     	; 0x40c6 <vfprintf+0x2a8>
    40ba:	60 81       	ld	r22, Z
    40bc:	71 81       	ldd	r23, Z+1	; 0x01
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 5f       	subi	r16, 0xFE	; 254
    40c4:	1f 4f       	sbci	r17, 0xFF	; 255
    40c6:	a4 01       	movw	r20, r8
    40c8:	0e 94 81 21 	call	0x4302	; 0x4302 <__ultoa_invert>
    40cc:	a8 2e       	mov	r10, r24
    40ce:	a8 18       	sub	r10, r8
    40d0:	fb 2d       	mov	r31, r11
    40d2:	ff 77       	andi	r31, 0x7F	; 127
    40d4:	bf 2e       	mov	r11, r31
    40d6:	b6 fe       	sbrs	r11, 6
    40d8:	0b c0       	rjmp	.+22     	; 0x40f0 <vfprintf+0x2d2>
    40da:	2b 2d       	mov	r18, r11
    40dc:	2e 7f       	andi	r18, 0xFE	; 254
    40de:	a5 14       	cp	r10, r5
    40e0:	50 f4       	brcc	.+20     	; 0x40f6 <vfprintf+0x2d8>
    40e2:	b4 fe       	sbrs	r11, 4
    40e4:	0a c0       	rjmp	.+20     	; 0x40fa <vfprintf+0x2dc>
    40e6:	b2 fc       	sbrc	r11, 2
    40e8:	08 c0       	rjmp	.+16     	; 0x40fa <vfprintf+0x2dc>
    40ea:	2b 2d       	mov	r18, r11
    40ec:	2e 7e       	andi	r18, 0xEE	; 238
    40ee:	05 c0       	rjmp	.+10     	; 0x40fa <vfprintf+0x2dc>
    40f0:	7a 2c       	mov	r7, r10
    40f2:	2b 2d       	mov	r18, r11
    40f4:	03 c0       	rjmp	.+6      	; 0x40fc <vfprintf+0x2de>
    40f6:	7a 2c       	mov	r7, r10
    40f8:	01 c0       	rjmp	.+2      	; 0x40fc <vfprintf+0x2de>
    40fa:	75 2c       	mov	r7, r5
    40fc:	24 ff       	sbrs	r18, 4
    40fe:	0d c0       	rjmp	.+26     	; 0x411a <__stack+0x1b>
    4100:	fe 01       	movw	r30, r28
    4102:	ea 0d       	add	r30, r10
    4104:	f1 1d       	adc	r31, r1
    4106:	80 81       	ld	r24, Z
    4108:	80 33       	cpi	r24, 0x30	; 48
    410a:	11 f4       	brne	.+4      	; 0x4110 <__stack+0x11>
    410c:	29 7e       	andi	r18, 0xE9	; 233
    410e:	09 c0       	rjmp	.+18     	; 0x4122 <__stack+0x23>
    4110:	22 ff       	sbrs	r18, 2
    4112:	06 c0       	rjmp	.+12     	; 0x4120 <__stack+0x21>
    4114:	73 94       	inc	r7
    4116:	73 94       	inc	r7
    4118:	04 c0       	rjmp	.+8      	; 0x4122 <__stack+0x23>
    411a:	82 2f       	mov	r24, r18
    411c:	86 78       	andi	r24, 0x86	; 134
    411e:	09 f0       	breq	.+2      	; 0x4122 <__stack+0x23>
    4120:	73 94       	inc	r7
    4122:	23 fd       	sbrc	r18, 3
    4124:	13 c0       	rjmp	.+38     	; 0x414c <__stack+0x4d>
    4126:	20 ff       	sbrs	r18, 0
    4128:	06 c0       	rjmp	.+12     	; 0x4136 <__stack+0x37>
    412a:	5a 2c       	mov	r5, r10
    412c:	73 14       	cp	r7, r3
    412e:	18 f4       	brcc	.+6      	; 0x4136 <__stack+0x37>
    4130:	53 0c       	add	r5, r3
    4132:	57 18       	sub	r5, r7
    4134:	73 2c       	mov	r7, r3
    4136:	73 14       	cp	r7, r3
    4138:	68 f4       	brcc	.+26     	; 0x4154 <__stack+0x55>
    413a:	b7 01       	movw	r22, r14
    413c:	80 e2       	ldi	r24, 0x20	; 32
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	2c 87       	std	Y+12, r18	; 0x0c
    4142:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4146:	73 94       	inc	r7
    4148:	2c 85       	ldd	r18, Y+12	; 0x0c
    414a:	f5 cf       	rjmp	.-22     	; 0x4136 <__stack+0x37>
    414c:	73 14       	cp	r7, r3
    414e:	10 f4       	brcc	.+4      	; 0x4154 <__stack+0x55>
    4150:	37 18       	sub	r3, r7
    4152:	01 c0       	rjmp	.+2      	; 0x4156 <__stack+0x57>
    4154:	31 2c       	mov	r3, r1
    4156:	24 ff       	sbrs	r18, 4
    4158:	12 c0       	rjmp	.+36     	; 0x417e <__stack+0x7f>
    415a:	b7 01       	movw	r22, r14
    415c:	80 e3       	ldi	r24, 0x30	; 48
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	2c 87       	std	Y+12, r18	; 0x0c
    4162:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    4166:	2c 85       	ldd	r18, Y+12	; 0x0c
    4168:	22 ff       	sbrs	r18, 2
    416a:	17 c0       	rjmp	.+46     	; 0x419a <__stack+0x9b>
    416c:	21 ff       	sbrs	r18, 1
    416e:	03 c0       	rjmp	.+6      	; 0x4176 <__stack+0x77>
    4170:	88 e5       	ldi	r24, 0x58	; 88
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	02 c0       	rjmp	.+4      	; 0x417a <__stack+0x7b>
    4176:	88 e7       	ldi	r24, 0x78	; 120
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	b7 01       	movw	r22, r14
    417c:	0c c0       	rjmp	.+24     	; 0x4196 <__stack+0x97>
    417e:	82 2f       	mov	r24, r18
    4180:	86 78       	andi	r24, 0x86	; 134
    4182:	59 f0       	breq	.+22     	; 0x419a <__stack+0x9b>
    4184:	21 fd       	sbrc	r18, 1
    4186:	02 c0       	rjmp	.+4      	; 0x418c <__stack+0x8d>
    4188:	80 e2       	ldi	r24, 0x20	; 32
    418a:	01 c0       	rjmp	.+2      	; 0x418e <__stack+0x8f>
    418c:	8b e2       	ldi	r24, 0x2B	; 43
    418e:	27 fd       	sbrc	r18, 7
    4190:	8d e2       	ldi	r24, 0x2D	; 45
    4192:	b7 01       	movw	r22, r14
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    419a:	a5 14       	cp	r10, r5
    419c:	38 f4       	brcc	.+14     	; 0x41ac <__stack+0xad>
    419e:	b7 01       	movw	r22, r14
    41a0:	80 e3       	ldi	r24, 0x30	; 48
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    41a8:	5a 94       	dec	r5
    41aa:	f7 cf       	rjmp	.-18     	; 0x419a <__stack+0x9b>
    41ac:	aa 94       	dec	r10
    41ae:	f4 01       	movw	r30, r8
    41b0:	ea 0d       	add	r30, r10
    41b2:	f1 1d       	adc	r31, r1
    41b4:	80 81       	ld	r24, Z
    41b6:	b7 01       	movw	r22, r14
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    41be:	a1 10       	cpse	r10, r1
    41c0:	f5 cf       	rjmp	.-22     	; 0x41ac <__stack+0xad>
    41c2:	33 20       	and	r3, r3
    41c4:	09 f4       	brne	.+2      	; 0x41c8 <__stack+0xc9>
    41c6:	51 ce       	rjmp	.-862    	; 0x3e6a <vfprintf+0x4c>
    41c8:	b7 01       	movw	r22, r14
    41ca:	80 e2       	ldi	r24, 0x20	; 32
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 4f 21 	call	0x429e	; 0x429e <fputc>
    41d2:	3a 94       	dec	r3
    41d4:	f6 cf       	rjmp	.-20     	; 0x41c2 <__stack+0xc3>
    41d6:	f7 01       	movw	r30, r14
    41d8:	86 81       	ldd	r24, Z+6	; 0x06
    41da:	97 81       	ldd	r25, Z+7	; 0x07
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <__stack+0xe3>
    41de:	8f ef       	ldi	r24, 0xFF	; 255
    41e0:	9f ef       	ldi	r25, 0xFF	; 255
    41e2:	2c 96       	adiw	r28, 0x0c	; 12
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	ff 90       	pop	r15
    41f8:	ef 90       	pop	r14
    41fa:	df 90       	pop	r13
    41fc:	cf 90       	pop	r12
    41fe:	bf 90       	pop	r11
    4200:	af 90       	pop	r10
    4202:	9f 90       	pop	r9
    4204:	8f 90       	pop	r8
    4206:	7f 90       	pop	r7
    4208:	6f 90       	pop	r6
    420a:	5f 90       	pop	r5
    420c:	4f 90       	pop	r4
    420e:	3f 90       	pop	r3
    4210:	2f 90       	pop	r2
    4212:	08 95       	ret

00004214 <__eerd_block_m1284p>:
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22

00004218 <__eerd_blraw_m1284p>:
    4218:	fc 01       	movw	r30, r24
    421a:	f9 99       	sbic	0x1f, 1	; 31
    421c:	fe cf       	rjmp	.-4      	; 0x421a <__eerd_blraw_m1284p+0x2>
    421e:	06 c0       	rjmp	.+12     	; 0x422c <__eerd_blraw_m1284p+0x14>
    4220:	f2 bd       	out	0x22, r31	; 34
    4222:	e1 bd       	out	0x21, r30	; 33
    4224:	f8 9a       	sbi	0x1f, 0	; 31
    4226:	31 96       	adiw	r30, 0x01	; 1
    4228:	00 b4       	in	r0, 0x20	; 32
    422a:	0d 92       	st	X+, r0
    422c:	41 50       	subi	r20, 0x01	; 1
    422e:	50 40       	sbci	r21, 0x00	; 0
    4230:	b8 f7       	brcc	.-18     	; 0x4220 <__eerd_blraw_m1284p+0x8>
    4232:	08 95       	ret

00004234 <__eerd_byte_m1284p>:
    4234:	f9 99       	sbic	0x1f, 1	; 31
    4236:	fe cf       	rjmp	.-4      	; 0x4234 <__eerd_byte_m1284p>
    4238:	92 bd       	out	0x22, r25	; 34
    423a:	81 bd       	out	0x21, r24	; 33
    423c:	f8 9a       	sbi	0x1f, 0	; 31
    423e:	99 27       	eor	r25, r25
    4240:	80 b5       	in	r24, 0x20	; 32
    4242:	08 95       	ret

00004244 <__eerd_dword_m1284p>:
    4244:	a6 e1       	ldi	r26, 0x16	; 22
    4246:	b0 e0       	ldi	r27, 0x00	; 0
    4248:	44 e0       	ldi	r20, 0x04	; 4
    424a:	50 e0       	ldi	r21, 0x00	; 0
    424c:	0c 94 0c 21 	jmp	0x4218	; 0x4218 <__eerd_blraw_m1284p>

00004250 <__eewr_byte_m1284p>:
    4250:	26 2f       	mov	r18, r22

00004252 <__eewr_r18_m1284p>:
    4252:	f9 99       	sbic	0x1f, 1	; 31
    4254:	fe cf       	rjmp	.-4      	; 0x4252 <__eewr_r18_m1284p>
    4256:	1f ba       	out	0x1f, r1	; 31
    4258:	92 bd       	out	0x22, r25	; 34
    425a:	81 bd       	out	0x21, r24	; 33
    425c:	20 bd       	out	0x20, r18	; 32
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	fa 9a       	sbi	0x1f, 2	; 31
    4264:	f9 9a       	sbi	0x1f, 1	; 31
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	01 96       	adiw	r24, 0x01	; 1
    426a:	08 95       	ret

0000426c <__ctype_isfalse>:
    426c:	99 27       	eor	r25, r25
    426e:	88 27       	eor	r24, r24

00004270 <__ctype_istrue>:
    4270:	08 95       	ret

00004272 <strnlen_P>:
    4272:	fc 01       	movw	r30, r24
    4274:	05 90       	lpm	r0, Z+
    4276:	61 50       	subi	r22, 0x01	; 1
    4278:	70 40       	sbci	r23, 0x00	; 0
    427a:	01 10       	cpse	r0, r1
    427c:	d8 f7       	brcc	.-10     	; 0x4274 <strnlen_P+0x2>
    427e:	80 95       	com	r24
    4280:	90 95       	com	r25
    4282:	8e 0f       	add	r24, r30
    4284:	9f 1f       	adc	r25, r31
    4286:	08 95       	ret

00004288 <strnlen>:
    4288:	fc 01       	movw	r30, r24
    428a:	61 50       	subi	r22, 0x01	; 1
    428c:	70 40       	sbci	r23, 0x00	; 0
    428e:	01 90       	ld	r0, Z+
    4290:	01 10       	cpse	r0, r1
    4292:	d8 f7       	brcc	.-10     	; 0x428a <strnlen+0x2>
    4294:	80 95       	com	r24
    4296:	90 95       	com	r25
    4298:	8e 0f       	add	r24, r30
    429a:	9f 1f       	adc	r25, r31
    429c:	08 95       	ret

0000429e <fputc>:
    429e:	0f 93       	push	r16
    42a0:	1f 93       	push	r17
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	18 2f       	mov	r17, r24
    42a8:	09 2f       	mov	r16, r25
    42aa:	eb 01       	movw	r28, r22
    42ac:	8b 81       	ldd	r24, Y+3	; 0x03
    42ae:	81 fd       	sbrc	r24, 1
    42b0:	03 c0       	rjmp	.+6      	; 0x42b8 <fputc+0x1a>
    42b2:	8f ef       	ldi	r24, 0xFF	; 255
    42b4:	9f ef       	ldi	r25, 0xFF	; 255
    42b6:	20 c0       	rjmp	.+64     	; 0x42f8 <fputc+0x5a>
    42b8:	82 ff       	sbrs	r24, 2
    42ba:	10 c0       	rjmp	.+32     	; 0x42dc <fputc+0x3e>
    42bc:	4e 81       	ldd	r20, Y+6	; 0x06
    42be:	5f 81       	ldd	r21, Y+7	; 0x07
    42c0:	2c 81       	ldd	r18, Y+4	; 0x04
    42c2:	3d 81       	ldd	r19, Y+5	; 0x05
    42c4:	42 17       	cp	r20, r18
    42c6:	53 07       	cpc	r21, r19
    42c8:	7c f4       	brge	.+30     	; 0x42e8 <fputc+0x4a>
    42ca:	e8 81       	ld	r30, Y
    42cc:	f9 81       	ldd	r31, Y+1	; 0x01
    42ce:	9f 01       	movw	r18, r30
    42d0:	2f 5f       	subi	r18, 0xFF	; 255
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	39 83       	std	Y+1, r19	; 0x01
    42d6:	28 83       	st	Y, r18
    42d8:	10 83       	st	Z, r17
    42da:	06 c0       	rjmp	.+12     	; 0x42e8 <fputc+0x4a>
    42dc:	e8 85       	ldd	r30, Y+8	; 0x08
    42de:	f9 85       	ldd	r31, Y+9	; 0x09
    42e0:	81 2f       	mov	r24, r17
    42e2:	09 95       	icall
    42e4:	89 2b       	or	r24, r25
    42e6:	29 f7       	brne	.-54     	; 0x42b2 <fputc+0x14>
    42e8:	2e 81       	ldd	r18, Y+6	; 0x06
    42ea:	3f 81       	ldd	r19, Y+7	; 0x07
    42ec:	2f 5f       	subi	r18, 0xFF	; 255
    42ee:	3f 4f       	sbci	r19, 0xFF	; 255
    42f0:	3f 83       	std	Y+7, r19	; 0x07
    42f2:	2e 83       	std	Y+6, r18	; 0x06
    42f4:	81 2f       	mov	r24, r17
    42f6:	90 2f       	mov	r25, r16
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	1f 91       	pop	r17
    42fe:	0f 91       	pop	r16
    4300:	08 95       	ret

00004302 <__ultoa_invert>:
    4302:	fa 01       	movw	r30, r20
    4304:	aa 27       	eor	r26, r26
    4306:	28 30       	cpi	r18, 0x08	; 8
    4308:	51 f1       	breq	.+84     	; 0x435e <__ultoa_invert+0x5c>
    430a:	20 31       	cpi	r18, 0x10	; 16
    430c:	81 f1       	breq	.+96     	; 0x436e <__ultoa_invert+0x6c>
    430e:	e8 94       	clt
    4310:	6f 93       	push	r22
    4312:	6e 7f       	andi	r22, 0xFE	; 254
    4314:	6e 5f       	subi	r22, 0xFE	; 254
    4316:	7f 4f       	sbci	r23, 0xFF	; 255
    4318:	8f 4f       	sbci	r24, 0xFF	; 255
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	af 4f       	sbci	r26, 0xFF	; 255
    431e:	b1 e0       	ldi	r27, 0x01	; 1
    4320:	3e d0       	rcall	.+124    	; 0x439e <__ultoa_invert+0x9c>
    4322:	b4 e0       	ldi	r27, 0x04	; 4
    4324:	3c d0       	rcall	.+120    	; 0x439e <__ultoa_invert+0x9c>
    4326:	67 0f       	add	r22, r23
    4328:	78 1f       	adc	r23, r24
    432a:	89 1f       	adc	r24, r25
    432c:	9a 1f       	adc	r25, r26
    432e:	a1 1d       	adc	r26, r1
    4330:	68 0f       	add	r22, r24
    4332:	79 1f       	adc	r23, r25
    4334:	8a 1f       	adc	r24, r26
    4336:	91 1d       	adc	r25, r1
    4338:	a1 1d       	adc	r26, r1
    433a:	6a 0f       	add	r22, r26
    433c:	71 1d       	adc	r23, r1
    433e:	81 1d       	adc	r24, r1
    4340:	91 1d       	adc	r25, r1
    4342:	a1 1d       	adc	r26, r1
    4344:	20 d0       	rcall	.+64     	; 0x4386 <__ultoa_invert+0x84>
    4346:	09 f4       	brne	.+2      	; 0x434a <__ultoa_invert+0x48>
    4348:	68 94       	set
    434a:	3f 91       	pop	r19
    434c:	2a e0       	ldi	r18, 0x0A	; 10
    434e:	26 9f       	mul	r18, r22
    4350:	11 24       	eor	r1, r1
    4352:	30 19       	sub	r19, r0
    4354:	30 5d       	subi	r19, 0xD0	; 208
    4356:	31 93       	st	Z+, r19
    4358:	de f6       	brtc	.-74     	; 0x4310 <__ultoa_invert+0xe>
    435a:	cf 01       	movw	r24, r30
    435c:	08 95       	ret
    435e:	46 2f       	mov	r20, r22
    4360:	47 70       	andi	r20, 0x07	; 7
    4362:	40 5d       	subi	r20, 0xD0	; 208
    4364:	41 93       	st	Z+, r20
    4366:	b3 e0       	ldi	r27, 0x03	; 3
    4368:	0f d0       	rcall	.+30     	; 0x4388 <__ultoa_invert+0x86>
    436a:	c9 f7       	brne	.-14     	; 0x435e <__ultoa_invert+0x5c>
    436c:	f6 cf       	rjmp	.-20     	; 0x435a <__ultoa_invert+0x58>
    436e:	46 2f       	mov	r20, r22
    4370:	4f 70       	andi	r20, 0x0F	; 15
    4372:	40 5d       	subi	r20, 0xD0	; 208
    4374:	4a 33       	cpi	r20, 0x3A	; 58
    4376:	18 f0       	brcs	.+6      	; 0x437e <__ultoa_invert+0x7c>
    4378:	49 5d       	subi	r20, 0xD9	; 217
    437a:	31 fd       	sbrc	r19, 1
    437c:	40 52       	subi	r20, 0x20	; 32
    437e:	41 93       	st	Z+, r20
    4380:	02 d0       	rcall	.+4      	; 0x4386 <__ultoa_invert+0x84>
    4382:	a9 f7       	brne	.-22     	; 0x436e <__ultoa_invert+0x6c>
    4384:	ea cf       	rjmp	.-44     	; 0x435a <__ultoa_invert+0x58>
    4386:	b4 e0       	ldi	r27, 0x04	; 4
    4388:	a6 95       	lsr	r26
    438a:	97 95       	ror	r25
    438c:	87 95       	ror	r24
    438e:	77 95       	ror	r23
    4390:	67 95       	ror	r22
    4392:	ba 95       	dec	r27
    4394:	c9 f7       	brne	.-14     	; 0x4388 <__ultoa_invert+0x86>
    4396:	00 97       	sbiw	r24, 0x00	; 0
    4398:	61 05       	cpc	r22, r1
    439a:	71 05       	cpc	r23, r1
    439c:	08 95       	ret
    439e:	9b 01       	movw	r18, r22
    43a0:	ac 01       	movw	r20, r24
    43a2:	0a 2e       	mov	r0, r26
    43a4:	06 94       	lsr	r0
    43a6:	57 95       	ror	r21
    43a8:	47 95       	ror	r20
    43aa:	37 95       	ror	r19
    43ac:	27 95       	ror	r18
    43ae:	ba 95       	dec	r27
    43b0:	c9 f7       	brne	.-14     	; 0x43a4 <__ultoa_invert+0xa2>
    43b2:	62 0f       	add	r22, r18
    43b4:	73 1f       	adc	r23, r19
    43b6:	84 1f       	adc	r24, r20
    43b8:	95 1f       	adc	r25, r21
    43ba:	a0 1d       	adc	r26, r0
    43bc:	08 95       	ret

000043be <__muluhisi3>:
    43be:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <__umulhisi3>
    43c2:	a5 9f       	mul	r26, r21
    43c4:	90 0d       	add	r25, r0
    43c6:	b4 9f       	mul	r27, r20
    43c8:	90 0d       	add	r25, r0
    43ca:	a4 9f       	mul	r26, r20
    43cc:	80 0d       	add	r24, r0
    43ce:	91 1d       	adc	r25, r1
    43d0:	11 24       	eor	r1, r1
    43d2:	08 95       	ret

000043d4 <__umulhisi3>:
    43d4:	a2 9f       	mul	r26, r18
    43d6:	b0 01       	movw	r22, r0
    43d8:	b3 9f       	mul	r27, r19
    43da:	c0 01       	movw	r24, r0
    43dc:	a3 9f       	mul	r26, r19
    43de:	70 0d       	add	r23, r0
    43e0:	81 1d       	adc	r24, r1
    43e2:	11 24       	eor	r1, r1
    43e4:	91 1d       	adc	r25, r1
    43e6:	b2 9f       	mul	r27, r18
    43e8:	70 0d       	add	r23, r0
    43ea:	81 1d       	adc	r24, r1
    43ec:	11 24       	eor	r1, r1
    43ee:	91 1d       	adc	r25, r1
    43f0:	08 95       	ret

000043f2 <_exit>:
    43f2:	f8 94       	cli

000043f4 <__stop_program>:
    43f4:	ff cf       	rjmp	.-2      	; 0x43f4 <__stop_program>
