
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000444  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001d1c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fc4  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  9c:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
  a4:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	81 ee       	ldi	r24, 0xE1	; 225
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <datarw+0x6>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <datarw+0xc>
  b0:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
  b2:	12 98       	cbi	0x02, 2	; 2
  b4:	08 95       	ret

000000b6 <lcd_cursor>:
#include "display.h"

int lcd_cursor()
{
	//Power Port D as outputs.
	DDRA |= 0xFF;
  b6:	81 b1       	in	r24, 0x01	; 1
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 b9       	out	0x01, r24	; 1
  bc:	87 e8       	ldi	r24, 0x87	; 135
  be:	93 e1       	ldi	r25, 0x13	; 19
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_cursor+0xa>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_cursor+0x10>
  c6:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
  c8:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
  ca:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
  cc:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
  ce:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
  d0:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
  d2:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
  d4:	13 9a       	sbi	0x02, 3	; 2
    datarw();
  d6:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
  da:	81 ee       	ldi	r24, 0xE1	; 225
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_cursor+0x28>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_cursor+0x2e>
  e4:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_cursor+0x38>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_cursor+0x3e>
  f4:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
  f6:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
  fa:	89 ef       	ldi	r24, 0xF9	; 249
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_cursor+0x48>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_cursor+0x4e>
 104:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
 106:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 108:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 10a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 10c:	13 98       	cbi	0x02, 3	; 2
    datarw();
 10e:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 112:	89 ef       	ldi	r24, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_cursor+0x60>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_cursor+0x66>
 11c:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
 11e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 120:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 122:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 124:	13 98       	cbi	0x02, 3	; 2
    datarw();
 126:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_cursor+0x78>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_cursor+0x7e>
 134:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
 136:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 138:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 13a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 13c:	13 98       	cbi	0x02, 3	; 2
    datarw();
 13e:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 142:	89 ef       	ldi	r24, 0xF9	; 249
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_cursor+0x90>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_cursor+0x96>
 14c:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
 14e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 150:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 152:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 154:	13 98       	cbi	0x02, 3	; 2
    datarw();
 156:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_cursor+0xa8>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_cursor+0xae>
 164:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
 166:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
 168:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
 16a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 16c:	13 98       	cbi	0x02, 3	; 2
    datarw();
 16e:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 172:	89 ef       	ldi	r24, 0xF9	; 249
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_cursor+0xc0>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_cursor+0xc6>
 17c:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
 17e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 180:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 182:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 184:	13 98       	cbi	0x02, 3	; 2
    datarw();
 186:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 18a:	89 ef       	ldi	r24, 0xF9	; 249
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_cursor+0xd8>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_cursor+0xde>
 194:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
 196:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 198:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 19a:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
 19c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
 19e:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 1a2:	89 ef       	ldi	r24, 0xF9	; 249
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_cursor+0xf0>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_cursor+0xf6>
 1ac:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
 1ae:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 1b0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 1b2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 1b4:	13 98       	cbi	0x02, 3	; 2
    datarw();
 1b6:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 1ba:	89 ef       	ldi	r24, 0xF9	; 249
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_cursor+0x108>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_cursor+0x10e>
 1c4:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
 1c6:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
 1c8:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 1ca:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
 1cc:	13 98       	cbi	0x02, 3	; 2
    datarw();
 1ce:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 1d2:	89 ef       	ldi	r24, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_cursor+0x120>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_cursor+0x126>
 1dc:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
 1de:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 1e0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 1e2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 1e4:	13 98       	cbi	0x02, 3	; 2
    datarw();
 1e6:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 1ea:	89 ef       	ldi	r24, 0xF9	; 249
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_cursor+0x138>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_cursor+0x13e>
 1f4:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
 1f6:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
 1f8:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 1fa:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
 1fc:	13 9a       	sbi	0x02, 3	; 2
    datarw();
 1fe:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_cursor+0x150>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_cursor+0x156>
 20c:	00 00       	nop
    _delay_ms(1);

	return 0;
}
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	08 95       	ret

00000214 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	11 f4       	brne	.+4      	; 0x21c <letterwrite+0x8>
 218:	16 9a       	sbi	0x02, 6	; 2
 21a:	01 c0       	rjmp	.+2      	; 0x21e <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
 21c:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
 21e:	61 30       	cpi	r22, 0x01	; 1
 220:	71 05       	cpc	r23, r1
 222:	11 f4       	brne	.+4      	; 0x228 <letterwrite+0x14>
 224:	15 9a       	sbi	0x02, 5	; 2
 226:	01 c0       	rjmp	.+2      	; 0x22a <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
 228:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	51 05       	cpc	r21, r1
 22e:	11 f4       	brne	.+4      	; 0x234 <letterwrite+0x20>
 230:	14 9a       	sbi	0x02, 4	; 2
 232:	01 c0       	rjmp	.+2      	; 0x236 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
 234:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
 236:	21 30       	cpi	r18, 0x01	; 1
 238:	31 05       	cpc	r19, r1
 23a:	11 f4       	brne	.+4      	; 0x240 <letterwrite+0x2c>
 23c:	13 9a       	sbi	0x02, 3	; 2
 23e:	01 c0       	rjmp	.+2      	; 0x242 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
 240:	13 98       	cbi	0x02, 3	; 2
   	datarw();
 242:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
 246:	89 ef       	ldi	r24, 0xF9	; 249
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <letterwrite+0x36>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <letterwrite+0x3c>
 250:	00 00       	nop
 252:	08 95       	ret

00000254 <instruction_read>:
    address = instruction_read()&0x7F;
    return address;
}

int instruction_read() 
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
 25a:	81 b1       	in	r24, 0x01	; 1
 25c:	87 78       	andi	r24, 0x87	; 135
 25e:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
 260:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
 262:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
 264:	12 9a       	sbi	0x02, 2	; 2
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <instruction_read+0x16>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <instruction_read+0x1c>
 270:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
 272:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
 274:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
 276:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
 278:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
 27a:	12 98       	cbi	0x02, 2	; 2
 27c:	e9 ef       	ldi	r30, 0xF9	; 249
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <instruction_read+0x2c>
 284:	00 c0       	rjmp	.+0      	; 0x286 <instruction_read+0x32>
 286:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
 288:	12 9a       	sbi	0x02, 2	; 2
 28a:	e1 ee       	ldi	r30, 0xE1	; 225
 28c:	f4 e0       	ldi	r31, 0x04	; 4
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <instruction_read+0x3a>
 292:	00 c0       	rjmp	.+0      	; 0x294 <instruction_read+0x40>
 294:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
 296:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
 298:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
 29a:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
 29c:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
 29e:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	26 e0       	ldi	r18, 0x06	; 6
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	2a 95       	dec	r18
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
 2ac:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
 2b0:	35 e0       	ldi	r19, 0x05	; 5
 2b2:	cc 0f       	add	r28, r28
 2b4:	dd 1f       	adc	r29, r29
 2b6:	3a 95       	dec	r19
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <instruction_read+0x5e>
 2ba:	8c 2b       	or	r24, r28
 2bc:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
 2be:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
 2c0:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
 2c2:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	54 e0       	ldi	r21, 0x04	; 4
 2c8:	aa 0f       	add	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	5a 95       	dec	r21
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
 2d0:	8a 2b       	or	r24, r26
 2d2:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
 2d4:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	73 e0       	ldi	r23, 0x03	; 3
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	7a 95       	dec	r23
 2e0:	e1 f7       	brne	.-8      	; 0x2da <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
 2e2:	8e 2b       	or	r24, r30
 2e4:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
 2e6:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
 2f2:	86 2b       	or	r24, r22
 2f4:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
 2f6:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
 2f8:	51 b1       	in	r21, 0x01	; 1
 2fa:	58 67       	ori	r21, 0x78	; 120
 2fc:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
 2fe:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
 300:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
 302:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
 30a:	84 2b       	or	r24, r20
 30c:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
 30e:	16 fb       	bst	r17, 6
 310:	22 27       	eor	r18, r18
 312:	20 f9       	bld	r18, 0
 314:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
 316:	36 95       	lsr	r19
 318:	32 2f       	mov	r19, r18
 31a:	22 27       	eor	r18, r18
 31c:	37 95       	ror	r19
 31e:	27 95       	ror	r18
}
 320:	82 2b       	or	r24, r18
 322:	93 2b       	or	r25, r19
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	08 95       	ret

0000032c <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
 32c:	0e 94 2a 01 	call	0x254	; 0x254 <instruction_read>
    return address;
}
 330:	8f 77       	andi	r24, 0x7F	; 127
 332:	99 27       	eor	r25, r25
 334:	08 95       	ret

00000336 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
 336:	89 2b       	or	r24, r25
 338:	11 f4       	brne	.+4      	; 0x33e <write_db74+0x8>
 33a:	16 98       	cbi	0x02, 6	; 2
 33c:	01 c0       	rjmp	.+2      	; 0x340 <write_db74+0xa>
    else PORTA |= _BV(DB7);
 33e:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
 340:	67 2b       	or	r22, r23
 342:	11 f4       	brne	.+4      	; 0x348 <write_db74+0x12>
 344:	15 98       	cbi	0x02, 5	; 2
 346:	01 c0       	rjmp	.+2      	; 0x34a <write_db74+0x14>
    else PORTA |= _BV(DB6);
 348:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
 34a:	45 2b       	or	r20, r21
 34c:	11 f4       	brne	.+4      	; 0x352 <write_db74+0x1c>
 34e:	14 98       	cbi	0x02, 4	; 2
 350:	01 c0       	rjmp	.+2      	; 0x354 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
 352:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
 354:	23 2b       	or	r18, r19
 356:	11 f4       	brne	.+4      	; 0x35c <write_db74+0x26>
 358:	13 98       	cbi	0x02, 3	; 2
 35a:	08 95       	ret
    else PORTA |= _BV(DB4);
 35c:	13 9a       	sbi	0x02, 3	; 2
 35e:	08 95       	ret

00000360 <data_write>:
{
    data_write((uint8_t)mychar);
}

void data_write(uint8_t val)
{
 360:	cf 93       	push	r28
 362:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
 364:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
 366:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
 368:	84 fb       	bst	r24, 4
 36a:	22 27       	eor	r18, r18
 36c:	20 f9       	bld	r18, 0
 36e:	85 fb       	bst	r24, 5
 370:	44 27       	eor	r20, r20
 372:	40 f9       	bld	r20, 0
 374:	86 fb       	bst	r24, 6
 376:	66 27       	eor	r22, r22
 378:	60 f9       	bld	r22, 0
 37a:	88 1f       	adc	r24, r24
 37c:	88 27       	eor	r24, r24
 37e:	88 1f       	adc	r24, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 9b 01 	call	0x336	; 0x336 <write_db74>
    datarw();
 38c:	0e 94 52 00 	call	0xa4	; 0xa4 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
 390:	2c 2f       	mov	r18, r28
 392:	21 70       	andi	r18, 0x01	; 1
 394:	c1 fb       	bst	r28, 1
 396:	44 27       	eor	r20, r20
 398:	40 f9       	bld	r20, 0
 39a:	c2 fb       	bst	r28, 2
 39c:	66 27       	eor	r22, r22
 39e:	60 f9       	bld	r22, 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	c3 fb       	bst	r28, 3
 3a8:	88 27       	eor	r24, r24
 3aa:	80 f9       	bld	r24, 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 9b 01 	call	0x336	; 0x336 <write_db74>
    datarw();
}
 3b2:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
 3b4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <datarw>

000003b8 <char_write>:
    return (address | busy<<7);
}

void char_write(char mychar)
{
    data_write((uint8_t)mychar);
 3b8:	0c 94 b0 01 	jmp	0x360	; 0x360 <data_write>

000003bc <string_write>:
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ec 01       	movw	r28, r24
 3c6:	8c 01       	movw	r16, r24
 3c8:	fe 01       	movw	r30, r28
 3ca:	01 90       	ld	r0, Z+
 3cc:	00 20       	and	r0, r0
 3ce:	e9 f7       	brne	.-6      	; 0x3ca <string_write+0xe>
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	ec 1b       	sub	r30, r28
 3d4:	fd 0b       	sbc	r31, r29
 3d6:	c8 01       	movw	r24, r16
 3d8:	8c 1b       	sub	r24, r28
 3da:	9d 0b       	sbc	r25, r29
 3dc:	8e 17       	cp	r24, r30
 3de:	9f 07       	cpc	r25, r31
 3e0:	30 f4       	brcc	.+12     	; 0x3ee <string_write+0x32>
 3e2:	f8 01       	movw	r30, r16
 3e4:	81 91       	ld	r24, Z+
 3e6:	8f 01       	movw	r16, r30
 3e8:	0e 94 b0 01 	call	0x360	; 0x360 <data_write>
 3ec:	ed cf       	rjmp	.-38     	; 0x3c8 <string_write+0xc>
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	08 95       	ret

000003f8 <main>:
 3f8:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cursor>
 3fc:	61 e4       	ldi	r22, 0x41	; 65
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 12 02 	call	0x424	; 0x424 <__eewr_byte_m1284p>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 0a 02 	call	0x414	; 0x414 <__eerd_byte_m1284p>
 40e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <char_write>
 412:	ff cf       	rjmp	.-2      	; 0x412 <main+0x1a>

00000414 <__eerd_byte_m1284p>:
 414:	f9 99       	sbic	0x1f, 1	; 31
 416:	fe cf       	rjmp	.-4      	; 0x414 <__eerd_byte_m1284p>
 418:	92 bd       	out	0x22, r25	; 34
 41a:	81 bd       	out	0x21, r24	; 33
 41c:	f8 9a       	sbi	0x1f, 0	; 31
 41e:	99 27       	eor	r25, r25
 420:	80 b5       	in	r24, 0x20	; 32
 422:	08 95       	ret

00000424 <__eewr_byte_m1284p>:
 424:	26 2f       	mov	r18, r22

00000426 <__eewr_r18_m1284p>:
 426:	f9 99       	sbic	0x1f, 1	; 31
 428:	fe cf       	rjmp	.-4      	; 0x426 <__eewr_r18_m1284p>
 42a:	1f ba       	out	0x1f, r1	; 31
 42c:	92 bd       	out	0x22, r25	; 34
 42e:	81 bd       	out	0x21, r24	; 33
 430:	20 bd       	out	0x20, r18	; 32
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	fa 9a       	sbi	0x1f, 2	; 31
 438:	f9 9a       	sbi	0x1f, 1	; 31
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
