
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00001e6a  00001efe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080016c  0080016c  00001f6a  2**0
                  ALLOC
  3 .stab         000087a8  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021fb  00000000  00000000  0000a714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c90f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <print_all_known_stations+0x5c>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ea e6       	ldi	r30, 0x6A	; 106
     122:	fe e1       	ldi	r31, 0x1E	; 30
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	ac 36       	cpi	r26, 0x6C	; 108
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	13 e0       	ldi	r17, 0x03	; 3
     136:	ac e6       	ldi	r26, 0x6C	; 108
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a5 39       	cpi	r26, 0x95	; 149
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 9d 06 	call	0xd3a	; 0xd3a <main>
     148:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     150:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     154:	8c e0       	ldi	r24, 0x0C	; 12
     156:	80 93 cc 00 	sts	0x00CC, r24
    
    // Enable The Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     15a:	e9 ec       	ldi	r30, 0xC9	; 201
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 6d       	ori	r24, 0xD8	; 216
     162:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     164:	e8 ec       	ldi	r30, 0xC8	; 200
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 83       	st	Z, r24
    
    // Set the Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     16e:	ea ec       	ldi	r30, 0xCA	; 202
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	8e 60       	ori	r24, 0x0E	; 14
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <peekChar>:

char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     17a:	90 91 7a 01 	lds	r25, 0x017A
     17e:	80 91 79 01 	lds	r24, 0x0179
     182:	98 17       	cp	r25, r24
     184:	39 f0       	breq	.+14     	; 0x194 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     186:	e0 91 7a 01 	lds	r30, 0x017A
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ef 5e       	subi	r30, 0xEF	; 239
     18e:	fc 4f       	sbci	r31, 0xFC	; 252
     190:	80 81       	ld	r24, Z
     192:	08 95       	ret
    //stdout= &my_stream;
}

char peekChar(void)
{
    char ret = '\0';
     194:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     196:	08 95       	ret

00000198 <getChar>:

char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     198:	e0 91 7a 01 	lds	r30, 0x017A
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	ef 5e       	subi	r30, 0xEF	; 239
     1a0:	fc 4f       	sbci	r31, 0xFC	; 252
     1a2:	80 81       	ld	r24, Z
     
    rxReadPos++;
     1a4:	90 91 7a 01 	lds	r25, 0x017A
     1a8:	9f 5f       	subi	r25, 0xFF	; 255
     1aa:	90 93 7a 01 	sts	0x017A, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     1ae:	90 91 7a 01 	lds	r25, 0x017A
     1b2:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     1b4:	10 92 7a 01 	sts	0x017A, r1
    }
    
    return ret;
}
     1b8:	08 95       	ret

000001ba <serialStart>:

int serialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     1ba:	80 91 76 01 	lds	r24, 0x0176
     1be:	90 91 01 01 	lds	r25, 0x0101
     1c2:	89 13       	cpse	r24, r25
     1c4:	0c c0       	rjmp	.+24     	; 0x1de <serialStart+0x24>
     1c6:	20 91 77 01 	lds	r18, 0x0177
     1ca:	28 13       	cpse	r18, r24
     1cc:	08 c0       	rjmp	.+16     	; 0x1de <serialStart+0x24>
     1ce:	30 91 78 01 	lds	r19, 0x0178
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	32 17       	cp	r19, r18
     1d8:	21 f0       	breq	.+8      	; 0x1e2 <serialStart+0x28>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	08 95       	ret
        return 1;
    else
        return 0;
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
}
     1e2:	08 95       	ret

000001e4 <__vector_28>:
union float2bytes { 
    float f; 
    char b[sizeof(float)];
};

ISR(USART1_RX_vect){
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	0b b6       	in	r0, 0x3b	; 59
     1f0:	0f 92       	push	r0
     1f2:	2f 93       	push	r18
     1f4:	3f 93       	push	r19
     1f6:	4f 93       	push	r20
     1f8:	5f 93       	push	r21
     1fa:	6f 93       	push	r22
     1fc:	7f 93       	push	r23
     1fe:	8f 93       	push	r24
     200:	9f 93       	push	r25
     202:	af 93       	push	r26
     204:	bf 93       	push	r27
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     20a:	80 91 77 01 	lds	r24, 0x0177
     20e:	80 93 78 01 	sts	0x0178, r24
    serial_history[1] = serial_history[0];
     212:	80 91 76 01 	lds	r24, 0x0176
     216:	80 93 77 01 	sts	0x0177, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     21a:	80 91 ce 00 	lds	r24, 0x00CE
     21e:	80 93 76 01 	sts	0x0176, r24

    //if a serial update is in progress, write to the receive buffer
    if (update_trigger==1)
     222:	80 91 74 01 	lds	r24, 0x0174
     226:	90 91 75 01 	lds	r25, 0x0175
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     22e:	e0 91 79 01 	lds	r30, 0x0179
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 91 76 01 	lds	r24, 0x0176
     238:	ef 5e       	subi	r30, 0xEF	; 239
     23a:	fc 4f       	sbci	r31, 0xFC	; 252
     23c:	80 83       	st	Z, r24
        rxWritePos++;
     23e:	80 91 79 01 	lds	r24, 0x0179
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 79 01 	sts	0x0179, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(serialStart()){
     248:	0e 94 dd 00 	call	0x1ba	; 0x1ba <serialStart>
     24c:	89 2b       	or	r24, r25
     24e:	31 f0       	breq	.+12     	; 0x25c <__vector_28+0x78>
        update_trigger = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 75 01 	sts	0x0175, r25
     258:	80 93 74 01 	sts	0x0174, r24
    } 

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     25c:	80 91 79 01 	lds	r24, 0x0179
     260:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     262:	10 92 79 01 	sts	0x0179, r1
    }

}
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	7f 91       	pop	r23
     274:	6f 91       	pop	r22
     276:	5f 91       	pop	r21
     278:	4f 91       	pop	r20
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0b be       	out	0x3b, r0	; 59
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <serialEnd>:
        return 0;
}

int serialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     28c:	80 91 76 01 	lds	r24, 0x0176
     290:	90 91 00 01 	lds	r25, 0x0100
     294:	89 13       	cpse	r24, r25
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <serialEnd+0x24>
     298:	20 91 77 01 	lds	r18, 0x0177
     29c:	28 13       	cpse	r18, r24
     29e:	08 c0       	rjmp	.+16     	; 0x2b0 <serialEnd+0x24>
     2a0:	30 91 78 01 	lds	r19, 0x0178
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	32 17       	cp	r19, r18
     2aa:	21 f0       	breq	.+8      	; 0x2b4 <serialEnd+0x28>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	08 95       	ret
        return 1;
    else
        return 0;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
}
     2b4:	08 95       	ret

000002b6 <my_eeprom_read_int>:

int my_eeprom_read_int(int address)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
    char temp_num = ((char)eeprom_read_byte((uint8_t *)address));
     2c0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__eerd_byte_m1284p>
     2c4:	89 83       	std	Y+1, r24	; 0x01
    return (atoi(&temp_num));
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 11 0c 	call	0x1822	; 0x1822 <atoi>
}
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <my_eeprom_read_char>:

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     2d6:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__eerd_byte_m1284p>

000002da <my_eeprom_read_float>:
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     2da:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>

000002de <my_eeprom_read_string>:
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     2de:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__eerd_block_m1284p>

000002e2 <string_write_int>:
}

void string_write_int(int num, int num_digits)
{
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	18 2f       	mov	r17, r24
     2ec:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     2ee:	cb 01       	movw	r24, r22
     2f0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <malloc>
     2f4:	d8 2f       	mov	r29, r24
     2f6:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	2a e0       	ldi	r18, 0x0A	; 10
     2fe:	31 e0       	ldi	r19, 0x01	; 1
     300:	3f 93       	push	r19
     302:	2f 93       	push	r18
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	0e 94 37 0c 	call	0x186e	; 0x186e <sprintf>
    string_write(temp);
     30c:	8d 2f       	mov	r24, r29
     30e:	9c 2f       	mov	r25, r28
     310:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    free(temp);
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	8d 2f       	mov	r24, r29
     322:	9c 2f       	mov	r25, r28
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     32c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <free>

00000330 <string_write_float>:
}

void string_write_float(float num, int dec_digits)
{
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	00 d0       	rcall	.+0      	; 0x342 <string_write_float+0x12>
     342:	00 d0       	rcall	.+0      	; 0x344 <string_write_float+0x14>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     34a:	ae 01       	movw	r20, r28
     34c:	4f 5f       	subi	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
     350:	0e 94 ed 08 	call	0x11da	; 0x11da <modf>
     354:	6b 01       	movw	r12, r22
     356:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     358:	69 81       	ldd	r22, Y+1	; 0x01
     35a:	7a 81       	ldd	r23, Y+2	; 0x02
     35c:	8b 81       	ldd	r24, Y+3	; 0x03
     35e:	9c 81       	ldd	r25, Y+4	; 0x04
     360:	0e 94 90 07 	call	0xf20	; 0xf20 <__fixsfsi>
     364:	dc 01       	movw	r26, r24
     366:	cb 01       	movw	r24, r22
     368:	64 e0       	ldi	r22, 0x04	; 4
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <string_write_int>
     370:	85 e4       	ldi	r24, 0x45	; 69
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     378:	b8 01       	movw	r22, r16
     37a:	88 27       	eor	r24, r24
     37c:	77 fd       	sbrc	r23, 7
     37e:	80 95       	com	r24
     380:	98 2f       	mov	r25, r24
     382:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 83 09 	call	0x1306	; 0x1306 <pow>
     396:	9b 01       	movw	r18, r22
     398:	ac 01       	movw	r20, r24
     39a:	c7 01       	movw	r24, r14
     39c:	b6 01       	movw	r22, r12
     39e:	0e 94 20 09 	call	0x1240	; 0x1240 <__mulsf3>
     3a2:	0e 94 cf 09 	call	0x139e	; 0x139e <round>
     3a6:	0e 94 90 07 	call	0xf20	; 0xf20 <__fixsfsi>
     3aa:	7b 01       	movw	r14, r22
     3ac:	77 ff       	sbrs	r23, 7
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <string_write_float+0x88>
     3b0:	ee 24       	eor	r14, r14
     3b2:	ff 24       	eor	r15, r15
     3b4:	e6 1a       	sub	r14, r22
     3b6:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     3b8:	e1 14       	cp	r14, r1
     3ba:	f1 04       	cpc	r15, r1
     3bc:	a1 f0       	breq	.+40     	; 0x3e6 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     3be:	b7 01       	movw	r22, r14
     3c0:	88 27       	eor	r24, r24
     3c2:	77 fd       	sbrc	r23, 7
     3c4:	80 95       	com	r24
     3c6:	98 2f       	mov	r25, r24
     3c8:	0e 94 c3 07 	call	0xf86	; 0xf86 <__floatsisf>
     3cc:	0e 94 a2 08 	call	0x1144	; 0x1144 <log10>
     3d0:	0e 94 fe 07 	call	0xffc	; 0xffc <floor>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e8       	ldi	r20, 0x80	; 128
     3da:	5f e3       	ldi	r21, 0x3F	; 63
     3dc:	0e 94 2c 07 	call	0xe58	; 0xe58 <__addsf3>
     3e0:	0e 94 90 07 	call	0xf20	; 0xf20 <__fixsfsi>
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <string_write_float+0xba>
    } else {
        digits = 0;
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     3ea:	c1 2c       	mov	r12, r1
     3ec:	d1 2c       	mov	r13, r1
     3ee:	06 1b       	sub	r16, r22
     3f0:	17 0b       	sbc	r17, r23
     3f2:	c0 16       	cp	r12, r16
     3f4:	d1 06       	cpc	r13, r17
     3f6:	44 f4       	brge	.+16     	; 0x408 <string_write_float+0xd8>
    {
        string_write("0");
     3f8:	8d e0       	ldi	r24, 0x0D	; 13
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	c8 1a       	sub	r12, r24
     404:	d8 0a       	sbc	r13, r24
     406:	f5 cf       	rjmp	.-22     	; 0x3f2 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     408:	64 e0       	ldi	r22, 0x04	; 4
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	c7 01       	movw	r24, r14
}
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     426:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <string_write_int>

0000042a <print_eeprom_contents>:
}

void print_eeprom_contents()
{
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
    int i=0;
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
     430:	c0 e0       	ldi	r28, 0x00	; 0
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	1c e1       	ldi	r17, 0x1C	; 28
     436:	20 91 0b 03 	lds	r18, 0x030B
     43a:	30 91 0c 03 	lds	r19, 0x030C
     43e:	12 9f       	mul	r17, r18
     440:	c0 01       	movw	r24, r0
     442:	13 9f       	mul	r17, r19
     444:	90 0d       	add	r25, r0
     446:	11 24       	eor	r1, r1
     448:	8c 59       	subi	r24, 0x9C	; 156
     44a:	9f 4f       	sbci	r25, 0xFF	; 255
     44c:	8c 17       	cp	r24, r28
     44e:	9d 07       	cpc	r25, r29
     450:	84 f0       	brlt	.+32     	; 0x472 <print_eeprom_contents+0x48>
    return (atoi(&temp_num));
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     452:	ce 01       	movw	r24, r28
     454:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
    {
        one_byte = my_eeprom_read_char(i);
        if (one_byte == '\0')
     458:	81 11       	cpse	r24, r1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <print_eeprom_contents+0x34>
            one_byte = '?';
     45c:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     45e:	0e 94 47 06 	call	0xc8e	; 0xc8e <char_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     462:	87 ea       	ldi	r24, 0xA7	; 167
     464:	91 e6       	ldi	r25, 0x61	; 97
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <print_eeprom_contents+0x3c>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <print_eeprom_contents+0x42>
     46c:	00 00       	nop
void print_eeprom_contents()
{
    int i=0;
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
     46e:	21 96       	adiw	r28, 0x01	; 1
     470:	e2 cf       	rjmp	.-60     	; 0x436 <print_eeprom_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <print_eeprom_station_contents>:

void print_eeprom_station_contents()
{
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	1c e1       	ldi	r17, 0x1C	; 28
     486:	20 91 0b 03 	lds	r18, 0x030B
     48a:	30 91 0c 03 	lds	r19, 0x030C
     48e:	12 9f       	mul	r17, r18
     490:	c0 01       	movw	r24, r0
     492:	13 9f       	mul	r17, r19
     494:	90 0d       	add	r25, r0
     496:	11 24       	eor	r1, r1
     498:	c8 17       	cp	r28, r24
     49a:	d9 07       	cpc	r29, r25
     49c:	94 f4       	brge	.+36     	; 0x4c2 <print_eeprom_station_contents+0x48>
    return (atoi(&temp_num));
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     49e:	ce 01       	movw	r24, r28
     4a0:	88 59       	subi	r24, 0x98	; 152
     4a2:	9f 4f       	sbci	r25, 0xFF	; 255
     4a4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
    {
        one_byte = my_eeprom_read_char(start+i);
        if (one_byte == '\0')
     4a8:	81 11       	cpse	r24, r1
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <print_eeprom_station_contents+0x34>
            one_byte = '?';
     4ac:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     4ae:	0e 94 47 06 	call	0xc8e	; 0xc8e <char_write>
     4b2:	87 ea       	ldi	r24, 0xA7	; 167
     4b4:	91 e6       	ldi	r25, 0x61	; 97
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <print_eeprom_station_contents+0x3c>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <print_eeprom_station_contents+0x42>
     4bc:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     4be:	21 96       	adiw	r28, 0x01	; 1
     4c0:	e2 cf       	rjmp	.-60     	; 0x486 <print_eeprom_station_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	08 95       	ret

000004ca <print_callsign>:
    if (update_trigger)
        return;
}

void print_callsign(int station_index)
{
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     4d2:	2c e1       	ldi	r18, 0x1C	; 28
     4d4:	28 9f       	mul	r18, r24
     4d6:	80 01       	movw	r16, r0
     4d8:	29 9f       	mul	r18, r25
     4da:	10 0d       	add	r17, r0
     4dc:	11 24       	eor	r1, r1
}

void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     4e2:	e0 91 0f 03 	lds	r30, 0x030F
     4e6:	f0 91 10 03 	lds	r31, 0x0310
     4ea:	e0 0f       	add	r30, r16
     4ec:	f1 1f       	adc	r31, r17
     4ee:	ec 0f       	add	r30, r28
     4f0:	fd 1f       	adc	r31, r29
     4f2:	80 81       	ld	r24, Z
     4f4:	0e 94 47 06 	call	0xc8e	; 0xc8e <char_write>
}

void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4f8:	21 96       	adiw	r28, 0x01	; 1
     4fa:	c8 30       	cpi	r28, 0x08	; 8
     4fc:	d1 05       	cpc	r29, r1
     4fe:	89 f7       	brne	.-30     	; 0x4e2 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <print_station>:
        _delay_ms(100);
    }
}

void print_station(int index)
{
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(500); string_write("\n"); 
     514:	63 e0       	ldi	r22, 0x03	; 3
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <string_write_int>
     51e:	81 e2       	ldi	r24, 0x21	; 33
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     526:	c8 01       	movw	r24, r16
     528:	0e 94 65 02 	call	0x4ca	; 0x4ca <print_callsign>
     52c:	2f e9       	ldi	r18, 0x9F	; 159
     52e:	86 e8       	ldi	r24, 0x86	; 134
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	21 50       	subi	r18, 0x01	; 1
     534:	80 40       	sbci	r24, 0x00	; 0
     536:	90 40       	sbci	r25, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <print_station+0x28>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <print_station+0x32>
     53c:	00 00       	nop
     53e:	8f e0       	ldi	r24, 0x0F	; 15
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    if (update_trigger)
     546:	80 91 74 01 	lds	r24, 0x0174
     54a:	90 91 75 01 	lds	r25, 0x0175
     54e:	89 2b       	or	r24, r25
     550:	09 f0       	breq	.+2      	; 0x554 <print_station+0x4a>
     552:	c0 c0       	rjmp	.+384    	; 0x6d4 <print_station+0x1ca>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(500); string_write("\n");
     554:	81 e1       	ldi	r24, 0x11	; 17
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     55c:	8c e1       	ldi	r24, 0x1C	; 28
     55e:	80 9f       	mul	r24, r16
     560:	e0 01       	movw	r28, r0
     562:	81 9f       	mul	r24, r17
     564:	d0 0d       	add	r29, r0
     566:	11 24       	eor	r1, r1
     568:	e0 91 0f 03 	lds	r30, 0x030F
     56c:	f0 91 10 03 	lds	r31, 0x0310
     570:	ec 0f       	add	r30, r28
     572:	fd 1f       	adc	r31, r29
     574:	60 85       	ldd	r22, Z+8	; 0x08
     576:	71 85       	ldd	r23, Z+9	; 0x09
     578:	82 85       	ldd	r24, Z+10	; 0x0a
     57a:	93 85       	ldd	r25, Z+11	; 0x0b
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     584:	2f e9       	ldi	r18, 0x9F	; 159
     586:	86 e8       	ldi	r24, 0x86	; 134
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	21 50       	subi	r18, 0x01	; 1
     58c:	80 40       	sbci	r24, 0x00	; 0
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <print_station+0x80>
     592:	00 c0       	rjmp	.+0      	; 0x594 <print_station+0x8a>
     594:	00 00       	nop
     596:	8f e0       	ldi	r24, 0x0F	; 15
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    if (update_trigger)
     59e:	80 91 74 01 	lds	r24, 0x0174
     5a2:	90 91 75 01 	lds	r25, 0x0175
     5a6:	89 2b       	or	r24, r25
     5a8:	09 f0       	breq	.+2      	; 0x5ac <print_station+0xa2>
     5aa:	94 c0       	rjmp	.+296    	; 0x6d4 <print_station+0x1ca>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(500); string_write("\n");
     5ac:	88 e1       	ldi	r24, 0x18	; 24
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     5b4:	e0 91 0f 03 	lds	r30, 0x030F
     5b8:	f0 91 10 03 	lds	r31, 0x0310
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	64 85       	ldd	r22, Z+12	; 0x0c
     5c2:	75 85       	ldd	r23, Z+13	; 0x0d
     5c4:	86 85       	ldd	r24, Z+14	; 0x0e
     5c6:	97 85       	ldd	r25, Z+15	; 0x0f
     5c8:	44 e0       	ldi	r20, 0x04	; 4
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     5d0:	2f e9       	ldi	r18, 0x9F	; 159
     5d2:	86 e8       	ldi	r24, 0x86	; 134
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	21 50       	subi	r18, 0x01	; 1
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	90 40       	sbci	r25, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <print_station+0xcc>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <print_station+0xd6>
     5e0:	00 00       	nop
     5e2:	8f e0       	ldi	r24, 0x0F	; 15
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    if (update_trigger)
     5ea:	80 91 74 01 	lds	r24, 0x0174
     5ee:	90 91 75 01 	lds	r25, 0x0175
     5f2:	89 2b       	or	r24, r25
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <print_station+0xee>
     5f6:	6e c0       	rjmp	.+220    	; 0x6d4 <print_station+0x1ca>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(500); string_write("\n");
     5f8:	8e e1       	ldi	r24, 0x1E	; 30
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     600:	e0 91 0f 03 	lds	r30, 0x030F
     604:	f0 91 10 03 	lds	r31, 0x0310
     608:	ec 0f       	add	r30, r28
     60a:	fd 1f       	adc	r31, r29
     60c:	60 89       	ldd	r22, Z+16	; 0x10
     60e:	71 89       	ldd	r23, Z+17	; 0x11
     610:	82 89       	ldd	r24, Z+18	; 0x12
     612:	93 89       	ldd	r25, Z+19	; 0x13
     614:	44 e0       	ldi	r20, 0x04	; 4
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     61c:	2f e9       	ldi	r18, 0x9F	; 159
     61e:	86 e8       	ldi	r24, 0x86	; 134
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	21 50       	subi	r18, 0x01	; 1
     624:	80 40       	sbci	r24, 0x00	; 0
     626:	90 40       	sbci	r25, 0x00	; 0
     628:	e1 f7       	brne	.-8      	; 0x622 <print_station+0x118>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <print_station+0x122>
     62c:	00 00       	nop
     62e:	8f e0       	ldi	r24, 0x0F	; 15
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    if (update_trigger)
     636:	80 91 74 01 	lds	r24, 0x0174
     63a:	90 91 75 01 	lds	r25, 0x0175
     63e:	89 2b       	or	r24, r25
     640:	09 f0       	breq	.+2      	; 0x644 <print_station+0x13a>
     642:	48 c0       	rjmp	.+144    	; 0x6d4 <print_station+0x1ca>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(500); string_write("\n");
     644:	84 e2       	ldi	r24, 0x24	; 36
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     64c:	e0 91 0f 03 	lds	r30, 0x030F
     650:	f0 91 10 03 	lds	r31, 0x0310
     654:	ec 0f       	add	r30, r28
     656:	fd 1f       	adc	r31, r29
     658:	64 89       	ldd	r22, Z+20	; 0x14
     65a:	75 89       	ldd	r23, Z+21	; 0x15
     65c:	86 89       	ldd	r24, Z+22	; 0x16
     65e:	97 89       	ldd	r25, Z+23	; 0x17
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     668:	2f e9       	ldi	r18, 0x9F	; 159
     66a:	86 e8       	ldi	r24, 0x86	; 134
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <print_station+0x164>
     676:	00 c0       	rjmp	.+0      	; 0x678 <print_station+0x16e>
     678:	00 00       	nop
     67a:	8f e0       	ldi	r24, 0x0F	; 15
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    if (update_trigger)
     682:	80 91 74 01 	lds	r24, 0x0174
     686:	90 91 75 01 	lds	r25, 0x0175
     68a:	89 2b       	or	r24, r25
     68c:	19 f5       	brne	.+70     	; 0x6d4 <print_station+0x1ca>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(500); string_write("\n");
     68e:	8a e2       	ldi	r24, 0x2A	; 42
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     696:	e0 91 0f 03 	lds	r30, 0x030F
     69a:	f0 91 10 03 	lds	r31, 0x0310
     69e:	ec 0f       	add	r30, r28
     6a0:	fd 1f       	adc	r31, r29
     6a2:	60 8d       	ldd	r22, Z+24	; 0x18
     6a4:	71 8d       	ldd	r23, Z+25	; 0x19
     6a6:	82 8d       	ldd	r24, Z+26	; 0x1a
     6a8:	93 8d       	ldd	r25, Z+27	; 0x1b
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     6b2:	2f e9       	ldi	r18, 0x9F	; 159
     6b4:	86 e8       	ldi	r24, 0x86	; 134
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	21 50       	subi	r18, 0x01	; 1
     6ba:	80 40       	sbci	r24, 0x00	; 0
     6bc:	90 40       	sbci	r25, 0x00	; 0
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <print_station+0x1ae>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <print_station+0x1b8>
     6c2:	00 00       	nop
     6c4:	8f e0       	ldi	r24, 0x0F	; 15
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
    if (update_trigger)
     6cc:	80 91 74 01 	lds	r24, 0x0174
     6d0:	90 91 75 01 	lds	r25, 0x0175
        return;
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	08 95       	ret

000006de <prepare_device>:
    }
}

void prepare_device(void)
{
    DDRB = 0xFF;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	84 b9       	out	0x04, r24	; 4
    cli();
     6e2:	f8 94       	cli
    //Init usart
    InitUSART();
     6e4:	0e 94 a8 00 	call	0x150	; 0x150 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     6e8:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     6ea:	0e 94 8f 04 	call	0x91e	; 0x91e <lcd_init>
     6ee:	2f e3       	ldi	r18, 0x3F	; 63
     6f0:	8d e0       	ldi	r24, 0x0D	; 13
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	21 50       	subi	r18, 0x01	; 1
     6f6:	80 40       	sbci	r24, 0x00	; 0
     6f8:	90 40       	sbci	r25, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <prepare_device+0x16>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <prepare_device+0x20>
     6fe:	00 00       	nop
     700:	08 95       	ret

00000702 <database_load>:
    _delay_ms(1000);
}

void database_load(void)
{
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>

void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = (int)my_eeprom_read_float(0);
     71c:	0e 94 90 07 	call	0xf20	; 0xf20 <__fixsfsi>
     720:	70 93 0c 03 	sts	0x030C, r23
     724:	60 93 0b 03 	sts	0x030B, r22

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     728:	4c e1       	ldi	r20, 0x1C	; 28
     72a:	46 9f       	mul	r20, r22
     72c:	90 01       	movw	r18, r0
     72e:	47 9f       	mul	r20, r23
     730:	30 0d       	add	r19, r0
     732:	11 24       	eor	r1, r1
     734:	c9 01       	movw	r24, r18
     736:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <malloc>
     73a:	90 93 10 03 	sts	0x0310, r25
     73e:	80 93 0f 03 	sts	0x030F, r24
     742:	83 e4       	ldi	r24, 0x43	; 67
     744:	c8 2e       	mov	r12, r24
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	d8 2e       	mov	r13, r24
     74a:	9b e7       	ldi	r25, 0x7B	; 123
     74c:	e9 2e       	mov	r14, r25
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	f9 2e       	mov	r15, r25
     752:	c4 e0       	ldi	r28, 0x04	; 4
     754:	d0 e0       	ldi	r29, 0x00	; 0

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
     756:	00 e0       	ldi	r16, 0x00	; 0
     758:	10 e0       	ldi	r17, 0x00	; 0
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+4);
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     75a:	2c e1       	ldi	r18, 0x1C	; 28
     75c:	b2 2e       	mov	r11, r18

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+4);
     75e:	ce 01       	movw	r24, r28
     760:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <my_eeprom_read_int>
     764:	f6 01       	movw	r30, r12
     766:	81 93       	st	Z+, r24
     768:	91 93       	st	Z+, r25
     76a:	6f 01       	movw	r12, r30
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     76c:	b0 9e       	mul	r11, r16
     76e:	90 01       	movw	r18, r0
     770:	b1 9e       	mul	r11, r17
     772:	30 0d       	add	r19, r0
     774:	11 24       	eor	r1, r1
     776:	28 59       	subi	r18, 0x98	; 152
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	f7 01       	movw	r30, r14
     77c:	21 93       	st	Z+, r18
     77e:	31 93       	st	Z+, r19
     780:	7f 01       	movw	r14, r30
        total += stations_in_cell[i];
     782:	08 0f       	add	r16, r24
     784:	19 1f       	adc	r17, r25
     786:	21 96       	adiw	r28, 0x01	; 1
    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
     788:	c8 36       	cpi	r28, 0x68	; 104
     78a:	d1 05       	cpc	r29, r1
     78c:	41 f7       	brne	.-48     	; 0x75e <database_load+0x5c>
     78e:	c0 e0       	ldi	r28, 0x00	; 0
     790:	d0 e0       	ldi	r29, 0x00	; 0
     792:	e1 2c       	mov	r14, r1
     794:	f1 2c       	mov	r15, r1
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     796:	80 91 0b 03 	lds	r24, 0x030B
     79a:	90 91 0c 03 	lds	r25, 0x030C
     79e:	e8 16       	cp	r14, r24
     7a0:	f9 06       	cpc	r15, r25
     7a2:	0c f0       	brlt	.+2      	; 0x7a6 <database_load+0xa4>
     7a4:	4a c0       	rjmp	.+148    	; 0x83a <database_load+0x138>
     7a6:	be 01       	movw	r22, r28
     7a8:	68 59       	subi	r22, 0x98	; 152
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     7ac:	80 91 0f 03 	lds	r24, 0x030F
     7b0:	90 91 10 03 	lds	r25, 0x0310
    return (float)(eeprom_read_float((const float *)address));
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     7b4:	48 e0       	ldi	r20, 0x08	; 8
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	8c 0f       	add	r24, r28
     7ba:	9d 1f       	adc	r25, r29
     7bc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__eerd_block_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     7c0:	00 91 0f 03 	lds	r16, 0x030F
     7c4:	10 91 10 03 	lds	r17, 0x0310
     7c8:	0c 0f       	add	r16, r28
     7ca:	1d 1f       	adc	r17, r29
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7cc:	ce 01       	movw	r24, r28
     7ce:	80 59       	subi	r24, 0x90	; 144
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     7d6:	f8 01       	movw	r30, r16
     7d8:	60 87       	std	Z+8, r22	; 0x08
     7da:	71 87       	std	Z+9, r23	; 0x09
     7dc:	82 87       	std	Z+10, r24	; 0x0a
     7de:	93 87       	std	Z+11, r25	; 0x0b
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7e0:	ce 01       	movw	r24, r28
     7e2:	8c 58       	subi	r24, 0x8C	; 140
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     7ea:	f8 01       	movw	r30, r16
     7ec:	64 87       	std	Z+12, r22	; 0x0c
     7ee:	75 87       	std	Z+13, r23	; 0x0d
     7f0:	86 87       	std	Z+14, r24	; 0x0e
     7f2:	97 87       	std	Z+15, r25	; 0x0f
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7f4:	ce 01       	movw	r24, r28
     7f6:	88 58       	subi	r24, 0x88	; 136
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255
     7fa:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     7fe:	f8 01       	movw	r30, r16
     800:	60 8b       	std	Z+16, r22	; 0x10
     802:	71 8b       	std	Z+17, r23	; 0x11
     804:	82 8b       	std	Z+18, r24	; 0x12
     806:	93 8b       	std	Z+19, r25	; 0x13
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     808:	ce 01       	movw	r24, r28
     80a:	84 58       	subi	r24, 0x84	; 132
     80c:	9f 4f       	sbci	r25, 0xFF	; 255
     80e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     812:	f8 01       	movw	r30, r16
     814:	64 8b       	std	Z+20, r22	; 0x14
     816:	75 8b       	std	Z+21, r23	; 0x15
     818:	86 8b       	std	Z+22, r24	; 0x16
     81a:	97 8b       	std	Z+23, r25	; 0x17
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     81c:	ce 01       	movw	r24, r28
     81e:	80 58       	subi	r24, 0x80	; 128
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__eerd_dword_m1284p>
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     826:	f8 01       	movw	r30, r16
     828:	60 8f       	std	Z+24, r22	; 0x18
     82a:	71 8f       	std	Z+25, r23	; 0x19
     82c:	82 8f       	std	Z+26, r24	; 0x1a
     82e:	93 8f       	std	Z+27, r25	; 0x1b
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     830:	ff ef       	ldi	r31, 0xFF	; 255
     832:	ef 1a       	sub	r14, r31
     834:	ff 0a       	sbc	r15, r31
     836:	6c 96       	adiw	r28, 0x1c	; 28
     838:	ae cf       	rjmp	.-164    	; 0x796 <database_load+0x94>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	08 95       	ret

0000084e <database_free>:

void database_free(void)
{
    num_stations = 0;
     84e:	10 92 0c 03 	sts	0x030C, r1
     852:	10 92 0b 03 	sts	0x030B, r1

    free(all_stations);
     856:	80 91 0f 03 	lds	r24, 0x030F
     85a:	90 91 10 03 	lds	r25, 0x0310
     85e:	0e 94 82 0b 	call	0x1704	; 0x1704 <free>
    all_stations = NULL;
     862:	10 92 10 03 	sts	0x0310, r1
     866:	10 92 0f 03 	sts	0x030F, r1
     86a:	e3 e4       	ldi	r30, 0x43	; 67
     86c:	f2 e0       	ldi	r31, 0x02	; 2
     86e:	ab e7       	ldi	r26, 0x7B	; 123
     870:	b1 e0       	ldi	r27, 0x01	; 1

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
    {
        stations_in_cell[i] = 0;
     872:	11 92       	st	Z+, r1
     874:	11 92       	st	Z+, r1
        cell_offsets[i] = 0;
     876:	1d 92       	st	X+, r1
     878:	1d 92       	st	X+, r1

    free(all_stations);
    all_stations = NULL;

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	eb 30       	cpi	r30, 0x0B	; 11
     87e:	f8 07       	cpc	r31, r24
     880:	c1 f7       	brne	.-16     	; 0x872 <database_free+0x24>
    {
        stations_in_cell[i] = 0;
        cell_offsets[i] = 0;
    }

}
     882:	08 95       	ret

00000884 <print_all_known_stations>:

void print_all_known_stations()
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
    int i;
    lcd_init();
     888:	0e 94 8f 04 	call	0x91e	; 0x91e <lcd_init>
    string_write_int(num_stations,3);
     88c:	63 e0       	ldi	r22, 0x03	; 3
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	80 91 0b 03 	lds	r24, 0x030B
     894:	90 91 0c 03 	lds	r25, 0x030C
     898:	0e 94 71 01 	call	0x2e2	; 0x2e2 <string_write_int>
    string_write(" known\nstations . . .");
     89c:	81 e3       	ldi	r24, 0x31	; 49
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     8a4:	2f eb       	ldi	r18, 0xBF	; 191
     8a6:	87 e2       	ldi	r24, 0x27	; 39
     8a8:	99 e0       	ldi	r25, 0x09	; 9
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	80 40       	sbci	r24, 0x00	; 0
     8ae:	90 40       	sbci	r25, 0x00	; 0
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <print_all_known_stations+0x26>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <print_all_known_stations+0x30>
     8b4:	00 00       	nop

    _delay_ms(3000);

    if (update_trigger)
     8b6:	80 91 74 01 	lds	r24, 0x0174
     8ba:	90 91 75 01 	lds	r25, 0x0175
     8be:	89 2b       	or	r24, r25
     8c0:	11 f5       	brne	.+68     	; 0x906 <print_all_known_stations+0x82>
     8c2:	c0 e0       	ldi	r28, 0x00	; 0
     8c4:	d0 e0       	ldi	r29, 0x00	; 0
        return;

    for (i=0; i<num_stations; i++)
     8c6:	80 91 0b 03 	lds	r24, 0x030B
     8ca:	90 91 0c 03 	lds	r25, 0x030C
     8ce:	c8 17       	cp	r28, r24
     8d0:	d9 07       	cpc	r29, r25
     8d2:	cc f4       	brge	.+50     	; 0x906 <print_all_known_stations+0x82>
    {
        if (update_trigger)
     8d4:	80 91 74 01 	lds	r24, 0x0174
     8d8:	90 91 75 01 	lds	r25, 0x0175
     8dc:	89 2b       	or	r24, r25
     8de:	99 f4       	brne	.+38     	; 0x906 <print_all_known_stations+0x82>
            return;

        lcd_init();
     8e0:	0e 94 8f 04 	call	0x91e	; 0x91e <lcd_init>
        print_station(i);
     8e4:	ce 01       	movw	r24, r28
     8e6:	0e 94 85 02 	call	0x50a	; 0x50a <print_station>

        if (update_trigger)
     8ea:	80 91 74 01 	lds	r24, 0x0174
     8ee:	90 91 75 01 	lds	r25, 0x0175
     8f2:	89 2b       	or	r24, r25
     8f4:	41 f4       	brne	.+16     	; 0x906 <print_all_known_stations+0x82>
     8f6:	8f e4       	ldi	r24, 0x4F	; 79
     8f8:	93 ec       	ldi	r25, 0xC3	; 195
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <print_all_known_stations+0x76>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <print_all_known_stations+0x7c>
     900:	00 00       	nop
    _delay_ms(3000);

    if (update_trigger)
        return;

    for (i=0; i<num_stations; i++)
     902:	21 96       	adiw	r28, 0x01	; 1
     904:	e0 cf       	rjmp	.-64     	; 0x8c6 <print_all_known_stations+0x42>
        if (update_trigger)
            return;

        _delay_ms(200);   
    }
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     90c:	12 9a       	sbi	0x02, 2	; 2
     90e:	81 ee       	ldi	r24, 0xE1	; 225
     910:	94 e0       	ldi	r25, 0x04	; 4
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <datarw+0x6>
     916:	00 c0       	rjmp	.+0      	; 0x918 <datarw+0xc>
     918:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     91a:	12 98       	cbi	0x02, 2	; 2
     91c:	08 95       	ret

0000091e <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     91e:	10 92 0e 03 	sts	0x030E, r1
     922:	10 92 0d 03 	sts	0x030D, r1
    line_num = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 03 01 	sts	0x0103, r25
     92e:	80 93 02 01 	sts	0x0102, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     932:	81 b1       	in	r24, 0x01	; 1
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	81 b9       	out	0x01, r24	; 1
     938:	87 e8       	ldi	r24, 0x87	; 135
     93a:	93 e1       	ldi	r25, 0x13	; 19
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <lcd_init+0x1e>
     940:	00 c0       	rjmp	.+0      	; 0x942 <lcd_init+0x24>
     942:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     944:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     946:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     948:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     94a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     94c:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     94e:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     950:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     952:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     956:	81 ee       	ldi	r24, 0xE1	; 225
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <lcd_init+0x3c>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <lcd_init+0x42>
     960:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     962:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     966:	89 ef       	ldi	r24, 0xF9	; 249
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <lcd_init+0x4c>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <lcd_init+0x52>
     970:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     972:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     976:	89 ef       	ldi	r24, 0xF9	; 249
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <lcd_init+0x5c>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <lcd_init+0x62>
     980:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     982:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     984:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     986:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     988:	13 98       	cbi	0x02, 3	; 2
    datarw();
     98a:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     98e:	89 ef       	ldi	r24, 0xF9	; 249
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <lcd_init+0x74>
     996:	00 c0       	rjmp	.+0      	; 0x998 <lcd_init+0x7a>
     998:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     99a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     99c:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     99e:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     9a0:	13 98       	cbi	0x02, 3	; 2
    datarw();
     9a2:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     9a6:	89 ef       	ldi	r24, 0xF9	; 249
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <lcd_init+0x8c>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <lcd_init+0x92>
     9b0:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     9b2:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     9b4:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     9b6:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     9b8:	13 98       	cbi	0x02, 3	; 2
    datarw();
     9ba:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     9be:	89 ef       	ldi	r24, 0xF9	; 249
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <lcd_init+0xa4>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <lcd_init+0xaa>
     9c8:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     9ca:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     9cc:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     9ce:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     9d0:	13 98       	cbi	0x02, 3	; 2
    datarw();
     9d2:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     9d6:	89 ef       	ldi	r24, 0xF9	; 249
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <lcd_init+0xbc>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <lcd_init+0xc2>
     9e0:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     9e2:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     9e4:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     9e6:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     9e8:	13 98       	cbi	0x02, 3	; 2
    datarw();
     9ea:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     9ee:	89 ef       	ldi	r24, 0xF9	; 249
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <lcd_init+0xd4>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <lcd_init+0xda>
     9f8:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     9fa:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     9fc:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     9fe:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a00:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a02:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     a06:	89 ef       	ldi	r24, 0xF9	; 249
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <lcd_init+0xec>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <lcd_init+0xf2>
     a10:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     a12:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a14:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a16:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     a18:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     a1a:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     a1e:	89 ef       	ldi	r24, 0xF9	; 249
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <lcd_init+0x104>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <lcd_init+0x10a>
     a28:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     a2a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a2c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a2e:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a30:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a32:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     a36:	89 ef       	ldi	r24, 0xF9	; 249
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <lcd_init+0x11c>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <lcd_init+0x122>
     a40:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     a42:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     a44:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     a46:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     a48:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a4a:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     a4e:	89 ef       	ldi	r24, 0xF9	; 249
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <lcd_init+0x134>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <lcd_init+0x13a>
     a58:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     a5a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a5c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a5e:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a60:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a62:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     a66:	89 ef       	ldi	r24, 0xF9	; 249
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_init+0x14c>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <lcd_init+0x152>
     a70:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     a72:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     a74:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     a76:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     a78:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     a7a:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     a7e:	89 ef       	ldi	r24, 0xF9	; 249
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <lcd_init+0x164>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <lcd_init+0x16a>
     a88:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	08 95       	ret

00000a90 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	11 f4       	brne	.+4      	; 0xa98 <letterwrite+0x8>
     a94:	16 9a       	sbi	0x02, 6	; 2
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     a98:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     a9a:	61 30       	cpi	r22, 0x01	; 1
     a9c:	71 05       	cpc	r23, r1
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <letterwrite+0x14>
     aa0:	15 9a       	sbi	0x02, 5	; 2
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     aa4:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     aa6:	41 30       	cpi	r20, 0x01	; 1
     aa8:	51 05       	cpc	r21, r1
     aaa:	11 f4       	brne	.+4      	; 0xab0 <letterwrite+0x20>
     aac:	14 9a       	sbi	0x02, 4	; 2
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     ab0:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     ab2:	21 30       	cpi	r18, 0x01	; 1
     ab4:	31 05       	cpc	r19, r1
     ab6:	11 f4       	brne	.+4      	; 0xabc <letterwrite+0x2c>
     ab8:	13 9a       	sbi	0x02, 3	; 2
     aba:	01 c0       	rjmp	.+2      	; 0xabe <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     abc:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     abe:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
     ac2:	89 ef       	ldi	r24, 0xF9	; 249
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <letterwrite+0x36>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <letterwrite+0x3c>
     acc:	00 00       	nop
     ace:	08 95       	ret

00000ad0 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     ad6:	81 b1       	in	r24, 0x01	; 1
     ad8:	87 78       	andi	r24, 0x87	; 135
     ada:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     adc:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     ade:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     ae0:	12 9a       	sbi	0x02, 2	; 2
     ae2:	81 ee       	ldi	r24, 0xE1	; 225
     ae4:	94 e0       	ldi	r25, 0x04	; 4
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <instruction_read+0x16>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <instruction_read+0x1c>
     aec:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     aee:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     af0:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     af2:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     af4:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     af6:	12 98       	cbi	0x02, 2	; 2
     af8:	e9 ef       	ldi	r30, 0xF9	; 249
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <instruction_read+0x2c>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <instruction_read+0x32>
     b02:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     b04:	12 9a       	sbi	0x02, 2	; 2
     b06:	e1 ee       	ldi	r30, 0xE1	; 225
     b08:	f4 e0       	ldi	r31, 0x04	; 4
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <instruction_read+0x3a>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <instruction_read+0x40>
     b10:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     b12:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     b14:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     b16:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     b18:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     b1a:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	26 e0       	ldi	r18, 0x06	; 6
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	2a 95       	dec	r18
     b26:	e1 f7       	brne	.-8      	; 0xb20 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     b28:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
     b2c:	35 e0       	ldi	r19, 0x05	; 5
     b2e:	cc 0f       	add	r28, r28
     b30:	dd 1f       	adc	r29, r29
     b32:	3a 95       	dec	r19
     b34:	e1 f7       	brne	.-8      	; 0xb2e <instruction_read+0x5e>
     b36:	8c 2b       	or	r24, r28
     b38:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     b3a:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     b3c:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     b3e:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	54 e0       	ldi	r21, 0x04	; 4
     b44:	aa 0f       	add	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	5a 95       	dec	r21
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     b4c:	8a 2b       	or	r24, r26
     b4e:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     b50:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	73 e0       	ldi	r23, 0x03	; 3
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	7a 95       	dec	r23
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     b5e:	8e 2b       	or	r24, r30
     b60:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     b62:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	66 0f       	add	r22, r22
     b68:	77 1f       	adc	r23, r23
     b6a:	66 0f       	add	r22, r22
     b6c:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     b6e:	86 2b       	or	r24, r22
     b70:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     b72:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     b74:	51 b1       	in	r21, 0x01	; 1
     b76:	58 67       	ori	r21, 0x78	; 120
     b78:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     b7a:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     b7c:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     b7e:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	44 0f       	add	r20, r20
     b84:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     b86:	84 2b       	or	r24, r20
     b88:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     b8a:	16 fb       	bst	r17, 6
     b8c:	22 27       	eor	r18, r18
     b8e:	20 f9       	bld	r18, 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     b92:	36 95       	lsr	r19
     b94:	32 2f       	mov	r19, r18
     b96:	22 27       	eor	r18, r18
     b98:	37 95       	ror	r19
     b9a:	27 95       	ror	r18
}
     b9c:	82 2b       	or	r24, r18
     b9e:	93 2b       	or	r25, r19
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	08 95       	ret

00000ba8 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     ba8:	0e 94 68 05 	call	0xad0	; 0xad0 <instruction_read>
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	99 27       	eor	r25, r25
    return address+1;
}
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	08 95       	ret

00000bb4 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     bb4:	89 2b       	or	r24, r25
     bb6:	11 f4       	brne	.+4      	; 0xbbc <write_db74+0x8>
     bb8:	16 98       	cbi	0x02, 6	; 2
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <write_db74+0xa>
    else PORTA |= _BV(DB7);
     bbc:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     bbe:	67 2b       	or	r22, r23
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <write_db74+0x12>
     bc2:	15 98       	cbi	0x02, 5	; 2
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <write_db74+0x14>
    else PORTA |= _BV(DB6);
     bc6:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     bc8:	45 2b       	or	r20, r21
     bca:	11 f4       	brne	.+4      	; 0xbd0 <write_db74+0x1c>
     bcc:	14 98       	cbi	0x02, 4	; 2
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     bd0:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     bd2:	23 2b       	or	r18, r19
     bd4:	11 f4       	brne	.+4      	; 0xbda <write_db74+0x26>
     bd6:	13 98       	cbi	0x02, 3	; 2
     bd8:	08 95       	ret
    else PORTA |= _BV(DB4);
     bda:	13 9a       	sbi	0x02, 3	; 2
     bdc:	08 95       	ret

00000bde <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     be4:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     be6:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     be8:	28 2f       	mov	r18, r24
     bea:	22 95       	swap	r18
     bec:	21 70       	andi	r18, 0x01	; 1
     bee:	85 fb       	bst	r24, 5
     bf0:	44 27       	eor	r20, r20
     bf2:	40 f9       	bld	r20, 0
     bf4:	86 fb       	bst	r24, 6
     bf6:	66 27       	eor	r22, r22
     bf8:	60 f9       	bld	r22, 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 da 05 	call	0xbb4	; 0xbb4 <write_db74>
    datarw();
     c08:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     c0c:	9e 01       	movw	r18, r28
     c0e:	21 70       	andi	r18, 0x01	; 1
     c10:	33 27       	eor	r19, r19
     c12:	4c 2f       	mov	r20, r28
     c14:	46 95       	lsr	r20
     c16:	41 70       	andi	r20, 0x01	; 1
     c18:	c2 fb       	bst	r28, 2
     c1a:	66 27       	eor	r22, r22
     c1c:	60 f9       	bld	r22, 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	c3 fb       	bst	r28, 3
     c24:	88 27       	eor	r24, r24
     c26:	80 f9       	bld	r24, 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <write_db74>
    datarw();
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     c32:	0c 94 86 04 	jmp	0x90c	; 0x90c <datarw>

00000c36 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     c36:	cf 93       	push	r28
     c38:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     c3a:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     c3c:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     c3e:	84 fb       	bst	r24, 4
     c40:	22 27       	eor	r18, r18
     c42:	20 f9       	bld	r18, 0
     c44:	85 fb       	bst	r24, 5
     c46:	44 27       	eor	r20, r20
     c48:	40 f9       	bld	r20, 0
     c4a:	86 fb       	bst	r24, 6
     c4c:	66 27       	eor	r22, r22
     c4e:	60 f9       	bld	r22, 0
     c50:	88 1f       	adc	r24, r24
     c52:	88 27       	eor	r24, r24
     c54:	88 1f       	adc	r24, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <write_db74>
    datarw();
     c62:	0e 94 86 04 	call	0x90c	; 0x90c <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     c66:	2c 2f       	mov	r18, r28
     c68:	21 70       	andi	r18, 0x01	; 1
     c6a:	c1 fb       	bst	r28, 1
     c6c:	44 27       	eor	r20, r20
     c6e:	40 f9       	bld	r20, 0
     c70:	c2 fb       	bst	r28, 2
     c72:	66 27       	eor	r22, r22
     c74:	60 f9       	bld	r22, 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	c3 fb       	bst	r28, 3
     c7e:	88 27       	eor	r24, r24
     c80:	80 f9       	bld	r24, 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 da 05 	call	0xbb4	; 0xbb4 <write_db74>
    datarw();
}
     c88:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     c8a:	0c 94 86 04 	jmp	0x90c	; 0x90c <datarw>

00000c8e <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     c8e:	cf 93       	push	r28
     c90:	c8 2f       	mov	r28, r24
    chars_written++;
     c92:	20 91 0d 03 	lds	r18, 0x030D
     c96:	30 91 0e 03 	lds	r19, 0x030E
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	30 93 0e 03 	sts	0x030E, r19
     ca2:	20 93 0d 03 	sts	0x030D, r18

    if ((chars_written==17)||(mychar=='\n'))
     ca6:	21 31       	cpi	r18, 0x11	; 17
     ca8:	31 05       	cpc	r19, r1
     caa:	31 f0       	breq	.+12     	; 0xcb8 <char_write+0x2a>
     cac:	8a 30       	cpi	r24, 0x0A	; 10
     cae:	21 f0       	breq	.+8      	; 0xcb8 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     cb0:	8c 2f       	mov	r24, r28
    
}
     cb2:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     cb4:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     cb8:	20 91 02 01 	lds	r18, 0x0102
     cbc:	30 91 03 01 	lds	r19, 0x0103
     cc0:	21 30       	cpi	r18, 0x01	; 1
     cc2:	31 05       	cpc	r19, r1
     cc4:	79 f4       	brne	.+30     	; 0xce4 <char_write+0x56>
        {
            set_ddram_address(0x40);
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 ef 05 	call	0xbde	; 0xbde <set_ddram_address>
            line_num = 2;
     cce:	22 e0       	ldi	r18, 0x02	; 2
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	30 93 03 01 	sts	0x0103, r19
     cd6:	20 93 02 01 	sts	0x0102, r18
            chars_written = 0;
     cda:	10 92 0e 03 	sts	0x030E, r1
     cde:	10 92 0d 03 	sts	0x030D, r1
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <char_write+0x60>
        }
        else if (line_num==2)
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	11 f4       	brne	.+4      	; 0xcee <char_write+0x60>
        {
            lcd_init();
     cea:	0e 94 8f 04 	call	0x91e	; 0x91e <lcd_init>
        }
    }

    if (mychar!='\n')
     cee:	ca 30       	cpi	r28, 0x0A	; 10
     cf0:	f9 f6       	brne	.-66     	; 0xcb0 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <string_write>:
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	0e 94 d4 05 	call	0xba8	; 0xba8 <get_current_address>
     d04:	8e 01       	movw	r16, r28
     d06:	fe 01       	movw	r30, r28
     d08:	01 90       	ld	r0, Z+
     d0a:	00 20       	and	r0, r0
     d0c:	e9 f7       	brne	.-6      	; 0xd08 <string_write+0x12>
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	ec 1b       	sub	r30, r28
     d12:	fd 0b       	sbc	r31, r29
     d14:	c8 01       	movw	r24, r16
     d16:	8c 1b       	sub	r24, r28
     d18:	9d 0b       	sbc	r25, r29
     d1a:	8e 17       	cp	r24, r30
     d1c:	9f 07       	cpc	r25, r31
     d1e:	40 f4       	brcc	.+16     	; 0xd30 <string_write+0x3a>
     d20:	f8 01       	movw	r30, r16
     d22:	81 91       	ld	r24, Z+
     d24:	8f 01       	movw	r16, r30
     d26:	0e 94 47 06 	call	0xc8e	; 0xc8e <char_write>
     d2a:	0e 94 d4 05 	call	0xba8	; 0xba8 <get_current_address>
     d2e:	eb cf       	rjmp	.-42     	; 0xd06 <string_write+0x10>
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <main>:
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	1f 92       	push	r1
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	0e 94 6f 03 	call	0x6de	; 0x6de <prepare_device>
     d48:	87 e4       	ldi	r24, 0x47	; 71
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     d50:	0e 94 81 03 	call	0x702	; 0x702 <database_load>
     d54:	2f e3       	ldi	r18, 0x3F	; 63
     d56:	8d e0       	ldi	r24, 0x0D	; 13
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <main+0x20>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <main+0x2a>
     d64:	00 00       	nop
     d66:	85 e5       	ldi	r24, 0x55	; 85
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     d6e:	01 e0       	ldi	r16, 0x01	; 1
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	e0 90 74 01 	lds	r14, 0x0174
     d76:	f0 90 75 01 	lds	r15, 0x0175
     d7a:	e1 e0       	ldi	r30, 0x01	; 1
     d7c:	ee 16       	cp	r14, r30
     d7e:	f1 04       	cpc	r15, r1
     d80:	09 f0       	breq	.+2      	; 0xd84 <main+0x4a>
     d82:	52 c0       	rjmp	.+164    	; 0xe28 <main+0xee>
     d84:	80 91 70 01 	lds	r24, 0x0170
     d88:	90 91 71 01 	lds	r25, 0x0171
     d8c:	89 2b       	or	r24, r25
     d8e:	61 f4       	brne	.+24     	; 0xda8 <main+0x6e>
     d90:	0e 94 8f 04 	call	0x91e	; 0x91e <lcd_init>
     d94:	8b e5       	ldi	r24, 0x5B	; 91
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     d9c:	f0 92 71 01 	sts	0x0171, r15
     da0:	e0 92 70 01 	sts	0x0170, r14
     da4:	0e 94 27 04 	call	0x84e	; 0x84e <database_free>
     da8:	90 91 7a 01 	lds	r25, 0x017A
     dac:	80 91 79 01 	lds	r24, 0x0179
     db0:	98 17       	cp	r25, r24
     db2:	e1 f1       	breq	.+120    	; 0xe2c <main+0xf2>
     db4:	0e 94 cc 00 	call	0x198	; 0x198 <getChar>
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	0e 94 46 01 	call	0x28c	; 0x28c <serialEnd>
     dbe:	69 81       	ldd	r22, Y+1	; 0x01
     dc0:	89 2b       	or	r24, r25
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <main+0xc6>
     dc4:	10 92 75 01 	sts	0x0175, r1
     dc8:	10 92 74 01 	sts	0x0174, r1
     dcc:	10 92 71 01 	sts	0x0171, r1
     dd0:	10 92 70 01 	sts	0x0170, r1
     dd4:	0e 94 8f 04 	call	0x91e	; 0x91e <lcd_init>
     dd8:	87 e4       	ldi	r24, 0x47	; 71
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     de0:	0e 94 81 03 	call	0x702	; 0x702 <database_load>
     de4:	ff e7       	ldi	r31, 0x7F	; 127
     de6:	2a e1       	ldi	r18, 0x1A	; 26
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	f1 50       	subi	r31, 0x01	; 1
     dec:	20 40       	sbci	r18, 0x00	; 0
     dee:	80 40       	sbci	r24, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <main+0xb0>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <main+0xba>
     df4:	00 00       	nop
     df6:	85 e5       	ldi	r24, 0x55	; 85
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <string_write>
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <main+0xf2>
     e00:	80 91 72 01 	lds	r24, 0x0172
     e04:	90 91 73 01 	lds	r25, 0x0173
     e08:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__eewr_byte_m1284p>
     e0c:	80 91 72 01 	lds	r24, 0x0172
     e10:	90 91 73 01 	lds	r25, 0x0173
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	90 93 73 01 	sts	0x0173, r25
     e1a:	80 93 72 01 	sts	0x0172, r24
     e1e:	10 93 6f 01 	sts	0x016F, r17
     e22:	00 93 6e 01 	sts	0x016E, r16
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <main+0xf2>
     e28:	0e 94 42 04 	call	0x884	; 0x884 <print_all_known_stations>
     e2c:	80 91 6e 01 	lds	r24, 0x016E
     e30:	90 91 6f 01 	lds	r25, 0x016F
     e34:	89 2b       	or	r24, r25
     e36:	09 f4       	brne	.+2      	; 0xe3a <main+0x100>
     e38:	9c cf       	rjmp	.-200    	; 0xd72 <main+0x38>
     e3a:	80 91 6c 01 	lds	r24, 0x016C
     e3e:	90 91 6d 01 	lds	r25, 0x016D
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	90 93 6d 01 	sts	0x016D, r25
     e48:	80 93 6c 01 	sts	0x016C, r24
     e4c:	10 92 6f 01 	sts	0x016F, r1
     e50:	10 92 6e 01 	sts	0x016E, r1
     e54:	8e cf       	rjmp	.-228    	; 0xd72 <main+0x38>

00000e56 <__subsf3>:
     e56:	50 58       	subi	r21, 0x80	; 128

00000e58 <__addsf3>:
     e58:	bb 27       	eor	r27, r27
     e5a:	aa 27       	eor	r26, r26
     e5c:	0e d0       	rcall	.+28     	; 0xe7a <__addsf3x>
     e5e:	21 c1       	rjmp	.+578    	; 0x10a2 <__fp_round>
     e60:	12 d1       	rcall	.+548    	; 0x1086 <__fp_pscA>
     e62:	30 f0       	brcs	.+12     	; 0xe70 <__addsf3+0x18>
     e64:	17 d1       	rcall	.+558    	; 0x1094 <__fp_pscB>
     e66:	20 f0       	brcs	.+8      	; 0xe70 <__addsf3+0x18>
     e68:	31 f4       	brne	.+12     	; 0xe76 <__addsf3+0x1e>
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	11 f4       	brne	.+4      	; 0xe72 <__addsf3+0x1a>
     e6e:	1e f4       	brtc	.+6      	; 0xe76 <__addsf3+0x1e>
     e70:	07 c1       	rjmp	.+526    	; 0x1080 <__fp_nan>
     e72:	0e f4       	brtc	.+2      	; 0xe76 <__addsf3+0x1e>
     e74:	e0 95       	com	r30
     e76:	e7 fb       	bst	r30, 7
     e78:	d4 c0       	rjmp	.+424    	; 0x1022 <__fp_inf>

00000e7a <__addsf3x>:
     e7a:	e9 2f       	mov	r30, r25
     e7c:	23 d1       	rcall	.+582    	; 0x10c4 <__fp_split3>
     e7e:	80 f3       	brcs	.-32     	; 0xe60 <__addsf3+0x8>
     e80:	ba 17       	cp	r27, r26
     e82:	62 07       	cpc	r22, r18
     e84:	73 07       	cpc	r23, r19
     e86:	84 07       	cpc	r24, r20
     e88:	95 07       	cpc	r25, r21
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <__addsf3x+0x18>
     e8c:	71 f4       	brne	.+28     	; 0xeaa <__addsf3x+0x30>
     e8e:	9e f5       	brtc	.+102    	; 0xef6 <__addsf3x+0x7c>
     e90:	52 c1       	rjmp	.+676    	; 0x1136 <__fp_zero>
     e92:	0e f4       	brtc	.+2      	; 0xe96 <__addsf3x+0x1c>
     e94:	e0 95       	com	r30
     e96:	0b 2e       	mov	r0, r27
     e98:	ba 2f       	mov	r27, r26
     e9a:	a0 2d       	mov	r26, r0
     e9c:	0b 01       	movw	r0, r22
     e9e:	b9 01       	movw	r22, r18
     ea0:	90 01       	movw	r18, r0
     ea2:	0c 01       	movw	r0, r24
     ea4:	ca 01       	movw	r24, r20
     ea6:	a0 01       	movw	r20, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ff 27       	eor	r31, r31
     eac:	59 1b       	sub	r21, r25
     eae:	99 f0       	breq	.+38     	; 0xed6 <__addsf3x+0x5c>
     eb0:	59 3f       	cpi	r21, 0xF9	; 249
     eb2:	50 f4       	brcc	.+20     	; 0xec8 <__addsf3x+0x4e>
     eb4:	50 3e       	cpi	r21, 0xE0	; 224
     eb6:	68 f1       	brcs	.+90     	; 0xf12 <__addsf3x+0x98>
     eb8:	1a 16       	cp	r1, r26
     eba:	f0 40       	sbci	r31, 0x00	; 0
     ebc:	a2 2f       	mov	r26, r18
     ebe:	23 2f       	mov	r18, r19
     ec0:	34 2f       	mov	r19, r20
     ec2:	44 27       	eor	r20, r20
     ec4:	58 5f       	subi	r21, 0xF8	; 248
     ec6:	f3 cf       	rjmp	.-26     	; 0xeae <__addsf3x+0x34>
     ec8:	46 95       	lsr	r20
     eca:	37 95       	ror	r19
     ecc:	27 95       	ror	r18
     ece:	a7 95       	ror	r26
     ed0:	f0 40       	sbci	r31, 0x00	; 0
     ed2:	53 95       	inc	r21
     ed4:	c9 f7       	brne	.-14     	; 0xec8 <__addsf3x+0x4e>
     ed6:	7e f4       	brtc	.+30     	; 0xef6 <__addsf3x+0x7c>
     ed8:	1f 16       	cp	r1, r31
     eda:	ba 0b       	sbc	r27, r26
     edc:	62 0b       	sbc	r22, r18
     ede:	73 0b       	sbc	r23, r19
     ee0:	84 0b       	sbc	r24, r20
     ee2:	ba f0       	brmi	.+46     	; 0xf12 <__addsf3x+0x98>
     ee4:	91 50       	subi	r25, 0x01	; 1
     ee6:	a1 f0       	breq	.+40     	; 0xf10 <__addsf3x+0x96>
     ee8:	ff 0f       	add	r31, r31
     eea:	bb 1f       	adc	r27, r27
     eec:	66 1f       	adc	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	88 1f       	adc	r24, r24
     ef2:	c2 f7       	brpl	.-16     	; 0xee4 <__addsf3x+0x6a>
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <__addsf3x+0x98>
     ef6:	ba 0f       	add	r27, r26
     ef8:	62 1f       	adc	r22, r18
     efa:	73 1f       	adc	r23, r19
     efc:	84 1f       	adc	r24, r20
     efe:	48 f4       	brcc	.+18     	; 0xf12 <__addsf3x+0x98>
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f7 95       	ror	r31
     f0a:	9e 3f       	cpi	r25, 0xFE	; 254
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <__addsf3x+0x96>
     f0e:	b3 cf       	rjmp	.-154    	; 0xe76 <__addsf3+0x1e>
     f10:	93 95       	inc	r25
     f12:	88 0f       	add	r24, r24
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__addsf3x+0x9e>
     f16:	99 27       	eor	r25, r25
     f18:	ee 0f       	add	r30, r30
     f1a:	97 95       	ror	r25
     f1c:	87 95       	ror	r24
     f1e:	08 95       	ret

00000f20 <__fixsfsi>:
     f20:	04 d0       	rcall	.+8      	; 0xf2a <__fixunssfsi>
     f22:	68 94       	set
     f24:	b1 11       	cpse	r27, r1
     f26:	08 c1       	rjmp	.+528    	; 0x1138 <__fp_szero>
     f28:	08 95       	ret

00000f2a <__fixunssfsi>:
     f2a:	d4 d0       	rcall	.+424    	; 0x10d4 <__fp_splitA>
     f2c:	88 f0       	brcs	.+34     	; 0xf50 <__fixunssfsi+0x26>
     f2e:	9f 57       	subi	r25, 0x7F	; 127
     f30:	90 f0       	brcs	.+36     	; 0xf56 <__fixunssfsi+0x2c>
     f32:	b9 2f       	mov	r27, r25
     f34:	99 27       	eor	r25, r25
     f36:	b7 51       	subi	r27, 0x17	; 23
     f38:	a0 f0       	brcs	.+40     	; 0xf62 <__fixunssfsi+0x38>
     f3a:	d1 f0       	breq	.+52     	; 0xf70 <__fixunssfsi+0x46>
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	1a f0       	brmi	.+6      	; 0xf4c <__fixunssfsi+0x22>
     f46:	ba 95       	dec	r27
     f48:	c9 f7       	brne	.-14     	; 0xf3c <__fixunssfsi+0x12>
     f4a:	12 c0       	rjmp	.+36     	; 0xf70 <__fixunssfsi+0x46>
     f4c:	b1 30       	cpi	r27, 0x01	; 1
     f4e:	81 f0       	breq	.+32     	; 0xf70 <__fixunssfsi+0x46>
     f50:	f2 d0       	rcall	.+484    	; 0x1136 <__fp_zero>
     f52:	b1 e0       	ldi	r27, 0x01	; 1
     f54:	08 95       	ret
     f56:	ef c0       	rjmp	.+478    	; 0x1136 <__fp_zero>
     f58:	67 2f       	mov	r22, r23
     f5a:	78 2f       	mov	r23, r24
     f5c:	88 27       	eor	r24, r24
     f5e:	b8 5f       	subi	r27, 0xF8	; 248
     f60:	39 f0       	breq	.+14     	; 0xf70 <__fixunssfsi+0x46>
     f62:	b9 3f       	cpi	r27, 0xF9	; 249
     f64:	cc f3       	brlt	.-14     	; 0xf58 <__fixunssfsi+0x2e>
     f66:	86 95       	lsr	r24
     f68:	77 95       	ror	r23
     f6a:	67 95       	ror	r22
     f6c:	b3 95       	inc	r27
     f6e:	d9 f7       	brne	.-10     	; 0xf66 <__fixunssfsi+0x3c>
     f70:	3e f4       	brtc	.+14     	; 0xf80 <__fixunssfsi+0x56>
     f72:	90 95       	com	r25
     f74:	80 95       	com	r24
     f76:	70 95       	com	r23
     f78:	61 95       	neg	r22
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <__floatunsisf>:
     f82:	e8 94       	clt
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <__floatsisf+0x12>

00000f86 <__floatsisf>:
     f86:	97 fb       	bst	r25, 7
     f88:	3e f4       	brtc	.+14     	; 0xf98 <__floatsisf+0x12>
     f8a:	90 95       	com	r25
     f8c:	80 95       	com	r24
     f8e:	70 95       	com	r23
     f90:	61 95       	neg	r22
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	99 23       	and	r25, r25
     f9a:	a9 f0       	breq	.+42     	; 0xfc6 <__floatsisf+0x40>
     f9c:	f9 2f       	mov	r31, r25
     f9e:	96 e9       	ldi	r25, 0x96	; 150
     fa0:	bb 27       	eor	r27, r27
     fa2:	93 95       	inc	r25
     fa4:	f6 95       	lsr	r31
     fa6:	87 95       	ror	r24
     fa8:	77 95       	ror	r23
     faa:	67 95       	ror	r22
     fac:	b7 95       	ror	r27
     fae:	f1 11       	cpse	r31, r1
     fb0:	f8 cf       	rjmp	.-16     	; 0xfa2 <__floatsisf+0x1c>
     fb2:	fa f4       	brpl	.+62     	; 0xff2 <__floatsisf+0x6c>
     fb4:	bb 0f       	add	r27, r27
     fb6:	11 f4       	brne	.+4      	; 0xfbc <__floatsisf+0x36>
     fb8:	60 ff       	sbrs	r22, 0
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <__floatsisf+0x6c>
     fbc:	6f 5f       	subi	r22, 0xFF	; 255
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	8f 4f       	sbci	r24, 0xFF	; 255
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	16 c0       	rjmp	.+44     	; 0xff2 <__floatsisf+0x6c>
     fc6:	88 23       	and	r24, r24
     fc8:	11 f0       	breq	.+4      	; 0xfce <__floatsisf+0x48>
     fca:	96 e9       	ldi	r25, 0x96	; 150
     fcc:	11 c0       	rjmp	.+34     	; 0xff0 <__floatsisf+0x6a>
     fce:	77 23       	and	r23, r23
     fd0:	21 f0       	breq	.+8      	; 0xfda <__floatsisf+0x54>
     fd2:	9e e8       	ldi	r25, 0x8E	; 142
     fd4:	87 2f       	mov	r24, r23
     fd6:	76 2f       	mov	r23, r22
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <__floatsisf+0x5e>
     fda:	66 23       	and	r22, r22
     fdc:	71 f0       	breq	.+28     	; 0xffa <__floatsisf+0x74>
     fde:	96 e8       	ldi	r25, 0x86	; 134
     fe0:	86 2f       	mov	r24, r22
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	2a f0       	brmi	.+10     	; 0xff2 <__floatsisf+0x6c>
     fe8:	9a 95       	dec	r25
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	da f7       	brpl	.-10     	; 0xfe8 <__floatsisf+0x62>
     ff2:	88 0f       	add	r24, r24
     ff4:	96 95       	lsr	r25
     ff6:	87 95       	ror	r24
     ff8:	97 f9       	bld	r25, 7
     ffa:	08 95       	ret

00000ffc <floor>:
     ffc:	85 d0       	rcall	.+266    	; 0x1108 <__fp_trunc>
     ffe:	80 f0       	brcs	.+32     	; 0x1020 <floor+0x24>
    1000:	9f 37       	cpi	r25, 0x7F	; 127
    1002:	40 f4       	brcc	.+16     	; 0x1014 <floor+0x18>
    1004:	91 11       	cpse	r25, r1
    1006:	0e f0       	brts	.+2      	; 0x100a <floor+0xe>
    1008:	97 c0       	rjmp	.+302    	; 0x1138 <__fp_szero>
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	9f eb       	ldi	r25, 0xBF	; 191
    1012:	08 95       	ret
    1014:	26 f4       	brtc	.+8      	; 0x101e <floor+0x22>
    1016:	1b 16       	cp	r1, r27
    1018:	61 1d       	adc	r22, r1
    101a:	71 1d       	adc	r23, r1
    101c:	81 1d       	adc	r24, r1
    101e:	07 c0       	rjmp	.+14     	; 0x102e <__fp_mintl>
    1020:	21 c0       	rjmp	.+66     	; 0x1064 <__fp_mpack>

00001022 <__fp_inf>:
    1022:	97 f9       	bld	r25, 7
    1024:	9f 67       	ori	r25, 0x7F	; 127
    1026:	80 e8       	ldi	r24, 0x80	; 128
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	08 95       	ret

0000102e <__fp_mintl>:
    102e:	88 23       	and	r24, r24
    1030:	71 f4       	brne	.+28     	; 0x104e <__fp_mintl+0x20>
    1032:	77 23       	and	r23, r23
    1034:	21 f0       	breq	.+8      	; 0x103e <__fp_mintl+0x10>
    1036:	98 50       	subi	r25, 0x08	; 8
    1038:	87 2b       	or	r24, r23
    103a:	76 2f       	mov	r23, r22
    103c:	07 c0       	rjmp	.+14     	; 0x104c <__fp_mintl+0x1e>
    103e:	66 23       	and	r22, r22
    1040:	11 f4       	brne	.+4      	; 0x1046 <__fp_mintl+0x18>
    1042:	99 27       	eor	r25, r25
    1044:	0d c0       	rjmp	.+26     	; 0x1060 <__fp_mintl+0x32>
    1046:	90 51       	subi	r25, 0x10	; 16
    1048:	86 2b       	or	r24, r22
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	2a f0       	brmi	.+10     	; 0x105a <__fp_mintl+0x2c>
    1050:	9a 95       	dec	r25
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	da f7       	brpl	.-10     	; 0x1050 <__fp_mintl+0x22>
    105a:	88 0f       	add	r24, r24
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	97 f9       	bld	r25, 7
    1062:	08 95       	ret

00001064 <__fp_mpack>:
    1064:	9f 3f       	cpi	r25, 0xFF	; 255
    1066:	31 f0       	breq	.+12     	; 0x1074 <__fp_mpack_finite+0xc>

00001068 <__fp_mpack_finite>:
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	20 f4       	brcc	.+8      	; 0x1074 <__fp_mpack_finite+0xc>
    106c:	87 95       	ror	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	88 0f       	add	r24, r24
    1076:	91 1d       	adc	r25, r1
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	97 f9       	bld	r25, 7
    107e:	08 95       	ret

00001080 <__fp_nan>:
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	80 ec       	ldi	r24, 0xC0	; 192
    1084:	08 95       	ret

00001086 <__fp_pscA>:
    1086:	00 24       	eor	r0, r0
    1088:	0a 94       	dec	r0
    108a:	16 16       	cp	r1, r22
    108c:	17 06       	cpc	r1, r23
    108e:	18 06       	cpc	r1, r24
    1090:	09 06       	cpc	r0, r25
    1092:	08 95       	ret

00001094 <__fp_pscB>:
    1094:	00 24       	eor	r0, r0
    1096:	0a 94       	dec	r0
    1098:	12 16       	cp	r1, r18
    109a:	13 06       	cpc	r1, r19
    109c:	14 06       	cpc	r1, r20
    109e:	05 06       	cpc	r0, r21
    10a0:	08 95       	ret

000010a2 <__fp_round>:
    10a2:	09 2e       	mov	r0, r25
    10a4:	03 94       	inc	r0
    10a6:	00 0c       	add	r0, r0
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__fp_round+0xc>
    10aa:	88 23       	and	r24, r24
    10ac:	52 f0       	brmi	.+20     	; 0x10c2 <__fp_round+0x20>
    10ae:	bb 0f       	add	r27, r27
    10b0:	40 f4       	brcc	.+16     	; 0x10c2 <__fp_round+0x20>
    10b2:	bf 2b       	or	r27, r31
    10b4:	11 f4       	brne	.+4      	; 0x10ba <__fp_round+0x18>
    10b6:	60 ff       	sbrs	r22, 0
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <__fp_round+0x20>
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <__fp_split3>:
    10c4:	57 fd       	sbrc	r21, 7
    10c6:	90 58       	subi	r25, 0x80	; 128
    10c8:	44 0f       	add	r20, r20
    10ca:	55 1f       	adc	r21, r21
    10cc:	59 f0       	breq	.+22     	; 0x10e4 <__fp_splitA+0x10>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	71 f0       	breq	.+28     	; 0x10ee <__fp_splitA+0x1a>
    10d2:	47 95       	ror	r20

000010d4 <__fp_splitA>:
    10d4:	88 0f       	add	r24, r24
    10d6:	97 fb       	bst	r25, 7
    10d8:	99 1f       	adc	r25, r25
    10da:	61 f0       	breq	.+24     	; 0x10f4 <__fp_splitA+0x20>
    10dc:	9f 3f       	cpi	r25, 0xFF	; 255
    10de:	79 f0       	breq	.+30     	; 0x10fe <__fp_splitA+0x2a>
    10e0:	87 95       	ror	r24
    10e2:	08 95       	ret
    10e4:	12 16       	cp	r1, r18
    10e6:	13 06       	cpc	r1, r19
    10e8:	14 06       	cpc	r1, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	f2 cf       	rjmp	.-28     	; 0x10d2 <__fp_split3+0xe>
    10ee:	46 95       	lsr	r20
    10f0:	f1 df       	rcall	.-30     	; 0x10d4 <__fp_splitA>
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <__fp_splitA+0x30>
    10f4:	16 16       	cp	r1, r22
    10f6:	17 06       	cpc	r1, r23
    10f8:	18 06       	cpc	r1, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	f1 cf       	rjmp	.-30     	; 0x10e0 <__fp_splitA+0xc>
    10fe:	86 95       	lsr	r24
    1100:	71 05       	cpc	r23, r1
    1102:	61 05       	cpc	r22, r1
    1104:	08 94       	sec
    1106:	08 95       	ret

00001108 <__fp_trunc>:
    1108:	e5 df       	rcall	.-54     	; 0x10d4 <__fp_splitA>
    110a:	a0 f0       	brcs	.+40     	; 0x1134 <__fp_trunc+0x2c>
    110c:	be e7       	ldi	r27, 0x7E	; 126
    110e:	b9 17       	cp	r27, r25
    1110:	88 f4       	brcc	.+34     	; 0x1134 <__fp_trunc+0x2c>
    1112:	bb 27       	eor	r27, r27
    1114:	9f 38       	cpi	r25, 0x8F	; 143
    1116:	60 f4       	brcc	.+24     	; 0x1130 <__fp_trunc+0x28>
    1118:	16 16       	cp	r1, r22
    111a:	b1 1d       	adc	r27, r1
    111c:	67 2f       	mov	r22, r23
    111e:	78 2f       	mov	r23, r24
    1120:	88 27       	eor	r24, r24
    1122:	98 5f       	subi	r25, 0xF8	; 248
    1124:	f7 cf       	rjmp	.-18     	; 0x1114 <__fp_trunc+0xc>
    1126:	86 95       	lsr	r24
    1128:	77 95       	ror	r23
    112a:	67 95       	ror	r22
    112c:	b1 1d       	adc	r27, r1
    112e:	93 95       	inc	r25
    1130:	96 39       	cpi	r25, 0x96	; 150
    1132:	c8 f3       	brcs	.-14     	; 0x1126 <__fp_trunc+0x1e>
    1134:	08 95       	ret

00001136 <__fp_zero>:
    1136:	e8 94       	clt

00001138 <__fp_szero>:
    1138:	bb 27       	eor	r27, r27
    113a:	66 27       	eor	r22, r22
    113c:	77 27       	eor	r23, r23
    113e:	cb 01       	movw	r24, r22
    1140:	97 f9       	bld	r25, 7
    1142:	08 95       	ret

00001144 <log10>:
    1144:	0a d0       	rcall	.+20     	; 0x115a <log>
    1146:	29 ed       	ldi	r18, 0xD9	; 217
    1148:	3b e5       	ldi	r19, 0x5B	; 91
    114a:	4e ed       	ldi	r20, 0xDE	; 222
    114c:	5e e3       	ldi	r21, 0x3E	; 62
    114e:	78 c0       	rjmp	.+240    	; 0x1240 <__mulsf3>
    1150:	0e f0       	brts	.+2      	; 0x1154 <log10+0x10>
    1152:	88 cf       	rjmp	.-240    	; 0x1064 <__fp_mpack>
    1154:	95 cf       	rjmp	.-214    	; 0x1080 <__fp_nan>
    1156:	68 94       	set
    1158:	64 cf       	rjmp	.-312    	; 0x1022 <__fp_inf>

0000115a <log>:
    115a:	bc df       	rcall	.-136    	; 0x10d4 <__fp_splitA>
    115c:	c8 f3       	brcs	.-14     	; 0x1150 <log10+0xc>
    115e:	99 23       	and	r25, r25
    1160:	d1 f3       	breq	.-12     	; 0x1156 <log10+0x12>
    1162:	c6 f3       	brts	.-16     	; 0x1154 <log10+0x10>
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	1f 93       	push	r17
    116a:	0f 93       	push	r16
    116c:	ff 92       	push	r15
    116e:	c9 2f       	mov	r28, r25
    1170:	dd 27       	eor	r29, r29
    1172:	88 23       	and	r24, r24
    1174:	2a f0       	brmi	.+10     	; 0x1180 <log+0x26>
    1176:	21 97       	sbiw	r28, 0x01	; 1
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	da f7       	brpl	.-10     	; 0x1176 <log+0x1c>
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f eb       	ldi	r21, 0xBF	; 191
    1188:	9f e3       	ldi	r25, 0x3F	; 63
    118a:	88 39       	cpi	r24, 0x98	; 152
    118c:	20 f0       	brcs	.+8      	; 0x1196 <log+0x3c>
    118e:	80 3e       	cpi	r24, 0xE0	; 224
    1190:	30 f0       	brcs	.+12     	; 0x119e <log+0x44>
    1192:	21 96       	adiw	r28, 0x01	; 1
    1194:	8f 77       	andi	r24, 0x7F	; 127
    1196:	60 de       	rcall	.-832    	; 0xe58 <__addsf3>
    1198:	ec e8       	ldi	r30, 0x8C	; 140
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <log+0x4a>
    119e:	5c de       	rcall	.-840    	; 0xe58 <__addsf3>
    11a0:	e9 eb       	ldi	r30, 0xB9	; 185
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	4d d1       	rcall	.+666    	; 0x1440 <__fp_powser>
    11a6:	8b 01       	movw	r16, r22
    11a8:	be 01       	movw	r22, r28
    11aa:	ec 01       	movw	r28, r24
    11ac:	fb 2e       	mov	r15, r27
    11ae:	6f 57       	subi	r22, 0x7F	; 127
    11b0:	71 09       	sbc	r23, r1
    11b2:	75 95       	asr	r23
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 0b       	sbc	r24, r24
    11b8:	99 0b       	sbc	r25, r25
    11ba:	e5 de       	rcall	.-566    	; 0xf86 <__floatsisf>
    11bc:	28 e1       	ldi	r18, 0x18	; 24
    11be:	32 e7       	ldi	r19, 0x72	; 114
    11c0:	41 e3       	ldi	r20, 0x31	; 49
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	49 d0       	rcall	.+146    	; 0x1258 <__mulsf3x>
    11c6:	af 2d       	mov	r26, r15
    11c8:	98 01       	movw	r18, r16
    11ca:	ae 01       	movw	r20, r28
    11cc:	ff 90       	pop	r15
    11ce:	0f 91       	pop	r16
    11d0:	1f 91       	pop	r17
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	51 de       	rcall	.-862    	; 0xe7a <__addsf3x>
    11d8:	64 cf       	rjmp	.-312    	; 0x10a2 <__fp_round>

000011da <modf>:
    11da:	fa 01       	movw	r30, r20
    11dc:	dc 01       	movw	r26, r24
    11de:	aa 0f       	add	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	bf 57       	subi	r27, 0x7F	; 127
    11e8:	28 f4       	brcc	.+10     	; 0x11f4 <modf+0x1a>
    11ea:	22 27       	eor	r18, r18
    11ec:	33 27       	eor	r19, r19
    11ee:	44 27       	eor	r20, r20
    11f0:	50 78       	andi	r21, 0x80	; 128
    11f2:	1f c0       	rjmp	.+62     	; 0x1232 <modf+0x58>
    11f4:	b7 51       	subi	r27, 0x17	; 23
    11f6:	88 f4       	brcc	.+34     	; 0x121a <modf+0x40>
    11f8:	ab 2f       	mov	r26, r27
    11fa:	00 24       	eor	r0, r0
    11fc:	46 95       	lsr	r20
    11fe:	37 95       	ror	r19
    1200:	27 95       	ror	r18
    1202:	01 1c       	adc	r0, r1
    1204:	a3 95       	inc	r26
    1206:	d2 f3       	brmi	.-12     	; 0x11fc <modf+0x22>
    1208:	00 20       	and	r0, r0
    120a:	69 f0       	breq	.+26     	; 0x1226 <modf+0x4c>
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	44 1f       	adc	r20, r20
    1212:	b3 95       	inc	r27
    1214:	da f3       	brmi	.-10     	; 0x120c <modf+0x32>
    1216:	0d d0       	rcall	.+26     	; 0x1232 <modf+0x58>
    1218:	1e ce       	rjmp	.-964    	; 0xe56 <__subsf3>
    121a:	61 30       	cpi	r22, 0x01	; 1
    121c:	71 05       	cpc	r23, r1
    121e:	a0 e8       	ldi	r26, 0x80	; 128
    1220:	8a 07       	cpc	r24, r26
    1222:	b9 46       	sbci	r27, 0x69	; 105
    1224:	30 f4       	brcc	.+12     	; 0x1232 <modf+0x58>
    1226:	9b 01       	movw	r18, r22
    1228:	ac 01       	movw	r20, r24
    122a:	66 27       	eor	r22, r22
    122c:	77 27       	eor	r23, r23
    122e:	88 27       	eor	r24, r24
    1230:	90 78       	andi	r25, 0x80	; 128
    1232:	30 96       	adiw	r30, 0x00	; 0
    1234:	21 f0       	breq	.+8      	; 0x123e <modf+0x64>
    1236:	20 83       	st	Z, r18
    1238:	31 83       	std	Z+1, r19	; 0x01
    123a:	42 83       	std	Z+2, r20	; 0x02
    123c:	53 83       	std	Z+3, r21	; 0x03
    123e:	08 95       	ret

00001240 <__mulsf3>:
    1240:	0b d0       	rcall	.+22     	; 0x1258 <__mulsf3x>
    1242:	2f cf       	rjmp	.-418    	; 0x10a2 <__fp_round>
    1244:	20 df       	rcall	.-448    	; 0x1086 <__fp_pscA>
    1246:	28 f0       	brcs	.+10     	; 0x1252 <__mulsf3+0x12>
    1248:	25 df       	rcall	.-438    	; 0x1094 <__fp_pscB>
    124a:	18 f0       	brcs	.+6      	; 0x1252 <__mulsf3+0x12>
    124c:	95 23       	and	r25, r21
    124e:	09 f0       	breq	.+2      	; 0x1252 <__mulsf3+0x12>
    1250:	e8 ce       	rjmp	.-560    	; 0x1022 <__fp_inf>
    1252:	16 cf       	rjmp	.-468    	; 0x1080 <__fp_nan>
    1254:	11 24       	eor	r1, r1
    1256:	70 cf       	rjmp	.-288    	; 0x1138 <__fp_szero>

00001258 <__mulsf3x>:
    1258:	35 df       	rcall	.-406    	; 0x10c4 <__fp_split3>
    125a:	a0 f3       	brcs	.-24     	; 0x1244 <__mulsf3+0x4>

0000125c <__mulsf3_pse>:
    125c:	95 9f       	mul	r25, r21
    125e:	d1 f3       	breq	.-12     	; 0x1254 <__mulsf3+0x14>
    1260:	95 0f       	add	r25, r21
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	55 1f       	adc	r21, r21
    1266:	62 9f       	mul	r22, r18
    1268:	f0 01       	movw	r30, r0
    126a:	72 9f       	mul	r23, r18
    126c:	bb 27       	eor	r27, r27
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	63 9f       	mul	r22, r19
    1274:	aa 27       	eor	r26, r26
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	aa 1f       	adc	r26, r26
    127c:	64 9f       	mul	r22, r20
    127e:	66 27       	eor	r22, r22
    1280:	b0 0d       	add	r27, r0
    1282:	a1 1d       	adc	r26, r1
    1284:	66 1f       	adc	r22, r22
    1286:	82 9f       	mul	r24, r18
    1288:	22 27       	eor	r18, r18
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	73 9f       	mul	r23, r19
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	83 9f       	mul	r24, r19
    129a:	a0 0d       	add	r26, r0
    129c:	61 1d       	adc	r22, r1
    129e:	22 1f       	adc	r18, r18
    12a0:	74 9f       	mul	r23, r20
    12a2:	33 27       	eor	r19, r19
    12a4:	a0 0d       	add	r26, r0
    12a6:	61 1d       	adc	r22, r1
    12a8:	23 1f       	adc	r18, r19
    12aa:	84 9f       	mul	r24, r20
    12ac:	60 0d       	add	r22, r0
    12ae:	21 1d       	adc	r18, r1
    12b0:	82 2f       	mov	r24, r18
    12b2:	76 2f       	mov	r23, r22
    12b4:	6a 2f       	mov	r22, r26
    12b6:	11 24       	eor	r1, r1
    12b8:	9f 57       	subi	r25, 0x7F	; 127
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	8a f0       	brmi	.+34     	; 0x12e0 <__mulsf3_pse+0x84>
    12be:	e1 f0       	breq	.+56     	; 0x12f8 <__mulsf3_pse+0x9c>
    12c0:	88 23       	and	r24, r24
    12c2:	4a f0       	brmi	.+18     	; 0x12d6 <__mulsf3_pse+0x7a>
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	bb 1f       	adc	r27, r27
    12ca:	66 1f       	adc	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	a9 f7       	brne	.-22     	; 0x12c0 <__mulsf3_pse+0x64>
    12d6:	9e 3f       	cpi	r25, 0xFE	; 254
    12d8:	51 05       	cpc	r21, r1
    12da:	70 f0       	brcs	.+28     	; 0x12f8 <__mulsf3_pse+0x9c>
    12dc:	a2 ce       	rjmp	.-700    	; 0x1022 <__fp_inf>
    12de:	2c cf       	rjmp	.-424    	; 0x1138 <__fp_szero>
    12e0:	5f 3f       	cpi	r21, 0xFF	; 255
    12e2:	ec f3       	brlt	.-6      	; 0x12de <__mulsf3_pse+0x82>
    12e4:	98 3e       	cpi	r25, 0xE8	; 232
    12e6:	dc f3       	brlt	.-10     	; 0x12de <__mulsf3_pse+0x82>
    12e8:	86 95       	lsr	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	b7 95       	ror	r27
    12f0:	f7 95       	ror	r31
    12f2:	e7 95       	ror	r30
    12f4:	9f 5f       	subi	r25, 0xFF	; 255
    12f6:	c1 f7       	brne	.-16     	; 0x12e8 <__mulsf3_pse+0x8c>
    12f8:	fe 2b       	or	r31, r30
    12fa:	88 0f       	add	r24, r24
    12fc:	91 1d       	adc	r25, r1
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	97 f9       	bld	r25, 7
    1304:	08 95       	ret

00001306 <pow>:
    1306:	fa 01       	movw	r30, r20
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	30 96       	adiw	r30, 0x00	; 0
    130e:	21 05       	cpc	r18, r1
    1310:	31 05       	cpc	r19, r1
    1312:	99 f1       	breq	.+102    	; 0x137a <pow+0x74>
    1314:	61 15       	cp	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	61 f4       	brne	.+24     	; 0x1332 <pow+0x2c>
    131a:	80 38       	cpi	r24, 0x80	; 128
    131c:	bf e3       	ldi	r27, 0x3F	; 63
    131e:	9b 07       	cpc	r25, r27
    1320:	49 f1       	breq	.+82     	; 0x1374 <pow+0x6e>
    1322:	68 94       	set
    1324:	90 38       	cpi	r25, 0x80	; 128
    1326:	81 05       	cpc	r24, r1
    1328:	61 f0       	breq	.+24     	; 0x1342 <pow+0x3c>
    132a:	80 38       	cpi	r24, 0x80	; 128
    132c:	bf ef       	ldi	r27, 0xFF	; 255
    132e:	9b 07       	cpc	r25, r27
    1330:	41 f0       	breq	.+16     	; 0x1342 <pow+0x3c>
    1332:	99 23       	and	r25, r25
    1334:	42 f5       	brpl	.+80     	; 0x1386 <pow+0x80>
    1336:	ff 3f       	cpi	r31, 0xFF	; 255
    1338:	e1 05       	cpc	r30, r1
    133a:	31 05       	cpc	r19, r1
    133c:	21 05       	cpc	r18, r1
    133e:	11 f1       	breq	.+68     	; 0x1384 <pow+0x7e>
    1340:	e8 94       	clt
    1342:	08 94       	sec
    1344:	e7 95       	ror	r30
    1346:	d9 01       	movw	r26, r18
    1348:	aa 23       	and	r26, r26
    134a:	29 f4       	brne	.+10     	; 0x1356 <pow+0x50>
    134c:	ab 2f       	mov	r26, r27
    134e:	be 2f       	mov	r27, r30
    1350:	f8 5f       	subi	r31, 0xF8	; 248
    1352:	d0 f3       	brcs	.-12     	; 0x1348 <pow+0x42>
    1354:	10 c0       	rjmp	.+32     	; 0x1376 <pow+0x70>
    1356:	ff 5f       	subi	r31, 0xFF	; 255
    1358:	70 f4       	brcc	.+28     	; 0x1376 <pow+0x70>
    135a:	a6 95       	lsr	r26
    135c:	e0 f7       	brcc	.-8      	; 0x1356 <pow+0x50>
    135e:	f7 39       	cpi	r31, 0x97	; 151
    1360:	50 f0       	brcs	.+20     	; 0x1376 <pow+0x70>
    1362:	19 f0       	breq	.+6      	; 0x136a <pow+0x64>
    1364:	ff 3a       	cpi	r31, 0xAF	; 175
    1366:	38 f4       	brcc	.+14     	; 0x1376 <pow+0x70>
    1368:	9f 77       	andi	r25, 0x7F	; 127
    136a:	9f 93       	push	r25
    136c:	0c d0       	rcall	.+24     	; 0x1386 <pow+0x80>
    136e:	0f 90       	pop	r0
    1370:	07 fc       	sbrc	r0, 7
    1372:	90 58       	subi	r25, 0x80	; 128
    1374:	08 95       	ret
    1376:	3e f0       	brts	.+14     	; 0x1386 <pow+0x80>
    1378:	83 ce       	rjmp	.-762    	; 0x1080 <__fp_nan>
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	9f e3       	ldi	r25, 0x3F	; 63
    1382:	08 95       	ret
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	9f 77       	andi	r25, 0x7F	; 127
    1388:	5f 93       	push	r21
    138a:	4f 93       	push	r20
    138c:	3f 93       	push	r19
    138e:	2f 93       	push	r18
    1390:	e4 de       	rcall	.-568    	; 0x115a <log>
    1392:	2f 91       	pop	r18
    1394:	3f 91       	pop	r19
    1396:	4f 91       	pop	r20
    1398:	5f 91       	pop	r21
    139a:	52 df       	rcall	.-348    	; 0x1240 <__mulsf3>
    139c:	25 c0       	rjmp	.+74     	; 0x13e8 <exp>

0000139e <round>:
    139e:	9a de       	rcall	.-716    	; 0x10d4 <__fp_splitA>
    13a0:	e0 f0       	brcs	.+56     	; 0x13da <round+0x3c>
    13a2:	9e 37       	cpi	r25, 0x7E	; 126
    13a4:	d8 f0       	brcs	.+54     	; 0x13dc <round+0x3e>
    13a6:	96 39       	cpi	r25, 0x96	; 150
    13a8:	b8 f4       	brcc	.+46     	; 0x13d8 <round+0x3a>
    13aa:	9e 38       	cpi	r25, 0x8E	; 142
    13ac:	48 f4       	brcc	.+18     	; 0x13c0 <round+0x22>
    13ae:	67 2f       	mov	r22, r23
    13b0:	78 2f       	mov	r23, r24
    13b2:	88 27       	eor	r24, r24
    13b4:	98 5f       	subi	r25, 0xF8	; 248
    13b6:	f9 cf       	rjmp	.-14     	; 0x13aa <round+0xc>
    13b8:	86 95       	lsr	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	93 95       	inc	r25
    13c0:	95 39       	cpi	r25, 0x95	; 149
    13c2:	d0 f3       	brcs	.-12     	; 0x13b8 <round+0x1a>
    13c4:	b6 2f       	mov	r27, r22
    13c6:	b1 70       	andi	r27, 0x01	; 1
    13c8:	6b 0f       	add	r22, r27
    13ca:	71 1d       	adc	r23, r1
    13cc:	81 1d       	adc	r24, r1
    13ce:	20 f4       	brcc	.+8      	; 0x13d8 <round+0x3a>
    13d0:	87 95       	ror	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	93 95       	inc	r25
    13d8:	2a ce       	rjmp	.-940    	; 0x102e <__fp_mintl>
    13da:	44 ce       	rjmp	.-888    	; 0x1064 <__fp_mpack>
    13dc:	ad ce       	rjmp	.-678    	; 0x1138 <__fp_szero>
    13de:	19 f4       	brne	.+6      	; 0x13e6 <round+0x48>
    13e0:	0e f0       	brts	.+2      	; 0x13e4 <round+0x46>
    13e2:	1f ce       	rjmp	.-962    	; 0x1022 <__fp_inf>
    13e4:	a8 ce       	rjmp	.-688    	; 0x1136 <__fp_zero>
    13e6:	4c ce       	rjmp	.-872    	; 0x1080 <__fp_nan>

000013e8 <exp>:
    13e8:	75 de       	rcall	.-790    	; 0x10d4 <__fp_splitA>
    13ea:	c8 f3       	brcs	.-14     	; 0x13de <round+0x40>
    13ec:	96 38       	cpi	r25, 0x86	; 134
    13ee:	c0 f7       	brcc	.-16     	; 0x13e0 <round+0x42>
    13f0:	07 f8       	bld	r0, 7
    13f2:	0f 92       	push	r0
    13f4:	e8 94       	clt
    13f6:	2b e3       	ldi	r18, 0x3B	; 59
    13f8:	3a ea       	ldi	r19, 0xAA	; 170
    13fa:	48 eb       	ldi	r20, 0xB8	; 184
    13fc:	5f e7       	ldi	r21, 0x7F	; 127
    13fe:	2e df       	rcall	.-420    	; 0x125c <__mulsf3_pse>
    1400:	0f 92       	push	r0
    1402:	0f 92       	push	r0
    1404:	0f 92       	push	r0
    1406:	4d b7       	in	r20, 0x3d	; 61
    1408:	5e b7       	in	r21, 0x3e	; 62
    140a:	0f 92       	push	r0
    140c:	e6 de       	rcall	.-564    	; 0x11da <modf>
    140e:	e6 ee       	ldi	r30, 0xE6	; 230
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	16 d0       	rcall	.+44     	; 0x1440 <__fp_powser>
    1414:	4f 91       	pop	r20
    1416:	5f 91       	pop	r21
    1418:	ef 91       	pop	r30
    141a:	ff 91       	pop	r31
    141c:	e5 95       	asr	r30
    141e:	ee 1f       	adc	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	49 f0       	breq	.+18     	; 0x1436 <exp+0x4e>
    1424:	fe 57       	subi	r31, 0x7E	; 126
    1426:	e0 68       	ori	r30, 0x80	; 128
    1428:	44 27       	eor	r20, r20
    142a:	ee 0f       	add	r30, r30
    142c:	44 1f       	adc	r20, r20
    142e:	fa 95       	dec	r31
    1430:	e1 f7       	brne	.-8      	; 0x142a <exp+0x42>
    1432:	41 95       	neg	r20
    1434:	55 0b       	sbc	r21, r21
    1436:	32 d0       	rcall	.+100    	; 0x149c <ldexp>
    1438:	0f 90       	pop	r0
    143a:	07 fe       	sbrs	r0, 7
    143c:	26 c0       	rjmp	.+76     	; 0x148a <inverse>
    143e:	08 95       	ret

00001440 <__fp_powser>:
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	1f 93       	push	r17
    1446:	0f 93       	push	r16
    1448:	ff 92       	push	r15
    144a:	ef 92       	push	r14
    144c:	df 92       	push	r13
    144e:	7b 01       	movw	r14, r22
    1450:	8c 01       	movw	r16, r24
    1452:	68 94       	set
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <__fp_powser+0x20>
    1456:	da 2e       	mov	r13, r26
    1458:	ef 01       	movw	r28, r30
    145a:	fe de       	rcall	.-516    	; 0x1258 <__mulsf3x>
    145c:	fe 01       	movw	r30, r28
    145e:	e8 94       	clt
    1460:	a5 91       	lpm	r26, Z+
    1462:	25 91       	lpm	r18, Z+
    1464:	35 91       	lpm	r19, Z+
    1466:	45 91       	lpm	r20, Z+
    1468:	55 91       	lpm	r21, Z+
    146a:	ae f3       	brts	.-22     	; 0x1456 <__fp_powser+0x16>
    146c:	ef 01       	movw	r28, r30
    146e:	05 dd       	rcall	.-1526   	; 0xe7a <__addsf3x>
    1470:	fe 01       	movw	r30, r28
    1472:	97 01       	movw	r18, r14
    1474:	a8 01       	movw	r20, r16
    1476:	da 94       	dec	r13
    1478:	79 f7       	brne	.-34     	; 0x1458 <__fp_powser+0x18>
    147a:	df 90       	pop	r13
    147c:	ef 90       	pop	r14
    147e:	ff 90       	pop	r15
    1480:	0f 91       	pop	r16
    1482:	1f 91       	pop	r17
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <inverse>:
    148a:	9b 01       	movw	r18, r22
    148c:	ac 01       	movw	r20, r24
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	80 e8       	ldi	r24, 0x80	; 128
    1494:	9f e3       	ldi	r25, 0x3F	; 63
    1496:	36 c0       	rjmp	.+108    	; 0x1504 <__divsf3>
    1498:	c4 cd       	rjmp	.-1144   	; 0x1022 <__fp_inf>
    149a:	e4 cd       	rjmp	.-1080   	; 0x1064 <__fp_mpack>

0000149c <ldexp>:
    149c:	1b de       	rcall	.-970    	; 0x10d4 <__fp_splitA>
    149e:	e8 f3       	brcs	.-6      	; 0x149a <inverse+0x10>
    14a0:	99 23       	and	r25, r25
    14a2:	d9 f3       	breq	.-10     	; 0x149a <inverse+0x10>
    14a4:	94 0f       	add	r25, r20
    14a6:	51 1d       	adc	r21, r1
    14a8:	bb f3       	brvs	.-18     	; 0x1498 <inverse+0xe>
    14aa:	91 50       	subi	r25, 0x01	; 1
    14ac:	50 40       	sbci	r21, 0x00	; 0
    14ae:	94 f0       	brlt	.+36     	; 0x14d4 <ldexp+0x38>
    14b0:	59 f0       	breq	.+22     	; 0x14c8 <ldexp+0x2c>
    14b2:	88 23       	and	r24, r24
    14b4:	32 f0       	brmi	.+12     	; 0x14c2 <ldexp+0x26>
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	91 50       	subi	r25, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	c1 f7       	brne	.-16     	; 0x14b2 <ldexp+0x16>
    14c2:	9e 3f       	cpi	r25, 0xFE	; 254
    14c4:	51 05       	cpc	r21, r1
    14c6:	44 f7       	brge	.-48     	; 0x1498 <inverse+0xe>
    14c8:	88 0f       	add	r24, r24
    14ca:	91 1d       	adc	r25, r1
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	97 f9       	bld	r25, 7
    14d2:	08 95       	ret
    14d4:	5f 3f       	cpi	r21, 0xFF	; 255
    14d6:	ac f0       	brlt	.+42     	; 0x1502 <ldexp+0x66>
    14d8:	98 3e       	cpi	r25, 0xE8	; 232
    14da:	9c f0       	brlt	.+38     	; 0x1502 <ldexp+0x66>
    14dc:	bb 27       	eor	r27, r27
    14de:	86 95       	lsr	r24
    14e0:	77 95       	ror	r23
    14e2:	67 95       	ror	r22
    14e4:	b7 95       	ror	r27
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <ldexp+0x4e>
    14e8:	b1 60       	ori	r27, 0x01	; 1
    14ea:	93 95       	inc	r25
    14ec:	c1 f7       	brne	.-16     	; 0x14de <ldexp+0x42>
    14ee:	bb 0f       	add	r27, r27
    14f0:	58 f7       	brcc	.-42     	; 0x14c8 <ldexp+0x2c>
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <ldexp+0x5c>
    14f4:	60 ff       	sbrs	r22, 0
    14f6:	e8 cf       	rjmp	.-48     	; 0x14c8 <ldexp+0x2c>
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	e3 cf       	rjmp	.-58     	; 0x14c8 <ldexp+0x2c>
    1502:	1a ce       	rjmp	.-972    	; 0x1138 <__fp_szero>

00001504 <__divsf3>:
    1504:	0c d0       	rcall	.+24     	; 0x151e <__divsf3x>
    1506:	cd cd       	rjmp	.-1126   	; 0x10a2 <__fp_round>
    1508:	c5 dd       	rcall	.-1142   	; 0x1094 <__fp_pscB>
    150a:	40 f0       	brcs	.+16     	; 0x151c <__divsf3+0x18>
    150c:	bc dd       	rcall	.-1160   	; 0x1086 <__fp_pscA>
    150e:	30 f0       	brcs	.+12     	; 0x151c <__divsf3+0x18>
    1510:	21 f4       	brne	.+8      	; 0x151a <__divsf3+0x16>
    1512:	5f 3f       	cpi	r21, 0xFF	; 255
    1514:	19 f0       	breq	.+6      	; 0x151c <__divsf3+0x18>
    1516:	85 cd       	rjmp	.-1270   	; 0x1022 <__fp_inf>
    1518:	51 11       	cpse	r21, r1
    151a:	0e ce       	rjmp	.-996    	; 0x1138 <__fp_szero>
    151c:	b1 cd       	rjmp	.-1182   	; 0x1080 <__fp_nan>

0000151e <__divsf3x>:
    151e:	d2 dd       	rcall	.-1116   	; 0x10c4 <__fp_split3>
    1520:	98 f3       	brcs	.-26     	; 0x1508 <__divsf3+0x4>

00001522 <__divsf3_pse>:
    1522:	99 23       	and	r25, r25
    1524:	c9 f3       	breq	.-14     	; 0x1518 <__divsf3+0x14>
    1526:	55 23       	and	r21, r21
    1528:	b1 f3       	breq	.-20     	; 0x1516 <__divsf3+0x12>
    152a:	95 1b       	sub	r25, r21
    152c:	55 0b       	sbc	r21, r21
    152e:	bb 27       	eor	r27, r27
    1530:	aa 27       	eor	r26, r26
    1532:	62 17       	cp	r22, r18
    1534:	73 07       	cpc	r23, r19
    1536:	84 07       	cpc	r24, r20
    1538:	38 f0       	brcs	.+14     	; 0x1548 <__divsf3_pse+0x26>
    153a:	9f 5f       	subi	r25, 0xFF	; 255
    153c:	5f 4f       	sbci	r21, 0xFF	; 255
    153e:	22 0f       	add	r18, r18
    1540:	33 1f       	adc	r19, r19
    1542:	44 1f       	adc	r20, r20
    1544:	aa 1f       	adc	r26, r26
    1546:	a9 f3       	breq	.-22     	; 0x1532 <__divsf3_pse+0x10>
    1548:	33 d0       	rcall	.+102    	; 0x15b0 <__divsf3_pse+0x8e>
    154a:	0e 2e       	mov	r0, r30
    154c:	3a f0       	brmi	.+14     	; 0x155c <__divsf3_pse+0x3a>
    154e:	e0 e8       	ldi	r30, 0x80	; 128
    1550:	30 d0       	rcall	.+96     	; 0x15b2 <__divsf3_pse+0x90>
    1552:	91 50       	subi	r25, 0x01	; 1
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	e6 95       	lsr	r30
    1558:	00 1c       	adc	r0, r0
    155a:	ca f7       	brpl	.-14     	; 0x154e <__divsf3_pse+0x2c>
    155c:	29 d0       	rcall	.+82     	; 0x15b0 <__divsf3_pse+0x8e>
    155e:	fe 2f       	mov	r31, r30
    1560:	27 d0       	rcall	.+78     	; 0x15b0 <__divsf3_pse+0x8e>
    1562:	66 0f       	add	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	88 1f       	adc	r24, r24
    1568:	bb 1f       	adc	r27, r27
    156a:	26 17       	cp	r18, r22
    156c:	37 07       	cpc	r19, r23
    156e:	48 07       	cpc	r20, r24
    1570:	ab 07       	cpc	r26, r27
    1572:	b0 e8       	ldi	r27, 0x80	; 128
    1574:	09 f0       	breq	.+2      	; 0x1578 <__divsf3_pse+0x56>
    1576:	bb 0b       	sbc	r27, r27
    1578:	80 2d       	mov	r24, r0
    157a:	bf 01       	movw	r22, r30
    157c:	ff 27       	eor	r31, r31
    157e:	93 58       	subi	r25, 0x83	; 131
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	2a f0       	brmi	.+10     	; 0x158e <__divsf3_pse+0x6c>
    1584:	9e 3f       	cpi	r25, 0xFE	; 254
    1586:	51 05       	cpc	r21, r1
    1588:	68 f0       	brcs	.+26     	; 0x15a4 <__divsf3_pse+0x82>
    158a:	4b cd       	rjmp	.-1386   	; 0x1022 <__fp_inf>
    158c:	d5 cd       	rjmp	.-1110   	; 0x1138 <__fp_szero>
    158e:	5f 3f       	cpi	r21, 0xFF	; 255
    1590:	ec f3       	brlt	.-6      	; 0x158c <__divsf3_pse+0x6a>
    1592:	98 3e       	cpi	r25, 0xE8	; 232
    1594:	dc f3       	brlt	.-10     	; 0x158c <__divsf3_pse+0x6a>
    1596:	86 95       	lsr	r24
    1598:	77 95       	ror	r23
    159a:	67 95       	ror	r22
    159c:	b7 95       	ror	r27
    159e:	f7 95       	ror	r31
    15a0:	9f 5f       	subi	r25, 0xFF	; 255
    15a2:	c9 f7       	brne	.-14     	; 0x1596 <__divsf3_pse+0x74>
    15a4:	88 0f       	add	r24, r24
    15a6:	91 1d       	adc	r25, r1
    15a8:	96 95       	lsr	r25
    15aa:	87 95       	ror	r24
    15ac:	97 f9       	bld	r25, 7
    15ae:	08 95       	ret
    15b0:	e1 e0       	ldi	r30, 0x01	; 1
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	bb 1f       	adc	r27, r27
    15ba:	62 17       	cp	r22, r18
    15bc:	73 07       	cpc	r23, r19
    15be:	84 07       	cpc	r24, r20
    15c0:	ba 07       	cpc	r27, r26
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <__divsf3_pse+0xaa>
    15c4:	62 1b       	sub	r22, r18
    15c6:	73 0b       	sbc	r23, r19
    15c8:	84 0b       	sbc	r24, r20
    15ca:	ba 0b       	sbc	r27, r26
    15cc:	ee 1f       	adc	r30, r30
    15ce:	88 f7       	brcc	.-30     	; 0x15b2 <__divsf3_pse+0x90>
    15d0:	e0 95       	com	r30
    15d2:	08 95       	ret

000015d4 <malloc>:
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	91 05       	cpc	r25, r1
    15dc:	10 f4       	brcc	.+4      	; 0x15e2 <malloc+0xe>
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	e0 91 93 03 	lds	r30, 0x0393
    15e6:	f0 91 94 03 	lds	r31, 0x0394
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	39 f1       	breq	.+78     	; 0x1644 <malloc+0x70>
    15f6:	40 81       	ld	r20, Z
    15f8:	51 81       	ldd	r21, Z+1	; 0x01
    15fa:	48 17       	cp	r20, r24
    15fc:	59 07       	cpc	r21, r25
    15fe:	b8 f0       	brcs	.+46     	; 0x162e <malloc+0x5a>
    1600:	48 17       	cp	r20, r24
    1602:	59 07       	cpc	r21, r25
    1604:	71 f4       	brne	.+28     	; 0x1622 <malloc+0x4e>
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	10 97       	sbiw	r26, 0x00	; 0
    160c:	29 f0       	breq	.+10     	; 0x1618 <malloc+0x44>
    160e:	13 96       	adiw	r26, 0x03	; 3
    1610:	9c 93       	st	X, r25
    1612:	8e 93       	st	-X, r24
    1614:	12 97       	sbiw	r26, 0x02	; 2
    1616:	2c c0       	rjmp	.+88     	; 0x1670 <malloc+0x9c>
    1618:	90 93 94 03 	sts	0x0394, r25
    161c:	80 93 93 03 	sts	0x0393, r24
    1620:	27 c0       	rjmp	.+78     	; 0x1670 <malloc+0x9c>
    1622:	21 15       	cp	r18, r1
    1624:	31 05       	cpc	r19, r1
    1626:	31 f0       	breq	.+12     	; 0x1634 <malloc+0x60>
    1628:	42 17       	cp	r20, r18
    162a:	53 07       	cpc	r21, r19
    162c:	18 f0       	brcs	.+6      	; 0x1634 <malloc+0x60>
    162e:	a9 01       	movw	r20, r18
    1630:	db 01       	movw	r26, r22
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <malloc+0x62>
    1634:	ef 01       	movw	r28, r30
    1636:	9a 01       	movw	r18, r20
    1638:	bd 01       	movw	r22, r26
    163a:	df 01       	movw	r26, r30
    163c:	02 80       	ldd	r0, Z+2	; 0x02
    163e:	f3 81       	ldd	r31, Z+3	; 0x03
    1640:	e0 2d       	mov	r30, r0
    1642:	d7 cf       	rjmp	.-82     	; 0x15f2 <malloc+0x1e>
    1644:	21 15       	cp	r18, r1
    1646:	31 05       	cpc	r19, r1
    1648:	f9 f0       	breq	.+62     	; 0x1688 <malloc+0xb4>
    164a:	28 1b       	sub	r18, r24
    164c:	39 0b       	sbc	r19, r25
    164e:	24 30       	cpi	r18, 0x04	; 4
    1650:	31 05       	cpc	r19, r1
    1652:	80 f4       	brcc	.+32     	; 0x1674 <malloc+0xa0>
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	61 15       	cp	r22, r1
    165a:	71 05       	cpc	r23, r1
    165c:	21 f0       	breq	.+8      	; 0x1666 <malloc+0x92>
    165e:	fb 01       	movw	r30, r22
    1660:	93 83       	std	Z+3, r25	; 0x03
    1662:	82 83       	std	Z+2, r24	; 0x02
    1664:	04 c0       	rjmp	.+8      	; 0x166e <malloc+0x9a>
    1666:	90 93 94 03 	sts	0x0394, r25
    166a:	80 93 93 03 	sts	0x0393, r24
    166e:	fe 01       	movw	r30, r28
    1670:	32 96       	adiw	r30, 0x02	; 2
    1672:	44 c0       	rjmp	.+136    	; 0x16fc <malloc+0x128>
    1674:	fe 01       	movw	r30, r28
    1676:	e2 0f       	add	r30, r18
    1678:	f3 1f       	adc	r31, r19
    167a:	81 93       	st	Z+, r24
    167c:	91 93       	st	Z+, r25
    167e:	22 50       	subi	r18, 0x02	; 2
    1680:	31 09       	sbc	r19, r1
    1682:	39 83       	std	Y+1, r19	; 0x01
    1684:	28 83       	st	Y, r18
    1686:	3a c0       	rjmp	.+116    	; 0x16fc <malloc+0x128>
    1688:	20 91 91 03 	lds	r18, 0x0391
    168c:	30 91 92 03 	lds	r19, 0x0392
    1690:	23 2b       	or	r18, r19
    1692:	41 f4       	brne	.+16     	; 0x16a4 <malloc+0xd0>
    1694:	20 91 06 01 	lds	r18, 0x0106
    1698:	30 91 07 01 	lds	r19, 0x0107
    169c:	30 93 92 03 	sts	0x0392, r19
    16a0:	20 93 91 03 	sts	0x0391, r18
    16a4:	20 91 04 01 	lds	r18, 0x0104
    16a8:	30 91 05 01 	lds	r19, 0x0105
    16ac:	21 15       	cp	r18, r1
    16ae:	31 05       	cpc	r19, r1
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <malloc+0xee>
    16b2:	2d b7       	in	r18, 0x3d	; 61
    16b4:	3e b7       	in	r19, 0x3e	; 62
    16b6:	40 91 08 01 	lds	r20, 0x0108
    16ba:	50 91 09 01 	lds	r21, 0x0109
    16be:	24 1b       	sub	r18, r20
    16c0:	35 0b       	sbc	r19, r21
    16c2:	e0 91 91 03 	lds	r30, 0x0391
    16c6:	f0 91 92 03 	lds	r31, 0x0392
    16ca:	e2 17       	cp	r30, r18
    16cc:	f3 07       	cpc	r31, r19
    16ce:	a0 f4       	brcc	.+40     	; 0x16f8 <malloc+0x124>
    16d0:	2e 1b       	sub	r18, r30
    16d2:	3f 0b       	sbc	r19, r31
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	78 f0       	brcs	.+30     	; 0x16f8 <malloc+0x124>
    16da:	ac 01       	movw	r20, r24
    16dc:	4e 5f       	subi	r20, 0xFE	; 254
    16de:	5f 4f       	sbci	r21, 0xFF	; 255
    16e0:	24 17       	cp	r18, r20
    16e2:	35 07       	cpc	r19, r21
    16e4:	48 f0       	brcs	.+18     	; 0x16f8 <malloc+0x124>
    16e6:	4e 0f       	add	r20, r30
    16e8:	5f 1f       	adc	r21, r31
    16ea:	50 93 92 03 	sts	0x0392, r21
    16ee:	40 93 91 03 	sts	0x0391, r20
    16f2:	81 93       	st	Z+, r24
    16f4:	91 93       	st	Z+, r25
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <malloc+0x128>
    16f8:	e0 e0       	ldi	r30, 0x00	; 0
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	cf 01       	movw	r24, r30
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <free>:
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	09 f4       	brne	.+2      	; 0x170e <free+0xa>
    170c:	87 c0       	rjmp	.+270    	; 0x181c <free+0x118>
    170e:	fc 01       	movw	r30, r24
    1710:	32 97       	sbiw	r30, 0x02	; 2
    1712:	13 82       	std	Z+3, r1	; 0x03
    1714:	12 82       	std	Z+2, r1	; 0x02
    1716:	c0 91 93 03 	lds	r28, 0x0393
    171a:	d0 91 94 03 	lds	r29, 0x0394
    171e:	20 97       	sbiw	r28, 0x00	; 0
    1720:	81 f4       	brne	.+32     	; 0x1742 <free+0x3e>
    1722:	20 81       	ld	r18, Z
    1724:	31 81       	ldd	r19, Z+1	; 0x01
    1726:	28 0f       	add	r18, r24
    1728:	39 1f       	adc	r19, r25
    172a:	80 91 91 03 	lds	r24, 0x0391
    172e:	90 91 92 03 	lds	r25, 0x0392
    1732:	82 17       	cp	r24, r18
    1734:	93 07       	cpc	r25, r19
    1736:	79 f5       	brne	.+94     	; 0x1796 <free+0x92>
    1738:	f0 93 92 03 	sts	0x0392, r31
    173c:	e0 93 91 03 	sts	0x0391, r30
    1740:	6d c0       	rjmp	.+218    	; 0x181c <free+0x118>
    1742:	de 01       	movw	r26, r28
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	ae 17       	cp	r26, r30
    174a:	bf 07       	cpc	r27, r31
    174c:	50 f4       	brcc	.+20     	; 0x1762 <free+0x5e>
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	4d 91       	ld	r20, X+
    1752:	5c 91       	ld	r21, X
    1754:	13 97       	sbiw	r26, 0x03	; 3
    1756:	9d 01       	movw	r18, r26
    1758:	41 15       	cp	r20, r1
    175a:	51 05       	cpc	r21, r1
    175c:	09 f1       	breq	.+66     	; 0x17a0 <free+0x9c>
    175e:	da 01       	movw	r26, r20
    1760:	f3 cf       	rjmp	.-26     	; 0x1748 <free+0x44>
    1762:	b3 83       	std	Z+3, r27	; 0x03
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	40 81       	ld	r20, Z
    1768:	51 81       	ldd	r21, Z+1	; 0x01
    176a:	84 0f       	add	r24, r20
    176c:	95 1f       	adc	r25, r21
    176e:	8a 17       	cp	r24, r26
    1770:	9b 07       	cpc	r25, r27
    1772:	71 f4       	brne	.+28     	; 0x1790 <free+0x8c>
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	84 0f       	add	r24, r20
    177c:	95 1f       	adc	r25, r21
    177e:	02 96       	adiw	r24, 0x02	; 2
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
    1784:	12 96       	adiw	r26, 0x02	; 2
    1786:	8d 91       	ld	r24, X+
    1788:	9c 91       	ld	r25, X
    178a:	13 97       	sbiw	r26, 0x03	; 3
    178c:	93 83       	std	Z+3, r25	; 0x03
    178e:	82 83       	std	Z+2, r24	; 0x02
    1790:	21 15       	cp	r18, r1
    1792:	31 05       	cpc	r19, r1
    1794:	29 f4       	brne	.+10     	; 0x17a0 <free+0x9c>
    1796:	f0 93 94 03 	sts	0x0394, r31
    179a:	e0 93 93 03 	sts	0x0393, r30
    179e:	3e c0       	rjmp	.+124    	; 0x181c <free+0x118>
    17a0:	d9 01       	movw	r26, r18
    17a2:	13 96       	adiw	r26, 0x03	; 3
    17a4:	fc 93       	st	X, r31
    17a6:	ee 93       	st	-X, r30
    17a8:	12 97       	sbiw	r26, 0x02	; 2
    17aa:	4d 91       	ld	r20, X+
    17ac:	5d 91       	ld	r21, X+
    17ae:	a4 0f       	add	r26, r20
    17b0:	b5 1f       	adc	r27, r21
    17b2:	ea 17       	cp	r30, r26
    17b4:	fb 07       	cpc	r31, r27
    17b6:	79 f4       	brne	.+30     	; 0x17d6 <free+0xd2>
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	84 0f       	add	r24, r20
    17be:	95 1f       	adc	r25, r21
    17c0:	02 96       	adiw	r24, 0x02	; 2
    17c2:	d9 01       	movw	r26, r18
    17c4:	11 96       	adiw	r26, 0x01	; 1
    17c6:	9c 93       	st	X, r25
    17c8:	8e 93       	st	-X, r24
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	13 96       	adiw	r26, 0x03	; 3
    17d0:	9c 93       	st	X, r25
    17d2:	8e 93       	st	-X, r24
    17d4:	12 97       	sbiw	r26, 0x02	; 2
    17d6:	e0 e0       	ldi	r30, 0x00	; 0
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	9b 81       	ldd	r25, Y+3	; 0x03
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <free+0xe4>
    17e2:	fe 01       	movw	r30, r28
    17e4:	ec 01       	movw	r28, r24
    17e6:	f9 cf       	rjmp	.-14     	; 0x17da <free+0xd6>
    17e8:	ce 01       	movw	r24, r28
    17ea:	02 96       	adiw	r24, 0x02	; 2
    17ec:	28 81       	ld	r18, Y
    17ee:	39 81       	ldd	r19, Y+1	; 0x01
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	20 91 91 03 	lds	r18, 0x0391
    17f8:	30 91 92 03 	lds	r19, 0x0392
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	69 f4       	brne	.+26     	; 0x181c <free+0x118>
    1802:	30 97       	sbiw	r30, 0x00	; 0
    1804:	29 f4       	brne	.+10     	; 0x1810 <free+0x10c>
    1806:	10 92 94 03 	sts	0x0394, r1
    180a:	10 92 93 03 	sts	0x0393, r1
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <free+0x110>
    1810:	13 82       	std	Z+3, r1	; 0x03
    1812:	12 82       	std	Z+2, r1	; 0x02
    1814:	d0 93 92 03 	sts	0x0392, r29
    1818:	c0 93 91 03 	sts	0x0391, r28
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <atoi>:
    1822:	fc 01       	movw	r30, r24
    1824:	88 27       	eor	r24, r24
    1826:	99 27       	eor	r25, r25
    1828:	e8 94       	clt
    182a:	21 91       	ld	r18, Z+
    182c:	20 32       	cpi	r18, 0x20	; 32
    182e:	e9 f3       	breq	.-6      	; 0x182a <atoi+0x8>
    1830:	29 30       	cpi	r18, 0x09	; 9
    1832:	10 f0       	brcs	.+4      	; 0x1838 <atoi+0x16>
    1834:	2e 30       	cpi	r18, 0x0E	; 14
    1836:	c8 f3       	brcs	.-14     	; 0x182a <atoi+0x8>
    1838:	2b 32       	cpi	r18, 0x2B	; 43
    183a:	41 f0       	breq	.+16     	; 0x184c <atoi+0x2a>
    183c:	2d 32       	cpi	r18, 0x2D	; 45
    183e:	39 f4       	brne	.+14     	; 0x184e <atoi+0x2c>
    1840:	68 94       	set
    1842:	04 c0       	rjmp	.+8      	; 0x184c <atoi+0x2a>
    1844:	0e 94 2f 0c 	call	0x185e	; 0x185e <__mulhi_const_10>
    1848:	82 0f       	add	r24, r18
    184a:	91 1d       	adc	r25, r1
    184c:	21 91       	ld	r18, Z+
    184e:	20 53       	subi	r18, 0x30	; 48
    1850:	2a 30       	cpi	r18, 0x0A	; 10
    1852:	c0 f3       	brcs	.-16     	; 0x1844 <atoi+0x22>
    1854:	1e f4       	brtc	.+6      	; 0x185c <atoi+0x3a>
    1856:	90 95       	com	r25
    1858:	81 95       	neg	r24
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	08 95       	ret

0000185e <__mulhi_const_10>:
    185e:	7a e0       	ldi	r23, 0x0A	; 10
    1860:	97 9f       	mul	r25, r23
    1862:	90 2d       	mov	r25, r0
    1864:	87 9f       	mul	r24, r23
    1866:	80 2d       	mov	r24, r0
    1868:	91 0d       	add	r25, r1
    186a:	11 24       	eor	r1, r1
    186c:	08 95       	ret

0000186e <sprintf>:
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	2e 97       	sbiw	r28, 0x0e	; 14
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	0d 89       	ldd	r16, Y+21	; 0x15
    1888:	1e 89       	ldd	r17, Y+22	; 0x16
    188a:	86 e0       	ldi	r24, 0x06	; 6
    188c:	8c 83       	std	Y+4, r24	; 0x04
    188e:	1a 83       	std	Y+2, r17	; 0x02
    1890:	09 83       	std	Y+1, r16	; 0x01
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	9f e7       	ldi	r25, 0x7F	; 127
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	ae 01       	movw	r20, r28
    189c:	47 5e       	subi	r20, 0xE7	; 231
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	6f 89       	ldd	r22, Y+23	; 0x17
    18a2:	78 8d       	ldd	r23, Y+24	; 0x18
    18a4:	ce 01       	movw	r24, r28
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	0e 94 66 0c 	call	0x18cc	; 0x18cc <vfprintf>
    18ac:	ef 81       	ldd	r30, Y+7	; 0x07
    18ae:	f8 85       	ldd	r31, Y+8	; 0x08
    18b0:	e0 0f       	add	r30, r16
    18b2:	f1 1f       	adc	r31, r17
    18b4:	10 82       	st	Z, r1
    18b6:	2e 96       	adiw	r28, 0x0e	; 14
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	08 95       	ret

000018cc <vfprintf>:
    18cc:	2f 92       	push	r2
    18ce:	3f 92       	push	r3
    18d0:	4f 92       	push	r4
    18d2:	5f 92       	push	r5
    18d4:	6f 92       	push	r6
    18d6:	7f 92       	push	r7
    18d8:	8f 92       	push	r8
    18da:	9f 92       	push	r9
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	2c 97       	sbiw	r28, 0x0c	; 12
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	7c 01       	movw	r14, r24
    1902:	6b 01       	movw	r12, r22
    1904:	8a 01       	movw	r16, r20
    1906:	fc 01       	movw	r30, r24
    1908:	17 82       	std	Z+7, r1	; 0x07
    190a:	16 82       	std	Z+6, r1	; 0x06
    190c:	83 81       	ldd	r24, Z+3	; 0x03
    190e:	81 ff       	sbrs	r24, 1
    1910:	bd c1       	rjmp	.+890    	; 0x1c8c <vfprintf+0x3c0>
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	4c 01       	movw	r8, r24
    1918:	f7 01       	movw	r30, r14
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	f6 01       	movw	r30, r12
    191e:	93 fd       	sbrc	r25, 3
    1920:	85 91       	lpm	r24, Z+
    1922:	93 ff       	sbrs	r25, 3
    1924:	81 91       	ld	r24, Z+
    1926:	6f 01       	movw	r12, r30
    1928:	88 23       	and	r24, r24
    192a:	09 f4       	brne	.+2      	; 0x192e <vfprintf+0x62>
    192c:	ab c1       	rjmp	.+854    	; 0x1c84 <vfprintf+0x3b8>
    192e:	85 32       	cpi	r24, 0x25	; 37
    1930:	39 f4       	brne	.+14     	; 0x1940 <vfprintf+0x74>
    1932:	93 fd       	sbrc	r25, 3
    1934:	85 91       	lpm	r24, Z+
    1936:	93 ff       	sbrs	r25, 3
    1938:	81 91       	ld	r24, Z+
    193a:	6f 01       	movw	r12, r30
    193c:	85 32       	cpi	r24, 0x25	; 37
    193e:	29 f4       	brne	.+10     	; 0x194a <vfprintf+0x7e>
    1940:	b7 01       	movw	r22, r14
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1948:	e7 cf       	rjmp	.-50     	; 0x1918 <vfprintf+0x4c>
    194a:	51 2c       	mov	r5, r1
    194c:	31 2c       	mov	r3, r1
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	20 32       	cpi	r18, 0x20	; 32
    1952:	a0 f4       	brcc	.+40     	; 0x197c <vfprintf+0xb0>
    1954:	8b 32       	cpi	r24, 0x2B	; 43
    1956:	69 f0       	breq	.+26     	; 0x1972 <vfprintf+0xa6>
    1958:	30 f4       	brcc	.+12     	; 0x1966 <vfprintf+0x9a>
    195a:	80 32       	cpi	r24, 0x20	; 32
    195c:	59 f0       	breq	.+22     	; 0x1974 <vfprintf+0xa8>
    195e:	83 32       	cpi	r24, 0x23	; 35
    1960:	69 f4       	brne	.+26     	; 0x197c <vfprintf+0xb0>
    1962:	20 61       	ori	r18, 0x10	; 16
    1964:	2c c0       	rjmp	.+88     	; 0x19be <vfprintf+0xf2>
    1966:	8d 32       	cpi	r24, 0x2D	; 45
    1968:	39 f0       	breq	.+14     	; 0x1978 <vfprintf+0xac>
    196a:	80 33       	cpi	r24, 0x30	; 48
    196c:	39 f4       	brne	.+14     	; 0x197c <vfprintf+0xb0>
    196e:	21 60       	ori	r18, 0x01	; 1
    1970:	26 c0       	rjmp	.+76     	; 0x19be <vfprintf+0xf2>
    1972:	22 60       	ori	r18, 0x02	; 2
    1974:	24 60       	ori	r18, 0x04	; 4
    1976:	23 c0       	rjmp	.+70     	; 0x19be <vfprintf+0xf2>
    1978:	28 60       	ori	r18, 0x08	; 8
    197a:	21 c0       	rjmp	.+66     	; 0x19be <vfprintf+0xf2>
    197c:	27 fd       	sbrc	r18, 7
    197e:	27 c0       	rjmp	.+78     	; 0x19ce <vfprintf+0x102>
    1980:	30 ed       	ldi	r19, 0xD0	; 208
    1982:	38 0f       	add	r19, r24
    1984:	3a 30       	cpi	r19, 0x0A	; 10
    1986:	78 f4       	brcc	.+30     	; 0x19a6 <vfprintf+0xda>
    1988:	26 ff       	sbrs	r18, 6
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <vfprintf+0xcc>
    198c:	fa e0       	ldi	r31, 0x0A	; 10
    198e:	5f 9e       	mul	r5, r31
    1990:	30 0d       	add	r19, r0
    1992:	11 24       	eor	r1, r1
    1994:	53 2e       	mov	r5, r19
    1996:	13 c0       	rjmp	.+38     	; 0x19be <vfprintf+0xf2>
    1998:	8a e0       	ldi	r24, 0x0A	; 10
    199a:	38 9e       	mul	r3, r24
    199c:	30 0d       	add	r19, r0
    199e:	11 24       	eor	r1, r1
    19a0:	33 2e       	mov	r3, r19
    19a2:	20 62       	ori	r18, 0x20	; 32
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <vfprintf+0xf2>
    19a6:	8e 32       	cpi	r24, 0x2E	; 46
    19a8:	21 f4       	brne	.+8      	; 0x19b2 <vfprintf+0xe6>
    19aa:	26 fd       	sbrc	r18, 6
    19ac:	6b c1       	rjmp	.+726    	; 0x1c84 <vfprintf+0x3b8>
    19ae:	20 64       	ori	r18, 0x40	; 64
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <vfprintf+0xf2>
    19b2:	8c 36       	cpi	r24, 0x6C	; 108
    19b4:	11 f4       	brne	.+4      	; 0x19ba <vfprintf+0xee>
    19b6:	20 68       	ori	r18, 0x80	; 128
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vfprintf+0xf2>
    19ba:	88 36       	cpi	r24, 0x68	; 104
    19bc:	41 f4       	brne	.+16     	; 0x19ce <vfprintf+0x102>
    19be:	f6 01       	movw	r30, r12
    19c0:	93 fd       	sbrc	r25, 3
    19c2:	85 91       	lpm	r24, Z+
    19c4:	93 ff       	sbrs	r25, 3
    19c6:	81 91       	ld	r24, Z+
    19c8:	6f 01       	movw	r12, r30
    19ca:	81 11       	cpse	r24, r1
    19cc:	c1 cf       	rjmp	.-126    	; 0x1950 <vfprintf+0x84>
    19ce:	98 2f       	mov	r25, r24
    19d0:	9f 7d       	andi	r25, 0xDF	; 223
    19d2:	95 54       	subi	r25, 0x45	; 69
    19d4:	93 30       	cpi	r25, 0x03	; 3
    19d6:	28 f4       	brcc	.+10     	; 0x19e2 <vfprintf+0x116>
    19d8:	0c 5f       	subi	r16, 0xFC	; 252
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	ff e3       	ldi	r31, 0x3F	; 63
    19de:	f9 83       	std	Y+1, r31	; 0x01
    19e0:	0d c0       	rjmp	.+26     	; 0x19fc <vfprintf+0x130>
    19e2:	83 36       	cpi	r24, 0x63	; 99
    19e4:	31 f0       	breq	.+12     	; 0x19f2 <vfprintf+0x126>
    19e6:	83 37       	cpi	r24, 0x73	; 115
    19e8:	71 f0       	breq	.+28     	; 0x1a06 <vfprintf+0x13a>
    19ea:	83 35       	cpi	r24, 0x53	; 83
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <vfprintf+0x124>
    19ee:	5b c0       	rjmp	.+182    	; 0x1aa6 <vfprintf+0x1da>
    19f0:	22 c0       	rjmp	.+68     	; 0x1a36 <vfprintf+0x16a>
    19f2:	f8 01       	movw	r30, r16
    19f4:	80 81       	ld	r24, Z
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	0e 5f       	subi	r16, 0xFE	; 254
    19fa:	1f 4f       	sbci	r17, 0xFF	; 255
    19fc:	44 24       	eor	r4, r4
    19fe:	43 94       	inc	r4
    1a00:	51 2c       	mov	r5, r1
    1a02:	54 01       	movw	r10, r8
    1a04:	15 c0       	rjmp	.+42     	; 0x1a30 <vfprintf+0x164>
    1a06:	38 01       	movw	r6, r16
    1a08:	f2 e0       	ldi	r31, 0x02	; 2
    1a0a:	6f 0e       	add	r6, r31
    1a0c:	71 1c       	adc	r7, r1
    1a0e:	f8 01       	movw	r30, r16
    1a10:	a0 80       	ld	r10, Z
    1a12:	b1 80       	ldd	r11, Z+1	; 0x01
    1a14:	26 ff       	sbrs	r18, 6
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <vfprintf+0x152>
    1a18:	65 2d       	mov	r22, r5
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <vfprintf+0x156>
    1a1e:	6f ef       	ldi	r22, 0xFF	; 255
    1a20:	7f ef       	ldi	r23, 0xFF	; 255
    1a22:	c5 01       	movw	r24, r10
    1a24:	2c 87       	std	Y+12, r18	; 0x0c
    1a26:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <strnlen>
    1a2a:	2c 01       	movw	r4, r24
    1a2c:	83 01       	movw	r16, r6
    1a2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a30:	2f 77       	andi	r18, 0x7F	; 127
    1a32:	22 2e       	mov	r2, r18
    1a34:	17 c0       	rjmp	.+46     	; 0x1a64 <vfprintf+0x198>
    1a36:	38 01       	movw	r6, r16
    1a38:	f2 e0       	ldi	r31, 0x02	; 2
    1a3a:	6f 0e       	add	r6, r31
    1a3c:	71 1c       	adc	r7, r1
    1a3e:	f8 01       	movw	r30, r16
    1a40:	a0 80       	ld	r10, Z
    1a42:	b1 80       	ldd	r11, Z+1	; 0x01
    1a44:	26 ff       	sbrs	r18, 6
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <vfprintf+0x182>
    1a48:	65 2d       	mov	r22, r5
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <vfprintf+0x186>
    1a4e:	6f ef       	ldi	r22, 0xFF	; 255
    1a50:	7f ef       	ldi	r23, 0xFF	; 255
    1a52:	c5 01       	movw	r24, r10
    1a54:	2c 87       	std	Y+12, r18	; 0x0c
    1a56:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <strnlen_P>
    1a5a:	2c 01       	movw	r4, r24
    1a5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a5e:	20 68       	ori	r18, 0x80	; 128
    1a60:	22 2e       	mov	r2, r18
    1a62:	83 01       	movw	r16, r6
    1a64:	23 fc       	sbrc	r2, 3
    1a66:	1b c0       	rjmp	.+54     	; 0x1a9e <vfprintf+0x1d2>
    1a68:	83 2d       	mov	r24, r3
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	48 16       	cp	r4, r24
    1a6e:	59 06       	cpc	r5, r25
    1a70:	b0 f4       	brcc	.+44     	; 0x1a9e <vfprintf+0x1d2>
    1a72:	b7 01       	movw	r22, r14
    1a74:	80 e2       	ldi	r24, 0x20	; 32
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1a7c:	3a 94       	dec	r3
    1a7e:	f4 cf       	rjmp	.-24     	; 0x1a68 <vfprintf+0x19c>
    1a80:	f5 01       	movw	r30, r10
    1a82:	27 fc       	sbrc	r2, 7
    1a84:	85 91       	lpm	r24, Z+
    1a86:	27 fe       	sbrs	r2, 7
    1a88:	81 91       	ld	r24, Z+
    1a8a:	5f 01       	movw	r10, r30
    1a8c:	b7 01       	movw	r22, r14
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1a94:	31 10       	cpse	r3, r1
    1a96:	3a 94       	dec	r3
    1a98:	f1 e0       	ldi	r31, 0x01	; 1
    1a9a:	4f 1a       	sub	r4, r31
    1a9c:	51 08       	sbc	r5, r1
    1a9e:	41 14       	cp	r4, r1
    1aa0:	51 04       	cpc	r5, r1
    1aa2:	71 f7       	brne	.-36     	; 0x1a80 <vfprintf+0x1b4>
    1aa4:	e5 c0       	rjmp	.+458    	; 0x1c70 <vfprintf+0x3a4>
    1aa6:	84 36       	cpi	r24, 0x64	; 100
    1aa8:	11 f0       	breq	.+4      	; 0x1aae <vfprintf+0x1e2>
    1aaa:	89 36       	cpi	r24, 0x69	; 105
    1aac:	39 f5       	brne	.+78     	; 0x1afc <vfprintf+0x230>
    1aae:	f8 01       	movw	r30, r16
    1ab0:	27 ff       	sbrs	r18, 7
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <vfprintf+0x1f6>
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	0c 5f       	subi	r16, 0xFC	; 252
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	08 c0       	rjmp	.+16     	; 0x1ad2 <vfprintf+0x206>
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	88 27       	eor	r24, r24
    1ac8:	77 fd       	sbrc	r23, 7
    1aca:	80 95       	com	r24
    1acc:	98 2f       	mov	r25, r24
    1ace:	0e 5f       	subi	r16, 0xFE	; 254
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	2f 76       	andi	r18, 0x6F	; 111
    1ad4:	b2 2e       	mov	r11, r18
    1ad6:	97 ff       	sbrs	r25, 7
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <vfprintf+0x220>
    1ada:	90 95       	com	r25
    1adc:	80 95       	com	r24
    1ade:	70 95       	com	r23
    1ae0:	61 95       	neg	r22
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	20 68       	ori	r18, 0x80	; 128
    1aea:	b2 2e       	mov	r11, r18
    1aec:	2a e0       	ldi	r18, 0x0A	; 10
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	a4 01       	movw	r20, r8
    1af2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__ultoa_invert>
    1af6:	a8 2e       	mov	r10, r24
    1af8:	a8 18       	sub	r10, r8
    1afa:	44 c0       	rjmp	.+136    	; 0x1b84 <vfprintf+0x2b8>
    1afc:	85 37       	cpi	r24, 0x75	; 117
    1afe:	29 f4       	brne	.+10     	; 0x1b0a <vfprintf+0x23e>
    1b00:	2f 7e       	andi	r18, 0xEF	; 239
    1b02:	b2 2e       	mov	r11, r18
    1b04:	2a e0       	ldi	r18, 0x0A	; 10
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	25 c0       	rjmp	.+74     	; 0x1b54 <vfprintf+0x288>
    1b0a:	f2 2f       	mov	r31, r18
    1b0c:	f9 7f       	andi	r31, 0xF9	; 249
    1b0e:	bf 2e       	mov	r11, r31
    1b10:	8f 36       	cpi	r24, 0x6F	; 111
    1b12:	c1 f0       	breq	.+48     	; 0x1b44 <vfprintf+0x278>
    1b14:	18 f4       	brcc	.+6      	; 0x1b1c <vfprintf+0x250>
    1b16:	88 35       	cpi	r24, 0x58	; 88
    1b18:	79 f0       	breq	.+30     	; 0x1b38 <vfprintf+0x26c>
    1b1a:	b4 c0       	rjmp	.+360    	; 0x1c84 <vfprintf+0x3b8>
    1b1c:	80 37       	cpi	r24, 0x70	; 112
    1b1e:	19 f0       	breq	.+6      	; 0x1b26 <vfprintf+0x25a>
    1b20:	88 37       	cpi	r24, 0x78	; 120
    1b22:	21 f0       	breq	.+8      	; 0x1b2c <vfprintf+0x260>
    1b24:	af c0       	rjmp	.+350    	; 0x1c84 <vfprintf+0x3b8>
    1b26:	2f 2f       	mov	r18, r31
    1b28:	20 61       	ori	r18, 0x10	; 16
    1b2a:	b2 2e       	mov	r11, r18
    1b2c:	b4 fe       	sbrs	r11, 4
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <vfprintf+0x27e>
    1b30:	8b 2d       	mov	r24, r11
    1b32:	84 60       	ori	r24, 0x04	; 4
    1b34:	b8 2e       	mov	r11, r24
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <vfprintf+0x27e>
    1b38:	24 ff       	sbrs	r18, 4
    1b3a:	0a c0       	rjmp	.+20     	; 0x1b50 <vfprintf+0x284>
    1b3c:	9f 2f       	mov	r25, r31
    1b3e:	96 60       	ori	r25, 0x06	; 6
    1b40:	b9 2e       	mov	r11, r25
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <vfprintf+0x284>
    1b44:	28 e0       	ldi	r18, 0x08	; 8
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <vfprintf+0x288>
    1b4a:	20 e1       	ldi	r18, 0x10	; 16
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0x288>
    1b50:	20 e1       	ldi	r18, 0x10	; 16
    1b52:	32 e0       	ldi	r19, 0x02	; 2
    1b54:	f8 01       	movw	r30, r16
    1b56:	b7 fe       	sbrs	r11, 7
    1b58:	07 c0       	rjmp	.+14     	; 0x1b68 <vfprintf+0x29c>
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	0c 5f       	subi	r16, 0xFC	; 252
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	06 c0       	rjmp	.+12     	; 0x1b74 <vfprintf+0x2a8>
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 5f       	subi	r16, 0xFE	; 254
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	a4 01       	movw	r20, r8
    1b76:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__ultoa_invert>
    1b7a:	a8 2e       	mov	r10, r24
    1b7c:	a8 18       	sub	r10, r8
    1b7e:	fb 2d       	mov	r31, r11
    1b80:	ff 77       	andi	r31, 0x7F	; 127
    1b82:	bf 2e       	mov	r11, r31
    1b84:	b6 fe       	sbrs	r11, 6
    1b86:	0b c0       	rjmp	.+22     	; 0x1b9e <vfprintf+0x2d2>
    1b88:	2b 2d       	mov	r18, r11
    1b8a:	2e 7f       	andi	r18, 0xFE	; 254
    1b8c:	a5 14       	cp	r10, r5
    1b8e:	50 f4       	brcc	.+20     	; 0x1ba4 <vfprintf+0x2d8>
    1b90:	b4 fe       	sbrs	r11, 4
    1b92:	0a c0       	rjmp	.+20     	; 0x1ba8 <vfprintf+0x2dc>
    1b94:	b2 fc       	sbrc	r11, 2
    1b96:	08 c0       	rjmp	.+16     	; 0x1ba8 <vfprintf+0x2dc>
    1b98:	2b 2d       	mov	r18, r11
    1b9a:	2e 7e       	andi	r18, 0xEE	; 238
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <vfprintf+0x2dc>
    1b9e:	7a 2c       	mov	r7, r10
    1ba0:	2b 2d       	mov	r18, r11
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x2de>
    1ba4:	7a 2c       	mov	r7, r10
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfprintf+0x2de>
    1ba8:	75 2c       	mov	r7, r5
    1baa:	24 ff       	sbrs	r18, 4
    1bac:	0d c0       	rjmp	.+26     	; 0x1bc8 <vfprintf+0x2fc>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ea 0d       	add	r30, r10
    1bb2:	f1 1d       	adc	r31, r1
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 33       	cpi	r24, 0x30	; 48
    1bb8:	11 f4       	brne	.+4      	; 0x1bbe <vfprintf+0x2f2>
    1bba:	29 7e       	andi	r18, 0xE9	; 233
    1bbc:	09 c0       	rjmp	.+18     	; 0x1bd0 <vfprintf+0x304>
    1bbe:	22 ff       	sbrs	r18, 2
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <vfprintf+0x302>
    1bc2:	73 94       	inc	r7
    1bc4:	73 94       	inc	r7
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <vfprintf+0x304>
    1bc8:	82 2f       	mov	r24, r18
    1bca:	86 78       	andi	r24, 0x86	; 134
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <vfprintf+0x304>
    1bce:	73 94       	inc	r7
    1bd0:	23 fd       	sbrc	r18, 3
    1bd2:	13 c0       	rjmp	.+38     	; 0x1bfa <vfprintf+0x32e>
    1bd4:	20 ff       	sbrs	r18, 0
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <vfprintf+0x318>
    1bd8:	5a 2c       	mov	r5, r10
    1bda:	73 14       	cp	r7, r3
    1bdc:	18 f4       	brcc	.+6      	; 0x1be4 <vfprintf+0x318>
    1bde:	53 0c       	add	r5, r3
    1be0:	57 18       	sub	r5, r7
    1be2:	73 2c       	mov	r7, r3
    1be4:	73 14       	cp	r7, r3
    1be6:	68 f4       	brcc	.+26     	; 0x1c02 <vfprintf+0x336>
    1be8:	b7 01       	movw	r22, r14
    1bea:	80 e2       	ldi	r24, 0x20	; 32
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	2c 87       	std	Y+12, r18	; 0x0c
    1bf0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1bf4:	73 94       	inc	r7
    1bf6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bf8:	f5 cf       	rjmp	.-22     	; 0x1be4 <vfprintf+0x318>
    1bfa:	73 14       	cp	r7, r3
    1bfc:	10 f4       	brcc	.+4      	; 0x1c02 <vfprintf+0x336>
    1bfe:	37 18       	sub	r3, r7
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <vfprintf+0x338>
    1c02:	31 2c       	mov	r3, r1
    1c04:	24 ff       	sbrs	r18, 4
    1c06:	12 c0       	rjmp	.+36     	; 0x1c2c <vfprintf+0x360>
    1c08:	b7 01       	movw	r22, r14
    1c0a:	80 e3       	ldi	r24, 0x30	; 48
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	2c 87       	std	Y+12, r18	; 0x0c
    1c10:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1c14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c16:	22 ff       	sbrs	r18, 2
    1c18:	17 c0       	rjmp	.+46     	; 0x1c48 <vfprintf+0x37c>
    1c1a:	21 ff       	sbrs	r18, 1
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <vfprintf+0x358>
    1c1e:	88 e5       	ldi	r24, 0x58	; 88
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x35c>
    1c24:	88 e7       	ldi	r24, 0x78	; 120
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	b7 01       	movw	r22, r14
    1c2a:	0c c0       	rjmp	.+24     	; 0x1c44 <vfprintf+0x378>
    1c2c:	82 2f       	mov	r24, r18
    1c2e:	86 78       	andi	r24, 0x86	; 134
    1c30:	59 f0       	breq	.+22     	; 0x1c48 <vfprintf+0x37c>
    1c32:	21 fd       	sbrc	r18, 1
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfprintf+0x36e>
    1c36:	80 e2       	ldi	r24, 0x20	; 32
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <vfprintf+0x370>
    1c3a:	8b e2       	ldi	r24, 0x2B	; 43
    1c3c:	27 fd       	sbrc	r18, 7
    1c3e:	8d e2       	ldi	r24, 0x2D	; 45
    1c40:	b7 01       	movw	r22, r14
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1c48:	a5 14       	cp	r10, r5
    1c4a:	38 f4       	brcc	.+14     	; 0x1c5a <vfprintf+0x38e>
    1c4c:	b7 01       	movw	r22, r14
    1c4e:	80 e3       	ldi	r24, 0x30	; 48
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1c56:	5a 94       	dec	r5
    1c58:	f7 cf       	rjmp	.-18     	; 0x1c48 <vfprintf+0x37c>
    1c5a:	aa 94       	dec	r10
    1c5c:	f4 01       	movw	r30, r8
    1c5e:	ea 0d       	add	r30, r10
    1c60:	f1 1d       	adc	r31, r1
    1c62:	80 81       	ld	r24, Z
    1c64:	b7 01       	movw	r22, r14
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1c6c:	a1 10       	cpse	r10, r1
    1c6e:	f5 cf       	rjmp	.-22     	; 0x1c5a <vfprintf+0x38e>
    1c70:	33 20       	and	r3, r3
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <vfprintf+0x3aa>
    1c74:	51 ce       	rjmp	.-862    	; 0x1918 <vfprintf+0x4c>
    1c76:	b7 01       	movw	r22, r14
    1c78:	80 e2       	ldi	r24, 0x20	; 32
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <fputc>
    1c80:	3a 94       	dec	r3
    1c82:	f6 cf       	rjmp	.-20     	; 0x1c70 <vfprintf+0x3a4>
    1c84:	f7 01       	movw	r30, r14
    1c86:	86 81       	ldd	r24, Z+6	; 0x06
    1c88:	97 81       	ldd	r25, Z+7	; 0x07
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <vfprintf+0x3c4>
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	9f ef       	ldi	r25, 0xFF	; 255
    1c90:	2c 96       	adiw	r28, 0x0c	; 12
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	bf 90       	pop	r11
    1cae:	af 90       	pop	r10
    1cb0:	9f 90       	pop	r9
    1cb2:	8f 90       	pop	r8
    1cb4:	7f 90       	pop	r7
    1cb6:	6f 90       	pop	r6
    1cb8:	5f 90       	pop	r5
    1cba:	4f 90       	pop	r4
    1cbc:	3f 90       	pop	r3
    1cbe:	2f 90       	pop	r2
    1cc0:	08 95       	ret

00001cc2 <__eerd_block_m1284p>:
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22

00001cc6 <__eerd_blraw_m1284p>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	f9 99       	sbic	0x1f, 1	; 31
    1cca:	fe cf       	rjmp	.-4      	; 0x1cc8 <__eerd_blraw_m1284p+0x2>
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <__eerd_blraw_m1284p+0x14>
    1cce:	f2 bd       	out	0x22, r31	; 34
    1cd0:	e1 bd       	out	0x21, r30	; 33
    1cd2:	f8 9a       	sbi	0x1f, 0	; 31
    1cd4:	31 96       	adiw	r30, 0x01	; 1
    1cd6:	00 b4       	in	r0, 0x20	; 32
    1cd8:	0d 92       	st	X+, r0
    1cda:	41 50       	subi	r20, 0x01	; 1
    1cdc:	50 40       	sbci	r21, 0x00	; 0
    1cde:	b8 f7       	brcc	.-18     	; 0x1cce <__eerd_blraw_m1284p+0x8>
    1ce0:	08 95       	ret

00001ce2 <__eerd_byte_m1284p>:
    1ce2:	f9 99       	sbic	0x1f, 1	; 31
    1ce4:	fe cf       	rjmp	.-4      	; 0x1ce2 <__eerd_byte_m1284p>
    1ce6:	92 bd       	out	0x22, r25	; 34
    1ce8:	81 bd       	out	0x21, r24	; 33
    1cea:	f8 9a       	sbi	0x1f, 0	; 31
    1cec:	99 27       	eor	r25, r25
    1cee:	80 b5       	in	r24, 0x20	; 32
    1cf0:	08 95       	ret

00001cf2 <__eerd_dword_m1284p>:
    1cf2:	a6 e1       	ldi	r26, 0x16	; 22
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	44 e0       	ldi	r20, 0x04	; 4
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__eerd_blraw_m1284p>

00001cfe <__eewr_byte_m1284p>:
    1cfe:	26 2f       	mov	r18, r22

00001d00 <__eewr_r18_m1284p>:
    1d00:	f9 99       	sbic	0x1f, 1	; 31
    1d02:	fe cf       	rjmp	.-4      	; 0x1d00 <__eewr_r18_m1284p>
    1d04:	1f ba       	out	0x1f, r1	; 31
    1d06:	92 bd       	out	0x22, r25	; 34
    1d08:	81 bd       	out	0x21, r24	; 33
    1d0a:	20 bd       	out	0x20, r18	; 32
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	fa 9a       	sbi	0x1f, 2	; 31
    1d12:	f9 9a       	sbi	0x1f, 1	; 31
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	08 95       	ret

00001d1a <strnlen_P>:
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	05 90       	lpm	r0, Z+
    1d1e:	61 50       	subi	r22, 0x01	; 1
    1d20:	70 40       	sbci	r23, 0x00	; 0
    1d22:	01 10       	cpse	r0, r1
    1d24:	d8 f7       	brcc	.-10     	; 0x1d1c <strnlen_P+0x2>
    1d26:	80 95       	com	r24
    1d28:	90 95       	com	r25
    1d2a:	8e 0f       	add	r24, r30
    1d2c:	9f 1f       	adc	r25, r31
    1d2e:	08 95       	ret

00001d30 <strnlen>:
    1d30:	fc 01       	movw	r30, r24
    1d32:	61 50       	subi	r22, 0x01	; 1
    1d34:	70 40       	sbci	r23, 0x00	; 0
    1d36:	01 90       	ld	r0, Z+
    1d38:	01 10       	cpse	r0, r1
    1d3a:	d8 f7       	brcc	.-10     	; 0x1d32 <strnlen+0x2>
    1d3c:	80 95       	com	r24
    1d3e:	90 95       	com	r25
    1d40:	8e 0f       	add	r24, r30
    1d42:	9f 1f       	adc	r25, r31
    1d44:	08 95       	ret

00001d46 <fputc>:
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	18 2f       	mov	r17, r24
    1d50:	09 2f       	mov	r16, r25
    1d52:	eb 01       	movw	r28, r22
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	81 fd       	sbrc	r24, 1
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <fputc+0x1a>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	9f ef       	ldi	r25, 0xFF	; 255
    1d5e:	20 c0       	rjmp	.+64     	; 0x1da0 <fputc+0x5a>
    1d60:	82 ff       	sbrs	r24, 2
    1d62:	10 c0       	rjmp	.+32     	; 0x1d84 <fputc+0x3e>
    1d64:	4e 81       	ldd	r20, Y+6	; 0x06
    1d66:	5f 81       	ldd	r21, Y+7	; 0x07
    1d68:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6c:	42 17       	cp	r20, r18
    1d6e:	53 07       	cpc	r21, r19
    1d70:	7c f4       	brge	.+30     	; 0x1d90 <fputc+0x4a>
    1d72:	e8 81       	ld	r30, Y
    1d74:	f9 81       	ldd	r31, Y+1	; 0x01
    1d76:	9f 01       	movw	r18, r30
    1d78:	2f 5f       	subi	r18, 0xFF	; 255
    1d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7c:	39 83       	std	Y+1, r19	; 0x01
    1d7e:	28 83       	st	Y, r18
    1d80:	10 83       	st	Z, r17
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <fputc+0x4a>
    1d84:	e8 85       	ldd	r30, Y+8	; 0x08
    1d86:	f9 85       	ldd	r31, Y+9	; 0x09
    1d88:	81 2f       	mov	r24, r17
    1d8a:	09 95       	icall
    1d8c:	89 2b       	or	r24, r25
    1d8e:	29 f7       	brne	.-54     	; 0x1d5a <fputc+0x14>
    1d90:	2e 81       	ldd	r18, Y+6	; 0x06
    1d92:	3f 81       	ldd	r19, Y+7	; 0x07
    1d94:	2f 5f       	subi	r18, 0xFF	; 255
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	3f 83       	std	Y+7, r19	; 0x07
    1d9a:	2e 83       	std	Y+6, r18	; 0x06
    1d9c:	81 2f       	mov	r24, r17
    1d9e:	90 2f       	mov	r25, r16
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	08 95       	ret

00001daa <__ultoa_invert>:
    1daa:	fa 01       	movw	r30, r20
    1dac:	aa 27       	eor	r26, r26
    1dae:	28 30       	cpi	r18, 0x08	; 8
    1db0:	51 f1       	breq	.+84     	; 0x1e06 <__ultoa_invert+0x5c>
    1db2:	20 31       	cpi	r18, 0x10	; 16
    1db4:	81 f1       	breq	.+96     	; 0x1e16 <__ultoa_invert+0x6c>
    1db6:	e8 94       	clt
    1db8:	6f 93       	push	r22
    1dba:	6e 7f       	andi	r22, 0xFE	; 254
    1dbc:	6e 5f       	subi	r22, 0xFE	; 254
    1dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	af 4f       	sbci	r26, 0xFF	; 255
    1dc6:	b1 e0       	ldi	r27, 0x01	; 1
    1dc8:	3e d0       	rcall	.+124    	; 0x1e46 <__ultoa_invert+0x9c>
    1dca:	b4 e0       	ldi	r27, 0x04	; 4
    1dcc:	3c d0       	rcall	.+120    	; 0x1e46 <__ultoa_invert+0x9c>
    1dce:	67 0f       	add	r22, r23
    1dd0:	78 1f       	adc	r23, r24
    1dd2:	89 1f       	adc	r24, r25
    1dd4:	9a 1f       	adc	r25, r26
    1dd6:	a1 1d       	adc	r26, r1
    1dd8:	68 0f       	add	r22, r24
    1dda:	79 1f       	adc	r23, r25
    1ddc:	8a 1f       	adc	r24, r26
    1dde:	91 1d       	adc	r25, r1
    1de0:	a1 1d       	adc	r26, r1
    1de2:	6a 0f       	add	r22, r26
    1de4:	71 1d       	adc	r23, r1
    1de6:	81 1d       	adc	r24, r1
    1de8:	91 1d       	adc	r25, r1
    1dea:	a1 1d       	adc	r26, r1
    1dec:	20 d0       	rcall	.+64     	; 0x1e2e <__ultoa_invert+0x84>
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <__ultoa_invert+0x48>
    1df0:	68 94       	set
    1df2:	3f 91       	pop	r19
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	26 9f       	mul	r18, r22
    1df8:	11 24       	eor	r1, r1
    1dfa:	30 19       	sub	r19, r0
    1dfc:	30 5d       	subi	r19, 0xD0	; 208
    1dfe:	31 93       	st	Z+, r19
    1e00:	de f6       	brtc	.-74     	; 0x1db8 <__ultoa_invert+0xe>
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret
    1e06:	46 2f       	mov	r20, r22
    1e08:	47 70       	andi	r20, 0x07	; 7
    1e0a:	40 5d       	subi	r20, 0xD0	; 208
    1e0c:	41 93       	st	Z+, r20
    1e0e:	b3 e0       	ldi	r27, 0x03	; 3
    1e10:	0f d0       	rcall	.+30     	; 0x1e30 <__ultoa_invert+0x86>
    1e12:	c9 f7       	brne	.-14     	; 0x1e06 <__ultoa_invert+0x5c>
    1e14:	f6 cf       	rjmp	.-20     	; 0x1e02 <__ultoa_invert+0x58>
    1e16:	46 2f       	mov	r20, r22
    1e18:	4f 70       	andi	r20, 0x0F	; 15
    1e1a:	40 5d       	subi	r20, 0xD0	; 208
    1e1c:	4a 33       	cpi	r20, 0x3A	; 58
    1e1e:	18 f0       	brcs	.+6      	; 0x1e26 <__ultoa_invert+0x7c>
    1e20:	49 5d       	subi	r20, 0xD9	; 217
    1e22:	31 fd       	sbrc	r19, 1
    1e24:	40 52       	subi	r20, 0x20	; 32
    1e26:	41 93       	st	Z+, r20
    1e28:	02 d0       	rcall	.+4      	; 0x1e2e <__ultoa_invert+0x84>
    1e2a:	a9 f7       	brne	.-22     	; 0x1e16 <__ultoa_invert+0x6c>
    1e2c:	ea cf       	rjmp	.-44     	; 0x1e02 <__ultoa_invert+0x58>
    1e2e:	b4 e0       	ldi	r27, 0x04	; 4
    1e30:	a6 95       	lsr	r26
    1e32:	97 95       	ror	r25
    1e34:	87 95       	ror	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	ba 95       	dec	r27
    1e3c:	c9 f7       	brne	.-14     	; 0x1e30 <__ultoa_invert+0x86>
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	61 05       	cpc	r22, r1
    1e42:	71 05       	cpc	r23, r1
    1e44:	08 95       	ret
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	0a 2e       	mov	r0, r26
    1e4c:	06 94       	lsr	r0
    1e4e:	57 95       	ror	r21
    1e50:	47 95       	ror	r20
    1e52:	37 95       	ror	r19
    1e54:	27 95       	ror	r18
    1e56:	ba 95       	dec	r27
    1e58:	c9 f7       	brne	.-14     	; 0x1e4c <__ultoa_invert+0xa2>
    1e5a:	62 0f       	add	r22, r18
    1e5c:	73 1f       	adc	r23, r19
    1e5e:	84 1f       	adc	r24, r20
    1e60:	95 1f       	adc	r25, r21
    1e62:	a0 1d       	adc	r26, r0
    1e64:	08 95       	ret

00001e66 <_exit>:
    1e66:	f8 94       	cli

00001e68 <__stop_program>:
    1e68:	ff cf       	rjmp	.-2      	; 0x1e68 <__stop_program>
