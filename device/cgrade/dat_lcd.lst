
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  0000207a  0000210e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  008001d0  008001d0  000021de  2**0
                  ALLOC
  3 .stab         00008cac  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022c5  00000000  00000000  0000ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d151  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <print_eeprom_contents+0x1a>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ea e7       	ldi	r30, 0x7A	; 122
     122:	f0 e2       	ldi	r31, 0x20	; 32
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a0 3d       	cpi	r26, 0xD0	; 208
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	13 e0       	ldi	r17, 0x03	; 3
     136:	a0 ed       	ldi	r26, 0xD0	; 208
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	ab 3f       	cpi	r26, 0xFB	; 251
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 8b 07 	call	0xf16	; 0xf16 <main>
     148:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     150:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     154:	8c e0       	ldi	r24, 0x0C	; 12
     156:	80 93 cc 00 	sts	0x00CC, r24
    
    // Enable The Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     15a:	e9 ec       	ldi	r30, 0xC9	; 201
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 6d       	ori	r24, 0xD8	; 216
     162:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     164:	e8 ec       	ldi	r30, 0xC8	; 200
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 83       	st	Z, r24
    
    // Set the Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     16e:	ea ec       	ldi	r30, 0xCA	; 202
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	8e 60       	ori	r24, 0x0E	; 14
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <prepare_device>:
}

//set up GPIO, initialize interrupts, serial comm, and LCD
void prepare_device(void)
{
    DDRB = 0xFF;
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	84 b9       	out	0x04, r24	; 4
    cli();
     17e:	f8 94       	cli
    //Init usart
    InitUSART();
     180:	0e 94 a8 00 	call	0x150	; 0x150 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     184:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     186:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	2f e3       	ldi	r18, 0x3F	; 63
     18c:	8d e0       	ldi	r24, 0x0D	; 13
     18e:	93 e0       	ldi	r25, 0x03	; 3
     190:	21 50       	subi	r18, 0x01	; 1
     192:	80 40       	sbci	r24, 0x00	; 0
     194:	90 40       	sbci	r25, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <prepare_device+0x16>
     198:	00 c0       	rjmp	.+0      	; 0x19a <prepare_device+0x20>
     19a:	00 00       	nop
     19c:	08 95       	ret

0000019e <database_load>:
    _delay_ms(1000);
}

//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
     19e:	bf 92       	push	r11
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
}

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__eerd_byte_m1284p>
     1b8:	90 e0       	ldi	r25, 0x00	; 0
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);

    if (num_stations==255)
     1ba:	8f 3f       	cpi	r24, 0xFF	; 255
     1bc:	91 05       	cpc	r25, r1
     1be:	29 f0       	breq	.+10     	; 0x1ca <database_load+0x2c>
//load the FM Stations database from EEPROM into program memory
void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     1c0:	90 93 72 03 	sts	0x0372, r25
     1c4:	80 93 71 03 	sts	0x0371, r24
     1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <database_load+0x34>

    if (num_stations==255)
        num_stations = 0;
     1ca:	10 92 72 03 	sts	0x0372, r1
     1ce:	10 92 71 03 	sts	0x0371, r1

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     1d2:	80 91 71 03 	lds	r24, 0x0371
     1d6:	90 91 72 03 	lds	r25, 0x0372
     1da:	2c e1       	ldi	r18, 0x1C	; 28
     1dc:	ac 01       	movw	r20, r24
     1de:	24 9f       	mul	r18, r20
     1e0:	c0 01       	movw	r24, r0
     1e2:	25 9f       	mul	r18, r21
     1e4:	90 0d       	add	r25, r0
     1e6:	11 24       	eor	r1, r1
     1e8:	0e 94 18 0c 	call	0x1830	; 0x1830 <malloc>
     1ec:	90 93 76 03 	sts	0x0376, r25
     1f0:	80 93 75 03 	sts	0x0375, r24
     1f4:	89 ea       	ldi	r24, 0xA9	; 169
     1f6:	c8 2e       	mov	r12, r24
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	d8 2e       	mov	r13, r24
     1fc:	91 ee       	ldi	r25, 0xE1	; 225
     1fe:	e9 2e       	mov	r14, r25
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	f9 2e       	mov	r15, r25

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	10 e0       	ldi	r17, 0x00	; 0
    for (i=0; i < NUM_GRID_CELLS; i ++)
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        stations_in_cell[i] = my_eeprom_read_int(i+1);
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     20c:	2c e1       	ldi	r18, 0x1C	; 28
     20e:	b2 2e       	mov	r11, r18

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+1);
     210:	21 96       	adiw	r28, 0x01	; 1
}

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     212:	ce 01       	movw	r24, r28
     214:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__eerd_byte_m1284p>
     218:	90 e0       	ldi	r25, 0x00	; 0

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+1);
     21a:	f6 01       	movw	r30, r12
     21c:	81 93       	st	Z+, r24
     21e:	91 93       	st	Z+, r25
     220:	6f 01       	movw	r12, r30
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     222:	b0 9e       	mul	r11, r16
     224:	90 01       	movw	r18, r0
     226:	b1 9e       	mul	r11, r17
     228:	30 0d       	add	r19, r0
     22a:	11 24       	eor	r1, r1
     22c:	2b 59       	subi	r18, 0x9B	; 155
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	f7 01       	movw	r30, r14
     232:	21 93       	st	Z+, r18
     234:	31 93       	st	Z+, r19
     236:	7f 01       	movw	r14, r30
        total += stations_in_cell[i];
     238:	08 0f       	add	r16, r24
     23a:	19 1f       	adc	r17, r25
    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
     23c:	c4 36       	cpi	r28, 0x64	; 100
     23e:	d1 05       	cpc	r29, r1
     240:	39 f7       	brne	.-50     	; 0x210 <database_load+0x72>
     242:	c0 e0       	ldi	r28, 0x00	; 0
     244:	d0 e0       	ldi	r29, 0x00	; 0
     246:	e1 2c       	mov	r14, r1
     248:	f1 2c       	mov	r15, r1
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     24a:	80 91 71 03 	lds	r24, 0x0371
     24e:	90 91 72 03 	lds	r25, 0x0372
     252:	e8 16       	cp	r14, r24
     254:	f9 06       	cpc	r15, r25
     256:	0c f0       	brlt	.+2      	; 0x25a <database_load+0xbc>
     258:	4a c0       	rjmp	.+148    	; 0x2ee <database_load+0x150>
     25a:	be 01       	movw	r22, r28
     25c:	6b 59       	subi	r22, 0x9B	; 155
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     260:	80 91 75 03 	lds	r24, 0x0375
     264:	90 91 76 03 	lds	r25, 0x0376
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     268:	48 e0       	ldi	r20, 0x08	; 8
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	8c 0f       	add	r24, r28
     26e:	9d 1f       	adc	r25, r29
     270:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__eerd_block_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     274:	00 91 75 03 	lds	r16, 0x0375
     278:	10 91 76 03 	lds	r17, 0x0376
     27c:	0c 0f       	add	r16, r28
     27e:	1d 1f       	adc	r17, r29
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     280:	ce 01       	movw	r24, r28
     282:	83 59       	subi	r24, 0x93	; 147
     284:	9f 4f       	sbci	r25, 0xFF	; 255
     286:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__eerd_dword_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     28a:	f8 01       	movw	r30, r16
     28c:	60 87       	std	Z+8, r22	; 0x08
     28e:	71 87       	std	Z+9, r23	; 0x09
     290:	82 87       	std	Z+10, r24	; 0x0a
     292:	93 87       	std	Z+11, r25	; 0x0b
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     294:	ce 01       	movw	r24, r28
     296:	8f 58       	subi	r24, 0x8F	; 143
     298:	9f 4f       	sbci	r25, 0xFF	; 255
     29a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     29e:	f8 01       	movw	r30, r16
     2a0:	64 87       	std	Z+12, r22	; 0x0c
     2a2:	75 87       	std	Z+13, r23	; 0x0d
     2a4:	86 87       	std	Z+14, r24	; 0x0e
     2a6:	97 87       	std	Z+15, r25	; 0x0f
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     2a8:	ce 01       	movw	r24, r28
     2aa:	8b 58       	subi	r24, 0x8B	; 139
     2ac:	9f 4f       	sbci	r25, 0xFF	; 255
     2ae:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     2b2:	f8 01       	movw	r30, r16
     2b4:	60 8b       	std	Z+16, r22	; 0x10
     2b6:	71 8b       	std	Z+17, r23	; 0x11
     2b8:	82 8b       	std	Z+18, r24	; 0x12
     2ba:	93 8b       	std	Z+19, r25	; 0x13
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     2bc:	ce 01       	movw	r24, r28
     2be:	87 58       	subi	r24, 0x87	; 135
     2c0:	9f 4f       	sbci	r25, 0xFF	; 255
     2c2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__eerd_dword_m1284p>

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     2c6:	f8 01       	movw	r30, r16
     2c8:	64 8b       	std	Z+20, r22	; 0x14
     2ca:	75 8b       	std	Z+21, r23	; 0x15
     2cc:	86 8b       	std	Z+22, r24	; 0x16
     2ce:	97 8b       	std	Z+23, r25	; 0x17
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     2d0:	ce 01       	movw	r24, r28
     2d2:	83 58       	subi	r24, 0x83	; 131
     2d4:	9f 4f       	sbci	r25, 0xFF	; 255
     2d6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__eerd_dword_m1284p>
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     2da:	f8 01       	movw	r30, r16
     2dc:	60 8f       	std	Z+24, r22	; 0x18
     2de:	71 8f       	std	Z+25, r23	; 0x19
     2e0:	82 8f       	std	Z+26, r24	; 0x1a
     2e2:	93 8f       	std	Z+27, r25	; 0x1b
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     2e4:	ff ef       	ldi	r31, 0xFF	; 255
     2e6:	ef 1a       	sub	r14, r31
     2e8:	ff 0a       	sbc	r15, r31
     2ea:	6c 96       	adiw	r28, 0x1c	; 28
     2ec:	ae cf       	rjmp	.-164    	; 0x24a <database_load+0xac>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	08 95       	ret

00000302 <database_free>:

//free the FM Stations database from program memory
void database_free(void)
{
    num_stations = 0;
     302:	10 92 72 03 	sts	0x0372, r1
     306:	10 92 71 03 	sts	0x0371, r1

    free(all_stations);
     30a:	80 91 75 03 	lds	r24, 0x0375
     30e:	90 91 76 03 	lds	r25, 0x0376
     312:	0e 94 b0 0c 	call	0x1960	; 0x1960 <free>
    all_stations = NULL;
     316:	10 92 76 03 	sts	0x0376, r1
     31a:	10 92 75 03 	sts	0x0375, r1
     31e:	e9 ea       	ldi	r30, 0xA9	; 169
     320:	f2 e0       	ldi	r31, 0x02	; 2
     322:	a1 ee       	ldi	r26, 0xE1	; 225
     324:	b1 e0       	ldi	r27, 0x01	; 1

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
    {
        stations_in_cell[i] = 0;
     326:	11 92       	st	Z+, r1
     328:	11 92       	st	Z+, r1
        cell_offsets[i] = 0;
     32a:	1d 92       	st	X+, r1
     32c:	1d 92       	st	X+, r1

    free(all_stations);
    all_stations = NULL;

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	e1 37       	cpi	r30, 0x71	; 113
     332:	f8 07       	cpc	r31, r24
     334:	c1 f7       	brne	.-16     	; 0x326 <database_free+0x24>
    {
        stations_in_cell[i] = 0;
        cell_offsets[i] = 0;
    }
}
     336:	08 95       	ret

00000338 <whipe_eeprom>:

//---- EEPROM Operations ----//

//whipe 100-stations-worth of EEPROM data
void whipe_eeprom(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
    int i;
    lcd_init();
     33c:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
    string_write("whiping\nmemory...");
     340:	8a e0       	ldi	r24, 0x0A	; 10
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     348:	c0 e0       	ldi	r28, 0x00	; 0
     34a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (op_mode==MD_UPDATE) return;
     34c:	80 91 d6 01 	lds	r24, 0x01D6
     350:	90 91 d7 01 	lds	r25, 0x01D7
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	49 f0       	breq	.+18     	; 0x36a <whipe_eeprom+0x32>
        eeprom_write_byte((uint8_t *)i,255);
     358:	6f ef       	ldi	r22, 0xFF	; 255
     35a:	ce 01       	movw	r24, r28
     35c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__eewr_byte_m1284p>
void whipe_eeprom(void)
{
    int i;
    lcd_init();
    string_write("whiping\nmemory...");
    for (i=0; i<FIRST_STATION_OFFSET+100*STATION_BLOCKSIZE; i++)
     360:	21 96       	adiw	r28, 0x01	; 1
     362:	c5 35       	cpi	r28, 0x55	; 85
     364:	8b e0       	ldi	r24, 0x0B	; 11
     366:	d8 07       	cpc	r29, r24
     368:	89 f7       	brne	.-30     	; 0x34c <whipe_eeprom+0x14>
    {
        if (op_mode==MD_UPDATE) return;
        eeprom_write_byte((uint8_t *)i,255);
    }
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <my_eeprom_read_int>:

//read a single-byte integer from an EEPROM address
int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     370:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__eerd_byte_m1284p>
    return (temp_num);
}
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	08 95       	ret

00000378 <my_eeprom_read_char>:

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     378:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__eerd_byte_m1284p>

0000037c <my_eeprom_read_float>:
}

//read a 4-byte float from an EEPROM address
float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     37c:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__eerd_dword_m1284p>

00000380 <my_eeprom_read_string>:
}

//read a string from an EEPROM address
void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     380:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__eerd_block_m1284p>

00000384 <string_write_int>:

//---- LCD Routines ----//

//write a multi-char integer to the LCD as a string
void string_write_int(int num, int num_digits)
{
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	18 2f       	mov	r17, r24
     38e:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     390:	cb 01       	movw	r24, r22
     392:	0e 94 18 0c 	call	0x1830	; 0x1830 <malloc>
     396:	d8 2f       	mov	r29, r24
     398:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	2c e1       	ldi	r18, 0x1C	; 28
     3a0:	31 e0       	ldi	r19, 0x01	; 1
     3a2:	3f 93       	push	r19
     3a4:	2f 93       	push	r18
     3a6:	9f 93       	push	r25
     3a8:	8f 93       	push	r24
     3aa:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <sprintf>
    string_write(temp);
     3ae:	8d 2f       	mov	r24, r29
     3b0:	9c 2f       	mov	r25, r28
     3b2:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    free(temp);
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	8d 2f       	mov	r24, r29
     3c4:	9c 2f       	mov	r25, r28
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     3ce:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <free>

000003d2 <string_write_float>:
}

//write a floating point number to the LCD as a string
void string_write_float(float num, int dec_digits)
{
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <string_write_float+0x12>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <string_write_float+0x14>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     3ec:	ae 01       	movw	r20, r28
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <modf>
     3f6:	6b 01       	movw	r12, r22
     3f8:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     3fa:	69 81       	ldd	r22, Y+1	; 0x01
     3fc:	7a 81       	ldd	r23, Y+2	; 0x02
     3fe:	8b 81       	ldd	r24, Y+3	; 0x03
     400:	9c 81       	ldd	r25, Y+4	; 0x04
     402:	0e 94 96 08 	call	0x112c	; 0x112c <__fixsfsi>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	64 e0       	ldi	r22, 0x04	; 4
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	0e 94 c2 01 	call	0x384	; 0x384 <string_write_int>
     412:	85 e6       	ldi	r24, 0x65	; 101
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     41a:	b8 01       	movw	r22, r16
     41c:	88 27       	eor	r24, r24
     41e:	77 fd       	sbrc	r23, 7
     420:	80 95       	com	r24
     422:	98 2f       	mov	r25, r24
     424:	0e 94 c9 08 	call	0x1192	; 0x1192 <__floatsisf>
     428:	9b 01       	movw	r18, r22
     42a:	ac 01       	movw	r20, r24
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	80 e2       	ldi	r24, 0x20	; 32
     432:	91 e4       	ldi	r25, 0x41	; 65
     434:	0e 94 8d 0a 	call	0x151a	; 0x151a <pow>
     438:	9b 01       	movw	r18, r22
     43a:	ac 01       	movw	r20, r24
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3>
     444:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <round>
     448:	0e 94 96 08 	call	0x112c	; 0x112c <__fixsfsi>
     44c:	7b 01       	movw	r14, r22
     44e:	77 ff       	sbrs	r23, 7
     450:	04 c0       	rjmp	.+8      	; 0x45a <string_write_float+0x88>
     452:	ee 24       	eor	r14, r14
     454:	ff 24       	eor	r15, r15
     456:	e6 1a       	sub	r14, r22
     458:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     45a:	e1 14       	cp	r14, r1
     45c:	f1 04       	cpc	r15, r1
     45e:	a1 f0       	breq	.+40     	; 0x488 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     460:	b7 01       	movw	r22, r14
     462:	88 27       	eor	r24, r24
     464:	77 fd       	sbrc	r23, 7
     466:	80 95       	com	r24
     468:	98 2f       	mov	r25, r24
     46a:	0e 94 c9 08 	call	0x1192	; 0x1192 <__floatsisf>
     46e:	0e 94 ac 09 	call	0x1358	; 0x1358 <log10>
     472:	0e 94 04 09 	call	0x1208	; 0x1208 <floor>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e8       	ldi	r20, 0x80	; 128
     47c:	5f e3       	ldi	r21, 0x3F	; 63
     47e:	0e 94 32 08 	call	0x1064	; 0x1064 <__addsf3>
     482:	0e 94 96 08 	call	0x112c	; 0x112c <__fixsfsi>
     486:	02 c0       	rjmp	.+4      	; 0x48c <string_write_float+0xba>
    } else {
        digits = 0;
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     48c:	c1 2c       	mov	r12, r1
     48e:	d1 2c       	mov	r13, r1
     490:	06 1b       	sub	r16, r22
     492:	17 0b       	sbc	r17, r23
     494:	c0 16       	cp	r12, r16
     496:	d1 06       	cpc	r13, r17
     498:	44 f4       	brge	.+16     	; 0x4aa <string_write_float+0xd8>
    {
        string_write("0");
     49a:	8f e1       	ldi	r24, 0x1F	; 31
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	c8 1a       	sub	r12, r24
     4a6:	d8 0a       	sbc	r13, r24
     4a8:	f5 cf       	rjmp	.-22     	; 0x494 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     4aa:	64 e0       	ldi	r22, 0x04	; 4
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	c7 01       	movw	r24, r14
}
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     4c8:	0c 94 c2 01 	jmp	0x384	; 0x384 <string_write_int>

000004cc <print_callsign>:
        return;
}

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     4d4:	2c e1       	ldi	r18, 0x1C	; 28
     4d6:	28 9f       	mul	r18, r24
     4d8:	80 01       	movw	r16, r0
     4da:	29 9f       	mul	r18, r25
     4dc:	10 0d       	add	r17, r0
     4de:	11 24       	eor	r1, r1

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4e0:	c0 e0       	ldi	r28, 0x00	; 0
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     4e4:	e0 91 75 03 	lds	r30, 0x0375
     4e8:	f0 91 76 03 	lds	r31, 0x0376
     4ec:	e0 0f       	add	r30, r16
     4ee:	f1 1f       	adc	r31, r17
     4f0:	ec 0f       	add	r30, r28
     4f2:	fd 1f       	adc	r31, r29
     4f4:	80 81       	ld	r24, Z
     4f6:	0e 94 35 07 	call	0xe6a	; 0xe6a <char_write>

//print the callsign for a given station index to the LCD
void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4fa:	21 96       	adiw	r28, 0x01	; 1
     4fc:	c8 30       	cpi	r28, 0x08	; 8
     4fe:	d1 05       	cpc	r29, r1
     500:	89 f7       	brne	.-30     	; 0x4e4 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	08 95       	ret

0000050c <print_station>:
    string_write_int(temp,4);
}

//print the informatoin held for a single station to the LCD
void print_station(int index)
{
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     516:	63 e0       	ldi	r22, 0x03	; 3
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	0e 94 c2 01 	call	0x384	; 0x384 <string_write_int>
     520:	81 e3       	ldi	r24, 0x31	; 49
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     528:	c8 01       	movw	r24, r16
     52a:	0e 94 66 02 	call	0x4cc	; 0x4cc <print_callsign>
     52e:	83 e2       	ldi	r24, 0x23	; 35
     530:	94 ef       	ldi	r25, 0xF4	; 244
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <print_station+0x26>
     536:	00 c0       	rjmp	.+0      	; 0x538 <print_station+0x2c>
     538:	00 00       	nop
     53a:	87 e8       	ldi	r24, 0x87	; 135
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    if (op_mode==MD_UPDATE)
     542:	80 91 d6 01 	lds	r24, 0x01D6
     546:	90 91 d7 01 	lds	r25, 0x01D7
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	09 f4       	brne	.+2      	; 0x550 <print_station+0x44>
     54e:	b1 c0       	rjmp	.+354    	; 0x6b2 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     550:	81 e2       	ldi	r24, 0x21	; 33
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     558:	8c e1       	ldi	r24, 0x1C	; 28
     55a:	80 9f       	mul	r24, r16
     55c:	e0 01       	movw	r28, r0
     55e:	81 9f       	mul	r24, r17
     560:	d0 0d       	add	r29, r0
     562:	11 24       	eor	r1, r1
     564:	e0 91 75 03 	lds	r30, 0x0375
     568:	f0 91 76 03 	lds	r31, 0x0376
     56c:	ec 0f       	add	r30, r28
     56e:	fd 1f       	adc	r31, r29
     570:	60 85       	ldd	r22, Z+8	; 0x08
     572:	71 85       	ldd	r23, Z+9	; 0x09
     574:	82 85       	ldd	r24, Z+10	; 0x0a
     576:	93 85       	ldd	r25, Z+11	; 0x0b
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <string_write_float>
     580:	83 e2       	ldi	r24, 0x23	; 35
     582:	94 ef       	ldi	r25, 0xF4	; 244
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <print_station+0x78>
     588:	00 c0       	rjmp	.+0      	; 0x58a <print_station+0x7e>
     58a:	00 00       	nop
     58c:	87 e8       	ldi	r24, 0x87	; 135
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    if (op_mode==MD_UPDATE)
     594:	80 91 d6 01 	lds	r24, 0x01D6
     598:	90 91 d7 01 	lds	r25, 0x01D7
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	09 f4       	brne	.+2      	; 0x5a2 <print_station+0x96>
     5a0:	88 c0       	rjmp	.+272    	; 0x6b2 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     5aa:	e0 91 75 03 	lds	r30, 0x0375
     5ae:	f0 91 76 03 	lds	r31, 0x0376
     5b2:	ec 0f       	add	r30, r28
     5b4:	fd 1f       	adc	r31, r29
     5b6:	64 85       	ldd	r22, Z+12	; 0x0c
     5b8:	75 85       	ldd	r23, Z+13	; 0x0d
     5ba:	86 85       	ldd	r24, Z+14	; 0x0e
     5bc:	97 85       	ldd	r25, Z+15	; 0x0f
     5be:	44 e0       	ldi	r20, 0x04	; 4
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <string_write_float>
     5c6:	83 e2       	ldi	r24, 0x23	; 35
     5c8:	94 ef       	ldi	r25, 0xF4	; 244
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <print_station+0xbe>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <print_station+0xc4>
     5d0:	00 00       	nop
     5d2:	87 e8       	ldi	r24, 0x87	; 135
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    if (op_mode==MD_UPDATE)
     5da:	80 91 d6 01 	lds	r24, 0x01D6
     5de:	90 91 d7 01 	lds	r25, 0x01D7
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <print_station+0xdc>
     5e6:	65 c0       	rjmp	.+202    	; 0x6b2 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     5e8:	8e e2       	ldi	r24, 0x2E	; 46
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     5f0:	e0 91 75 03 	lds	r30, 0x0375
     5f4:	f0 91 76 03 	lds	r31, 0x0376
     5f8:	ec 0f       	add	r30, r28
     5fa:	fd 1f       	adc	r31, r29
     5fc:	60 89       	ldd	r22, Z+16	; 0x10
     5fe:	71 89       	ldd	r23, Z+17	; 0x11
     600:	82 89       	ldd	r24, Z+18	; 0x12
     602:	93 89       	ldd	r25, Z+19	; 0x13
     604:	44 e0       	ldi	r20, 0x04	; 4
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <string_write_float>
     60c:	83 e2       	ldi	r24, 0x23	; 35
     60e:	94 ef       	ldi	r25, 0xF4	; 244
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <print_station+0x104>
     614:	00 c0       	rjmp	.+0      	; 0x616 <print_station+0x10a>
     616:	00 00       	nop
     618:	87 e8       	ldi	r24, 0x87	; 135
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    if (op_mode==MD_UPDATE)
     620:	80 91 d6 01 	lds	r24, 0x01D6
     624:	90 91 d7 01 	lds	r25, 0x01D7
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	09 f4       	brne	.+2      	; 0x62e <print_station+0x122>
     62c:	42 c0       	rjmp	.+132    	; 0x6b2 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     62e:	84 e3       	ldi	r24, 0x34	; 52
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     636:	e0 91 75 03 	lds	r30, 0x0375
     63a:	f0 91 76 03 	lds	r31, 0x0376
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	64 89       	ldd	r22, Z+20	; 0x14
     644:	75 89       	ldd	r23, Z+21	; 0x15
     646:	86 89       	ldd	r24, Z+22	; 0x16
     648:	97 89       	ldd	r25, Z+23	; 0x17
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <string_write_float>
     652:	83 e2       	ldi	r24, 0x23	; 35
     654:	94 ef       	ldi	r25, 0xF4	; 244
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <print_station+0x14a>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <print_station+0x150>
     65c:	00 00       	nop
     65e:	87 e8       	ldi	r24, 0x87	; 135
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    if (op_mode==MD_UPDATE)
     666:	80 91 d6 01 	lds	r24, 0x01D6
     66a:	90 91 d7 01 	lds	r25, 0x01D7
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	01 f1       	breq	.+64     	; 0x6b2 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     672:	8a e3       	ldi	r24, 0x3A	; 58
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     67a:	e0 91 75 03 	lds	r30, 0x0375
     67e:	f0 91 76 03 	lds	r31, 0x0376
     682:	ec 0f       	add	r30, r28
     684:	fd 1f       	adc	r31, r29
     686:	60 8d       	ldd	r22, Z+24	; 0x18
     688:	71 8d       	ldd	r23, Z+25	; 0x19
     68a:	82 8d       	ldd	r24, Z+26	; 0x1a
     68c:	93 8d       	ldd	r25, Z+27	; 0x1b
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <string_write_float>
     696:	83 e2       	ldi	r24, 0x23	; 35
     698:	94 ef       	ldi	r25, 0xF4	; 244
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <print_station+0x18e>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <print_station+0x194>
     6a0:	00 00       	nop
     6a2:	87 e8       	ldi	r24, 0x87	; 135
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    if (op_mode==MD_UPDATE)
     6aa:	80 91 d6 01 	lds	r24, 0x01D6
     6ae:	90 91 d7 01 	lds	r25, 0x01D7
        return;
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <detectSerialStart>:
//---- UPDATE UTILITIES ----//

//catch the serial update start sequence
int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     6bc:	80 91 dc 01 	lds	r24, 0x01DC
     6c0:	90 91 01 01 	lds	r25, 0x0101
     6c4:	89 13       	cpse	r24, r25
     6c6:	0c c0       	rjmp	.+24     	; 0x6e0 <detectSerialStart+0x24>
     6c8:	20 91 dd 01 	lds	r18, 0x01DD
     6cc:	28 13       	cpse	r18, r24
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <detectSerialStart+0x24>
     6d0:	30 91 de 01 	lds	r19, 0x01DE
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	32 17       	cp	r19, r18
     6da:	21 f0       	breq	.+8      	; 0x6e4 <detectSerialStart+0x28>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret
        return 1;
    else
        return 0;
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
}
     6e4:	08 95       	ret

000006e6 <__vector_28>:
//---- FUNCTION DEFINITIONS ----//

//---- device configuration ----//

//serial receive interrupt behavior
ISR(USART1_RX_vect){
     6e6:	1f 92       	push	r1
     6e8:	0f 92       	push	r0
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	0f 92       	push	r0
     6ee:	11 24       	eor	r1, r1
     6f0:	0b b6       	in	r0, 0x3b	; 59
     6f2:	0f 92       	push	r0
     6f4:	2f 93       	push	r18
     6f6:	3f 93       	push	r19
     6f8:	4f 93       	push	r20
     6fa:	5f 93       	push	r21
     6fc:	6f 93       	push	r22
     6fe:	7f 93       	push	r23
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     70c:	80 91 dd 01 	lds	r24, 0x01DD
     710:	80 93 de 01 	sts	0x01DE, r24
    serial_history[1] = serial_history[0];
     714:	80 91 dc 01 	lds	r24, 0x01DC
     718:	80 93 dd 01 	sts	0x01DD, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     71c:	80 91 ce 00 	lds	r24, 0x00CE
     720:	80 93 dc 01 	sts	0x01DC, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     724:	80 91 d6 01 	lds	r24, 0x01D6
     728:	90 91 d7 01 	lds	r25, 0x01D7
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	69 f4       	brne	.+26     	; 0x74a <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     730:	e0 91 df 01 	lds	r30, 0x01DF
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 91 dc 01 	lds	r24, 0x01DC
     73a:	e9 58       	subi	r30, 0x89	; 137
     73c:	fc 4f       	sbci	r31, 0xFC	; 252
     73e:	80 83       	st	Z, r24
        rxWritePos++;
     740:	80 91 df 01 	lds	r24, 0x01DF
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 93 df 01 	sts	0x01DF, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     74a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <detectSerialStart>
     74e:	89 2b       	or	r24, r25
     750:	31 f0       	breq	.+12     	; 0x75e <__vector_28+0x78>
        op_mode = MD_UPDATE;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 d7 01 	sts	0x01D7, r25
     75a:	80 93 d6 01 	sts	0x01D6, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     75e:	80 91 df 01 	lds	r24, 0x01DF
     762:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     764:	10 92 df 01 	sts	0x01DF, r1
    }
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0b be       	out	0x3b, r0	; 59
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <detectSerialEnd>:
}

//catch the serial update end sequence
int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     78e:	80 91 dc 01 	lds	r24, 0x01DC
     792:	90 91 00 01 	lds	r25, 0x0100
     796:	89 13       	cpse	r24, r25
     798:	0c c0       	rjmp	.+24     	; 0x7b2 <detectSerialEnd+0x24>
     79a:	20 91 dd 01 	lds	r18, 0x01DD
     79e:	28 13       	cpse	r18, r24
     7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <detectSerialEnd+0x24>
     7a2:	30 91 de 01 	lds	r19, 0x01DE
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	32 17       	cp	r19, r18
     7ac:	21 f0       	breq	.+8      	; 0x7b6 <detectSerialEnd+0x28>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	08 95       	ret
        return 1;
    else
        return 0;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
}
     7b6:	08 95       	ret

000007b8 <getChar>:
//read a char from the serial update buffer
char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     7b8:	e0 91 e0 01 	lds	r30, 0x01E0
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	e9 58       	subi	r30, 0x89	; 137
     7c0:	fc 4f       	sbci	r31, 0xFC	; 252
     7c2:	80 81       	ld	r24, Z
     
    rxReadPos++;
     7c4:	90 91 e0 01 	lds	r25, 0x01E0
     7c8:	9f 5f       	subi	r25, 0xFF	; 255
     7ca:	90 93 e0 01 	sts	0x01E0, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     7ce:	90 91 e0 01 	lds	r25, 0x01E0
     7d2:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     7d4:	10 92 e0 01 	sts	0x01E0, r1
    }
    
    return ret;
}
     7d8:	08 95       	ret

000007da <peekChar>:
//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     7da:	90 91 e0 01 	lds	r25, 0x01E0
     7de:	80 91 df 01 	lds	r24, 0x01DF
     7e2:	98 17       	cp	r25, r24
     7e4:	39 f0       	breq	.+14     	; 0x7f4 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     7e6:	e0 91 e0 01 	lds	r30, 0x01E0
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	e9 58       	subi	r30, 0x89	; 137
     7ee:	fc 4f       	sbci	r31, 0xFC	; 252
     7f0:	80 81       	ld	r24, Z
     7f2:	08 95       	ret
}

//peek at the next char in the serial update buffer
char peekChar(void)
{
    char ret = '\0';
     7f4:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     7f6:	08 95       	ret

000007f8 <terminate_serial>:

//terminate the serial update with a certain status
void terminate_serial(int flag)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     7fe:	10 92 d7 01 	sts	0x01D7, r1
     802:	10 92 d6 01 	sts	0x01D6, r1
    updating = 0;
     806:	10 92 d3 01 	sts	0x01D3, r1
     80a:	10 92 d2 01 	sts	0x01D2, r1
    serial_timer = 0;
     80e:	10 92 d8 01 	sts	0x01D8, r1
     812:	10 92 d9 01 	sts	0x01D9, r1
     816:	10 92 da 01 	sts	0x01DA, r1
     81a:	10 92 db 01 	sts	0x01DB, r1

    //import the new database
    lcd_init();
     81e:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>

    if (flag==FL_SUCCESS)
     822:	20 97       	sbiw	r28, 0x00	; 0
     824:	19 f4       	brne	.+6      	; 0x82c <terminate_serial+0x34>
        string_write("syncing\nmemory ...");
     826:	81 e4       	ldi	r24, 0x41	; 65
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	02 c0       	rjmp	.+4      	; 0x830 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     82c:	84 e5       	ldi	r24, 0x54	; 84
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>

    database_load();
     834:	0e 94 cf 00 	call	0x19e	; 0x19e <database_load>
     838:	2f e7       	ldi	r18, 0x7F	; 127
     83a:	8a e1       	ldi	r24, 0x1A	; 26
     83c:	96 e0       	ldi	r25, 0x06	; 6
     83e:	21 50       	subi	r18, 0x01	; 1
     840:	80 40       	sbci	r24, 0x00	; 0
     842:	90 40       	sbci	r25, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <terminate_serial+0x46>
     846:	00 c0       	rjmp	.+0      	; 0x848 <terminate_serial+0x50>
     848:	00 00       	nop
    _delay_ms(2000);

    if (flag==FL_SUCCESS)
     84a:	cd 2b       	or	r28, r29
     84c:	19 f4       	brne	.+6      	; 0x854 <terminate_serial+0x5c>
        string_write("\nupdate complete\n");
     84e:	87 e6       	ldi	r24, 0x67	; 103
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	02 c0       	rjmp	.+4      	; 0x858 <terminate_serial+0x60>
    else
        string_write("\nupdate failed\n");
     854:	89 e7       	ldi	r24, 0x79	; 121
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     85c:	2f ed       	ldi	r18, 0xDF	; 223
     85e:	83 e9       	ldi	r24, 0x93	; 147
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <terminate_serial+0x6a>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <terminate_serial+0x74>
     86c:	00 00       	nop

    _delay_ms(1500);
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <check_database_integrity>:

//check for database corruption
void check_database_integrity(void)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     878:	20 91 71 03 	lds	r18, 0x0371
     87c:	30 91 72 03 	lds	r19, 0x0372
     880:	e0 91 75 03 	lds	r30, 0x0375
     884:	f0 91 76 03 	lds	r31, 0x0376
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	bc f4       	brge	.+46     	; 0x8c0 <check_database_integrity+0x4c>
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<strlen(call); j++)
     892:	df 01       	movw	r26, r30
     894:	0d 90       	ld	r0, X+
     896:	00 20       	and	r0, r0
     898:	e9 f7       	brne	.-6      	; 0x894 <check_database_integrity+0x20>
     89a:	11 97       	sbiw	r26, 0x01	; 1
     89c:	ef 01       	movw	r28, r30
     89e:	ca 17       	cp	r28, r26
     8a0:	db 07       	cpc	r29, r27
     8a2:	59 f0       	breq	.+22     	; 0x8ba <check_database_integrity+0x46>
        {
            //indicate corruption if any station callsigns contain abnormal characters
            if ((call[j] < 33)||(call[j] > 126))
     8a4:	49 91       	ld	r20, Y+
     8a6:	41 52       	subi	r20, 0x21	; 33
     8a8:	4e 35       	cpi	r20, 0x5E	; 94
     8aa:	c8 f3       	brcs	.-14     	; 0x89e <check_database_integrity+0x2a>
            {
                database_corrupted = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 d1 01 	sts	0x01D1, r25
     8b4:	80 93 d0 01 	sts	0x01D0, r24
                return;
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <check_database_integrity+0x4c>

//check for database corruption
void check_database_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	7c 96       	adiw	r30, 0x1c	; 28
     8be:	e6 cf       	rjmp	.-52     	; 0x88c <check_database_integrity+0x18>
                database_corrupted = 1;
                return;
            }
        }
    }
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <print_eeprom_contents>:

//---- MODES OF OPERATION ----//

//print the EEPROM contents for an address range
void print_eeprom_contents(int start_addr, int end_addr)
{
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
     8d0:	8b 01       	movw	r16, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     8d2:	6f 3f       	cpi	r22, 0xFF	; 255
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	78 07       	cpc	r23, r24
     8d8:	61 f4       	brne	.+24     	; 0x8f2 <print_eeprom_contents+0x2c>
        end_addr = 1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE;
     8da:	80 91 71 03 	lds	r24, 0x0371
     8de:	90 91 72 03 	lds	r25, 0x0372
     8e2:	2c e1       	ldi	r18, 0x1C	; 28
     8e4:	28 9f       	mul	r18, r24
     8e6:	80 01       	movw	r16, r0
     8e8:	29 9f       	mul	r18, r25
     8ea:	10 0d       	add	r17, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	0b 59       	subi	r16, 0x9B	; 155
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255

    lcd_init();
     8f2:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     8f6:	c0 17       	cp	r28, r16
     8f8:	d1 07       	cpc	r29, r17
     8fa:	b4 f4       	brge	.+44     	; 0x928 <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE) return;
     8fc:	80 91 d6 01 	lds	r24, 0x01D6
     900:	90 91 d7 01 	lds	r25, 0x01D7
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	81 f0       	breq	.+32     	; 0x928 <print_eeprom_contents+0x62>
}

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     908:	ce 01       	movw	r24, r28
     90a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__eerd_byte_m1284p>

    for (i=start_addr; i<end_addr; i++)
    {
        if (op_mode==MD_UPDATE) return;
        one_byte = my_eeprom_read_char(i);
        if (one_byte == '\0')
     90e:	81 11       	cpse	r24, r1
     910:	01 c0       	rjmp	.+2      	; 0x914 <print_eeprom_contents+0x4e>
            one_byte = '?';
     912:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     914:	0e 94 35 07 	call	0xe6a	; 0xe6a <char_write>
     918:	87 ea       	ldi	r24, 0xA7	; 167
     91a:	91 e6       	ldi	r25, 0x61	; 97
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <print_eeprom_contents+0x56>
     920:	00 c0       	rjmp	.+0      	; 0x922 <print_eeprom_contents+0x5c>
     922:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     924:	21 96       	adiw	r28, 0x01	; 1
     926:	e7 cf       	rjmp	.-50     	; 0x8f6 <print_eeprom_contents+0x30>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	08 95       	ret

00000932 <print_eeprom_station_contents>:

//print the EEPROM contents for all stations
void print_eeprom_station_contents(void)
{
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     938:	c0 e0       	ldi	r28, 0x00	; 0
     93a:	d0 e0       	ldi	r29, 0x00	; 0
     93c:	1c e1       	ldi	r17, 0x1C	; 28
     93e:	20 91 71 03 	lds	r18, 0x0371
     942:	30 91 72 03 	lds	r19, 0x0372
     946:	12 9f       	mul	r17, r18
     948:	c0 01       	movw	r24, r0
     94a:	13 9f       	mul	r17, r19
     94c:	90 0d       	add	r25, r0
     94e:	11 24       	eor	r1, r1
     950:	c8 17       	cp	r28, r24
     952:	d9 07       	cpc	r29, r25
     954:	c4 f4       	brge	.+48     	; 0x986 <print_eeprom_station_contents+0x54>
    {
        if (op_mode==MD_UPDATE) return;
     956:	80 91 d6 01 	lds	r24, 0x01D6
     95a:	90 91 d7 01 	lds	r25, 0x01D7
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	91 f0       	breq	.+36     	; 0x986 <print_eeprom_station_contents+0x54>
}

//read a char from an EEPROM address
char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     962:	ce 01       	movw	r24, r28
     964:	8b 59       	subi	r24, 0x9B	; 155
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__eerd_byte_m1284p>

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
    {
        if (op_mode==MD_UPDATE) return;
        one_byte = my_eeprom_read_char(start+i);
        if (one_byte == '\0')
     96c:	81 11       	cpse	r24, r1
     96e:	01 c0       	rjmp	.+2      	; 0x972 <print_eeprom_station_contents+0x40>
            one_byte = '?';
     970:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     972:	0e 94 35 07 	call	0xe6a	; 0xe6a <char_write>
     976:	87 ea       	ldi	r24, 0xA7	; 167
     978:	91 e6       	ldi	r25, 0x61	; 97
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <print_eeprom_station_contents+0x48>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <print_eeprom_station_contents+0x4e>
     980:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     982:	21 96       	adiw	r28, 0x01	; 1
     984:	dc cf       	rjmp	.-72     	; 0x93e <print_eeprom_station_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	08 95       	ret

0000098e <print_all_known_stations>:

//print the information held for all stations to the screen
void print_all_known_stations(void)
{
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
    int i;
    lcd_init();
     992:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
    string_write_int(num_stations,3);
     996:	63 e0       	ldi	r22, 0x03	; 3
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 91 71 03 	lds	r24, 0x0371
     99e:	90 91 72 03 	lds	r25, 0x0372
     9a2:	0e 94 c2 01 	call	0x384	; 0x384 <string_write_int>
    string_write(" known\nstations");
     9a6:	89 e8       	ldi	r24, 0x89	; 137
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     9ae:	2f e7       	ldi	r18, 0x7F	; 127
     9b0:	8a e1       	ldi	r24, 0x1A	; 26
     9b2:	96 e0       	ldi	r25, 0x06	; 6
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	80 40       	sbci	r24, 0x00	; 0
     9b8:	90 40       	sbci	r25, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <print_all_known_stations+0x26>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <print_all_known_stations+0x30>
     9be:	00 00       	nop

    _delay_ms(2000);

    if (op_mode==MD_UPDATE) return;
     9c0:	80 91 d6 01 	lds	r24, 0x01D6
     9c4:	90 91 d7 01 	lds	r25, 0x01D7
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	11 f1       	breq	.+68     	; 0xa10 <print_all_known_stations+0x82>
     9cc:	c0 e0       	ldi	r28, 0x00	; 0
     9ce:	d0 e0       	ldi	r29, 0x00	; 0

    for (i=0; i<num_stations; i++)
     9d0:	80 91 71 03 	lds	r24, 0x0371
     9d4:	90 91 72 03 	lds	r25, 0x0372
     9d8:	c8 17       	cp	r28, r24
     9da:	d9 07       	cpc	r29, r25
     9dc:	cc f4       	brge	.+50     	; 0xa10 <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
     9de:	80 91 d6 01 	lds	r24, 0x01D6
     9e2:	90 91 d7 01 	lds	r25, 0x01D7
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	99 f0       	breq	.+38     	; 0xa10 <print_all_known_stations+0x82>

        lcd_init();
     9ea:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
        print_station(i);
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 94 86 02 	call	0x50c	; 0x50c <print_station>

        if (op_mode==MD_UPDATE) return;
     9f4:	80 91 d6 01 	lds	r24, 0x01D6
     9f8:	90 91 d7 01 	lds	r25, 0x01D7
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	41 f0       	breq	.+16     	; 0xa10 <print_all_known_stations+0x82>
     a00:	8f e4       	ldi	r24, 0x4F	; 79
     a02:	93 ec       	ldi	r25, 0xC3	; 195
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <print_all_known_stations+0x76>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <print_all_known_stations+0x7c>
     a0a:	00 00       	nop

    _delay_ms(2000);

    if (op_mode==MD_UPDATE) return;

    for (i=0; i<num_stations; i++)
     a0c:	21 96       	adiw	r28, 0x01	; 1
     a0e:	e0 cf       	rjmp	.-64     	; 0x9d0 <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <print_all_callsigns>:

//quickly print all known callsigns to the screen
void print_all_callsigns(void)
{
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
    int i;
    lcd_init();
     a1e:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
    string_write_int(num_stations,3);
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 91 71 03 	lds	r24, 0x0371
     a2a:	90 91 72 03 	lds	r25, 0x0372
     a2e:	0e 94 c2 01 	call	0x384	; 0x384 <string_write_int>
    string_write(" known\nstations");
     a32:	89 e8       	ldi	r24, 0x89	; 137
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     a3a:	2f e7       	ldi	r18, 0x7F	; 127
     a3c:	8a e1       	ldi	r24, 0x1A	; 26
     a3e:	96 e0       	ldi	r25, 0x06	; 6
     a40:	21 50       	subi	r18, 0x01	; 1
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <print_all_callsigns+0x2a>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <print_all_callsigns+0x34>
     a4a:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     a4c:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
    string_write("\n");
     a50:	87 e8       	ldi	r24, 0x87	; 135
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>

    if (op_mode==MD_UPDATE) return;
     a58:	80 91 d6 01 	lds	r24, 0x01D6
     a5c:	90 91 d7 01 	lds	r25, 0x01D7
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	81 f1       	breq	.+96     	; 0xac4 <print_all_callsigns+0xae>
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d0 e0       	ldi	r29, 0x00	; 0

    for (i=0; i<num_stations; i++)
     a68:	80 91 71 03 	lds	r24, 0x0371
     a6c:	90 91 72 03 	lds	r25, 0x0372
     a70:	c8 17       	cp	r28, r24
     a72:	d9 07       	cpc	r29, r25
     a74:	3c f5       	brge	.+78     	; 0xac4 <print_all_callsigns+0xae>
    {
        if (op_mode==MD_UPDATE) return;
     a76:	80 91 d6 01 	lds	r24, 0x01D6
     a7a:	90 91 d7 01 	lds	r25, 0x01D7
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	09 f1       	breq	.+66     	; 0xac4 <print_all_callsigns+0xae>

         string_write("\n"); string_write_int(i+1,3); string_write(": "); print_callsign(i);
     a82:	87 e8       	ldi	r24, 0x87	; 135
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     a8a:	8e 01       	movw	r16, r28
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	c8 01       	movw	r24, r16
     a96:	0e 94 c2 01 	call	0x384	; 0x384 <string_write_int>
     a9a:	81 e3       	ldi	r24, 0x31	; 49
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 66 02 	call	0x4cc	; 0x4cc <print_callsign>

        if (op_mode==MD_UPDATE) return;
     aa8:	80 91 d6 01 	lds	r24, 0x01D6
     aac:	90 91 d7 01 	lds	r25, 0x01D7
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	41 f0       	breq	.+16     	; 0xac4 <print_all_callsigns+0xae>
     ab4:	83 e2       	ldi	r24, 0x23	; 35
     ab6:	94 ef       	ldi	r25, 0xF4	; 244
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <print_all_callsigns+0xa2>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <print_all_callsigns+0xa8>
     abe:	00 00       	nop
    lcd_init();
    string_write("\n");

    if (op_mode==MD_UPDATE) return;

    for (i=0; i<num_stations; i++)
     ac0:	e8 01       	movw	r28, r16
     ac2:	d2 cf       	rjmp	.-92     	; 0xa68 <print_all_callsigns+0x52>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <wait_for_update>:

void wait_for_update(void)
{
    lcd_init();
     ace:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
    string_write("update required\n...feed me...");
     ad2:	89 e9       	ldi	r24, 0x99	; 153
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
    while (1)
    {
        if (op_mode==MD_UPDATE) return;
     ada:	80 91 d6 01 	lds	r24, 0x01D6
     ade:	90 91 d7 01 	lds	r25, 0x01D7
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	d1 f7       	brne	.-12     	; 0xada <wait_for_update+0xc>
    }
     ae6:	08 95       	ret

00000ae8 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     ae8:	12 9a       	sbi	0x02, 2	; 2
     aea:	81 ee       	ldi	r24, 0xE1	; 225
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <datarw+0x6>
     af2:	00 c0       	rjmp	.+0      	; 0xaf4 <datarw+0xc>
     af4:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     af6:	12 98       	cbi	0x02, 2	; 2
     af8:	08 95       	ret

00000afa <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     afa:	10 92 74 03 	sts	0x0374, r1
     afe:	10 92 73 03 	sts	0x0373, r1
    line_num = 1;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 03 01 	sts	0x0103, r25
     b0a:	80 93 02 01 	sts	0x0102, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     b0e:	81 b1       	in	r24, 0x01	; 1
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	81 b9       	out	0x01, r24	; 1
     b14:	87 e8       	ldi	r24, 0x87	; 135
     b16:	93 e1       	ldi	r25, 0x13	; 19
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <lcd_init+0x1e>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <lcd_init+0x24>
     b1e:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     b20:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     b22:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     b24:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     b26:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b28:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     b2a:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     b2c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     b2e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     b32:	81 ee       	ldi	r24, 0xE1	; 225
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <lcd_init+0x3c>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <lcd_init+0x42>
     b3c:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     b3e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     b42:	89 ef       	ldi	r24, 0xF9	; 249
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <lcd_init+0x4c>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <lcd_init+0x52>
     b4c:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     b4e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     b52:	89 ef       	ldi	r24, 0xF9	; 249
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <lcd_init+0x5c>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <lcd_init+0x62>
     b5c:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     b5e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b60:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     b62:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b64:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b66:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     b6a:	89 ef       	ldi	r24, 0xF9	; 249
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <lcd_init+0x74>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <lcd_init+0x7a>
     b74:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     b76:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b78:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     b7a:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b7c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b7e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     b82:	89 ef       	ldi	r24, 0xF9	; 249
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <lcd_init+0x8c>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <lcd_init+0x92>
     b8c:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     b8e:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b90:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     b92:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b94:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b96:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     b9a:	89 ef       	ldi	r24, 0xF9	; 249
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <lcd_init+0xa4>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <lcd_init+0xaa>
     ba4:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     ba6:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     ba8:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     baa:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     bac:	13 98       	cbi	0x02, 3	; 2
    datarw();
     bae:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     bb2:	89 ef       	ldi	r24, 0xF9	; 249
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <lcd_init+0xbc>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <lcd_init+0xc2>
     bbc:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     bbe:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     bc0:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     bc2:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     bc4:	13 98       	cbi	0x02, 3	; 2
    datarw();
     bc6:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     bca:	89 ef       	ldi	r24, 0xF9	; 249
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <lcd_init+0xd4>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <lcd_init+0xda>
     bd4:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     bd6:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     bd8:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     bda:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     bdc:	13 98       	cbi	0x02, 3	; 2
    datarw();
     bde:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     be2:	89 ef       	ldi	r24, 0xF9	; 249
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <lcd_init+0xec>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <lcd_init+0xf2>
     bec:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     bee:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     bf0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     bf2:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     bf4:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     bf6:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     bfa:	89 ef       	ldi	r24, 0xF9	; 249
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <lcd_init+0x104>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <lcd_init+0x10a>
     c04:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     c06:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     c08:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     c0a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     c0c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     c0e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     c12:	89 ef       	ldi	r24, 0xF9	; 249
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <lcd_init+0x11c>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <lcd_init+0x122>
     c1c:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     c1e:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     c20:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     c22:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     c24:	13 98       	cbi	0x02, 3	; 2
    datarw();
     c26:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     c2a:	89 ef       	ldi	r24, 0xF9	; 249
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <lcd_init+0x134>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <lcd_init+0x13a>
     c34:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     c36:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     c38:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     c3a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     c3c:	13 98       	cbi	0x02, 3	; 2
    datarw();
     c3e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     c42:	89 ef       	ldi	r24, 0xF9	; 249
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <lcd_init+0x14c>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <lcd_init+0x152>
     c4c:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     c4e:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     c50:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     c52:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     c54:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     c56:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     c5a:	89 ef       	ldi	r24, 0xF9	; 249
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0x164>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <lcd_init+0x16a>
     c64:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	08 95       	ret

00000c6c <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	11 f4       	brne	.+4      	; 0xc74 <letterwrite+0x8>
     c70:	16 9a       	sbi	0x02, 6	; 2
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     c74:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     c76:	61 30       	cpi	r22, 0x01	; 1
     c78:	71 05       	cpc	r23, r1
     c7a:	11 f4       	brne	.+4      	; 0xc80 <letterwrite+0x14>
     c7c:	15 9a       	sbi	0x02, 5	; 2
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     c80:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     c82:	41 30       	cpi	r20, 0x01	; 1
     c84:	51 05       	cpc	r21, r1
     c86:	11 f4       	brne	.+4      	; 0xc8c <letterwrite+0x20>
     c88:	14 9a       	sbi	0x02, 4	; 2
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     c8c:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     c8e:	21 30       	cpi	r18, 0x01	; 1
     c90:	31 05       	cpc	r19, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <letterwrite+0x2c>
     c94:	13 9a       	sbi	0x02, 3	; 2
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     c98:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     c9a:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
     c9e:	89 ef       	ldi	r24, 0xF9	; 249
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <letterwrite+0x36>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <letterwrite+0x3c>
     ca8:	00 00       	nop
     caa:	08 95       	ret

00000cac <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     cb2:	81 b1       	in	r24, 0x01	; 1
     cb4:	87 78       	andi	r24, 0x87	; 135
     cb6:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     cb8:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     cba:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     cbc:	12 9a       	sbi	0x02, 2	; 2
     cbe:	81 ee       	ldi	r24, 0xE1	; 225
     cc0:	94 e0       	ldi	r25, 0x04	; 4
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <instruction_read+0x16>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <instruction_read+0x1c>
     cc8:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     cca:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     ccc:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     cce:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     cd0:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     cd2:	12 98       	cbi	0x02, 2	; 2
     cd4:	e9 ef       	ldi	r30, 0xF9	; 249
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <instruction_read+0x2c>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <instruction_read+0x32>
     cde:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     ce0:	12 9a       	sbi	0x02, 2	; 2
     ce2:	e1 ee       	ldi	r30, 0xE1	; 225
     ce4:	f4 e0       	ldi	r31, 0x04	; 4
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <instruction_read+0x3a>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <instruction_read+0x40>
     cec:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     cee:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     cf0:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     cf2:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     cf4:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     cf6:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	26 e0       	ldi	r18, 0x06	; 6
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	2a 95       	dec	r18
     d02:	e1 f7       	brne	.-8      	; 0xcfc <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     d04:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     d06:	d0 e0       	ldi	r29, 0x00	; 0
     d08:	35 e0       	ldi	r19, 0x05	; 5
     d0a:	cc 0f       	add	r28, r28
     d0c:	dd 1f       	adc	r29, r29
     d0e:	3a 95       	dec	r19
     d10:	e1 f7       	brne	.-8      	; 0xd0a <instruction_read+0x5e>
     d12:	8c 2b       	or	r24, r28
     d14:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     d16:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     d18:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     d1a:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	54 e0       	ldi	r21, 0x04	; 4
     d20:	aa 0f       	add	r26, r26
     d22:	bb 1f       	adc	r27, r27
     d24:	5a 95       	dec	r21
     d26:	e1 f7       	brne	.-8      	; 0xd20 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     d28:	8a 2b       	or	r24, r26
     d2a:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     d2c:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	73 e0       	ldi	r23, 0x03	; 3
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	7a 95       	dec	r23
     d38:	e1 f7       	brne	.-8      	; 0xd32 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     d3a:	8e 2b       	or	r24, r30
     d3c:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     d3e:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     d4a:	86 2b       	or	r24, r22
     d4c:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     d4e:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     d50:	51 b1       	in	r21, 0x01	; 1
     d52:	58 67       	ori	r21, 0x78	; 120
     d54:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     d56:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     d58:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     d5a:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	44 0f       	add	r20, r20
     d60:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     d62:	84 2b       	or	r24, r20
     d64:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     d66:	16 fb       	bst	r17, 6
     d68:	22 27       	eor	r18, r18
     d6a:	20 f9       	bld	r18, 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     d6e:	36 95       	lsr	r19
     d70:	32 2f       	mov	r19, r18
     d72:	22 27       	eor	r18, r18
     d74:	37 95       	ror	r19
     d76:	27 95       	ror	r18
}
     d78:	82 2b       	or	r24, r18
     d7a:	93 2b       	or	r25, r19
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	08 95       	ret

00000d84 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     d84:	0e 94 56 06 	call	0xcac	; 0xcac <instruction_read>
     d88:	8f 77       	andi	r24, 0x7F	; 127
     d8a:	99 27       	eor	r25, r25
    return address+1;
}
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	08 95       	ret

00000d90 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     d90:	89 2b       	or	r24, r25
     d92:	11 f4       	brne	.+4      	; 0xd98 <write_db74+0x8>
     d94:	16 98       	cbi	0x02, 6	; 2
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <write_db74+0xa>
    else PORTA |= _BV(DB7);
     d98:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     d9a:	67 2b       	or	r22, r23
     d9c:	11 f4       	brne	.+4      	; 0xda2 <write_db74+0x12>
     d9e:	15 98       	cbi	0x02, 5	; 2
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <write_db74+0x14>
    else PORTA |= _BV(DB6);
     da2:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     da4:	45 2b       	or	r20, r21
     da6:	11 f4       	brne	.+4      	; 0xdac <write_db74+0x1c>
     da8:	14 98       	cbi	0x02, 4	; 2
     daa:	01 c0       	rjmp	.+2      	; 0xdae <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     dac:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     dae:	23 2b       	or	r18, r19
     db0:	11 f4       	brne	.+4      	; 0xdb6 <write_db74+0x26>
     db2:	13 98       	cbi	0x02, 3	; 2
     db4:	08 95       	ret
    else PORTA |= _BV(DB4);
     db6:	13 9a       	sbi	0x02, 3	; 2
     db8:	08 95       	ret

00000dba <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     dc0:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     dc2:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     dc4:	28 2f       	mov	r18, r24
     dc6:	22 95       	swap	r18
     dc8:	21 70       	andi	r18, 0x01	; 1
     dca:	85 fb       	bst	r24, 5
     dcc:	44 27       	eor	r20, r20
     dce:	40 f9       	bld	r20, 0
     dd0:	86 fb       	bst	r24, 6
     dd2:	66 27       	eor	r22, r22
     dd4:	60 f9       	bld	r22, 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 c8 06 	call	0xd90	; 0xd90 <write_db74>
    datarw();
     de4:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     de8:	9e 01       	movw	r18, r28
     dea:	21 70       	andi	r18, 0x01	; 1
     dec:	33 27       	eor	r19, r19
     dee:	4c 2f       	mov	r20, r28
     df0:	46 95       	lsr	r20
     df2:	41 70       	andi	r20, 0x01	; 1
     df4:	c2 fb       	bst	r28, 2
     df6:	66 27       	eor	r22, r22
     df8:	60 f9       	bld	r22, 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	c3 fb       	bst	r28, 3
     e00:	88 27       	eor	r24, r24
     e02:	80 f9       	bld	r24, 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 c8 06 	call	0xd90	; 0xd90 <write_db74>
    datarw();
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     e0e:	0c 94 74 05 	jmp	0xae8	; 0xae8 <datarw>

00000e12 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     e12:	cf 93       	push	r28
     e14:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     e16:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     e18:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     e1a:	84 fb       	bst	r24, 4
     e1c:	22 27       	eor	r18, r18
     e1e:	20 f9       	bld	r18, 0
     e20:	85 fb       	bst	r24, 5
     e22:	44 27       	eor	r20, r20
     e24:	40 f9       	bld	r20, 0
     e26:	86 fb       	bst	r24, 6
     e28:	66 27       	eor	r22, r22
     e2a:	60 f9       	bld	r22, 0
     e2c:	88 1f       	adc	r24, r24
     e2e:	88 27       	eor	r24, r24
     e30:	88 1f       	adc	r24, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 c8 06 	call	0xd90	; 0xd90 <write_db74>
    datarw();
     e3e:	0e 94 74 05 	call	0xae8	; 0xae8 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     e42:	2c 2f       	mov	r18, r28
     e44:	21 70       	andi	r18, 0x01	; 1
     e46:	c1 fb       	bst	r28, 1
     e48:	44 27       	eor	r20, r20
     e4a:	40 f9       	bld	r20, 0
     e4c:	c2 fb       	bst	r28, 2
     e4e:	66 27       	eor	r22, r22
     e50:	60 f9       	bld	r22, 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	c3 fb       	bst	r28, 3
     e5a:	88 27       	eor	r24, r24
     e5c:	80 f9       	bld	r24, 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 c8 06 	call	0xd90	; 0xd90 <write_db74>
    datarw();
}
     e64:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     e66:	0c 94 74 05 	jmp	0xae8	; 0xae8 <datarw>

00000e6a <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     e6a:	cf 93       	push	r28
     e6c:	c8 2f       	mov	r28, r24
    chars_written++;
     e6e:	20 91 73 03 	lds	r18, 0x0373
     e72:	30 91 74 03 	lds	r19, 0x0374
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	30 93 74 03 	sts	0x0374, r19
     e7e:	20 93 73 03 	sts	0x0373, r18

    if ((chars_written==17)||(mychar=='\n'))
     e82:	21 31       	cpi	r18, 0x11	; 17
     e84:	31 05       	cpc	r19, r1
     e86:	31 f0       	breq	.+12     	; 0xe94 <char_write+0x2a>
     e88:	8a 30       	cpi	r24, 0x0A	; 10
     e8a:	21 f0       	breq	.+8      	; 0xe94 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     e8c:	8c 2f       	mov	r24, r28
    
}
     e8e:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     e90:	0c 94 09 07 	jmp	0xe12	; 0xe12 <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     e94:	20 91 02 01 	lds	r18, 0x0102
     e98:	30 91 03 01 	lds	r19, 0x0103
     e9c:	21 30       	cpi	r18, 0x01	; 1
     e9e:	31 05       	cpc	r19, r1
     ea0:	79 f4       	brne	.+30     	; 0xec0 <char_write+0x56>
        {
            set_ddram_address(0x40);
     ea2:	80 e4       	ldi	r24, 0x40	; 64
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 dd 06 	call	0xdba	; 0xdba <set_ddram_address>
            line_num = 2;
     eaa:	22 e0       	ldi	r18, 0x02	; 2
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	30 93 03 01 	sts	0x0103, r19
     eb2:	20 93 02 01 	sts	0x0102, r18
            chars_written = 0;
     eb6:	10 92 74 03 	sts	0x0374, r1
     eba:	10 92 73 03 	sts	0x0373, r1
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <char_write+0x60>
        }
        else if (line_num==2)
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	11 f4       	brne	.+4      	; 0xeca <char_write+0x60>
        {
            lcd_init();
     ec6:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
        }
    }

    if (mychar!='\n')
     eca:	ca 30       	cpi	r28, 0x0A	; 10
     ecc:	f9 f6       	brne	.-66     	; 0xe8c <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <string_write>:
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
     edc:	0e 94 c2 06 	call	0xd84	; 0xd84 <get_current_address>
     ee0:	8e 01       	movw	r16, r28
     ee2:	fe 01       	movw	r30, r28
     ee4:	01 90       	ld	r0, Z+
     ee6:	00 20       	and	r0, r0
     ee8:	e9 f7       	brne	.-6      	; 0xee4 <string_write+0x12>
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	ec 1b       	sub	r30, r28
     eee:	fd 0b       	sbc	r31, r29
     ef0:	c8 01       	movw	r24, r16
     ef2:	8c 1b       	sub	r24, r28
     ef4:	9d 0b       	sbc	r25, r29
     ef6:	8e 17       	cp	r24, r30
     ef8:	9f 07       	cpc	r25, r31
     efa:	40 f4       	brcc	.+16     	; 0xf0c <string_write+0x3a>
     efc:	f8 01       	movw	r30, r16
     efe:	81 91       	ld	r24, Z+
     f00:	8f 01       	movw	r16, r30
     f02:	0e 94 35 07 	call	0xe6a	; 0xe6a <char_write>
     f06:	0e 94 c2 06 	call	0xd84	; 0xd84 <get_current_address>
     f0a:	eb cf       	rjmp	.-42     	; 0xee2 <string_write+0x10>
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <main>:
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	0e 94 bd 00 	call	0x17a	; 0x17a <prepare_device>
     f24:	81 e4       	ldi	r24, 0x41	; 65
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     f2c:	0e 94 cf 00 	call	0x19e	; 0x19e <database_load>
     f30:	2f e3       	ldi	r18, 0x3F	; 63
     f32:	8d e0       	ldi	r24, 0x0D	; 13
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	80 40       	sbci	r24, 0x00	; 0
     f3a:	90 40       	sbci	r25, 0x00	; 0
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <main+0x20>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <main+0x2a>
     f40:	00 00       	nop
     f42:	02 e0       	ldi	r16, 0x02	; 2
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	e0 90 d6 01 	lds	r14, 0x01D6
     f4a:	f0 90 d7 01 	lds	r15, 0x01D7
     f4e:	e1 e0       	ldi	r30, 0x01	; 1
     f50:	ee 16       	cp	r14, r30
     f52:	f1 04       	cpc	r15, r1
     f54:	91 f0       	breq	.+36     	; 0xf7a <main+0x64>
     f56:	f2 e0       	ldi	r31, 0x02	; 2
     f58:	ef 16       	cp	r14, r31
     f5a:	f1 04       	cpc	r15, r1
     f5c:	59 f0       	breq	.+22     	; 0xf74 <main+0x5e>
     f5e:	ef 28       	or	r14, r15
     f60:	91 f7       	brne	.-28     	; 0xf46 <main+0x30>
     f62:	60 e2       	ldi	r22, 0x20	; 32
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <print_eeprom_contents>
     f6e:	0e 94 0b 05 	call	0xa16	; 0xa16 <print_all_callsigns>
     f72:	e9 cf       	rjmp	.-46     	; 0xf46 <main+0x30>
     f74:	0e 94 67 05 	call	0xace	; 0xace <wait_for_update>
     f78:	e6 cf       	rjmp	.-52     	; 0xf46 <main+0x30>
     f7a:	80 91 d2 01 	lds	r24, 0x01D2
     f7e:	90 91 d3 01 	lds	r25, 0x01D3
     f82:	89 2b       	or	r24, r25
     f84:	81 f4       	brne	.+32     	; 0xfa6 <main+0x90>
     f86:	0e 94 7d 05 	call	0xafa	; 0xafa <lcd_init>
     f8a:	87 eb       	ldi	r24, 0xB7	; 183
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 69 07 	call	0xed2	; 0xed2 <string_write>
     f92:	f0 92 d3 01 	sts	0x01D3, r15
     f96:	e0 92 d2 01 	sts	0x01D2, r14
     f9a:	10 92 d1 01 	sts	0x01D1, r1
     f9e:	10 92 d0 01 	sts	0x01D0, r1
     fa2:	0e 94 81 01 	call	0x302	; 0x302 <database_free>
     fa6:	90 91 e0 01 	lds	r25, 0x01E0
     faa:	80 91 df 01 	lds	r24, 0x01DF
     fae:	98 17       	cp	r25, r24
     fb0:	71 f1       	breq	.+92     	; 0x100e <main+0xf8>
     fb2:	10 92 d8 01 	sts	0x01D8, r1
     fb6:	10 92 d9 01 	sts	0x01D9, r1
     fba:	10 92 da 01 	sts	0x01DA, r1
     fbe:	10 92 db 01 	sts	0x01DB, r1
     fc2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <getChar>
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	0e 94 c7 03 	call	0x78e	; 0x78e <detectSerialEnd>
     fcc:	69 81       	ldd	r22, Y+1	; 0x01
     fce:	89 2b       	or	r24, r25
     fd0:	71 f0       	breq	.+28     	; 0xfee <main+0xd8>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <terminate_serial>
     fda:	0e 94 3a 04 	call	0x874	; 0x874 <check_database_integrity>
     fde:	80 91 d0 01 	lds	r24, 0x01D0
     fe2:	90 91 d1 01 	lds	r25, 0x01D1
     fe6:	89 2b       	or	r24, r25
     fe8:	09 f4       	brne	.+2      	; 0xfec <main+0xd6>
     fea:	ad cf       	rjmp	.-166    	; 0xf46 <main+0x30>
     fec:	33 c0       	rjmp	.+102    	; 0x1054 <main+0x13e>
     fee:	80 91 d4 01 	lds	r24, 0x01D4
     ff2:	90 91 d5 01 	lds	r25, 0x01D5
     ff6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__eewr_byte_m1284p>
     ffa:	80 91 d4 01 	lds	r24, 0x01D4
     ffe:	90 91 d5 01 	lds	r25, 0x01D5
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 d5 01 	sts	0x01D5, r25
    1008:	80 93 d4 01 	sts	0x01D4, r24
    100c:	9c cf       	rjmp	.-200    	; 0xf46 <main+0x30>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	60 91 d8 01 	lds	r22, 0x01D8
    101a:	70 91 d9 01 	lds	r23, 0x01D9
    101e:	80 91 da 01 	lds	r24, 0x01DA
    1022:	90 91 db 01 	lds	r25, 0x01DB
    1026:	0e 94 32 08 	call	0x1064	; 0x1064 <__addsf3>
    102a:	60 93 d8 01 	sts	0x01D8, r22
    102e:	70 93 d9 01 	sts	0x01D9, r23
    1032:	80 93 da 01 	sts	0x01DA, r24
    1036:	90 93 db 01 	sts	0x01DB, r25
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e5       	ldi	r19, 0x50	; 80
    103e:	43 e4       	ldi	r20, 0x43	; 67
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	0e 94 a8 09 	call	0x1350	; 0x1350 <__gesf2>
    1046:	18 16       	cp	r1, r24
    1048:	0c f0       	brlt	.+2      	; 0x104c <main+0x136>
    104a:	7d cf       	rjmp	.-262    	; 0xf46 <main+0x30>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <terminate_serial>
    1054:	0e 94 9c 01 	call	0x338	; 0x338 <whipe_eeprom>
    1058:	10 93 d7 01 	sts	0x01D7, r17
    105c:	00 93 d6 01 	sts	0x01D6, r16
    1060:	72 cf       	rjmp	.-284    	; 0xf46 <main+0x30>

00001062 <__subsf3>:
    1062:	50 58       	subi	r21, 0x80	; 128

00001064 <__addsf3>:
    1064:	bb 27       	eor	r27, r27
    1066:	aa 27       	eor	r26, r26
    1068:	0e d0       	rcall	.+28     	; 0x1086 <__addsf3x>
    106a:	21 c1       	rjmp	.+578    	; 0x12ae <__fp_round>
    106c:	12 d1       	rcall	.+548    	; 0x1292 <__fp_pscA>
    106e:	30 f0       	brcs	.+12     	; 0x107c <__addsf3+0x18>
    1070:	17 d1       	rcall	.+558    	; 0x12a0 <__fp_pscB>
    1072:	20 f0       	brcs	.+8      	; 0x107c <__addsf3+0x18>
    1074:	31 f4       	brne	.+12     	; 0x1082 <__addsf3+0x1e>
    1076:	9f 3f       	cpi	r25, 0xFF	; 255
    1078:	11 f4       	brne	.+4      	; 0x107e <__addsf3+0x1a>
    107a:	1e f4       	brtc	.+6      	; 0x1082 <__addsf3+0x1e>
    107c:	07 c1       	rjmp	.+526    	; 0x128c <__fp_nan>
    107e:	0e f4       	brtc	.+2      	; 0x1082 <__addsf3+0x1e>
    1080:	e0 95       	com	r30
    1082:	e7 fb       	bst	r30, 7
    1084:	d4 c0       	rjmp	.+424    	; 0x122e <__fp_inf>

00001086 <__addsf3x>:
    1086:	e9 2f       	mov	r30, r25
    1088:	23 d1       	rcall	.+582    	; 0x12d0 <__fp_split3>
    108a:	80 f3       	brcs	.-32     	; 0x106c <__addsf3+0x8>
    108c:	ba 17       	cp	r27, r26
    108e:	62 07       	cpc	r22, r18
    1090:	73 07       	cpc	r23, r19
    1092:	84 07       	cpc	r24, r20
    1094:	95 07       	cpc	r25, r21
    1096:	18 f0       	brcs	.+6      	; 0x109e <__addsf3x+0x18>
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__addsf3x+0x30>
    109a:	9e f5       	brtc	.+102    	; 0x1102 <__addsf3x+0x7c>
    109c:	52 c1       	rjmp	.+676    	; 0x1342 <__fp_zero>
    109e:	0e f4       	brtc	.+2      	; 0x10a2 <__addsf3x+0x1c>
    10a0:	e0 95       	com	r30
    10a2:	0b 2e       	mov	r0, r27
    10a4:	ba 2f       	mov	r27, r26
    10a6:	a0 2d       	mov	r26, r0
    10a8:	0b 01       	movw	r0, r22
    10aa:	b9 01       	movw	r22, r18
    10ac:	90 01       	movw	r18, r0
    10ae:	0c 01       	movw	r0, r24
    10b0:	ca 01       	movw	r24, r20
    10b2:	a0 01       	movw	r20, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	ff 27       	eor	r31, r31
    10b8:	59 1b       	sub	r21, r25
    10ba:	99 f0       	breq	.+38     	; 0x10e2 <__addsf3x+0x5c>
    10bc:	59 3f       	cpi	r21, 0xF9	; 249
    10be:	50 f4       	brcc	.+20     	; 0x10d4 <__addsf3x+0x4e>
    10c0:	50 3e       	cpi	r21, 0xE0	; 224
    10c2:	68 f1       	brcs	.+90     	; 0x111e <__addsf3x+0x98>
    10c4:	1a 16       	cp	r1, r26
    10c6:	f0 40       	sbci	r31, 0x00	; 0
    10c8:	a2 2f       	mov	r26, r18
    10ca:	23 2f       	mov	r18, r19
    10cc:	34 2f       	mov	r19, r20
    10ce:	44 27       	eor	r20, r20
    10d0:	58 5f       	subi	r21, 0xF8	; 248
    10d2:	f3 cf       	rjmp	.-26     	; 0x10ba <__addsf3x+0x34>
    10d4:	46 95       	lsr	r20
    10d6:	37 95       	ror	r19
    10d8:	27 95       	ror	r18
    10da:	a7 95       	ror	r26
    10dc:	f0 40       	sbci	r31, 0x00	; 0
    10de:	53 95       	inc	r21
    10e0:	c9 f7       	brne	.-14     	; 0x10d4 <__addsf3x+0x4e>
    10e2:	7e f4       	brtc	.+30     	; 0x1102 <__addsf3x+0x7c>
    10e4:	1f 16       	cp	r1, r31
    10e6:	ba 0b       	sbc	r27, r26
    10e8:	62 0b       	sbc	r22, r18
    10ea:	73 0b       	sbc	r23, r19
    10ec:	84 0b       	sbc	r24, r20
    10ee:	ba f0       	brmi	.+46     	; 0x111e <__addsf3x+0x98>
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	a1 f0       	breq	.+40     	; 0x111c <__addsf3x+0x96>
    10f4:	ff 0f       	add	r31, r31
    10f6:	bb 1f       	adc	r27, r27
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	c2 f7       	brpl	.-16     	; 0x10f0 <__addsf3x+0x6a>
    1100:	0e c0       	rjmp	.+28     	; 0x111e <__addsf3x+0x98>
    1102:	ba 0f       	add	r27, r26
    1104:	62 1f       	adc	r22, r18
    1106:	73 1f       	adc	r23, r19
    1108:	84 1f       	adc	r24, r20
    110a:	48 f4       	brcc	.+18     	; 0x111e <__addsf3x+0x98>
    110c:	87 95       	ror	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b7 95       	ror	r27
    1114:	f7 95       	ror	r31
    1116:	9e 3f       	cpi	r25, 0xFE	; 254
    1118:	08 f0       	brcs	.+2      	; 0x111c <__addsf3x+0x96>
    111a:	b3 cf       	rjmp	.-154    	; 0x1082 <__addsf3+0x1e>
    111c:	93 95       	inc	r25
    111e:	88 0f       	add	r24, r24
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__addsf3x+0x9e>
    1122:	99 27       	eor	r25, r25
    1124:	ee 0f       	add	r30, r30
    1126:	97 95       	ror	r25
    1128:	87 95       	ror	r24
    112a:	08 95       	ret

0000112c <__fixsfsi>:
    112c:	04 d0       	rcall	.+8      	; 0x1136 <__fixunssfsi>
    112e:	68 94       	set
    1130:	b1 11       	cpse	r27, r1
    1132:	08 c1       	rjmp	.+528    	; 0x1344 <__fp_szero>
    1134:	08 95       	ret

00001136 <__fixunssfsi>:
    1136:	d4 d0       	rcall	.+424    	; 0x12e0 <__fp_splitA>
    1138:	88 f0       	brcs	.+34     	; 0x115c <__fixunssfsi+0x26>
    113a:	9f 57       	subi	r25, 0x7F	; 127
    113c:	90 f0       	brcs	.+36     	; 0x1162 <__fixunssfsi+0x2c>
    113e:	b9 2f       	mov	r27, r25
    1140:	99 27       	eor	r25, r25
    1142:	b7 51       	subi	r27, 0x17	; 23
    1144:	a0 f0       	brcs	.+40     	; 0x116e <__fixunssfsi+0x38>
    1146:	d1 f0       	breq	.+52     	; 0x117c <__fixunssfsi+0x46>
    1148:	66 0f       	add	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	88 1f       	adc	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	1a f0       	brmi	.+6      	; 0x1158 <__fixunssfsi+0x22>
    1152:	ba 95       	dec	r27
    1154:	c9 f7       	brne	.-14     	; 0x1148 <__fixunssfsi+0x12>
    1156:	12 c0       	rjmp	.+36     	; 0x117c <__fixunssfsi+0x46>
    1158:	b1 30       	cpi	r27, 0x01	; 1
    115a:	81 f0       	breq	.+32     	; 0x117c <__fixunssfsi+0x46>
    115c:	f2 d0       	rcall	.+484    	; 0x1342 <__fp_zero>
    115e:	b1 e0       	ldi	r27, 0x01	; 1
    1160:	08 95       	ret
    1162:	ef c0       	rjmp	.+478    	; 0x1342 <__fp_zero>
    1164:	67 2f       	mov	r22, r23
    1166:	78 2f       	mov	r23, r24
    1168:	88 27       	eor	r24, r24
    116a:	b8 5f       	subi	r27, 0xF8	; 248
    116c:	39 f0       	breq	.+14     	; 0x117c <__fixunssfsi+0x46>
    116e:	b9 3f       	cpi	r27, 0xF9	; 249
    1170:	cc f3       	brlt	.-14     	; 0x1164 <__fixunssfsi+0x2e>
    1172:	86 95       	lsr	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	b3 95       	inc	r27
    117a:	d9 f7       	brne	.-10     	; 0x1172 <__fixunssfsi+0x3c>
    117c:	3e f4       	brtc	.+14     	; 0x118c <__fixunssfsi+0x56>
    117e:	90 95       	com	r25
    1180:	80 95       	com	r24
    1182:	70 95       	com	r23
    1184:	61 95       	neg	r22
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	08 95       	ret

0000118e <__floatunsisf>:
    118e:	e8 94       	clt
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <__floatsisf+0x12>

00001192 <__floatsisf>:
    1192:	97 fb       	bst	r25, 7
    1194:	3e f4       	brtc	.+14     	; 0x11a4 <__floatsisf+0x12>
    1196:	90 95       	com	r25
    1198:	80 95       	com	r24
    119a:	70 95       	com	r23
    119c:	61 95       	neg	r22
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8f 4f       	sbci	r24, 0xFF	; 255
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	99 23       	and	r25, r25
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <__floatsisf+0x40>
    11a8:	f9 2f       	mov	r31, r25
    11aa:	96 e9       	ldi	r25, 0x96	; 150
    11ac:	bb 27       	eor	r27, r27
    11ae:	93 95       	inc	r25
    11b0:	f6 95       	lsr	r31
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	b7 95       	ror	r27
    11ba:	f1 11       	cpse	r31, r1
    11bc:	f8 cf       	rjmp	.-16     	; 0x11ae <__floatsisf+0x1c>
    11be:	fa f4       	brpl	.+62     	; 0x11fe <__floatsisf+0x6c>
    11c0:	bb 0f       	add	r27, r27
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <__floatsisf+0x36>
    11c4:	60 ff       	sbrs	r22, 0
    11c6:	1b c0       	rjmp	.+54     	; 0x11fe <__floatsisf+0x6c>
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	8f 4f       	sbci	r24, 0xFF	; 255
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	16 c0       	rjmp	.+44     	; 0x11fe <__floatsisf+0x6c>
    11d2:	88 23       	and	r24, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <__floatsisf+0x48>
    11d6:	96 e9       	ldi	r25, 0x96	; 150
    11d8:	11 c0       	rjmp	.+34     	; 0x11fc <__floatsisf+0x6a>
    11da:	77 23       	and	r23, r23
    11dc:	21 f0       	breq	.+8      	; 0x11e6 <__floatsisf+0x54>
    11de:	9e e8       	ldi	r25, 0x8E	; 142
    11e0:	87 2f       	mov	r24, r23
    11e2:	76 2f       	mov	r23, r22
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <__floatsisf+0x5e>
    11e6:	66 23       	and	r22, r22
    11e8:	71 f0       	breq	.+28     	; 0x1206 <__floatsisf+0x74>
    11ea:	96 e8       	ldi	r25, 0x86	; 134
    11ec:	86 2f       	mov	r24, r22
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	2a f0       	brmi	.+10     	; 0x11fe <__floatsisf+0x6c>
    11f4:	9a 95       	dec	r25
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	da f7       	brpl	.-10     	; 0x11f4 <__floatsisf+0x62>
    11fe:	88 0f       	add	r24, r24
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	97 f9       	bld	r25, 7
    1206:	08 95       	ret

00001208 <floor>:
    1208:	85 d0       	rcall	.+266    	; 0x1314 <__fp_trunc>
    120a:	80 f0       	brcs	.+32     	; 0x122c <floor+0x24>
    120c:	9f 37       	cpi	r25, 0x7F	; 127
    120e:	40 f4       	brcc	.+16     	; 0x1220 <floor+0x18>
    1210:	91 11       	cpse	r25, r1
    1212:	0e f0       	brts	.+2      	; 0x1216 <floor+0xe>
    1214:	97 c0       	rjmp	.+302    	; 0x1344 <__fp_szero>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	9f eb       	ldi	r25, 0xBF	; 191
    121e:	08 95       	ret
    1220:	26 f4       	brtc	.+8      	; 0x122a <floor+0x22>
    1222:	1b 16       	cp	r1, r27
    1224:	61 1d       	adc	r22, r1
    1226:	71 1d       	adc	r23, r1
    1228:	81 1d       	adc	r24, r1
    122a:	07 c0       	rjmp	.+14     	; 0x123a <__fp_mintl>
    122c:	21 c0       	rjmp	.+66     	; 0x1270 <__fp_mpack>

0000122e <__fp_inf>:
    122e:	97 f9       	bld	r25, 7
    1230:	9f 67       	ori	r25, 0x7F	; 127
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	08 95       	ret

0000123a <__fp_mintl>:
    123a:	88 23       	and	r24, r24
    123c:	71 f4       	brne	.+28     	; 0x125a <__fp_mintl+0x20>
    123e:	77 23       	and	r23, r23
    1240:	21 f0       	breq	.+8      	; 0x124a <__fp_mintl+0x10>
    1242:	98 50       	subi	r25, 0x08	; 8
    1244:	87 2b       	or	r24, r23
    1246:	76 2f       	mov	r23, r22
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <__fp_mintl+0x1e>
    124a:	66 23       	and	r22, r22
    124c:	11 f4       	brne	.+4      	; 0x1252 <__fp_mintl+0x18>
    124e:	99 27       	eor	r25, r25
    1250:	0d c0       	rjmp	.+26     	; 0x126c <__fp_mintl+0x32>
    1252:	90 51       	subi	r25, 0x10	; 16
    1254:	86 2b       	or	r24, r22
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	2a f0       	brmi	.+10     	; 0x1266 <__fp_mintl+0x2c>
    125c:	9a 95       	dec	r25
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	da f7       	brpl	.-10     	; 0x125c <__fp_mintl+0x22>
    1266:	88 0f       	add	r24, r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__fp_mpack>:
    1270:	9f 3f       	cpi	r25, 0xFF	; 255
    1272:	31 f0       	breq	.+12     	; 0x1280 <__fp_mpack_finite+0xc>

00001274 <__fp_mpack_finite>:
    1274:	91 50       	subi	r25, 0x01	; 1
    1276:	20 f4       	brcc	.+8      	; 0x1280 <__fp_mpack_finite+0xc>
    1278:	87 95       	ror	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b7 95       	ror	r27
    1280:	88 0f       	add	r24, r24
    1282:	91 1d       	adc	r25, r1
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret

0000128c <__fp_nan>:
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	80 ec       	ldi	r24, 0xC0	; 192
    1290:	08 95       	ret

00001292 <__fp_pscA>:
    1292:	00 24       	eor	r0, r0
    1294:	0a 94       	dec	r0
    1296:	16 16       	cp	r1, r22
    1298:	17 06       	cpc	r1, r23
    129a:	18 06       	cpc	r1, r24
    129c:	09 06       	cpc	r0, r25
    129e:	08 95       	ret

000012a0 <__fp_pscB>:
    12a0:	00 24       	eor	r0, r0
    12a2:	0a 94       	dec	r0
    12a4:	12 16       	cp	r1, r18
    12a6:	13 06       	cpc	r1, r19
    12a8:	14 06       	cpc	r1, r20
    12aa:	05 06       	cpc	r0, r21
    12ac:	08 95       	ret

000012ae <__fp_round>:
    12ae:	09 2e       	mov	r0, r25
    12b0:	03 94       	inc	r0
    12b2:	00 0c       	add	r0, r0
    12b4:	11 f4       	brne	.+4      	; 0x12ba <__fp_round+0xc>
    12b6:	88 23       	and	r24, r24
    12b8:	52 f0       	brmi	.+20     	; 0x12ce <__fp_round+0x20>
    12ba:	bb 0f       	add	r27, r27
    12bc:	40 f4       	brcc	.+16     	; 0x12ce <__fp_round+0x20>
    12be:	bf 2b       	or	r27, r31
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <__fp_round+0x18>
    12c2:	60 ff       	sbrs	r22, 0
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <__fp_round+0x20>
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__fp_split3>:
    12d0:	57 fd       	sbrc	r21, 7
    12d2:	90 58       	subi	r25, 0x80	; 128
    12d4:	44 0f       	add	r20, r20
    12d6:	55 1f       	adc	r21, r21
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <__fp_splitA+0x10>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	71 f0       	breq	.+28     	; 0x12fa <__fp_splitA+0x1a>
    12de:	47 95       	ror	r20

000012e0 <__fp_splitA>:
    12e0:	88 0f       	add	r24, r24
    12e2:	97 fb       	bst	r25, 7
    12e4:	99 1f       	adc	r25, r25
    12e6:	61 f0       	breq	.+24     	; 0x1300 <__fp_splitA+0x20>
    12e8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ea:	79 f0       	breq	.+30     	; 0x130a <__fp_splitA+0x2a>
    12ec:	87 95       	ror	r24
    12ee:	08 95       	ret
    12f0:	12 16       	cp	r1, r18
    12f2:	13 06       	cpc	r1, r19
    12f4:	14 06       	cpc	r1, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	f2 cf       	rjmp	.-28     	; 0x12de <__fp_split3+0xe>
    12fa:	46 95       	lsr	r20
    12fc:	f1 df       	rcall	.-30     	; 0x12e0 <__fp_splitA>
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <__fp_splitA+0x30>
    1300:	16 16       	cp	r1, r22
    1302:	17 06       	cpc	r1, r23
    1304:	18 06       	cpc	r1, r24
    1306:	99 1f       	adc	r25, r25
    1308:	f1 cf       	rjmp	.-30     	; 0x12ec <__fp_splitA+0xc>
    130a:	86 95       	lsr	r24
    130c:	71 05       	cpc	r23, r1
    130e:	61 05       	cpc	r22, r1
    1310:	08 94       	sec
    1312:	08 95       	ret

00001314 <__fp_trunc>:
    1314:	e5 df       	rcall	.-54     	; 0x12e0 <__fp_splitA>
    1316:	a0 f0       	brcs	.+40     	; 0x1340 <__fp_trunc+0x2c>
    1318:	be e7       	ldi	r27, 0x7E	; 126
    131a:	b9 17       	cp	r27, r25
    131c:	88 f4       	brcc	.+34     	; 0x1340 <__fp_trunc+0x2c>
    131e:	bb 27       	eor	r27, r27
    1320:	9f 38       	cpi	r25, 0x8F	; 143
    1322:	60 f4       	brcc	.+24     	; 0x133c <__fp_trunc+0x28>
    1324:	16 16       	cp	r1, r22
    1326:	b1 1d       	adc	r27, r1
    1328:	67 2f       	mov	r22, r23
    132a:	78 2f       	mov	r23, r24
    132c:	88 27       	eor	r24, r24
    132e:	98 5f       	subi	r25, 0xF8	; 248
    1330:	f7 cf       	rjmp	.-18     	; 0x1320 <__fp_trunc+0xc>
    1332:	86 95       	lsr	r24
    1334:	77 95       	ror	r23
    1336:	67 95       	ror	r22
    1338:	b1 1d       	adc	r27, r1
    133a:	93 95       	inc	r25
    133c:	96 39       	cpi	r25, 0x96	; 150
    133e:	c8 f3       	brcs	.-14     	; 0x1332 <__fp_trunc+0x1e>
    1340:	08 95       	ret

00001342 <__fp_zero>:
    1342:	e8 94       	clt

00001344 <__fp_szero>:
    1344:	bb 27       	eor	r27, r27
    1346:	66 27       	eor	r22, r22
    1348:	77 27       	eor	r23, r23
    134a:	cb 01       	movw	r24, r22
    134c:	97 f9       	bld	r25, 7
    134e:	08 95       	ret

00001350 <__gesf2>:
    1350:	81 d1       	rcall	.+770    	; 0x1654 <__fp_cmp>
    1352:	08 f4       	brcc	.+2      	; 0x1356 <__gesf2+0x6>
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	08 95       	ret

00001358 <log10>:
    1358:	0a d0       	rcall	.+20     	; 0x136e <log>
    135a:	29 ed       	ldi	r18, 0xD9	; 217
    135c:	3b e5       	ldi	r19, 0x5B	; 91
    135e:	4e ed       	ldi	r20, 0xDE	; 222
    1360:	5e e3       	ldi	r21, 0x3E	; 62
    1362:	78 c0       	rjmp	.+240    	; 0x1454 <__mulsf3>
    1364:	0e f0       	brts	.+2      	; 0x1368 <log10+0x10>
    1366:	84 cf       	rjmp	.-248    	; 0x1270 <__fp_mpack>
    1368:	91 cf       	rjmp	.-222    	; 0x128c <__fp_nan>
    136a:	68 94       	set
    136c:	60 cf       	rjmp	.-320    	; 0x122e <__fp_inf>

0000136e <log>:
    136e:	b8 df       	rcall	.-144    	; 0x12e0 <__fp_splitA>
    1370:	c8 f3       	brcs	.-14     	; 0x1364 <log10+0xc>
    1372:	99 23       	and	r25, r25
    1374:	d1 f3       	breq	.-12     	; 0x136a <log10+0x12>
    1376:	c6 f3       	brts	.-16     	; 0x1368 <log10+0x10>
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	1f 93       	push	r17
    137e:	0f 93       	push	r16
    1380:	ff 92       	push	r15
    1382:	c9 2f       	mov	r28, r25
    1384:	dd 27       	eor	r29, r29
    1386:	88 23       	and	r24, r24
    1388:	2a f0       	brmi	.+10     	; 0x1394 <log+0x26>
    138a:	21 97       	sbiw	r28, 0x01	; 1
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	da f7       	brpl	.-10     	; 0x138a <log+0x1c>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f eb       	ldi	r21, 0xBF	; 191
    139c:	9f e3       	ldi	r25, 0x3F	; 63
    139e:	88 39       	cpi	r24, 0x98	; 152
    13a0:	20 f0       	brcs	.+8      	; 0x13aa <log+0x3c>
    13a2:	80 3e       	cpi	r24, 0xE0	; 224
    13a4:	30 f0       	brcs	.+12     	; 0x13b2 <log+0x44>
    13a6:	21 96       	adiw	r28, 0x01	; 1
    13a8:	8f 77       	andi	r24, 0x7F	; 127
    13aa:	5c de       	rcall	.-840    	; 0x1064 <__addsf3>
    13ac:	ec e8       	ldi	r30, 0x8C	; 140
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <log+0x4a>
    13b2:	58 de       	rcall	.-848    	; 0x1064 <__addsf3>
    13b4:	e9 eb       	ldi	r30, 0xB9	; 185
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	71 d1       	rcall	.+738    	; 0x169c <__fp_powser>
    13ba:	8b 01       	movw	r16, r22
    13bc:	be 01       	movw	r22, r28
    13be:	ec 01       	movw	r28, r24
    13c0:	fb 2e       	mov	r15, r27
    13c2:	6f 57       	subi	r22, 0x7F	; 127
    13c4:	71 09       	sbc	r23, r1
    13c6:	75 95       	asr	r23
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 0b       	sbc	r24, r24
    13cc:	99 0b       	sbc	r25, r25
    13ce:	e1 de       	rcall	.-574    	; 0x1192 <__floatsisf>
    13d0:	28 e1       	ldi	r18, 0x18	; 24
    13d2:	32 e7       	ldi	r19, 0x72	; 114
    13d4:	41 e3       	ldi	r20, 0x31	; 49
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	49 d0       	rcall	.+146    	; 0x146c <__mulsf3x>
    13da:	af 2d       	mov	r26, r15
    13dc:	98 01       	movw	r18, r16
    13de:	ae 01       	movw	r20, r28
    13e0:	ff 90       	pop	r15
    13e2:	0f 91       	pop	r16
    13e4:	1f 91       	pop	r17
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	4d de       	rcall	.-870    	; 0x1086 <__addsf3x>
    13ec:	60 cf       	rjmp	.-320    	; 0x12ae <__fp_round>

000013ee <modf>:
    13ee:	fa 01       	movw	r30, r20
    13f0:	dc 01       	movw	r26, r24
    13f2:	aa 0f       	add	r26, r26
    13f4:	bb 1f       	adc	r27, r27
    13f6:	9b 01       	movw	r18, r22
    13f8:	ac 01       	movw	r20, r24
    13fa:	bf 57       	subi	r27, 0x7F	; 127
    13fc:	28 f4       	brcc	.+10     	; 0x1408 <modf+0x1a>
    13fe:	22 27       	eor	r18, r18
    1400:	33 27       	eor	r19, r19
    1402:	44 27       	eor	r20, r20
    1404:	50 78       	andi	r21, 0x80	; 128
    1406:	1f c0       	rjmp	.+62     	; 0x1446 <modf+0x58>
    1408:	b7 51       	subi	r27, 0x17	; 23
    140a:	88 f4       	brcc	.+34     	; 0x142e <modf+0x40>
    140c:	ab 2f       	mov	r26, r27
    140e:	00 24       	eor	r0, r0
    1410:	46 95       	lsr	r20
    1412:	37 95       	ror	r19
    1414:	27 95       	ror	r18
    1416:	01 1c       	adc	r0, r1
    1418:	a3 95       	inc	r26
    141a:	d2 f3       	brmi	.-12     	; 0x1410 <modf+0x22>
    141c:	00 20       	and	r0, r0
    141e:	69 f0       	breq	.+26     	; 0x143a <modf+0x4c>
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	44 1f       	adc	r20, r20
    1426:	b3 95       	inc	r27
    1428:	da f3       	brmi	.-10     	; 0x1420 <modf+0x32>
    142a:	0d d0       	rcall	.+26     	; 0x1446 <modf+0x58>
    142c:	1a ce       	rjmp	.-972    	; 0x1062 <__subsf3>
    142e:	61 30       	cpi	r22, 0x01	; 1
    1430:	71 05       	cpc	r23, r1
    1432:	a0 e8       	ldi	r26, 0x80	; 128
    1434:	8a 07       	cpc	r24, r26
    1436:	b9 46       	sbci	r27, 0x69	; 105
    1438:	30 f4       	brcc	.+12     	; 0x1446 <modf+0x58>
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	66 27       	eor	r22, r22
    1440:	77 27       	eor	r23, r23
    1442:	88 27       	eor	r24, r24
    1444:	90 78       	andi	r25, 0x80	; 128
    1446:	30 96       	adiw	r30, 0x00	; 0
    1448:	21 f0       	breq	.+8      	; 0x1452 <modf+0x64>
    144a:	20 83       	st	Z, r18
    144c:	31 83       	std	Z+1, r19	; 0x01
    144e:	42 83       	std	Z+2, r20	; 0x02
    1450:	53 83       	std	Z+3, r21	; 0x03
    1452:	08 95       	ret

00001454 <__mulsf3>:
    1454:	0b d0       	rcall	.+22     	; 0x146c <__mulsf3x>
    1456:	2b cf       	rjmp	.-426    	; 0x12ae <__fp_round>
    1458:	1c df       	rcall	.-456    	; 0x1292 <__fp_pscA>
    145a:	28 f0       	brcs	.+10     	; 0x1466 <__mulsf3+0x12>
    145c:	21 df       	rcall	.-446    	; 0x12a0 <__fp_pscB>
    145e:	18 f0       	brcs	.+6      	; 0x1466 <__mulsf3+0x12>
    1460:	95 23       	and	r25, r21
    1462:	09 f0       	breq	.+2      	; 0x1466 <__mulsf3+0x12>
    1464:	e4 ce       	rjmp	.-568    	; 0x122e <__fp_inf>
    1466:	12 cf       	rjmp	.-476    	; 0x128c <__fp_nan>
    1468:	11 24       	eor	r1, r1
    146a:	6c cf       	rjmp	.-296    	; 0x1344 <__fp_szero>

0000146c <__mulsf3x>:
    146c:	31 df       	rcall	.-414    	; 0x12d0 <__fp_split3>
    146e:	a0 f3       	brcs	.-24     	; 0x1458 <__mulsf3+0x4>

00001470 <__mulsf3_pse>:
    1470:	95 9f       	mul	r25, r21
    1472:	d1 f3       	breq	.-12     	; 0x1468 <__mulsf3+0x14>
    1474:	95 0f       	add	r25, r21
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	55 1f       	adc	r21, r21
    147a:	62 9f       	mul	r22, r18
    147c:	f0 01       	movw	r30, r0
    147e:	72 9f       	mul	r23, r18
    1480:	bb 27       	eor	r27, r27
    1482:	f0 0d       	add	r31, r0
    1484:	b1 1d       	adc	r27, r1
    1486:	63 9f       	mul	r22, r19
    1488:	aa 27       	eor	r26, r26
    148a:	f0 0d       	add	r31, r0
    148c:	b1 1d       	adc	r27, r1
    148e:	aa 1f       	adc	r26, r26
    1490:	64 9f       	mul	r22, r20
    1492:	66 27       	eor	r22, r22
    1494:	b0 0d       	add	r27, r0
    1496:	a1 1d       	adc	r26, r1
    1498:	66 1f       	adc	r22, r22
    149a:	82 9f       	mul	r24, r18
    149c:	22 27       	eor	r18, r18
    149e:	b0 0d       	add	r27, r0
    14a0:	a1 1d       	adc	r26, r1
    14a2:	62 1f       	adc	r22, r18
    14a4:	73 9f       	mul	r23, r19
    14a6:	b0 0d       	add	r27, r0
    14a8:	a1 1d       	adc	r26, r1
    14aa:	62 1f       	adc	r22, r18
    14ac:	83 9f       	mul	r24, r19
    14ae:	a0 0d       	add	r26, r0
    14b0:	61 1d       	adc	r22, r1
    14b2:	22 1f       	adc	r18, r18
    14b4:	74 9f       	mul	r23, r20
    14b6:	33 27       	eor	r19, r19
    14b8:	a0 0d       	add	r26, r0
    14ba:	61 1d       	adc	r22, r1
    14bc:	23 1f       	adc	r18, r19
    14be:	84 9f       	mul	r24, r20
    14c0:	60 0d       	add	r22, r0
    14c2:	21 1d       	adc	r18, r1
    14c4:	82 2f       	mov	r24, r18
    14c6:	76 2f       	mov	r23, r22
    14c8:	6a 2f       	mov	r22, r26
    14ca:	11 24       	eor	r1, r1
    14cc:	9f 57       	subi	r25, 0x7F	; 127
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	8a f0       	brmi	.+34     	; 0x14f4 <__mulsf3_pse+0x84>
    14d2:	e1 f0       	breq	.+56     	; 0x150c <__mulsf3_pse+0x9c>
    14d4:	88 23       	and	r24, r24
    14d6:	4a f0       	brmi	.+18     	; 0x14ea <__mulsf3_pse+0x7a>
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	bb 1f       	adc	r27, r27
    14de:	66 1f       	adc	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	91 50       	subi	r25, 0x01	; 1
    14e6:	50 40       	sbci	r21, 0x00	; 0
    14e8:	a9 f7       	brne	.-22     	; 0x14d4 <__mulsf3_pse+0x64>
    14ea:	9e 3f       	cpi	r25, 0xFE	; 254
    14ec:	51 05       	cpc	r21, r1
    14ee:	70 f0       	brcs	.+28     	; 0x150c <__mulsf3_pse+0x9c>
    14f0:	9e ce       	rjmp	.-708    	; 0x122e <__fp_inf>
    14f2:	28 cf       	rjmp	.-432    	; 0x1344 <__fp_szero>
    14f4:	5f 3f       	cpi	r21, 0xFF	; 255
    14f6:	ec f3       	brlt	.-6      	; 0x14f2 <__mulsf3_pse+0x82>
    14f8:	98 3e       	cpi	r25, 0xE8	; 232
    14fa:	dc f3       	brlt	.-10     	; 0x14f2 <__mulsf3_pse+0x82>
    14fc:	86 95       	lsr	r24
    14fe:	77 95       	ror	r23
    1500:	67 95       	ror	r22
    1502:	b7 95       	ror	r27
    1504:	f7 95       	ror	r31
    1506:	e7 95       	ror	r30
    1508:	9f 5f       	subi	r25, 0xFF	; 255
    150a:	c1 f7       	brne	.-16     	; 0x14fc <__mulsf3_pse+0x8c>
    150c:	fe 2b       	or	r31, r30
    150e:	88 0f       	add	r24, r24
    1510:	91 1d       	adc	r25, r1
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	97 f9       	bld	r25, 7
    1518:	08 95       	ret

0000151a <pow>:
    151a:	fa 01       	movw	r30, r20
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	30 96       	adiw	r30, 0x00	; 0
    1522:	21 05       	cpc	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	99 f1       	breq	.+102    	; 0x158e <pow+0x74>
    1528:	61 15       	cp	r22, r1
    152a:	71 05       	cpc	r23, r1
    152c:	61 f4       	brne	.+24     	; 0x1546 <pow+0x2c>
    152e:	80 38       	cpi	r24, 0x80	; 128
    1530:	bf e3       	ldi	r27, 0x3F	; 63
    1532:	9b 07       	cpc	r25, r27
    1534:	49 f1       	breq	.+82     	; 0x1588 <pow+0x6e>
    1536:	68 94       	set
    1538:	90 38       	cpi	r25, 0x80	; 128
    153a:	81 05       	cpc	r24, r1
    153c:	61 f0       	breq	.+24     	; 0x1556 <pow+0x3c>
    153e:	80 38       	cpi	r24, 0x80	; 128
    1540:	bf ef       	ldi	r27, 0xFF	; 255
    1542:	9b 07       	cpc	r25, r27
    1544:	41 f0       	breq	.+16     	; 0x1556 <pow+0x3c>
    1546:	99 23       	and	r25, r25
    1548:	42 f5       	brpl	.+80     	; 0x159a <pow+0x80>
    154a:	ff 3f       	cpi	r31, 0xFF	; 255
    154c:	e1 05       	cpc	r30, r1
    154e:	31 05       	cpc	r19, r1
    1550:	21 05       	cpc	r18, r1
    1552:	11 f1       	breq	.+68     	; 0x1598 <pow+0x7e>
    1554:	e8 94       	clt
    1556:	08 94       	sec
    1558:	e7 95       	ror	r30
    155a:	d9 01       	movw	r26, r18
    155c:	aa 23       	and	r26, r26
    155e:	29 f4       	brne	.+10     	; 0x156a <pow+0x50>
    1560:	ab 2f       	mov	r26, r27
    1562:	be 2f       	mov	r27, r30
    1564:	f8 5f       	subi	r31, 0xF8	; 248
    1566:	d0 f3       	brcs	.-12     	; 0x155c <pow+0x42>
    1568:	10 c0       	rjmp	.+32     	; 0x158a <pow+0x70>
    156a:	ff 5f       	subi	r31, 0xFF	; 255
    156c:	70 f4       	brcc	.+28     	; 0x158a <pow+0x70>
    156e:	a6 95       	lsr	r26
    1570:	e0 f7       	brcc	.-8      	; 0x156a <pow+0x50>
    1572:	f7 39       	cpi	r31, 0x97	; 151
    1574:	50 f0       	brcs	.+20     	; 0x158a <pow+0x70>
    1576:	19 f0       	breq	.+6      	; 0x157e <pow+0x64>
    1578:	ff 3a       	cpi	r31, 0xAF	; 175
    157a:	38 f4       	brcc	.+14     	; 0x158a <pow+0x70>
    157c:	9f 77       	andi	r25, 0x7F	; 127
    157e:	9f 93       	push	r25
    1580:	0c d0       	rcall	.+24     	; 0x159a <pow+0x80>
    1582:	0f 90       	pop	r0
    1584:	07 fc       	sbrc	r0, 7
    1586:	90 58       	subi	r25, 0x80	; 128
    1588:	08 95       	ret
    158a:	3e f0       	brts	.+14     	; 0x159a <pow+0x80>
    158c:	7f ce       	rjmp	.-770    	; 0x128c <__fp_nan>
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	9f e3       	ldi	r25, 0x3F	; 63
    1596:	08 95       	ret
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	9f 77       	andi	r25, 0x7F	; 127
    159c:	5f 93       	push	r21
    159e:	4f 93       	push	r20
    15a0:	3f 93       	push	r19
    15a2:	2f 93       	push	r18
    15a4:	e4 de       	rcall	.-568    	; 0x136e <log>
    15a6:	2f 91       	pop	r18
    15a8:	3f 91       	pop	r19
    15aa:	4f 91       	pop	r20
    15ac:	5f 91       	pop	r21
    15ae:	52 df       	rcall	.-348    	; 0x1454 <__mulsf3>
    15b0:	25 c0       	rjmp	.+74     	; 0x15fc <exp>

000015b2 <round>:
    15b2:	96 de       	rcall	.-724    	; 0x12e0 <__fp_splitA>
    15b4:	e0 f0       	brcs	.+56     	; 0x15ee <round+0x3c>
    15b6:	9e 37       	cpi	r25, 0x7E	; 126
    15b8:	d8 f0       	brcs	.+54     	; 0x15f0 <round+0x3e>
    15ba:	96 39       	cpi	r25, 0x96	; 150
    15bc:	b8 f4       	brcc	.+46     	; 0x15ec <round+0x3a>
    15be:	9e 38       	cpi	r25, 0x8E	; 142
    15c0:	48 f4       	brcc	.+18     	; 0x15d4 <round+0x22>
    15c2:	67 2f       	mov	r22, r23
    15c4:	78 2f       	mov	r23, r24
    15c6:	88 27       	eor	r24, r24
    15c8:	98 5f       	subi	r25, 0xF8	; 248
    15ca:	f9 cf       	rjmp	.-14     	; 0x15be <round+0xc>
    15cc:	86 95       	lsr	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	93 95       	inc	r25
    15d4:	95 39       	cpi	r25, 0x95	; 149
    15d6:	d0 f3       	brcs	.-12     	; 0x15cc <round+0x1a>
    15d8:	b6 2f       	mov	r27, r22
    15da:	b1 70       	andi	r27, 0x01	; 1
    15dc:	6b 0f       	add	r22, r27
    15de:	71 1d       	adc	r23, r1
    15e0:	81 1d       	adc	r24, r1
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <round+0x3a>
    15e4:	87 95       	ror	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	93 95       	inc	r25
    15ec:	26 ce       	rjmp	.-948    	; 0x123a <__fp_mintl>
    15ee:	40 ce       	rjmp	.-896    	; 0x1270 <__fp_mpack>
    15f0:	a9 ce       	rjmp	.-686    	; 0x1344 <__fp_szero>
    15f2:	19 f4       	brne	.+6      	; 0x15fa <round+0x48>
    15f4:	0e f0       	brts	.+2      	; 0x15f8 <round+0x46>
    15f6:	1b ce       	rjmp	.-970    	; 0x122e <__fp_inf>
    15f8:	a4 ce       	rjmp	.-696    	; 0x1342 <__fp_zero>
    15fa:	48 ce       	rjmp	.-880    	; 0x128c <__fp_nan>

000015fc <exp>:
    15fc:	71 de       	rcall	.-798    	; 0x12e0 <__fp_splitA>
    15fe:	c8 f3       	brcs	.-14     	; 0x15f2 <round+0x40>
    1600:	96 38       	cpi	r25, 0x86	; 134
    1602:	c0 f7       	brcc	.-16     	; 0x15f4 <round+0x42>
    1604:	07 f8       	bld	r0, 7
    1606:	0f 92       	push	r0
    1608:	e8 94       	clt
    160a:	2b e3       	ldi	r18, 0x3B	; 59
    160c:	3a ea       	ldi	r19, 0xAA	; 170
    160e:	48 eb       	ldi	r20, 0xB8	; 184
    1610:	5f e7       	ldi	r21, 0x7F	; 127
    1612:	2e df       	rcall	.-420    	; 0x1470 <__mulsf3_pse>
    1614:	0f 92       	push	r0
    1616:	0f 92       	push	r0
    1618:	0f 92       	push	r0
    161a:	4d b7       	in	r20, 0x3d	; 61
    161c:	5e b7       	in	r21, 0x3e	; 62
    161e:	0f 92       	push	r0
    1620:	e6 de       	rcall	.-564    	; 0x13ee <modf>
    1622:	e6 ee       	ldi	r30, 0xE6	; 230
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	3a d0       	rcall	.+116    	; 0x169c <__fp_powser>
    1628:	4f 91       	pop	r20
    162a:	5f 91       	pop	r21
    162c:	ef 91       	pop	r30
    162e:	ff 91       	pop	r31
    1630:	e5 95       	asr	r30
    1632:	ee 1f       	adc	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	49 f0       	breq	.+18     	; 0x164a <exp+0x4e>
    1638:	fe 57       	subi	r31, 0x7E	; 126
    163a:	e0 68       	ori	r30, 0x80	; 128
    163c:	44 27       	eor	r20, r20
    163e:	ee 0f       	add	r30, r30
    1640:	44 1f       	adc	r20, r20
    1642:	fa 95       	dec	r31
    1644:	e1 f7       	brne	.-8      	; 0x163e <exp+0x42>
    1646:	41 95       	neg	r20
    1648:	55 0b       	sbc	r21, r21
    164a:	56 d0       	rcall	.+172    	; 0x16f8 <ldexp>
    164c:	0f 90       	pop	r0
    164e:	07 fe       	sbrs	r0, 7
    1650:	4a c0       	rjmp	.+148    	; 0x16e6 <inverse>
    1652:	08 95       	ret

00001654 <__fp_cmp>:
    1654:	99 0f       	add	r25, r25
    1656:	00 08       	sbc	r0, r0
    1658:	55 0f       	add	r21, r21
    165a:	aa 0b       	sbc	r26, r26
    165c:	e0 e8       	ldi	r30, 0x80	; 128
    165e:	fe ef       	ldi	r31, 0xFE	; 254
    1660:	16 16       	cp	r1, r22
    1662:	17 06       	cpc	r1, r23
    1664:	e8 07       	cpc	r30, r24
    1666:	f9 07       	cpc	r31, r25
    1668:	c0 f0       	brcs	.+48     	; 0x169a <__fp_cmp+0x46>
    166a:	12 16       	cp	r1, r18
    166c:	13 06       	cpc	r1, r19
    166e:	e4 07       	cpc	r30, r20
    1670:	f5 07       	cpc	r31, r21
    1672:	98 f0       	brcs	.+38     	; 0x169a <__fp_cmp+0x46>
    1674:	62 1b       	sub	r22, r18
    1676:	73 0b       	sbc	r23, r19
    1678:	84 0b       	sbc	r24, r20
    167a:	95 0b       	sbc	r25, r21
    167c:	39 f4       	brne	.+14     	; 0x168c <__fp_cmp+0x38>
    167e:	0a 26       	eor	r0, r26
    1680:	61 f0       	breq	.+24     	; 0x169a <__fp_cmp+0x46>
    1682:	23 2b       	or	r18, r19
    1684:	24 2b       	or	r18, r20
    1686:	25 2b       	or	r18, r21
    1688:	21 f4       	brne	.+8      	; 0x1692 <__fp_cmp+0x3e>
    168a:	08 95       	ret
    168c:	0a 26       	eor	r0, r26
    168e:	09 f4       	brne	.+2      	; 0x1692 <__fp_cmp+0x3e>
    1690:	a1 40       	sbci	r26, 0x01	; 1
    1692:	a6 95       	lsr	r26
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	81 1d       	adc	r24, r1
    1698:	81 1d       	adc	r24, r1
    169a:	08 95       	ret

0000169c <__fp_powser>:
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	1f 93       	push	r17
    16a2:	0f 93       	push	r16
    16a4:	ff 92       	push	r15
    16a6:	ef 92       	push	r14
    16a8:	df 92       	push	r13
    16aa:	7b 01       	movw	r14, r22
    16ac:	8c 01       	movw	r16, r24
    16ae:	68 94       	set
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <__fp_powser+0x20>
    16b2:	da 2e       	mov	r13, r26
    16b4:	ef 01       	movw	r28, r30
    16b6:	da de       	rcall	.-588    	; 0x146c <__mulsf3x>
    16b8:	fe 01       	movw	r30, r28
    16ba:	e8 94       	clt
    16bc:	a5 91       	lpm	r26, Z+
    16be:	25 91       	lpm	r18, Z+
    16c0:	35 91       	lpm	r19, Z+
    16c2:	45 91       	lpm	r20, Z+
    16c4:	55 91       	lpm	r21, Z+
    16c6:	ae f3       	brts	.-22     	; 0x16b2 <__fp_powser+0x16>
    16c8:	ef 01       	movw	r28, r30
    16ca:	dd dc       	rcall	.-1606   	; 0x1086 <__addsf3x>
    16cc:	fe 01       	movw	r30, r28
    16ce:	97 01       	movw	r18, r14
    16d0:	a8 01       	movw	r20, r16
    16d2:	da 94       	dec	r13
    16d4:	79 f7       	brne	.-34     	; 0x16b4 <__fp_powser+0x18>
    16d6:	df 90       	pop	r13
    16d8:	ef 90       	pop	r14
    16da:	ff 90       	pop	r15
    16dc:	0f 91       	pop	r16
    16de:	1f 91       	pop	r17
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <inverse>:
    16e6:	9b 01       	movw	r18, r22
    16e8:	ac 01       	movw	r20, r24
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	80 e8       	ldi	r24, 0x80	; 128
    16f0:	9f e3       	ldi	r25, 0x3F	; 63
    16f2:	36 c0       	rjmp	.+108    	; 0x1760 <__divsf3>
    16f4:	9c cd       	rjmp	.-1224   	; 0x122e <__fp_inf>
    16f6:	bc cd       	rjmp	.-1160   	; 0x1270 <__fp_mpack>

000016f8 <ldexp>:
    16f8:	f3 dd       	rcall	.-1050   	; 0x12e0 <__fp_splitA>
    16fa:	e8 f3       	brcs	.-6      	; 0x16f6 <inverse+0x10>
    16fc:	99 23       	and	r25, r25
    16fe:	d9 f3       	breq	.-10     	; 0x16f6 <inverse+0x10>
    1700:	94 0f       	add	r25, r20
    1702:	51 1d       	adc	r21, r1
    1704:	bb f3       	brvs	.-18     	; 0x16f4 <inverse+0xe>
    1706:	91 50       	subi	r25, 0x01	; 1
    1708:	50 40       	sbci	r21, 0x00	; 0
    170a:	94 f0       	brlt	.+36     	; 0x1730 <ldexp+0x38>
    170c:	59 f0       	breq	.+22     	; 0x1724 <ldexp+0x2c>
    170e:	88 23       	and	r24, r24
    1710:	32 f0       	brmi	.+12     	; 0x171e <ldexp+0x26>
    1712:	66 0f       	add	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	88 1f       	adc	r24, r24
    1718:	91 50       	subi	r25, 0x01	; 1
    171a:	50 40       	sbci	r21, 0x00	; 0
    171c:	c1 f7       	brne	.-16     	; 0x170e <ldexp+0x16>
    171e:	9e 3f       	cpi	r25, 0xFE	; 254
    1720:	51 05       	cpc	r21, r1
    1722:	44 f7       	brge	.-48     	; 0x16f4 <inverse+0xe>
    1724:	88 0f       	add	r24, r24
    1726:	91 1d       	adc	r25, r1
    1728:	96 95       	lsr	r25
    172a:	87 95       	ror	r24
    172c:	97 f9       	bld	r25, 7
    172e:	08 95       	ret
    1730:	5f 3f       	cpi	r21, 0xFF	; 255
    1732:	ac f0       	brlt	.+42     	; 0x175e <ldexp+0x66>
    1734:	98 3e       	cpi	r25, 0xE8	; 232
    1736:	9c f0       	brlt	.+38     	; 0x175e <ldexp+0x66>
    1738:	bb 27       	eor	r27, r27
    173a:	86 95       	lsr	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	b7 95       	ror	r27
    1742:	08 f4       	brcc	.+2      	; 0x1746 <ldexp+0x4e>
    1744:	b1 60       	ori	r27, 0x01	; 1
    1746:	93 95       	inc	r25
    1748:	c1 f7       	brne	.-16     	; 0x173a <ldexp+0x42>
    174a:	bb 0f       	add	r27, r27
    174c:	58 f7       	brcc	.-42     	; 0x1724 <ldexp+0x2c>
    174e:	11 f4       	brne	.+4      	; 0x1754 <ldexp+0x5c>
    1750:	60 ff       	sbrs	r22, 0
    1752:	e8 cf       	rjmp	.-48     	; 0x1724 <ldexp+0x2c>
    1754:	6f 5f       	subi	r22, 0xFF	; 255
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8f 4f       	sbci	r24, 0xFF	; 255
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	e3 cf       	rjmp	.-58     	; 0x1724 <ldexp+0x2c>
    175e:	f2 cd       	rjmp	.-1052   	; 0x1344 <__fp_szero>

00001760 <__divsf3>:
    1760:	0c d0       	rcall	.+24     	; 0x177a <__divsf3x>
    1762:	a5 cd       	rjmp	.-1206   	; 0x12ae <__fp_round>
    1764:	9d dd       	rcall	.-1222   	; 0x12a0 <__fp_pscB>
    1766:	40 f0       	brcs	.+16     	; 0x1778 <__divsf3+0x18>
    1768:	94 dd       	rcall	.-1240   	; 0x1292 <__fp_pscA>
    176a:	30 f0       	brcs	.+12     	; 0x1778 <__divsf3+0x18>
    176c:	21 f4       	brne	.+8      	; 0x1776 <__divsf3+0x16>
    176e:	5f 3f       	cpi	r21, 0xFF	; 255
    1770:	19 f0       	breq	.+6      	; 0x1778 <__divsf3+0x18>
    1772:	5d cd       	rjmp	.-1350   	; 0x122e <__fp_inf>
    1774:	51 11       	cpse	r21, r1
    1776:	e6 cd       	rjmp	.-1076   	; 0x1344 <__fp_szero>
    1778:	89 cd       	rjmp	.-1262   	; 0x128c <__fp_nan>

0000177a <__divsf3x>:
    177a:	aa dd       	rcall	.-1196   	; 0x12d0 <__fp_split3>
    177c:	98 f3       	brcs	.-26     	; 0x1764 <__divsf3+0x4>

0000177e <__divsf3_pse>:
    177e:	99 23       	and	r25, r25
    1780:	c9 f3       	breq	.-14     	; 0x1774 <__divsf3+0x14>
    1782:	55 23       	and	r21, r21
    1784:	b1 f3       	breq	.-20     	; 0x1772 <__divsf3+0x12>
    1786:	95 1b       	sub	r25, r21
    1788:	55 0b       	sbc	r21, r21
    178a:	bb 27       	eor	r27, r27
    178c:	aa 27       	eor	r26, r26
    178e:	62 17       	cp	r22, r18
    1790:	73 07       	cpc	r23, r19
    1792:	84 07       	cpc	r24, r20
    1794:	38 f0       	brcs	.+14     	; 0x17a4 <__divsf3_pse+0x26>
    1796:	9f 5f       	subi	r25, 0xFF	; 255
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	44 1f       	adc	r20, r20
    17a0:	aa 1f       	adc	r26, r26
    17a2:	a9 f3       	breq	.-22     	; 0x178e <__divsf3_pse+0x10>
    17a4:	33 d0       	rcall	.+102    	; 0x180c <__divsf3_pse+0x8e>
    17a6:	0e 2e       	mov	r0, r30
    17a8:	3a f0       	brmi	.+14     	; 0x17b8 <__divsf3_pse+0x3a>
    17aa:	e0 e8       	ldi	r30, 0x80	; 128
    17ac:	30 d0       	rcall	.+96     	; 0x180e <__divsf3_pse+0x90>
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	50 40       	sbci	r21, 0x00	; 0
    17b2:	e6 95       	lsr	r30
    17b4:	00 1c       	adc	r0, r0
    17b6:	ca f7       	brpl	.-14     	; 0x17aa <__divsf3_pse+0x2c>
    17b8:	29 d0       	rcall	.+82     	; 0x180c <__divsf3_pse+0x8e>
    17ba:	fe 2f       	mov	r31, r30
    17bc:	27 d0       	rcall	.+78     	; 0x180c <__divsf3_pse+0x8e>
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	bb 1f       	adc	r27, r27
    17c6:	26 17       	cp	r18, r22
    17c8:	37 07       	cpc	r19, r23
    17ca:	48 07       	cpc	r20, r24
    17cc:	ab 07       	cpc	r26, r27
    17ce:	b0 e8       	ldi	r27, 0x80	; 128
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__divsf3_pse+0x56>
    17d2:	bb 0b       	sbc	r27, r27
    17d4:	80 2d       	mov	r24, r0
    17d6:	bf 01       	movw	r22, r30
    17d8:	ff 27       	eor	r31, r31
    17da:	93 58       	subi	r25, 0x83	; 131
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	2a f0       	brmi	.+10     	; 0x17ea <__divsf3_pse+0x6c>
    17e0:	9e 3f       	cpi	r25, 0xFE	; 254
    17e2:	51 05       	cpc	r21, r1
    17e4:	68 f0       	brcs	.+26     	; 0x1800 <__divsf3_pse+0x82>
    17e6:	23 cd       	rjmp	.-1466   	; 0x122e <__fp_inf>
    17e8:	ad cd       	rjmp	.-1190   	; 0x1344 <__fp_szero>
    17ea:	5f 3f       	cpi	r21, 0xFF	; 255
    17ec:	ec f3       	brlt	.-6      	; 0x17e8 <__divsf3_pse+0x6a>
    17ee:	98 3e       	cpi	r25, 0xE8	; 232
    17f0:	dc f3       	brlt	.-10     	; 0x17e8 <__divsf3_pse+0x6a>
    17f2:	86 95       	lsr	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	b7 95       	ror	r27
    17fa:	f7 95       	ror	r31
    17fc:	9f 5f       	subi	r25, 0xFF	; 255
    17fe:	c9 f7       	brne	.-14     	; 0x17f2 <__divsf3_pse+0x74>
    1800:	88 0f       	add	r24, r24
    1802:	91 1d       	adc	r25, r1
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	97 f9       	bld	r25, 7
    180a:	08 95       	ret
    180c:	e1 e0       	ldi	r30, 0x01	; 1
    180e:	66 0f       	add	r22, r22
    1810:	77 1f       	adc	r23, r23
    1812:	88 1f       	adc	r24, r24
    1814:	bb 1f       	adc	r27, r27
    1816:	62 17       	cp	r22, r18
    1818:	73 07       	cpc	r23, r19
    181a:	84 07       	cpc	r24, r20
    181c:	ba 07       	cpc	r27, r26
    181e:	20 f0       	brcs	.+8      	; 0x1828 <__divsf3_pse+0xaa>
    1820:	62 1b       	sub	r22, r18
    1822:	73 0b       	sbc	r23, r19
    1824:	84 0b       	sbc	r24, r20
    1826:	ba 0b       	sbc	r27, r26
    1828:	ee 1f       	adc	r30, r30
    182a:	88 f7       	brcc	.-30     	; 0x180e <__divsf3_pse+0x90>
    182c:	e0 95       	com	r30
    182e:	08 95       	ret

00001830 <malloc>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	91 05       	cpc	r25, r1
    1838:	10 f4       	brcc	.+4      	; 0x183e <malloc+0xe>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	e0 91 f9 03 	lds	r30, 0x03F9
    1842:	f0 91 fa 03 	lds	r31, 0x03FA
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	39 f1       	breq	.+78     	; 0x18a0 <malloc+0x70>
    1852:	40 81       	ld	r20, Z
    1854:	51 81       	ldd	r21, Z+1	; 0x01
    1856:	48 17       	cp	r20, r24
    1858:	59 07       	cpc	r21, r25
    185a:	b8 f0       	brcs	.+46     	; 0x188a <malloc+0x5a>
    185c:	48 17       	cp	r20, r24
    185e:	59 07       	cpc	r21, r25
    1860:	71 f4       	brne	.+28     	; 0x187e <malloc+0x4e>
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	10 97       	sbiw	r26, 0x00	; 0
    1868:	29 f0       	breq	.+10     	; 0x1874 <malloc+0x44>
    186a:	13 96       	adiw	r26, 0x03	; 3
    186c:	9c 93       	st	X, r25
    186e:	8e 93       	st	-X, r24
    1870:	12 97       	sbiw	r26, 0x02	; 2
    1872:	2c c0       	rjmp	.+88     	; 0x18cc <malloc+0x9c>
    1874:	90 93 fa 03 	sts	0x03FA, r25
    1878:	80 93 f9 03 	sts	0x03F9, r24
    187c:	27 c0       	rjmp	.+78     	; 0x18cc <malloc+0x9c>
    187e:	21 15       	cp	r18, r1
    1880:	31 05       	cpc	r19, r1
    1882:	31 f0       	breq	.+12     	; 0x1890 <malloc+0x60>
    1884:	42 17       	cp	r20, r18
    1886:	53 07       	cpc	r21, r19
    1888:	18 f0       	brcs	.+6      	; 0x1890 <malloc+0x60>
    188a:	a9 01       	movw	r20, r18
    188c:	db 01       	movw	r26, r22
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <malloc+0x62>
    1890:	ef 01       	movw	r28, r30
    1892:	9a 01       	movw	r18, r20
    1894:	bd 01       	movw	r22, r26
    1896:	df 01       	movw	r26, r30
    1898:	02 80       	ldd	r0, Z+2	; 0x02
    189a:	f3 81       	ldd	r31, Z+3	; 0x03
    189c:	e0 2d       	mov	r30, r0
    189e:	d7 cf       	rjmp	.-82     	; 0x184e <malloc+0x1e>
    18a0:	21 15       	cp	r18, r1
    18a2:	31 05       	cpc	r19, r1
    18a4:	f9 f0       	breq	.+62     	; 0x18e4 <malloc+0xb4>
    18a6:	28 1b       	sub	r18, r24
    18a8:	39 0b       	sbc	r19, r25
    18aa:	24 30       	cpi	r18, 0x04	; 4
    18ac:	31 05       	cpc	r19, r1
    18ae:	80 f4       	brcc	.+32     	; 0x18d0 <malloc+0xa0>
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	61 15       	cp	r22, r1
    18b6:	71 05       	cpc	r23, r1
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <malloc+0x92>
    18ba:	fb 01       	movw	r30, r22
    18bc:	93 83       	std	Z+3, r25	; 0x03
    18be:	82 83       	std	Z+2, r24	; 0x02
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <malloc+0x9a>
    18c2:	90 93 fa 03 	sts	0x03FA, r25
    18c6:	80 93 f9 03 	sts	0x03F9, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	32 96       	adiw	r30, 0x02	; 2
    18ce:	44 c0       	rjmp	.+136    	; 0x1958 <malloc+0x128>
    18d0:	fe 01       	movw	r30, r28
    18d2:	e2 0f       	add	r30, r18
    18d4:	f3 1f       	adc	r31, r19
    18d6:	81 93       	st	Z+, r24
    18d8:	91 93       	st	Z+, r25
    18da:	22 50       	subi	r18, 0x02	; 2
    18dc:	31 09       	sbc	r19, r1
    18de:	39 83       	std	Y+1, r19	; 0x01
    18e0:	28 83       	st	Y, r18
    18e2:	3a c0       	rjmp	.+116    	; 0x1958 <malloc+0x128>
    18e4:	20 91 f7 03 	lds	r18, 0x03F7
    18e8:	30 91 f8 03 	lds	r19, 0x03F8
    18ec:	23 2b       	or	r18, r19
    18ee:	41 f4       	brne	.+16     	; 0x1900 <malloc+0xd0>
    18f0:	20 91 06 01 	lds	r18, 0x0106
    18f4:	30 91 07 01 	lds	r19, 0x0107
    18f8:	30 93 f8 03 	sts	0x03F8, r19
    18fc:	20 93 f7 03 	sts	0x03F7, r18
    1900:	20 91 04 01 	lds	r18, 0x0104
    1904:	30 91 05 01 	lds	r19, 0x0105
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	41 f4       	brne	.+16     	; 0x191e <malloc+0xee>
    190e:	2d b7       	in	r18, 0x3d	; 61
    1910:	3e b7       	in	r19, 0x3e	; 62
    1912:	40 91 08 01 	lds	r20, 0x0108
    1916:	50 91 09 01 	lds	r21, 0x0109
    191a:	24 1b       	sub	r18, r20
    191c:	35 0b       	sbc	r19, r21
    191e:	e0 91 f7 03 	lds	r30, 0x03F7
    1922:	f0 91 f8 03 	lds	r31, 0x03F8
    1926:	e2 17       	cp	r30, r18
    1928:	f3 07       	cpc	r31, r19
    192a:	a0 f4       	brcc	.+40     	; 0x1954 <malloc+0x124>
    192c:	2e 1b       	sub	r18, r30
    192e:	3f 0b       	sbc	r19, r31
    1930:	28 17       	cp	r18, r24
    1932:	39 07       	cpc	r19, r25
    1934:	78 f0       	brcs	.+30     	; 0x1954 <malloc+0x124>
    1936:	ac 01       	movw	r20, r24
    1938:	4e 5f       	subi	r20, 0xFE	; 254
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	24 17       	cp	r18, r20
    193e:	35 07       	cpc	r19, r21
    1940:	48 f0       	brcs	.+18     	; 0x1954 <malloc+0x124>
    1942:	4e 0f       	add	r20, r30
    1944:	5f 1f       	adc	r21, r31
    1946:	50 93 f8 03 	sts	0x03F8, r21
    194a:	40 93 f7 03 	sts	0x03F7, r20
    194e:	81 93       	st	Z+, r24
    1950:	91 93       	st	Z+, r25
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <malloc+0x128>
    1954:	e0 e0       	ldi	r30, 0x00	; 0
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	cf 01       	movw	r24, r30
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <free>:
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	09 f4       	brne	.+2      	; 0x196a <free+0xa>
    1968:	87 c0       	rjmp	.+270    	; 0x1a78 <free+0x118>
    196a:	fc 01       	movw	r30, r24
    196c:	32 97       	sbiw	r30, 0x02	; 2
    196e:	13 82       	std	Z+3, r1	; 0x03
    1970:	12 82       	std	Z+2, r1	; 0x02
    1972:	c0 91 f9 03 	lds	r28, 0x03F9
    1976:	d0 91 fa 03 	lds	r29, 0x03FA
    197a:	20 97       	sbiw	r28, 0x00	; 0
    197c:	81 f4       	brne	.+32     	; 0x199e <free+0x3e>
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	28 0f       	add	r18, r24
    1984:	39 1f       	adc	r19, r25
    1986:	80 91 f7 03 	lds	r24, 0x03F7
    198a:	90 91 f8 03 	lds	r25, 0x03F8
    198e:	82 17       	cp	r24, r18
    1990:	93 07       	cpc	r25, r19
    1992:	79 f5       	brne	.+94     	; 0x19f2 <free+0x92>
    1994:	f0 93 f8 03 	sts	0x03F8, r31
    1998:	e0 93 f7 03 	sts	0x03F7, r30
    199c:	6d c0       	rjmp	.+218    	; 0x1a78 <free+0x118>
    199e:	de 01       	movw	r26, r28
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	ae 17       	cp	r26, r30
    19a6:	bf 07       	cpc	r27, r31
    19a8:	50 f4       	brcc	.+20     	; 0x19be <free+0x5e>
    19aa:	12 96       	adiw	r26, 0x02	; 2
    19ac:	4d 91       	ld	r20, X+
    19ae:	5c 91       	ld	r21, X
    19b0:	13 97       	sbiw	r26, 0x03	; 3
    19b2:	9d 01       	movw	r18, r26
    19b4:	41 15       	cp	r20, r1
    19b6:	51 05       	cpc	r21, r1
    19b8:	09 f1       	breq	.+66     	; 0x19fc <free+0x9c>
    19ba:	da 01       	movw	r26, r20
    19bc:	f3 cf       	rjmp	.-26     	; 0x19a4 <free+0x44>
    19be:	b3 83       	std	Z+3, r27	; 0x03
    19c0:	a2 83       	std	Z+2, r26	; 0x02
    19c2:	40 81       	ld	r20, Z
    19c4:	51 81       	ldd	r21, Z+1	; 0x01
    19c6:	84 0f       	add	r24, r20
    19c8:	95 1f       	adc	r25, r21
    19ca:	8a 17       	cp	r24, r26
    19cc:	9b 07       	cpc	r25, r27
    19ce:	71 f4       	brne	.+28     	; 0x19ec <free+0x8c>
    19d0:	8d 91       	ld	r24, X+
    19d2:	9c 91       	ld	r25, X
    19d4:	11 97       	sbiw	r26, 0x01	; 1
    19d6:	84 0f       	add	r24, r20
    19d8:	95 1f       	adc	r25, r21
    19da:	02 96       	adiw	r24, 0x02	; 2
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
    19e0:	12 96       	adiw	r26, 0x02	; 2
    19e2:	8d 91       	ld	r24, X+
    19e4:	9c 91       	ld	r25, X
    19e6:	13 97       	sbiw	r26, 0x03	; 3
    19e8:	93 83       	std	Z+3, r25	; 0x03
    19ea:	82 83       	std	Z+2, r24	; 0x02
    19ec:	21 15       	cp	r18, r1
    19ee:	31 05       	cpc	r19, r1
    19f0:	29 f4       	brne	.+10     	; 0x19fc <free+0x9c>
    19f2:	f0 93 fa 03 	sts	0x03FA, r31
    19f6:	e0 93 f9 03 	sts	0x03F9, r30
    19fa:	3e c0       	rjmp	.+124    	; 0x1a78 <free+0x118>
    19fc:	d9 01       	movw	r26, r18
    19fe:	13 96       	adiw	r26, 0x03	; 3
    1a00:	fc 93       	st	X, r31
    1a02:	ee 93       	st	-X, r30
    1a04:	12 97       	sbiw	r26, 0x02	; 2
    1a06:	4d 91       	ld	r20, X+
    1a08:	5d 91       	ld	r21, X+
    1a0a:	a4 0f       	add	r26, r20
    1a0c:	b5 1f       	adc	r27, r21
    1a0e:	ea 17       	cp	r30, r26
    1a10:	fb 07       	cpc	r31, r27
    1a12:	79 f4       	brne	.+30     	; 0x1a32 <free+0xd2>
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	84 0f       	add	r24, r20
    1a1a:	95 1f       	adc	r25, r21
    1a1c:	02 96       	adiw	r24, 0x02	; 2
    1a1e:	d9 01       	movw	r26, r18
    1a20:	11 96       	adiw	r26, 0x01	; 1
    1a22:	9c 93       	st	X, r25
    1a24:	8e 93       	st	-X, r24
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	13 96       	adiw	r26, 0x03	; 3
    1a2c:	9c 93       	st	X, r25
    1a2e:	8e 93       	st	-X, r24
    1a30:	12 97       	sbiw	r26, 0x02	; 2
    1a32:	e0 e0       	ldi	r30, 0x00	; 0
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <free+0xe4>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ec 01       	movw	r28, r24
    1a42:	f9 cf       	rjmp	.-14     	; 0x1a36 <free+0xd6>
    1a44:	ce 01       	movw	r24, r28
    1a46:	02 96       	adiw	r24, 0x02	; 2
    1a48:	28 81       	ld	r18, Y
    1a4a:	39 81       	ldd	r19, Y+1	; 0x01
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	20 91 f7 03 	lds	r18, 0x03F7
    1a54:	30 91 f8 03 	lds	r19, 0x03F8
    1a58:	28 17       	cp	r18, r24
    1a5a:	39 07       	cpc	r19, r25
    1a5c:	69 f4       	brne	.+26     	; 0x1a78 <free+0x118>
    1a5e:	30 97       	sbiw	r30, 0x00	; 0
    1a60:	29 f4       	brne	.+10     	; 0x1a6c <free+0x10c>
    1a62:	10 92 fa 03 	sts	0x03FA, r1
    1a66:	10 92 f9 03 	sts	0x03F9, r1
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <free+0x110>
    1a6c:	13 82       	std	Z+3, r1	; 0x03
    1a6e:	12 82       	std	Z+2, r1	; 0x02
    1a70:	d0 93 f8 03 	sts	0x03F8, r29
    1a74:	c0 93 f7 03 	sts	0x03F7, r28
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	08 95       	ret

00001a7e <sprintf>:
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	0d 89       	ldd	r16, Y+21	; 0x15
    1a98:	1e 89       	ldd	r17, Y+22	; 0x16
    1a9a:	86 e0       	ldi	r24, 0x06	; 6
    1a9c:	8c 83       	std	Y+4, r24	; 0x04
    1a9e:	1a 83       	std	Y+2, r17	; 0x02
    1aa0:	09 83       	std	Y+1, r16	; 0x01
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f e7       	ldi	r25, 0x7F	; 127
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	ae 01       	movw	r20, r28
    1aac:	47 5e       	subi	r20, 0xE7	; 231
    1aae:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab0:	6f 89       	ldd	r22, Y+23	; 0x17
    1ab2:	78 8d       	ldd	r23, Y+24	; 0x18
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <vfprintf>
    1abc:	ef 81       	ldd	r30, Y+7	; 0x07
    1abe:	f8 85       	ldd	r31, Y+8	; 0x08
    1ac0:	e0 0f       	add	r30, r16
    1ac2:	f1 1f       	adc	r31, r17
    1ac4:	10 82       	st	Z, r1
    1ac6:	2e 96       	adiw	r28, 0x0e	; 14
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <vfprintf>:
    1adc:	2f 92       	push	r2
    1ade:	3f 92       	push	r3
    1ae0:	4f 92       	push	r4
    1ae2:	5f 92       	push	r5
    1ae4:	6f 92       	push	r6
    1ae6:	7f 92       	push	r7
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	2c 97       	sbiw	r28, 0x0c	; 12
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	7c 01       	movw	r14, r24
    1b12:	6b 01       	movw	r12, r22
    1b14:	8a 01       	movw	r16, r20
    1b16:	fc 01       	movw	r30, r24
    1b18:	17 82       	std	Z+7, r1	; 0x07
    1b1a:	16 82       	std	Z+6, r1	; 0x06
    1b1c:	83 81       	ldd	r24, Z+3	; 0x03
    1b1e:	81 ff       	sbrs	r24, 1
    1b20:	bd c1       	rjmp	.+890    	; 0x1e9c <vfprintf+0x3c0>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	4c 01       	movw	r8, r24
    1b28:	f7 01       	movw	r30, r14
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	93 fd       	sbrc	r25, 3
    1b30:	85 91       	lpm	r24, Z+
    1b32:	93 ff       	sbrs	r25, 3
    1b34:	81 91       	ld	r24, Z+
    1b36:	6f 01       	movw	r12, r30
    1b38:	88 23       	and	r24, r24
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <vfprintf+0x62>
    1b3c:	ab c1       	rjmp	.+854    	; 0x1e94 <vfprintf+0x3b8>
    1b3e:	85 32       	cpi	r24, 0x25	; 37
    1b40:	39 f4       	brne	.+14     	; 0x1b50 <vfprintf+0x74>
    1b42:	93 fd       	sbrc	r25, 3
    1b44:	85 91       	lpm	r24, Z+
    1b46:	93 ff       	sbrs	r25, 3
    1b48:	81 91       	ld	r24, Z+
    1b4a:	6f 01       	movw	r12, r30
    1b4c:	85 32       	cpi	r24, 0x25	; 37
    1b4e:	29 f4       	brne	.+10     	; 0x1b5a <vfprintf+0x7e>
    1b50:	b7 01       	movw	r22, r14
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1b58:	e7 cf       	rjmp	.-50     	; 0x1b28 <vfprintf+0x4c>
    1b5a:	51 2c       	mov	r5, r1
    1b5c:	31 2c       	mov	r3, r1
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	20 32       	cpi	r18, 0x20	; 32
    1b62:	a0 f4       	brcc	.+40     	; 0x1b8c <vfprintf+0xb0>
    1b64:	8b 32       	cpi	r24, 0x2B	; 43
    1b66:	69 f0       	breq	.+26     	; 0x1b82 <vfprintf+0xa6>
    1b68:	30 f4       	brcc	.+12     	; 0x1b76 <vfprintf+0x9a>
    1b6a:	80 32       	cpi	r24, 0x20	; 32
    1b6c:	59 f0       	breq	.+22     	; 0x1b84 <vfprintf+0xa8>
    1b6e:	83 32       	cpi	r24, 0x23	; 35
    1b70:	69 f4       	brne	.+26     	; 0x1b8c <vfprintf+0xb0>
    1b72:	20 61       	ori	r18, 0x10	; 16
    1b74:	2c c0       	rjmp	.+88     	; 0x1bce <vfprintf+0xf2>
    1b76:	8d 32       	cpi	r24, 0x2D	; 45
    1b78:	39 f0       	breq	.+14     	; 0x1b88 <vfprintf+0xac>
    1b7a:	80 33       	cpi	r24, 0x30	; 48
    1b7c:	39 f4       	brne	.+14     	; 0x1b8c <vfprintf+0xb0>
    1b7e:	21 60       	ori	r18, 0x01	; 1
    1b80:	26 c0       	rjmp	.+76     	; 0x1bce <vfprintf+0xf2>
    1b82:	22 60       	ori	r18, 0x02	; 2
    1b84:	24 60       	ori	r18, 0x04	; 4
    1b86:	23 c0       	rjmp	.+70     	; 0x1bce <vfprintf+0xf2>
    1b88:	28 60       	ori	r18, 0x08	; 8
    1b8a:	21 c0       	rjmp	.+66     	; 0x1bce <vfprintf+0xf2>
    1b8c:	27 fd       	sbrc	r18, 7
    1b8e:	27 c0       	rjmp	.+78     	; 0x1bde <vfprintf+0x102>
    1b90:	30 ed       	ldi	r19, 0xD0	; 208
    1b92:	38 0f       	add	r19, r24
    1b94:	3a 30       	cpi	r19, 0x0A	; 10
    1b96:	78 f4       	brcc	.+30     	; 0x1bb6 <vfprintf+0xda>
    1b98:	26 ff       	sbrs	r18, 6
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <vfprintf+0xcc>
    1b9c:	fa e0       	ldi	r31, 0x0A	; 10
    1b9e:	5f 9e       	mul	r5, r31
    1ba0:	30 0d       	add	r19, r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	53 2e       	mov	r5, r19
    1ba6:	13 c0       	rjmp	.+38     	; 0x1bce <vfprintf+0xf2>
    1ba8:	8a e0       	ldi	r24, 0x0A	; 10
    1baa:	38 9e       	mul	r3, r24
    1bac:	30 0d       	add	r19, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	33 2e       	mov	r3, r19
    1bb2:	20 62       	ori	r18, 0x20	; 32
    1bb4:	0c c0       	rjmp	.+24     	; 0x1bce <vfprintf+0xf2>
    1bb6:	8e 32       	cpi	r24, 0x2E	; 46
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <vfprintf+0xe6>
    1bba:	26 fd       	sbrc	r18, 6
    1bbc:	6b c1       	rjmp	.+726    	; 0x1e94 <vfprintf+0x3b8>
    1bbe:	20 64       	ori	r18, 0x40	; 64
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <vfprintf+0xf2>
    1bc2:	8c 36       	cpi	r24, 0x6C	; 108
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <vfprintf+0xee>
    1bc6:	20 68       	ori	r18, 0x80	; 128
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <vfprintf+0xf2>
    1bca:	88 36       	cpi	r24, 0x68	; 104
    1bcc:	41 f4       	brne	.+16     	; 0x1bde <vfprintf+0x102>
    1bce:	f6 01       	movw	r30, r12
    1bd0:	93 fd       	sbrc	r25, 3
    1bd2:	85 91       	lpm	r24, Z+
    1bd4:	93 ff       	sbrs	r25, 3
    1bd6:	81 91       	ld	r24, Z+
    1bd8:	6f 01       	movw	r12, r30
    1bda:	81 11       	cpse	r24, r1
    1bdc:	c1 cf       	rjmp	.-126    	; 0x1b60 <vfprintf+0x84>
    1bde:	98 2f       	mov	r25, r24
    1be0:	9f 7d       	andi	r25, 0xDF	; 223
    1be2:	95 54       	subi	r25, 0x45	; 69
    1be4:	93 30       	cpi	r25, 0x03	; 3
    1be6:	28 f4       	brcc	.+10     	; 0x1bf2 <vfprintf+0x116>
    1be8:	0c 5f       	subi	r16, 0xFC	; 252
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	ff e3       	ldi	r31, 0x3F	; 63
    1bee:	f9 83       	std	Y+1, r31	; 0x01
    1bf0:	0d c0       	rjmp	.+26     	; 0x1c0c <vfprintf+0x130>
    1bf2:	83 36       	cpi	r24, 0x63	; 99
    1bf4:	31 f0       	breq	.+12     	; 0x1c02 <vfprintf+0x126>
    1bf6:	83 37       	cpi	r24, 0x73	; 115
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <vfprintf+0x13a>
    1bfa:	83 35       	cpi	r24, 0x53	; 83
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <vfprintf+0x124>
    1bfe:	5b c0       	rjmp	.+182    	; 0x1cb6 <vfprintf+0x1da>
    1c00:	22 c0       	rjmp	.+68     	; 0x1c46 <vfprintf+0x16a>
    1c02:	f8 01       	movw	r30, r16
    1c04:	80 81       	ld	r24, Z
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	0e 5f       	subi	r16, 0xFE	; 254
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	44 24       	eor	r4, r4
    1c0e:	43 94       	inc	r4
    1c10:	51 2c       	mov	r5, r1
    1c12:	54 01       	movw	r10, r8
    1c14:	15 c0       	rjmp	.+42     	; 0x1c40 <vfprintf+0x164>
    1c16:	38 01       	movw	r6, r16
    1c18:	f2 e0       	ldi	r31, 0x02	; 2
    1c1a:	6f 0e       	add	r6, r31
    1c1c:	71 1c       	adc	r7, r1
    1c1e:	f8 01       	movw	r30, r16
    1c20:	a0 80       	ld	r10, Z
    1c22:	b1 80       	ldd	r11, Z+1	; 0x01
    1c24:	26 ff       	sbrs	r18, 6
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <vfprintf+0x152>
    1c28:	65 2d       	mov	r22, r5
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x156>
    1c2e:	6f ef       	ldi	r22, 0xFF	; 255
    1c30:	7f ef       	ldi	r23, 0xFF	; 255
    1c32:	c5 01       	movw	r24, r10
    1c34:	2c 87       	std	Y+12, r18	; 0x0c
    1c36:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strnlen>
    1c3a:	2c 01       	movw	r4, r24
    1c3c:	83 01       	movw	r16, r6
    1c3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c40:	2f 77       	andi	r18, 0x7F	; 127
    1c42:	22 2e       	mov	r2, r18
    1c44:	17 c0       	rjmp	.+46     	; 0x1c74 <vfprintf+0x198>
    1c46:	38 01       	movw	r6, r16
    1c48:	f2 e0       	ldi	r31, 0x02	; 2
    1c4a:	6f 0e       	add	r6, r31
    1c4c:	71 1c       	adc	r7, r1
    1c4e:	f8 01       	movw	r30, r16
    1c50:	a0 80       	ld	r10, Z
    1c52:	b1 80       	ldd	r11, Z+1	; 0x01
    1c54:	26 ff       	sbrs	r18, 6
    1c56:	03 c0       	rjmp	.+6      	; 0x1c5e <vfprintf+0x182>
    1c58:	65 2d       	mov	r22, r5
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <vfprintf+0x186>
    1c5e:	6f ef       	ldi	r22, 0xFF	; 255
    1c60:	7f ef       	ldi	r23, 0xFF	; 255
    1c62:	c5 01       	movw	r24, r10
    1c64:	2c 87       	std	Y+12, r18	; 0x0c
    1c66:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <strnlen_P>
    1c6a:	2c 01       	movw	r4, r24
    1c6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c6e:	20 68       	ori	r18, 0x80	; 128
    1c70:	22 2e       	mov	r2, r18
    1c72:	83 01       	movw	r16, r6
    1c74:	23 fc       	sbrc	r2, 3
    1c76:	1b c0       	rjmp	.+54     	; 0x1cae <vfprintf+0x1d2>
    1c78:	83 2d       	mov	r24, r3
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	48 16       	cp	r4, r24
    1c7e:	59 06       	cpc	r5, r25
    1c80:	b0 f4       	brcc	.+44     	; 0x1cae <vfprintf+0x1d2>
    1c82:	b7 01       	movw	r22, r14
    1c84:	80 e2       	ldi	r24, 0x20	; 32
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1c8c:	3a 94       	dec	r3
    1c8e:	f4 cf       	rjmp	.-24     	; 0x1c78 <vfprintf+0x19c>
    1c90:	f5 01       	movw	r30, r10
    1c92:	27 fc       	sbrc	r2, 7
    1c94:	85 91       	lpm	r24, Z+
    1c96:	27 fe       	sbrs	r2, 7
    1c98:	81 91       	ld	r24, Z+
    1c9a:	5f 01       	movw	r10, r30
    1c9c:	b7 01       	movw	r22, r14
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1ca4:	31 10       	cpse	r3, r1
    1ca6:	3a 94       	dec	r3
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	4f 1a       	sub	r4, r31
    1cac:	51 08       	sbc	r5, r1
    1cae:	41 14       	cp	r4, r1
    1cb0:	51 04       	cpc	r5, r1
    1cb2:	71 f7       	brne	.-36     	; 0x1c90 <vfprintf+0x1b4>
    1cb4:	e5 c0       	rjmp	.+458    	; 0x1e80 <vfprintf+0x3a4>
    1cb6:	84 36       	cpi	r24, 0x64	; 100
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <vfprintf+0x1e2>
    1cba:	89 36       	cpi	r24, 0x69	; 105
    1cbc:	39 f5       	brne	.+78     	; 0x1d0c <vfprintf+0x230>
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	27 ff       	sbrs	r18, 7
    1cc2:	07 c0       	rjmp	.+14     	; 0x1cd2 <vfprintf+0x1f6>
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0c 5f       	subi	r16, 0xFC	; 252
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <vfprintf+0x206>
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	88 27       	eor	r24, r24
    1cd8:	77 fd       	sbrc	r23, 7
    1cda:	80 95       	com	r24
    1cdc:	98 2f       	mov	r25, r24
    1cde:	0e 5f       	subi	r16, 0xFE	; 254
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	2f 76       	andi	r18, 0x6F	; 111
    1ce4:	b2 2e       	mov	r11, r18
    1ce6:	97 ff       	sbrs	r25, 7
    1ce8:	09 c0       	rjmp	.+18     	; 0x1cfc <vfprintf+0x220>
    1cea:	90 95       	com	r25
    1cec:	80 95       	com	r24
    1cee:	70 95       	com	r23
    1cf0:	61 95       	neg	r22
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	20 68       	ori	r18, 0x80	; 128
    1cfa:	b2 2e       	mov	r11, r18
    1cfc:	2a e0       	ldi	r18, 0x0A	; 10
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	a4 01       	movw	r20, r8
    1d02:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__ultoa_invert>
    1d06:	a8 2e       	mov	r10, r24
    1d08:	a8 18       	sub	r10, r8
    1d0a:	44 c0       	rjmp	.+136    	; 0x1d94 <vfprintf+0x2b8>
    1d0c:	85 37       	cpi	r24, 0x75	; 117
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <vfprintf+0x23e>
    1d10:	2f 7e       	andi	r18, 0xEF	; 239
    1d12:	b2 2e       	mov	r11, r18
    1d14:	2a e0       	ldi	r18, 0x0A	; 10
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	25 c0       	rjmp	.+74     	; 0x1d64 <vfprintf+0x288>
    1d1a:	f2 2f       	mov	r31, r18
    1d1c:	f9 7f       	andi	r31, 0xF9	; 249
    1d1e:	bf 2e       	mov	r11, r31
    1d20:	8f 36       	cpi	r24, 0x6F	; 111
    1d22:	c1 f0       	breq	.+48     	; 0x1d54 <vfprintf+0x278>
    1d24:	18 f4       	brcc	.+6      	; 0x1d2c <vfprintf+0x250>
    1d26:	88 35       	cpi	r24, 0x58	; 88
    1d28:	79 f0       	breq	.+30     	; 0x1d48 <vfprintf+0x26c>
    1d2a:	b4 c0       	rjmp	.+360    	; 0x1e94 <vfprintf+0x3b8>
    1d2c:	80 37       	cpi	r24, 0x70	; 112
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <vfprintf+0x25a>
    1d30:	88 37       	cpi	r24, 0x78	; 120
    1d32:	21 f0       	breq	.+8      	; 0x1d3c <vfprintf+0x260>
    1d34:	af c0       	rjmp	.+350    	; 0x1e94 <vfprintf+0x3b8>
    1d36:	2f 2f       	mov	r18, r31
    1d38:	20 61       	ori	r18, 0x10	; 16
    1d3a:	b2 2e       	mov	r11, r18
    1d3c:	b4 fe       	sbrs	r11, 4
    1d3e:	0d c0       	rjmp	.+26     	; 0x1d5a <vfprintf+0x27e>
    1d40:	8b 2d       	mov	r24, r11
    1d42:	84 60       	ori	r24, 0x04	; 4
    1d44:	b8 2e       	mov	r11, r24
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <vfprintf+0x27e>
    1d48:	24 ff       	sbrs	r18, 4
    1d4a:	0a c0       	rjmp	.+20     	; 0x1d60 <vfprintf+0x284>
    1d4c:	9f 2f       	mov	r25, r31
    1d4e:	96 60       	ori	r25, 0x06	; 6
    1d50:	b9 2e       	mov	r11, r25
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <vfprintf+0x284>
    1d54:	28 e0       	ldi	r18, 0x08	; 8
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <vfprintf+0x288>
    1d5a:	20 e1       	ldi	r18, 0x10	; 16
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <vfprintf+0x288>
    1d60:	20 e1       	ldi	r18, 0x10	; 16
    1d62:	32 e0       	ldi	r19, 0x02	; 2
    1d64:	f8 01       	movw	r30, r16
    1d66:	b7 fe       	sbrs	r11, 7
    1d68:	07 c0       	rjmp	.+14     	; 0x1d78 <vfprintf+0x29c>
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	0c 5f       	subi	r16, 0xFC	; 252
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <vfprintf+0x2a8>
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 5f       	subi	r16, 0xFE	; 254
    1d82:	1f 4f       	sbci	r17, 0xFF	; 255
    1d84:	a4 01       	movw	r20, r8
    1d86:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__ultoa_invert>
    1d8a:	a8 2e       	mov	r10, r24
    1d8c:	a8 18       	sub	r10, r8
    1d8e:	fb 2d       	mov	r31, r11
    1d90:	ff 77       	andi	r31, 0x7F	; 127
    1d92:	bf 2e       	mov	r11, r31
    1d94:	b6 fe       	sbrs	r11, 6
    1d96:	0b c0       	rjmp	.+22     	; 0x1dae <vfprintf+0x2d2>
    1d98:	2b 2d       	mov	r18, r11
    1d9a:	2e 7f       	andi	r18, 0xFE	; 254
    1d9c:	a5 14       	cp	r10, r5
    1d9e:	50 f4       	brcc	.+20     	; 0x1db4 <vfprintf+0x2d8>
    1da0:	b4 fe       	sbrs	r11, 4
    1da2:	0a c0       	rjmp	.+20     	; 0x1db8 <vfprintf+0x2dc>
    1da4:	b2 fc       	sbrc	r11, 2
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <vfprintf+0x2dc>
    1da8:	2b 2d       	mov	r18, r11
    1daa:	2e 7e       	andi	r18, 0xEE	; 238
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <vfprintf+0x2dc>
    1dae:	7a 2c       	mov	r7, r10
    1db0:	2b 2d       	mov	r18, r11
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <vfprintf+0x2de>
    1db4:	7a 2c       	mov	r7, r10
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <vfprintf+0x2de>
    1db8:	75 2c       	mov	r7, r5
    1dba:	24 ff       	sbrs	r18, 4
    1dbc:	0d c0       	rjmp	.+26     	; 0x1dd8 <vfprintf+0x2fc>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ea 0d       	add	r30, r10
    1dc2:	f1 1d       	adc	r31, r1
    1dc4:	80 81       	ld	r24, Z
    1dc6:	80 33       	cpi	r24, 0x30	; 48
    1dc8:	11 f4       	brne	.+4      	; 0x1dce <vfprintf+0x2f2>
    1dca:	29 7e       	andi	r18, 0xE9	; 233
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <vfprintf+0x304>
    1dce:	22 ff       	sbrs	r18, 2
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <vfprintf+0x302>
    1dd2:	73 94       	inc	r7
    1dd4:	73 94       	inc	r7
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <vfprintf+0x304>
    1dd8:	82 2f       	mov	r24, r18
    1dda:	86 78       	andi	r24, 0x86	; 134
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <vfprintf+0x304>
    1dde:	73 94       	inc	r7
    1de0:	23 fd       	sbrc	r18, 3
    1de2:	13 c0       	rjmp	.+38     	; 0x1e0a <vfprintf+0x32e>
    1de4:	20 ff       	sbrs	r18, 0
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <vfprintf+0x318>
    1de8:	5a 2c       	mov	r5, r10
    1dea:	73 14       	cp	r7, r3
    1dec:	18 f4       	brcc	.+6      	; 0x1df4 <vfprintf+0x318>
    1dee:	53 0c       	add	r5, r3
    1df0:	57 18       	sub	r5, r7
    1df2:	73 2c       	mov	r7, r3
    1df4:	73 14       	cp	r7, r3
    1df6:	68 f4       	brcc	.+26     	; 0x1e12 <vfprintf+0x336>
    1df8:	b7 01       	movw	r22, r14
    1dfa:	80 e2       	ldi	r24, 0x20	; 32
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	2c 87       	std	Y+12, r18	; 0x0c
    1e00:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1e04:	73 94       	inc	r7
    1e06:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e08:	f5 cf       	rjmp	.-22     	; 0x1df4 <vfprintf+0x318>
    1e0a:	73 14       	cp	r7, r3
    1e0c:	10 f4       	brcc	.+4      	; 0x1e12 <vfprintf+0x336>
    1e0e:	37 18       	sub	r3, r7
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <vfprintf+0x338>
    1e12:	31 2c       	mov	r3, r1
    1e14:	24 ff       	sbrs	r18, 4
    1e16:	12 c0       	rjmp	.+36     	; 0x1e3c <vfprintf+0x360>
    1e18:	b7 01       	movw	r22, r14
    1e1a:	80 e3       	ldi	r24, 0x30	; 48
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	2c 87       	std	Y+12, r18	; 0x0c
    1e20:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1e24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e26:	22 ff       	sbrs	r18, 2
    1e28:	17 c0       	rjmp	.+46     	; 0x1e58 <vfprintf+0x37c>
    1e2a:	21 ff       	sbrs	r18, 1
    1e2c:	03 c0       	rjmp	.+6      	; 0x1e34 <vfprintf+0x358>
    1e2e:	88 e5       	ldi	r24, 0x58	; 88
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <vfprintf+0x35c>
    1e34:	88 e7       	ldi	r24, 0x78	; 120
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	b7 01       	movw	r22, r14
    1e3a:	0c c0       	rjmp	.+24     	; 0x1e54 <vfprintf+0x378>
    1e3c:	82 2f       	mov	r24, r18
    1e3e:	86 78       	andi	r24, 0x86	; 134
    1e40:	59 f0       	breq	.+22     	; 0x1e58 <vfprintf+0x37c>
    1e42:	21 fd       	sbrc	r18, 1
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <vfprintf+0x36e>
    1e46:	80 e2       	ldi	r24, 0x20	; 32
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <vfprintf+0x370>
    1e4a:	8b e2       	ldi	r24, 0x2B	; 43
    1e4c:	27 fd       	sbrc	r18, 7
    1e4e:	8d e2       	ldi	r24, 0x2D	; 45
    1e50:	b7 01       	movw	r22, r14
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1e58:	a5 14       	cp	r10, r5
    1e5a:	38 f4       	brcc	.+14     	; 0x1e6a <vfprintf+0x38e>
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	80 e3       	ldi	r24, 0x30	; 48
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1e66:	5a 94       	dec	r5
    1e68:	f7 cf       	rjmp	.-18     	; 0x1e58 <vfprintf+0x37c>
    1e6a:	aa 94       	dec	r10
    1e6c:	f4 01       	movw	r30, r8
    1e6e:	ea 0d       	add	r30, r10
    1e70:	f1 1d       	adc	r31, r1
    1e72:	80 81       	ld	r24, Z
    1e74:	b7 01       	movw	r22, r14
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1e7c:	a1 10       	cpse	r10, r1
    1e7e:	f5 cf       	rjmp	.-22     	; 0x1e6a <vfprintf+0x38e>
    1e80:	33 20       	and	r3, r3
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <vfprintf+0x3aa>
    1e84:	51 ce       	rjmp	.-862    	; 0x1b28 <vfprintf+0x4c>
    1e86:	b7 01       	movw	r22, r14
    1e88:	80 e2       	ldi	r24, 0x20	; 32
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <fputc>
    1e90:	3a 94       	dec	r3
    1e92:	f6 cf       	rjmp	.-20     	; 0x1e80 <vfprintf+0x3a4>
    1e94:	f7 01       	movw	r30, r14
    1e96:	86 81       	ldd	r24, Z+6	; 0x06
    1e98:	97 81       	ldd	r25, Z+7	; 0x07
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <vfprintf+0x3c4>
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ea0:	2c 96       	adiw	r28, 0x0c	; 12
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	ff 90       	pop	r15
    1eb6:	ef 90       	pop	r14
    1eb8:	df 90       	pop	r13
    1eba:	cf 90       	pop	r12
    1ebc:	bf 90       	pop	r11
    1ebe:	af 90       	pop	r10
    1ec0:	9f 90       	pop	r9
    1ec2:	8f 90       	pop	r8
    1ec4:	7f 90       	pop	r7
    1ec6:	6f 90       	pop	r6
    1ec8:	5f 90       	pop	r5
    1eca:	4f 90       	pop	r4
    1ecc:	3f 90       	pop	r3
    1ece:	2f 90       	pop	r2
    1ed0:	08 95       	ret

00001ed2 <__eerd_block_m1284p>:
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22

00001ed6 <__eerd_blraw_m1284p>:
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	f9 99       	sbic	0x1f, 1	; 31
    1eda:	fe cf       	rjmp	.-4      	; 0x1ed8 <__eerd_blraw_m1284p+0x2>
    1edc:	06 c0       	rjmp	.+12     	; 0x1eea <__eerd_blraw_m1284p+0x14>
    1ede:	f2 bd       	out	0x22, r31	; 34
    1ee0:	e1 bd       	out	0x21, r30	; 33
    1ee2:	f8 9a       	sbi	0x1f, 0	; 31
    1ee4:	31 96       	adiw	r30, 0x01	; 1
    1ee6:	00 b4       	in	r0, 0x20	; 32
    1ee8:	0d 92       	st	X+, r0
    1eea:	41 50       	subi	r20, 0x01	; 1
    1eec:	50 40       	sbci	r21, 0x00	; 0
    1eee:	b8 f7       	brcc	.-18     	; 0x1ede <__eerd_blraw_m1284p+0x8>
    1ef0:	08 95       	ret

00001ef2 <__eerd_byte_m1284p>:
    1ef2:	f9 99       	sbic	0x1f, 1	; 31
    1ef4:	fe cf       	rjmp	.-4      	; 0x1ef2 <__eerd_byte_m1284p>
    1ef6:	92 bd       	out	0x22, r25	; 34
    1ef8:	81 bd       	out	0x21, r24	; 33
    1efa:	f8 9a       	sbi	0x1f, 0	; 31
    1efc:	99 27       	eor	r25, r25
    1efe:	80 b5       	in	r24, 0x20	; 32
    1f00:	08 95       	ret

00001f02 <__eerd_dword_m1284p>:
    1f02:	a6 e1       	ldi	r26, 0x16	; 22
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	44 e0       	ldi	r20, 0x04	; 4
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__eerd_blraw_m1284p>

00001f0e <__eewr_byte_m1284p>:
    1f0e:	26 2f       	mov	r18, r22

00001f10 <__eewr_r18_m1284p>:
    1f10:	f9 99       	sbic	0x1f, 1	; 31
    1f12:	fe cf       	rjmp	.-4      	; 0x1f10 <__eewr_r18_m1284p>
    1f14:	1f ba       	out	0x1f, r1	; 31
    1f16:	92 bd       	out	0x22, r25	; 34
    1f18:	81 bd       	out	0x21, r24	; 33
    1f1a:	20 bd       	out	0x20, r18	; 32
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	fa 9a       	sbi	0x1f, 2	; 31
    1f22:	f9 9a       	sbi	0x1f, 1	; 31
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	08 95       	ret

00001f2a <strnlen_P>:
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	05 90       	lpm	r0, Z+
    1f2e:	61 50       	subi	r22, 0x01	; 1
    1f30:	70 40       	sbci	r23, 0x00	; 0
    1f32:	01 10       	cpse	r0, r1
    1f34:	d8 f7       	brcc	.-10     	; 0x1f2c <strnlen_P+0x2>
    1f36:	80 95       	com	r24
    1f38:	90 95       	com	r25
    1f3a:	8e 0f       	add	r24, r30
    1f3c:	9f 1f       	adc	r25, r31
    1f3e:	08 95       	ret

00001f40 <strnlen>:
    1f40:	fc 01       	movw	r30, r24
    1f42:	61 50       	subi	r22, 0x01	; 1
    1f44:	70 40       	sbci	r23, 0x00	; 0
    1f46:	01 90       	ld	r0, Z+
    1f48:	01 10       	cpse	r0, r1
    1f4a:	d8 f7       	brcc	.-10     	; 0x1f42 <strnlen+0x2>
    1f4c:	80 95       	com	r24
    1f4e:	90 95       	com	r25
    1f50:	8e 0f       	add	r24, r30
    1f52:	9f 1f       	adc	r25, r31
    1f54:	08 95       	ret

00001f56 <fputc>:
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	18 2f       	mov	r17, r24
    1f60:	09 2f       	mov	r16, r25
    1f62:	eb 01       	movw	r28, r22
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	81 fd       	sbrc	r24, 1
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <fputc+0x1a>
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	20 c0       	rjmp	.+64     	; 0x1fb0 <fputc+0x5a>
    1f70:	82 ff       	sbrs	r24, 2
    1f72:	10 c0       	rjmp	.+32     	; 0x1f94 <fputc+0x3e>
    1f74:	4e 81       	ldd	r20, Y+6	; 0x06
    1f76:	5f 81       	ldd	r21, Y+7	; 0x07
    1f78:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7c:	42 17       	cp	r20, r18
    1f7e:	53 07       	cpc	r21, r19
    1f80:	7c f4       	brge	.+30     	; 0x1fa0 <fputc+0x4a>
    1f82:	e8 81       	ld	r30, Y
    1f84:	f9 81       	ldd	r31, Y+1	; 0x01
    1f86:	9f 01       	movw	r18, r30
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	39 83       	std	Y+1, r19	; 0x01
    1f8e:	28 83       	st	Y, r18
    1f90:	10 83       	st	Z, r17
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <fputc+0x4a>
    1f94:	e8 85       	ldd	r30, Y+8	; 0x08
    1f96:	f9 85       	ldd	r31, Y+9	; 0x09
    1f98:	81 2f       	mov	r24, r17
    1f9a:	09 95       	icall
    1f9c:	89 2b       	or	r24, r25
    1f9e:	29 f7       	brne	.-54     	; 0x1f6a <fputc+0x14>
    1fa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa4:	2f 5f       	subi	r18, 0xFF	; 255
    1fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa8:	3f 83       	std	Y+7, r19	; 0x07
    1faa:	2e 83       	std	Y+6, r18	; 0x06
    1fac:	81 2f       	mov	r24, r17
    1fae:	90 2f       	mov	r25, r16
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <__ultoa_invert>:
    1fba:	fa 01       	movw	r30, r20
    1fbc:	aa 27       	eor	r26, r26
    1fbe:	28 30       	cpi	r18, 0x08	; 8
    1fc0:	51 f1       	breq	.+84     	; 0x2016 <__ultoa_invert+0x5c>
    1fc2:	20 31       	cpi	r18, 0x10	; 16
    1fc4:	81 f1       	breq	.+96     	; 0x2026 <__ultoa_invert+0x6c>
    1fc6:	e8 94       	clt
    1fc8:	6f 93       	push	r22
    1fca:	6e 7f       	andi	r22, 0xFE	; 254
    1fcc:	6e 5f       	subi	r22, 0xFE	; 254
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	af 4f       	sbci	r26, 0xFF	; 255
    1fd6:	b1 e0       	ldi	r27, 0x01	; 1
    1fd8:	3e d0       	rcall	.+124    	; 0x2056 <__ultoa_invert+0x9c>
    1fda:	b4 e0       	ldi	r27, 0x04	; 4
    1fdc:	3c d0       	rcall	.+120    	; 0x2056 <__ultoa_invert+0x9c>
    1fde:	67 0f       	add	r22, r23
    1fe0:	78 1f       	adc	r23, r24
    1fe2:	89 1f       	adc	r24, r25
    1fe4:	9a 1f       	adc	r25, r26
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	68 0f       	add	r22, r24
    1fea:	79 1f       	adc	r23, r25
    1fec:	8a 1f       	adc	r24, r26
    1fee:	91 1d       	adc	r25, r1
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	6a 0f       	add	r22, r26
    1ff4:	71 1d       	adc	r23, r1
    1ff6:	81 1d       	adc	r24, r1
    1ff8:	91 1d       	adc	r25, r1
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	20 d0       	rcall	.+64     	; 0x203e <__ultoa_invert+0x84>
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <__ultoa_invert+0x48>
    2000:	68 94       	set
    2002:	3f 91       	pop	r19
    2004:	2a e0       	ldi	r18, 0x0A	; 10
    2006:	26 9f       	mul	r18, r22
    2008:	11 24       	eor	r1, r1
    200a:	30 19       	sub	r19, r0
    200c:	30 5d       	subi	r19, 0xD0	; 208
    200e:	31 93       	st	Z+, r19
    2010:	de f6       	brtc	.-74     	; 0x1fc8 <__ultoa_invert+0xe>
    2012:	cf 01       	movw	r24, r30
    2014:	08 95       	ret
    2016:	46 2f       	mov	r20, r22
    2018:	47 70       	andi	r20, 0x07	; 7
    201a:	40 5d       	subi	r20, 0xD0	; 208
    201c:	41 93       	st	Z+, r20
    201e:	b3 e0       	ldi	r27, 0x03	; 3
    2020:	0f d0       	rcall	.+30     	; 0x2040 <__ultoa_invert+0x86>
    2022:	c9 f7       	brne	.-14     	; 0x2016 <__ultoa_invert+0x5c>
    2024:	f6 cf       	rjmp	.-20     	; 0x2012 <__ultoa_invert+0x58>
    2026:	46 2f       	mov	r20, r22
    2028:	4f 70       	andi	r20, 0x0F	; 15
    202a:	40 5d       	subi	r20, 0xD0	; 208
    202c:	4a 33       	cpi	r20, 0x3A	; 58
    202e:	18 f0       	brcs	.+6      	; 0x2036 <__ultoa_invert+0x7c>
    2030:	49 5d       	subi	r20, 0xD9	; 217
    2032:	31 fd       	sbrc	r19, 1
    2034:	40 52       	subi	r20, 0x20	; 32
    2036:	41 93       	st	Z+, r20
    2038:	02 d0       	rcall	.+4      	; 0x203e <__ultoa_invert+0x84>
    203a:	a9 f7       	brne	.-22     	; 0x2026 <__ultoa_invert+0x6c>
    203c:	ea cf       	rjmp	.-44     	; 0x2012 <__ultoa_invert+0x58>
    203e:	b4 e0       	ldi	r27, 0x04	; 4
    2040:	a6 95       	lsr	r26
    2042:	97 95       	ror	r25
    2044:	87 95       	ror	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	ba 95       	dec	r27
    204c:	c9 f7       	brne	.-14     	; 0x2040 <__ultoa_invert+0x86>
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	61 05       	cpc	r22, r1
    2052:	71 05       	cpc	r23, r1
    2054:	08 95       	ret
    2056:	9b 01       	movw	r18, r22
    2058:	ac 01       	movw	r20, r24
    205a:	0a 2e       	mov	r0, r26
    205c:	06 94       	lsr	r0
    205e:	57 95       	ror	r21
    2060:	47 95       	ror	r20
    2062:	37 95       	ror	r19
    2064:	27 95       	ror	r18
    2066:	ba 95       	dec	r27
    2068:	c9 f7       	brne	.-14     	; 0x205c <__ultoa_invert+0xa2>
    206a:	62 0f       	add	r22, r18
    206c:	73 1f       	adc	r23, r19
    206e:	84 1f       	adc	r24, r20
    2070:	95 1f       	adc	r25, r21
    2072:	a0 1d       	adc	r26, r0
    2074:	08 95       	ret

00002076 <_exit>:
    2076:	f8 94       	cli

00002078 <__stop_program>:
    2078:	ff cf       	rjmp	.-2      	; 0x2078 <__stop_program>
