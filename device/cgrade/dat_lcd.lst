
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00002004  00002098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002004  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  008001a0  008001a0  00002138  2**0
                  ALLOC
  3 .stab         00008b5c  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022b3  00000000  00000000  0000ac94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000cf47  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <print_all_known_stations+0x64>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e4 e0       	ldi	r30, 0x04	; 4
     122:	f0 e2       	ldi	r31, 0x20	; 32
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a0 3a       	cpi	r26, 0xA0	; 160
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	13 e0       	ldi	r17, 0x03	; 3
     136:	a0 ea       	ldi	r26, 0xA0	; 160
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	af 3c       	cpi	r26, 0xCF	; 207
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 58 07 	call	0xeb0	; 0xeb0 <main>
     148:	0c 94 00 10 	jmp	0x2000	; 0x2000 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     150:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     154:	8c e0       	ldi	r24, 0x0C	; 12
     156:	80 93 cc 00 	sts	0x00CC, r24
    
    // Enable The Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     15a:	e9 ec       	ldi	r30, 0xC9	; 201
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 6d       	ori	r24, 0xD8	; 216
     162:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     164:	e8 ec       	ldi	r30, 0xC8	; 200
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 83       	st	Z, r24
    
    // Set the Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     16e:	ea ec       	ldi	r30, 0xCA	; 202
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	8e 60       	ori	r24, 0x0E	; 14
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <peekChar>:

char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     17a:	90 91 b4 01 	lds	r25, 0x01B4
     17e:	80 91 b3 01 	lds	r24, 0x01B3
     182:	98 17       	cp	r25, r24
     184:	39 f0       	breq	.+14     	; 0x194 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     186:	e0 91 b4 01 	lds	r30, 0x01B4
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	e5 5b       	subi	r30, 0xB5	; 181
     18e:	fc 4f       	sbci	r31, 0xFC	; 252
     190:	80 81       	ld	r24, Z
     192:	08 95       	ret
    //stdout= &my_stream;
}

char peekChar(void)
{
    char ret = '\0';
     194:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     196:	08 95       	ret

00000198 <getChar>:

char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     198:	e0 91 b4 01 	lds	r30, 0x01B4
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	e5 5b       	subi	r30, 0xB5	; 181
     1a0:	fc 4f       	sbci	r31, 0xFC	; 252
     1a2:	80 81       	ld	r24, Z
     
    rxReadPos++;
     1a4:	90 91 b4 01 	lds	r25, 0x01B4
     1a8:	9f 5f       	subi	r25, 0xFF	; 255
     1aa:	90 93 b4 01 	sts	0x01B4, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     1ae:	90 91 b4 01 	lds	r25, 0x01B4
     1b2:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     1b4:	10 92 b4 01 	sts	0x01B4, r1
    }
    
    return ret;
}
     1b8:	08 95       	ret

000001ba <detectSerialStart>:

int detectSerialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     1ba:	80 91 b0 01 	lds	r24, 0x01B0
     1be:	90 91 01 01 	lds	r25, 0x0101
     1c2:	89 13       	cpse	r24, r25
     1c4:	0c c0       	rjmp	.+24     	; 0x1de <detectSerialStart+0x24>
     1c6:	20 91 b1 01 	lds	r18, 0x01B1
     1ca:	28 13       	cpse	r18, r24
     1cc:	08 c0       	rjmp	.+16     	; 0x1de <detectSerialStart+0x24>
     1ce:	30 91 b2 01 	lds	r19, 0x01B2
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	32 17       	cp	r19, r18
     1d8:	21 f0       	breq	.+8      	; 0x1e2 <detectSerialStart+0x28>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	08 95       	ret
        return 1;
    else
        return 0;
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
}
     1e2:	08 95       	ret

000001e4 <__vector_28>:
    char b[sizeof(float)];
};


//serial receive interrupt behavior
ISR(USART1_RX_vect){
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	0b b6       	in	r0, 0x3b	; 59
     1f0:	0f 92       	push	r0
     1f2:	2f 93       	push	r18
     1f4:	3f 93       	push	r19
     1f6:	4f 93       	push	r20
     1f8:	5f 93       	push	r21
     1fa:	6f 93       	push	r22
     1fc:	7f 93       	push	r23
     1fe:	8f 93       	push	r24
     200:	9f 93       	push	r25
     202:	af 93       	push	r26
     204:	bf 93       	push	r27
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     20a:	80 91 b1 01 	lds	r24, 0x01B1
     20e:	80 93 b2 01 	sts	0x01B2, r24
    serial_history[1] = serial_history[0];
     212:	80 91 b0 01 	lds	r24, 0x01B0
     216:	80 93 b1 01 	sts	0x01B1, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     21a:	80 91 ce 00 	lds	r24, 0x00CE
     21e:	80 93 b0 01 	sts	0x01B0, r24

    //if a serial update is in progress, write to the receive buffer
    if (op_mode==MD_UPDATE)
     222:	80 91 aa 01 	lds	r24, 0x01AA
     226:	90 91 ab 01 	lds	r25, 0x01AB
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     22e:	e0 91 b3 01 	lds	r30, 0x01B3
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 91 b0 01 	lds	r24, 0x01B0
     238:	e5 5b       	subi	r30, 0xB5	; 181
     23a:	fc 4f       	sbci	r31, 0xFC	; 252
     23c:	80 83       	st	Z, r24
        rxWritePos++;
     23e:	80 91 b3 01 	lds	r24, 0x01B3
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 b3 01 	sts	0x01B3, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(detectSerialStart()){
     248:	0e 94 dd 00 	call	0x1ba	; 0x1ba <detectSerialStart>
     24c:	89 2b       	or	r24, r25
     24e:	31 f0       	breq	.+12     	; 0x25c <__vector_28+0x78>
        op_mode = MD_UPDATE;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 ab 01 	sts	0x01AB, r25
     258:	80 93 aa 01 	sts	0x01AA, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     25c:	80 91 b3 01 	lds	r24, 0x01B3
     260:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     262:	10 92 b3 01 	sts	0x01B3, r1
    }

}
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	7f 91       	pop	r23
     274:	6f 91       	pop	r22
     276:	5f 91       	pop	r21
     278:	4f 91       	pop	r20
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0b be       	out	0x3b, r0	; 59
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <detectSerialEnd>:
        return 0;
}

int detectSerialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     28c:	80 91 b0 01 	lds	r24, 0x01B0
     290:	90 91 00 01 	lds	r25, 0x0100
     294:	89 13       	cpse	r24, r25
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <detectSerialEnd+0x24>
     298:	20 91 b1 01 	lds	r18, 0x01B1
     29c:	28 13       	cpse	r18, r24
     29e:	08 c0       	rjmp	.+16     	; 0x2b0 <detectSerialEnd+0x24>
     2a0:	30 91 b2 01 	lds	r19, 0x01B2
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	32 17       	cp	r19, r18
     2aa:	21 f0       	breq	.+8      	; 0x2b4 <detectSerialEnd+0x28>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	08 95       	ret
        return 1;
    else
        return 0;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
}
     2b4:	08 95       	ret

000002b6 <my_eeprom_read_int>:

int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     2b6:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__eerd_byte_m1284p>
    return (temp_num);
}
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	08 95       	ret

000002be <my_eeprom_read_char>:

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     2be:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__eerd_byte_m1284p>

000002c2 <my_eeprom_read_float>:
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     2c2:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__eerd_dword_m1284p>

000002c6 <my_eeprom_read_string>:
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     2c6:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__eerd_block_m1284p>

000002ca <string_write_int>:
}

void string_write_int(int num, int num_digits)
{
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	18 2f       	mov	r17, r24
     2d4:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     2d6:	cb 01       	movw	r24, r22
     2d8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <malloc>
     2dc:	d8 2f       	mov	r29, r24
     2de:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	2a e0       	ldi	r18, 0x0A	; 10
     2e6:	31 e0       	ldi	r19, 0x01	; 1
     2e8:	3f 93       	push	r19
     2ea:	2f 93       	push	r18
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <sprintf>
    string_write(temp);
     2f4:	8d 2f       	mov	r24, r29
     2f6:	9c 2f       	mov	r25, r28
     2f8:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    free(temp);
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	8d 2f       	mov	r24, r29
     30a:	9c 2f       	mov	r25, r28
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     314:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <free>

00000318 <string_write_float>:
}

void string_write_float(float num, int dec_digits)
{
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <string_write_float+0x12>
     32a:	00 d0       	rcall	.+0      	; 0x32c <string_write_float+0x14>
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     332:	ae 01       	movw	r20, r28
     334:	4f 5f       	subi	r20, 0xFF	; 255
     336:	5f 4f       	sbci	r21, 0xFF	; 255
     338:	0e 94 bc 09 	call	0x1378	; 0x1378 <modf>
     33c:	6b 01       	movw	r12, r22
     33e:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	7a 81       	ldd	r23, Y+2	; 0x02
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixsfsi>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	64 e0       	ldi	r22, 0x04	; 4
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	0e 94 65 01 	call	0x2ca	; 0x2ca <string_write_int>
     358:	8e e9       	ldi	r24, 0x9E	; 158
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     360:	b8 01       	movw	r22, r16
     362:	88 27       	eor	r24, r24
     364:	77 fd       	sbrc	r23, 7
     366:	80 95       	com	r24
     368:	98 2f       	mov	r25, r24
     36a:	0e 94 8e 08 	call	0x111c	; 0x111c <__floatsisf>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 e2       	ldi	r24, 0x20	; 32
     378:	91 e4       	ldi	r25, 0x41	; 65
     37a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <pow>
     37e:	9b 01       	movw	r18, r22
     380:	ac 01       	movw	r20, r24
     382:	c7 01       	movw	r24, r14
     384:	b6 01       	movw	r22, r12
     386:	0e 94 ef 09 	call	0x13de	; 0x13de <__mulsf3>
     38a:	0e 94 9e 0a 	call	0x153c	; 0x153c <round>
     38e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixsfsi>
     392:	7b 01       	movw	r14, r22
     394:	77 ff       	sbrs	r23, 7
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <string_write_float+0x88>
     398:	ee 24       	eor	r14, r14
     39a:	ff 24       	eor	r15, r15
     39c:	e6 1a       	sub	r14, r22
     39e:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     3a0:	e1 14       	cp	r14, r1
     3a2:	f1 04       	cpc	r15, r1
     3a4:	a1 f0       	breq	.+40     	; 0x3ce <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     3a6:	b7 01       	movw	r22, r14
     3a8:	88 27       	eor	r24, r24
     3aa:	77 fd       	sbrc	r23, 7
     3ac:	80 95       	com	r24
     3ae:	98 2f       	mov	r25, r24
     3b0:	0e 94 8e 08 	call	0x111c	; 0x111c <__floatsisf>
     3b4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <log10>
     3b8:	0e 94 c9 08 	call	0x1192	; 0x1192 <floor>
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 e8       	ldi	r20, 0x80	; 128
     3c2:	5f e3       	ldi	r21, 0x3F	; 63
     3c4:	0e 94 f7 07 	call	0xfee	; 0xfee <__addsf3>
     3c8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixsfsi>
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <string_write_float+0xba>
    } else {
        digits = 0;
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     3d2:	c1 2c       	mov	r12, r1
     3d4:	d1 2c       	mov	r13, r1
     3d6:	06 1b       	sub	r16, r22
     3d8:	17 0b       	sbc	r17, r23
     3da:	c0 16       	cp	r12, r16
     3dc:	d1 06       	cpc	r13, r17
     3de:	44 f4       	brge	.+16     	; 0x3f0 <string_write_float+0xd8>
    {
        string_write("0");
     3e0:	8d e0       	ldi	r24, 0x0D	; 13
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	c8 1a       	sub	r12, r24
     3ec:	d8 0a       	sbc	r13, r24
     3ee:	f5 cf       	rjmp	.-22     	; 0x3da <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     3f0:	64 e0       	ldi	r22, 0x04	; 4
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	c7 01       	movw	r24, r14
}
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     40e:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <string_write_int>

00000412 <print_eeprom_contents>:
}

void print_eeprom_contents(int start_addr, int end_addr)
{
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
     41c:	8b 01       	movw	r16, r22
    int i=0;
    char one_byte;

    if (end_addr == -1)
     41e:	6f 3f       	cpi	r22, 0xFF	; 255
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	78 07       	cpc	r23, r24
     424:	61 f4       	brne	.+24     	; 0x43e <print_eeprom_contents+0x2c>
        end_addr = 1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE;
     426:	80 91 45 03 	lds	r24, 0x0345
     42a:	90 91 46 03 	lds	r25, 0x0346
     42e:	2c e1       	ldi	r18, 0x1C	; 28
     430:	28 9f       	mul	r18, r24
     432:	80 01       	movw	r16, r0
     434:	29 9f       	mul	r18, r25
     436:	10 0d       	add	r17, r0
     438:	11 24       	eor	r1, r1
     43a:	0b 59       	subi	r16, 0x9B	; 155
     43c:	1f 4f       	sbci	r17, 0xFF	; 255

    lcd_init();
     43e:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>

    for (i=start_addr; i<end_addr; i++)
     442:	c0 17       	cp	r28, r16
     444:	d1 07       	cpc	r29, r17
     446:	b4 f4       	brge	.+44     	; 0x474 <print_eeprom_contents+0x62>
    {
        if (op_mode==MD_UPDATE)
     448:	80 91 aa 01 	lds	r24, 0x01AA
     44c:	90 91 ab 01 	lds	r25, 0x01AB
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	81 f0       	breq	.+32     	; 0x474 <print_eeprom_contents+0x62>
    return (temp_num);
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     454:	ce 01       	movw	r24, r28
     456:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__eerd_byte_m1284p>
    for (i=start_addr; i<end_addr; i++)
    {
        if (op_mode==MD_UPDATE)
        return;
        one_byte = my_eeprom_read_char(i);
        if (one_byte == '\0')
     45a:	81 11       	cpse	r24, r1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <print_eeprom_contents+0x4e>
            one_byte = '?';
     45e:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     460:	0e 94 02 07 	call	0xe04	; 0xe04 <char_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	83 e2       	ldi	r24, 0x23	; 35
     466:	94 ef       	ldi	r25, 0xF4	; 244
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <print_eeprom_contents+0x56>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <print_eeprom_contents+0x5c>
     46e:	00 00       	nop
    if (end_addr == -1)
        end_addr = 1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE;

    lcd_init();

    for (i=start_addr; i<end_addr; i++)
     470:	21 96       	adiw	r28, 0x01	; 1
     472:	e7 cf       	rjmp	.-50     	; 0x442 <print_eeprom_contents+0x30>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(250);
    }
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret

0000047e <print_eeprom_station_contents>:

void print_eeprom_station_contents(void)
{
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	d0 e0       	ldi	r29, 0x00	; 0
     488:	1c e1       	ldi	r17, 0x1C	; 28
     48a:	20 91 45 03 	lds	r18, 0x0345
     48e:	30 91 46 03 	lds	r19, 0x0346
     492:	12 9f       	mul	r17, r18
     494:	c0 01       	movw	r24, r0
     496:	13 9f       	mul	r17, r19
     498:	90 0d       	add	r25, r0
     49a:	11 24       	eor	r1, r1
     49c:	c8 17       	cp	r28, r24
     49e:	d9 07       	cpc	r29, r25
     4a0:	94 f4       	brge	.+36     	; 0x4c6 <print_eeprom_station_contents+0x48>
    return (temp_num);
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     4a2:	ce 01       	movw	r24, r28
     4a4:	8b 59       	subi	r24, 0x9B	; 155
     4a6:	9f 4f       	sbci	r25, 0xFF	; 255
     4a8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
    {
        one_byte = my_eeprom_read_char(start+i);
        if (one_byte == '\0')
     4ac:	81 11       	cpse	r24, r1
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <print_eeprom_station_contents+0x34>
            one_byte = '?';
     4b0:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     4b2:	0e 94 02 07 	call	0xe04	; 0xe04 <char_write>
     4b6:	87 ea       	ldi	r24, 0xA7	; 167
     4b8:	91 e6       	ldi	r25, 0x61	; 97
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <print_eeprom_station_contents+0x3c>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <print_eeprom_station_contents+0x42>
     4c0:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     4c2:	21 96       	adiw	r28, 0x01	; 1
     4c4:	e2 cf       	rjmp	.-60     	; 0x48a <print_eeprom_station_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	08 95       	ret

000004ce <print_callsign>:
    if (op_mode==MD_UPDATE)
        return;
}

void print_callsign(int station_index)
{
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     4d6:	2c e1       	ldi	r18, 0x1C	; 28
     4d8:	28 9f       	mul	r18, r24
     4da:	80 01       	movw	r16, r0
     4dc:	29 9f       	mul	r18, r25
     4de:	10 0d       	add	r17, r0
     4e0:	11 24       	eor	r1, r1
}

void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     4e6:	e0 91 49 03 	lds	r30, 0x0349
     4ea:	f0 91 4a 03 	lds	r31, 0x034A
     4ee:	e0 0f       	add	r30, r16
     4f0:	f1 1f       	adc	r31, r17
     4f2:	ec 0f       	add	r30, r28
     4f4:	fd 1f       	adc	r31, r29
     4f6:	80 81       	ld	r24, Z
     4f8:	0e 94 02 07 	call	0xe04	; 0xe04 <char_write>
}

void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	c8 30       	cpi	r28, 0x08	; 8
     500:	d1 05       	cpc	r29, r1
     502:	89 f7       	brne	.-30     	; 0x4e6 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <print_station>:
        _delay_ms(100);
    }
}

void print_station(int index)
{
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	0e 94 65 01 	call	0x2ca	; 0x2ca <string_write_int>
     522:	81 e2       	ldi	r24, 0x21	; 33
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     52a:	c8 01       	movw	r24, r16
     52c:	0e 94 67 02 	call	0x4ce	; 0x4ce <print_callsign>
     530:	83 e2       	ldi	r24, 0x23	; 35
     532:	94 ef       	ldi	r25, 0xF4	; 244
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <print_station+0x26>
     538:	00 c0       	rjmp	.+0      	; 0x53a <print_station+0x2c>
     53a:	00 00       	nop
     53c:	8f e0       	ldi	r24, 0x0F	; 15
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    if (op_mode==MD_UPDATE)
     544:	80 91 aa 01 	lds	r24, 0x01AA
     548:	90 91 ab 01 	lds	r25, 0x01AB
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	09 f4       	brne	.+2      	; 0x552 <print_station+0x44>
     550:	b1 c0       	rjmp	.+354    	; 0x6b4 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     552:	81 e1       	ldi	r24, 0x11	; 17
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     55a:	8c e1       	ldi	r24, 0x1C	; 28
     55c:	80 9f       	mul	r24, r16
     55e:	e0 01       	movw	r28, r0
     560:	81 9f       	mul	r24, r17
     562:	d0 0d       	add	r29, r0
     564:	11 24       	eor	r1, r1
     566:	e0 91 49 03 	lds	r30, 0x0349
     56a:	f0 91 4a 03 	lds	r31, 0x034A
     56e:	ec 0f       	add	r30, r28
     570:	fd 1f       	adc	r31, r29
     572:	60 85       	ldd	r22, Z+8	; 0x08
     574:	71 85       	ldd	r23, Z+9	; 0x09
     576:	82 85       	ldd	r24, Z+10	; 0x0a
     578:	93 85       	ldd	r25, Z+11	; 0x0b
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	0e 94 8c 01 	call	0x318	; 0x318 <string_write_float>
     582:	83 e2       	ldi	r24, 0x23	; 35
     584:	94 ef       	ldi	r25, 0xF4	; 244
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <print_station+0x78>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <print_station+0x7e>
     58c:	00 00       	nop
     58e:	8f e0       	ldi	r24, 0x0F	; 15
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    if (op_mode==MD_UPDATE)
     596:	80 91 aa 01 	lds	r24, 0x01AA
     59a:	90 91 ab 01 	lds	r25, 0x01AB
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <print_station+0x96>
     5a2:	88 c0       	rjmp	.+272    	; 0x6b4 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     5a4:	88 e1       	ldi	r24, 0x18	; 24
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     5ac:	e0 91 49 03 	lds	r30, 0x0349
     5b0:	f0 91 4a 03 	lds	r31, 0x034A
     5b4:	ec 0f       	add	r30, r28
     5b6:	fd 1f       	adc	r31, r29
     5b8:	64 85       	ldd	r22, Z+12	; 0x0c
     5ba:	75 85       	ldd	r23, Z+13	; 0x0d
     5bc:	86 85       	ldd	r24, Z+14	; 0x0e
     5be:	97 85       	ldd	r25, Z+15	; 0x0f
     5c0:	44 e0       	ldi	r20, 0x04	; 4
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	0e 94 8c 01 	call	0x318	; 0x318 <string_write_float>
     5c8:	83 e2       	ldi	r24, 0x23	; 35
     5ca:	94 ef       	ldi	r25, 0xF4	; 244
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <print_station+0xbe>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <print_station+0xc4>
     5d2:	00 00       	nop
     5d4:	8f e0       	ldi	r24, 0x0F	; 15
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    if (op_mode==MD_UPDATE)
     5dc:	80 91 aa 01 	lds	r24, 0x01AA
     5e0:	90 91 ab 01 	lds	r25, 0x01AB
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	09 f4       	brne	.+2      	; 0x5ea <print_station+0xdc>
     5e8:	65 c0       	rjmp	.+202    	; 0x6b4 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     5ea:	8e e1       	ldi	r24, 0x1E	; 30
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     5f2:	e0 91 49 03 	lds	r30, 0x0349
     5f6:	f0 91 4a 03 	lds	r31, 0x034A
     5fa:	ec 0f       	add	r30, r28
     5fc:	fd 1f       	adc	r31, r29
     5fe:	60 89       	ldd	r22, Z+16	; 0x10
     600:	71 89       	ldd	r23, Z+17	; 0x11
     602:	82 89       	ldd	r24, Z+18	; 0x12
     604:	93 89       	ldd	r25, Z+19	; 0x13
     606:	44 e0       	ldi	r20, 0x04	; 4
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	0e 94 8c 01 	call	0x318	; 0x318 <string_write_float>
     60e:	83 e2       	ldi	r24, 0x23	; 35
     610:	94 ef       	ldi	r25, 0xF4	; 244
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <print_station+0x104>
     616:	00 c0       	rjmp	.+0      	; 0x618 <print_station+0x10a>
     618:	00 00       	nop
     61a:	8f e0       	ldi	r24, 0x0F	; 15
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    if (op_mode==MD_UPDATE)
     622:	80 91 aa 01 	lds	r24, 0x01AA
     626:	90 91 ab 01 	lds	r25, 0x01AB
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	09 f4       	brne	.+2      	; 0x630 <print_station+0x122>
     62e:	42 c0       	rjmp	.+132    	; 0x6b4 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     630:	84 e2       	ldi	r24, 0x24	; 36
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     638:	e0 91 49 03 	lds	r30, 0x0349
     63c:	f0 91 4a 03 	lds	r31, 0x034A
     640:	ec 0f       	add	r30, r28
     642:	fd 1f       	adc	r31, r29
     644:	64 89       	ldd	r22, Z+20	; 0x14
     646:	75 89       	ldd	r23, Z+21	; 0x15
     648:	86 89       	ldd	r24, Z+22	; 0x16
     64a:	97 89       	ldd	r25, Z+23	; 0x17
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 8c 01 	call	0x318	; 0x318 <string_write_float>
     654:	83 e2       	ldi	r24, 0x23	; 35
     656:	94 ef       	ldi	r25, 0xF4	; 244
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <print_station+0x14a>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <print_station+0x150>
     65e:	00 00       	nop
     660:	8f e0       	ldi	r24, 0x0F	; 15
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    if (op_mode==MD_UPDATE)
     668:	80 91 aa 01 	lds	r24, 0x01AA
     66c:	90 91 ab 01 	lds	r25, 0x01AB
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	01 f1       	breq	.+64     	; 0x6b4 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     674:	8a e2       	ldi	r24, 0x2A	; 42
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     67c:	e0 91 49 03 	lds	r30, 0x0349
     680:	f0 91 4a 03 	lds	r31, 0x034A
     684:	ec 0f       	add	r30, r28
     686:	fd 1f       	adc	r31, r29
     688:	60 8d       	ldd	r22, Z+24	; 0x18
     68a:	71 8d       	ldd	r23, Z+25	; 0x19
     68c:	82 8d       	ldd	r24, Z+26	; 0x1a
     68e:	93 8d       	ldd	r25, Z+27	; 0x1b
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	0e 94 8c 01 	call	0x318	; 0x318 <string_write_float>
     698:	83 e2       	ldi	r24, 0x23	; 35
     69a:	94 ef       	ldi	r25, 0xF4	; 244
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <print_station+0x18e>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <print_station+0x194>
     6a2:	00 00       	nop
     6a4:	8f e0       	ldi	r24, 0x0F	; 15
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
    if (op_mode==MD_UPDATE)
     6ac:	80 91 aa 01 	lds	r24, 0x01AA
     6b0:	90 91 ab 01 	lds	r25, 0x01AB
        return;
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <prepare_device>:
    }
}

void prepare_device(void)
{
    DDRB = 0xFF;
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	84 b9       	out	0x04, r24	; 4
    cli();
     6c2:	f8 94       	cli
    //Init usart
    InitUSART();
     6c4:	0e 94 a8 00 	call	0x150	; 0x150 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     6c8:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     6ca:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>
     6ce:	2f e3       	ldi	r18, 0x3F	; 63
     6d0:	8d e0       	ldi	r24, 0x0D	; 13
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	80 40       	sbci	r24, 0x00	; 0
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <prepare_device+0x16>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <prepare_device+0x20>
     6de:	00 00       	nop
     6e0:	08 95       	ret

000006e2 <database_load>:
    _delay_ms(1000);
}

void database_load(void)
{
     6e2:	bf 92       	push	r11
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
        return 0;
}

int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__eerd_byte_m1284p>
     6fc:	90 e0       	ldi	r25, 0x00	; 0
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);

    if (num_stations==255)
     6fe:	8f 3f       	cpi	r24, 0xFF	; 255
     700:	91 05       	cpc	r25, r1
     702:	29 f0       	breq	.+10     	; 0x70e <database_load+0x2c>

void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = my_eeprom_read_int(0);
     704:	90 93 46 03 	sts	0x0346, r25
     708:	80 93 45 03 	sts	0x0345, r24
     70c:	04 c0       	rjmp	.+8      	; 0x716 <database_load+0x34>

    if (num_stations==255)
        num_stations = 0;
     70e:	10 92 46 03 	sts	0x0346, r1
     712:	10 92 45 03 	sts	0x0345, r1

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     716:	80 91 45 03 	lds	r24, 0x0345
     71a:	90 91 46 03 	lds	r25, 0x0346
     71e:	2c e1       	ldi	r18, 0x1C	; 28
     720:	ac 01       	movw	r20, r24
     722:	24 9f       	mul	r18, r20
     724:	c0 01       	movw	r24, r0
     726:	25 9f       	mul	r18, r21
     728:	90 0d       	add	r25, r0
     72a:	11 24       	eor	r1, r1
     72c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <malloc>
     730:	90 93 4a 03 	sts	0x034A, r25
     734:	80 93 49 03 	sts	0x0349, r24
     738:	8d e7       	ldi	r24, 0x7D	; 125
     73a:	c8 2e       	mov	r12, r24
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	d8 2e       	mov	r13, r24
     740:	95 eb       	ldi	r25, 0xB5	; 181
     742:	e9 2e       	mov	r14, r25
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	f9 2e       	mov	r15, r25

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
     748:	00 e0       	ldi	r16, 0x00	; 0
     74a:	10 e0       	ldi	r17, 0x00	; 0
    for (i=0; i < NUM_GRID_CELLS; i ++)
     74c:	c0 e0       	ldi	r28, 0x00	; 0
     74e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        stations_in_cell[i] = my_eeprom_read_int(i+1);
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     750:	2c e1       	ldi	r18, 0x1C	; 28
     752:	b2 2e       	mov	r11, r18

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+1);
     754:	21 96       	adiw	r28, 0x01	; 1
        return 0;
}

int my_eeprom_read_int(int address)
{
    int temp_num = ((int)eeprom_read_byte((uint8_t *)address));
     756:	ce 01       	movw	r24, r28
     758:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__eerd_byte_m1284p>
     75c:	90 e0       	ldi	r25, 0x00	; 0

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+1);
     75e:	f6 01       	movw	r30, r12
     760:	81 93       	st	Z+, r24
     762:	91 93       	st	Z+, r25
     764:	6f 01       	movw	r12, r30
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     766:	b0 9e       	mul	r11, r16
     768:	90 01       	movw	r18, r0
     76a:	b1 9e       	mul	r11, r17
     76c:	30 0d       	add	r19, r0
     76e:	11 24       	eor	r1, r1
     770:	2b 59       	subi	r18, 0x9B	; 155
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	f7 01       	movw	r30, r14
     776:	21 93       	st	Z+, r18
     778:	31 93       	st	Z+, r19
     77a:	7f 01       	movw	r14, r30
        total += stations_in_cell[i];
     77c:	08 0f       	add	r16, r24
     77e:	19 1f       	adc	r17, r25
    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
     780:	c4 36       	cpi	r28, 0x64	; 100
     782:	d1 05       	cpc	r29, r1
     784:	39 f7       	brne	.-50     	; 0x754 <database_load+0x72>
     786:	c0 e0       	ldi	r28, 0x00	; 0
     788:	d0 e0       	ldi	r29, 0x00	; 0
     78a:	e1 2c       	mov	r14, r1
     78c:	f1 2c       	mov	r15, r1
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     78e:	80 91 45 03 	lds	r24, 0x0345
     792:	90 91 46 03 	lds	r25, 0x0346
     796:	e8 16       	cp	r14, r24
     798:	f9 06       	cpc	r15, r25
     79a:	0c f0       	brlt	.+2      	; 0x79e <database_load+0xbc>
     79c:	4a c0       	rjmp	.+148    	; 0x832 <database_load+0x150>
     79e:	be 01       	movw	r22, r28
     7a0:	6b 59       	subi	r22, 0x9B	; 155
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     7a4:	80 91 49 03 	lds	r24, 0x0349
     7a8:	90 91 4a 03 	lds	r25, 0x034A
    return (float)(eeprom_read_float((const float *)address));
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     7ac:	48 e0       	ldi	r20, 0x08	; 8
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	8c 0f       	add	r24, r28
     7b2:	9d 1f       	adc	r25, r29
     7b4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__eerd_block_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     7b8:	00 91 49 03 	lds	r16, 0x0349
     7bc:	10 91 4a 03 	lds	r17, 0x034A
     7c0:	0c 0f       	add	r16, r28
     7c2:	1d 1f       	adc	r17, r29
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7c4:	ce 01       	movw	r24, r28
     7c6:	83 59       	subi	r24, 0x93	; 147
     7c8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ca:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__eerd_dword_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     7ce:	f8 01       	movw	r30, r16
     7d0:	60 87       	std	Z+8, r22	; 0x08
     7d2:	71 87       	std	Z+9, r23	; 0x09
     7d4:	82 87       	std	Z+10, r24	; 0x0a
     7d6:	93 87       	std	Z+11, r25	; 0x0b
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7d8:	ce 01       	movw	r24, r28
     7da:	8f 58       	subi	r24, 0x8F	; 143
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     7e2:	f8 01       	movw	r30, r16
     7e4:	64 87       	std	Z+12, r22	; 0x0c
     7e6:	75 87       	std	Z+13, r23	; 0x0d
     7e8:	86 87       	std	Z+14, r24	; 0x0e
     7ea:	97 87       	std	Z+15, r25	; 0x0f
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7ec:	ce 01       	movw	r24, r28
     7ee:	8b 58       	subi	r24, 0x8B	; 139
     7f0:	9f 4f       	sbci	r25, 0xFF	; 255
     7f2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     7f6:	f8 01       	movw	r30, r16
     7f8:	60 8b       	std	Z+16, r22	; 0x10
     7fa:	71 8b       	std	Z+17, r23	; 0x11
     7fc:	82 8b       	std	Z+18, r24	; 0x12
     7fe:	93 8b       	std	Z+19, r25	; 0x13
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     800:	ce 01       	movw	r24, r28
     802:	87 58       	subi	r24, 0x87	; 135
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__eerd_dword_m1284p>

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     80a:	f8 01       	movw	r30, r16
     80c:	64 8b       	std	Z+20, r22	; 0x14
     80e:	75 8b       	std	Z+21, r23	; 0x15
     810:	86 8b       	std	Z+22, r24	; 0x16
     812:	97 8b       	std	Z+23, r25	; 0x17
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     814:	ce 01       	movw	r24, r28
     816:	83 58       	subi	r24, 0x83	; 131
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__eerd_dword_m1284p>
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     81e:	f8 01       	movw	r30, r16
     820:	60 8f       	std	Z+24, r22	; 0x18
     822:	71 8f       	std	Z+25, r23	; 0x19
     824:	82 8f       	std	Z+26, r24	; 0x1a
     826:	93 8f       	std	Z+27, r25	; 0x1b
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     828:	ff ef       	ldi	r31, 0xFF	; 255
     82a:	ef 1a       	sub	r14, r31
     82c:	ff 0a       	sbc	r15, r31
     82e:	6c 96       	adiw	r28, 0x1c	; 28
     830:	ae cf       	rjmp	.-164    	; 0x78e <database_load+0xac>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	bf 90       	pop	r11
     844:	08 95       	ret

00000846 <database_free>:

void database_free(void)
{
    num_stations = 0;
     846:	10 92 46 03 	sts	0x0346, r1
     84a:	10 92 45 03 	sts	0x0345, r1

    free(all_stations);
     84e:	80 91 49 03 	lds	r24, 0x0349
     852:	90 91 4a 03 	lds	r25, 0x034A
     856:	0e 94 75 0c 	call	0x18ea	; 0x18ea <free>
    all_stations = NULL;
     85a:	10 92 4a 03 	sts	0x034A, r1
     85e:	10 92 49 03 	sts	0x0349, r1
     862:	ed e7       	ldi	r30, 0x7D	; 125
     864:	f2 e0       	ldi	r31, 0x02	; 2
     866:	a5 eb       	ldi	r26, 0xB5	; 181
     868:	b1 e0       	ldi	r27, 0x01	; 1

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
    {
        stations_in_cell[i] = 0;
     86a:	11 92       	st	Z+, r1
     86c:	11 92       	st	Z+, r1
        cell_offsets[i] = 0;
     86e:	1d 92       	st	X+, r1
     870:	1d 92       	st	X+, r1

    free(all_stations);
    all_stations = NULL;

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	e5 34       	cpi	r30, 0x45	; 69
     876:	f8 07       	cpc	r31, r24
     878:	c1 f7       	brne	.-16     	; 0x86a <database_free+0x24>
    {
        stations_in_cell[i] = 0;
        cell_offsets[i] = 0;
    }

}
     87a:	08 95       	ret

0000087c <print_all_known_stations>:

void print_all_known_stations(void)
{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
    int i;
    lcd_init();
     880:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>
    string_write_int(num_stations,3);
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 91 45 03 	lds	r24, 0x0345
     88c:	90 91 46 03 	lds	r25, 0x0346
     890:	0e 94 65 01 	call	0x2ca	; 0x2ca <string_write_int>
    string_write(" known\nstations");
     894:	81 e3       	ldi	r24, 0x31	; 49
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     89c:	2f e7       	ldi	r18, 0x7F	; 127
     89e:	8a e1       	ldi	r24, 0x1A	; 26
     8a0:	96 e0       	ldi	r25, 0x06	; 6
     8a2:	21 50       	subi	r18, 0x01	; 1
     8a4:	80 40       	sbci	r24, 0x00	; 0
     8a6:	90 40       	sbci	r25, 0x00	; 0
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <print_all_known_stations+0x26>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <print_all_known_stations+0x30>
     8ac:	00 00       	nop

    _delay_ms(2000);

    if (op_mode==MD_UPDATE)
     8ae:	80 91 aa 01 	lds	r24, 0x01AA
     8b2:	90 91 ab 01 	lds	r25, 0x01AB
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	11 f1       	breq	.+68     	; 0x8fe <print_all_known_stations+0x82>
     8ba:	c0 e0       	ldi	r28, 0x00	; 0
     8bc:	d0 e0       	ldi	r29, 0x00	; 0
        return;

    for (i=0; i<num_stations; i++)
     8be:	80 91 45 03 	lds	r24, 0x0345
     8c2:	90 91 46 03 	lds	r25, 0x0346
     8c6:	c8 17       	cp	r28, r24
     8c8:	d9 07       	cpc	r29, r25
     8ca:	cc f4       	brge	.+50     	; 0x8fe <print_all_known_stations+0x82>
    {
        if (op_mode==MD_UPDATE) return;
     8cc:	80 91 aa 01 	lds	r24, 0x01AA
     8d0:	90 91 ab 01 	lds	r25, 0x01AB
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	99 f0       	breq	.+38     	; 0x8fe <print_all_known_stations+0x82>

        lcd_init();
     8d8:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>
        print_station(i);
     8dc:	ce 01       	movw	r24, r28
     8de:	0e 94 87 02 	call	0x50e	; 0x50e <print_station>

        if (op_mode==MD_UPDATE) return;
     8e2:	80 91 aa 01 	lds	r24, 0x01AA
     8e6:	90 91 ab 01 	lds	r25, 0x01AB
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	41 f0       	breq	.+16     	; 0x8fe <print_all_known_stations+0x82>
     8ee:	8f e4       	ldi	r24, 0x4F	; 79
     8f0:	93 ec       	ldi	r25, 0xC3	; 195
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <print_all_known_stations+0x76>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <print_all_known_stations+0x7c>
     8f8:	00 00       	nop
    _delay_ms(2000);

    if (op_mode==MD_UPDATE)
        return;

    for (i=0; i<num_stations; i++)
     8fa:	21 96       	adiw	r28, 0x01	; 1
     8fc:	e0 cf       	rjmp	.-64     	; 0x8be <print_all_known_stations+0x42>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(200);   
    }
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <print_all_callsigns>:

void print_all_callsigns(void)
{
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
    int i;
    lcd_init();
     90c:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>
    string_write_int(num_stations,3);
     910:	63 e0       	ldi	r22, 0x03	; 3
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 91 45 03 	lds	r24, 0x0345
     918:	90 91 46 03 	lds	r25, 0x0346
     91c:	0e 94 65 01 	call	0x2ca	; 0x2ca <string_write_int>
    string_write(" known\nstations");
     920:	81 e3       	ldi	r24, 0x31	; 49
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     928:	2f e7       	ldi	r18, 0x7F	; 127
     92a:	8a e1       	ldi	r24, 0x1A	; 26
     92c:	96 e0       	ldi	r25, 0x06	; 6
     92e:	21 50       	subi	r18, 0x01	; 1
     930:	80 40       	sbci	r24, 0x00	; 0
     932:	90 40       	sbci	r25, 0x00	; 0
     934:	e1 f7       	brne	.-8      	; 0x92e <print_all_callsigns+0x2a>
     936:	00 c0       	rjmp	.+0      	; 0x938 <print_all_callsigns+0x34>
     938:	00 00       	nop
    _delay_ms(2000);

    lcd_init();
     93a:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>

    if (op_mode==MD_UPDATE) return;
     93e:	80 91 aa 01 	lds	r24, 0x01AA
     942:	90 91 ab 01 	lds	r25, 0x01AB
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	81 f1       	breq	.+96     	; 0x9aa <print_all_callsigns+0xa6>
     94a:	c0 e0       	ldi	r28, 0x00	; 0
     94c:	d0 e0       	ldi	r29, 0x00	; 0

    for (i=0; i<num_stations; i++)
     94e:	80 91 45 03 	lds	r24, 0x0345
     952:	90 91 46 03 	lds	r25, 0x0346
     956:	c8 17       	cp	r28, r24
     958:	d9 07       	cpc	r29, r25
     95a:	3c f5       	brge	.+78     	; 0x9aa <print_all_callsigns+0xa6>
    {
        if (op_mode==MD_UPDATE) return;
     95c:	80 91 aa 01 	lds	r24, 0x01AA
     960:	90 91 ab 01 	lds	r25, 0x01AB
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	09 f1       	breq	.+66     	; 0x9aa <print_all_callsigns+0xa6>

        string_write_int(i+1,3); string_write(": "); print_callsign(i); string_write("\n");
     968:	8e 01       	movw	r16, r28
     96a:	0f 5f       	subi	r16, 0xFF	; 255
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
     96e:	63 e0       	ldi	r22, 0x03	; 3
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	c8 01       	movw	r24, r16
     974:	0e 94 65 01 	call	0x2ca	; 0x2ca <string_write_int>
     978:	81 e2       	ldi	r24, 0x21	; 33
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     980:	ce 01       	movw	r24, r28
     982:	0e 94 67 02 	call	0x4ce	; 0x4ce <print_callsign>
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>

        if (op_mode==MD_UPDATE) return;
     98e:	80 91 aa 01 	lds	r24, 0x01AA
     992:	90 91 ab 01 	lds	r25, 0x01AB
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	41 f0       	breq	.+16     	; 0x9aa <print_all_callsigns+0xa6>
     99a:	83 e2       	ldi	r24, 0x23	; 35
     99c:	94 ef       	ldi	r25, 0xF4	; 244
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <print_all_callsigns+0x9a>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <print_all_callsigns+0xa0>
     9a4:	00 00       	nop

    lcd_init();

    if (op_mode==MD_UPDATE) return;

    for (i=0; i<num_stations; i++)
     9a6:	e8 01       	movw	r28, r16
     9a8:	d2 cf       	rjmp	.-92     	; 0x94e <print_all_callsigns+0x4a>

        if (op_mode==MD_UPDATE) return;

        _delay_ms(250);   
    }
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <terminate_serial>:

void terminate_serial(int flag)
{
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	ec 01       	movw	r28, r24
    op_mode = MD_NORMAL;
     9ba:	10 92 ab 01 	sts	0x01AB, r1
     9be:	10 92 aa 01 	sts	0x01AA, r1
    updating = 0;
     9c2:	10 92 a7 01 	sts	0x01A7, r1
     9c6:	10 92 a6 01 	sts	0x01A6, r1
    serial_timer = 0;
     9ca:	10 92 ac 01 	sts	0x01AC, r1
     9ce:	10 92 ad 01 	sts	0x01AD, r1
     9d2:	10 92 ae 01 	sts	0x01AE, r1
     9d6:	10 92 af 01 	sts	0x01AF, r1

    //import the new database
    lcd_init();
     9da:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>

    if (flag==FL_SUCCESS)
     9de:	20 97       	sbiw	r28, 0x00	; 0
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <terminate_serial+0x34>
        string_write("syncing\nmemory ...");
     9e2:	81 e4       	ldi	r24, 0x41	; 65
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     9e8:	84 e5       	ldi	r24, 0x54	; 84
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>

    database_load();
     9f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <database_load>
     9f4:	2f e7       	ldi	r18, 0x7F	; 127
     9f6:	8a e1       	ldi	r24, 0x1A	; 26
     9f8:	96 e0       	ldi	r25, 0x06	; 6
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <terminate_serial+0x46>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <terminate_serial+0x50>
     a04:	00 00       	nop
    _delay_ms(2000);

    if (flag==FL_SUCCESS)
     a06:	cd 2b       	or	r28, r29
     a08:	19 f4       	brne	.+6      	; 0xa10 <terminate_serial+0x5c>
        string_write("\nDATABASE\nUPDATED");
     a0a:	87 e6       	ldi	r24, 0x67	; 103
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <terminate_serial+0x60>
    else
        string_write("\nUPDATE\nFAILED");
     a10:	89 e7       	ldi	r24, 0x79	; 121
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     a18:	2f ed       	ldi	r18, 0xDF	; 223
     a1a:	83 e9       	ldi	r24, 0x93	; 147
     a1c:	94 e0       	ldi	r25, 0x04	; 4
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	80 40       	sbci	r24, 0x00	; 0
     a22:	90 40       	sbci	r25, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <terminate_serial+0x6a>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <terminate_serial+0x74>
     a28:	00 00       	nop

    _delay_ms(1500);

}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <check_integrity>:

void check_integrity(void)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
    int i, j;
    for (i=0; i<num_stations; i++)
     a34:	20 91 45 03 	lds	r18, 0x0345
     a38:	30 91 46 03 	lds	r19, 0x0346
     a3c:	e0 91 49 03 	lds	r30, 0x0349
     a40:	f0 91 4a 03 	lds	r31, 0x034A
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	82 17       	cp	r24, r18
     a4a:	93 07       	cpc	r25, r19
     a4c:	bc f4       	brge	.+46     	; 0xa7c <check_integrity+0x4c>
    {
        char * call = all_stations[i].callsign;
        for (j=0; j<strlen(call); j++)
     a4e:	df 01       	movw	r26, r30
     a50:	0d 90       	ld	r0, X+
     a52:	00 20       	and	r0, r0
     a54:	e9 f7       	brne	.-6      	; 0xa50 <check_integrity+0x20>
     a56:	11 97       	sbiw	r26, 0x01	; 1
     a58:	ef 01       	movw	r28, r30
     a5a:	ca 17       	cp	r28, r26
     a5c:	db 07       	cpc	r29, r27
     a5e:	59 f0       	breq	.+22     	; 0xa76 <check_integrity+0x46>
        {
            if ((call[j] < 33)||(call[j] > 126))
     a60:	49 91       	ld	r20, Y+
     a62:	41 52       	subi	r20, 0x21	; 33
     a64:	4e 35       	cpi	r20, 0x5E	; 94
     a66:	c8 f3       	brcs	.-14     	; 0xa5a <check_integrity+0x2a>
            {
                database_corrupted = 1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 a1 01 	sts	0x01A1, r25
     a70:	80 93 a0 01 	sts	0x01A0, r24
                return;
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <check_integrity+0x4c>
}

void check_integrity(void)
{
    int i, j;
    for (i=0; i<num_stations; i++)
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	7c 96       	adiw	r30, 0x1c	; 28
     a7a:	e6 cf       	rjmp	.-52     	; 0xa48 <check_integrity+0x18>
                database_corrupted = 1;
                return;
            }
        }
    }
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     a82:	12 9a       	sbi	0x02, 2	; 2
     a84:	81 ee       	ldi	r24, 0xE1	; 225
     a86:	94 e0       	ldi	r25, 0x04	; 4
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <datarw+0x6>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <datarw+0xc>
     a8e:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     a90:	12 98       	cbi	0x02, 2	; 2
     a92:	08 95       	ret

00000a94 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     a94:	10 92 48 03 	sts	0x0348, r1
     a98:	10 92 47 03 	sts	0x0347, r1
    line_num = 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 03 01 	sts	0x0103, r25
     aa4:	80 93 02 01 	sts	0x0102, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     aa8:	81 b1       	in	r24, 0x01	; 1
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	81 b9       	out	0x01, r24	; 1
     aae:	87 e8       	ldi	r24, 0x87	; 135
     ab0:	93 e1       	ldi	r25, 0x13	; 19
     ab2:	01 97       	sbiw	r24, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <lcd_init+0x1e>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <lcd_init+0x24>
     ab8:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     aba:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     abc:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     abe:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     ac0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     ac2:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     ac4:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     ac6:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     ac8:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     acc:	81 ee       	ldi	r24, 0xE1	; 225
     ace:	94 e0       	ldi	r25, 0x04	; 4
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <lcd_init+0x3c>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <lcd_init+0x42>
     ad6:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     ad8:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     adc:	89 ef       	ldi	r24, 0xF9	; 249
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <lcd_init+0x4c>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <lcd_init+0x52>
     ae6:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     ae8:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     aec:	89 ef       	ldi	r24, 0xF9	; 249
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <lcd_init+0x5c>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <lcd_init+0x62>
     af6:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     af8:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     afa:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     afc:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     afe:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b00:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b04:	89 ef       	ldi	r24, 0xF9	; 249
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <lcd_init+0x74>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <lcd_init+0x7a>
     b0e:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     b10:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b12:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     b14:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b16:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b18:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b1c:	89 ef       	ldi	r24, 0xF9	; 249
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <lcd_init+0x8c>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <lcd_init+0x92>
     b26:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     b28:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b2a:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     b2c:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b2e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b30:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b34:	89 ef       	ldi	r24, 0xF9	; 249
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <lcd_init+0xa4>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <lcd_init+0xaa>
     b3e:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     b40:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b42:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     b44:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b46:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b48:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b4c:	89 ef       	ldi	r24, 0xF9	; 249
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <lcd_init+0xbc>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <lcd_init+0xc2>
     b56:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     b58:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     b5a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     b5c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b5e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b60:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b64:	89 ef       	ldi	r24, 0xF9	; 249
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <lcd_init+0xd4>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <lcd_init+0xda>
     b6e:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     b70:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b72:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     b74:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     b76:	13 98       	cbi	0x02, 3	; 2
    datarw();
     b78:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b7c:	89 ef       	ldi	r24, 0xF9	; 249
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <lcd_init+0xec>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <lcd_init+0xf2>
     b86:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     b88:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     b8a:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     b8c:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     b8e:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     b90:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     b94:	89 ef       	ldi	r24, 0xF9	; 249
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <lcd_init+0x104>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <lcd_init+0x10a>
     b9e:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     ba0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     ba2:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     ba4:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     ba6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     ba8:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     bac:	89 ef       	ldi	r24, 0xF9	; 249
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <lcd_init+0x11c>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <lcd_init+0x122>
     bb6:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     bb8:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     bba:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     bbc:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     bbe:	13 98       	cbi	0x02, 3	; 2
    datarw();
     bc0:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     bc4:	89 ef       	ldi	r24, 0xF9	; 249
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <lcd_init+0x134>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <lcd_init+0x13a>
     bce:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     bd0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     bd2:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     bd4:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     bd6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     bd8:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     bdc:	89 ef       	ldi	r24, 0xF9	; 249
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <lcd_init+0x14c>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <lcd_init+0x152>
     be6:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     be8:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     bea:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     bec:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     bee:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     bf0:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     bf4:	89 ef       	ldi	r24, 0xF9	; 249
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <lcd_init+0x164>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <lcd_init+0x16a>
     bfe:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	08 95       	ret

00000c06 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	11 f4       	brne	.+4      	; 0xc0e <letterwrite+0x8>
     c0a:	16 9a       	sbi	0x02, 6	; 2
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     c0e:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     c10:	61 30       	cpi	r22, 0x01	; 1
     c12:	71 05       	cpc	r23, r1
     c14:	11 f4       	brne	.+4      	; 0xc1a <letterwrite+0x14>
     c16:	15 9a       	sbi	0x02, 5	; 2
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     c1a:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     c1c:	41 30       	cpi	r20, 0x01	; 1
     c1e:	51 05       	cpc	r21, r1
     c20:	11 f4       	brne	.+4      	; 0xc26 <letterwrite+0x20>
     c22:	14 9a       	sbi	0x02, 4	; 2
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     c26:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     c28:	21 30       	cpi	r18, 0x01	; 1
     c2a:	31 05       	cpc	r19, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <letterwrite+0x2c>
     c2e:	13 9a       	sbi	0x02, 3	; 2
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     c32:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     c34:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
     c38:	89 ef       	ldi	r24, 0xF9	; 249
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <letterwrite+0x36>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <letterwrite+0x3c>
     c42:	00 00       	nop
     c44:	08 95       	ret

00000c46 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     c4c:	81 b1       	in	r24, 0x01	; 1
     c4e:	87 78       	andi	r24, 0x87	; 135
     c50:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     c52:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     c54:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     c56:	12 9a       	sbi	0x02, 2	; 2
     c58:	81 ee       	ldi	r24, 0xE1	; 225
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <instruction_read+0x16>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <instruction_read+0x1c>
     c62:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     c64:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     c66:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     c68:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     c6a:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     c6c:	12 98       	cbi	0x02, 2	; 2
     c6e:	e9 ef       	ldi	r30, 0xF9	; 249
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <instruction_read+0x2c>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <instruction_read+0x32>
     c78:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     c7a:	12 9a       	sbi	0x02, 2	; 2
     c7c:	e1 ee       	ldi	r30, 0xE1	; 225
     c7e:	f4 e0       	ldi	r31, 0x04	; 4
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <instruction_read+0x3a>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <instruction_read+0x40>
     c86:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     c88:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     c8a:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     c8c:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     c8e:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     c90:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	26 e0       	ldi	r18, 0x06	; 6
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	2a 95       	dec	r18
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     c9e:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
     ca2:	35 e0       	ldi	r19, 0x05	; 5
     ca4:	cc 0f       	add	r28, r28
     ca6:	dd 1f       	adc	r29, r29
     ca8:	3a 95       	dec	r19
     caa:	e1 f7       	brne	.-8      	; 0xca4 <instruction_read+0x5e>
     cac:	8c 2b       	or	r24, r28
     cae:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     cb0:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     cb2:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     cb4:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	54 e0       	ldi	r21, 0x04	; 4
     cba:	aa 0f       	add	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	5a 95       	dec	r21
     cc0:	e1 f7       	brne	.-8      	; 0xcba <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     cc2:	8a 2b       	or	r24, r26
     cc4:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     cc6:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	73 e0       	ldi	r23, 0x03	; 3
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	7a 95       	dec	r23
     cd2:	e1 f7       	brne	.-8      	; 0xccc <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     cd4:	8e 2b       	or	r24, r30
     cd6:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     cd8:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     ce4:	86 2b       	or	r24, r22
     ce6:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     ce8:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     cea:	51 b1       	in	r21, 0x01	; 1
     cec:	58 67       	ori	r21, 0x78	; 120
     cee:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     cf0:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     cf2:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     cf4:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	44 0f       	add	r20, r20
     cfa:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     cfc:	84 2b       	or	r24, r20
     cfe:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     d00:	16 fb       	bst	r17, 6
     d02:	22 27       	eor	r18, r18
     d04:	20 f9       	bld	r18, 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     d08:	36 95       	lsr	r19
     d0a:	32 2f       	mov	r19, r18
     d0c:	22 27       	eor	r18, r18
     d0e:	37 95       	ror	r19
     d10:	27 95       	ror	r18
}
     d12:	82 2b       	or	r24, r18
     d14:	93 2b       	or	r25, r19
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     d1e:	0e 94 23 06 	call	0xc46	; 0xc46 <instruction_read>
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	99 27       	eor	r25, r25
    return address+1;
}
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	08 95       	ret

00000d2a <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     d2a:	89 2b       	or	r24, r25
     d2c:	11 f4       	brne	.+4      	; 0xd32 <write_db74+0x8>
     d2e:	16 98       	cbi	0x02, 6	; 2
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <write_db74+0xa>
    else PORTA |= _BV(DB7);
     d32:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     d34:	67 2b       	or	r22, r23
     d36:	11 f4       	brne	.+4      	; 0xd3c <write_db74+0x12>
     d38:	15 98       	cbi	0x02, 5	; 2
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <write_db74+0x14>
    else PORTA |= _BV(DB6);
     d3c:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     d3e:	45 2b       	or	r20, r21
     d40:	11 f4       	brne	.+4      	; 0xd46 <write_db74+0x1c>
     d42:	14 98       	cbi	0x02, 4	; 2
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     d46:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     d48:	23 2b       	or	r18, r19
     d4a:	11 f4       	brne	.+4      	; 0xd50 <write_db74+0x26>
     d4c:	13 98       	cbi	0x02, 3	; 2
     d4e:	08 95       	ret
    else PORTA |= _BV(DB4);
     d50:	13 9a       	sbi	0x02, 3	; 2
     d52:	08 95       	ret

00000d54 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     d5a:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     d5c:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     d5e:	28 2f       	mov	r18, r24
     d60:	22 95       	swap	r18
     d62:	21 70       	andi	r18, 0x01	; 1
     d64:	85 fb       	bst	r24, 5
     d66:	44 27       	eor	r20, r20
     d68:	40 f9       	bld	r20, 0
     d6a:	86 fb       	bst	r24, 6
     d6c:	66 27       	eor	r22, r22
     d6e:	60 f9       	bld	r22, 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 95 06 	call	0xd2a	; 0xd2a <write_db74>
    datarw();
     d7e:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     d82:	9e 01       	movw	r18, r28
     d84:	21 70       	andi	r18, 0x01	; 1
     d86:	33 27       	eor	r19, r19
     d88:	4c 2f       	mov	r20, r28
     d8a:	46 95       	lsr	r20
     d8c:	41 70       	andi	r20, 0x01	; 1
     d8e:	c2 fb       	bst	r28, 2
     d90:	66 27       	eor	r22, r22
     d92:	60 f9       	bld	r22, 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	c3 fb       	bst	r28, 3
     d9a:	88 27       	eor	r24, r24
     d9c:	80 f9       	bld	r24, 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 95 06 	call	0xd2a	; 0xd2a <write_db74>
    datarw();
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     da8:	0c 94 41 05 	jmp	0xa82	; 0xa82 <datarw>

00000dac <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     dac:	cf 93       	push	r28
     dae:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     db0:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     db2:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     db4:	84 fb       	bst	r24, 4
     db6:	22 27       	eor	r18, r18
     db8:	20 f9       	bld	r18, 0
     dba:	85 fb       	bst	r24, 5
     dbc:	44 27       	eor	r20, r20
     dbe:	40 f9       	bld	r20, 0
     dc0:	86 fb       	bst	r24, 6
     dc2:	66 27       	eor	r22, r22
     dc4:	60 f9       	bld	r22, 0
     dc6:	88 1f       	adc	r24, r24
     dc8:	88 27       	eor	r24, r24
     dca:	88 1f       	adc	r24, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 95 06 	call	0xd2a	; 0xd2a <write_db74>
    datarw();
     dd8:	0e 94 41 05 	call	0xa82	; 0xa82 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     ddc:	2c 2f       	mov	r18, r28
     dde:	21 70       	andi	r18, 0x01	; 1
     de0:	c1 fb       	bst	r28, 1
     de2:	44 27       	eor	r20, r20
     de4:	40 f9       	bld	r20, 0
     de6:	c2 fb       	bst	r28, 2
     de8:	66 27       	eor	r22, r22
     dea:	60 f9       	bld	r22, 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	c3 fb       	bst	r28, 3
     df4:	88 27       	eor	r24, r24
     df6:	80 f9       	bld	r24, 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 95 06 	call	0xd2a	; 0xd2a <write_db74>
    datarw();
}
     dfe:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     e00:	0c 94 41 05 	jmp	0xa82	; 0xa82 <datarw>

00000e04 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     e04:	cf 93       	push	r28
     e06:	c8 2f       	mov	r28, r24
    chars_written++;
     e08:	20 91 47 03 	lds	r18, 0x0347
     e0c:	30 91 48 03 	lds	r19, 0x0348
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	30 93 48 03 	sts	0x0348, r19
     e18:	20 93 47 03 	sts	0x0347, r18

    if ((chars_written==17)||(mychar=='\n'))
     e1c:	21 31       	cpi	r18, 0x11	; 17
     e1e:	31 05       	cpc	r19, r1
     e20:	31 f0       	breq	.+12     	; 0xe2e <char_write+0x2a>
     e22:	8a 30       	cpi	r24, 0x0A	; 10
     e24:	21 f0       	breq	.+8      	; 0xe2e <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     e26:	8c 2f       	mov	r24, r28
    
}
     e28:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     e2a:	0c 94 d6 06 	jmp	0xdac	; 0xdac <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     e2e:	20 91 02 01 	lds	r18, 0x0102
     e32:	30 91 03 01 	lds	r19, 0x0103
     e36:	21 30       	cpi	r18, 0x01	; 1
     e38:	31 05       	cpc	r19, r1
     e3a:	79 f4       	brne	.+30     	; 0xe5a <char_write+0x56>
        {
            set_ddram_address(0x40);
     e3c:	80 e4       	ldi	r24, 0x40	; 64
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_ddram_address>
            line_num = 2;
     e44:	22 e0       	ldi	r18, 0x02	; 2
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	30 93 03 01 	sts	0x0103, r19
     e4c:	20 93 02 01 	sts	0x0102, r18
            chars_written = 0;
     e50:	10 92 48 03 	sts	0x0348, r1
     e54:	10 92 47 03 	sts	0x0347, r1
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <char_write+0x60>
        }
        else if (line_num==2)
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	11 f4       	brne	.+4      	; 0xe64 <char_write+0x60>
        {
            lcd_init();
     e60:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>
        }
    }

    if (mychar!='\n')
     e64:	ca 30       	cpi	r28, 0x0A	; 10
     e66:	f9 f6       	brne	.-66     	; 0xe26 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <string_write>:
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	ec 01       	movw	r28, r24
     e76:	0e 94 8f 06 	call	0xd1e	; 0xd1e <get_current_address>
     e7a:	8e 01       	movw	r16, r28
     e7c:	fe 01       	movw	r30, r28
     e7e:	01 90       	ld	r0, Z+
     e80:	00 20       	and	r0, r0
     e82:	e9 f7       	brne	.-6      	; 0xe7e <string_write+0x12>
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	ec 1b       	sub	r30, r28
     e88:	fd 0b       	sbc	r31, r29
     e8a:	c8 01       	movw	r24, r16
     e8c:	8c 1b       	sub	r24, r28
     e8e:	9d 0b       	sbc	r25, r29
     e90:	8e 17       	cp	r24, r30
     e92:	9f 07       	cpc	r25, r31
     e94:	40 f4       	brcc	.+16     	; 0xea6 <string_write+0x3a>
     e96:	f8 01       	movw	r30, r16
     e98:	81 91       	ld	r24, Z+
     e9a:	8f 01       	movw	r16, r30
     e9c:	0e 94 02 07 	call	0xe04	; 0xe04 <char_write>
     ea0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <get_current_address>
     ea4:	eb cf       	rjmp	.-42     	; 0xe7c <string_write+0x10>
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <main>:
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	1f 92       	push	r1
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	0e 94 5f 03 	call	0x6be	; 0x6be <prepare_device>
     ebe:	81 e4       	ldi	r24, 0x41	; 65
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     ec6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <database_load>
     eca:	2f e3       	ldi	r18, 0x3F	; 63
     ecc:	8d e0       	ldi	r24, 0x0D	; 13
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <main+0x20>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <main+0x2a>
     eda:	00 00       	nop
     edc:	00 91 aa 01 	lds	r16, 0x01AA
     ee0:	10 91 ab 01 	lds	r17, 0x01AB
     ee4:	01 15       	cp	r16, r1
     ee6:	11 05       	cpc	r17, r1
     ee8:	21 f0       	breq	.+8      	; 0xef2 <main+0x42>
     eea:	01 30       	cpi	r16, 0x01	; 1
     eec:	11 05       	cpc	r17, r1
     eee:	31 f0       	breq	.+12     	; 0xefc <main+0x4c>
     ef0:	68 c0       	rjmp	.+208    	; 0xfc2 <main+0x112>
     ef2:	0e 94 82 04 	call	0x904	; 0x904 <print_all_callsigns>
     ef6:	0e 94 3e 04 	call	0x87c	; 0x87c <print_all_known_stations>
     efa:	63 c0       	rjmp	.+198    	; 0xfc2 <main+0x112>
     efc:	80 91 a6 01 	lds	r24, 0x01A6
     f00:	90 91 a7 01 	lds	r25, 0x01A7
     f04:	89 2b       	or	r24, r25
     f06:	61 f4       	brne	.+24     	; 0xf20 <main+0x70>
     f08:	0e 94 4a 05 	call	0xa94	; 0xa94 <lcd_init>
     f0c:	88 e8       	ldi	r24, 0x88	; 136
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 36 07 	call	0xe6c	; 0xe6c <string_write>
     f14:	10 93 a7 01 	sts	0x01A7, r17
     f18:	00 93 a6 01 	sts	0x01A6, r16
     f1c:	0e 94 23 04 	call	0x846	; 0x846 <database_free>
     f20:	90 91 b4 01 	lds	r25, 0x01B4
     f24:	80 91 b3 01 	lds	r24, 0x01B3
     f28:	98 17       	cp	r25, r24
     f2a:	49 f1       	breq	.+82     	; 0xf7e <main+0xce>
     f2c:	10 92 ac 01 	sts	0x01AC, r1
     f30:	10 92 ad 01 	sts	0x01AD, r1
     f34:	10 92 ae 01 	sts	0x01AE, r1
     f38:	10 92 af 01 	sts	0x01AF, r1
     f3c:	0e 94 cc 00 	call	0x198	; 0x198 <getChar>
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	0e 94 46 01 	call	0x28c	; 0x28c <detectSerialEnd>
     f46:	69 81       	ldd	r22, Y+1	; 0x01
     f48:	89 2b       	or	r24, r25
     f4a:	19 f0       	breq	.+6      	; 0xf52 <main+0xa2>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	36 c0       	rjmp	.+108    	; 0xfbe <main+0x10e>
     f52:	80 91 a8 01 	lds	r24, 0x01A8
     f56:	90 91 a9 01 	lds	r25, 0x01A9
     f5a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__eewr_byte_m1284p>
     f5e:	80 91 a8 01 	lds	r24, 0x01A8
     f62:	90 91 a9 01 	lds	r25, 0x01A9
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	90 93 a9 01 	sts	0x01A9, r25
     f6c:	80 93 a8 01 	sts	0x01A8, r24
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	90 93 a5 01 	sts	0x01A5, r25
     f78:	80 93 a4 01 	sts	0x01A4, r24
     f7c:	22 c0       	rjmp	.+68     	; 0xfc2 <main+0x112>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	60 91 ac 01 	lds	r22, 0x01AC
     f8a:	70 91 ad 01 	lds	r23, 0x01AD
     f8e:	80 91 ae 01 	lds	r24, 0x01AE
     f92:	90 91 af 01 	lds	r25, 0x01AF
     f96:	0e 94 f7 07 	call	0xfee	; 0xfee <__addsf3>
     f9a:	60 93 ac 01 	sts	0x01AC, r22
     f9e:	70 93 ad 01 	sts	0x01AD, r23
     fa2:	80 93 ae 01 	sts	0x01AE, r24
     fa6:	90 93 af 01 	sts	0x01AF, r25
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e5       	ldi	r19, 0x50	; 80
     fae:	43 e4       	ldi	r20, 0x43	; 67
     fb0:	57 e4       	ldi	r21, 0x47	; 71
     fb2:	0e 94 6d 09 	call	0x12da	; 0x12da <__gesf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	24 f4       	brge	.+8      	; 0xfc2 <main+0x112>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 da 04 	call	0x9b4	; 0x9b4 <terminate_serial>
     fc2:	80 91 a4 01 	lds	r24, 0x01A4
     fc6:	90 91 a5 01 	lds	r25, 0x01A5
     fca:	89 2b       	or	r24, r25
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <main+0x120>
     fce:	86 cf       	rjmp	.-244    	; 0xedc <main+0x2c>
     fd0:	80 91 a2 01 	lds	r24, 0x01A2
     fd4:	90 91 a3 01 	lds	r25, 0x01A3
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	90 93 a3 01 	sts	0x01A3, r25
     fde:	80 93 a2 01 	sts	0x01A2, r24
     fe2:	10 92 a5 01 	sts	0x01A5, r1
     fe6:	10 92 a4 01 	sts	0x01A4, r1
     fea:	78 cf       	rjmp	.-272    	; 0xedc <main+0x2c>

00000fec <__subsf3>:
     fec:	50 58       	subi	r21, 0x80	; 128

00000fee <__addsf3>:
     fee:	bb 27       	eor	r27, r27
     ff0:	aa 27       	eor	r26, r26
     ff2:	0e d0       	rcall	.+28     	; 0x1010 <__addsf3x>
     ff4:	21 c1       	rjmp	.+578    	; 0x1238 <__fp_round>
     ff6:	12 d1       	rcall	.+548    	; 0x121c <__fp_pscA>
     ff8:	30 f0       	brcs	.+12     	; 0x1006 <__addsf3+0x18>
     ffa:	17 d1       	rcall	.+558    	; 0x122a <__fp_pscB>
     ffc:	20 f0       	brcs	.+8      	; 0x1006 <__addsf3+0x18>
     ffe:	31 f4       	brne	.+12     	; 0x100c <__addsf3+0x1e>
    1000:	9f 3f       	cpi	r25, 0xFF	; 255
    1002:	11 f4       	brne	.+4      	; 0x1008 <__addsf3+0x1a>
    1004:	1e f4       	brtc	.+6      	; 0x100c <__addsf3+0x1e>
    1006:	07 c1       	rjmp	.+526    	; 0x1216 <__fp_nan>
    1008:	0e f4       	brtc	.+2      	; 0x100c <__addsf3+0x1e>
    100a:	e0 95       	com	r30
    100c:	e7 fb       	bst	r30, 7
    100e:	d4 c0       	rjmp	.+424    	; 0x11b8 <__fp_inf>

00001010 <__addsf3x>:
    1010:	e9 2f       	mov	r30, r25
    1012:	23 d1       	rcall	.+582    	; 0x125a <__fp_split3>
    1014:	80 f3       	brcs	.-32     	; 0xff6 <__addsf3+0x8>
    1016:	ba 17       	cp	r27, r26
    1018:	62 07       	cpc	r22, r18
    101a:	73 07       	cpc	r23, r19
    101c:	84 07       	cpc	r24, r20
    101e:	95 07       	cpc	r25, r21
    1020:	18 f0       	brcs	.+6      	; 0x1028 <__addsf3x+0x18>
    1022:	71 f4       	brne	.+28     	; 0x1040 <__addsf3x+0x30>
    1024:	9e f5       	brtc	.+102    	; 0x108c <__addsf3x+0x7c>
    1026:	52 c1       	rjmp	.+676    	; 0x12cc <__fp_zero>
    1028:	0e f4       	brtc	.+2      	; 0x102c <__addsf3x+0x1c>
    102a:	e0 95       	com	r30
    102c:	0b 2e       	mov	r0, r27
    102e:	ba 2f       	mov	r27, r26
    1030:	a0 2d       	mov	r26, r0
    1032:	0b 01       	movw	r0, r22
    1034:	b9 01       	movw	r22, r18
    1036:	90 01       	movw	r18, r0
    1038:	0c 01       	movw	r0, r24
    103a:	ca 01       	movw	r24, r20
    103c:	a0 01       	movw	r20, r0
    103e:	11 24       	eor	r1, r1
    1040:	ff 27       	eor	r31, r31
    1042:	59 1b       	sub	r21, r25
    1044:	99 f0       	breq	.+38     	; 0x106c <__addsf3x+0x5c>
    1046:	59 3f       	cpi	r21, 0xF9	; 249
    1048:	50 f4       	brcc	.+20     	; 0x105e <__addsf3x+0x4e>
    104a:	50 3e       	cpi	r21, 0xE0	; 224
    104c:	68 f1       	brcs	.+90     	; 0x10a8 <__addsf3x+0x98>
    104e:	1a 16       	cp	r1, r26
    1050:	f0 40       	sbci	r31, 0x00	; 0
    1052:	a2 2f       	mov	r26, r18
    1054:	23 2f       	mov	r18, r19
    1056:	34 2f       	mov	r19, r20
    1058:	44 27       	eor	r20, r20
    105a:	58 5f       	subi	r21, 0xF8	; 248
    105c:	f3 cf       	rjmp	.-26     	; 0x1044 <__addsf3x+0x34>
    105e:	46 95       	lsr	r20
    1060:	37 95       	ror	r19
    1062:	27 95       	ror	r18
    1064:	a7 95       	ror	r26
    1066:	f0 40       	sbci	r31, 0x00	; 0
    1068:	53 95       	inc	r21
    106a:	c9 f7       	brne	.-14     	; 0x105e <__addsf3x+0x4e>
    106c:	7e f4       	brtc	.+30     	; 0x108c <__addsf3x+0x7c>
    106e:	1f 16       	cp	r1, r31
    1070:	ba 0b       	sbc	r27, r26
    1072:	62 0b       	sbc	r22, r18
    1074:	73 0b       	sbc	r23, r19
    1076:	84 0b       	sbc	r24, r20
    1078:	ba f0       	brmi	.+46     	; 0x10a8 <__addsf3x+0x98>
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	a1 f0       	breq	.+40     	; 0x10a6 <__addsf3x+0x96>
    107e:	ff 0f       	add	r31, r31
    1080:	bb 1f       	adc	r27, r27
    1082:	66 1f       	adc	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	c2 f7       	brpl	.-16     	; 0x107a <__addsf3x+0x6a>
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <__addsf3x+0x98>
    108c:	ba 0f       	add	r27, r26
    108e:	62 1f       	adc	r22, r18
    1090:	73 1f       	adc	r23, r19
    1092:	84 1f       	adc	r24, r20
    1094:	48 f4       	brcc	.+18     	; 0x10a8 <__addsf3x+0x98>
    1096:	87 95       	ror	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b7 95       	ror	r27
    109e:	f7 95       	ror	r31
    10a0:	9e 3f       	cpi	r25, 0xFE	; 254
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <__addsf3x+0x96>
    10a4:	b3 cf       	rjmp	.-154    	; 0x100c <__addsf3+0x1e>
    10a6:	93 95       	inc	r25
    10a8:	88 0f       	add	r24, r24
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__addsf3x+0x9e>
    10ac:	99 27       	eor	r25, r25
    10ae:	ee 0f       	add	r30, r30
    10b0:	97 95       	ror	r25
    10b2:	87 95       	ror	r24
    10b4:	08 95       	ret

000010b6 <__fixsfsi>:
    10b6:	04 d0       	rcall	.+8      	; 0x10c0 <__fixunssfsi>
    10b8:	68 94       	set
    10ba:	b1 11       	cpse	r27, r1
    10bc:	08 c1       	rjmp	.+528    	; 0x12ce <__fp_szero>
    10be:	08 95       	ret

000010c0 <__fixunssfsi>:
    10c0:	d4 d0       	rcall	.+424    	; 0x126a <__fp_splitA>
    10c2:	88 f0       	brcs	.+34     	; 0x10e6 <__fixunssfsi+0x26>
    10c4:	9f 57       	subi	r25, 0x7F	; 127
    10c6:	90 f0       	brcs	.+36     	; 0x10ec <__fixunssfsi+0x2c>
    10c8:	b9 2f       	mov	r27, r25
    10ca:	99 27       	eor	r25, r25
    10cc:	b7 51       	subi	r27, 0x17	; 23
    10ce:	a0 f0       	brcs	.+40     	; 0x10f8 <__fixunssfsi+0x38>
    10d0:	d1 f0       	breq	.+52     	; 0x1106 <__fixunssfsi+0x46>
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	1a f0       	brmi	.+6      	; 0x10e2 <__fixunssfsi+0x22>
    10dc:	ba 95       	dec	r27
    10de:	c9 f7       	brne	.-14     	; 0x10d2 <__fixunssfsi+0x12>
    10e0:	12 c0       	rjmp	.+36     	; 0x1106 <__fixunssfsi+0x46>
    10e2:	b1 30       	cpi	r27, 0x01	; 1
    10e4:	81 f0       	breq	.+32     	; 0x1106 <__fixunssfsi+0x46>
    10e6:	f2 d0       	rcall	.+484    	; 0x12cc <__fp_zero>
    10e8:	b1 e0       	ldi	r27, 0x01	; 1
    10ea:	08 95       	ret
    10ec:	ef c0       	rjmp	.+478    	; 0x12cc <__fp_zero>
    10ee:	67 2f       	mov	r22, r23
    10f0:	78 2f       	mov	r23, r24
    10f2:	88 27       	eor	r24, r24
    10f4:	b8 5f       	subi	r27, 0xF8	; 248
    10f6:	39 f0       	breq	.+14     	; 0x1106 <__fixunssfsi+0x46>
    10f8:	b9 3f       	cpi	r27, 0xF9	; 249
    10fa:	cc f3       	brlt	.-14     	; 0x10ee <__fixunssfsi+0x2e>
    10fc:	86 95       	lsr	r24
    10fe:	77 95       	ror	r23
    1100:	67 95       	ror	r22
    1102:	b3 95       	inc	r27
    1104:	d9 f7       	brne	.-10     	; 0x10fc <__fixunssfsi+0x3c>
    1106:	3e f4       	brtc	.+14     	; 0x1116 <__fixunssfsi+0x56>
    1108:	90 95       	com	r25
    110a:	80 95       	com	r24
    110c:	70 95       	com	r23
    110e:	61 95       	neg	r22
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	8f 4f       	sbci	r24, 0xFF	; 255
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	08 95       	ret

00001118 <__floatunsisf>:
    1118:	e8 94       	clt
    111a:	09 c0       	rjmp	.+18     	; 0x112e <__floatsisf+0x12>

0000111c <__floatsisf>:
    111c:	97 fb       	bst	r25, 7
    111e:	3e f4       	brtc	.+14     	; 0x112e <__floatsisf+0x12>
    1120:	90 95       	com	r25
    1122:	80 95       	com	r24
    1124:	70 95       	com	r23
    1126:	61 95       	neg	r22
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	99 23       	and	r25, r25
    1130:	a9 f0       	breq	.+42     	; 0x115c <__floatsisf+0x40>
    1132:	f9 2f       	mov	r31, r25
    1134:	96 e9       	ldi	r25, 0x96	; 150
    1136:	bb 27       	eor	r27, r27
    1138:	93 95       	inc	r25
    113a:	f6 95       	lsr	r31
    113c:	87 95       	ror	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b7 95       	ror	r27
    1144:	f1 11       	cpse	r31, r1
    1146:	f8 cf       	rjmp	.-16     	; 0x1138 <__floatsisf+0x1c>
    1148:	fa f4       	brpl	.+62     	; 0x1188 <__floatsisf+0x6c>
    114a:	bb 0f       	add	r27, r27
    114c:	11 f4       	brne	.+4      	; 0x1152 <__floatsisf+0x36>
    114e:	60 ff       	sbrs	r22, 0
    1150:	1b c0       	rjmp	.+54     	; 0x1188 <__floatsisf+0x6c>
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	16 c0       	rjmp	.+44     	; 0x1188 <__floatsisf+0x6c>
    115c:	88 23       	and	r24, r24
    115e:	11 f0       	breq	.+4      	; 0x1164 <__floatsisf+0x48>
    1160:	96 e9       	ldi	r25, 0x96	; 150
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <__floatsisf+0x6a>
    1164:	77 23       	and	r23, r23
    1166:	21 f0       	breq	.+8      	; 0x1170 <__floatsisf+0x54>
    1168:	9e e8       	ldi	r25, 0x8E	; 142
    116a:	87 2f       	mov	r24, r23
    116c:	76 2f       	mov	r23, r22
    116e:	05 c0       	rjmp	.+10     	; 0x117a <__floatsisf+0x5e>
    1170:	66 23       	and	r22, r22
    1172:	71 f0       	breq	.+28     	; 0x1190 <__floatsisf+0x74>
    1174:	96 e8       	ldi	r25, 0x86	; 134
    1176:	86 2f       	mov	r24, r22
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	2a f0       	brmi	.+10     	; 0x1188 <__floatsisf+0x6c>
    117e:	9a 95       	dec	r25
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	da f7       	brpl	.-10     	; 0x117e <__floatsisf+0x62>
    1188:	88 0f       	add	r24, r24
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	97 f9       	bld	r25, 7
    1190:	08 95       	ret

00001192 <floor>:
    1192:	85 d0       	rcall	.+266    	; 0x129e <__fp_trunc>
    1194:	80 f0       	brcs	.+32     	; 0x11b6 <floor+0x24>
    1196:	9f 37       	cpi	r25, 0x7F	; 127
    1198:	40 f4       	brcc	.+16     	; 0x11aa <floor+0x18>
    119a:	91 11       	cpse	r25, r1
    119c:	0e f0       	brts	.+2      	; 0x11a0 <floor+0xe>
    119e:	97 c0       	rjmp	.+302    	; 0x12ce <__fp_szero>
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	80 e8       	ldi	r24, 0x80	; 128
    11a6:	9f eb       	ldi	r25, 0xBF	; 191
    11a8:	08 95       	ret
    11aa:	26 f4       	brtc	.+8      	; 0x11b4 <floor+0x22>
    11ac:	1b 16       	cp	r1, r27
    11ae:	61 1d       	adc	r22, r1
    11b0:	71 1d       	adc	r23, r1
    11b2:	81 1d       	adc	r24, r1
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <__fp_mintl>
    11b6:	21 c0       	rjmp	.+66     	; 0x11fa <__fp_mpack>

000011b8 <__fp_inf>:
    11b8:	97 f9       	bld	r25, 7
    11ba:	9f 67       	ori	r25, 0x7F	; 127
    11bc:	80 e8       	ldi	r24, 0x80	; 128
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	08 95       	ret

000011c4 <__fp_mintl>:
    11c4:	88 23       	and	r24, r24
    11c6:	71 f4       	brne	.+28     	; 0x11e4 <__fp_mintl+0x20>
    11c8:	77 23       	and	r23, r23
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <__fp_mintl+0x10>
    11cc:	98 50       	subi	r25, 0x08	; 8
    11ce:	87 2b       	or	r24, r23
    11d0:	76 2f       	mov	r23, r22
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <__fp_mintl+0x1e>
    11d4:	66 23       	and	r22, r22
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__fp_mintl+0x18>
    11d8:	99 27       	eor	r25, r25
    11da:	0d c0       	rjmp	.+26     	; 0x11f6 <__fp_mintl+0x32>
    11dc:	90 51       	subi	r25, 0x10	; 16
    11de:	86 2b       	or	r24, r22
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	2a f0       	brmi	.+10     	; 0x11f0 <__fp_mintl+0x2c>
    11e6:	9a 95       	dec	r25
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	da f7       	brpl	.-10     	; 0x11e6 <__fp_mintl+0x22>
    11f0:	88 0f       	add	r24, r24
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <__fp_mpack>:
    11fa:	9f 3f       	cpi	r25, 0xFF	; 255
    11fc:	31 f0       	breq	.+12     	; 0x120a <__fp_mpack_finite+0xc>

000011fe <__fp_mpack_finite>:
    11fe:	91 50       	subi	r25, 0x01	; 1
    1200:	20 f4       	brcc	.+8      	; 0x120a <__fp_mpack_finite+0xc>
    1202:	87 95       	ror	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret

00001216 <__fp_nan>:
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	80 ec       	ldi	r24, 0xC0	; 192
    121a:	08 95       	ret

0000121c <__fp_pscA>:
    121c:	00 24       	eor	r0, r0
    121e:	0a 94       	dec	r0
    1220:	16 16       	cp	r1, r22
    1222:	17 06       	cpc	r1, r23
    1224:	18 06       	cpc	r1, r24
    1226:	09 06       	cpc	r0, r25
    1228:	08 95       	ret

0000122a <__fp_pscB>:
    122a:	00 24       	eor	r0, r0
    122c:	0a 94       	dec	r0
    122e:	12 16       	cp	r1, r18
    1230:	13 06       	cpc	r1, r19
    1232:	14 06       	cpc	r1, r20
    1234:	05 06       	cpc	r0, r21
    1236:	08 95       	ret

00001238 <__fp_round>:
    1238:	09 2e       	mov	r0, r25
    123a:	03 94       	inc	r0
    123c:	00 0c       	add	r0, r0
    123e:	11 f4       	brne	.+4      	; 0x1244 <__fp_round+0xc>
    1240:	88 23       	and	r24, r24
    1242:	52 f0       	brmi	.+20     	; 0x1258 <__fp_round+0x20>
    1244:	bb 0f       	add	r27, r27
    1246:	40 f4       	brcc	.+16     	; 0x1258 <__fp_round+0x20>
    1248:	bf 2b       	or	r27, r31
    124a:	11 f4       	brne	.+4      	; 0x1250 <__fp_round+0x18>
    124c:	60 ff       	sbrs	r22, 0
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__fp_round+0x20>
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__fp_split3>:
    125a:	57 fd       	sbrc	r21, 7
    125c:	90 58       	subi	r25, 0x80	; 128
    125e:	44 0f       	add	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	59 f0       	breq	.+22     	; 0x127a <__fp_splitA+0x10>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	71 f0       	breq	.+28     	; 0x1284 <__fp_splitA+0x1a>
    1268:	47 95       	ror	r20

0000126a <__fp_splitA>:
    126a:	88 0f       	add	r24, r24
    126c:	97 fb       	bst	r25, 7
    126e:	99 1f       	adc	r25, r25
    1270:	61 f0       	breq	.+24     	; 0x128a <__fp_splitA+0x20>
    1272:	9f 3f       	cpi	r25, 0xFF	; 255
    1274:	79 f0       	breq	.+30     	; 0x1294 <__fp_splitA+0x2a>
    1276:	87 95       	ror	r24
    1278:	08 95       	ret
    127a:	12 16       	cp	r1, r18
    127c:	13 06       	cpc	r1, r19
    127e:	14 06       	cpc	r1, r20
    1280:	55 1f       	adc	r21, r21
    1282:	f2 cf       	rjmp	.-28     	; 0x1268 <__fp_split3+0xe>
    1284:	46 95       	lsr	r20
    1286:	f1 df       	rcall	.-30     	; 0x126a <__fp_splitA>
    1288:	08 c0       	rjmp	.+16     	; 0x129a <__fp_splitA+0x30>
    128a:	16 16       	cp	r1, r22
    128c:	17 06       	cpc	r1, r23
    128e:	18 06       	cpc	r1, r24
    1290:	99 1f       	adc	r25, r25
    1292:	f1 cf       	rjmp	.-30     	; 0x1276 <__fp_splitA+0xc>
    1294:	86 95       	lsr	r24
    1296:	71 05       	cpc	r23, r1
    1298:	61 05       	cpc	r22, r1
    129a:	08 94       	sec
    129c:	08 95       	ret

0000129e <__fp_trunc>:
    129e:	e5 df       	rcall	.-54     	; 0x126a <__fp_splitA>
    12a0:	a0 f0       	brcs	.+40     	; 0x12ca <__fp_trunc+0x2c>
    12a2:	be e7       	ldi	r27, 0x7E	; 126
    12a4:	b9 17       	cp	r27, r25
    12a6:	88 f4       	brcc	.+34     	; 0x12ca <__fp_trunc+0x2c>
    12a8:	bb 27       	eor	r27, r27
    12aa:	9f 38       	cpi	r25, 0x8F	; 143
    12ac:	60 f4       	brcc	.+24     	; 0x12c6 <__fp_trunc+0x28>
    12ae:	16 16       	cp	r1, r22
    12b0:	b1 1d       	adc	r27, r1
    12b2:	67 2f       	mov	r22, r23
    12b4:	78 2f       	mov	r23, r24
    12b6:	88 27       	eor	r24, r24
    12b8:	98 5f       	subi	r25, 0xF8	; 248
    12ba:	f7 cf       	rjmp	.-18     	; 0x12aa <__fp_trunc+0xc>
    12bc:	86 95       	lsr	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	b1 1d       	adc	r27, r1
    12c4:	93 95       	inc	r25
    12c6:	96 39       	cpi	r25, 0x96	; 150
    12c8:	c8 f3       	brcs	.-14     	; 0x12bc <__fp_trunc+0x1e>
    12ca:	08 95       	ret

000012cc <__fp_zero>:
    12cc:	e8 94       	clt

000012ce <__fp_szero>:
    12ce:	bb 27       	eor	r27, r27
    12d0:	66 27       	eor	r22, r22
    12d2:	77 27       	eor	r23, r23
    12d4:	cb 01       	movw	r24, r22
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret

000012da <__gesf2>:
    12da:	81 d1       	rcall	.+770    	; 0x15de <__fp_cmp>
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <__gesf2+0x6>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <log10>:
    12e2:	0a d0       	rcall	.+20     	; 0x12f8 <log>
    12e4:	29 ed       	ldi	r18, 0xD9	; 217
    12e6:	3b e5       	ldi	r19, 0x5B	; 91
    12e8:	4e ed       	ldi	r20, 0xDE	; 222
    12ea:	5e e3       	ldi	r21, 0x3E	; 62
    12ec:	78 c0       	rjmp	.+240    	; 0x13de <__mulsf3>
    12ee:	0e f0       	brts	.+2      	; 0x12f2 <log10+0x10>
    12f0:	84 cf       	rjmp	.-248    	; 0x11fa <__fp_mpack>
    12f2:	91 cf       	rjmp	.-222    	; 0x1216 <__fp_nan>
    12f4:	68 94       	set
    12f6:	60 cf       	rjmp	.-320    	; 0x11b8 <__fp_inf>

000012f8 <log>:
    12f8:	b8 df       	rcall	.-144    	; 0x126a <__fp_splitA>
    12fa:	c8 f3       	brcs	.-14     	; 0x12ee <log10+0xc>
    12fc:	99 23       	and	r25, r25
    12fe:	d1 f3       	breq	.-12     	; 0x12f4 <log10+0x12>
    1300:	c6 f3       	brts	.-16     	; 0x12f2 <log10+0x10>
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	1f 93       	push	r17
    1308:	0f 93       	push	r16
    130a:	ff 92       	push	r15
    130c:	c9 2f       	mov	r28, r25
    130e:	dd 27       	eor	r29, r29
    1310:	88 23       	and	r24, r24
    1312:	2a f0       	brmi	.+10     	; 0x131e <log+0x26>
    1314:	21 97       	sbiw	r28, 0x01	; 1
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	da f7       	brpl	.-10     	; 0x1314 <log+0x1c>
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f eb       	ldi	r21, 0xBF	; 191
    1326:	9f e3       	ldi	r25, 0x3F	; 63
    1328:	88 39       	cpi	r24, 0x98	; 152
    132a:	20 f0       	brcs	.+8      	; 0x1334 <log+0x3c>
    132c:	80 3e       	cpi	r24, 0xE0	; 224
    132e:	30 f0       	brcs	.+12     	; 0x133c <log+0x44>
    1330:	21 96       	adiw	r28, 0x01	; 1
    1332:	8f 77       	andi	r24, 0x7F	; 127
    1334:	5c de       	rcall	.-840    	; 0xfee <__addsf3>
    1336:	ec e8       	ldi	r30, 0x8C	; 140
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <log+0x4a>
    133c:	58 de       	rcall	.-848    	; 0xfee <__addsf3>
    133e:	e9 eb       	ldi	r30, 0xB9	; 185
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	71 d1       	rcall	.+738    	; 0x1626 <__fp_powser>
    1344:	8b 01       	movw	r16, r22
    1346:	be 01       	movw	r22, r28
    1348:	ec 01       	movw	r28, r24
    134a:	fb 2e       	mov	r15, r27
    134c:	6f 57       	subi	r22, 0x7F	; 127
    134e:	71 09       	sbc	r23, r1
    1350:	75 95       	asr	r23
    1352:	77 1f       	adc	r23, r23
    1354:	88 0b       	sbc	r24, r24
    1356:	99 0b       	sbc	r25, r25
    1358:	e1 de       	rcall	.-574    	; 0x111c <__floatsisf>
    135a:	28 e1       	ldi	r18, 0x18	; 24
    135c:	32 e7       	ldi	r19, 0x72	; 114
    135e:	41 e3       	ldi	r20, 0x31	; 49
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	49 d0       	rcall	.+146    	; 0x13f6 <__mulsf3x>
    1364:	af 2d       	mov	r26, r15
    1366:	98 01       	movw	r18, r16
    1368:	ae 01       	movw	r20, r28
    136a:	ff 90       	pop	r15
    136c:	0f 91       	pop	r16
    136e:	1f 91       	pop	r17
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	4d de       	rcall	.-870    	; 0x1010 <__addsf3x>
    1376:	60 cf       	rjmp	.-320    	; 0x1238 <__fp_round>

00001378 <modf>:
    1378:	fa 01       	movw	r30, r20
    137a:	dc 01       	movw	r26, r24
    137c:	aa 0f       	add	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	9b 01       	movw	r18, r22
    1382:	ac 01       	movw	r20, r24
    1384:	bf 57       	subi	r27, 0x7F	; 127
    1386:	28 f4       	brcc	.+10     	; 0x1392 <modf+0x1a>
    1388:	22 27       	eor	r18, r18
    138a:	33 27       	eor	r19, r19
    138c:	44 27       	eor	r20, r20
    138e:	50 78       	andi	r21, 0x80	; 128
    1390:	1f c0       	rjmp	.+62     	; 0x13d0 <modf+0x58>
    1392:	b7 51       	subi	r27, 0x17	; 23
    1394:	88 f4       	brcc	.+34     	; 0x13b8 <modf+0x40>
    1396:	ab 2f       	mov	r26, r27
    1398:	00 24       	eor	r0, r0
    139a:	46 95       	lsr	r20
    139c:	37 95       	ror	r19
    139e:	27 95       	ror	r18
    13a0:	01 1c       	adc	r0, r1
    13a2:	a3 95       	inc	r26
    13a4:	d2 f3       	brmi	.-12     	; 0x139a <modf+0x22>
    13a6:	00 20       	and	r0, r0
    13a8:	69 f0       	breq	.+26     	; 0x13c4 <modf+0x4c>
    13aa:	22 0f       	add	r18, r18
    13ac:	33 1f       	adc	r19, r19
    13ae:	44 1f       	adc	r20, r20
    13b0:	b3 95       	inc	r27
    13b2:	da f3       	brmi	.-10     	; 0x13aa <modf+0x32>
    13b4:	0d d0       	rcall	.+26     	; 0x13d0 <modf+0x58>
    13b6:	1a ce       	rjmp	.-972    	; 0xfec <__subsf3>
    13b8:	61 30       	cpi	r22, 0x01	; 1
    13ba:	71 05       	cpc	r23, r1
    13bc:	a0 e8       	ldi	r26, 0x80	; 128
    13be:	8a 07       	cpc	r24, r26
    13c0:	b9 46       	sbci	r27, 0x69	; 105
    13c2:	30 f4       	brcc	.+12     	; 0x13d0 <modf+0x58>
    13c4:	9b 01       	movw	r18, r22
    13c6:	ac 01       	movw	r20, r24
    13c8:	66 27       	eor	r22, r22
    13ca:	77 27       	eor	r23, r23
    13cc:	88 27       	eor	r24, r24
    13ce:	90 78       	andi	r25, 0x80	; 128
    13d0:	30 96       	adiw	r30, 0x00	; 0
    13d2:	21 f0       	breq	.+8      	; 0x13dc <modf+0x64>
    13d4:	20 83       	st	Z, r18
    13d6:	31 83       	std	Z+1, r19	; 0x01
    13d8:	42 83       	std	Z+2, r20	; 0x02
    13da:	53 83       	std	Z+3, r21	; 0x03
    13dc:	08 95       	ret

000013de <__mulsf3>:
    13de:	0b d0       	rcall	.+22     	; 0x13f6 <__mulsf3x>
    13e0:	2b cf       	rjmp	.-426    	; 0x1238 <__fp_round>
    13e2:	1c df       	rcall	.-456    	; 0x121c <__fp_pscA>
    13e4:	28 f0       	brcs	.+10     	; 0x13f0 <__mulsf3+0x12>
    13e6:	21 df       	rcall	.-446    	; 0x122a <__fp_pscB>
    13e8:	18 f0       	brcs	.+6      	; 0x13f0 <__mulsf3+0x12>
    13ea:	95 23       	and	r25, r21
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <__mulsf3+0x12>
    13ee:	e4 ce       	rjmp	.-568    	; 0x11b8 <__fp_inf>
    13f0:	12 cf       	rjmp	.-476    	; 0x1216 <__fp_nan>
    13f2:	11 24       	eor	r1, r1
    13f4:	6c cf       	rjmp	.-296    	; 0x12ce <__fp_szero>

000013f6 <__mulsf3x>:
    13f6:	31 df       	rcall	.-414    	; 0x125a <__fp_split3>
    13f8:	a0 f3       	brcs	.-24     	; 0x13e2 <__mulsf3+0x4>

000013fa <__mulsf3_pse>:
    13fa:	95 9f       	mul	r25, r21
    13fc:	d1 f3       	breq	.-12     	; 0x13f2 <__mulsf3+0x14>
    13fe:	95 0f       	add	r25, r21
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	55 1f       	adc	r21, r21
    1404:	62 9f       	mul	r22, r18
    1406:	f0 01       	movw	r30, r0
    1408:	72 9f       	mul	r23, r18
    140a:	bb 27       	eor	r27, r27
    140c:	f0 0d       	add	r31, r0
    140e:	b1 1d       	adc	r27, r1
    1410:	63 9f       	mul	r22, r19
    1412:	aa 27       	eor	r26, r26
    1414:	f0 0d       	add	r31, r0
    1416:	b1 1d       	adc	r27, r1
    1418:	aa 1f       	adc	r26, r26
    141a:	64 9f       	mul	r22, r20
    141c:	66 27       	eor	r22, r22
    141e:	b0 0d       	add	r27, r0
    1420:	a1 1d       	adc	r26, r1
    1422:	66 1f       	adc	r22, r22
    1424:	82 9f       	mul	r24, r18
    1426:	22 27       	eor	r18, r18
    1428:	b0 0d       	add	r27, r0
    142a:	a1 1d       	adc	r26, r1
    142c:	62 1f       	adc	r22, r18
    142e:	73 9f       	mul	r23, r19
    1430:	b0 0d       	add	r27, r0
    1432:	a1 1d       	adc	r26, r1
    1434:	62 1f       	adc	r22, r18
    1436:	83 9f       	mul	r24, r19
    1438:	a0 0d       	add	r26, r0
    143a:	61 1d       	adc	r22, r1
    143c:	22 1f       	adc	r18, r18
    143e:	74 9f       	mul	r23, r20
    1440:	33 27       	eor	r19, r19
    1442:	a0 0d       	add	r26, r0
    1444:	61 1d       	adc	r22, r1
    1446:	23 1f       	adc	r18, r19
    1448:	84 9f       	mul	r24, r20
    144a:	60 0d       	add	r22, r0
    144c:	21 1d       	adc	r18, r1
    144e:	82 2f       	mov	r24, r18
    1450:	76 2f       	mov	r23, r22
    1452:	6a 2f       	mov	r22, r26
    1454:	11 24       	eor	r1, r1
    1456:	9f 57       	subi	r25, 0x7F	; 127
    1458:	50 40       	sbci	r21, 0x00	; 0
    145a:	8a f0       	brmi	.+34     	; 0x147e <__mulsf3_pse+0x84>
    145c:	e1 f0       	breq	.+56     	; 0x1496 <__mulsf3_pse+0x9c>
    145e:	88 23       	and	r24, r24
    1460:	4a f0       	brmi	.+18     	; 0x1474 <__mulsf3_pse+0x7a>
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	bb 1f       	adc	r27, r27
    1468:	66 1f       	adc	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	91 50       	subi	r25, 0x01	; 1
    1470:	50 40       	sbci	r21, 0x00	; 0
    1472:	a9 f7       	brne	.-22     	; 0x145e <__mulsf3_pse+0x64>
    1474:	9e 3f       	cpi	r25, 0xFE	; 254
    1476:	51 05       	cpc	r21, r1
    1478:	70 f0       	brcs	.+28     	; 0x1496 <__mulsf3_pse+0x9c>
    147a:	9e ce       	rjmp	.-708    	; 0x11b8 <__fp_inf>
    147c:	28 cf       	rjmp	.-432    	; 0x12ce <__fp_szero>
    147e:	5f 3f       	cpi	r21, 0xFF	; 255
    1480:	ec f3       	brlt	.-6      	; 0x147c <__mulsf3_pse+0x82>
    1482:	98 3e       	cpi	r25, 0xE8	; 232
    1484:	dc f3       	brlt	.-10     	; 0x147c <__mulsf3_pse+0x82>
    1486:	86 95       	lsr	r24
    1488:	77 95       	ror	r23
    148a:	67 95       	ror	r22
    148c:	b7 95       	ror	r27
    148e:	f7 95       	ror	r31
    1490:	e7 95       	ror	r30
    1492:	9f 5f       	subi	r25, 0xFF	; 255
    1494:	c1 f7       	brne	.-16     	; 0x1486 <__mulsf3_pse+0x8c>
    1496:	fe 2b       	or	r31, r30
    1498:	88 0f       	add	r24, r24
    149a:	91 1d       	adc	r25, r1
    149c:	96 95       	lsr	r25
    149e:	87 95       	ror	r24
    14a0:	97 f9       	bld	r25, 7
    14a2:	08 95       	ret

000014a4 <pow>:
    14a4:	fa 01       	movw	r30, r20
    14a6:	ee 0f       	add	r30, r30
    14a8:	ff 1f       	adc	r31, r31
    14aa:	30 96       	adiw	r30, 0x00	; 0
    14ac:	21 05       	cpc	r18, r1
    14ae:	31 05       	cpc	r19, r1
    14b0:	99 f1       	breq	.+102    	; 0x1518 <pow+0x74>
    14b2:	61 15       	cp	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	61 f4       	brne	.+24     	; 0x14d0 <pow+0x2c>
    14b8:	80 38       	cpi	r24, 0x80	; 128
    14ba:	bf e3       	ldi	r27, 0x3F	; 63
    14bc:	9b 07       	cpc	r25, r27
    14be:	49 f1       	breq	.+82     	; 0x1512 <pow+0x6e>
    14c0:	68 94       	set
    14c2:	90 38       	cpi	r25, 0x80	; 128
    14c4:	81 05       	cpc	r24, r1
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <pow+0x3c>
    14c8:	80 38       	cpi	r24, 0x80	; 128
    14ca:	bf ef       	ldi	r27, 0xFF	; 255
    14cc:	9b 07       	cpc	r25, r27
    14ce:	41 f0       	breq	.+16     	; 0x14e0 <pow+0x3c>
    14d0:	99 23       	and	r25, r25
    14d2:	42 f5       	brpl	.+80     	; 0x1524 <pow+0x80>
    14d4:	ff 3f       	cpi	r31, 0xFF	; 255
    14d6:	e1 05       	cpc	r30, r1
    14d8:	31 05       	cpc	r19, r1
    14da:	21 05       	cpc	r18, r1
    14dc:	11 f1       	breq	.+68     	; 0x1522 <pow+0x7e>
    14de:	e8 94       	clt
    14e0:	08 94       	sec
    14e2:	e7 95       	ror	r30
    14e4:	d9 01       	movw	r26, r18
    14e6:	aa 23       	and	r26, r26
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <pow+0x50>
    14ea:	ab 2f       	mov	r26, r27
    14ec:	be 2f       	mov	r27, r30
    14ee:	f8 5f       	subi	r31, 0xF8	; 248
    14f0:	d0 f3       	brcs	.-12     	; 0x14e6 <pow+0x42>
    14f2:	10 c0       	rjmp	.+32     	; 0x1514 <pow+0x70>
    14f4:	ff 5f       	subi	r31, 0xFF	; 255
    14f6:	70 f4       	brcc	.+28     	; 0x1514 <pow+0x70>
    14f8:	a6 95       	lsr	r26
    14fa:	e0 f7       	brcc	.-8      	; 0x14f4 <pow+0x50>
    14fc:	f7 39       	cpi	r31, 0x97	; 151
    14fe:	50 f0       	brcs	.+20     	; 0x1514 <pow+0x70>
    1500:	19 f0       	breq	.+6      	; 0x1508 <pow+0x64>
    1502:	ff 3a       	cpi	r31, 0xAF	; 175
    1504:	38 f4       	brcc	.+14     	; 0x1514 <pow+0x70>
    1506:	9f 77       	andi	r25, 0x7F	; 127
    1508:	9f 93       	push	r25
    150a:	0c d0       	rcall	.+24     	; 0x1524 <pow+0x80>
    150c:	0f 90       	pop	r0
    150e:	07 fc       	sbrc	r0, 7
    1510:	90 58       	subi	r25, 0x80	; 128
    1512:	08 95       	ret
    1514:	3e f0       	brts	.+14     	; 0x1524 <pow+0x80>
    1516:	7f ce       	rjmp	.-770    	; 0x1216 <__fp_nan>
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	9f e3       	ldi	r25, 0x3F	; 63
    1520:	08 95       	ret
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	9f 77       	andi	r25, 0x7F	; 127
    1526:	5f 93       	push	r21
    1528:	4f 93       	push	r20
    152a:	3f 93       	push	r19
    152c:	2f 93       	push	r18
    152e:	e4 de       	rcall	.-568    	; 0x12f8 <log>
    1530:	2f 91       	pop	r18
    1532:	3f 91       	pop	r19
    1534:	4f 91       	pop	r20
    1536:	5f 91       	pop	r21
    1538:	52 df       	rcall	.-348    	; 0x13de <__mulsf3>
    153a:	25 c0       	rjmp	.+74     	; 0x1586 <exp>

0000153c <round>:
    153c:	96 de       	rcall	.-724    	; 0x126a <__fp_splitA>
    153e:	e0 f0       	brcs	.+56     	; 0x1578 <round+0x3c>
    1540:	9e 37       	cpi	r25, 0x7E	; 126
    1542:	d8 f0       	brcs	.+54     	; 0x157a <round+0x3e>
    1544:	96 39       	cpi	r25, 0x96	; 150
    1546:	b8 f4       	brcc	.+46     	; 0x1576 <round+0x3a>
    1548:	9e 38       	cpi	r25, 0x8E	; 142
    154a:	48 f4       	brcc	.+18     	; 0x155e <round+0x22>
    154c:	67 2f       	mov	r22, r23
    154e:	78 2f       	mov	r23, r24
    1550:	88 27       	eor	r24, r24
    1552:	98 5f       	subi	r25, 0xF8	; 248
    1554:	f9 cf       	rjmp	.-14     	; 0x1548 <round+0xc>
    1556:	86 95       	lsr	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	93 95       	inc	r25
    155e:	95 39       	cpi	r25, 0x95	; 149
    1560:	d0 f3       	brcs	.-12     	; 0x1556 <round+0x1a>
    1562:	b6 2f       	mov	r27, r22
    1564:	b1 70       	andi	r27, 0x01	; 1
    1566:	6b 0f       	add	r22, r27
    1568:	71 1d       	adc	r23, r1
    156a:	81 1d       	adc	r24, r1
    156c:	20 f4       	brcc	.+8      	; 0x1576 <round+0x3a>
    156e:	87 95       	ror	r24
    1570:	77 95       	ror	r23
    1572:	67 95       	ror	r22
    1574:	93 95       	inc	r25
    1576:	26 ce       	rjmp	.-948    	; 0x11c4 <__fp_mintl>
    1578:	40 ce       	rjmp	.-896    	; 0x11fa <__fp_mpack>
    157a:	a9 ce       	rjmp	.-686    	; 0x12ce <__fp_szero>
    157c:	19 f4       	brne	.+6      	; 0x1584 <round+0x48>
    157e:	0e f0       	brts	.+2      	; 0x1582 <round+0x46>
    1580:	1b ce       	rjmp	.-970    	; 0x11b8 <__fp_inf>
    1582:	a4 ce       	rjmp	.-696    	; 0x12cc <__fp_zero>
    1584:	48 ce       	rjmp	.-880    	; 0x1216 <__fp_nan>

00001586 <exp>:
    1586:	71 de       	rcall	.-798    	; 0x126a <__fp_splitA>
    1588:	c8 f3       	brcs	.-14     	; 0x157c <round+0x40>
    158a:	96 38       	cpi	r25, 0x86	; 134
    158c:	c0 f7       	brcc	.-16     	; 0x157e <round+0x42>
    158e:	07 f8       	bld	r0, 7
    1590:	0f 92       	push	r0
    1592:	e8 94       	clt
    1594:	2b e3       	ldi	r18, 0x3B	; 59
    1596:	3a ea       	ldi	r19, 0xAA	; 170
    1598:	48 eb       	ldi	r20, 0xB8	; 184
    159a:	5f e7       	ldi	r21, 0x7F	; 127
    159c:	2e df       	rcall	.-420    	; 0x13fa <__mulsf3_pse>
    159e:	0f 92       	push	r0
    15a0:	0f 92       	push	r0
    15a2:	0f 92       	push	r0
    15a4:	4d b7       	in	r20, 0x3d	; 61
    15a6:	5e b7       	in	r21, 0x3e	; 62
    15a8:	0f 92       	push	r0
    15aa:	e6 de       	rcall	.-564    	; 0x1378 <modf>
    15ac:	e6 ee       	ldi	r30, 0xE6	; 230
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	3a d0       	rcall	.+116    	; 0x1626 <__fp_powser>
    15b2:	4f 91       	pop	r20
    15b4:	5f 91       	pop	r21
    15b6:	ef 91       	pop	r30
    15b8:	ff 91       	pop	r31
    15ba:	e5 95       	asr	r30
    15bc:	ee 1f       	adc	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	49 f0       	breq	.+18     	; 0x15d4 <exp+0x4e>
    15c2:	fe 57       	subi	r31, 0x7E	; 126
    15c4:	e0 68       	ori	r30, 0x80	; 128
    15c6:	44 27       	eor	r20, r20
    15c8:	ee 0f       	add	r30, r30
    15ca:	44 1f       	adc	r20, r20
    15cc:	fa 95       	dec	r31
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <exp+0x42>
    15d0:	41 95       	neg	r20
    15d2:	55 0b       	sbc	r21, r21
    15d4:	56 d0       	rcall	.+172    	; 0x1682 <ldexp>
    15d6:	0f 90       	pop	r0
    15d8:	07 fe       	sbrs	r0, 7
    15da:	4a c0       	rjmp	.+148    	; 0x1670 <inverse>
    15dc:	08 95       	ret

000015de <__fp_cmp>:
    15de:	99 0f       	add	r25, r25
    15e0:	00 08       	sbc	r0, r0
    15e2:	55 0f       	add	r21, r21
    15e4:	aa 0b       	sbc	r26, r26
    15e6:	e0 e8       	ldi	r30, 0x80	; 128
    15e8:	fe ef       	ldi	r31, 0xFE	; 254
    15ea:	16 16       	cp	r1, r22
    15ec:	17 06       	cpc	r1, r23
    15ee:	e8 07       	cpc	r30, r24
    15f0:	f9 07       	cpc	r31, r25
    15f2:	c0 f0       	brcs	.+48     	; 0x1624 <__fp_cmp+0x46>
    15f4:	12 16       	cp	r1, r18
    15f6:	13 06       	cpc	r1, r19
    15f8:	e4 07       	cpc	r30, r20
    15fa:	f5 07       	cpc	r31, r21
    15fc:	98 f0       	brcs	.+38     	; 0x1624 <__fp_cmp+0x46>
    15fe:	62 1b       	sub	r22, r18
    1600:	73 0b       	sbc	r23, r19
    1602:	84 0b       	sbc	r24, r20
    1604:	95 0b       	sbc	r25, r21
    1606:	39 f4       	brne	.+14     	; 0x1616 <__fp_cmp+0x38>
    1608:	0a 26       	eor	r0, r26
    160a:	61 f0       	breq	.+24     	; 0x1624 <__fp_cmp+0x46>
    160c:	23 2b       	or	r18, r19
    160e:	24 2b       	or	r18, r20
    1610:	25 2b       	or	r18, r21
    1612:	21 f4       	brne	.+8      	; 0x161c <__fp_cmp+0x3e>
    1614:	08 95       	ret
    1616:	0a 26       	eor	r0, r26
    1618:	09 f4       	brne	.+2      	; 0x161c <__fp_cmp+0x3e>
    161a:	a1 40       	sbci	r26, 0x01	; 1
    161c:	a6 95       	lsr	r26
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	81 1d       	adc	r24, r1
    1622:	81 1d       	adc	r24, r1
    1624:	08 95       	ret

00001626 <__fp_powser>:
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	1f 93       	push	r17
    162c:	0f 93       	push	r16
    162e:	ff 92       	push	r15
    1630:	ef 92       	push	r14
    1632:	df 92       	push	r13
    1634:	7b 01       	movw	r14, r22
    1636:	8c 01       	movw	r16, r24
    1638:	68 94       	set
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <__fp_powser+0x20>
    163c:	da 2e       	mov	r13, r26
    163e:	ef 01       	movw	r28, r30
    1640:	da de       	rcall	.-588    	; 0x13f6 <__mulsf3x>
    1642:	fe 01       	movw	r30, r28
    1644:	e8 94       	clt
    1646:	a5 91       	lpm	r26, Z+
    1648:	25 91       	lpm	r18, Z+
    164a:	35 91       	lpm	r19, Z+
    164c:	45 91       	lpm	r20, Z+
    164e:	55 91       	lpm	r21, Z+
    1650:	ae f3       	brts	.-22     	; 0x163c <__fp_powser+0x16>
    1652:	ef 01       	movw	r28, r30
    1654:	dd dc       	rcall	.-1606   	; 0x1010 <__addsf3x>
    1656:	fe 01       	movw	r30, r28
    1658:	97 01       	movw	r18, r14
    165a:	a8 01       	movw	r20, r16
    165c:	da 94       	dec	r13
    165e:	79 f7       	brne	.-34     	; 0x163e <__fp_powser+0x18>
    1660:	df 90       	pop	r13
    1662:	ef 90       	pop	r14
    1664:	ff 90       	pop	r15
    1666:	0f 91       	pop	r16
    1668:	1f 91       	pop	r17
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <inverse>:
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	80 e8       	ldi	r24, 0x80	; 128
    167a:	9f e3       	ldi	r25, 0x3F	; 63
    167c:	36 c0       	rjmp	.+108    	; 0x16ea <__divsf3>
    167e:	9c cd       	rjmp	.-1224   	; 0x11b8 <__fp_inf>
    1680:	bc cd       	rjmp	.-1160   	; 0x11fa <__fp_mpack>

00001682 <ldexp>:
    1682:	f3 dd       	rcall	.-1050   	; 0x126a <__fp_splitA>
    1684:	e8 f3       	brcs	.-6      	; 0x1680 <inverse+0x10>
    1686:	99 23       	and	r25, r25
    1688:	d9 f3       	breq	.-10     	; 0x1680 <inverse+0x10>
    168a:	94 0f       	add	r25, r20
    168c:	51 1d       	adc	r21, r1
    168e:	bb f3       	brvs	.-18     	; 0x167e <inverse+0xe>
    1690:	91 50       	subi	r25, 0x01	; 1
    1692:	50 40       	sbci	r21, 0x00	; 0
    1694:	94 f0       	brlt	.+36     	; 0x16ba <ldexp+0x38>
    1696:	59 f0       	breq	.+22     	; 0x16ae <ldexp+0x2c>
    1698:	88 23       	and	r24, r24
    169a:	32 f0       	brmi	.+12     	; 0x16a8 <ldexp+0x26>
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	88 1f       	adc	r24, r24
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	50 40       	sbci	r21, 0x00	; 0
    16a6:	c1 f7       	brne	.-16     	; 0x1698 <ldexp+0x16>
    16a8:	9e 3f       	cpi	r25, 0xFE	; 254
    16aa:	51 05       	cpc	r21, r1
    16ac:	44 f7       	brge	.-48     	; 0x167e <inverse+0xe>
    16ae:	88 0f       	add	r24, r24
    16b0:	91 1d       	adc	r25, r1
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret
    16ba:	5f 3f       	cpi	r21, 0xFF	; 255
    16bc:	ac f0       	brlt	.+42     	; 0x16e8 <ldexp+0x66>
    16be:	98 3e       	cpi	r25, 0xE8	; 232
    16c0:	9c f0       	brlt	.+38     	; 0x16e8 <ldexp+0x66>
    16c2:	bb 27       	eor	r27, r27
    16c4:	86 95       	lsr	r24
    16c6:	77 95       	ror	r23
    16c8:	67 95       	ror	r22
    16ca:	b7 95       	ror	r27
    16cc:	08 f4       	brcc	.+2      	; 0x16d0 <ldexp+0x4e>
    16ce:	b1 60       	ori	r27, 0x01	; 1
    16d0:	93 95       	inc	r25
    16d2:	c1 f7       	brne	.-16     	; 0x16c4 <ldexp+0x42>
    16d4:	bb 0f       	add	r27, r27
    16d6:	58 f7       	brcc	.-42     	; 0x16ae <ldexp+0x2c>
    16d8:	11 f4       	brne	.+4      	; 0x16de <ldexp+0x5c>
    16da:	60 ff       	sbrs	r22, 0
    16dc:	e8 cf       	rjmp	.-48     	; 0x16ae <ldexp+0x2c>
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	8f 4f       	sbci	r24, 0xFF	; 255
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	e3 cf       	rjmp	.-58     	; 0x16ae <ldexp+0x2c>
    16e8:	f2 cd       	rjmp	.-1052   	; 0x12ce <__fp_szero>

000016ea <__divsf3>:
    16ea:	0c d0       	rcall	.+24     	; 0x1704 <__divsf3x>
    16ec:	a5 cd       	rjmp	.-1206   	; 0x1238 <__fp_round>
    16ee:	9d dd       	rcall	.-1222   	; 0x122a <__fp_pscB>
    16f0:	40 f0       	brcs	.+16     	; 0x1702 <__divsf3+0x18>
    16f2:	94 dd       	rcall	.-1240   	; 0x121c <__fp_pscA>
    16f4:	30 f0       	brcs	.+12     	; 0x1702 <__divsf3+0x18>
    16f6:	21 f4       	brne	.+8      	; 0x1700 <__divsf3+0x16>
    16f8:	5f 3f       	cpi	r21, 0xFF	; 255
    16fa:	19 f0       	breq	.+6      	; 0x1702 <__divsf3+0x18>
    16fc:	5d cd       	rjmp	.-1350   	; 0x11b8 <__fp_inf>
    16fe:	51 11       	cpse	r21, r1
    1700:	e6 cd       	rjmp	.-1076   	; 0x12ce <__fp_szero>
    1702:	89 cd       	rjmp	.-1262   	; 0x1216 <__fp_nan>

00001704 <__divsf3x>:
    1704:	aa dd       	rcall	.-1196   	; 0x125a <__fp_split3>
    1706:	98 f3       	brcs	.-26     	; 0x16ee <__divsf3+0x4>

00001708 <__divsf3_pse>:
    1708:	99 23       	and	r25, r25
    170a:	c9 f3       	breq	.-14     	; 0x16fe <__divsf3+0x14>
    170c:	55 23       	and	r21, r21
    170e:	b1 f3       	breq	.-20     	; 0x16fc <__divsf3+0x12>
    1710:	95 1b       	sub	r25, r21
    1712:	55 0b       	sbc	r21, r21
    1714:	bb 27       	eor	r27, r27
    1716:	aa 27       	eor	r26, r26
    1718:	62 17       	cp	r22, r18
    171a:	73 07       	cpc	r23, r19
    171c:	84 07       	cpc	r24, r20
    171e:	38 f0       	brcs	.+14     	; 0x172e <__divsf3_pse+0x26>
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	5f 4f       	sbci	r21, 0xFF	; 255
    1724:	22 0f       	add	r18, r18
    1726:	33 1f       	adc	r19, r19
    1728:	44 1f       	adc	r20, r20
    172a:	aa 1f       	adc	r26, r26
    172c:	a9 f3       	breq	.-22     	; 0x1718 <__divsf3_pse+0x10>
    172e:	33 d0       	rcall	.+102    	; 0x1796 <__divsf3_pse+0x8e>
    1730:	0e 2e       	mov	r0, r30
    1732:	3a f0       	brmi	.+14     	; 0x1742 <__divsf3_pse+0x3a>
    1734:	e0 e8       	ldi	r30, 0x80	; 128
    1736:	30 d0       	rcall	.+96     	; 0x1798 <__divsf3_pse+0x90>
    1738:	91 50       	subi	r25, 0x01	; 1
    173a:	50 40       	sbci	r21, 0x00	; 0
    173c:	e6 95       	lsr	r30
    173e:	00 1c       	adc	r0, r0
    1740:	ca f7       	brpl	.-14     	; 0x1734 <__divsf3_pse+0x2c>
    1742:	29 d0       	rcall	.+82     	; 0x1796 <__divsf3_pse+0x8e>
    1744:	fe 2f       	mov	r31, r30
    1746:	27 d0       	rcall	.+78     	; 0x1796 <__divsf3_pse+0x8e>
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	bb 1f       	adc	r27, r27
    1750:	26 17       	cp	r18, r22
    1752:	37 07       	cpc	r19, r23
    1754:	48 07       	cpc	r20, r24
    1756:	ab 07       	cpc	r26, r27
    1758:	b0 e8       	ldi	r27, 0x80	; 128
    175a:	09 f0       	breq	.+2      	; 0x175e <__divsf3_pse+0x56>
    175c:	bb 0b       	sbc	r27, r27
    175e:	80 2d       	mov	r24, r0
    1760:	bf 01       	movw	r22, r30
    1762:	ff 27       	eor	r31, r31
    1764:	93 58       	subi	r25, 0x83	; 131
    1766:	5f 4f       	sbci	r21, 0xFF	; 255
    1768:	2a f0       	brmi	.+10     	; 0x1774 <__divsf3_pse+0x6c>
    176a:	9e 3f       	cpi	r25, 0xFE	; 254
    176c:	51 05       	cpc	r21, r1
    176e:	68 f0       	brcs	.+26     	; 0x178a <__divsf3_pse+0x82>
    1770:	23 cd       	rjmp	.-1466   	; 0x11b8 <__fp_inf>
    1772:	ad cd       	rjmp	.-1190   	; 0x12ce <__fp_szero>
    1774:	5f 3f       	cpi	r21, 0xFF	; 255
    1776:	ec f3       	brlt	.-6      	; 0x1772 <__divsf3_pse+0x6a>
    1778:	98 3e       	cpi	r25, 0xE8	; 232
    177a:	dc f3       	brlt	.-10     	; 0x1772 <__divsf3_pse+0x6a>
    177c:	86 95       	lsr	r24
    177e:	77 95       	ror	r23
    1780:	67 95       	ror	r22
    1782:	b7 95       	ror	r27
    1784:	f7 95       	ror	r31
    1786:	9f 5f       	subi	r25, 0xFF	; 255
    1788:	c9 f7       	brne	.-14     	; 0x177c <__divsf3_pse+0x74>
    178a:	88 0f       	add	r24, r24
    178c:	91 1d       	adc	r25, r1
    178e:	96 95       	lsr	r25
    1790:	87 95       	ror	r24
    1792:	97 f9       	bld	r25, 7
    1794:	08 95       	ret
    1796:	e1 e0       	ldi	r30, 0x01	; 1
    1798:	66 0f       	add	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	88 1f       	adc	r24, r24
    179e:	bb 1f       	adc	r27, r27
    17a0:	62 17       	cp	r22, r18
    17a2:	73 07       	cpc	r23, r19
    17a4:	84 07       	cpc	r24, r20
    17a6:	ba 07       	cpc	r27, r26
    17a8:	20 f0       	brcs	.+8      	; 0x17b2 <__divsf3_pse+0xaa>
    17aa:	62 1b       	sub	r22, r18
    17ac:	73 0b       	sbc	r23, r19
    17ae:	84 0b       	sbc	r24, r20
    17b0:	ba 0b       	sbc	r27, r26
    17b2:	ee 1f       	adc	r30, r30
    17b4:	88 f7       	brcc	.-30     	; 0x1798 <__divsf3_pse+0x90>
    17b6:	e0 95       	com	r30
    17b8:	08 95       	ret

000017ba <malloc>:
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	82 30       	cpi	r24, 0x02	; 2
    17c0:	91 05       	cpc	r25, r1
    17c2:	10 f4       	brcc	.+4      	; 0x17c8 <malloc+0xe>
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	e0 91 cd 03 	lds	r30, 0x03CD
    17cc:	f0 91 ce 03 	lds	r31, 0x03CE
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	30 97       	sbiw	r30, 0x00	; 0
    17da:	39 f1       	breq	.+78     	; 0x182a <malloc+0x70>
    17dc:	40 81       	ld	r20, Z
    17de:	51 81       	ldd	r21, Z+1	; 0x01
    17e0:	48 17       	cp	r20, r24
    17e2:	59 07       	cpc	r21, r25
    17e4:	b8 f0       	brcs	.+46     	; 0x1814 <malloc+0x5a>
    17e6:	48 17       	cp	r20, r24
    17e8:	59 07       	cpc	r21, r25
    17ea:	71 f4       	brne	.+28     	; 0x1808 <malloc+0x4e>
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	10 97       	sbiw	r26, 0x00	; 0
    17f2:	29 f0       	breq	.+10     	; 0x17fe <malloc+0x44>
    17f4:	13 96       	adiw	r26, 0x03	; 3
    17f6:	9c 93       	st	X, r25
    17f8:	8e 93       	st	-X, r24
    17fa:	12 97       	sbiw	r26, 0x02	; 2
    17fc:	2c c0       	rjmp	.+88     	; 0x1856 <malloc+0x9c>
    17fe:	90 93 ce 03 	sts	0x03CE, r25
    1802:	80 93 cd 03 	sts	0x03CD, r24
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <malloc+0x9c>
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	31 f0       	breq	.+12     	; 0x181a <malloc+0x60>
    180e:	42 17       	cp	r20, r18
    1810:	53 07       	cpc	r21, r19
    1812:	18 f0       	brcs	.+6      	; 0x181a <malloc+0x60>
    1814:	a9 01       	movw	r20, r18
    1816:	db 01       	movw	r26, r22
    1818:	01 c0       	rjmp	.+2      	; 0x181c <malloc+0x62>
    181a:	ef 01       	movw	r28, r30
    181c:	9a 01       	movw	r18, r20
    181e:	bd 01       	movw	r22, r26
    1820:	df 01       	movw	r26, r30
    1822:	02 80       	ldd	r0, Z+2	; 0x02
    1824:	f3 81       	ldd	r31, Z+3	; 0x03
    1826:	e0 2d       	mov	r30, r0
    1828:	d7 cf       	rjmp	.-82     	; 0x17d8 <malloc+0x1e>
    182a:	21 15       	cp	r18, r1
    182c:	31 05       	cpc	r19, r1
    182e:	f9 f0       	breq	.+62     	; 0x186e <malloc+0xb4>
    1830:	28 1b       	sub	r18, r24
    1832:	39 0b       	sbc	r19, r25
    1834:	24 30       	cpi	r18, 0x04	; 4
    1836:	31 05       	cpc	r19, r1
    1838:	80 f4       	brcc	.+32     	; 0x185a <malloc+0xa0>
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	9b 81       	ldd	r25, Y+3	; 0x03
    183e:	61 15       	cp	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	21 f0       	breq	.+8      	; 0x184c <malloc+0x92>
    1844:	fb 01       	movw	r30, r22
    1846:	93 83       	std	Z+3, r25	; 0x03
    1848:	82 83       	std	Z+2, r24	; 0x02
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <malloc+0x9a>
    184c:	90 93 ce 03 	sts	0x03CE, r25
    1850:	80 93 cd 03 	sts	0x03CD, r24
    1854:	fe 01       	movw	r30, r28
    1856:	32 96       	adiw	r30, 0x02	; 2
    1858:	44 c0       	rjmp	.+136    	; 0x18e2 <malloc+0x128>
    185a:	fe 01       	movw	r30, r28
    185c:	e2 0f       	add	r30, r18
    185e:	f3 1f       	adc	r31, r19
    1860:	81 93       	st	Z+, r24
    1862:	91 93       	st	Z+, r25
    1864:	22 50       	subi	r18, 0x02	; 2
    1866:	31 09       	sbc	r19, r1
    1868:	39 83       	std	Y+1, r19	; 0x01
    186a:	28 83       	st	Y, r18
    186c:	3a c0       	rjmp	.+116    	; 0x18e2 <malloc+0x128>
    186e:	20 91 cb 03 	lds	r18, 0x03CB
    1872:	30 91 cc 03 	lds	r19, 0x03CC
    1876:	23 2b       	or	r18, r19
    1878:	41 f4       	brne	.+16     	; 0x188a <malloc+0xd0>
    187a:	20 91 06 01 	lds	r18, 0x0106
    187e:	30 91 07 01 	lds	r19, 0x0107
    1882:	30 93 cc 03 	sts	0x03CC, r19
    1886:	20 93 cb 03 	sts	0x03CB, r18
    188a:	20 91 04 01 	lds	r18, 0x0104
    188e:	30 91 05 01 	lds	r19, 0x0105
    1892:	21 15       	cp	r18, r1
    1894:	31 05       	cpc	r19, r1
    1896:	41 f4       	brne	.+16     	; 0x18a8 <malloc+0xee>
    1898:	2d b7       	in	r18, 0x3d	; 61
    189a:	3e b7       	in	r19, 0x3e	; 62
    189c:	40 91 08 01 	lds	r20, 0x0108
    18a0:	50 91 09 01 	lds	r21, 0x0109
    18a4:	24 1b       	sub	r18, r20
    18a6:	35 0b       	sbc	r19, r21
    18a8:	e0 91 cb 03 	lds	r30, 0x03CB
    18ac:	f0 91 cc 03 	lds	r31, 0x03CC
    18b0:	e2 17       	cp	r30, r18
    18b2:	f3 07       	cpc	r31, r19
    18b4:	a0 f4       	brcc	.+40     	; 0x18de <malloc+0x124>
    18b6:	2e 1b       	sub	r18, r30
    18b8:	3f 0b       	sbc	r19, r31
    18ba:	28 17       	cp	r18, r24
    18bc:	39 07       	cpc	r19, r25
    18be:	78 f0       	brcs	.+30     	; 0x18de <malloc+0x124>
    18c0:	ac 01       	movw	r20, r24
    18c2:	4e 5f       	subi	r20, 0xFE	; 254
    18c4:	5f 4f       	sbci	r21, 0xFF	; 255
    18c6:	24 17       	cp	r18, r20
    18c8:	35 07       	cpc	r19, r21
    18ca:	48 f0       	brcs	.+18     	; 0x18de <malloc+0x124>
    18cc:	4e 0f       	add	r20, r30
    18ce:	5f 1f       	adc	r21, r31
    18d0:	50 93 cc 03 	sts	0x03CC, r21
    18d4:	40 93 cb 03 	sts	0x03CB, r20
    18d8:	81 93       	st	Z+, r24
    18da:	91 93       	st	Z+, r25
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <malloc+0x128>
    18de:	e0 e0       	ldi	r30, 0x00	; 0
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	cf 01       	movw	r24, r30
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <free>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <free+0xa>
    18f2:	87 c0       	rjmp	.+270    	; 0x1a02 <free+0x118>
    18f4:	fc 01       	movw	r30, r24
    18f6:	32 97       	sbiw	r30, 0x02	; 2
    18f8:	13 82       	std	Z+3, r1	; 0x03
    18fa:	12 82       	std	Z+2, r1	; 0x02
    18fc:	c0 91 cd 03 	lds	r28, 0x03CD
    1900:	d0 91 ce 03 	lds	r29, 0x03CE
    1904:	20 97       	sbiw	r28, 0x00	; 0
    1906:	81 f4       	brne	.+32     	; 0x1928 <free+0x3e>
    1908:	20 81       	ld	r18, Z
    190a:	31 81       	ldd	r19, Z+1	; 0x01
    190c:	28 0f       	add	r18, r24
    190e:	39 1f       	adc	r19, r25
    1910:	80 91 cb 03 	lds	r24, 0x03CB
    1914:	90 91 cc 03 	lds	r25, 0x03CC
    1918:	82 17       	cp	r24, r18
    191a:	93 07       	cpc	r25, r19
    191c:	79 f5       	brne	.+94     	; 0x197c <free+0x92>
    191e:	f0 93 cc 03 	sts	0x03CC, r31
    1922:	e0 93 cb 03 	sts	0x03CB, r30
    1926:	6d c0       	rjmp	.+218    	; 0x1a02 <free+0x118>
    1928:	de 01       	movw	r26, r28
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	ae 17       	cp	r26, r30
    1930:	bf 07       	cpc	r27, r31
    1932:	50 f4       	brcc	.+20     	; 0x1948 <free+0x5e>
    1934:	12 96       	adiw	r26, 0x02	; 2
    1936:	4d 91       	ld	r20, X+
    1938:	5c 91       	ld	r21, X
    193a:	13 97       	sbiw	r26, 0x03	; 3
    193c:	9d 01       	movw	r18, r26
    193e:	41 15       	cp	r20, r1
    1940:	51 05       	cpc	r21, r1
    1942:	09 f1       	breq	.+66     	; 0x1986 <free+0x9c>
    1944:	da 01       	movw	r26, r20
    1946:	f3 cf       	rjmp	.-26     	; 0x192e <free+0x44>
    1948:	b3 83       	std	Z+3, r27	; 0x03
    194a:	a2 83       	std	Z+2, r26	; 0x02
    194c:	40 81       	ld	r20, Z
    194e:	51 81       	ldd	r21, Z+1	; 0x01
    1950:	84 0f       	add	r24, r20
    1952:	95 1f       	adc	r25, r21
    1954:	8a 17       	cp	r24, r26
    1956:	9b 07       	cpc	r25, r27
    1958:	71 f4       	brne	.+28     	; 0x1976 <free+0x8c>
    195a:	8d 91       	ld	r24, X+
    195c:	9c 91       	ld	r25, X
    195e:	11 97       	sbiw	r26, 0x01	; 1
    1960:	84 0f       	add	r24, r20
    1962:	95 1f       	adc	r25, r21
    1964:	02 96       	adiw	r24, 0x02	; 2
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24
    196a:	12 96       	adiw	r26, 0x02	; 2
    196c:	8d 91       	ld	r24, X+
    196e:	9c 91       	ld	r25, X
    1970:	13 97       	sbiw	r26, 0x03	; 3
    1972:	93 83       	std	Z+3, r25	; 0x03
    1974:	82 83       	std	Z+2, r24	; 0x02
    1976:	21 15       	cp	r18, r1
    1978:	31 05       	cpc	r19, r1
    197a:	29 f4       	brne	.+10     	; 0x1986 <free+0x9c>
    197c:	f0 93 ce 03 	sts	0x03CE, r31
    1980:	e0 93 cd 03 	sts	0x03CD, r30
    1984:	3e c0       	rjmp	.+124    	; 0x1a02 <free+0x118>
    1986:	d9 01       	movw	r26, r18
    1988:	13 96       	adiw	r26, 0x03	; 3
    198a:	fc 93       	st	X, r31
    198c:	ee 93       	st	-X, r30
    198e:	12 97       	sbiw	r26, 0x02	; 2
    1990:	4d 91       	ld	r20, X+
    1992:	5d 91       	ld	r21, X+
    1994:	a4 0f       	add	r26, r20
    1996:	b5 1f       	adc	r27, r21
    1998:	ea 17       	cp	r30, r26
    199a:	fb 07       	cpc	r31, r27
    199c:	79 f4       	brne	.+30     	; 0x19bc <free+0xd2>
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	84 0f       	add	r24, r20
    19a4:	95 1f       	adc	r25, r21
    19a6:	02 96       	adiw	r24, 0x02	; 2
    19a8:	d9 01       	movw	r26, r18
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	9c 93       	st	X, r25
    19ae:	8e 93       	st	-X, r24
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	13 96       	adiw	r26, 0x03	; 3
    19b6:	9c 93       	st	X, r25
    19b8:	8e 93       	st	-X, r24
    19ba:	12 97       	sbiw	r26, 0x02	; 2
    19bc:	e0 e0       	ldi	r30, 0x00	; 0
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	19 f0       	breq	.+6      	; 0x19ce <free+0xe4>
    19c8:	fe 01       	movw	r30, r28
    19ca:	ec 01       	movw	r28, r24
    19cc:	f9 cf       	rjmp	.-14     	; 0x19c0 <free+0xd6>
    19ce:	ce 01       	movw	r24, r28
    19d0:	02 96       	adiw	r24, 0x02	; 2
    19d2:	28 81       	ld	r18, Y
    19d4:	39 81       	ldd	r19, Y+1	; 0x01
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	20 91 cb 03 	lds	r18, 0x03CB
    19de:	30 91 cc 03 	lds	r19, 0x03CC
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	69 f4       	brne	.+26     	; 0x1a02 <free+0x118>
    19e8:	30 97       	sbiw	r30, 0x00	; 0
    19ea:	29 f4       	brne	.+10     	; 0x19f6 <free+0x10c>
    19ec:	10 92 ce 03 	sts	0x03CE, r1
    19f0:	10 92 cd 03 	sts	0x03CD, r1
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <free+0x110>
    19f6:	13 82       	std	Z+3, r1	; 0x03
    19f8:	12 82       	std	Z+2, r1	; 0x02
    19fa:	d0 93 cc 03 	sts	0x03CC, r29
    19fe:	c0 93 cb 03 	sts	0x03CB, r28
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <sprintf>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	2e 97       	sbiw	r28, 0x0e	; 14
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	0d 89       	ldd	r16, Y+21	; 0x15
    1a22:	1e 89       	ldd	r17, Y+22	; 0x16
    1a24:	86 e0       	ldi	r24, 0x06	; 6
    1a26:	8c 83       	std	Y+4, r24	; 0x04
    1a28:	1a 83       	std	Y+2, r17	; 0x02
    1a2a:	09 83       	std	Y+1, r16	; 0x01
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	9f e7       	ldi	r25, 0x7F	; 127
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	ae 01       	movw	r20, r28
    1a36:	47 5e       	subi	r20, 0xE7	; 231
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a3c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <vfprintf>
    1a46:	ef 81       	ldd	r30, Y+7	; 0x07
    1a48:	f8 85       	ldd	r31, Y+8	; 0x08
    1a4a:	e0 0f       	add	r30, r16
    1a4c:	f1 1f       	adc	r31, r17
    1a4e:	10 82       	st	Z, r1
    1a50:	2e 96       	adiw	r28, 0x0e	; 14
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	08 95       	ret

00001a66 <vfprintf>:
    1a66:	2f 92       	push	r2
    1a68:	3f 92       	push	r3
    1a6a:	4f 92       	push	r4
    1a6c:	5f 92       	push	r5
    1a6e:	6f 92       	push	r6
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	2c 97       	sbiw	r28, 0x0c	; 12
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	7c 01       	movw	r14, r24
    1a9c:	6b 01       	movw	r12, r22
    1a9e:	8a 01       	movw	r16, r20
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	17 82       	std	Z+7, r1	; 0x07
    1aa4:	16 82       	std	Z+6, r1	; 0x06
    1aa6:	83 81       	ldd	r24, Z+3	; 0x03
    1aa8:	81 ff       	sbrs	r24, 1
    1aaa:	bd c1       	rjmp	.+890    	; 0x1e26 <vfprintf+0x3c0>
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	4c 01       	movw	r8, r24
    1ab2:	f7 01       	movw	r30, r14
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	f6 01       	movw	r30, r12
    1ab8:	93 fd       	sbrc	r25, 3
    1aba:	85 91       	lpm	r24, Z+
    1abc:	93 ff       	sbrs	r25, 3
    1abe:	81 91       	ld	r24, Z+
    1ac0:	6f 01       	movw	r12, r30
    1ac2:	88 23       	and	r24, r24
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <vfprintf+0x62>
    1ac6:	ab c1       	rjmp	.+854    	; 0x1e1e <vfprintf+0x3b8>
    1ac8:	85 32       	cpi	r24, 0x25	; 37
    1aca:	39 f4       	brne	.+14     	; 0x1ada <vfprintf+0x74>
    1acc:	93 fd       	sbrc	r25, 3
    1ace:	85 91       	lpm	r24, Z+
    1ad0:	93 ff       	sbrs	r25, 3
    1ad2:	81 91       	ld	r24, Z+
    1ad4:	6f 01       	movw	r12, r30
    1ad6:	85 32       	cpi	r24, 0x25	; 37
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <vfprintf+0x7e>
    1ada:	b7 01       	movw	r22, r14
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1ae2:	e7 cf       	rjmp	.-50     	; 0x1ab2 <vfprintf+0x4c>
    1ae4:	51 2c       	mov	r5, r1
    1ae6:	31 2c       	mov	r3, r1
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	20 32       	cpi	r18, 0x20	; 32
    1aec:	a0 f4       	brcc	.+40     	; 0x1b16 <vfprintf+0xb0>
    1aee:	8b 32       	cpi	r24, 0x2B	; 43
    1af0:	69 f0       	breq	.+26     	; 0x1b0c <vfprintf+0xa6>
    1af2:	30 f4       	brcc	.+12     	; 0x1b00 <vfprintf+0x9a>
    1af4:	80 32       	cpi	r24, 0x20	; 32
    1af6:	59 f0       	breq	.+22     	; 0x1b0e <vfprintf+0xa8>
    1af8:	83 32       	cpi	r24, 0x23	; 35
    1afa:	69 f4       	brne	.+26     	; 0x1b16 <vfprintf+0xb0>
    1afc:	20 61       	ori	r18, 0x10	; 16
    1afe:	2c c0       	rjmp	.+88     	; 0x1b58 <vfprintf+0xf2>
    1b00:	8d 32       	cpi	r24, 0x2D	; 45
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <vfprintf+0xac>
    1b04:	80 33       	cpi	r24, 0x30	; 48
    1b06:	39 f4       	brne	.+14     	; 0x1b16 <vfprintf+0xb0>
    1b08:	21 60       	ori	r18, 0x01	; 1
    1b0a:	26 c0       	rjmp	.+76     	; 0x1b58 <vfprintf+0xf2>
    1b0c:	22 60       	ori	r18, 0x02	; 2
    1b0e:	24 60       	ori	r18, 0x04	; 4
    1b10:	23 c0       	rjmp	.+70     	; 0x1b58 <vfprintf+0xf2>
    1b12:	28 60       	ori	r18, 0x08	; 8
    1b14:	21 c0       	rjmp	.+66     	; 0x1b58 <vfprintf+0xf2>
    1b16:	27 fd       	sbrc	r18, 7
    1b18:	27 c0       	rjmp	.+78     	; 0x1b68 <vfprintf+0x102>
    1b1a:	30 ed       	ldi	r19, 0xD0	; 208
    1b1c:	38 0f       	add	r19, r24
    1b1e:	3a 30       	cpi	r19, 0x0A	; 10
    1b20:	78 f4       	brcc	.+30     	; 0x1b40 <vfprintf+0xda>
    1b22:	26 ff       	sbrs	r18, 6
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <vfprintf+0xcc>
    1b26:	fa e0       	ldi	r31, 0x0A	; 10
    1b28:	5f 9e       	mul	r5, r31
    1b2a:	30 0d       	add	r19, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	53 2e       	mov	r5, r19
    1b30:	13 c0       	rjmp	.+38     	; 0x1b58 <vfprintf+0xf2>
    1b32:	8a e0       	ldi	r24, 0x0A	; 10
    1b34:	38 9e       	mul	r3, r24
    1b36:	30 0d       	add	r19, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	33 2e       	mov	r3, r19
    1b3c:	20 62       	ori	r18, 0x20	; 32
    1b3e:	0c c0       	rjmp	.+24     	; 0x1b58 <vfprintf+0xf2>
    1b40:	8e 32       	cpi	r24, 0x2E	; 46
    1b42:	21 f4       	brne	.+8      	; 0x1b4c <vfprintf+0xe6>
    1b44:	26 fd       	sbrc	r18, 6
    1b46:	6b c1       	rjmp	.+726    	; 0x1e1e <vfprintf+0x3b8>
    1b48:	20 64       	ori	r18, 0x40	; 64
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <vfprintf+0xf2>
    1b4c:	8c 36       	cpi	r24, 0x6C	; 108
    1b4e:	11 f4       	brne	.+4      	; 0x1b54 <vfprintf+0xee>
    1b50:	20 68       	ori	r18, 0x80	; 128
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0xf2>
    1b54:	88 36       	cpi	r24, 0x68	; 104
    1b56:	41 f4       	brne	.+16     	; 0x1b68 <vfprintf+0x102>
    1b58:	f6 01       	movw	r30, r12
    1b5a:	93 fd       	sbrc	r25, 3
    1b5c:	85 91       	lpm	r24, Z+
    1b5e:	93 ff       	sbrs	r25, 3
    1b60:	81 91       	ld	r24, Z+
    1b62:	6f 01       	movw	r12, r30
    1b64:	81 11       	cpse	r24, r1
    1b66:	c1 cf       	rjmp	.-126    	; 0x1aea <vfprintf+0x84>
    1b68:	98 2f       	mov	r25, r24
    1b6a:	9f 7d       	andi	r25, 0xDF	; 223
    1b6c:	95 54       	subi	r25, 0x45	; 69
    1b6e:	93 30       	cpi	r25, 0x03	; 3
    1b70:	28 f4       	brcc	.+10     	; 0x1b7c <vfprintf+0x116>
    1b72:	0c 5f       	subi	r16, 0xFC	; 252
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	ff e3       	ldi	r31, 0x3F	; 63
    1b78:	f9 83       	std	Y+1, r31	; 0x01
    1b7a:	0d c0       	rjmp	.+26     	; 0x1b96 <vfprintf+0x130>
    1b7c:	83 36       	cpi	r24, 0x63	; 99
    1b7e:	31 f0       	breq	.+12     	; 0x1b8c <vfprintf+0x126>
    1b80:	83 37       	cpi	r24, 0x73	; 115
    1b82:	71 f0       	breq	.+28     	; 0x1ba0 <vfprintf+0x13a>
    1b84:	83 35       	cpi	r24, 0x53	; 83
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <vfprintf+0x124>
    1b88:	5b c0       	rjmp	.+182    	; 0x1c40 <vfprintf+0x1da>
    1b8a:	22 c0       	rjmp	.+68     	; 0x1bd0 <vfprintf+0x16a>
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	80 81       	ld	r24, Z
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	0e 5f       	subi	r16, 0xFE	; 254
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	44 24       	eor	r4, r4
    1b98:	43 94       	inc	r4
    1b9a:	51 2c       	mov	r5, r1
    1b9c:	54 01       	movw	r10, r8
    1b9e:	15 c0       	rjmp	.+42     	; 0x1bca <vfprintf+0x164>
    1ba0:	38 01       	movw	r6, r16
    1ba2:	f2 e0       	ldi	r31, 0x02	; 2
    1ba4:	6f 0e       	add	r6, r31
    1ba6:	71 1c       	adc	r7, r1
    1ba8:	f8 01       	movw	r30, r16
    1baa:	a0 80       	ld	r10, Z
    1bac:	b1 80       	ldd	r11, Z+1	; 0x01
    1bae:	26 ff       	sbrs	r18, 6
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <vfprintf+0x152>
    1bb2:	65 2d       	mov	r22, r5
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <vfprintf+0x156>
    1bb8:	6f ef       	ldi	r22, 0xFF	; 255
    1bba:	7f ef       	ldi	r23, 0xFF	; 255
    1bbc:	c5 01       	movw	r24, r10
    1bbe:	2c 87       	std	Y+12, r18	; 0x0c
    1bc0:	0e 94 65 0f 	call	0x1eca	; 0x1eca <strnlen>
    1bc4:	2c 01       	movw	r4, r24
    1bc6:	83 01       	movw	r16, r6
    1bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bca:	2f 77       	andi	r18, 0x7F	; 127
    1bcc:	22 2e       	mov	r2, r18
    1bce:	17 c0       	rjmp	.+46     	; 0x1bfe <vfprintf+0x198>
    1bd0:	38 01       	movw	r6, r16
    1bd2:	f2 e0       	ldi	r31, 0x02	; 2
    1bd4:	6f 0e       	add	r6, r31
    1bd6:	71 1c       	adc	r7, r1
    1bd8:	f8 01       	movw	r30, r16
    1bda:	a0 80       	ld	r10, Z
    1bdc:	b1 80       	ldd	r11, Z+1	; 0x01
    1bde:	26 ff       	sbrs	r18, 6
    1be0:	03 c0       	rjmp	.+6      	; 0x1be8 <vfprintf+0x182>
    1be2:	65 2d       	mov	r22, r5
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <vfprintf+0x186>
    1be8:	6f ef       	ldi	r22, 0xFF	; 255
    1bea:	7f ef       	ldi	r23, 0xFF	; 255
    1bec:	c5 01       	movw	r24, r10
    1bee:	2c 87       	std	Y+12, r18	; 0x0c
    1bf0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <strnlen_P>
    1bf4:	2c 01       	movw	r4, r24
    1bf6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bf8:	20 68       	ori	r18, 0x80	; 128
    1bfa:	22 2e       	mov	r2, r18
    1bfc:	83 01       	movw	r16, r6
    1bfe:	23 fc       	sbrc	r2, 3
    1c00:	1b c0       	rjmp	.+54     	; 0x1c38 <vfprintf+0x1d2>
    1c02:	83 2d       	mov	r24, r3
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	48 16       	cp	r4, r24
    1c08:	59 06       	cpc	r5, r25
    1c0a:	b0 f4       	brcc	.+44     	; 0x1c38 <vfprintf+0x1d2>
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	80 e2       	ldi	r24, 0x20	; 32
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1c16:	3a 94       	dec	r3
    1c18:	f4 cf       	rjmp	.-24     	; 0x1c02 <vfprintf+0x19c>
    1c1a:	f5 01       	movw	r30, r10
    1c1c:	27 fc       	sbrc	r2, 7
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	27 fe       	sbrs	r2, 7
    1c22:	81 91       	ld	r24, Z+
    1c24:	5f 01       	movw	r10, r30
    1c26:	b7 01       	movw	r22, r14
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1c2e:	31 10       	cpse	r3, r1
    1c30:	3a 94       	dec	r3
    1c32:	f1 e0       	ldi	r31, 0x01	; 1
    1c34:	4f 1a       	sub	r4, r31
    1c36:	51 08       	sbc	r5, r1
    1c38:	41 14       	cp	r4, r1
    1c3a:	51 04       	cpc	r5, r1
    1c3c:	71 f7       	brne	.-36     	; 0x1c1a <vfprintf+0x1b4>
    1c3e:	e5 c0       	rjmp	.+458    	; 0x1e0a <vfprintf+0x3a4>
    1c40:	84 36       	cpi	r24, 0x64	; 100
    1c42:	11 f0       	breq	.+4      	; 0x1c48 <vfprintf+0x1e2>
    1c44:	89 36       	cpi	r24, 0x69	; 105
    1c46:	39 f5       	brne	.+78     	; 0x1c96 <vfprintf+0x230>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	27 ff       	sbrs	r18, 7
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <vfprintf+0x1f6>
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	0c 5f       	subi	r16, 0xFC	; 252
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <vfprintf+0x206>
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	88 27       	eor	r24, r24
    1c62:	77 fd       	sbrc	r23, 7
    1c64:	80 95       	com	r24
    1c66:	98 2f       	mov	r25, r24
    1c68:	0e 5f       	subi	r16, 0xFE	; 254
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	2f 76       	andi	r18, 0x6F	; 111
    1c6e:	b2 2e       	mov	r11, r18
    1c70:	97 ff       	sbrs	r25, 7
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <vfprintf+0x220>
    1c74:	90 95       	com	r25
    1c76:	80 95       	com	r24
    1c78:	70 95       	com	r23
    1c7a:	61 95       	neg	r22
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	20 68       	ori	r18, 0x80	; 128
    1c84:	b2 2e       	mov	r11, r18
    1c86:	2a e0       	ldi	r18, 0x0A	; 10
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	a4 01       	movw	r20, r8
    1c8c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__ultoa_invert>
    1c90:	a8 2e       	mov	r10, r24
    1c92:	a8 18       	sub	r10, r8
    1c94:	44 c0       	rjmp	.+136    	; 0x1d1e <vfprintf+0x2b8>
    1c96:	85 37       	cpi	r24, 0x75	; 117
    1c98:	29 f4       	brne	.+10     	; 0x1ca4 <vfprintf+0x23e>
    1c9a:	2f 7e       	andi	r18, 0xEF	; 239
    1c9c:	b2 2e       	mov	r11, r18
    1c9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	25 c0       	rjmp	.+74     	; 0x1cee <vfprintf+0x288>
    1ca4:	f2 2f       	mov	r31, r18
    1ca6:	f9 7f       	andi	r31, 0xF9	; 249
    1ca8:	bf 2e       	mov	r11, r31
    1caa:	8f 36       	cpi	r24, 0x6F	; 111
    1cac:	c1 f0       	breq	.+48     	; 0x1cde <vfprintf+0x278>
    1cae:	18 f4       	brcc	.+6      	; 0x1cb6 <vfprintf+0x250>
    1cb0:	88 35       	cpi	r24, 0x58	; 88
    1cb2:	79 f0       	breq	.+30     	; 0x1cd2 <vfprintf+0x26c>
    1cb4:	b4 c0       	rjmp	.+360    	; 0x1e1e <vfprintf+0x3b8>
    1cb6:	80 37       	cpi	r24, 0x70	; 112
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <vfprintf+0x25a>
    1cba:	88 37       	cpi	r24, 0x78	; 120
    1cbc:	21 f0       	breq	.+8      	; 0x1cc6 <vfprintf+0x260>
    1cbe:	af c0       	rjmp	.+350    	; 0x1e1e <vfprintf+0x3b8>
    1cc0:	2f 2f       	mov	r18, r31
    1cc2:	20 61       	ori	r18, 0x10	; 16
    1cc4:	b2 2e       	mov	r11, r18
    1cc6:	b4 fe       	sbrs	r11, 4
    1cc8:	0d c0       	rjmp	.+26     	; 0x1ce4 <vfprintf+0x27e>
    1cca:	8b 2d       	mov	r24, r11
    1ccc:	84 60       	ori	r24, 0x04	; 4
    1cce:	b8 2e       	mov	r11, r24
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <vfprintf+0x27e>
    1cd2:	24 ff       	sbrs	r18, 4
    1cd4:	0a c0       	rjmp	.+20     	; 0x1cea <vfprintf+0x284>
    1cd6:	9f 2f       	mov	r25, r31
    1cd8:	96 60       	ori	r25, 0x06	; 6
    1cda:	b9 2e       	mov	r11, r25
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <vfprintf+0x284>
    1cde:	28 e0       	ldi	r18, 0x08	; 8
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <vfprintf+0x288>
    1ce4:	20 e1       	ldi	r18, 0x10	; 16
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <vfprintf+0x288>
    1cea:	20 e1       	ldi	r18, 0x10	; 16
    1cec:	32 e0       	ldi	r19, 0x02	; 2
    1cee:	f8 01       	movw	r30, r16
    1cf0:	b7 fe       	sbrs	r11, 7
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <vfprintf+0x29c>
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	0c 5f       	subi	r16, 0xFC	; 252
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	06 c0       	rjmp	.+12     	; 0x1d0e <vfprintf+0x2a8>
    1d02:	60 81       	ld	r22, Z
    1d04:	71 81       	ldd	r23, Z+1	; 0x01
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 5f       	subi	r16, 0xFE	; 254
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	a4 01       	movw	r20, r8
    1d10:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__ultoa_invert>
    1d14:	a8 2e       	mov	r10, r24
    1d16:	a8 18       	sub	r10, r8
    1d18:	fb 2d       	mov	r31, r11
    1d1a:	ff 77       	andi	r31, 0x7F	; 127
    1d1c:	bf 2e       	mov	r11, r31
    1d1e:	b6 fe       	sbrs	r11, 6
    1d20:	0b c0       	rjmp	.+22     	; 0x1d38 <vfprintf+0x2d2>
    1d22:	2b 2d       	mov	r18, r11
    1d24:	2e 7f       	andi	r18, 0xFE	; 254
    1d26:	a5 14       	cp	r10, r5
    1d28:	50 f4       	brcc	.+20     	; 0x1d3e <vfprintf+0x2d8>
    1d2a:	b4 fe       	sbrs	r11, 4
    1d2c:	0a c0       	rjmp	.+20     	; 0x1d42 <vfprintf+0x2dc>
    1d2e:	b2 fc       	sbrc	r11, 2
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <vfprintf+0x2dc>
    1d32:	2b 2d       	mov	r18, r11
    1d34:	2e 7e       	andi	r18, 0xEE	; 238
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <vfprintf+0x2dc>
    1d38:	7a 2c       	mov	r7, r10
    1d3a:	2b 2d       	mov	r18, r11
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x2de>
    1d3e:	7a 2c       	mov	r7, r10
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <vfprintf+0x2de>
    1d42:	75 2c       	mov	r7, r5
    1d44:	24 ff       	sbrs	r18, 4
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <vfprintf+0x2fc>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ea 0d       	add	r30, r10
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 33       	cpi	r24, 0x30	; 48
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <vfprintf+0x2f2>
    1d54:	29 7e       	andi	r18, 0xE9	; 233
    1d56:	09 c0       	rjmp	.+18     	; 0x1d6a <vfprintf+0x304>
    1d58:	22 ff       	sbrs	r18, 2
    1d5a:	06 c0       	rjmp	.+12     	; 0x1d68 <vfprintf+0x302>
    1d5c:	73 94       	inc	r7
    1d5e:	73 94       	inc	r7
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <vfprintf+0x304>
    1d62:	82 2f       	mov	r24, r18
    1d64:	86 78       	andi	r24, 0x86	; 134
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <vfprintf+0x304>
    1d68:	73 94       	inc	r7
    1d6a:	23 fd       	sbrc	r18, 3
    1d6c:	13 c0       	rjmp	.+38     	; 0x1d94 <vfprintf+0x32e>
    1d6e:	20 ff       	sbrs	r18, 0
    1d70:	06 c0       	rjmp	.+12     	; 0x1d7e <vfprintf+0x318>
    1d72:	5a 2c       	mov	r5, r10
    1d74:	73 14       	cp	r7, r3
    1d76:	18 f4       	brcc	.+6      	; 0x1d7e <vfprintf+0x318>
    1d78:	53 0c       	add	r5, r3
    1d7a:	57 18       	sub	r5, r7
    1d7c:	73 2c       	mov	r7, r3
    1d7e:	73 14       	cp	r7, r3
    1d80:	68 f4       	brcc	.+26     	; 0x1d9c <vfprintf+0x336>
    1d82:	b7 01       	movw	r22, r14
    1d84:	80 e2       	ldi	r24, 0x20	; 32
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	2c 87       	std	Y+12, r18	; 0x0c
    1d8a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1d8e:	73 94       	inc	r7
    1d90:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d92:	f5 cf       	rjmp	.-22     	; 0x1d7e <vfprintf+0x318>
    1d94:	73 14       	cp	r7, r3
    1d96:	10 f4       	brcc	.+4      	; 0x1d9c <vfprintf+0x336>
    1d98:	37 18       	sub	r3, r7
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <vfprintf+0x338>
    1d9c:	31 2c       	mov	r3, r1
    1d9e:	24 ff       	sbrs	r18, 4
    1da0:	12 c0       	rjmp	.+36     	; 0x1dc6 <vfprintf+0x360>
    1da2:	b7 01       	movw	r22, r14
    1da4:	80 e3       	ldi	r24, 0x30	; 48
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	2c 87       	std	Y+12, r18	; 0x0c
    1daa:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1dae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1db0:	22 ff       	sbrs	r18, 2
    1db2:	17 c0       	rjmp	.+46     	; 0x1de2 <vfprintf+0x37c>
    1db4:	21 ff       	sbrs	r18, 1
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <vfprintf+0x358>
    1db8:	88 e5       	ldi	r24, 0x58	; 88
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <vfprintf+0x35c>
    1dbe:	88 e7       	ldi	r24, 0x78	; 120
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	0c c0       	rjmp	.+24     	; 0x1dde <vfprintf+0x378>
    1dc6:	82 2f       	mov	r24, r18
    1dc8:	86 78       	andi	r24, 0x86	; 134
    1dca:	59 f0       	breq	.+22     	; 0x1de2 <vfprintf+0x37c>
    1dcc:	21 fd       	sbrc	r18, 1
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <vfprintf+0x36e>
    1dd0:	80 e2       	ldi	r24, 0x20	; 32
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <vfprintf+0x370>
    1dd4:	8b e2       	ldi	r24, 0x2B	; 43
    1dd6:	27 fd       	sbrc	r18, 7
    1dd8:	8d e2       	ldi	r24, 0x2D	; 45
    1dda:	b7 01       	movw	r22, r14
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1de2:	a5 14       	cp	r10, r5
    1de4:	38 f4       	brcc	.+14     	; 0x1df4 <vfprintf+0x38e>
    1de6:	b7 01       	movw	r22, r14
    1de8:	80 e3       	ldi	r24, 0x30	; 48
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1df0:	5a 94       	dec	r5
    1df2:	f7 cf       	rjmp	.-18     	; 0x1de2 <vfprintf+0x37c>
    1df4:	aa 94       	dec	r10
    1df6:	f4 01       	movw	r30, r8
    1df8:	ea 0d       	add	r30, r10
    1dfa:	f1 1d       	adc	r31, r1
    1dfc:	80 81       	ld	r24, Z
    1dfe:	b7 01       	movw	r22, r14
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1e06:	a1 10       	cpse	r10, r1
    1e08:	f5 cf       	rjmp	.-22     	; 0x1df4 <vfprintf+0x38e>
    1e0a:	33 20       	and	r3, r3
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <vfprintf+0x3aa>
    1e0e:	51 ce       	rjmp	.-862    	; 0x1ab2 <vfprintf+0x4c>
    1e10:	b7 01       	movw	r22, r14
    1e12:	80 e2       	ldi	r24, 0x20	; 32
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fputc>
    1e1a:	3a 94       	dec	r3
    1e1c:	f6 cf       	rjmp	.-20     	; 0x1e0a <vfprintf+0x3a4>
    1e1e:	f7 01       	movw	r30, r14
    1e20:	86 81       	ldd	r24, Z+6	; 0x06
    1e22:	97 81       	ldd	r25, Z+7	; 0x07
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <vfprintf+0x3c4>
    1e26:	8f ef       	ldi	r24, 0xFF	; 255
    1e28:	9f ef       	ldi	r25, 0xFF	; 255
    1e2a:	2c 96       	adiw	r28, 0x0c	; 12
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	7f 90       	pop	r7
    1e50:	6f 90       	pop	r6
    1e52:	5f 90       	pop	r5
    1e54:	4f 90       	pop	r4
    1e56:	3f 90       	pop	r3
    1e58:	2f 90       	pop	r2
    1e5a:	08 95       	ret

00001e5c <__eerd_block_m1284p>:
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22

00001e60 <__eerd_blraw_m1284p>:
    1e60:	fc 01       	movw	r30, r24
    1e62:	f9 99       	sbic	0x1f, 1	; 31
    1e64:	fe cf       	rjmp	.-4      	; 0x1e62 <__eerd_blraw_m1284p+0x2>
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <__eerd_blraw_m1284p+0x14>
    1e68:	f2 bd       	out	0x22, r31	; 34
    1e6a:	e1 bd       	out	0x21, r30	; 33
    1e6c:	f8 9a       	sbi	0x1f, 0	; 31
    1e6e:	31 96       	adiw	r30, 0x01	; 1
    1e70:	00 b4       	in	r0, 0x20	; 32
    1e72:	0d 92       	st	X+, r0
    1e74:	41 50       	subi	r20, 0x01	; 1
    1e76:	50 40       	sbci	r21, 0x00	; 0
    1e78:	b8 f7       	brcc	.-18     	; 0x1e68 <__eerd_blraw_m1284p+0x8>
    1e7a:	08 95       	ret

00001e7c <__eerd_byte_m1284p>:
    1e7c:	f9 99       	sbic	0x1f, 1	; 31
    1e7e:	fe cf       	rjmp	.-4      	; 0x1e7c <__eerd_byte_m1284p>
    1e80:	92 bd       	out	0x22, r25	; 34
    1e82:	81 bd       	out	0x21, r24	; 33
    1e84:	f8 9a       	sbi	0x1f, 0	; 31
    1e86:	99 27       	eor	r25, r25
    1e88:	80 b5       	in	r24, 0x20	; 32
    1e8a:	08 95       	ret

00001e8c <__eerd_dword_m1284p>:
    1e8c:	a6 e1       	ldi	r26, 0x16	; 22
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	44 e0       	ldi	r20, 0x04	; 4
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__eerd_blraw_m1284p>

00001e98 <__eewr_byte_m1284p>:
    1e98:	26 2f       	mov	r18, r22

00001e9a <__eewr_r18_m1284p>:
    1e9a:	f9 99       	sbic	0x1f, 1	; 31
    1e9c:	fe cf       	rjmp	.-4      	; 0x1e9a <__eewr_r18_m1284p>
    1e9e:	1f ba       	out	0x1f, r1	; 31
    1ea0:	92 bd       	out	0x22, r25	; 34
    1ea2:	81 bd       	out	0x21, r24	; 33
    1ea4:	20 bd       	out	0x20, r18	; 32
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	fa 9a       	sbi	0x1f, 2	; 31
    1eac:	f9 9a       	sbi	0x1f, 1	; 31
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	08 95       	ret

00001eb4 <strnlen_P>:
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	05 90       	lpm	r0, Z+
    1eb8:	61 50       	subi	r22, 0x01	; 1
    1eba:	70 40       	sbci	r23, 0x00	; 0
    1ebc:	01 10       	cpse	r0, r1
    1ebe:	d8 f7       	brcc	.-10     	; 0x1eb6 <strnlen_P+0x2>
    1ec0:	80 95       	com	r24
    1ec2:	90 95       	com	r25
    1ec4:	8e 0f       	add	r24, r30
    1ec6:	9f 1f       	adc	r25, r31
    1ec8:	08 95       	ret

00001eca <strnlen>:
    1eca:	fc 01       	movw	r30, r24
    1ecc:	61 50       	subi	r22, 0x01	; 1
    1ece:	70 40       	sbci	r23, 0x00	; 0
    1ed0:	01 90       	ld	r0, Z+
    1ed2:	01 10       	cpse	r0, r1
    1ed4:	d8 f7       	brcc	.-10     	; 0x1ecc <strnlen+0x2>
    1ed6:	80 95       	com	r24
    1ed8:	90 95       	com	r25
    1eda:	8e 0f       	add	r24, r30
    1edc:	9f 1f       	adc	r25, r31
    1ede:	08 95       	ret

00001ee0 <fputc>:
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	18 2f       	mov	r17, r24
    1eea:	09 2f       	mov	r16, r25
    1eec:	eb 01       	movw	r28, r22
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	81 fd       	sbrc	r24, 1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <fputc+0x1a>
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	20 c0       	rjmp	.+64     	; 0x1f3a <fputc+0x5a>
    1efa:	82 ff       	sbrs	r24, 2
    1efc:	10 c0       	rjmp	.+32     	; 0x1f1e <fputc+0x3e>
    1efe:	4e 81       	ldd	r20, Y+6	; 0x06
    1f00:	5f 81       	ldd	r21, Y+7	; 0x07
    1f02:	2c 81       	ldd	r18, Y+4	; 0x04
    1f04:	3d 81       	ldd	r19, Y+5	; 0x05
    1f06:	42 17       	cp	r20, r18
    1f08:	53 07       	cpc	r21, r19
    1f0a:	7c f4       	brge	.+30     	; 0x1f2a <fputc+0x4a>
    1f0c:	e8 81       	ld	r30, Y
    1f0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f10:	9f 01       	movw	r18, r30
    1f12:	2f 5f       	subi	r18, 0xFF	; 255
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	39 83       	std	Y+1, r19	; 0x01
    1f18:	28 83       	st	Y, r18
    1f1a:	10 83       	st	Z, r17
    1f1c:	06 c0       	rjmp	.+12     	; 0x1f2a <fputc+0x4a>
    1f1e:	e8 85       	ldd	r30, Y+8	; 0x08
    1f20:	f9 85       	ldd	r31, Y+9	; 0x09
    1f22:	81 2f       	mov	r24, r17
    1f24:	09 95       	icall
    1f26:	89 2b       	or	r24, r25
    1f28:	29 f7       	brne	.-54     	; 0x1ef4 <fputc+0x14>
    1f2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f2e:	2f 5f       	subi	r18, 0xFF	; 255
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	3f 83       	std	Y+7, r19	; 0x07
    1f34:	2e 83       	std	Y+6, r18	; 0x06
    1f36:	81 2f       	mov	r24, r17
    1f38:	90 2f       	mov	r25, r16
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	08 95       	ret

00001f44 <__ultoa_invert>:
    1f44:	fa 01       	movw	r30, r20
    1f46:	aa 27       	eor	r26, r26
    1f48:	28 30       	cpi	r18, 0x08	; 8
    1f4a:	51 f1       	breq	.+84     	; 0x1fa0 <__ultoa_invert+0x5c>
    1f4c:	20 31       	cpi	r18, 0x10	; 16
    1f4e:	81 f1       	breq	.+96     	; 0x1fb0 <__ultoa_invert+0x6c>
    1f50:	e8 94       	clt
    1f52:	6f 93       	push	r22
    1f54:	6e 7f       	andi	r22, 0xFE	; 254
    1f56:	6e 5f       	subi	r22, 0xFE	; 254
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5e:	af 4f       	sbci	r26, 0xFF	; 255
    1f60:	b1 e0       	ldi	r27, 0x01	; 1
    1f62:	3e d0       	rcall	.+124    	; 0x1fe0 <__ultoa_invert+0x9c>
    1f64:	b4 e0       	ldi	r27, 0x04	; 4
    1f66:	3c d0       	rcall	.+120    	; 0x1fe0 <__ultoa_invert+0x9c>
    1f68:	67 0f       	add	r22, r23
    1f6a:	78 1f       	adc	r23, r24
    1f6c:	89 1f       	adc	r24, r25
    1f6e:	9a 1f       	adc	r25, r26
    1f70:	a1 1d       	adc	r26, r1
    1f72:	68 0f       	add	r22, r24
    1f74:	79 1f       	adc	r23, r25
    1f76:	8a 1f       	adc	r24, r26
    1f78:	91 1d       	adc	r25, r1
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	6a 0f       	add	r22, r26
    1f7e:	71 1d       	adc	r23, r1
    1f80:	81 1d       	adc	r24, r1
    1f82:	91 1d       	adc	r25, r1
    1f84:	a1 1d       	adc	r26, r1
    1f86:	20 d0       	rcall	.+64     	; 0x1fc8 <__ultoa_invert+0x84>
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <__ultoa_invert+0x48>
    1f8a:	68 94       	set
    1f8c:	3f 91       	pop	r19
    1f8e:	2a e0       	ldi	r18, 0x0A	; 10
    1f90:	26 9f       	mul	r18, r22
    1f92:	11 24       	eor	r1, r1
    1f94:	30 19       	sub	r19, r0
    1f96:	30 5d       	subi	r19, 0xD0	; 208
    1f98:	31 93       	st	Z+, r19
    1f9a:	de f6       	brtc	.-74     	; 0x1f52 <__ultoa_invert+0xe>
    1f9c:	cf 01       	movw	r24, r30
    1f9e:	08 95       	ret
    1fa0:	46 2f       	mov	r20, r22
    1fa2:	47 70       	andi	r20, 0x07	; 7
    1fa4:	40 5d       	subi	r20, 0xD0	; 208
    1fa6:	41 93       	st	Z+, r20
    1fa8:	b3 e0       	ldi	r27, 0x03	; 3
    1faa:	0f d0       	rcall	.+30     	; 0x1fca <__ultoa_invert+0x86>
    1fac:	c9 f7       	brne	.-14     	; 0x1fa0 <__ultoa_invert+0x5c>
    1fae:	f6 cf       	rjmp	.-20     	; 0x1f9c <__ultoa_invert+0x58>
    1fb0:	46 2f       	mov	r20, r22
    1fb2:	4f 70       	andi	r20, 0x0F	; 15
    1fb4:	40 5d       	subi	r20, 0xD0	; 208
    1fb6:	4a 33       	cpi	r20, 0x3A	; 58
    1fb8:	18 f0       	brcs	.+6      	; 0x1fc0 <__ultoa_invert+0x7c>
    1fba:	49 5d       	subi	r20, 0xD9	; 217
    1fbc:	31 fd       	sbrc	r19, 1
    1fbe:	40 52       	subi	r20, 0x20	; 32
    1fc0:	41 93       	st	Z+, r20
    1fc2:	02 d0       	rcall	.+4      	; 0x1fc8 <__ultoa_invert+0x84>
    1fc4:	a9 f7       	brne	.-22     	; 0x1fb0 <__ultoa_invert+0x6c>
    1fc6:	ea cf       	rjmp	.-44     	; 0x1f9c <__ultoa_invert+0x58>
    1fc8:	b4 e0       	ldi	r27, 0x04	; 4
    1fca:	a6 95       	lsr	r26
    1fcc:	97 95       	ror	r25
    1fce:	87 95       	ror	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	ba 95       	dec	r27
    1fd6:	c9 f7       	brne	.-14     	; 0x1fca <__ultoa_invert+0x86>
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	61 05       	cpc	r22, r1
    1fdc:	71 05       	cpc	r23, r1
    1fde:	08 95       	ret
    1fe0:	9b 01       	movw	r18, r22
    1fe2:	ac 01       	movw	r20, r24
    1fe4:	0a 2e       	mov	r0, r26
    1fe6:	06 94       	lsr	r0
    1fe8:	57 95       	ror	r21
    1fea:	47 95       	ror	r20
    1fec:	37 95       	ror	r19
    1fee:	27 95       	ror	r18
    1ff0:	ba 95       	dec	r27
    1ff2:	c9 f7       	brne	.-14     	; 0x1fe6 <__ultoa_invert+0xa2>
    1ff4:	62 0f       	add	r22, r18
    1ff6:	73 1f       	adc	r23, r19
    1ff8:	84 1f       	adc	r24, r20
    1ffa:	95 1f       	adc	r25, r21
    1ffc:	a0 1d       	adc	r26, r0
    1ffe:	08 95       	ret

00002000 <_exit>:
    2000:	f8 94       	cli

00002002 <__stop_program>:
    2002:	ff cf       	rjmp	.-2      	; 0x2002 <__stop_program>
