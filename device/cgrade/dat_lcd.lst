
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000076e  00000802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800106  00800106  00000808  2**0
                  ALLOC
  3 .stab         0000246c  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137e  00000000  00000000  00002c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ff2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_28>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 39       	cpi	r26, 0x95	; 149
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 29 03 	call	0x652	; 0x652 <main>
  c6:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
  ce:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	80 93 cc 00 	sts	0x00CC, r24
    
    // Enable The Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
  d8:	e9 ec       	ldi	r30, 0xC9	; 201
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 6d       	ori	r24, 0xD8	; 216
  e0:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
  e2:	e8 ec       	ldi	r30, 0xC8	; 200
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
    
    // Set the Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
  ec:	ea ec       	ldi	r30, 0xCA	; 202
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 60       	ori	r24, 0x0E	; 14
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <peekChar>:

char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
  f8:	e0 91 12 01 	lds	r30, 0x0112
  fc:	80 91 11 01 	lds	r24, 0x0111
 100:	e8 17       	cp	r30, r24
 102:	29 f0       	breq	.+10     	; 0x10e <peekChar+0x16>
    {
        ret = rxBuffer[rxReadPos];
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	eb 5e       	subi	r30, 0xEB	; 235
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	80 81       	ld	r24, Z
 10c:	08 95       	ret
    //stdout= &my_stream;
}

char peekChar(void)
{
    char ret = '\0';
 10e:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
 110:	08 95       	ret

00000112 <getChar>:

char getChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
 112:	90 91 12 01 	lds	r25, 0x0112
 116:	80 91 11 01 	lds	r24, 0x0111
 11a:	98 17       	cp	r25, r24
 11c:	71 f0       	breq	.+28     	; 0x13a <getChar+0x28>
    {
        ret = rxBuffer[rxReadPos];
 11e:	e9 2f       	mov	r30, r25
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	eb 5e       	subi	r30, 0xEB	; 235
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	80 81       	ld	r24, Z
         
        rxReadPos++;
 128:	9f 5f       	subi	r25, 0xFF	; 255
         
        if(rxReadPos >= RX_BUFFER_SIZE)
 12a:	97 fd       	sbrc	r25, 7
 12c:	03 c0       	rjmp	.+6      	; 0x134 <getChar+0x22>
     
    if(rxReadPos != rxWritePos)
    {
        ret = rxBuffer[rxReadPos];
         
        rxReadPos++;
 12e:	90 93 12 01 	sts	0x0112, r25
 132:	08 95       	ret
         
        if(rxReadPos >= RX_BUFFER_SIZE)
        {
            rxReadPos = 0;
 134:	10 92 12 01 	sts	0x0112, r1
 138:	08 95       	ret
    return ret;
}

char getChar(void)
{
    char ret = '\0';
 13a:	80 e0       	ldi	r24, 0x00	; 0
            rxReadPos = 0;
        }
    }
    
    return ret;
}
 13c:	08 95       	ret

0000013e <serialStart>:

int serialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
 13e:	80 91 0e 01 	lds	r24, 0x010E
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	89 13       	cpse	r24, r25
 148:	0c c0       	rjmp	.+24     	; 0x162 <serialStart+0x24>
 14a:	20 91 0f 01 	lds	r18, 0x010F
 14e:	28 13       	cpse	r18, r24
 150:	08 c0       	rjmp	.+16     	; 0x162 <serialStart+0x24>
 152:	30 91 10 01 	lds	r19, 0x0110
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	32 17       	cp	r19, r18
 15c:	21 f0       	breq	.+8      	; 0x166 <serialStart+0x28>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
        return 1;
    else
        return 0;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
}
 166:	08 95       	ret

00000168 <__vector_28>:
union float2bytes { 
    float f; 
    char b[sizeof(float)];
};

ISR(USART1_RX_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	0b b6       	in	r0, 0x3b	; 59
 174:	0f 92       	push	r0
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
    

    //shift serial history back one
    serial_history[2] = serial_history[1];
 18e:	80 91 0f 01 	lds	r24, 0x010F
 192:	80 93 10 01 	sts	0x0110, r24
    serial_history[1] = serial_history[0];
 196:	80 91 0e 01 	lds	r24, 0x010E
 19a:	80 93 0f 01 	sts	0x010F, r24
    //Read value out of the UART buffer
    serial_history[0] = UDR1;
 19e:	80 91 ce 00 	lds	r24, 0x00CE
 1a2:	80 93 0e 01 	sts	0x010E, r24

    if (update_progress==1)
 1a6:	80 91 0c 01 	lds	r24, 0x010C
 1aa:	90 91 0d 01 	lds	r25, 0x010D
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	61 f4       	brne	.+24     	; 0x1ca <__vector_28+0x62>
    {
        rxBuffer[rxWritePos] = serial_history[0];
 1b2:	80 91 11 01 	lds	r24, 0x0111
 1b6:	90 91 0e 01 	lds	r25, 0x010E
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	eb 5e       	subi	r30, 0xEB	; 235
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	90 83       	st	Z, r25
        rxWritePos++;
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 11 01 	sts	0x0111, r24
    }   

    if(serialStart()){
 1ca:	0e 94 9f 00 	call	0x13e	; 0x13e <serialStart>
 1ce:	89 2b       	or	r24, r25
 1d0:	31 f0       	breq	.+12     	; 0x1de <__vector_28+0x76>
        update_progress = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 0d 01 	sts	0x010D, r25
 1da:	80 93 0c 01 	sts	0x010C, r24
        //lcd_cursor();
        //eeprom_index = 0;
        //string_write("1");
    } 

    if(rxWritePos >= RX_BUFFER_SIZE)
 1de:	80 91 11 01 	lds	r24, 0x0111
 1e2:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
 1e4:	10 92 11 01 	sts	0x0111, r1
    }

}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0b be       	out	0x3b, r0	; 59
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <serialEnd>:
        return 0;
}

int serialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
 20e:	80 91 0e 01 	lds	r24, 0x010E
 212:	90 91 00 01 	lds	r25, 0x0100
 216:	89 13       	cpse	r24, r25
 218:	0c c0       	rjmp	.+24     	; 0x232 <serialEnd+0x24>
 21a:	20 91 0f 01 	lds	r18, 0x010F
 21e:	28 13       	cpse	r18, r24
 220:	08 c0       	rjmp	.+16     	; 0x232 <serialEnd+0x24>
 222:	30 91 10 01 	lds	r19, 0x0110
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	32 17       	cp	r19, r18
 22c:	21 f0       	breq	.+8      	; 0x236 <serialEnd+0x28>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret
        return 1;
    else
        return 0;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	08 95       	ret

00000238 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
 238:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	81 ee       	ldi	r24, 0xE1	; 225
 23c:	94 e0       	ldi	r25, 0x04	; 4
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <datarw+0x6>
 242:	00 c0       	rjmp	.+0      	; 0x244 <datarw+0xc>
 244:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
 246:	12 98       	cbi	0x02, 2	; 2
 248:	08 95       	ret

0000024a <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
 24a:	10 92 14 01 	sts	0x0114, r1
 24e:	10 92 13 01 	sts	0x0113, r1
    line_num = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 04 01 	sts	0x0104, r25
 25a:	80 93 03 01 	sts	0x0103, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
 25e:	81 b1       	in	r24, 0x01	; 1
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	81 b9       	out	0x01, r24	; 1
 264:	87 e8       	ldi	r24, 0x87	; 135
 266:	93 e1       	ldi	r25, 0x13	; 19
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x1e>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x24>
 26e:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
 270:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
 272:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
 274:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
 276:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 278:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 27a:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
 27c:	13 9a       	sbi	0x02, 3	; 2
    datarw();
 27e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 282:	81 ee       	ldi	r24, 0xE1	; 225
 284:	94 e0       	ldi	r25, 0x04	; 4
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x3c>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_init+0x42>
 28c:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
 28e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 292:	89 ef       	ldi	r24, 0xF9	; 249
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x4c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_init+0x52>
 29c:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
 29e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 2a2:	89 ef       	ldi	r24, 0xF9	; 249
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_init+0x5c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_init+0x62>
 2ac:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
 2ae:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 2b0:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 2b2:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 2b4:	13 98       	cbi	0x02, 3	; 2
    datarw();
 2b6:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 2ba:	89 ef       	ldi	r24, 0xF9	; 249
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0x74>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_init+0x7a>
 2c4:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
 2c6:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 2c8:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 2ca:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 2cc:	13 98       	cbi	0x02, 3	; 2
    datarw();
 2ce:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 2d2:	89 ef       	ldi	r24, 0xF9	; 249
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init+0x8c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_init+0x92>
 2dc:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
 2de:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 2e0:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 2e2:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 2e4:	13 98       	cbi	0x02, 3	; 2
    datarw();
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 2ea:	89 ef       	ldi	r24, 0xF9	; 249
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0xa4>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_init+0xaa>
 2f4:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
 2f6:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 2f8:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 2fa:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 2fc:	13 98       	cbi	0x02, 3	; 2
    datarw();
 2fe:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 302:	89 ef       	ldi	r24, 0xF9	; 249
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0xbc>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0xc2>
 30c:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
 30e:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
 310:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
 312:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 314:	13 98       	cbi	0x02, 3	; 2
    datarw();
 316:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 31a:	89 ef       	ldi	r24, 0xF9	; 249
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0xd4>
 322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0xda>
 324:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
 326:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 328:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 32a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 32c:	13 98       	cbi	0x02, 3	; 2
    datarw();
 32e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 332:	89 ef       	ldi	r24, 0xF9	; 249
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init+0xec>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0xf2>
 33c:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
 33e:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 340:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 342:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
 344:	13 9a       	sbi	0x02, 3	; 2
    datarw();
 346:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 34a:	89 ef       	ldi	r24, 0xF9	; 249
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x104>
 352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_init+0x10a>
 354:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
 356:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 358:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 35a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 35c:	13 98       	cbi	0x02, 3	; 2
    datarw();
 35e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 362:	89 ef       	ldi	r24, 0xF9	; 249
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <lcd_init+0x11c>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <lcd_init+0x122>
 36c:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
 36e:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
 370:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 372:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
 374:	13 98       	cbi	0x02, 3	; 2
    datarw();
 376:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 37a:	89 ef       	ldi	r24, 0xF9	; 249
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x134>
 382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_init+0x13a>
 384:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
 386:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
 388:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
 38a:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
 38c:	13 98       	cbi	0x02, 3	; 2
    datarw();
 38e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 392:	89 ef       	ldi	r24, 0xF9	; 249
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init+0x14c>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <lcd_init+0x152>
 39c:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
 39e:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
 3a0:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
 3a2:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
 3a4:	13 9a       	sbi	0x02, 3	; 2
    datarw();
 3a6:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 3aa:	89 ef       	ldi	r24, 0xF9	; 249
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x164>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_init+0x16a>
 3b4:	00 00       	nop
    _delay_ms(1);

	return 0;
}
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	08 95       	ret

000003bc <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	11 f4       	brne	.+4      	; 0x3c4 <letterwrite+0x8>
 3c0:	16 9a       	sbi	0x02, 6	; 2
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
 3c4:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
 3c6:	61 30       	cpi	r22, 0x01	; 1
 3c8:	71 05       	cpc	r23, r1
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <letterwrite+0x14>
 3cc:	15 9a       	sbi	0x02, 5	; 2
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
 3d0:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	51 05       	cpc	r21, r1
 3d6:	11 f4       	brne	.+4      	; 0x3dc <letterwrite+0x20>
 3d8:	14 9a       	sbi	0x02, 4	; 2
 3da:	01 c0       	rjmp	.+2      	; 0x3de <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
 3dc:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
 3de:	21 30       	cpi	r18, 0x01	; 1
 3e0:	31 05       	cpc	r19, r1
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <letterwrite+0x2c>
 3e4:	13 9a       	sbi	0x02, 3	; 2
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
 3e8:	13 98       	cbi	0x02, 3	; 2
   	datarw();
 3ea:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
 3ee:	89 ef       	ldi	r24, 0xF9	; 249
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <letterwrite+0x36>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <letterwrite+0x3c>
 3f8:	00 00       	nop
 3fa:	08 95       	ret

000003fc <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
 402:	81 b1       	in	r24, 0x01	; 1
 404:	87 78       	andi	r24, 0x87	; 135
 406:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
 408:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
 40a:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
 40c:	12 9a       	sbi	0x02, 2	; 2
 40e:	81 ee       	ldi	r24, 0xE1	; 225
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <instruction_read+0x16>
 416:	00 c0       	rjmp	.+0      	; 0x418 <instruction_read+0x1c>
 418:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
 41a:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
 41c:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
 41e:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
 420:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
 422:	12 98       	cbi	0x02, 2	; 2
 424:	e9 ef       	ldi	r30, 0xF9	; 249
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <instruction_read+0x2c>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <instruction_read+0x32>
 42e:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
 430:	12 9a       	sbi	0x02, 2	; 2
 432:	e1 ee       	ldi	r30, 0xE1	; 225
 434:	f4 e0       	ldi	r31, 0x04	; 4
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <instruction_read+0x3a>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <instruction_read+0x40>
 43c:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
 43e:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
 440:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
 442:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
 444:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
 446:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	26 e0       	ldi	r18, 0x06	; 6
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	2a 95       	dec	r18
 452:	e1 f7       	brne	.-8      	; 0x44c <instruction_read+0x50>
    value = PORTA & _BV(DB5);
 454:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
 456:	d0 e0       	ldi	r29, 0x00	; 0
 458:	35 e0       	ldi	r19, 0x05	; 5
 45a:	cc 0f       	add	r28, r28
 45c:	dd 1f       	adc	r29, r29
 45e:	3a 95       	dec	r19
 460:	e1 f7       	brne	.-8      	; 0x45a <instruction_read+0x5e>
 462:	8c 2b       	or	r24, r28
 464:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
 466:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
 468:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
 46a:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	54 e0       	ldi	r21, 0x04	; 4
 470:	aa 0f       	add	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	5a 95       	dec	r21
 476:	e1 f7       	brne	.-8      	; 0x470 <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
 478:	8a 2b       	or	r24, r26
 47a:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
 47c:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	73 e0       	ldi	r23, 0x03	; 3
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	7a 95       	dec	r23
 488:	e1 f7       	brne	.-8      	; 0x482 <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
 48a:	8e 2b       	or	r24, r30
 48c:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
 48e:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
 49a:	86 2b       	or	r24, r22
 49c:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
 49e:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
 4a0:	51 b1       	in	r21, 0x01	; 1
 4a2:	58 67       	ori	r21, 0x78	; 120
 4a4:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
 4a6:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
 4a8:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
 4aa:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	44 0f       	add	r20, r20
 4b0:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
 4b2:	84 2b       	or	r24, r20
 4b4:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
 4b6:	16 fb       	bst	r17, 6
 4b8:	22 27       	eor	r18, r18
 4ba:	20 f9       	bld	r18, 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
 4be:	36 95       	lsr	r19
 4c0:	32 2f       	mov	r19, r18
 4c2:	22 27       	eor	r18, r18
 4c4:	37 95       	ror	r19
 4c6:	27 95       	ror	r18
}
 4c8:	82 2b       	or	r24, r18
 4ca:	93 2b       	or	r25, r19
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	08 95       	ret

000004d4 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
 4d4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <instruction_read>
 4d8:	8f 77       	andi	r24, 0x7F	; 127
 4da:	99 27       	eor	r25, r25
    return address+1;
}
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
 4e0:	89 2b       	or	r24, r25
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <write_db74+0x8>
 4e4:	16 98       	cbi	0x02, 6	; 2
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <write_db74+0xa>
    else PORTA |= _BV(DB7);
 4e8:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
 4ea:	67 2b       	or	r22, r23
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <write_db74+0x12>
 4ee:	15 98       	cbi	0x02, 5	; 2
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <write_db74+0x14>
    else PORTA |= _BV(DB6);
 4f2:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
 4f4:	45 2b       	or	r20, r21
 4f6:	11 f4       	brne	.+4      	; 0x4fc <write_db74+0x1c>
 4f8:	14 98       	cbi	0x02, 4	; 2
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <write_db74+0x1e>
    else PORTA |= _BV(DB5);
 4fc:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
 4fe:	23 2b       	or	r18, r19
 500:	11 f4       	brne	.+4      	; 0x506 <write_db74+0x26>
 502:	13 98       	cbi	0x02, 3	; 2
 504:	08 95       	ret
    else PORTA |= _BV(DB4);
 506:	13 9a       	sbi	0x02, 3	; 2
 508:	08 95       	ret

0000050a <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
 510:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
 512:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
 514:	28 2f       	mov	r18, r24
 516:	22 95       	swap	r18
 518:	21 70       	andi	r18, 0x01	; 1
 51a:	85 fb       	bst	r24, 5
 51c:	44 27       	eor	r20, r20
 51e:	40 f9       	bld	r20, 0
 520:	86 fb       	bst	r24, 6
 522:	66 27       	eor	r22, r22
 524:	60 f9       	bld	r22, 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 70 02 	call	0x4e0	; 0x4e0 <write_db74>
    datarw();
 534:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
 538:	9e 01       	movw	r18, r28
 53a:	21 70       	andi	r18, 0x01	; 1
 53c:	33 27       	eor	r19, r19
 53e:	4c 2f       	mov	r20, r28
 540:	46 95       	lsr	r20
 542:	41 70       	andi	r20, 0x01	; 1
 544:	c2 fb       	bst	r28, 2
 546:	66 27       	eor	r22, r22
 548:	60 f9       	bld	r22, 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	c3 fb       	bst	r28, 3
 550:	88 27       	eor	r24, r24
 552:	80 f9       	bld	r24, 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 70 02 	call	0x4e0	; 0x4e0 <write_db74>
    datarw();
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
 55e:	0c 94 1c 01 	jmp	0x238	; 0x238 <datarw>

00000562 <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
 562:	cf 93       	push	r28
 564:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
 566:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
 568:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
 56a:	84 fb       	bst	r24, 4
 56c:	22 27       	eor	r18, r18
 56e:	20 f9       	bld	r18, 0
 570:	85 fb       	bst	r24, 5
 572:	44 27       	eor	r20, r20
 574:	40 f9       	bld	r20, 0
 576:	86 fb       	bst	r24, 6
 578:	66 27       	eor	r22, r22
 57a:	60 f9       	bld	r22, 0
 57c:	88 1f       	adc	r24, r24
 57e:	88 27       	eor	r24, r24
 580:	88 1f       	adc	r24, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <write_db74>
    datarw();
 58e:	0e 94 1c 01 	call	0x238	; 0x238 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
 592:	2c 2f       	mov	r18, r28
 594:	21 70       	andi	r18, 0x01	; 1
 596:	c1 fb       	bst	r28, 1
 598:	44 27       	eor	r20, r20
 59a:	40 f9       	bld	r20, 0
 59c:	c2 fb       	bst	r28, 2
 59e:	66 27       	eor	r22, r22
 5a0:	60 f9       	bld	r22, 0
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	c3 fb       	bst	r28, 3
 5aa:	88 27       	eor	r24, r24
 5ac:	80 f9       	bld	r24, 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <write_db74>
    datarw();
}
 5b4:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
 5b6:	0c 94 1c 01 	jmp	0x238	; 0x238 <datarw>

000005ba <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
 5ba:	cf 93       	push	r28
 5bc:	c8 2f       	mov	r28, r24
    chars_written++;
 5be:	20 91 13 01 	lds	r18, 0x0113
 5c2:	30 91 14 01 	lds	r19, 0x0114
 5c6:	2f 5f       	subi	r18, 0xFF	; 255
 5c8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ca:	30 93 14 01 	sts	0x0114, r19
 5ce:	20 93 13 01 	sts	0x0113, r18

    if ((chars_written==16)||(mychar=='\n'))
 5d2:	20 31       	cpi	r18, 0x10	; 16
 5d4:	31 05       	cpc	r19, r1
 5d6:	31 f0       	breq	.+12     	; 0x5e4 <char_write+0x2a>
 5d8:	8a 30       	cpi	r24, 0x0A	; 10
 5da:	21 f0       	breq	.+8      	; 0x5e4 <char_write+0x2a>
            line_num = 2;
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
 5dc:	8c 2f       	mov	r24, r28
    
}
 5de:	cf 91       	pop	r28
            line_num = 2;
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
 5e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <data_write>
{
    chars_written++;

    if ((chars_written==16)||(mychar=='\n'))
    {
        if (line_num==1)
 5e4:	20 91 03 01 	lds	r18, 0x0103
 5e8:	30 91 04 01 	lds	r19, 0x0104
 5ec:	21 30       	cpi	r18, 0x01	; 1
 5ee:	31 05       	cpc	r19, r1
 5f0:	51 f4       	brne	.+20     	; 0x606 <char_write+0x4c>
        {
            set_ddram_address(0x40);
 5f2:	80 e4       	ldi	r24, 0x40	; 64
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 85 02 	call	0x50a	; 0x50a <set_ddram_address>
            line_num = 2;
 5fa:	22 e0       	ldi	r18, 0x02	; 2
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	30 93 04 01 	sts	0x0104, r19
 602:	20 93 03 01 	sts	0x0103, r18
        }
    }

    if (mychar!='\n')
 606:	ca 30       	cpi	r28, 0x0A	; 10
 608:	49 f7       	brne	.-46     	; 0x5dc <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <string_write>:
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ec 01       	movw	r28, r24
 618:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <get_current_address>
 61c:	8e 01       	movw	r16, r28
 61e:	fe 01       	movw	r30, r28
 620:	01 90       	ld	r0, Z+
 622:	00 20       	and	r0, r0
 624:	e9 f7       	brne	.-6      	; 0x620 <string_write+0x12>
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	ec 1b       	sub	r30, r28
 62a:	fd 0b       	sbc	r31, r29
 62c:	c8 01       	movw	r24, r16
 62e:	8c 1b       	sub	r24, r28
 630:	9d 0b       	sbc	r25, r29
 632:	8e 17       	cp	r24, r30
 634:	9f 07       	cpc	r25, r31
 636:	40 f4       	brcc	.+16     	; 0x648 <string_write+0x3a>
 638:	f8 01       	movw	r30, r16
 63a:	81 91       	ld	r24, Z+
 63c:	8f 01       	movw	r16, r30
 63e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <char_write>
 642:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <get_current_address>
 646:	eb cf       	rjmp	.-42     	; 0x61e <string_write+0x10>
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	08 95       	ret

00000652 <main>:
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	1f 92       	push	r1
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	84 b9       	out	0x04, r24	; 4
 660:	f8 94       	cli
 662:	0e 94 67 00 	call	0xce	; 0xce <InitUSART>
 666:	78 94       	sei
 668:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_init>
 66c:	2f e3       	ldi	r18, 0x3F	; 63
 66e:	8d e0       	ldi	r24, 0x0D	; 13
 670:	93 e0       	ldi	r25, 0x03	; 3
 672:	21 50       	subi	r18, 0x01	; 1
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	90 40       	sbci	r25, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x20>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0x2a>
 67c:	00 00       	nop
 67e:	00 e0       	ldi	r16, 0x00	; 0
 680:	10 e0       	ldi	r17, 0x00	; 0
 682:	c8 01       	movw	r24, r16
 684:	0e 94 9f 03 	call	0x73e	; 0x73e <__eerd_byte_m1284p>
 688:	0e 94 dd 02 	call	0x5ba	; 0x5ba <char_write>
 68c:	e7 ea       	ldi	r30, 0xA7	; 167
 68e:	f1 e6       	ldi	r31, 0x61	; 97
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <main+0x3e>
 694:	00 c0       	rjmp	.+0      	; 0x696 <main+0x44>
 696:	00 00       	nop
 698:	0f 5f       	subi	r16, 0xFF	; 255
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	0f 30       	cpi	r16, 0x0F	; 15
 69e:	11 05       	cpc	r17, r1
 6a0:	81 f7       	brne	.-32     	; 0x682 <main+0x30>
 6a2:	00 91 0c 01 	lds	r16, 0x010C
 6a6:	10 91 0d 01 	lds	r17, 0x010D
 6aa:	01 30       	cpi	r16, 0x01	; 1
 6ac:	11 05       	cpc	r17, r1
 6ae:	11 f5       	brne	.+68     	; 0x6f4 <main+0xa2>
 6b0:	0e 94 89 00 	call	0x112	; 0x112 <getChar>
 6b4:	88 23       	and	r24, r24
 6b6:	f1 f0       	breq	.+60     	; 0x6f4 <main+0xa2>
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	0e 94 07 01 	call	0x20e	; 0x20e <serialEnd>
 6be:	69 81       	ldd	r22, Y+1	; 0x01
 6c0:	89 2b       	or	r24, r25
 6c2:	29 f0       	breq	.+10     	; 0x6ce <main+0x7c>
 6c4:	10 92 0d 01 	sts	0x010D, r1
 6c8:	10 92 0c 01 	sts	0x010C, r1
 6cc:	13 c0       	rjmp	.+38     	; 0x6f4 <main+0xa2>
 6ce:	80 91 08 01 	lds	r24, 0x0108
 6d2:	90 91 09 01 	lds	r25, 0x0109
 6d6:	0e 94 a7 03 	call	0x74e	; 0x74e <__eewr_byte_m1284p>
 6da:	80 91 08 01 	lds	r24, 0x0108
 6de:	90 91 09 01 	lds	r25, 0x0109
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	90 93 09 01 	sts	0x0109, r25
 6e8:	80 93 08 01 	sts	0x0108, r24
 6ec:	10 93 0b 01 	sts	0x010B, r17
 6f0:	00 93 0a 01 	sts	0x010A, r16
 6f4:	80 91 0a 01 	lds	r24, 0x010A
 6f8:	90 91 0b 01 	lds	r25, 0x010B
 6fc:	89 2b       	or	r24, r25
 6fe:	89 f2       	breq	.-94     	; 0x6a2 <main+0x50>
 700:	e0 90 06 01 	lds	r14, 0x0106
 704:	f0 90 07 01 	lds	r15, 0x0107
 708:	c7 01       	movw	r24, r14
 70a:	0e 94 9f 03 	call	0x73e	; 0x73e <__eerd_byte_m1284p>
 70e:	18 2f       	mov	r17, r24
 710:	97 01       	movw	r18, r14
 712:	2f 5f       	subi	r18, 0xFF	; 255
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	30 93 07 01 	sts	0x0107, r19
 71a:	20 93 06 01 	sts	0x0106, r18
 71e:	20 31       	cpi	r18, 0x10	; 16
 720:	31 05       	cpc	r19, r1
 722:	44 f4       	brge	.+16     	; 0x734 <main+0xe2>
 724:	22 30       	cpi	r18, 0x02	; 2
 726:	31 05       	cpc	r19, r1
 728:	14 f4       	brge	.+4      	; 0x72e <main+0xdc>
 72a:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_init>
 72e:	81 2f       	mov	r24, r17
 730:	0e 94 dd 02 	call	0x5ba	; 0x5ba <char_write>
 734:	10 92 0b 01 	sts	0x010B, r1
 738:	10 92 0a 01 	sts	0x010A, r1
 73c:	b2 cf       	rjmp	.-156    	; 0x6a2 <main+0x50>

0000073e <__eerd_byte_m1284p>:
 73e:	f9 99       	sbic	0x1f, 1	; 31
 740:	fe cf       	rjmp	.-4      	; 0x73e <__eerd_byte_m1284p>
 742:	92 bd       	out	0x22, r25	; 34
 744:	81 bd       	out	0x21, r24	; 33
 746:	f8 9a       	sbi	0x1f, 0	; 31
 748:	99 27       	eor	r25, r25
 74a:	80 b5       	in	r24, 0x20	; 32
 74c:	08 95       	ret

0000074e <__eewr_byte_m1284p>:
 74e:	26 2f       	mov	r18, r22

00000750 <__eewr_r18_m1284p>:
 750:	f9 99       	sbic	0x1f, 1	; 31
 752:	fe cf       	rjmp	.-4      	; 0x750 <__eewr_r18_m1284p>
 754:	1f ba       	out	0x1f, r1	; 31
 756:	92 bd       	out	0x22, r25	; 34
 758:	81 bd       	out	0x21, r24	; 33
 75a:	20 bd       	out	0x20, r18	; 32
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	fa 9a       	sbi	0x1f, 2	; 31
 762:	f9 9a       	sbi	0x1f, 1	; 31
 764:	0f be       	out	0x3f, r0	; 63
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	08 95       	ret

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
