
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000014b0  00001544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800120  00800120  00001564  2**0
                  ALLOC
  3 .stab         00005e44  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e41  00000000  00000000  000073a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000091e9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_28>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 eb       	ldi	r30, 0xB0	; 176
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 34       	cpi	r26, 0x47	; 71
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 10 04 	call	0x820	; 0x820 <main>
      c6:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
      ce:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
      d2:	8c e0       	ldi	r24, 0x0C	; 12
      d4:	80 93 cc 00 	sts	0x00CC, r24
    
    // Enable The Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
      d8:	e9 ec       	ldi	r30, 0xC9	; 201
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	88 6d       	ori	r24, 0xD8	; 216
      e0:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
      e2:	e8 ec       	ldi	r30, 0xC8	; 200
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	82 60       	ori	r24, 0x02	; 2
      ea:	80 83       	st	Z, r24
    
    // Set the Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
      ec:	ea ec       	ldi	r30, 0xCA	; 202
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 60       	ori	r24, 0x0E	; 14
      f4:	80 83       	st	Z, r24
      f6:	08 95       	ret

000000f8 <peekChar>:

char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
      f8:	e0 91 2c 01 	lds	r30, 0x012C
      fc:	80 91 2b 01 	lds	r24, 0x012B
     100:	e8 17       	cp	r30, r24
     102:	29 f0       	breq	.+10     	; 0x10e <peekChar+0x16>
    {
        ret = rxBuffer[rxReadPos];
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ed 53       	subi	r30, 0x3D	; 61
     108:	fd 4f       	sbci	r31, 0xFD	; 253
     10a:	80 81       	ld	r24, Z
     10c:	08 95       	ret
    //stdout= &my_stream;
}

char peekChar(void)
{
    char ret = '\0';
     10e:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     110:	08 95       	ret

00000112 <getChar>:

char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     112:	90 91 2c 01 	lds	r25, 0x012C
     116:	e9 2f       	mov	r30, r25
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	ed 53       	subi	r30, 0x3D	; 61
     11c:	fd 4f       	sbci	r31, 0xFD	; 253
     11e:	80 81       	ld	r24, Z
     
    rxReadPos++;
     120:	9f 5f       	subi	r25, 0xFF	; 255
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     122:	97 fd       	sbrc	r25, 7
     124:	03 c0       	rjmp	.+6      	; 0x12c <getChar+0x1a>
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     
    rxReadPos++;
     126:	90 93 2c 01 	sts	0x012C, r25
     12a:	08 95       	ret
     
    if(rxReadPos >= RX_BUFFER_SIZE)
    {
        rxReadPos = 0;
     12c:	10 92 2c 01 	sts	0x012C, r1
    }
    
    return ret;
}
     130:	08 95       	ret

00000132 <serialStart>:

int serialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     132:	80 91 28 01 	lds	r24, 0x0128
     136:	90 91 01 01 	lds	r25, 0x0101
     13a:	89 13       	cpse	r24, r25
     13c:	0c c0       	rjmp	.+24     	; 0x156 <serialStart+0x24>
     13e:	20 91 29 01 	lds	r18, 0x0129
     142:	28 13       	cpse	r18, r24
     144:	08 c0       	rjmp	.+16     	; 0x156 <serialStart+0x24>
     146:	30 91 2a 01 	lds	r19, 0x012A
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	32 17       	cp	r19, r18
     150:	21 f0       	breq	.+8      	; 0x15a <serialStart+0x28>
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	08 95       	ret
        return 1;
    else
        return 0;
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
}
     15a:	08 95       	ret

0000015c <__vector_28>:
union float2bytes { 
    float f; 
    char b[sizeof(float)];
};

ISR(USART1_RX_vect){
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	0b b6       	in	r0, 0x3b	; 59
     168:	0f 92       	push	r0
     16a:	2f 93       	push	r18
     16c:	3f 93       	push	r19
     16e:	4f 93       	push	r20
     170:	5f 93       	push	r21
     172:	6f 93       	push	r22
     174:	7f 93       	push	r23
     176:	8f 93       	push	r24
     178:	9f 93       	push	r25
     17a:	af 93       	push	r26
     17c:	bf 93       	push	r27
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
    

    //shift serial history back one
    serial_history[2] = serial_history[1];
     182:	80 91 29 01 	lds	r24, 0x0129
     186:	80 93 2a 01 	sts	0x012A, r24
    serial_history[1] = serial_history[0];
     18a:	80 91 28 01 	lds	r24, 0x0128
     18e:	80 93 29 01 	sts	0x0129, r24
    //Read value out of the UART buffer
    serial_history[0] = UDR1;
     192:	80 91 ce 00 	lds	r24, 0x00CE
     196:	80 93 28 01 	sts	0x0128, r24

    if (update_progress==1)
     19a:	80 91 26 01 	lds	r24, 0x0126
     19e:	90 91 27 01 	lds	r25, 0x0127
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	61 f4       	brne	.+24     	; 0x1be <__vector_28+0x62>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     1a6:	80 91 2b 01 	lds	r24, 0x012B
     1aa:	90 91 28 01 	lds	r25, 0x0128
     1ae:	e8 2f       	mov	r30, r24
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	ed 53       	subi	r30, 0x3D	; 61
     1b4:	fd 4f       	sbci	r31, 0xFD	; 253
     1b6:	90 83       	st	Z, r25
        rxWritePos++;
     1b8:	8f 5f       	subi	r24, 0xFF	; 255
     1ba:	80 93 2b 01 	sts	0x012B, r24
    }   

    if(serialStart()){
     1be:	0e 94 99 00 	call	0x132	; 0x132 <serialStart>
     1c2:	89 2b       	or	r24, r25
     1c4:	31 f0       	breq	.+12     	; 0x1d2 <__vector_28+0x76>
        update_progress = 1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	90 93 27 01 	sts	0x0127, r25
     1ce:	80 93 26 01 	sts	0x0126, r24
        //lcd_cursor();
        //eeprom_index = 0;
        //string_write("1");
    } 

    if(rxWritePos >= RX_BUFFER_SIZE)
     1d2:	80 91 2b 01 	lds	r24, 0x012B
     1d6:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     1d8:	10 92 2b 01 	sts	0x012B, r1
    }

}
     1dc:	ff 91       	pop	r31
     1de:	ef 91       	pop	r30
     1e0:	bf 91       	pop	r27
     1e2:	af 91       	pop	r26
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	7f 91       	pop	r23
     1ea:	6f 91       	pop	r22
     1ec:	5f 91       	pop	r21
     1ee:	4f 91       	pop	r20
     1f0:	3f 91       	pop	r19
     1f2:	2f 91       	pop	r18
     1f4:	0f 90       	pop	r0
     1f6:	0b be       	out	0x3b, r0	; 59
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <serialEnd>:
        return 0;
}

int serialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     202:	80 91 28 01 	lds	r24, 0x0128
     206:	90 91 00 01 	lds	r25, 0x0100
     20a:	89 13       	cpse	r24, r25
     20c:	0c c0       	rjmp	.+24     	; 0x226 <serialEnd+0x24>
     20e:	20 91 29 01 	lds	r18, 0x0129
     212:	28 13       	cpse	r18, r24
     214:	08 c0       	rjmp	.+16     	; 0x226 <serialEnd+0x24>
     216:	30 91 2a 01 	lds	r19, 0x012A
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	32 17       	cp	r19, r18
     220:	21 f0       	breq	.+8      	; 0x22a <serialEnd+0x28>
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	08 95       	ret
        return 1;
    else
        return 0;
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
}
     22a:	08 95       	ret

0000022c <my_eeprom_read_int>:

int my_eeprom_read_int(int address)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	1f 92       	push	r1
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
    char temp_num = ((char)eeprom_read_byte((int *)address));
     236:	0e 94 94 09 	call	0x1328	; 0x1328 <__eerd_byte_m1284p>
     23a:	89 83       	std	Y+1, r24	; 0x01
    return (atoi(&temp_num));
     23c:	ce 01       	movw	r24, r28
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	0e 94 34 07 	call	0xe68	; 0xe68 <atoi>
}
     244:	0f 90       	pop	r0
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <my_eeprom_read_char>:

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((int *)address);
     24c:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__eerd_byte_m1284p>

00000250 <my_eeprom_read_float>:
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     250:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__eerd_dword_m1284p>

00000254 <my_eeprom_read_string>:
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     254:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__eerd_block_m1284p>

00000258 <string_write_int>:
}

void string_write_int(int num, int num_digits)
{
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	18 2f       	mov	r17, r24
     262:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     264:	cb 01       	movw	r24, r22
     266:	0e 94 0d 06 	call	0xc1a	; 0xc1a <malloc>
     26a:	d8 2f       	mov	r29, r24
     26c:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	2b e0       	ldi	r18, 0x0B	; 11
     274:	31 e0       	ldi	r19, 0x01	; 1
     276:	3f 93       	push	r19
     278:	2f 93       	push	r18
     27a:	9f 93       	push	r25
     27c:	8f 93       	push	r24
     27e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <sprintf>
    string_write(temp);
     282:	8d 2f       	mov	r24, r29
     284:	9c 2f       	mov	r25, r28
     286:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
    free(temp);
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	8d 2f       	mov	r24, r29
     298:	9c 2f       	mov	r25, r28
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     2a2:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <free>

000002a6 <string_write_float>:
}

void string_write_float(float num)
{
     2a6:	cf 92       	push	r12
     2a8:	df 92       	push	r13
     2aa:	ef 92       	push	r14
     2ac:	ff 92       	push	r15
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <string_write_float+0xe>
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <string_write_float+0x10>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
    double intpart, fractpart;

    fractpart = modf(num, &intpart);
     2ba:	ae 01       	movw	r20, r28
     2bc:	4f 5f       	subi	r20, 0xFF	; 255
     2be:	5f 4f       	sbci	r21, 0xFF	; 255
     2c0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <modf>
     2c4:	6b 01       	movw	r12, r22
     2c6:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); string_write_int((int)fractpart,4);
     2c8:	69 81       	ldd	r22, Y+1	; 0x01
     2ca:	7a 81       	ldd	r23, Y+2	; 0x02
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fixsfsi>
     2d4:	dc 01       	movw	r26, r24
     2d6:	cb 01       	movw	r24, r22
     2d8:	64 e0       	ldi	r22, 0x04	; 4
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 2c 01 	call	0x258	; 0x258 <string_write_int>
     2e0:	8e e0       	ldi	r24, 0x0E	; 14
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fixsfsi>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	64 e0       	ldi	r22, 0x04	; 4
     2f6:	70 e0       	ldi	r23, 0x00	; 0

    /*char *temp = (char *)malloc(8*sizeof(char));
    sprintf(temp,"%lf",(double)num);
    string_write(temp);
    free(temp);*/
}
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
{
    double intpart, fractpart;

    fractpart = modf(num, &intpart);

    string_write_int((int)intpart,4); string_write("."); string_write_int((int)fractpart,4);
     30c:	0c 94 2c 01 	jmp	0x258	; 0x258 <string_write_int>

00000310 <print_eeprom_contents>:
    string_write(temp);
    free(temp);*/
}

void print_eeprom_contents()
{
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
    int i=0;
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	1c e1       	ldi	r17, 0x1C	; 28
     31c:	20 91 bd 02 	lds	r18, 0x02BD
     320:	30 91 be 02 	lds	r19, 0x02BE
     324:	12 9f       	mul	r17, r18
     326:	c0 01       	movw	r24, r0
     328:	13 9f       	mul	r17, r19
     32a:	90 0d       	add	r25, r0
     32c:	11 24       	eor	r1, r1
     32e:	8c 59       	subi	r24, 0x9C	; 156
     330:	9f 4f       	sbci	r25, 0xFF	; 255
     332:	8c 17       	cp	r24, r28
     334:	9d 07       	cpc	r25, r29
     336:	84 f0       	brlt	.+32     	; 0x358 <print_eeprom_contents+0x48>
    return (atoi(&temp_num));
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((int *)address);
     338:	ce 01       	movw	r24, r28
     33a:	0e 94 94 09 	call	0x1328	; 0x1328 <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
    {
        one_byte = my_eeprom_read_char(i);
        if (one_byte == '\0')
     33e:	81 11       	cpse	r24, r1
     340:	01 c0       	rjmp	.+2      	; 0x344 <print_eeprom_contents+0x34>
            one_byte = '?';
     342:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     344:	0e 94 ba 03 	call	0x774	; 0x774 <char_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     348:	87 ea       	ldi	r24, 0xA7	; 167
     34a:	91 e6       	ldi	r25, 0x61	; 97
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <print_eeprom_contents+0x3c>
     350:	00 c0       	rjmp	.+0      	; 0x352 <print_eeprom_contents+0x42>
     352:	00 00       	nop
void print_eeprom_contents()
{
    int i=0;
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
     354:	21 96       	adiw	r28, 0x01	; 1
     356:	e2 cf       	rjmp	.-60     	; 0x31c <print_eeprom_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	08 95       	ret

00000360 <print_eeprom_station_contents>:

void print_eeprom_station_contents()
{
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     366:	c0 e0       	ldi	r28, 0x00	; 0
     368:	d0 e0       	ldi	r29, 0x00	; 0
     36a:	1c e1       	ldi	r17, 0x1C	; 28
     36c:	20 91 bd 02 	lds	r18, 0x02BD
     370:	30 91 be 02 	lds	r19, 0x02BE
     374:	12 9f       	mul	r17, r18
     376:	c0 01       	movw	r24, r0
     378:	13 9f       	mul	r17, r19
     37a:	90 0d       	add	r25, r0
     37c:	11 24       	eor	r1, r1
     37e:	c8 17       	cp	r28, r24
     380:	d9 07       	cpc	r29, r25
     382:	94 f4       	brge	.+36     	; 0x3a8 <print_eeprom_station_contents+0x48>
    return (atoi(&temp_num));
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((int *)address);
     384:	ce 01       	movw	r24, r28
     386:	8b 59       	subi	r24, 0x9B	; 155
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	0e 94 94 09 	call	0x1328	; 0x1328 <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
    {
        one_byte = my_eeprom_read_char(start+i);
        if (one_byte == '\0')
     38e:	81 11       	cpse	r24, r1
     390:	01 c0       	rjmp	.+2      	; 0x394 <print_eeprom_station_contents+0x34>
            one_byte = '?';
     392:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     394:	0e 94 ba 03 	call	0x774	; 0x774 <char_write>
     398:	87 ea       	ldi	r24, 0xA7	; 167
     39a:	91 e6       	ldi	r25, 0x61	; 97
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <print_eeprom_station_contents+0x3c>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <print_eeprom_station_contents+0x42>
     3a2:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     3a4:	21 96       	adiw	r28, 0x01	; 1
     3a6:	e2 cf       	rjmp	.-60     	; 0x36c <print_eeprom_station_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	08 95       	ret

000003b0 <print_station>:

void print_station(int index)
{
    Station dat_station = all_stations[index];
     3b0:	2c e1       	ldi	r18, 0x1C	; 28
     3b2:	ac 01       	movw	r20, r24
     3b4:	24 9f       	mul	r18, r20
     3b6:	c0 01       	movw	r24, r0
     3b8:	25 9f       	mul	r18, r21
     3ba:	90 0d       	add	r25, r0
     3bc:	11 24       	eor	r1, r1
     3be:	e0 91 c1 02 	lds	r30, 0x02C1
     3c2:	f0 91 c2 02 	lds	r31, 0x02C2
     3c6:	e8 0f       	add	r30, r24
     3c8:	f9 1f       	adc	r31, r25

    //string_write(dat_station.callsign); string_write(" "); _delay_ms(500);
    string_write_float(dat_station.freq); string_write(" "); _delay_ms(500);
     3ca:	60 85       	ldd	r22, Z+8	; 0x08
     3cc:	71 85       	ldd	r23, Z+9	; 0x09
     3ce:	82 85       	ldd	r24, Z+10	; 0x0a
     3d0:	93 85       	ldd	r25, Z+11	; 0x0b
     3d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <string_write_float>
     3d6:	89 e1       	ldi	r24, 0x19	; 25
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
     3de:	5f e9       	ldi	r21, 0x9F	; 159
     3e0:	86 e8       	ldi	r24, 0x86	; 134
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	51 50       	subi	r21, 0x01	; 1
     3e6:	80 40       	sbci	r24, 0x00	; 0
     3e8:	90 40       	sbci	r25, 0x00	; 0
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <print_station+0x34>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <print_station+0x3e>
     3ee:	00 00       	nop
     3f0:	08 95       	ret

000003f2 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     3f2:	12 9a       	sbi	0x02, 2	; 2
     3f4:	81 ee       	ldi	r24, 0xE1	; 225
     3f6:	94 e0       	ldi	r25, 0x04	; 4
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <datarw+0x6>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <datarw+0xc>
     3fe:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     400:	12 98       	cbi	0x02, 2	; 2
     402:	08 95       	ret

00000404 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     404:	10 92 c0 02 	sts	0x02C0, r1
     408:	10 92 bf 02 	sts	0x02BF, r1
    line_num = 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	90 93 04 01 	sts	0x0104, r25
     414:	80 93 03 01 	sts	0x0103, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     418:	81 b1       	in	r24, 0x01	; 1
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	81 b9       	out	0x01, r24	; 1
     41e:	87 e8       	ldi	r24, 0x87	; 135
     420:	93 e1       	ldi	r25, 0x13	; 19
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <lcd_init+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <lcd_init+0x24>
     428:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     42a:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     42c:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     42e:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     430:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     432:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     434:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     436:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     438:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     43c:	81 ee       	ldi	r24, 0xE1	; 225
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_init+0x3c>
     444:	00 c0       	rjmp	.+0      	; 0x446 <lcd_init+0x42>
     446:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     448:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     44c:	89 ef       	ldi	r24, 0xF9	; 249
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <lcd_init+0x4c>
     454:	00 c0       	rjmp	.+0      	; 0x456 <lcd_init+0x52>
     456:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     458:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     45c:	89 ef       	ldi	r24, 0xF9	; 249
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <lcd_init+0x5c>
     464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_init+0x62>
     466:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     468:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     46a:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     46c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     46e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     470:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     474:	89 ef       	ldi	r24, 0xF9	; 249
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <lcd_init+0x74>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <lcd_init+0x7a>
     47e:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     480:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     482:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     484:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     486:	13 98       	cbi	0x02, 3	; 2
    datarw();
     488:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     48c:	89 ef       	ldi	r24, 0xF9	; 249
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x8c>
     494:	00 c0       	rjmp	.+0      	; 0x496 <lcd_init+0x92>
     496:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     498:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     49a:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     49c:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     49e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4a0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     4a4:	89 ef       	ldi	r24, 0xF9	; 249
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <lcd_init+0xa4>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <lcd_init+0xaa>
     4ae:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     4b0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     4b2:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     4b4:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4b6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4b8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     4bc:	89 ef       	ldi	r24, 0xF9	; 249
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <lcd_init+0xbc>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <lcd_init+0xc2>
     4c6:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     4c8:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     4ca:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     4cc:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4ce:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4d0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     4d4:	89 ef       	ldi	r24, 0xF9	; 249
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <lcd_init+0xd4>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <lcd_init+0xda>
     4de:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     4e0:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     4e2:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     4e4:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     4e6:	13 98       	cbi	0x02, 3	; 2
    datarw();
     4e8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     4ec:	89 ef       	ldi	r24, 0xF9	; 249
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <lcd_init+0xec>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <lcd_init+0xf2>
     4f6:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     4f8:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     4fa:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     4fc:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     4fe:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     500:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     504:	89 ef       	ldi	r24, 0xF9	; 249
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <lcd_init+0x104>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <lcd_init+0x10a>
     50e:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     510:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     512:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     514:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     516:	13 98       	cbi	0x02, 3	; 2
    datarw();
     518:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     51c:	89 ef       	ldi	r24, 0xF9	; 249
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <lcd_init+0x11c>
     524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_init+0x122>
     526:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     528:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     52a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     52c:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     52e:	13 98       	cbi	0x02, 3	; 2
    datarw();
     530:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     534:	89 ef       	ldi	r24, 0xF9	; 249
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <lcd_init+0x134>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <lcd_init+0x13a>
     53e:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     540:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     542:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     544:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     546:	13 98       	cbi	0x02, 3	; 2
    datarw();
     548:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     54c:	89 ef       	ldi	r24, 0xF9	; 249
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	f1 f7       	brne	.-4      	; 0x550 <lcd_init+0x14c>
     554:	00 c0       	rjmp	.+0      	; 0x556 <lcd_init+0x152>
     556:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     558:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     55a:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     55c:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     55e:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     560:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     564:	89 ef       	ldi	r24, 0xF9	; 249
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <lcd_init+0x164>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <lcd_init+0x16a>
     56e:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	08 95       	ret

00000576 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	11 f4       	brne	.+4      	; 0x57e <letterwrite+0x8>
     57a:	16 9a       	sbi	0x02, 6	; 2
     57c:	01 c0       	rjmp	.+2      	; 0x580 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     57e:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     580:	61 30       	cpi	r22, 0x01	; 1
     582:	71 05       	cpc	r23, r1
     584:	11 f4       	brne	.+4      	; 0x58a <letterwrite+0x14>
     586:	15 9a       	sbi	0x02, 5	; 2
     588:	01 c0       	rjmp	.+2      	; 0x58c <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     58a:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     58c:	41 30       	cpi	r20, 0x01	; 1
     58e:	51 05       	cpc	r21, r1
     590:	11 f4       	brne	.+4      	; 0x596 <letterwrite+0x20>
     592:	14 9a       	sbi	0x02, 4	; 2
     594:	01 c0       	rjmp	.+2      	; 0x598 <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     596:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     598:	21 30       	cpi	r18, 0x01	; 1
     59a:	31 05       	cpc	r19, r1
     59c:	11 f4       	brne	.+4      	; 0x5a2 <letterwrite+0x2c>
     59e:	13 9a       	sbi	0x02, 3	; 2
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     5a2:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     5a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
     5a8:	89 ef       	ldi	r24, 0xF9	; 249
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <letterwrite+0x36>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <letterwrite+0x3c>
     5b2:	00 00       	nop
     5b4:	08 95       	ret

000005b6 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     5bc:	81 b1       	in	r24, 0x01	; 1
     5be:	87 78       	andi	r24, 0x87	; 135
     5c0:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     5c2:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     5c4:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     5c6:	12 9a       	sbi	0x02, 2	; 2
     5c8:	81 ee       	ldi	r24, 0xE1	; 225
     5ca:	94 e0       	ldi	r25, 0x04	; 4
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <instruction_read+0x16>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <instruction_read+0x1c>
     5d2:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     5d4:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     5d6:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     5d8:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     5da:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     5dc:	12 98       	cbi	0x02, 2	; 2
     5de:	e9 ef       	ldi	r30, 0xF9	; 249
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <instruction_read+0x2c>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <instruction_read+0x32>
     5e8:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     5ea:	12 9a       	sbi	0x02, 2	; 2
     5ec:	e1 ee       	ldi	r30, 0xE1	; 225
     5ee:	f4 e0       	ldi	r31, 0x04	; 4
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <instruction_read+0x3a>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <instruction_read+0x40>
     5f6:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     5f8:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     5fa:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     5fc:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     5fe:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     600:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	26 e0       	ldi	r18, 0x06	; 6
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	2a 95       	dec	r18
     60c:	e1 f7       	brne	.-8      	; 0x606 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     60e:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     610:	d0 e0       	ldi	r29, 0x00	; 0
     612:	35 e0       	ldi	r19, 0x05	; 5
     614:	cc 0f       	add	r28, r28
     616:	dd 1f       	adc	r29, r29
     618:	3a 95       	dec	r19
     61a:	e1 f7       	brne	.-8      	; 0x614 <instruction_read+0x5e>
     61c:	8c 2b       	or	r24, r28
     61e:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     620:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     622:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     624:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	54 e0       	ldi	r21, 0x04	; 4
     62a:	aa 0f       	add	r26, r26
     62c:	bb 1f       	adc	r27, r27
     62e:	5a 95       	dec	r21
     630:	e1 f7       	brne	.-8      	; 0x62a <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     632:	8a 2b       	or	r24, r26
     634:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     636:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	73 e0       	ldi	r23, 0x03	; 3
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	7a 95       	dec	r23
     642:	e1 f7       	brne	.-8      	; 0x63c <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     644:	8e 2b       	or	r24, r30
     646:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     648:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	66 0f       	add	r22, r22
     64e:	77 1f       	adc	r23, r23
     650:	66 0f       	add	r22, r22
     652:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     654:	86 2b       	or	r24, r22
     656:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     658:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     65a:	51 b1       	in	r21, 0x01	; 1
     65c:	58 67       	ori	r21, 0x78	; 120
     65e:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     660:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     662:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     664:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	44 0f       	add	r20, r20
     66a:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     66c:	84 2b       	or	r24, r20
     66e:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     670:	16 fb       	bst	r17, 6
     672:	22 27       	eor	r18, r18
     674:	20 f9       	bld	r18, 0
     676:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     678:	36 95       	lsr	r19
     67a:	32 2f       	mov	r19, r18
     67c:	22 27       	eor	r18, r18
     67e:	37 95       	ror	r19
     680:	27 95       	ror	r18
}
     682:	82 2b       	or	r24, r18
     684:	93 2b       	or	r25, r19
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	08 95       	ret

0000068e <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     68e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <instruction_read>
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	99 27       	eor	r25, r25
    return address+1;
}
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	08 95       	ret

0000069a <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     69a:	89 2b       	or	r24, r25
     69c:	11 f4       	brne	.+4      	; 0x6a2 <write_db74+0x8>
     69e:	16 98       	cbi	0x02, 6	; 2
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <write_db74+0xa>
    else PORTA |= _BV(DB7);
     6a2:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     6a4:	67 2b       	or	r22, r23
     6a6:	11 f4       	brne	.+4      	; 0x6ac <write_db74+0x12>
     6a8:	15 98       	cbi	0x02, 5	; 2
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <write_db74+0x14>
    else PORTA |= _BV(DB6);
     6ac:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     6ae:	45 2b       	or	r20, r21
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <write_db74+0x1c>
     6b2:	14 98       	cbi	0x02, 4	; 2
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     6b6:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     6b8:	23 2b       	or	r18, r19
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <write_db74+0x26>
     6bc:	13 98       	cbi	0x02, 3	; 2
     6be:	08 95       	ret
    else PORTA |= _BV(DB4);
     6c0:	13 9a       	sbi	0x02, 3	; 2
     6c2:	08 95       	ret

000006c4 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     6ca:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     6cc:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     6ce:	28 2f       	mov	r18, r24
     6d0:	22 95       	swap	r18
     6d2:	21 70       	andi	r18, 0x01	; 1
     6d4:	85 fb       	bst	r24, 5
     6d6:	44 27       	eor	r20, r20
     6d8:	40 f9       	bld	r20, 0
     6da:	86 fb       	bst	r24, 6
     6dc:	66 27       	eor	r22, r22
     6de:	60 f9       	bld	r22, 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 4d 03 	call	0x69a	; 0x69a <write_db74>
    datarw();
     6ee:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     6f2:	9e 01       	movw	r18, r28
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	33 27       	eor	r19, r19
     6f8:	4c 2f       	mov	r20, r28
     6fa:	46 95       	lsr	r20
     6fc:	41 70       	andi	r20, 0x01	; 1
     6fe:	c2 fb       	bst	r28, 2
     700:	66 27       	eor	r22, r22
     702:	60 f9       	bld	r22, 0
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	c3 fb       	bst	r28, 3
     70a:	88 27       	eor	r24, r24
     70c:	80 f9       	bld	r24, 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 4d 03 	call	0x69a	; 0x69a <write_db74>
    datarw();
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     718:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <datarw>

0000071c <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     71c:	cf 93       	push	r28
     71e:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     720:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     722:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     724:	84 fb       	bst	r24, 4
     726:	22 27       	eor	r18, r18
     728:	20 f9       	bld	r18, 0
     72a:	85 fb       	bst	r24, 5
     72c:	44 27       	eor	r20, r20
     72e:	40 f9       	bld	r20, 0
     730:	86 fb       	bst	r24, 6
     732:	66 27       	eor	r22, r22
     734:	60 f9       	bld	r22, 0
     736:	88 1f       	adc	r24, r24
     738:	88 27       	eor	r24, r24
     73a:	88 1f       	adc	r24, r24
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 4d 03 	call	0x69a	; 0x69a <write_db74>
    datarw();
     748:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     74c:	2c 2f       	mov	r18, r28
     74e:	21 70       	andi	r18, 0x01	; 1
     750:	c1 fb       	bst	r28, 1
     752:	44 27       	eor	r20, r20
     754:	40 f9       	bld	r20, 0
     756:	c2 fb       	bst	r28, 2
     758:	66 27       	eor	r22, r22
     75a:	60 f9       	bld	r22, 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	c3 fb       	bst	r28, 3
     764:	88 27       	eor	r24, r24
     766:	80 f9       	bld	r24, 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 4d 03 	call	0x69a	; 0x69a <write_db74>
    datarw();
}
     76e:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     770:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <datarw>

00000774 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     774:	cf 93       	push	r28
     776:	c8 2f       	mov	r28, r24
    chars_written++;
     778:	20 91 bf 02 	lds	r18, 0x02BF
     77c:	30 91 c0 02 	lds	r19, 0x02C0
     780:	2f 5f       	subi	r18, 0xFF	; 255
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	30 93 c0 02 	sts	0x02C0, r19
     788:	20 93 bf 02 	sts	0x02BF, r18

    if ((chars_written==17)||(mychar=='\n'))
     78c:	21 31       	cpi	r18, 0x11	; 17
     78e:	31 05       	cpc	r19, r1
     790:	31 f0       	breq	.+12     	; 0x79e <char_write+0x2a>
     792:	8a 30       	cpi	r24, 0x0A	; 10
     794:	21 f0       	breq	.+8      	; 0x79e <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     796:	8c 2f       	mov	r24, r28
    
}
     798:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     79a:	0c 94 8e 03 	jmp	0x71c	; 0x71c <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     79e:	20 91 03 01 	lds	r18, 0x0103
     7a2:	30 91 04 01 	lds	r19, 0x0104
     7a6:	21 30       	cpi	r18, 0x01	; 1
     7a8:	31 05       	cpc	r19, r1
     7aa:	79 f4       	brne	.+30     	; 0x7ca <char_write+0x56>
        {
            set_ddram_address(0x40);
     7ac:	80 e4       	ldi	r24, 0x40	; 64
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <set_ddram_address>
            line_num = 2;
     7b4:	22 e0       	ldi	r18, 0x02	; 2
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	30 93 04 01 	sts	0x0104, r19
     7bc:	20 93 03 01 	sts	0x0103, r18
            chars_written = 0;
     7c0:	10 92 c0 02 	sts	0x02C0, r1
     7c4:	10 92 bf 02 	sts	0x02BF, r1
     7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <char_write+0x60>
        }
        else if (line_num==2)
     7ca:	22 30       	cpi	r18, 0x02	; 2
     7cc:	31 05       	cpc	r19, r1
     7ce:	11 f4       	brne	.+4      	; 0x7d4 <char_write+0x60>
        {
            lcd_init();
     7d0:	0e 94 02 02 	call	0x404	; 0x404 <lcd_init>
        }
    }

    if (mychar!='\n')
     7d4:	ca 30       	cpi	r28, 0x0A	; 10
     7d6:	f9 f6       	brne	.-66     	; 0x796 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <string_write>:
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
     7e6:	0e 94 47 03 	call	0x68e	; 0x68e <get_current_address>
     7ea:	8e 01       	movw	r16, r28
     7ec:	fe 01       	movw	r30, r28
     7ee:	01 90       	ld	r0, Z+
     7f0:	00 20       	and	r0, r0
     7f2:	e9 f7       	brne	.-6      	; 0x7ee <string_write+0x12>
     7f4:	31 97       	sbiw	r30, 0x01	; 1
     7f6:	ec 1b       	sub	r30, r28
     7f8:	fd 0b       	sbc	r31, r29
     7fa:	c8 01       	movw	r24, r16
     7fc:	8c 1b       	sub	r24, r28
     7fe:	9d 0b       	sbc	r25, r29
     800:	8e 17       	cp	r24, r30
     802:	9f 07       	cpc	r25, r31
     804:	40 f4       	brcc	.+16     	; 0x816 <string_write+0x3a>
     806:	f8 01       	movw	r30, r16
     808:	81 91       	ld	r24, Z+
     80a:	8f 01       	movw	r16, r30
     80c:	0e 94 ba 03 	call	0x774	; 0x774 <char_write>
     810:	0e 94 47 03 	call	0x68e	; 0x68e <get_current_address>
     814:	eb cf       	rjmp	.-42     	; 0x7ec <string_write+0x10>
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <main>:
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	84 b9       	out	0x04, r24	; 4
     82e:	f8 94       	cli
     830:	0e 94 67 00 	call	0xce	; 0xce <InitUSART>
     834:	78 94       	sei
     836:	0e 94 02 02 	call	0x404	; 0x404 <lcd_init>
     83a:	2f e3       	ldi	r18, 0x3F	; 63
     83c:	4d e0       	ldi	r20, 0x0D	; 13
     83e:	53 e0       	ldi	r21, 0x03	; 3
     840:	21 50       	subi	r18, 0x01	; 1
     842:	40 40       	sbci	r20, 0x00	; 0
     844:	50 40       	sbci	r21, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <main+0x20>
     848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x2a>
     84a:	00 00       	nop
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 16 01 	call	0x22c	; 0x22c <my_eeprom_read_int>
     854:	90 93 be 02 	sts	0x02BE, r25
     858:	80 93 bd 02 	sts	0x02BD, r24
     85c:	80 e1       	ldi	r24, 0x10	; 16
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
     864:	63 e0       	ldi	r22, 0x03	; 3
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 91 bd 02 	lds	r24, 0x02BD
     86c:	90 91 be 02 	lds	r25, 0x02BE
     870:	0e 94 2c 01 	call	0x258	; 0x258 <string_write_int>
     874:	86 e1       	ldi	r24, 0x16	; 22
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
     87c:	8f e9       	ldi	r24, 0x9F	; 159
     87e:	96 e8       	ldi	r25, 0x86	; 134
     880:	e1 e0       	ldi	r30, 0x01	; 1
     882:	81 50       	subi	r24, 0x01	; 1
     884:	90 40       	sbci	r25, 0x00	; 0
     886:	e0 40       	sbci	r30, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <main+0x62>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <main+0x6c>
     88c:	00 00       	nop
     88e:	80 91 bd 02 	lds	r24, 0x02BD
     892:	90 91 be 02 	lds	r25, 0x02BE
     896:	2c e1       	ldi	r18, 0x1C	; 28
     898:	ac 01       	movw	r20, r24
     89a:	24 9f       	mul	r18, r20
     89c:	c0 01       	movw	r24, r0
     89e:	25 9f       	mul	r18, r21
     8a0:	90 0d       	add	r25, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <malloc>
     8a8:	90 93 c2 02 	sts	0x02C2, r25
     8ac:	80 93 c1 02 	sts	0x02C1, r24
     8b0:	85 ef       	ldi	r24, 0xF5	; 245
     8b2:	c8 2e       	mov	r12, r24
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	d8 2e       	mov	r13, r24
     8b8:	9d e2       	ldi	r25, 0x2D	; 45
     8ba:	e9 2e       	mov	r14, r25
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	f9 2e       	mov	r15, r25
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	81 2c       	mov	r8, r1
     8c6:	91 2c       	mov	r9, r1
     8c8:	2c e1       	ldi	r18, 0x1C	; 28
     8ca:	b2 2e       	mov	r11, r18
     8cc:	5f ef       	ldi	r21, 0xFF	; 255
     8ce:	85 1a       	sub	r8, r21
     8d0:	95 0a       	sbc	r9, r21
     8d2:	c4 01       	movw	r24, r8
     8d4:	0e 94 16 01 	call	0x22c	; 0x22c <my_eeprom_read_int>
     8d8:	f6 01       	movw	r30, r12
     8da:	81 93       	st	Z+, r24
     8dc:	91 93       	st	Z+, r25
     8de:	6f 01       	movw	r12, r30
     8e0:	b0 9e       	mul	r11, r16
     8e2:	90 01       	movw	r18, r0
     8e4:	b1 9e       	mul	r11, r17
     8e6:	30 0d       	add	r19, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2b 59       	subi	r18, 0x9B	; 155
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	f7 01       	movw	r30, r14
     8f0:	21 93       	st	Z+, r18
     8f2:	31 93       	st	Z+, r19
     8f4:	7f 01       	movw	r14, r30
     8f6:	08 0f       	add	r16, r24
     8f8:	19 1f       	adc	r17, r25
     8fa:	f4 e6       	ldi	r31, 0x64	; 100
     8fc:	8f 16       	cp	r8, r31
     8fe:	91 04       	cpc	r9, r1
     900:	29 f7       	brne	.-54     	; 0x8cc <main+0xac>
     902:	0e 94 02 02 	call	0x404	; 0x404 <lcd_init>
     906:	0d e6       	ldi	r16, 0x6D	; 109
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	e1 2c       	mov	r14, r1
     90c:	f1 2c       	mov	r15, r1
     90e:	80 91 bd 02 	lds	r24, 0x02BD
     912:	90 91 be 02 	lds	r25, 0x02BE
     916:	e8 16       	cp	r14, r24
     918:	f9 06       	cpc	r15, r25
     91a:	dc f4       	brge	.+54     	; 0x952 <main+0x132>
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 9c 09 	call	0x1338	; 0x1338 <__eerd_dword_m1284p>
     922:	0e 94 53 01 	call	0x2a6	; 0x2a6 <string_write_float>
     926:	88 e1       	ldi	r24, 0x18	; 24
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
     92e:	2f ef       	ldi	r18, 0xFF	; 255
     930:	e2 1a       	sub	r14, r18
     932:	f2 0a       	sbc	r15, r18
     934:	04 5e       	subi	r16, 0xE4	; 228
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	ea cf       	rjmp	.-44     	; 0x90e <main+0xee>
     93a:	90 91 2c 01 	lds	r25, 0x012C
     93e:	80 91 2b 01 	lds	r24, 0x012B
     942:	98 13       	cpse	r25, r24
     944:	0e c0       	rjmp	.+28     	; 0x962 <main+0x142>
     946:	80 91 24 01 	lds	r24, 0x0124
     94a:	90 91 25 01 	lds	r25, 0x0125
     94e:	89 2b       	or	r24, r25
     950:	49 f5       	brne	.+82     	; 0x9a4 <main+0x184>
     952:	00 91 26 01 	lds	r16, 0x0126
     956:	10 91 27 01 	lds	r17, 0x0127
     95a:	01 30       	cpi	r16, 0x01	; 1
     95c:	11 05       	cpc	r17, r1
     95e:	99 f7       	brne	.-26     	; 0x946 <main+0x126>
     960:	ec cf       	rjmp	.-40     	; 0x93a <main+0x11a>
     962:	0e 94 89 00 	call	0x112	; 0x112 <getChar>
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	0e 94 01 01 	call	0x202	; 0x202 <serialEnd>
     96c:	69 81       	ldd	r22, Y+1	; 0x01
     96e:	89 2b       	or	r24, r25
     970:	29 f0       	breq	.+10     	; 0x97c <main+0x15c>
     972:	10 92 27 01 	sts	0x0127, r1
     976:	10 92 26 01 	sts	0x0126, r1
     97a:	e5 cf       	rjmp	.-54     	; 0x946 <main+0x126>
     97c:	80 91 22 01 	lds	r24, 0x0122
     980:	90 91 23 01 	lds	r25, 0x0123
     984:	0e 94 a2 09 	call	0x1344	; 0x1344 <__eewr_byte_m1284p>
     988:	80 91 22 01 	lds	r24, 0x0122
     98c:	90 91 23 01 	lds	r25, 0x0123
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	90 93 23 01 	sts	0x0123, r25
     996:	80 93 22 01 	sts	0x0122, r24
     99a:	10 93 25 01 	sts	0x0125, r17
     99e:	00 93 24 01 	sts	0x0124, r16
     9a2:	d1 cf       	rjmp	.-94     	; 0x946 <main+0x126>
     9a4:	e0 90 20 01 	lds	r14, 0x0120
     9a8:	f0 90 21 01 	lds	r15, 0x0121
     9ac:	c7 01       	movw	r24, r14
     9ae:	0e 94 94 09 	call	0x1328	; 0x1328 <__eerd_byte_m1284p>
     9b2:	18 2f       	mov	r17, r24
     9b4:	4f ef       	ldi	r20, 0xFF	; 255
     9b6:	e4 1a       	sub	r14, r20
     9b8:	f4 0a       	sbc	r15, r20
     9ba:	f0 92 21 01 	sts	0x0121, r15
     9be:	e0 92 20 01 	sts	0x0120, r14
     9c2:	58 ee       	ldi	r21, 0xE8	; 232
     9c4:	e5 16       	cp	r14, r21
     9c6:	f1 04       	cpc	r15, r1
     9c8:	4c f4       	brge	.+18     	; 0x9dc <main+0x1bc>
     9ca:	81 11       	cpse	r24, r1
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <main+0x1b6>
     9ce:	8b e1       	ldi	r24, 0x1B	; 27
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <string_write>
     9d6:	81 2f       	mov	r24, r17
     9d8:	0e 94 ba 03 	call	0x774	; 0x774 <char_write>
     9dc:	10 92 25 01 	sts	0x0125, r1
     9e0:	10 92 24 01 	sts	0x0124, r1
     9e4:	b6 cf       	rjmp	.-148    	; 0x952 <main+0x132>

000009e6 <__fixsfsi>:
     9e6:	04 d0       	rcall	.+8      	; 0x9f0 <__fixunssfsi>
     9e8:	68 94       	set
     9ea:	b1 11       	cpse	r27, r1
     9ec:	50 c0       	rjmp	.+160    	; 0xa8e <__fp_szero>
     9ee:	08 95       	ret

000009f0 <__fixunssfsi>:
     9f0:	33 d0       	rcall	.+102    	; 0xa58 <__fp_splitA>
     9f2:	88 f0       	brcs	.+34     	; 0xa16 <__fixunssfsi+0x26>
     9f4:	9f 57       	subi	r25, 0x7F	; 127
     9f6:	90 f0       	brcs	.+36     	; 0xa1c <__fixunssfsi+0x2c>
     9f8:	b9 2f       	mov	r27, r25
     9fa:	99 27       	eor	r25, r25
     9fc:	b7 51       	subi	r27, 0x17	; 23
     9fe:	a0 f0       	brcs	.+40     	; 0xa28 <__fixunssfsi+0x38>
     a00:	d1 f0       	breq	.+52     	; 0xa36 <__fixunssfsi+0x46>
     a02:	66 0f       	add	r22, r22
     a04:	77 1f       	adc	r23, r23
     a06:	88 1f       	adc	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	1a f0       	brmi	.+6      	; 0xa12 <__fixunssfsi+0x22>
     a0c:	ba 95       	dec	r27
     a0e:	c9 f7       	brne	.-14     	; 0xa02 <__fixunssfsi+0x12>
     a10:	12 c0       	rjmp	.+36     	; 0xa36 <__fixunssfsi+0x46>
     a12:	b1 30       	cpi	r27, 0x01	; 1
     a14:	81 f0       	breq	.+32     	; 0xa36 <__fixunssfsi+0x46>
     a16:	3a d0       	rcall	.+116    	; 0xa8c <__fp_zero>
     a18:	b1 e0       	ldi	r27, 0x01	; 1
     a1a:	08 95       	ret
     a1c:	37 c0       	rjmp	.+110    	; 0xa8c <__fp_zero>
     a1e:	67 2f       	mov	r22, r23
     a20:	78 2f       	mov	r23, r24
     a22:	88 27       	eor	r24, r24
     a24:	b8 5f       	subi	r27, 0xF8	; 248
     a26:	39 f0       	breq	.+14     	; 0xa36 <__fixunssfsi+0x46>
     a28:	b9 3f       	cpi	r27, 0xF9	; 249
     a2a:	cc f3       	brlt	.-14     	; 0xa1e <__fixunssfsi+0x2e>
     a2c:	86 95       	lsr	r24
     a2e:	77 95       	ror	r23
     a30:	67 95       	ror	r22
     a32:	b3 95       	inc	r27
     a34:	d9 f7       	brne	.-10     	; 0xa2c <__fixunssfsi+0x3c>
     a36:	3e f4       	brtc	.+14     	; 0xa46 <__fixunssfsi+0x56>
     a38:	90 95       	com	r25
     a3a:	80 95       	com	r24
     a3c:	70 95       	com	r23
     a3e:	61 95       	neg	r22
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	8f 4f       	sbci	r24, 0xFF	; 255
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	08 95       	ret

00000a48 <__fp_split3>:
     a48:	57 fd       	sbrc	r21, 7
     a4a:	90 58       	subi	r25, 0x80	; 128
     a4c:	44 0f       	add	r20, r20
     a4e:	55 1f       	adc	r21, r21
     a50:	59 f0       	breq	.+22     	; 0xa68 <__fp_splitA+0x10>
     a52:	5f 3f       	cpi	r21, 0xFF	; 255
     a54:	71 f0       	breq	.+28     	; 0xa72 <__fp_splitA+0x1a>
     a56:	47 95       	ror	r20

00000a58 <__fp_splitA>:
     a58:	88 0f       	add	r24, r24
     a5a:	97 fb       	bst	r25, 7
     a5c:	99 1f       	adc	r25, r25
     a5e:	61 f0       	breq	.+24     	; 0xa78 <__fp_splitA+0x20>
     a60:	9f 3f       	cpi	r25, 0xFF	; 255
     a62:	79 f0       	breq	.+30     	; 0xa82 <__fp_splitA+0x2a>
     a64:	87 95       	ror	r24
     a66:	08 95       	ret
     a68:	12 16       	cp	r1, r18
     a6a:	13 06       	cpc	r1, r19
     a6c:	14 06       	cpc	r1, r20
     a6e:	55 1f       	adc	r21, r21
     a70:	f2 cf       	rjmp	.-28     	; 0xa56 <__fp_split3+0xe>
     a72:	46 95       	lsr	r20
     a74:	f1 df       	rcall	.-30     	; 0xa58 <__fp_splitA>
     a76:	08 c0       	rjmp	.+16     	; 0xa88 <__fp_splitA+0x30>
     a78:	16 16       	cp	r1, r22
     a7a:	17 06       	cpc	r1, r23
     a7c:	18 06       	cpc	r1, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	f1 cf       	rjmp	.-30     	; 0xa64 <__fp_splitA+0xc>
     a82:	86 95       	lsr	r24
     a84:	71 05       	cpc	r23, r1
     a86:	61 05       	cpc	r22, r1
     a88:	08 94       	sec
     a8a:	08 95       	ret

00000a8c <__fp_zero>:
     a8c:	e8 94       	clt

00000a8e <__fp_szero>:
     a8e:	bb 27       	eor	r27, r27
     a90:	66 27       	eor	r22, r22
     a92:	77 27       	eor	r23, r23
     a94:	cb 01       	movw	r24, r22
     a96:	97 f9       	bld	r25, 7
     a98:	08 95       	ret

00000a9a <modf>:
     a9a:	fa 01       	movw	r30, r20
     a9c:	dc 01       	movw	r26, r24
     a9e:	aa 0f       	add	r26, r26
     aa0:	bb 1f       	adc	r27, r27
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	bf 57       	subi	r27, 0x7F	; 127
     aa8:	28 f4       	brcc	.+10     	; 0xab4 <modf+0x1a>
     aaa:	22 27       	eor	r18, r18
     aac:	33 27       	eor	r19, r19
     aae:	44 27       	eor	r20, r20
     ab0:	50 78       	andi	r21, 0x80	; 128
     ab2:	1f c0       	rjmp	.+62     	; 0xaf2 <modf+0x58>
     ab4:	b7 51       	subi	r27, 0x17	; 23
     ab6:	88 f4       	brcc	.+34     	; 0xada <modf+0x40>
     ab8:	ab 2f       	mov	r26, r27
     aba:	00 24       	eor	r0, r0
     abc:	46 95       	lsr	r20
     abe:	37 95       	ror	r19
     ac0:	27 95       	ror	r18
     ac2:	01 1c       	adc	r0, r1
     ac4:	a3 95       	inc	r26
     ac6:	d2 f3       	brmi	.-12     	; 0xabc <modf+0x22>
     ac8:	00 20       	and	r0, r0
     aca:	69 f0       	breq	.+26     	; 0xae6 <modf+0x4c>
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	44 1f       	adc	r20, r20
     ad2:	b3 95       	inc	r27
     ad4:	da f3       	brmi	.-10     	; 0xacc <modf+0x32>
     ad6:	0d d0       	rcall	.+26     	; 0xaf2 <modf+0x58>
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <__subsf3>
     ada:	61 30       	cpi	r22, 0x01	; 1
     adc:	71 05       	cpc	r23, r1
     ade:	a0 e8       	ldi	r26, 0x80	; 128
     ae0:	8a 07       	cpc	r24, r26
     ae2:	b9 46       	sbci	r27, 0x69	; 105
     ae4:	30 f4       	brcc	.+12     	; 0xaf2 <modf+0x58>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	66 27       	eor	r22, r22
     aec:	77 27       	eor	r23, r23
     aee:	88 27       	eor	r24, r24
     af0:	90 78       	andi	r25, 0x80	; 128
     af2:	30 96       	adiw	r30, 0x00	; 0
     af4:	21 f0       	breq	.+8      	; 0xafe <modf+0x64>
     af6:	20 83       	st	Z, r18
     af8:	31 83       	std	Z+1, r19	; 0x01
     afa:	42 83       	std	Z+2, r20	; 0x02
     afc:	53 83       	std	Z+3, r21	; 0x03
     afe:	08 95       	ret

00000b00 <__subsf3>:
     b00:	50 58       	subi	r21, 0x80	; 128

00000b02 <__addsf3>:
     b02:	bb 27       	eor	r27, r27
     b04:	aa 27       	eor	r26, r26
     b06:	0e d0       	rcall	.+28     	; 0xb24 <__addsf3x>
     b08:	77 c0       	rjmp	.+238    	; 0xbf8 <__fp_round>
     b0a:	68 d0       	rcall	.+208    	; 0xbdc <__fp_pscA>
     b0c:	30 f0       	brcs	.+12     	; 0xb1a <__addsf3+0x18>
     b0e:	6d d0       	rcall	.+218    	; 0xbea <__fp_pscB>
     b10:	20 f0       	brcs	.+8      	; 0xb1a <__addsf3+0x18>
     b12:	31 f4       	brne	.+12     	; 0xb20 <__addsf3+0x1e>
     b14:	9f 3f       	cpi	r25, 0xFF	; 255
     b16:	11 f4       	brne	.+4      	; 0xb1c <__addsf3+0x1a>
     b18:	1e f4       	brtc	.+6      	; 0xb20 <__addsf3+0x1e>
     b1a:	5d c0       	rjmp	.+186    	; 0xbd6 <__fp_nan>
     b1c:	0e f4       	brtc	.+2      	; 0xb20 <__addsf3+0x1e>
     b1e:	e0 95       	com	r30
     b20:	e7 fb       	bst	r30, 7
     b22:	53 c0       	rjmp	.+166    	; 0xbca <__fp_inf>

00000b24 <__addsf3x>:
     b24:	e9 2f       	mov	r30, r25
     b26:	90 df       	rcall	.-224    	; 0xa48 <__fp_split3>
     b28:	80 f3       	brcs	.-32     	; 0xb0a <__addsf3+0x8>
     b2a:	ba 17       	cp	r27, r26
     b2c:	62 07       	cpc	r22, r18
     b2e:	73 07       	cpc	r23, r19
     b30:	84 07       	cpc	r24, r20
     b32:	95 07       	cpc	r25, r21
     b34:	18 f0       	brcs	.+6      	; 0xb3c <__addsf3x+0x18>
     b36:	71 f4       	brne	.+28     	; 0xb54 <__addsf3x+0x30>
     b38:	9e f5       	brtc	.+102    	; 0xba0 <__addsf3x+0x7c>
     b3a:	a8 cf       	rjmp	.-176    	; 0xa8c <__fp_zero>
     b3c:	0e f4       	brtc	.+2      	; 0xb40 <__addsf3x+0x1c>
     b3e:	e0 95       	com	r30
     b40:	0b 2e       	mov	r0, r27
     b42:	ba 2f       	mov	r27, r26
     b44:	a0 2d       	mov	r26, r0
     b46:	0b 01       	movw	r0, r22
     b48:	b9 01       	movw	r22, r18
     b4a:	90 01       	movw	r18, r0
     b4c:	0c 01       	movw	r0, r24
     b4e:	ca 01       	movw	r24, r20
     b50:	a0 01       	movw	r20, r0
     b52:	11 24       	eor	r1, r1
     b54:	ff 27       	eor	r31, r31
     b56:	59 1b       	sub	r21, r25
     b58:	99 f0       	breq	.+38     	; 0xb80 <__addsf3x+0x5c>
     b5a:	59 3f       	cpi	r21, 0xF9	; 249
     b5c:	50 f4       	brcc	.+20     	; 0xb72 <__addsf3x+0x4e>
     b5e:	50 3e       	cpi	r21, 0xE0	; 224
     b60:	68 f1       	brcs	.+90     	; 0xbbc <__addsf3x+0x98>
     b62:	1a 16       	cp	r1, r26
     b64:	f0 40       	sbci	r31, 0x00	; 0
     b66:	a2 2f       	mov	r26, r18
     b68:	23 2f       	mov	r18, r19
     b6a:	34 2f       	mov	r19, r20
     b6c:	44 27       	eor	r20, r20
     b6e:	58 5f       	subi	r21, 0xF8	; 248
     b70:	f3 cf       	rjmp	.-26     	; 0xb58 <__addsf3x+0x34>
     b72:	46 95       	lsr	r20
     b74:	37 95       	ror	r19
     b76:	27 95       	ror	r18
     b78:	a7 95       	ror	r26
     b7a:	f0 40       	sbci	r31, 0x00	; 0
     b7c:	53 95       	inc	r21
     b7e:	c9 f7       	brne	.-14     	; 0xb72 <__addsf3x+0x4e>
     b80:	7e f4       	brtc	.+30     	; 0xba0 <__addsf3x+0x7c>
     b82:	1f 16       	cp	r1, r31
     b84:	ba 0b       	sbc	r27, r26
     b86:	62 0b       	sbc	r22, r18
     b88:	73 0b       	sbc	r23, r19
     b8a:	84 0b       	sbc	r24, r20
     b8c:	ba f0       	brmi	.+46     	; 0xbbc <__addsf3x+0x98>
     b8e:	91 50       	subi	r25, 0x01	; 1
     b90:	a1 f0       	breq	.+40     	; 0xbba <__addsf3x+0x96>
     b92:	ff 0f       	add	r31, r31
     b94:	bb 1f       	adc	r27, r27
     b96:	66 1f       	adc	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	88 1f       	adc	r24, r24
     b9c:	c2 f7       	brpl	.-16     	; 0xb8e <__addsf3x+0x6a>
     b9e:	0e c0       	rjmp	.+28     	; 0xbbc <__addsf3x+0x98>
     ba0:	ba 0f       	add	r27, r26
     ba2:	62 1f       	adc	r22, r18
     ba4:	73 1f       	adc	r23, r19
     ba6:	84 1f       	adc	r24, r20
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__addsf3x+0x98>
     baa:	87 95       	ror	r24
     bac:	77 95       	ror	r23
     bae:	67 95       	ror	r22
     bb0:	b7 95       	ror	r27
     bb2:	f7 95       	ror	r31
     bb4:	9e 3f       	cpi	r25, 0xFE	; 254
     bb6:	08 f0       	brcs	.+2      	; 0xbba <__addsf3x+0x96>
     bb8:	b3 cf       	rjmp	.-154    	; 0xb20 <__addsf3+0x1e>
     bba:	93 95       	inc	r25
     bbc:	88 0f       	add	r24, r24
     bbe:	08 f0       	brcs	.+2      	; 0xbc2 <__addsf3x+0x9e>
     bc0:	99 27       	eor	r25, r25
     bc2:	ee 0f       	add	r30, r30
     bc4:	97 95       	ror	r25
     bc6:	87 95       	ror	r24
     bc8:	08 95       	ret

00000bca <__fp_inf>:
     bca:	97 f9       	bld	r25, 7
     bcc:	9f 67       	ori	r25, 0x7F	; 127
     bce:	80 e8       	ldi	r24, 0x80	; 128
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	08 95       	ret

00000bd6 <__fp_nan>:
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	80 ec       	ldi	r24, 0xC0	; 192
     bda:	08 95       	ret

00000bdc <__fp_pscA>:
     bdc:	00 24       	eor	r0, r0
     bde:	0a 94       	dec	r0
     be0:	16 16       	cp	r1, r22
     be2:	17 06       	cpc	r1, r23
     be4:	18 06       	cpc	r1, r24
     be6:	09 06       	cpc	r0, r25
     be8:	08 95       	ret

00000bea <__fp_pscB>:
     bea:	00 24       	eor	r0, r0
     bec:	0a 94       	dec	r0
     bee:	12 16       	cp	r1, r18
     bf0:	13 06       	cpc	r1, r19
     bf2:	14 06       	cpc	r1, r20
     bf4:	05 06       	cpc	r0, r21
     bf6:	08 95       	ret

00000bf8 <__fp_round>:
     bf8:	09 2e       	mov	r0, r25
     bfa:	03 94       	inc	r0
     bfc:	00 0c       	add	r0, r0
     bfe:	11 f4       	brne	.+4      	; 0xc04 <__fp_round+0xc>
     c00:	88 23       	and	r24, r24
     c02:	52 f0       	brmi	.+20     	; 0xc18 <__fp_round+0x20>
     c04:	bb 0f       	add	r27, r27
     c06:	40 f4       	brcc	.+16     	; 0xc18 <__fp_round+0x20>
     c08:	bf 2b       	or	r27, r31
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__fp_round+0x18>
     c0c:	60 ff       	sbrs	r22, 0
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <__fp_round+0x20>
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	08 95       	ret

00000c1a <malloc>:
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	91 05       	cpc	r25, r1
     c22:	10 f4       	brcc	.+4      	; 0xc28 <malloc+0xe>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	e0 91 45 03 	lds	r30, 0x0345
     c2c:	f0 91 46 03 	lds	r31, 0x0346
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	30 97       	sbiw	r30, 0x00	; 0
     c3a:	39 f1       	breq	.+78     	; 0xc8a <malloc+0x70>
     c3c:	40 81       	ld	r20, Z
     c3e:	51 81       	ldd	r21, Z+1	; 0x01
     c40:	48 17       	cp	r20, r24
     c42:	59 07       	cpc	r21, r25
     c44:	b8 f0       	brcs	.+46     	; 0xc74 <malloc+0x5a>
     c46:	48 17       	cp	r20, r24
     c48:	59 07       	cpc	r21, r25
     c4a:	71 f4       	brne	.+28     	; 0xc68 <malloc+0x4e>
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	10 97       	sbiw	r26, 0x00	; 0
     c52:	29 f0       	breq	.+10     	; 0xc5e <malloc+0x44>
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	9c 93       	st	X, r25
     c58:	8e 93       	st	-X, r24
     c5a:	12 97       	sbiw	r26, 0x02	; 2
     c5c:	2c c0       	rjmp	.+88     	; 0xcb6 <malloc+0x9c>
     c5e:	90 93 46 03 	sts	0x0346, r25
     c62:	80 93 45 03 	sts	0x0345, r24
     c66:	27 c0       	rjmp	.+78     	; 0xcb6 <malloc+0x9c>
     c68:	21 15       	cp	r18, r1
     c6a:	31 05       	cpc	r19, r1
     c6c:	31 f0       	breq	.+12     	; 0xc7a <malloc+0x60>
     c6e:	42 17       	cp	r20, r18
     c70:	53 07       	cpc	r21, r19
     c72:	18 f0       	brcs	.+6      	; 0xc7a <malloc+0x60>
     c74:	a9 01       	movw	r20, r18
     c76:	db 01       	movw	r26, r22
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <malloc+0x62>
     c7a:	ef 01       	movw	r28, r30
     c7c:	9a 01       	movw	r18, r20
     c7e:	bd 01       	movw	r22, r26
     c80:	df 01       	movw	r26, r30
     c82:	02 80       	ldd	r0, Z+2	; 0x02
     c84:	f3 81       	ldd	r31, Z+3	; 0x03
     c86:	e0 2d       	mov	r30, r0
     c88:	d7 cf       	rjmp	.-82     	; 0xc38 <malloc+0x1e>
     c8a:	21 15       	cp	r18, r1
     c8c:	31 05       	cpc	r19, r1
     c8e:	f9 f0       	breq	.+62     	; 0xcce <malloc+0xb4>
     c90:	28 1b       	sub	r18, r24
     c92:	39 0b       	sbc	r19, r25
     c94:	24 30       	cpi	r18, 0x04	; 4
     c96:	31 05       	cpc	r19, r1
     c98:	80 f4       	brcc	.+32     	; 0xcba <malloc+0xa0>
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	61 15       	cp	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	21 f0       	breq	.+8      	; 0xcac <malloc+0x92>
     ca4:	fb 01       	movw	r30, r22
     ca6:	93 83       	std	Z+3, r25	; 0x03
     ca8:	82 83       	std	Z+2, r24	; 0x02
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <malloc+0x9a>
     cac:	90 93 46 03 	sts	0x0346, r25
     cb0:	80 93 45 03 	sts	0x0345, r24
     cb4:	fe 01       	movw	r30, r28
     cb6:	32 96       	adiw	r30, 0x02	; 2
     cb8:	44 c0       	rjmp	.+136    	; 0xd42 <malloc+0x128>
     cba:	fe 01       	movw	r30, r28
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	81 93       	st	Z+, r24
     cc2:	91 93       	st	Z+, r25
     cc4:	22 50       	subi	r18, 0x02	; 2
     cc6:	31 09       	sbc	r19, r1
     cc8:	39 83       	std	Y+1, r19	; 0x01
     cca:	28 83       	st	Y, r18
     ccc:	3a c0       	rjmp	.+116    	; 0xd42 <malloc+0x128>
     cce:	20 91 43 03 	lds	r18, 0x0343
     cd2:	30 91 44 03 	lds	r19, 0x0344
     cd6:	23 2b       	or	r18, r19
     cd8:	41 f4       	brne	.+16     	; 0xcea <malloc+0xd0>
     cda:	20 91 07 01 	lds	r18, 0x0107
     cde:	30 91 08 01 	lds	r19, 0x0108
     ce2:	30 93 44 03 	sts	0x0344, r19
     ce6:	20 93 43 03 	sts	0x0343, r18
     cea:	20 91 05 01 	lds	r18, 0x0105
     cee:	30 91 06 01 	lds	r19, 0x0106
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	41 f4       	brne	.+16     	; 0xd08 <malloc+0xee>
     cf8:	2d b7       	in	r18, 0x3d	; 61
     cfa:	3e b7       	in	r19, 0x3e	; 62
     cfc:	40 91 09 01 	lds	r20, 0x0109
     d00:	50 91 0a 01 	lds	r21, 0x010A
     d04:	24 1b       	sub	r18, r20
     d06:	35 0b       	sbc	r19, r21
     d08:	e0 91 43 03 	lds	r30, 0x0343
     d0c:	f0 91 44 03 	lds	r31, 0x0344
     d10:	e2 17       	cp	r30, r18
     d12:	f3 07       	cpc	r31, r19
     d14:	a0 f4       	brcc	.+40     	; 0xd3e <malloc+0x124>
     d16:	2e 1b       	sub	r18, r30
     d18:	3f 0b       	sbc	r19, r31
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	78 f0       	brcs	.+30     	; 0xd3e <malloc+0x124>
     d20:	ac 01       	movw	r20, r24
     d22:	4e 5f       	subi	r20, 0xFE	; 254
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	24 17       	cp	r18, r20
     d28:	35 07       	cpc	r19, r21
     d2a:	48 f0       	brcs	.+18     	; 0xd3e <malloc+0x124>
     d2c:	4e 0f       	add	r20, r30
     d2e:	5f 1f       	adc	r21, r31
     d30:	50 93 44 03 	sts	0x0344, r21
     d34:	40 93 43 03 	sts	0x0343, r20
     d38:	81 93       	st	Z+, r24
     d3a:	91 93       	st	Z+, r25
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <malloc+0x128>
     d3e:	e0 e0       	ldi	r30, 0x00	; 0
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	cf 01       	movw	r24, r30
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <free>:
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <free+0xa>
     d52:	87 c0       	rjmp	.+270    	; 0xe62 <free+0x118>
     d54:	fc 01       	movw	r30, r24
     d56:	32 97       	sbiw	r30, 0x02	; 2
     d58:	13 82       	std	Z+3, r1	; 0x03
     d5a:	12 82       	std	Z+2, r1	; 0x02
     d5c:	c0 91 45 03 	lds	r28, 0x0345
     d60:	d0 91 46 03 	lds	r29, 0x0346
     d64:	20 97       	sbiw	r28, 0x00	; 0
     d66:	81 f4       	brne	.+32     	; 0xd88 <free+0x3e>
     d68:	20 81       	ld	r18, Z
     d6a:	31 81       	ldd	r19, Z+1	; 0x01
     d6c:	28 0f       	add	r18, r24
     d6e:	39 1f       	adc	r19, r25
     d70:	80 91 43 03 	lds	r24, 0x0343
     d74:	90 91 44 03 	lds	r25, 0x0344
     d78:	82 17       	cp	r24, r18
     d7a:	93 07       	cpc	r25, r19
     d7c:	79 f5       	brne	.+94     	; 0xddc <free+0x92>
     d7e:	f0 93 44 03 	sts	0x0344, r31
     d82:	e0 93 43 03 	sts	0x0343, r30
     d86:	6d c0       	rjmp	.+218    	; 0xe62 <free+0x118>
     d88:	de 01       	movw	r26, r28
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	ae 17       	cp	r26, r30
     d90:	bf 07       	cpc	r27, r31
     d92:	50 f4       	brcc	.+20     	; 0xda8 <free+0x5e>
     d94:	12 96       	adiw	r26, 0x02	; 2
     d96:	4d 91       	ld	r20, X+
     d98:	5c 91       	ld	r21, X
     d9a:	13 97       	sbiw	r26, 0x03	; 3
     d9c:	9d 01       	movw	r18, r26
     d9e:	41 15       	cp	r20, r1
     da0:	51 05       	cpc	r21, r1
     da2:	09 f1       	breq	.+66     	; 0xde6 <free+0x9c>
     da4:	da 01       	movw	r26, r20
     da6:	f3 cf       	rjmp	.-26     	; 0xd8e <free+0x44>
     da8:	b3 83       	std	Z+3, r27	; 0x03
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	84 0f       	add	r24, r20
     db2:	95 1f       	adc	r25, r21
     db4:	8a 17       	cp	r24, r26
     db6:	9b 07       	cpc	r25, r27
     db8:	71 f4       	brne	.+28     	; 0xdd6 <free+0x8c>
     dba:	8d 91       	ld	r24, X+
     dbc:	9c 91       	ld	r25, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	84 0f       	add	r24, r20
     dc2:	95 1f       	adc	r25, r21
     dc4:	02 96       	adiw	r24, 0x02	; 2
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	93 83       	std	Z+3, r25	; 0x03
     dd4:	82 83       	std	Z+2, r24	; 0x02
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	29 f4       	brne	.+10     	; 0xde6 <free+0x9c>
     ddc:	f0 93 46 03 	sts	0x0346, r31
     de0:	e0 93 45 03 	sts	0x0345, r30
     de4:	3e c0       	rjmp	.+124    	; 0xe62 <free+0x118>
     de6:	d9 01       	movw	r26, r18
     de8:	13 96       	adiw	r26, 0x03	; 3
     dea:	fc 93       	st	X, r31
     dec:	ee 93       	st	-X, r30
     dee:	12 97       	sbiw	r26, 0x02	; 2
     df0:	4d 91       	ld	r20, X+
     df2:	5d 91       	ld	r21, X+
     df4:	a4 0f       	add	r26, r20
     df6:	b5 1f       	adc	r27, r21
     df8:	ea 17       	cp	r30, r26
     dfa:	fb 07       	cpc	r31, r27
     dfc:	79 f4       	brne	.+30     	; 0xe1c <free+0xd2>
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	84 0f       	add	r24, r20
     e04:	95 1f       	adc	r25, r21
     e06:	02 96       	adiw	r24, 0x02	; 2
     e08:	d9 01       	movw	r26, r18
     e0a:	11 96       	adiw	r26, 0x01	; 1
     e0c:	9c 93       	st	X, r25
     e0e:	8e 93       	st	-X, r24
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	12 97       	sbiw	r26, 0x02	; 2
     e1c:	e0 e0       	ldi	r30, 0x00	; 0
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	19 f0       	breq	.+6      	; 0xe2e <free+0xe4>
     e28:	fe 01       	movw	r30, r28
     e2a:	ec 01       	movw	r28, r24
     e2c:	f9 cf       	rjmp	.-14     	; 0xe20 <free+0xd6>
     e2e:	ce 01       	movw	r24, r28
     e30:	02 96       	adiw	r24, 0x02	; 2
     e32:	28 81       	ld	r18, Y
     e34:	39 81       	ldd	r19, Y+1	; 0x01
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	20 91 43 03 	lds	r18, 0x0343
     e3e:	30 91 44 03 	lds	r19, 0x0344
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	69 f4       	brne	.+26     	; 0xe62 <free+0x118>
     e48:	30 97       	sbiw	r30, 0x00	; 0
     e4a:	29 f4       	brne	.+10     	; 0xe56 <free+0x10c>
     e4c:	10 92 46 03 	sts	0x0346, r1
     e50:	10 92 45 03 	sts	0x0345, r1
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <free+0x110>
     e56:	13 82       	std	Z+3, r1	; 0x03
     e58:	12 82       	std	Z+2, r1	; 0x02
     e5a:	d0 93 44 03 	sts	0x0344, r29
     e5e:	c0 93 43 03 	sts	0x0343, r28
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <atoi>:
     e68:	fc 01       	movw	r30, r24
     e6a:	88 27       	eor	r24, r24
     e6c:	99 27       	eor	r25, r25
     e6e:	e8 94       	clt
     e70:	21 91       	ld	r18, Z+
     e72:	20 32       	cpi	r18, 0x20	; 32
     e74:	e9 f3       	breq	.-6      	; 0xe70 <atoi+0x8>
     e76:	29 30       	cpi	r18, 0x09	; 9
     e78:	10 f0       	brcs	.+4      	; 0xe7e <atoi+0x16>
     e7a:	2e 30       	cpi	r18, 0x0E	; 14
     e7c:	c8 f3       	brcs	.-14     	; 0xe70 <atoi+0x8>
     e7e:	2b 32       	cpi	r18, 0x2B	; 43
     e80:	41 f0       	breq	.+16     	; 0xe92 <atoi+0x2a>
     e82:	2d 32       	cpi	r18, 0x2D	; 45
     e84:	39 f4       	brne	.+14     	; 0xe94 <atoi+0x2c>
     e86:	68 94       	set
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <atoi+0x2a>
     e8a:	0e 94 52 07 	call	0xea4	; 0xea4 <__mulhi_const_10>
     e8e:	82 0f       	add	r24, r18
     e90:	91 1d       	adc	r25, r1
     e92:	21 91       	ld	r18, Z+
     e94:	20 53       	subi	r18, 0x30	; 48
     e96:	2a 30       	cpi	r18, 0x0A	; 10
     e98:	c0 f3       	brcs	.-16     	; 0xe8a <atoi+0x22>
     e9a:	1e f4       	brtc	.+6      	; 0xea2 <atoi+0x3a>
     e9c:	90 95       	com	r25
     e9e:	81 95       	neg	r24
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	08 95       	ret

00000ea4 <__mulhi_const_10>:
     ea4:	7a e0       	ldi	r23, 0x0A	; 10
     ea6:	97 9f       	mul	r25, r23
     ea8:	90 2d       	mov	r25, r0
     eaa:	87 9f       	mul	r24, r23
     eac:	80 2d       	mov	r24, r0
     eae:	91 0d       	add	r25, r1
     eb0:	11 24       	eor	r1, r1
     eb2:	08 95       	ret

00000eb4 <sprintf>:
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	2e 97       	sbiw	r28, 0x0e	; 14
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	0d 89       	ldd	r16, Y+21	; 0x15
     ece:	1e 89       	ldd	r17, Y+22	; 0x16
     ed0:	86 e0       	ldi	r24, 0x06	; 6
     ed2:	8c 83       	std	Y+4, r24	; 0x04
     ed4:	1a 83       	std	Y+2, r17	; 0x02
     ed6:	09 83       	std	Y+1, r16	; 0x01
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	9f e7       	ldi	r25, 0x7F	; 127
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	ae 01       	movw	r20, r28
     ee2:	47 5e       	subi	r20, 0xE7	; 231
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	6f 89       	ldd	r22, Y+23	; 0x17
     ee8:	78 8d       	ldd	r23, Y+24	; 0x18
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	0e 94 89 07 	call	0xf12	; 0xf12 <vfprintf>
     ef2:	ef 81       	ldd	r30, Y+7	; 0x07
     ef4:	f8 85       	ldd	r31, Y+8	; 0x08
     ef6:	e0 0f       	add	r30, r16
     ef8:	f1 1f       	adc	r31, r17
     efa:	10 82       	st	Z, r1
     efc:	2e 96       	adiw	r28, 0x0e	; 14
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <vfprintf>:
     f12:	2f 92       	push	r2
     f14:	3f 92       	push	r3
     f16:	4f 92       	push	r4
     f18:	5f 92       	push	r5
     f1a:	6f 92       	push	r6
     f1c:	7f 92       	push	r7
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	2c 97       	sbiw	r28, 0x0c	; 12
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	7c 01       	movw	r14, r24
     f48:	6b 01       	movw	r12, r22
     f4a:	8a 01       	movw	r16, r20
     f4c:	fc 01       	movw	r30, r24
     f4e:	17 82       	std	Z+7, r1	; 0x07
     f50:	16 82       	std	Z+6, r1	; 0x06
     f52:	83 81       	ldd	r24, Z+3	; 0x03
     f54:	81 ff       	sbrs	r24, 1
     f56:	bd c1       	rjmp	.+890    	; 0x12d2 <vfprintf+0x3c0>
     f58:	ce 01       	movw	r24, r28
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	4c 01       	movw	r8, r24
     f5e:	f7 01       	movw	r30, r14
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	f6 01       	movw	r30, r12
     f64:	93 fd       	sbrc	r25, 3
     f66:	85 91       	lpm	r24, Z+
     f68:	93 ff       	sbrs	r25, 3
     f6a:	81 91       	ld	r24, Z+
     f6c:	6f 01       	movw	r12, r30
     f6e:	88 23       	and	r24, r24
     f70:	09 f4       	brne	.+2      	; 0xf74 <vfprintf+0x62>
     f72:	ab c1       	rjmp	.+854    	; 0x12ca <vfprintf+0x3b8>
     f74:	85 32       	cpi	r24, 0x25	; 37
     f76:	39 f4       	brne	.+14     	; 0xf86 <vfprintf+0x74>
     f78:	93 fd       	sbrc	r25, 3
     f7a:	85 91       	lpm	r24, Z+
     f7c:	93 ff       	sbrs	r25, 3
     f7e:	81 91       	ld	r24, Z+
     f80:	6f 01       	movw	r12, r30
     f82:	85 32       	cpi	r24, 0x25	; 37
     f84:	29 f4       	brne	.+10     	; 0xf90 <vfprintf+0x7e>
     f86:	b7 01       	movw	r22, r14
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
     f8e:	e7 cf       	rjmp	.-50     	; 0xf5e <vfprintf+0x4c>
     f90:	51 2c       	mov	r5, r1
     f92:	31 2c       	mov	r3, r1
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	20 32       	cpi	r18, 0x20	; 32
     f98:	a0 f4       	brcc	.+40     	; 0xfc2 <vfprintf+0xb0>
     f9a:	8b 32       	cpi	r24, 0x2B	; 43
     f9c:	69 f0       	breq	.+26     	; 0xfb8 <vfprintf+0xa6>
     f9e:	30 f4       	brcc	.+12     	; 0xfac <vfprintf+0x9a>
     fa0:	80 32       	cpi	r24, 0x20	; 32
     fa2:	59 f0       	breq	.+22     	; 0xfba <vfprintf+0xa8>
     fa4:	83 32       	cpi	r24, 0x23	; 35
     fa6:	69 f4       	brne	.+26     	; 0xfc2 <vfprintf+0xb0>
     fa8:	20 61       	ori	r18, 0x10	; 16
     faa:	2c c0       	rjmp	.+88     	; 0x1004 <vfprintf+0xf2>
     fac:	8d 32       	cpi	r24, 0x2D	; 45
     fae:	39 f0       	breq	.+14     	; 0xfbe <vfprintf+0xac>
     fb0:	80 33       	cpi	r24, 0x30	; 48
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <vfprintf+0xb0>
     fb4:	21 60       	ori	r18, 0x01	; 1
     fb6:	26 c0       	rjmp	.+76     	; 0x1004 <vfprintf+0xf2>
     fb8:	22 60       	ori	r18, 0x02	; 2
     fba:	24 60       	ori	r18, 0x04	; 4
     fbc:	23 c0       	rjmp	.+70     	; 0x1004 <vfprintf+0xf2>
     fbe:	28 60       	ori	r18, 0x08	; 8
     fc0:	21 c0       	rjmp	.+66     	; 0x1004 <vfprintf+0xf2>
     fc2:	27 fd       	sbrc	r18, 7
     fc4:	27 c0       	rjmp	.+78     	; 0x1014 <vfprintf+0x102>
     fc6:	30 ed       	ldi	r19, 0xD0	; 208
     fc8:	38 0f       	add	r19, r24
     fca:	3a 30       	cpi	r19, 0x0A	; 10
     fcc:	78 f4       	brcc	.+30     	; 0xfec <vfprintf+0xda>
     fce:	26 ff       	sbrs	r18, 6
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <vfprintf+0xcc>
     fd2:	fa e0       	ldi	r31, 0x0A	; 10
     fd4:	5f 9e       	mul	r5, r31
     fd6:	30 0d       	add	r19, r0
     fd8:	11 24       	eor	r1, r1
     fda:	53 2e       	mov	r5, r19
     fdc:	13 c0       	rjmp	.+38     	; 0x1004 <vfprintf+0xf2>
     fde:	8a e0       	ldi	r24, 0x0A	; 10
     fe0:	38 9e       	mul	r3, r24
     fe2:	30 0d       	add	r19, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	33 2e       	mov	r3, r19
     fe8:	20 62       	ori	r18, 0x20	; 32
     fea:	0c c0       	rjmp	.+24     	; 0x1004 <vfprintf+0xf2>
     fec:	8e 32       	cpi	r24, 0x2E	; 46
     fee:	21 f4       	brne	.+8      	; 0xff8 <vfprintf+0xe6>
     ff0:	26 fd       	sbrc	r18, 6
     ff2:	6b c1       	rjmp	.+726    	; 0x12ca <vfprintf+0x3b8>
     ff4:	20 64       	ori	r18, 0x40	; 64
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0xf2>
     ff8:	8c 36       	cpi	r24, 0x6C	; 108
     ffa:	11 f4       	brne	.+4      	; 0x1000 <vfprintf+0xee>
     ffc:	20 68       	ori	r18, 0x80	; 128
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <vfprintf+0xf2>
    1000:	88 36       	cpi	r24, 0x68	; 104
    1002:	41 f4       	brne	.+16     	; 0x1014 <vfprintf+0x102>
    1004:	f6 01       	movw	r30, r12
    1006:	93 fd       	sbrc	r25, 3
    1008:	85 91       	lpm	r24, Z+
    100a:	93 ff       	sbrs	r25, 3
    100c:	81 91       	ld	r24, Z+
    100e:	6f 01       	movw	r12, r30
    1010:	81 11       	cpse	r24, r1
    1012:	c1 cf       	rjmp	.-126    	; 0xf96 <vfprintf+0x84>
    1014:	98 2f       	mov	r25, r24
    1016:	9f 7d       	andi	r25, 0xDF	; 223
    1018:	95 54       	subi	r25, 0x45	; 69
    101a:	93 30       	cpi	r25, 0x03	; 3
    101c:	28 f4       	brcc	.+10     	; 0x1028 <vfprintf+0x116>
    101e:	0c 5f       	subi	r16, 0xFC	; 252
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	ff e3       	ldi	r31, 0x3F	; 63
    1024:	f9 83       	std	Y+1, r31	; 0x01
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <vfprintf+0x130>
    1028:	83 36       	cpi	r24, 0x63	; 99
    102a:	31 f0       	breq	.+12     	; 0x1038 <vfprintf+0x126>
    102c:	83 37       	cpi	r24, 0x73	; 115
    102e:	71 f0       	breq	.+28     	; 0x104c <vfprintf+0x13a>
    1030:	83 35       	cpi	r24, 0x53	; 83
    1032:	09 f0       	breq	.+2      	; 0x1036 <vfprintf+0x124>
    1034:	5b c0       	rjmp	.+182    	; 0x10ec <vfprintf+0x1da>
    1036:	22 c0       	rjmp	.+68     	; 0x107c <vfprintf+0x16a>
    1038:	f8 01       	movw	r30, r16
    103a:	80 81       	ld	r24, Z
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	0e 5f       	subi	r16, 0xFE	; 254
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	44 24       	eor	r4, r4
    1044:	43 94       	inc	r4
    1046:	51 2c       	mov	r5, r1
    1048:	54 01       	movw	r10, r8
    104a:	15 c0       	rjmp	.+42     	; 0x1076 <vfprintf+0x164>
    104c:	38 01       	movw	r6, r16
    104e:	f2 e0       	ldi	r31, 0x02	; 2
    1050:	6f 0e       	add	r6, r31
    1052:	71 1c       	adc	r7, r1
    1054:	f8 01       	movw	r30, r16
    1056:	a0 80       	ld	r10, Z
    1058:	b1 80       	ldd	r11, Z+1	; 0x01
    105a:	26 ff       	sbrs	r18, 6
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <vfprintf+0x152>
    105e:	65 2d       	mov	r22, r5
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <vfprintf+0x156>
    1064:	6f ef       	ldi	r22, 0xFF	; 255
    1066:	7f ef       	ldi	r23, 0xFF	; 255
    1068:	c5 01       	movw	r24, r10
    106a:	2c 87       	std	Y+12, r18	; 0x0c
    106c:	0e 94 bb 09 	call	0x1376	; 0x1376 <strnlen>
    1070:	2c 01       	movw	r4, r24
    1072:	83 01       	movw	r16, r6
    1074:	2c 85       	ldd	r18, Y+12	; 0x0c
    1076:	2f 77       	andi	r18, 0x7F	; 127
    1078:	22 2e       	mov	r2, r18
    107a:	17 c0       	rjmp	.+46     	; 0x10aa <vfprintf+0x198>
    107c:	38 01       	movw	r6, r16
    107e:	f2 e0       	ldi	r31, 0x02	; 2
    1080:	6f 0e       	add	r6, r31
    1082:	71 1c       	adc	r7, r1
    1084:	f8 01       	movw	r30, r16
    1086:	a0 80       	ld	r10, Z
    1088:	b1 80       	ldd	r11, Z+1	; 0x01
    108a:	26 ff       	sbrs	r18, 6
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <vfprintf+0x182>
    108e:	65 2d       	mov	r22, r5
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <vfprintf+0x186>
    1094:	6f ef       	ldi	r22, 0xFF	; 255
    1096:	7f ef       	ldi	r23, 0xFF	; 255
    1098:	c5 01       	movw	r24, r10
    109a:	2c 87       	std	Y+12, r18	; 0x0c
    109c:	0e 94 b0 09 	call	0x1360	; 0x1360 <strnlen_P>
    10a0:	2c 01       	movw	r4, r24
    10a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a4:	20 68       	ori	r18, 0x80	; 128
    10a6:	22 2e       	mov	r2, r18
    10a8:	83 01       	movw	r16, r6
    10aa:	23 fc       	sbrc	r2, 3
    10ac:	1b c0       	rjmp	.+54     	; 0x10e4 <vfprintf+0x1d2>
    10ae:	83 2d       	mov	r24, r3
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	48 16       	cp	r4, r24
    10b4:	59 06       	cpc	r5, r25
    10b6:	b0 f4       	brcc	.+44     	; 0x10e4 <vfprintf+0x1d2>
    10b8:	b7 01       	movw	r22, r14
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    10c2:	3a 94       	dec	r3
    10c4:	f4 cf       	rjmp	.-24     	; 0x10ae <vfprintf+0x19c>
    10c6:	f5 01       	movw	r30, r10
    10c8:	27 fc       	sbrc	r2, 7
    10ca:	85 91       	lpm	r24, Z+
    10cc:	27 fe       	sbrs	r2, 7
    10ce:	81 91       	ld	r24, Z+
    10d0:	5f 01       	movw	r10, r30
    10d2:	b7 01       	movw	r22, r14
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    10da:	31 10       	cpse	r3, r1
    10dc:	3a 94       	dec	r3
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	4f 1a       	sub	r4, r31
    10e2:	51 08       	sbc	r5, r1
    10e4:	41 14       	cp	r4, r1
    10e6:	51 04       	cpc	r5, r1
    10e8:	71 f7       	brne	.-36     	; 0x10c6 <vfprintf+0x1b4>
    10ea:	e5 c0       	rjmp	.+458    	; 0x12b6 <vfprintf+0x3a4>
    10ec:	84 36       	cpi	r24, 0x64	; 100
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <vfprintf+0x1e2>
    10f0:	89 36       	cpi	r24, 0x69	; 105
    10f2:	39 f5       	brne	.+78     	; 0x1142 <vfprintf+0x230>
    10f4:	f8 01       	movw	r30, r16
    10f6:	27 ff       	sbrs	r18, 7
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <vfprintf+0x1f6>
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	0c 5f       	subi	r16, 0xFC	; 252
    1104:	1f 4f       	sbci	r17, 0xFF	; 255
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <vfprintf+0x206>
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	88 27       	eor	r24, r24
    110e:	77 fd       	sbrc	r23, 7
    1110:	80 95       	com	r24
    1112:	98 2f       	mov	r25, r24
    1114:	0e 5f       	subi	r16, 0xFE	; 254
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	2f 76       	andi	r18, 0x6F	; 111
    111a:	b2 2e       	mov	r11, r18
    111c:	97 ff       	sbrs	r25, 7
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <vfprintf+0x220>
    1120:	90 95       	com	r25
    1122:	80 95       	com	r24
    1124:	70 95       	com	r23
    1126:	61 95       	neg	r22
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	20 68       	ori	r18, 0x80	; 128
    1130:	b2 2e       	mov	r11, r18
    1132:	2a e0       	ldi	r18, 0x0A	; 10
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	a4 01       	movw	r20, r8
    1138:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__ultoa_invert>
    113c:	a8 2e       	mov	r10, r24
    113e:	a8 18       	sub	r10, r8
    1140:	44 c0       	rjmp	.+136    	; 0x11ca <vfprintf+0x2b8>
    1142:	85 37       	cpi	r24, 0x75	; 117
    1144:	29 f4       	brne	.+10     	; 0x1150 <vfprintf+0x23e>
    1146:	2f 7e       	andi	r18, 0xEF	; 239
    1148:	b2 2e       	mov	r11, r18
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	25 c0       	rjmp	.+74     	; 0x119a <vfprintf+0x288>
    1150:	f2 2f       	mov	r31, r18
    1152:	f9 7f       	andi	r31, 0xF9	; 249
    1154:	bf 2e       	mov	r11, r31
    1156:	8f 36       	cpi	r24, 0x6F	; 111
    1158:	c1 f0       	breq	.+48     	; 0x118a <vfprintf+0x278>
    115a:	18 f4       	brcc	.+6      	; 0x1162 <vfprintf+0x250>
    115c:	88 35       	cpi	r24, 0x58	; 88
    115e:	79 f0       	breq	.+30     	; 0x117e <vfprintf+0x26c>
    1160:	b4 c0       	rjmp	.+360    	; 0x12ca <vfprintf+0x3b8>
    1162:	80 37       	cpi	r24, 0x70	; 112
    1164:	19 f0       	breq	.+6      	; 0x116c <vfprintf+0x25a>
    1166:	88 37       	cpi	r24, 0x78	; 120
    1168:	21 f0       	breq	.+8      	; 0x1172 <vfprintf+0x260>
    116a:	af c0       	rjmp	.+350    	; 0x12ca <vfprintf+0x3b8>
    116c:	2f 2f       	mov	r18, r31
    116e:	20 61       	ori	r18, 0x10	; 16
    1170:	b2 2e       	mov	r11, r18
    1172:	b4 fe       	sbrs	r11, 4
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <vfprintf+0x27e>
    1176:	8b 2d       	mov	r24, r11
    1178:	84 60       	ori	r24, 0x04	; 4
    117a:	b8 2e       	mov	r11, r24
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <vfprintf+0x27e>
    117e:	24 ff       	sbrs	r18, 4
    1180:	0a c0       	rjmp	.+20     	; 0x1196 <vfprintf+0x284>
    1182:	9f 2f       	mov	r25, r31
    1184:	96 60       	ori	r25, 0x06	; 6
    1186:	b9 2e       	mov	r11, r25
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <vfprintf+0x284>
    118a:	28 e0       	ldi	r18, 0x08	; 8
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <vfprintf+0x288>
    1190:	20 e1       	ldi	r18, 0x10	; 16
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	02 c0       	rjmp	.+4      	; 0x119a <vfprintf+0x288>
    1196:	20 e1       	ldi	r18, 0x10	; 16
    1198:	32 e0       	ldi	r19, 0x02	; 2
    119a:	f8 01       	movw	r30, r16
    119c:	b7 fe       	sbrs	r11, 7
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <vfprintf+0x29c>
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	0c 5f       	subi	r16, 0xFC	; 252
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <vfprintf+0x2a8>
    11ae:	60 81       	ld	r22, Z
    11b0:	71 81       	ldd	r23, Z+1	; 0x01
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 5f       	subi	r16, 0xFE	; 254
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ba:	a4 01       	movw	r20, r8
    11bc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__ultoa_invert>
    11c0:	a8 2e       	mov	r10, r24
    11c2:	a8 18       	sub	r10, r8
    11c4:	fb 2d       	mov	r31, r11
    11c6:	ff 77       	andi	r31, 0x7F	; 127
    11c8:	bf 2e       	mov	r11, r31
    11ca:	b6 fe       	sbrs	r11, 6
    11cc:	0b c0       	rjmp	.+22     	; 0x11e4 <vfprintf+0x2d2>
    11ce:	2b 2d       	mov	r18, r11
    11d0:	2e 7f       	andi	r18, 0xFE	; 254
    11d2:	a5 14       	cp	r10, r5
    11d4:	50 f4       	brcc	.+20     	; 0x11ea <vfprintf+0x2d8>
    11d6:	b4 fe       	sbrs	r11, 4
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <vfprintf+0x2dc>
    11da:	b2 fc       	sbrc	r11, 2
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <vfprintf+0x2dc>
    11de:	2b 2d       	mov	r18, r11
    11e0:	2e 7e       	andi	r18, 0xEE	; 238
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <vfprintf+0x2dc>
    11e4:	7a 2c       	mov	r7, r10
    11e6:	2b 2d       	mov	r18, r11
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <vfprintf+0x2de>
    11ea:	7a 2c       	mov	r7, r10
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <vfprintf+0x2de>
    11ee:	75 2c       	mov	r7, r5
    11f0:	24 ff       	sbrs	r18, 4
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <vfprintf+0x2fc>
    11f4:	fe 01       	movw	r30, r28
    11f6:	ea 0d       	add	r30, r10
    11f8:	f1 1d       	adc	r31, r1
    11fa:	80 81       	ld	r24, Z
    11fc:	80 33       	cpi	r24, 0x30	; 48
    11fe:	11 f4       	brne	.+4      	; 0x1204 <vfprintf+0x2f2>
    1200:	29 7e       	andi	r18, 0xE9	; 233
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <vfprintf+0x304>
    1204:	22 ff       	sbrs	r18, 2
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <vfprintf+0x302>
    1208:	73 94       	inc	r7
    120a:	73 94       	inc	r7
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <vfprintf+0x304>
    120e:	82 2f       	mov	r24, r18
    1210:	86 78       	andi	r24, 0x86	; 134
    1212:	09 f0       	breq	.+2      	; 0x1216 <vfprintf+0x304>
    1214:	73 94       	inc	r7
    1216:	23 fd       	sbrc	r18, 3
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <vfprintf+0x32e>
    121a:	20 ff       	sbrs	r18, 0
    121c:	06 c0       	rjmp	.+12     	; 0x122a <vfprintf+0x318>
    121e:	5a 2c       	mov	r5, r10
    1220:	73 14       	cp	r7, r3
    1222:	18 f4       	brcc	.+6      	; 0x122a <vfprintf+0x318>
    1224:	53 0c       	add	r5, r3
    1226:	57 18       	sub	r5, r7
    1228:	73 2c       	mov	r7, r3
    122a:	73 14       	cp	r7, r3
    122c:	68 f4       	brcc	.+26     	; 0x1248 <vfprintf+0x336>
    122e:	b7 01       	movw	r22, r14
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	2c 87       	std	Y+12, r18	; 0x0c
    1236:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    123a:	73 94       	inc	r7
    123c:	2c 85       	ldd	r18, Y+12	; 0x0c
    123e:	f5 cf       	rjmp	.-22     	; 0x122a <vfprintf+0x318>
    1240:	73 14       	cp	r7, r3
    1242:	10 f4       	brcc	.+4      	; 0x1248 <vfprintf+0x336>
    1244:	37 18       	sub	r3, r7
    1246:	01 c0       	rjmp	.+2      	; 0x124a <vfprintf+0x338>
    1248:	31 2c       	mov	r3, r1
    124a:	24 ff       	sbrs	r18, 4
    124c:	12 c0       	rjmp	.+36     	; 0x1272 <vfprintf+0x360>
    124e:	b7 01       	movw	r22, r14
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	2c 87       	std	Y+12, r18	; 0x0c
    1256:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    125a:	2c 85       	ldd	r18, Y+12	; 0x0c
    125c:	22 ff       	sbrs	r18, 2
    125e:	17 c0       	rjmp	.+46     	; 0x128e <vfprintf+0x37c>
    1260:	21 ff       	sbrs	r18, 1
    1262:	03 c0       	rjmp	.+6      	; 0x126a <vfprintf+0x358>
    1264:	88 e5       	ldi	r24, 0x58	; 88
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <vfprintf+0x35c>
    126a:	88 e7       	ldi	r24, 0x78	; 120
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	b7 01       	movw	r22, r14
    1270:	0c c0       	rjmp	.+24     	; 0x128a <vfprintf+0x378>
    1272:	82 2f       	mov	r24, r18
    1274:	86 78       	andi	r24, 0x86	; 134
    1276:	59 f0       	breq	.+22     	; 0x128e <vfprintf+0x37c>
    1278:	21 fd       	sbrc	r18, 1
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x36e>
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <vfprintf+0x370>
    1280:	8b e2       	ldi	r24, 0x2B	; 43
    1282:	27 fd       	sbrc	r18, 7
    1284:	8d e2       	ldi	r24, 0x2D	; 45
    1286:	b7 01       	movw	r22, r14
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    128e:	a5 14       	cp	r10, r5
    1290:	38 f4       	brcc	.+14     	; 0x12a0 <vfprintf+0x38e>
    1292:	b7 01       	movw	r22, r14
    1294:	80 e3       	ldi	r24, 0x30	; 48
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    129c:	5a 94       	dec	r5
    129e:	f7 cf       	rjmp	.-18     	; 0x128e <vfprintf+0x37c>
    12a0:	aa 94       	dec	r10
    12a2:	f4 01       	movw	r30, r8
    12a4:	ea 0d       	add	r30, r10
    12a6:	f1 1d       	adc	r31, r1
    12a8:	80 81       	ld	r24, Z
    12aa:	b7 01       	movw	r22, r14
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    12b2:	a1 10       	cpse	r10, r1
    12b4:	f5 cf       	rjmp	.-22     	; 0x12a0 <vfprintf+0x38e>
    12b6:	33 20       	and	r3, r3
    12b8:	09 f4       	brne	.+2      	; 0x12bc <vfprintf+0x3aa>
    12ba:	51 ce       	rjmp	.-862    	; 0xf5e <vfprintf+0x4c>
    12bc:	b7 01       	movw	r22, r14
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 c6 09 	call	0x138c	; 0x138c <fputc>
    12c6:	3a 94       	dec	r3
    12c8:	f6 cf       	rjmp	.-20     	; 0x12b6 <vfprintf+0x3a4>
    12ca:	f7 01       	movw	r30, r14
    12cc:	86 81       	ldd	r24, Z+6	; 0x06
    12ce:	97 81       	ldd	r25, Z+7	; 0x07
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0x3c4>
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
    12d6:	2c 96       	adiw	r28, 0x0c	; 12
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	9f 90       	pop	r9
    12f8:	8f 90       	pop	r8
    12fa:	7f 90       	pop	r7
    12fc:	6f 90       	pop	r6
    12fe:	5f 90       	pop	r5
    1300:	4f 90       	pop	r4
    1302:	3f 90       	pop	r3
    1304:	2f 90       	pop	r2
    1306:	08 95       	ret

00001308 <__eerd_block_m1284p>:
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22

0000130c <__eerd_blraw_m1284p>:
    130c:	fc 01       	movw	r30, r24
    130e:	f9 99       	sbic	0x1f, 1	; 31
    1310:	fe cf       	rjmp	.-4      	; 0x130e <__eerd_blraw_m1284p+0x2>
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <__eerd_blraw_m1284p+0x14>
    1314:	f2 bd       	out	0x22, r31	; 34
    1316:	e1 bd       	out	0x21, r30	; 33
    1318:	f8 9a       	sbi	0x1f, 0	; 31
    131a:	31 96       	adiw	r30, 0x01	; 1
    131c:	00 b4       	in	r0, 0x20	; 32
    131e:	0d 92       	st	X+, r0
    1320:	41 50       	subi	r20, 0x01	; 1
    1322:	50 40       	sbci	r21, 0x00	; 0
    1324:	b8 f7       	brcc	.-18     	; 0x1314 <__eerd_blraw_m1284p+0x8>
    1326:	08 95       	ret

00001328 <__eerd_byte_m1284p>:
    1328:	f9 99       	sbic	0x1f, 1	; 31
    132a:	fe cf       	rjmp	.-4      	; 0x1328 <__eerd_byte_m1284p>
    132c:	92 bd       	out	0x22, r25	; 34
    132e:	81 bd       	out	0x21, r24	; 33
    1330:	f8 9a       	sbi	0x1f, 0	; 31
    1332:	99 27       	eor	r25, r25
    1334:	80 b5       	in	r24, 0x20	; 32
    1336:	08 95       	ret

00001338 <__eerd_dword_m1284p>:
    1338:	a6 e1       	ldi	r26, 0x16	; 22
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	44 e0       	ldi	r20, 0x04	; 4
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	0c 94 86 09 	jmp	0x130c	; 0x130c <__eerd_blraw_m1284p>

00001344 <__eewr_byte_m1284p>:
    1344:	26 2f       	mov	r18, r22

00001346 <__eewr_r18_m1284p>:
    1346:	f9 99       	sbic	0x1f, 1	; 31
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <__eewr_r18_m1284p>
    134a:	1f ba       	out	0x1f, r1	; 31
    134c:	92 bd       	out	0x22, r25	; 34
    134e:	81 bd       	out	0x21, r24	; 33
    1350:	20 bd       	out	0x20, r18	; 32
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	fa 9a       	sbi	0x1f, 2	; 31
    1358:	f9 9a       	sbi	0x1f, 1	; 31
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	08 95       	ret

00001360 <strnlen_P>:
    1360:	fc 01       	movw	r30, r24
    1362:	05 90       	lpm	r0, Z+
    1364:	61 50       	subi	r22, 0x01	; 1
    1366:	70 40       	sbci	r23, 0x00	; 0
    1368:	01 10       	cpse	r0, r1
    136a:	d8 f7       	brcc	.-10     	; 0x1362 <strnlen_P+0x2>
    136c:	80 95       	com	r24
    136e:	90 95       	com	r25
    1370:	8e 0f       	add	r24, r30
    1372:	9f 1f       	adc	r25, r31
    1374:	08 95       	ret

00001376 <strnlen>:
    1376:	fc 01       	movw	r30, r24
    1378:	61 50       	subi	r22, 0x01	; 1
    137a:	70 40       	sbci	r23, 0x00	; 0
    137c:	01 90       	ld	r0, Z+
    137e:	01 10       	cpse	r0, r1
    1380:	d8 f7       	brcc	.-10     	; 0x1378 <strnlen+0x2>
    1382:	80 95       	com	r24
    1384:	90 95       	com	r25
    1386:	8e 0f       	add	r24, r30
    1388:	9f 1f       	adc	r25, r31
    138a:	08 95       	ret

0000138c <fputc>:
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	18 2f       	mov	r17, r24
    1396:	09 2f       	mov	r16, r25
    1398:	eb 01       	movw	r28, r22
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 fd       	sbrc	r24, 1
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <fputc+0x1a>
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	20 c0       	rjmp	.+64     	; 0x13e6 <fputc+0x5a>
    13a6:	82 ff       	sbrs	r24, 2
    13a8:	10 c0       	rjmp	.+32     	; 0x13ca <fputc+0x3e>
    13aa:	4e 81       	ldd	r20, Y+6	; 0x06
    13ac:	5f 81       	ldd	r21, Y+7	; 0x07
    13ae:	2c 81       	ldd	r18, Y+4	; 0x04
    13b0:	3d 81       	ldd	r19, Y+5	; 0x05
    13b2:	42 17       	cp	r20, r18
    13b4:	53 07       	cpc	r21, r19
    13b6:	7c f4       	brge	.+30     	; 0x13d6 <fputc+0x4a>
    13b8:	e8 81       	ld	r30, Y
    13ba:	f9 81       	ldd	r31, Y+1	; 0x01
    13bc:	9f 01       	movw	r18, r30
    13be:	2f 5f       	subi	r18, 0xFF	; 255
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	39 83       	std	Y+1, r19	; 0x01
    13c4:	28 83       	st	Y, r18
    13c6:	10 83       	st	Z, r17
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <fputc+0x4a>
    13ca:	e8 85       	ldd	r30, Y+8	; 0x08
    13cc:	f9 85       	ldd	r31, Y+9	; 0x09
    13ce:	81 2f       	mov	r24, r17
    13d0:	09 95       	icall
    13d2:	89 2b       	or	r24, r25
    13d4:	29 f7       	brne	.-54     	; 0x13a0 <fputc+0x14>
    13d6:	2e 81       	ldd	r18, Y+6	; 0x06
    13d8:	3f 81       	ldd	r19, Y+7	; 0x07
    13da:	2f 5f       	subi	r18, 0xFF	; 255
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	3f 83       	std	Y+7, r19	; 0x07
    13e0:	2e 83       	std	Y+6, r18	; 0x06
    13e2:	81 2f       	mov	r24, r17
    13e4:	90 2f       	mov	r25, r16
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <__ultoa_invert>:
    13f0:	fa 01       	movw	r30, r20
    13f2:	aa 27       	eor	r26, r26
    13f4:	28 30       	cpi	r18, 0x08	; 8
    13f6:	51 f1       	breq	.+84     	; 0x144c <__ultoa_invert+0x5c>
    13f8:	20 31       	cpi	r18, 0x10	; 16
    13fa:	81 f1       	breq	.+96     	; 0x145c <__ultoa_invert+0x6c>
    13fc:	e8 94       	clt
    13fe:	6f 93       	push	r22
    1400:	6e 7f       	andi	r22, 0xFE	; 254
    1402:	6e 5f       	subi	r22, 0xFE	; 254
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	af 4f       	sbci	r26, 0xFF	; 255
    140c:	b1 e0       	ldi	r27, 0x01	; 1
    140e:	3e d0       	rcall	.+124    	; 0x148c <__ultoa_invert+0x9c>
    1410:	b4 e0       	ldi	r27, 0x04	; 4
    1412:	3c d0       	rcall	.+120    	; 0x148c <__ultoa_invert+0x9c>
    1414:	67 0f       	add	r22, r23
    1416:	78 1f       	adc	r23, r24
    1418:	89 1f       	adc	r24, r25
    141a:	9a 1f       	adc	r25, r26
    141c:	a1 1d       	adc	r26, r1
    141e:	68 0f       	add	r22, r24
    1420:	79 1f       	adc	r23, r25
    1422:	8a 1f       	adc	r24, r26
    1424:	91 1d       	adc	r25, r1
    1426:	a1 1d       	adc	r26, r1
    1428:	6a 0f       	add	r22, r26
    142a:	71 1d       	adc	r23, r1
    142c:	81 1d       	adc	r24, r1
    142e:	91 1d       	adc	r25, r1
    1430:	a1 1d       	adc	r26, r1
    1432:	20 d0       	rcall	.+64     	; 0x1474 <__ultoa_invert+0x84>
    1434:	09 f4       	brne	.+2      	; 0x1438 <__ultoa_invert+0x48>
    1436:	68 94       	set
    1438:	3f 91       	pop	r19
    143a:	2a e0       	ldi	r18, 0x0A	; 10
    143c:	26 9f       	mul	r18, r22
    143e:	11 24       	eor	r1, r1
    1440:	30 19       	sub	r19, r0
    1442:	30 5d       	subi	r19, 0xD0	; 208
    1444:	31 93       	st	Z+, r19
    1446:	de f6       	brtc	.-74     	; 0x13fe <__ultoa_invert+0xe>
    1448:	cf 01       	movw	r24, r30
    144a:	08 95       	ret
    144c:	46 2f       	mov	r20, r22
    144e:	47 70       	andi	r20, 0x07	; 7
    1450:	40 5d       	subi	r20, 0xD0	; 208
    1452:	41 93       	st	Z+, r20
    1454:	b3 e0       	ldi	r27, 0x03	; 3
    1456:	0f d0       	rcall	.+30     	; 0x1476 <__ultoa_invert+0x86>
    1458:	c9 f7       	brne	.-14     	; 0x144c <__ultoa_invert+0x5c>
    145a:	f6 cf       	rjmp	.-20     	; 0x1448 <__ultoa_invert+0x58>
    145c:	46 2f       	mov	r20, r22
    145e:	4f 70       	andi	r20, 0x0F	; 15
    1460:	40 5d       	subi	r20, 0xD0	; 208
    1462:	4a 33       	cpi	r20, 0x3A	; 58
    1464:	18 f0       	brcs	.+6      	; 0x146c <__ultoa_invert+0x7c>
    1466:	49 5d       	subi	r20, 0xD9	; 217
    1468:	31 fd       	sbrc	r19, 1
    146a:	40 52       	subi	r20, 0x20	; 32
    146c:	41 93       	st	Z+, r20
    146e:	02 d0       	rcall	.+4      	; 0x1474 <__ultoa_invert+0x84>
    1470:	a9 f7       	brne	.-22     	; 0x145c <__ultoa_invert+0x6c>
    1472:	ea cf       	rjmp	.-44     	; 0x1448 <__ultoa_invert+0x58>
    1474:	b4 e0       	ldi	r27, 0x04	; 4
    1476:	a6 95       	lsr	r26
    1478:	97 95       	ror	r25
    147a:	87 95       	ror	r24
    147c:	77 95       	ror	r23
    147e:	67 95       	ror	r22
    1480:	ba 95       	dec	r27
    1482:	c9 f7       	brne	.-14     	; 0x1476 <__ultoa_invert+0x86>
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	61 05       	cpc	r22, r1
    1488:	71 05       	cpc	r23, r1
    148a:	08 95       	ret
    148c:	9b 01       	movw	r18, r22
    148e:	ac 01       	movw	r20, r24
    1490:	0a 2e       	mov	r0, r26
    1492:	06 94       	lsr	r0
    1494:	57 95       	ror	r21
    1496:	47 95       	ror	r20
    1498:	37 95       	ror	r19
    149a:	27 95       	ror	r18
    149c:	ba 95       	dec	r27
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__ultoa_invert+0xa2>
    14a0:	62 0f       	add	r22, r18
    14a2:	73 1f       	adc	r23, r19
    14a4:	84 1f       	adc	r24, r20
    14a6:	95 1f       	adc	r25, r21
    14a8:	a0 1d       	adc	r26, r0
    14aa:	08 95       	ret

000014ac <_exit>:
    14ac:	f8 94       	cli

000014ae <__stop_program>:
    14ae:	ff cf       	rjmp	.-2      	; 0x14ae <__stop_program>
