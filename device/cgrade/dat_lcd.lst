
dat_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001f30  00001fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  008001aa  008001aa  0000206e  2**0
                  ALLOC
  3 .stab         00008ae4  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000228e  00000000  00000000  0000ab54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000cde2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_28>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <print_all_known_stations+0x80>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	07 63       	ori	r16, 0x37	; 55
      e8:	42 36       	cpi	r20, 0x62	; 98
      ea:	b7 9b       	sbis	0x16, 7	; 22
      ec:	d8 a7       	std	Y+40, r29	; 0x28
      ee:	1a 39       	cpi	r17, 0x9A	; 154
      f0:	68 56       	subi	r22, 0x68	; 104
      f2:	18 ae       	std	Y+56, r1	; 0x38
      f4:	ba ab       	std	Y+50, r27	; 0x32
      f6:	55 8c       	ldd	r5, Z+29	; 0x1d
      f8:	1d 3c       	cpi	r17, 0xCD	; 205
      fa:	b7 cc       	rjmp	.-1682   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
      fc:	57 63       	ori	r21, 0x37	; 55
      fe:	bd 6d       	ori	r27, 0xDD	; 221
     100:	ed fd       	.word	0xfded	; ????
     102:	75 3e       	cpi	r23, 0xE5	; 229
     104:	f6 17       	cp	r31, r22
     106:	72 31       	cpi	r23, 0x12	; 18
     108:	bf 00       	.word	0x00bf	; ????
     10a:	00 00       	nop
     10c:	80 3f       	cpi	r24, 0xF0	; 240

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e0 e3       	ldi	r30, 0x30	; 48
     122:	ff e1       	ldi	r31, 0x1F	; 31
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	aa 3a       	cpi	r26, 0xAA	; 170
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	13 e0       	ldi	r17, 0x03	; 3
     136:	aa ea       	ldi	r26, 0xAA	; 170
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a7 3d       	cpi	r26, 0xD7	; 215
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 c9 06 	call	0xd92	; 0xd92 <main>
     148:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <InitUSART>:

// Initialize USART
void InitUSART(void)
{
    // Set the Baud Rate to 9600 for 1 MHz system clock
    UBRR1H = 0;
     150:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 12;
     154:	8c e0       	ldi	r24, 0x0C	; 12
     156:	80 93 cc 00 	sts	0x00CC, r24
    
    // Enable The Receiver and Transmitter
    UCSR1B |= (1 << RXCIE1) | (1 << TXCIE1) | (1 << RXEN1) | (1 << TXEN1);
     15a:	e9 ec       	ldi	r30, 0xC9	; 201
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	88 6d       	ori	r24, 0xD8	; 216
     162:	80 83       	st	Z, r24
    
    // Set U2X0 to reduce the Baud Rate error
    UCSR1A |= (1 << U2X1 );
     164:	e8 ec       	ldi	r30, 0xC8	; 200
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 83       	st	Z, r24
    
    // Set the Frame Format to 8
    // Set the Parity to No Parity
    // Set the Stop Bits to 2
    UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1);
     16e:	ea ec       	ldi	r30, 0xCA	; 202
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	8e 60       	ori	r24, 0x0E	; 14
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <peekChar>:

char peekChar(void)
{
    char ret = '\0';
     
    if(rxReadPos != rxWritePos)
     17a:	90 91 bc 01 	lds	r25, 0x01BC
     17e:	80 91 bb 01 	lds	r24, 0x01BB
     182:	98 17       	cp	r25, r24
     184:	39 f0       	breq	.+14     	; 0x194 <peekChar+0x1a>
    {
        ret = rxBuffer[rxReadPos];
     186:	e0 91 bc 01 	lds	r30, 0x01BC
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ed 5a       	subi	r30, 0xAD	; 173
     18e:	fc 4f       	sbci	r31, 0xFC	; 252
     190:	80 81       	ld	r24, Z
     192:	08 95       	ret
    //stdout= &my_stream;
}

char peekChar(void)
{
    char ret = '\0';
     194:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = rxBuffer[rxReadPos];
    }
     
    return ret;
}
     196:	08 95       	ret

00000198 <getChar>:

char getChar(void)
{
    char ret = '\0';
    
    ret = rxBuffer[rxReadPos];
     198:	e0 91 bc 01 	lds	r30, 0x01BC
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	ed 5a       	subi	r30, 0xAD	; 173
     1a0:	fc 4f       	sbci	r31, 0xFC	; 252
     1a2:	80 81       	ld	r24, Z
     
    rxReadPos++;
     1a4:	90 91 bc 01 	lds	r25, 0x01BC
     1a8:	9f 5f       	subi	r25, 0xFF	; 255
     1aa:	90 93 bc 01 	sts	0x01BC, r25
     
    if(rxReadPos >= RX_BUFFER_SIZE)
     1ae:	90 91 bc 01 	lds	r25, 0x01BC
     1b2:	97 fd       	sbrc	r25, 7
    {
        rxReadPos = 0;
     1b4:	10 92 bc 01 	sts	0x01BC, r1
    }
    
    return ret;
}
     1b8:	08 95       	ret

000001ba <serialStart>:

int serialStart(void)
{
    if ((serial_history[0]==serialStartChar)&&(serial_history[1]==serialStartChar)&&(serial_history[2]==serialStartChar))
     1ba:	80 91 b8 01 	lds	r24, 0x01B8
     1be:	90 91 01 01 	lds	r25, 0x0101
     1c2:	89 13       	cpse	r24, r25
     1c4:	0c c0       	rjmp	.+24     	; 0x1de <serialStart+0x24>
     1c6:	20 91 b9 01 	lds	r18, 0x01B9
     1ca:	28 13       	cpse	r18, r24
     1cc:	08 c0       	rjmp	.+16     	; 0x1de <serialStart+0x24>
     1ce:	30 91 ba 01 	lds	r19, 0x01BA
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	32 17       	cp	r19, r18
     1d8:	21 f0       	breq	.+8      	; 0x1e2 <serialStart+0x28>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	08 95       	ret
        return 1;
    else
        return 0;
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
}
     1e2:	08 95       	ret

000001e4 <__vector_28>:
    char b[sizeof(float)];
};


//serial receive interrupt behavior
ISR(USART1_RX_vect){
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	0b b6       	in	r0, 0x3b	; 59
     1f0:	0f 92       	push	r0
     1f2:	2f 93       	push	r18
     1f4:	3f 93       	push	r19
     1f6:	4f 93       	push	r20
     1f8:	5f 93       	push	r21
     1fa:	6f 93       	push	r22
     1fc:	7f 93       	push	r23
     1fe:	8f 93       	push	r24
     200:	9f 93       	push	r25
     202:	af 93       	push	r26
     204:	bf 93       	push	r27
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
    
    //remember the last 3 bytes received (to handle start + end sequences)
    serial_history[2] = serial_history[1];
     20a:	80 91 b9 01 	lds	r24, 0x01B9
     20e:	80 93 ba 01 	sts	0x01BA, r24
    serial_history[1] = serial_history[0];
     212:	80 91 b8 01 	lds	r24, 0x01B8
     216:	80 93 b9 01 	sts	0x01B9, r24

    //Read most recent value out of the UART buffer
    serial_history[0] = UDR1;
     21a:	80 91 ce 00 	lds	r24, 0x00CE
     21e:	80 93 b8 01 	sts	0x01B8, r24

    //if a serial update is in progress, write to the receive buffer
    if (update_trigger==1)
     222:	80 91 b2 01 	lds	r24, 0x01B2
     226:	90 91 b3 01 	lds	r25, 0x01B3
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <__vector_28+0x64>
    {
        rxBuffer[rxWritePos] = serial_history[0];
     22e:	e0 91 bb 01 	lds	r30, 0x01BB
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 91 b8 01 	lds	r24, 0x01B8
     238:	ed 5a       	subi	r30, 0xAD	; 173
     23a:	fc 4f       	sbci	r31, 0xFC	; 252
     23c:	80 83       	st	Z, r24
        rxWritePos++;
     23e:	80 91 bb 01 	lds	r24, 0x01BB
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 bb 01 	sts	0x01BB, r24
    }   

    //trigger a serial database update if the start sequence has occurred
    if(serialStart()){
     248:	0e 94 dd 00 	call	0x1ba	; 0x1ba <serialStart>
     24c:	89 2b       	or	r24, r25
     24e:	31 f0       	breq	.+12     	; 0x25c <__vector_28+0x78>
        update_trigger = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 b3 01 	sts	0x01B3, r25
     258:	80 93 b2 01 	sts	0x01B2, r24
    }

    //make the receive buffer loop
    if(rxWritePos >= RX_BUFFER_SIZE)
     25c:	80 91 bb 01 	lds	r24, 0x01BB
     260:	87 fd       	sbrc	r24, 7
    {
        rxWritePos = 0;
     262:	10 92 bb 01 	sts	0x01BB, r1
    }

}
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	7f 91       	pop	r23
     274:	6f 91       	pop	r22
     276:	5f 91       	pop	r21
     278:	4f 91       	pop	r20
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	0f 90       	pop	r0
     280:	0b be       	out	0x3b, r0	; 59
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <serialEnd>:
        return 0;
}

int serialEnd(void)
{
    if ((serial_history[0]==serialEndChar)&&(serial_history[1]==serialEndChar)&&(serial_history[2]==serialEndChar))
     28c:	80 91 b8 01 	lds	r24, 0x01B8
     290:	90 91 00 01 	lds	r25, 0x0100
     294:	89 13       	cpse	r24, r25
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <serialEnd+0x24>
     298:	20 91 b9 01 	lds	r18, 0x01B9
     29c:	28 13       	cpse	r18, r24
     29e:	08 c0       	rjmp	.+16     	; 0x2b0 <serialEnd+0x24>
     2a0:	30 91 ba 01 	lds	r19, 0x01BA
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	32 17       	cp	r19, r18
     2aa:	21 f0       	breq	.+8      	; 0x2b4 <serialEnd+0x28>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	08 95       	ret
        return 1;
    else
        return 0;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
}
     2b4:	08 95       	ret

000002b6 <my_eeprom_read_int>:

int my_eeprom_read_int(int address)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
    char temp_num = ((char)eeprom_read_byte((uint8_t *)address));
     2c0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__eerd_byte_m1284p>
     2c4:	89 83       	std	Y+1, r24	; 0x01
    return (atoi(&temp_num));
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <atoi>
}
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <my_eeprom_read_char>:

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     2d6:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__eerd_byte_m1284p>

000002da <my_eeprom_read_float>:
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     2da:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__eerd_dword_m1284p>

000002de <my_eeprom_read_string>:
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     2de:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__eerd_block_m1284p>

000002e2 <string_write_int>:
}

void string_write_int(int num, int num_digits)
{
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	18 2f       	mov	r17, r24
     2ec:	09 2f       	mov	r16, r25
    char *temp = (char *)malloc(num_digits*sizeof(char));
     2ee:	cb 01       	movw	r24, r22
     2f0:	0e 94 4d 0b 	call	0x169a	; 0x169a <malloc>
     2f4:	d8 2f       	mov	r29, r24
     2f6:	c9 2f       	mov	r28, r25
    sprintf(temp,"%d",num);
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	2a e0       	ldi	r18, 0x0A	; 10
     2fe:	31 e0       	ldi	r19, 0x01	; 1
     300:	3f 93       	push	r19
     302:	2f 93       	push	r18
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	0e 94 9a 0c 	call	0x1934	; 0x1934 <sprintf>
    string_write(temp);
     30c:	8d 2f       	mov	r24, r29
     30e:	9c 2f       	mov	r25, r28
     310:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    free(temp);
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	8d 2f       	mov	r24, r29
     322:	9c 2f       	mov	r25, r28
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
void string_write_int(int num, int num_digits)
{
    char *temp = (char *)malloc(num_digits*sizeof(char));
    sprintf(temp,"%d",num);
    string_write(temp);
    free(temp);
     32c:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <free>

00000330 <string_write_float>:
}

void string_write_float(float num, int dec_digits)
{
     330:	cf 92       	push	r12
     332:	df 92       	push	r13
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	00 d0       	rcall	.+0      	; 0x342 <string_write_float+0x12>
     342:	00 d0       	rcall	.+0      	; 0x344 <string_write_float+0x14>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 01       	movw	r16, r20
    double intpart, fractpart;
    fractpart = modf(num, &intpart);
     34a:	ae 01       	movw	r20, r28
     34c:	4f 5f       	subi	r20, 0xFF	; 255
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
     350:	0e 94 2c 09 	call	0x1258	; 0x1258 <modf>
     354:	6b 01       	movw	r12, r22
     356:	7c 01       	movw	r14, r24

    string_write_int((int)intpart,4); string_write("."); 
     358:	69 81       	ldd	r22, Y+1	; 0x01
     35a:	7a 81       	ldd	r23, Y+2	; 0x02
     35c:	8b 81       	ldd	r24, Y+3	; 0x03
     35e:	9c 81       	ldd	r25, Y+4	; 0x04
     360:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixsfsi>
     364:	dc 01       	movw	r26, r24
     366:	cb 01       	movw	r24, r22
     368:	64 e0       	ldi	r22, 0x04	; 4
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <string_write_int>
     370:	83 e4       	ldi	r24, 0x43	; 67
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>

    int temp = (int)(abs((round((fractpart*pow(10,dec_digits))))));
     378:	b8 01       	movw	r22, r16
     37a:	88 27       	eor	r24, r24
     37c:	77 fd       	sbrc	r23, 7
     37e:	80 95       	com	r24
     380:	98 2f       	mov	r25, r24
     382:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatsisf>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 e4       	ldi	r25, 0x41	; 65
     392:	0e 94 c2 09 	call	0x1384	; 0x1384 <pow>
     396:	9b 01       	movw	r18, r22
     398:	ac 01       	movw	r20, r24
     39a:	c7 01       	movw	r24, r14
     39c:	b6 01       	movw	r22, r12
     39e:	0e 94 5f 09 	call	0x12be	; 0x12be <__mulsf3>
     3a2:	0e 94 0e 0a 	call	0x141c	; 0x141c <round>
     3a6:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixsfsi>
     3aa:	7b 01       	movw	r14, r22
     3ac:	77 ff       	sbrs	r23, 7
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <string_write_float+0x88>
     3b0:	ee 24       	eor	r14, r14
     3b2:	ff 24       	eor	r15, r15
     3b4:	e6 1a       	sub	r14, r22
     3b6:	f7 0a       	sbc	r15, r23
    int digits = 0;

    if (temp!=0)
     3b8:	e1 14       	cp	r14, r1
     3ba:	f1 04       	cpc	r15, r1
     3bc:	a1 f0       	breq	.+40     	; 0x3e6 <string_write_float+0xb6>
    {
        digits = floor(log10(abs(temp)))+1;
     3be:	b7 01       	movw	r22, r14
     3c0:	88 27       	eor	r24, r24
     3c2:	77 fd       	sbrc	r23, 7
     3c4:	80 95       	com	r24
     3c6:	98 2f       	mov	r25, r24
     3c8:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatsisf>
     3cc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <log10>
     3d0:	0e 94 39 08 	call	0x1072	; 0x1072 <floor>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e8       	ldi	r20, 0x80	; 128
     3da:	5f e3       	ldi	r21, 0x3F	; 63
     3dc:	0e 94 67 07 	call	0xece	; 0xece <__addsf3>
     3e0:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixsfsi>
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <string_write_float+0xba>
    } else {
        digits = 0;
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     3ea:	c1 2c       	mov	r12, r1
     3ec:	d1 2c       	mov	r13, r1
     3ee:	06 1b       	sub	r16, r22
     3f0:	17 0b       	sbc	r17, r23
     3f2:	c0 16       	cp	r12, r16
     3f4:	d1 06       	cpc	r13, r17
     3f6:	44 f4       	brge	.+16     	; 0x408 <string_write_float+0xd8>
    {
        string_write("0");
     3f8:	8d e0       	ldi	r24, 0x0D	; 13
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    } else {
        digits = 0;
    }

    int i=0;
    for (i=0; i<(dec_digits-digits); i++)
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	c8 1a       	sub	r12, r24
     404:	d8 0a       	sbc	r13, r24
     406:	f5 cf       	rjmp	.-22     	; 0x3f2 <string_write_float+0xc2>
    {
        string_write("0");
    }

    string_write_int(temp,4);
     408:	64 e0       	ldi	r22, 0x04	; 4
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	c7 01       	movw	r24, r14
}
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
    for (i=0; i<(dec_digits-digits); i++)
    {
        string_write("0");
    }

    string_write_int(temp,4);
     426:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <string_write_int>

0000042a <print_eeprom_contents>:
}

void print_eeprom_contents(void)
{
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
    int i=0;
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
     430:	c0 e0       	ldi	r28, 0x00	; 0
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	1c e1       	ldi	r17, 0x1C	; 28
     436:	20 91 4d 03 	lds	r18, 0x034D
     43a:	30 91 4e 03 	lds	r19, 0x034E
     43e:	12 9f       	mul	r17, r18
     440:	c0 01       	movw	r24, r0
     442:	13 9f       	mul	r17, r19
     444:	90 0d       	add	r25, r0
     446:	11 24       	eor	r1, r1
     448:	8c 59       	subi	r24, 0x9C	; 156
     44a:	9f 4f       	sbci	r25, 0xFF	; 255
     44c:	8c 17       	cp	r24, r28
     44e:	9d 07       	cpc	r25, r29
     450:	84 f0       	brlt	.+32     	; 0x472 <print_eeprom_contents+0x48>
    return (atoi(&temp_num));
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     452:	ce 01       	movw	r24, r28
     454:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
    {
        one_byte = my_eeprom_read_char(i);
        if (one_byte == '\0')
     458:	81 11       	cpse	r24, r1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <print_eeprom_contents+0x34>
            one_byte = '?';
     45c:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     45e:	0e 94 73 06 	call	0xce6	; 0xce6 <char_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     462:	87 ea       	ldi	r24, 0xA7	; 167
     464:	91 e6       	ldi	r25, 0x61	; 97
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <print_eeprom_contents+0x3c>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <print_eeprom_contents+0x42>
     46c:	00 00       	nop
void print_eeprom_contents(void)
{
    int i=0;
    char one_byte;

    for (i=0; i<1+NUM_GRID_CELLS+num_stations*STATION_BLOCKSIZE; i++)
     46e:	21 96       	adiw	r28, 0x01	; 1
     470:	e2 cf       	rjmp	.-60     	; 0x436 <print_eeprom_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	08 95       	ret

0000047a <print_eeprom_station_contents>:

void print_eeprom_station_contents(void)
{
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	1c e1       	ldi	r17, 0x1C	; 28
     486:	20 91 4d 03 	lds	r18, 0x034D
     48a:	30 91 4e 03 	lds	r19, 0x034E
     48e:	12 9f       	mul	r17, r18
     490:	c0 01       	movw	r24, r0
     492:	13 9f       	mul	r17, r19
     494:	90 0d       	add	r25, r0
     496:	11 24       	eor	r1, r1
     498:	c8 17       	cp	r28, r24
     49a:	d9 07       	cpc	r29, r25
     49c:	94 f4       	brge	.+36     	; 0x4c2 <print_eeprom_station_contents+0x48>
    return (atoi(&temp_num));
}

char my_eeprom_read_char(int address)
{
    return (char)eeprom_read_byte((uint8_t *)address);
     49e:	ce 01       	movw	r24, r28
     4a0:	88 59       	subi	r24, 0x98	; 152
     4a2:	9f 4f       	sbci	r25, 0xFF	; 255
     4a4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__eerd_byte_m1284p>
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
    {
        one_byte = my_eeprom_read_char(start+i);
        if (one_byte == '\0')
     4a8:	81 11       	cpse	r24, r1
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <print_eeprom_station_contents+0x34>
            one_byte = '?';
     4ac:	8f e3       	ldi	r24, 0x3F	; 63
        char_write(one_byte);
     4ae:	0e 94 73 06 	call	0xce6	; 0xce6 <char_write>
     4b2:	87 ea       	ldi	r24, 0xA7	; 167
     4b4:	91 e6       	ldi	r25, 0x61	; 97
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <print_eeprom_station_contents+0x3c>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <print_eeprom_station_contents+0x42>
     4bc:	00 00       	nop
{
    int start = FIRST_STATION_OFFSET;
    int i=0;
    char one_byte;

    for (i=0; i<STATION_BLOCKSIZE*num_stations; i++)
     4be:	21 96       	adiw	r28, 0x01	; 1
     4c0:	e2 cf       	rjmp	.-60     	; 0x486 <print_eeprom_station_contents+0xc>
        if (one_byte == '\0')
            one_byte = '?';
        char_write(one_byte);
        _delay_ms(100);
    }
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	08 95       	ret

000004ca <print_callsign>:
    if (update_trigger)
        return;
}

void print_callsign(int station_index)
{
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
    int i;
    for (i=0; i<8; i++) 
    {
        char_write(all_stations[station_index].callsign[i]);
     4d2:	2c e1       	ldi	r18, 0x1C	; 28
     4d4:	28 9f       	mul	r18, r24
     4d6:	80 01       	movw	r16, r0
     4d8:	29 9f       	mul	r18, r25
     4da:	10 0d       	add	r17, r0
     4dc:	11 24       	eor	r1, r1
}

void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4de:	c0 e0       	ldi	r28, 0x00	; 0
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        char_write(all_stations[station_index].callsign[i]);
     4e2:	e0 91 51 03 	lds	r30, 0x0351
     4e6:	f0 91 52 03 	lds	r31, 0x0352
     4ea:	e0 0f       	add	r30, r16
     4ec:	f1 1f       	adc	r31, r17
     4ee:	ec 0f       	add	r30, r28
     4f0:	fd 1f       	adc	r31, r29
     4f2:	80 81       	ld	r24, Z
     4f4:	0e 94 73 06 	call	0xce6	; 0xce6 <char_write>
}

void print_callsign(int station_index)
{
    int i;
    for (i=0; i<8; i++) 
     4f8:	21 96       	adiw	r28, 0x01	; 1
     4fa:	c8 30       	cpi	r28, 0x08	; 8
     4fc:	d1 05       	cpc	r29, r1
     4fe:	89 f7       	brne	.-30     	; 0x4e2 <print_callsign+0x18>
    {
        char_write(all_stations[station_index].callsign[i]);
    }
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <print_station>:
        _delay_ms(100);
    }
}

void print_station(int index)
{
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	8c 01       	movw	r16, r24
    string_write_int(index+1,3); string_write(": "); print_callsign(index); _delay_ms(250); string_write("\n"); 
     514:	63 e0       	ldi	r22, 0x03	; 3
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <string_write_int>
     51e:	8f e1       	ldi	r24, 0x1F	; 31
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     526:	c8 01       	movw	r24, r16
     528:	0e 94 65 02 	call	0x4ca	; 0x4ca <print_callsign>
     52c:	83 e2       	ldi	r24, 0x23	; 35
     52e:	94 ef       	ldi	r25, 0xF4	; 244
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <print_station+0x26>
     534:	00 c0       	rjmp	.+0      	; 0x536 <print_station+0x2c>
     536:	00 00       	nop
     538:	82 e5       	ldi	r24, 0x52	; 82
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    if (update_trigger)
     540:	80 91 b2 01 	lds	r24, 0x01B2
     544:	90 91 b3 01 	lds	r25, 0x01B3
     548:	89 2b       	or	r24, r25
     54a:	09 f0       	breq	.+2      	; 0x54e <print_station+0x44>
     54c:	b1 c0       	rjmp	.+354    	; 0x6b0 <print_station+0x1a6>
        return;
    string_write("freq: "); string_write_float(all_stations[index].freq,1); _delay_ms(250); string_write("\n");
     54e:	8f e0       	ldi	r24, 0x0F	; 15
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     556:	8c e1       	ldi	r24, 0x1C	; 28
     558:	80 9f       	mul	r24, r16
     55a:	e0 01       	movw	r28, r0
     55c:	81 9f       	mul	r24, r17
     55e:	d0 0d       	add	r29, r0
     560:	11 24       	eor	r1, r1
     562:	e0 91 51 03 	lds	r30, 0x0351
     566:	f0 91 52 03 	lds	r31, 0x0352
     56a:	ec 0f       	add	r30, r28
     56c:	fd 1f       	adc	r31, r29
     56e:	60 85       	ldd	r22, Z+8	; 0x08
     570:	71 85       	ldd	r23, Z+9	; 0x09
     572:	82 85       	ldd	r24, Z+10	; 0x0a
     574:	93 85       	ldd	r25, Z+11	; 0x0b
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     57e:	83 e2       	ldi	r24, 0x23	; 35
     580:	94 ef       	ldi	r25, 0xF4	; 244
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <print_station+0x78>
     586:	00 c0       	rjmp	.+0      	; 0x588 <print_station+0x7e>
     588:	00 00       	nop
     58a:	82 e5       	ldi	r24, 0x52	; 82
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    if (update_trigger)
     592:	80 91 b2 01 	lds	r24, 0x01B2
     596:	90 91 b3 01 	lds	r25, 0x01B3
     59a:	89 2b       	or	r24, r25
     59c:	09 f0       	breq	.+2      	; 0x5a0 <print_station+0x96>
     59e:	88 c0       	rjmp	.+272    	; 0x6b0 <print_station+0x1a6>
        return;
    string_write("lat: "); string_write_float(all_stations[index].lat,4); _delay_ms(250); string_write("\n");
     5a0:	86 e1       	ldi	r24, 0x16	; 22
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     5a8:	e0 91 51 03 	lds	r30, 0x0351
     5ac:	f0 91 52 03 	lds	r31, 0x0352
     5b0:	ec 0f       	add	r30, r28
     5b2:	fd 1f       	adc	r31, r29
     5b4:	64 85       	ldd	r22, Z+12	; 0x0c
     5b6:	75 85       	ldd	r23, Z+13	; 0x0d
     5b8:	86 85       	ldd	r24, Z+14	; 0x0e
     5ba:	97 85       	ldd	r25, Z+15	; 0x0f
     5bc:	44 e0       	ldi	r20, 0x04	; 4
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     5c4:	83 e2       	ldi	r24, 0x23	; 35
     5c6:	94 ef       	ldi	r25, 0xF4	; 244
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <print_station+0xbe>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <print_station+0xc4>
     5ce:	00 00       	nop
     5d0:	82 e5       	ldi	r24, 0x52	; 82
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    if (update_trigger)
     5d8:	80 91 b2 01 	lds	r24, 0x01B2
     5dc:	90 91 b3 01 	lds	r25, 0x01B3
     5e0:	89 2b       	or	r24, r25
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <print_station+0xdc>
     5e4:	65 c0       	rjmp	.+202    	; 0x6b0 <print_station+0x1a6>
        return;
    string_write("lon: "); string_write_float(all_stations[index].lon,4); _delay_ms(250); string_write("\n");
     5e6:	8c e1       	ldi	r24, 0x1C	; 28
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     5ee:	e0 91 51 03 	lds	r30, 0x0351
     5f2:	f0 91 52 03 	lds	r31, 0x0352
     5f6:	ec 0f       	add	r30, r28
     5f8:	fd 1f       	adc	r31, r29
     5fa:	60 89       	ldd	r22, Z+16	; 0x10
     5fc:	71 89       	ldd	r23, Z+17	; 0x11
     5fe:	82 89       	ldd	r24, Z+18	; 0x12
     600:	93 89       	ldd	r25, Z+19	; 0x13
     602:	44 e0       	ldi	r20, 0x04	; 4
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     60a:	83 e2       	ldi	r24, 0x23	; 35
     60c:	94 ef       	ldi	r25, 0xF4	; 244
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <print_station+0x104>
     612:	00 c0       	rjmp	.+0      	; 0x614 <print_station+0x10a>
     614:	00 00       	nop
     616:	82 e5       	ldi	r24, 0x52	; 82
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    if (update_trigger)
     61e:	80 91 b2 01 	lds	r24, 0x01B2
     622:	90 91 b3 01 	lds	r25, 0x01B3
     626:	89 2b       	or	r24, r25
     628:	09 f0       	breq	.+2      	; 0x62c <print_station+0x122>
     62a:	42 c0       	rjmp	.+132    	; 0x6b0 <print_station+0x1a6>
        return;
    string_write("erp: "); string_write_float(all_stations[index].erp,1); _delay_ms(250); string_write("\n");
     62c:	82 e2       	ldi	r24, 0x22	; 34
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     634:	e0 91 51 03 	lds	r30, 0x0351
     638:	f0 91 52 03 	lds	r31, 0x0352
     63c:	ec 0f       	add	r30, r28
     63e:	fd 1f       	adc	r31, r29
     640:	64 89       	ldd	r22, Z+20	; 0x14
     642:	75 89       	ldd	r23, Z+21	; 0x15
     644:	86 89       	ldd	r24, Z+22	; 0x16
     646:	97 89       	ldd	r25, Z+23	; 0x17
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     650:	83 e2       	ldi	r24, 0x23	; 35
     652:	94 ef       	ldi	r25, 0xF4	; 244
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <print_station+0x14a>
     658:	00 c0       	rjmp	.+0      	; 0x65a <print_station+0x150>
     65a:	00 00       	nop
     65c:	82 e5       	ldi	r24, 0x52	; 82
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    if (update_trigger)
     664:	80 91 b2 01 	lds	r24, 0x01B2
     668:	90 91 b3 01 	lds	r25, 0x01B3
     66c:	89 2b       	or	r24, r25
     66e:	01 f5       	brne	.+64     	; 0x6b0 <print_station+0x1a6>
        return;
    string_write("haat: "); string_write_float(all_stations[index].haat,0); _delay_ms(250); string_write("\n");
     670:	88 e2       	ldi	r24, 0x28	; 40
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     678:	e0 91 51 03 	lds	r30, 0x0351
     67c:	f0 91 52 03 	lds	r31, 0x0352
     680:	ec 0f       	add	r30, r28
     682:	fd 1f       	adc	r31, r29
     684:	60 8d       	ldd	r22, Z+24	; 0x18
     686:	71 8d       	ldd	r23, Z+25	; 0x19
     688:	82 8d       	ldd	r24, Z+26	; 0x1a
     68a:	93 8d       	ldd	r25, Z+27	; 0x1b
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	0e 94 98 01 	call	0x330	; 0x330 <string_write_float>
     694:	83 e2       	ldi	r24, 0x23	; 35
     696:	94 ef       	ldi	r25, 0xF4	; 244
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <print_station+0x18e>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <print_station+0x194>
     69e:	00 00       	nop
     6a0:	82 e5       	ldi	r24, 0x52	; 82
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
    if (update_trigger)
     6a8:	80 91 b2 01 	lds	r24, 0x01B2
     6ac:	90 91 b3 01 	lds	r25, 0x01B3
        return;
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	08 95       	ret

000006ba <prepare_device>:
    }
}

void prepare_device(void)
{
    DDRB = 0xFF;
     6ba:	8f ef       	ldi	r24, 0xFF	; 255
     6bc:	84 b9       	out	0x04, r24	; 4
    cli();
     6be:	f8 94       	cli
    //Init usart
    InitUSART();
     6c0:	0e 94 a8 00 	call	0x150	; 0x150 <InitUSART>
    //Enable Global Interrupts. Sets SREG Interrupt bit.
    sei();
     6c4:	78 94       	sei
    //Intitialize LCD. Set Blinking cursor.
    lcd_init();
     6c6:	0e 94 bb 04 	call	0x976	; 0x976 <lcd_init>
     6ca:	2f e3       	ldi	r18, 0x3F	; 63
     6cc:	8d e0       	ldi	r24, 0x0D	; 13
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	80 40       	sbci	r24, 0x00	; 0
     6d4:	90 40       	sbci	r25, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <prepare_device+0x16>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <prepare_device+0x20>
     6da:	00 00       	nop
     6dc:	08 95       	ret

000006de <database_load>:
    _delay_ms(1000);
}

void database_load(void)
{
     6de:	bf 92       	push	r11
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__eerd_dword_m1284p>

void database_load(void)
{
    int i;
    //figure out how many stations there are by reading the first number written to EEPROM
    num_stations = (int)my_eeprom_read_float(0);
     6f8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fixsfsi>
     6fc:	70 93 4e 03 	sts	0x034E, r23
     700:	60 93 4d 03 	sts	0x034D, r22

    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));
     704:	4c e1       	ldi	r20, 0x1C	; 28
     706:	46 9f       	mul	r20, r22
     708:	90 01       	movw	r18, r0
     70a:	47 9f       	mul	r20, r23
     70c:	30 0d       	add	r19, r0
     70e:	11 24       	eor	r1, r1
     710:	c9 01       	movw	r24, r18
     712:	0e 94 4d 0b 	call	0x169a	; 0x169a <malloc>
     716:	90 93 52 03 	sts	0x0352, r25
     71a:	80 93 51 03 	sts	0x0351, r24
     71e:	85 e8       	ldi	r24, 0x85	; 133
     720:	c8 2e       	mov	r12, r24
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	d8 2e       	mov	r13, r24
     726:	9d eb       	ldi	r25, 0xBD	; 189
     728:	e9 2e       	mov	r14, r25
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	f9 2e       	mov	r15, r25
     72e:	c4 e0       	ldi	r28, 0x04	; 4
     730:	d0 e0       	ldi	r29, 0x00	; 0

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+4);
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     736:	2c e1       	ldi	r18, 0x1C	; 28
     738:	b2 2e       	mov	r11, r18

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
    {
        stations_in_cell[i] = my_eeprom_read_int(i+4);
     73a:	ce 01       	movw	r24, r28
     73c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <my_eeprom_read_int>
     740:	f6 01       	movw	r30, r12
     742:	81 93       	st	Z+, r24
     744:	91 93       	st	Z+, r25
     746:	6f 01       	movw	r12, r30
        cell_offsets[i] = FIRST_STATION_OFFSET+total*STATION_BLOCKSIZE;
     748:	b0 9e       	mul	r11, r16
     74a:	90 01       	movw	r18, r0
     74c:	b1 9e       	mul	r11, r17
     74e:	30 0d       	add	r19, r0
     750:	11 24       	eor	r1, r1
     752:	28 59       	subi	r18, 0x98	; 152
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	f7 01       	movw	r30, r14
     758:	21 93       	st	Z+, r18
     75a:	31 93       	st	Z+, r19
     75c:	7f 01       	movw	r14, r30
        total += stations_in_cell[i];
     75e:	08 0f       	add	r16, r24
     760:	19 1f       	adc	r17, r25
     762:	21 96       	adiw	r28, 0x01	; 1
    //allocate memory for all the station structures
    all_stations = (Station *)malloc(num_stations*sizeof(Station));

    //populate the array containing the number of stations in each grid cell (next NUM_GRID_CELLS bytes in EEPROM)
    int total = 0;
    for (i=0; i < NUM_GRID_CELLS; i ++)
     764:	c8 36       	cpi	r28, 0x68	; 104
     766:	d1 05       	cpc	r29, r1
     768:	41 f7       	brne	.-48     	; 0x73a <database_load+0x5c>
     76a:	c0 e0       	ldi	r28, 0x00	; 0
     76c:	d0 e0       	ldi	r29, 0x00	; 0
     76e:	e1 2c       	mov	r14, r1
     770:	f1 2c       	mov	r15, r1
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     772:	80 91 4d 03 	lds	r24, 0x034D
     776:	90 91 4e 03 	lds	r25, 0x034E
     77a:	e8 16       	cp	r14, r24
     77c:	f9 06       	cpc	r15, r25
     77e:	0c f0       	brlt	.+2      	; 0x782 <database_load+0xa4>
     780:	4a c0       	rjmp	.+148    	; 0x816 <database_load+0x138>
     782:	be 01       	movw	r22, r28
     784:	68 59       	subi	r22, 0x98	; 152
     786:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
     788:	80 91 51 03 	lds	r24, 0x0351
     78c:	90 91 52 03 	lds	r25, 0x0352
    return (float)(eeprom_read_float((const float *)address));
}

void my_eeprom_read_string(char *dest, int address, int num_chars)
{
    eeprom_read_block((void *)dest,(const void *)address,num_chars);
     790:	48 e0       	ldi	r20, 0x08	; 8
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	8c 0f       	add	r24, r28
     796:	9d 1f       	adc	r25, r29
     798:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <__eerd_block_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     79c:	00 91 51 03 	lds	r16, 0x0351
     7a0:	10 91 52 03 	lds	r17, 0x0352
     7a4:	0c 0f       	add	r16, r28
     7a6:	1d 1f       	adc	r17, r29
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7a8:	ce 01       	movw	r24, r28
     7aa:	80 59       	subi	r24, 0x90	; 144
     7ac:	9f 4f       	sbci	r25, 0xFF	; 255
     7ae:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__eerd_dword_m1284p>
    for (i=0; i<num_stations; i++)
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
     7b2:	f8 01       	movw	r30, r16
     7b4:	60 87       	std	Z+8, r22	; 0x08
     7b6:	71 87       	std	Z+9, r23	; 0x09
     7b8:	82 87       	std	Z+10, r24	; 0x0a
     7ba:	93 87       	std	Z+11, r25	; 0x0b
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7bc:	ce 01       	movw	r24, r28
     7be:	8c 58       	subi	r24, 0x8C	; 140
     7c0:	9f 4f       	sbci	r25, 0xFF	; 255
     7c2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__eerd_dword_m1284p>
    {
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
     7c6:	f8 01       	movw	r30, r16
     7c8:	64 87       	std	Z+12, r22	; 0x0c
     7ca:	75 87       	std	Z+13, r23	; 0x0d
     7cc:	86 87       	std	Z+14, r24	; 0x0e
     7ce:	97 87       	std	Z+15, r25	; 0x0f
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7d0:	ce 01       	movw	r24, r28
     7d2:	88 58       	subi	r24, 0x88	; 136
     7d4:	9f 4f       	sbci	r25, 0xFF	; 255
     7d6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__eerd_dword_m1284p>
        int start = FIRST_STATION_OFFSET+i*STATION_BLOCKSIZE;

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
     7da:	f8 01       	movw	r30, r16
     7dc:	60 8b       	std	Z+16, r22	; 0x10
     7de:	71 8b       	std	Z+17, r23	; 0x11
     7e0:	82 8b       	std	Z+18, r24	; 0x12
     7e2:	93 8b       	std	Z+19, r25	; 0x13
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7e4:	ce 01       	movw	r24, r28
     7e6:	84 58       	subi	r24, 0x84	; 132
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__eerd_dword_m1284p>

        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
     7ee:	f8 01       	movw	r30, r16
     7f0:	64 8b       	std	Z+20, r22	; 0x14
     7f2:	75 8b       	std	Z+21, r23	; 0x15
     7f4:	86 8b       	std	Z+22, r24	; 0x16
     7f6:	97 8b       	std	Z+23, r25	; 0x17
    return (char)eeprom_read_byte((uint8_t *)address);
}

float my_eeprom_read_float(int address)
{
    return (float)(eeprom_read_float((const float *)address));
     7f8:	ce 01       	movw	r24, r28
     7fa:	80 58       	subi	r24, 0x80	; 128
     7fc:	9f 4f       	sbci	r25, 0xFF	; 255
     7fe:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__eerd_dword_m1284p>
        my_eeprom_read_string(all_stations[i].callsign,start,8); start += 8;
        all_stations[i].freq = my_eeprom_read_float(start); start += 4;
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
     802:	f8 01       	movw	r30, r16
     804:	60 8f       	std	Z+24, r22	; 0x18
     806:	71 8f       	std	Z+25, r23	; 0x19
     808:	82 8f       	std	Z+26, r24	; 0x1a
     80a:	93 8f       	std	Z+27, r25	; 0x1b
        string_write_int(cell_offsets[i],3);
        _delay_ms(50);
    }*/

    //load in the stations one by one into the all_stations array of Station structs
    for (i=0; i<num_stations; i++)
     80c:	ff ef       	ldi	r31, 0xFF	; 255
     80e:	ef 1a       	sub	r14, r31
     810:	ff 0a       	sbc	r15, r31
     812:	6c 96       	adiw	r28, 0x1c	; 28
     814:	ae cf       	rjmp	.-164    	; 0x772 <database_load+0x94>
        all_stations[i].lat = my_eeprom_read_float(start); start += 4;
        all_stations[i].lon = my_eeprom_read_float(start); start += 4;
        all_stations[i].erp = my_eeprom_read_float(start); start += 4;
        all_stations[i].haat = my_eeprom_read_float(start); start += 4;
    }
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	08 95       	ret

0000082a <database_free>:

void database_free(void)
{
    num_stations = 0;
     82a:	10 92 4e 03 	sts	0x034E, r1
     82e:	10 92 4d 03 	sts	0x034D, r1

    free(all_stations);
     832:	80 91 51 03 	lds	r24, 0x0351
     836:	90 91 52 03 	lds	r25, 0x0352
     83a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <free>
    all_stations = NULL;
     83e:	10 92 52 03 	sts	0x0352, r1
     842:	10 92 51 03 	sts	0x0351, r1
     846:	e5 e8       	ldi	r30, 0x85	; 133
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	ad eb       	ldi	r26, 0xBD	; 189
     84c:	b1 e0       	ldi	r27, 0x01	; 1

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
    {
        stations_in_cell[i] = 0;
     84e:	11 92       	st	Z+, r1
     850:	11 92       	st	Z+, r1
        cell_offsets[i] = 0;
     852:	1d 92       	st	X+, r1
     854:	1d 92       	st	X+, r1

    free(all_stations);
    all_stations = NULL;

    int i;
    for (i=0; i<NUM_GRID_CELLS; i++)
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	ed 34       	cpi	r30, 0x4D	; 77
     85a:	f8 07       	cpc	r31, r24
     85c:	c1 f7       	brne	.-16     	; 0x84e <database_free+0x24>
    {
        stations_in_cell[i] = 0;
        cell_offsets[i] = 0;
    }

}
     85e:	08 95       	ret

00000860 <print_all_known_stations>:

void print_all_known_stations(void)
{
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
    int i;
    lcd_init();
     864:	0e 94 bb 04 	call	0x976	; 0x976 <lcd_init>
    string_write_int(num_stations,3);
     868:	63 e0       	ldi	r22, 0x03	; 3
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 91 4d 03 	lds	r24, 0x034D
     870:	90 91 4e 03 	lds	r25, 0x034E
     874:	0e 94 71 01 	call	0x2e2	; 0x2e2 <string_write_int>
    string_write(" known\nstations . . .");
     878:	8f e2       	ldi	r24, 0x2F	; 47
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     880:	2f e7       	ldi	r18, 0x7F	; 127
     882:	8a e1       	ldi	r24, 0x1A	; 26
     884:	96 e0       	ldi	r25, 0x06	; 6
     886:	21 50       	subi	r18, 0x01	; 1
     888:	80 40       	sbci	r24, 0x00	; 0
     88a:	90 40       	sbci	r25, 0x00	; 0
     88c:	e1 f7       	brne	.-8      	; 0x886 <print_all_known_stations+0x26>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <print_all_known_stations+0x30>
     890:	00 00       	nop

    _delay_ms(2000);

    if (update_trigger)
     892:	80 91 b2 01 	lds	r24, 0x01B2
     896:	90 91 b3 01 	lds	r25, 0x01B3
     89a:	89 2b       	or	r24, r25
     89c:	11 f5       	brne	.+68     	; 0x8e2 <print_all_known_stations+0x82>
     89e:	c0 e0       	ldi	r28, 0x00	; 0
     8a0:	d0 e0       	ldi	r29, 0x00	; 0
        return;

    for (i=0; i<num_stations; i++)
     8a2:	80 91 4d 03 	lds	r24, 0x034D
     8a6:	90 91 4e 03 	lds	r25, 0x034E
     8aa:	c8 17       	cp	r28, r24
     8ac:	d9 07       	cpc	r29, r25
     8ae:	cc f4       	brge	.+50     	; 0x8e2 <print_all_known_stations+0x82>
    {
        if (update_trigger)
     8b0:	80 91 b2 01 	lds	r24, 0x01B2
     8b4:	90 91 b3 01 	lds	r25, 0x01B3
     8b8:	89 2b       	or	r24, r25
     8ba:	99 f4       	brne	.+38     	; 0x8e2 <print_all_known_stations+0x82>
            return;

        lcd_init();
     8bc:	0e 94 bb 04 	call	0x976	; 0x976 <lcd_init>
        print_station(i);
     8c0:	ce 01       	movw	r24, r28
     8c2:	0e 94 85 02 	call	0x50a	; 0x50a <print_station>

        if (update_trigger)
     8c6:	80 91 b2 01 	lds	r24, 0x01B2
     8ca:	90 91 b3 01 	lds	r25, 0x01B3
     8ce:	89 2b       	or	r24, r25
     8d0:	41 f4       	brne	.+16     	; 0x8e2 <print_all_known_stations+0x82>
     8d2:	8f e4       	ldi	r24, 0x4F	; 79
     8d4:	93 ec       	ldi	r25, 0xC3	; 195
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <print_all_known_stations+0x76>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <print_all_known_stations+0x7c>
     8dc:	00 00       	nop
    _delay_ms(2000);

    if (update_trigger)
        return;

    for (i=0; i<num_stations; i++)
     8de:	21 96       	adiw	r28, 0x01	; 1
     8e0:	e0 cf       	rjmp	.-64     	; 0x8a2 <print_all_known_stations+0x42>
        if (update_trigger)
            return;

        _delay_ms(200);   
    }
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <terminate_serial>:

void terminate_serial(int flag)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ec 01       	movw	r28, r24
    update_trigger = 0;
     8ee:	10 92 b3 01 	sts	0x01B3, r1
     8f2:	10 92 b2 01 	sts	0x01B2, r1
    updating = 0;
     8f6:	10 92 af 01 	sts	0x01AF, r1
     8fa:	10 92 ae 01 	sts	0x01AE, r1
    serial_timer = 0;
     8fe:	10 92 b4 01 	sts	0x01B4, r1
     902:	10 92 b5 01 	sts	0x01B5, r1
     906:	10 92 b6 01 	sts	0x01B6, r1
     90a:	10 92 b7 01 	sts	0x01B7, r1

    //import the new database
    lcd_init();
     90e:	0e 94 bb 04 	call	0x976	; 0x976 <lcd_init>

    if (flag==FL_SUCCESS)
     912:	20 97       	sbiw	r28, 0x00	; 0
     914:	19 f4       	brne	.+6      	; 0x91c <terminate_serial+0x34>
        string_write("importing ...\n");
     916:	85 e4       	ldi	r24, 0x45	; 69
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	02 c0       	rjmp	.+4      	; 0x920 <terminate_serial+0x38>
    else
        string_write("ERROR:\ntimeout ...");
     91c:	84 e5       	ldi	r24, 0x54	; 84
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>

    database_load();
     924:	0e 94 6f 03 	call	0x6de	; 0x6de <database_load>
     928:	2f e7       	ldi	r18, 0x7F	; 127
     92a:	8a e1       	ldi	r24, 0x1A	; 26
     92c:	96 e0       	ldi	r25, 0x06	; 6
     92e:	21 50       	subi	r18, 0x01	; 1
     930:	80 40       	sbci	r24, 0x00	; 0
     932:	90 40       	sbci	r25, 0x00	; 0
     934:	e1 f7       	brne	.-8      	; 0x92e <terminate_serial+0x46>
     936:	00 c0       	rjmp	.+0      	; 0x938 <terminate_serial+0x50>
     938:	00 00       	nop
    _delay_ms(2000);

    if (flag==FL_SUCCESS)
     93a:	cd 2b       	or	r28, r29
     93c:	19 f4       	brne	.+6      	; 0x944 <terminate_serial+0x5c>
        string_write("Database\nUpdated");
     93e:	87 e6       	ldi	r24, 0x67	; 103
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	02 c0       	rjmp	.+4      	; 0x948 <terminate_serial+0x60>
    else
        string_write("UPDATE\nFAILED");
     944:	88 e7       	ldi	r24, 0x78	; 120
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     94c:	2f ed       	ldi	r18, 0xDF	; 223
     94e:	83 e9       	ldi	r24, 0x93	; 147
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	21 50       	subi	r18, 0x01	; 1
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <terminate_serial+0x6a>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <terminate_serial+0x74>
     95c:	00 00       	nop

    _delay_ms(1500);

     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <datarw>:
}

void datarw(){
	//Set Enable bit high, wait, set enable bit low
	//writes out data on other bits.
    PORTA |= _BV(E);
     964:	12 9a       	sbi	0x02, 2	; 2
     966:	81 ee       	ldi	r24, 0xE1	; 225
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <datarw+0x6>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <datarw+0xc>
     970:	00 00       	nop
	_delay_ms(5);
	PORTA &= ~_BV(E);
     972:	12 98       	cbi	0x02, 2	; 2
     974:	08 95       	ret

00000976 <lcd_init>:
int chars_written = 0;
int line_num = 1;

int lcd_init()
{
    chars_written = 0;
     976:	10 92 50 03 	sts	0x0350, r1
     97a:	10 92 4f 03 	sts	0x034F, r1
    line_num = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 03 01 	sts	0x0103, r25
     986:	80 93 02 01 	sts	0x0102, r24
	//Power Port D as outputs.
	DDRA |= 0xFF;
     98a:	81 b1       	in	r24, 0x01	; 1
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	81 b9       	out	0x01, r24	; 1
     990:	87 e8       	ldi	r24, 0x87	; 135
     992:	93 e1       	ldi	r25, 0x13	; 19
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <lcd_init+0x1e>
     998:	00 c0       	rjmp	.+0      	; 0x99a <lcd_init+0x24>
     99a:	00 00       	nop

	//Wait more than 15ms after Vcc = 4.5V
	_delay_ms(20);

	//Function Set Command: 8-Bit interface
    PORTA &= ~_BV(E);
     99c:	12 98       	cbi	0x02, 2	; 2
    PORTA &= ~_BV(RS);
     99e:	10 98       	cbi	0x02, 0	; 2
    PORTA &= ~_BV(RW);
     9a0:	11 98       	cbi	0x02, 1	; 2
    PORTA &= ~_BV(DB7);
     9a2:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     9a4:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     9a6:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     9a8:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     9aa:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     9ae:	81 ee       	ldi	r24, 0xE1	; 225
     9b0:	94 e0       	ldi	r25, 0x04	; 4
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <lcd_init+0x3c>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <lcd_init+0x42>
     9b8:	00 00       	nop

	//Wait more than 4.1 ms
	_delay_ms(5);

	//Function Set Command: 8-Bit interface. Part 2
    datarw();
     9ba:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     9be:	89 ef       	ldi	r24, 0xF9	; 249
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <lcd_init+0x4c>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <lcd_init+0x52>
     9c8:	00 00       	nop
	
	//Wait more than 100 us.
	_delay_ms(1);
	
	//Function Set Command 8-Bit interface. Part 3
	datarw();
     9ca:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     9ce:	89 ef       	ldi	r24, 0xF9	; 249
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <lcd_init+0x5c>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <lcd_init+0x62>
     9d8:	00 00       	nop
	_delay_ms(1);

	//Now that this command is written, BF (busy flag) can be checked.

	//Function Set: Sets interface to 4-bit.
	PORTA &= ~_BV(DB7);
     9da:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     9dc:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     9de:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     9e0:	13 98       	cbi	0x02, 3	; 2
    datarw();
     9e2:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     9e6:	89 ef       	ldi	r24, 0xF9	; 249
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <lcd_init+0x74>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <lcd_init+0x7a>
     9f0:	00 00       	nop
    _delay_ms(1);

	//Need to change how we send data at this point to accomodate 4-bit mode.

    //Function Set: Interface
    PORTA &= ~_BV(DB7);
     9f2:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     9f4:	15 98       	cbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     9f6:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     9f8:	13 98       	cbi	0x02, 3	; 2
    datarw();
     9fa:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     9fe:	89 ef       	ldi	r24, 0xF9	; 249
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <lcd_init+0x8c>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <lcd_init+0x92>
     a08:	00 00       	nop
    _delay_ms(1);


    PORTA |= _BV(DB7); //diff
     a0a:	16 9a       	sbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a0c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a0e:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a10:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a12:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     a16:	89 ef       	ldi	r24, 0xF9	; 249
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <lcd_init+0xa4>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <lcd_init+0xaa>
     a20:	00 00       	nop
    _delay_ms(1);

    //Display OFF
    PORTA &= ~_BV(DB7);
     a22:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a24:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a26:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a28:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a2a:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     a2e:	89 ef       	ldi	r24, 0xF9	; 249
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <lcd_init+0xbc>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <lcd_init+0xc2>
     a38:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     a3a:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);//diff
     a3c:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5); //diff
     a3e:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a40:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a42:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     a46:	89 ef       	ldi	r24, 0xF9	; 249
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <lcd_init+0xd4>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <lcd_init+0xda>
     a50:	00 00       	nop
    _delay_ms(1);

    //Clear Display
    PORTA &= ~_BV(DB7);
     a52:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a54:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a56:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a58:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a5a:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     a5e:	89 ef       	ldi	r24, 0xF9	; 249
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <lcd_init+0xec>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <lcd_init+0xf2>
     a68:	00 00       	nop
    _delay_ms(1);
    
    PORTA &= ~_BV(DB7);
     a6a:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a6c:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a6e:	14 98       	cbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     a70:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     a72:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     a76:	89 ef       	ldi	r24, 0xF9	; 249
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <lcd_init+0x104>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <lcd_init+0x10a>
     a80:	00 00       	nop
    _delay_ms(1);
	
    //Entry Mode Set
    PORTA &= ~_BV(DB7);
     a82:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     a84:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     a86:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     a88:	13 98       	cbi	0x02, 3	; 2
    datarw();
     a8a:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     a8e:	89 ef       	ldi	r24, 0xF9	; 249
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <lcd_init+0x11c>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <lcd_init+0x122>
     a98:	00 00       	nop
    _delay_ms(1);

    PORTA &= ~_BV(DB7);
     a9a:	16 98       	cbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     a9c:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     a9e:	14 9a       	sbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);//diff
     aa0:	13 98       	cbi	0x02, 3	; 2
    datarw();
     aa2:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     aa6:	89 ef       	ldi	r24, 0xF9	; 249
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <lcd_init+0x134>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <lcd_init+0x13a>
     ab0:	00 00       	nop
    _delay_ms(1);

    //Display On. Cursor and Blink on.
    PORTA &= ~_BV(DB7);
     ab2:	16 98       	cbi	0x02, 6	; 2
    PORTA &= ~_BV(DB6);
     ab4:	15 98       	cbi	0x02, 5	; 2
    PORTA &= ~_BV(DB5);
     ab6:	14 98       	cbi	0x02, 4	; 2
    PORTA &= ~_BV(DB4);
     ab8:	13 98       	cbi	0x02, 3	; 2
    datarw();
     aba:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     abe:	89 ef       	ldi	r24, 0xF9	; 249
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <lcd_init+0x14c>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <lcd_init+0x152>
     ac8:	00 00       	nop
    _delay_ms(1);

    PORTA |= _BV(DB7);
     aca:	16 9a       	sbi	0x02, 6	; 2
    PORTA |= _BV(DB6);
     acc:	15 9a       	sbi	0x02, 5	; 2
    PORTA |= _BV(DB5);
     ace:	14 9a       	sbi	0x02, 4	; 2
    PORTA |= _BV(DB4);
     ad0:	13 9a       	sbi	0x02, 3	; 2
    datarw();
     ad2:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     ad6:	89 ef       	ldi	r24, 0xF9	; 249
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <lcd_init+0x164>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <lcd_init+0x16a>
     ae0:	00 00       	nop
    _delay_ms(1);

	return 0;
}
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret

00000ae8 <letterwrite>:

void letterwrite(int a, int b, int c, int d){
	
	if(a==1) PORTA |= _BV(DB7);
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	11 f4       	brne	.+4      	; 0xaf0 <letterwrite+0x8>
     aec:	16 9a       	sbi	0x02, 6	; 2
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <letterwrite+0xa>
	else   PORTA &= ~_BV(DB7);
     af0:	16 98       	cbi	0x02, 6	; 2

	if (b==1) PORTA |= _BV(DB6);
     af2:	61 30       	cpi	r22, 0x01	; 1
     af4:	71 05       	cpc	r23, r1
     af6:	11 f4       	brne	.+4      	; 0xafc <letterwrite+0x14>
     af8:	15 9a       	sbi	0x02, 5	; 2
     afa:	01 c0       	rjmp	.+2      	; 0xafe <letterwrite+0x16>
	else PORTA &= ~_BV(DB6);
     afc:	15 98       	cbi	0x02, 5	; 2
    
    	if(c==1) PORTA |= _BV(DB5);
     afe:	41 30       	cpi	r20, 0x01	; 1
     b00:	51 05       	cpc	r21, r1
     b02:	11 f4       	brne	.+4      	; 0xb08 <letterwrite+0x20>
     b04:	14 9a       	sbi	0x02, 4	; 2
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <letterwrite+0x22>
	else PORTA &= ~_BV(DB5);
     b08:	14 98       	cbi	0x02, 4	; 2
	
	if (d==1) PORTA |= _BV(DB4);
     b0a:	21 30       	cpi	r18, 0x01	; 1
     b0c:	31 05       	cpc	r19, r1
     b0e:	11 f4       	brne	.+4      	; 0xb14 <letterwrite+0x2c>
     b10:	13 9a       	sbi	0x02, 3	; 2
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <letterwrite+0x2e>
    	else PORTA &= ~_BV(DB4);
     b14:	13 98       	cbi	0x02, 3	; 2
   	datarw();
     b16:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
     b1a:	89 ef       	ldi	r24, 0xF9	; 249
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <letterwrite+0x36>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <letterwrite+0x3c>
     b24:	00 00       	nop
     b26:	08 95       	ret

00000b28 <instruction_read>:
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
}

int instruction_read() 
{
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
    int busy = 0, address = 0;
    uint8_t value;
    // Set LCD pins DB4-7 to be inputs with pull-ups
    DDRA &=~ (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4));    //Set pins as inputs;
     b2e:	81 b1       	in	r24, 0x01	; 1
     b30:	87 78       	andi	r24, 0x87	; 135
     b32:	81 b9       	out	0x01, r24	; 1

    // PORTA LCD pins RS to 0 and RW to 1
    PORTA &=~ _BV(RS);
     b34:	10 98       	cbi	0x02, 0	; 2
    PORTA |= _BV(RW);
     b36:	11 9a       	sbi	0x02, 1	; 2

    // load first 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     b38:	12 9a       	sbi	0x02, 2	; 2
     b3a:	81 ee       	ldi	r24, 0xE1	; 225
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <instruction_read+0x16>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <instruction_read+0x1c>
     b44:	00 00       	nop
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
     b46:	12 b1       	in	r17, 0x02	; 2
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     b48:	82 b1       	in	r24, 0x02	; 2
    address |= value<<6;
    value = PORTA & _BV(DB5);
     b4a:	c2 b1       	in	r28, 0x02	; 2
    address |= value<<5;
    value = PORTA & _BV(DB4);
     b4c:	a2 b1       	in	r26, 0x02	; 2
    address |= value<<4;
    
    // set the clock back to low
    PORTA &=~ _BV(E);
     b4e:	12 98       	cbi	0x02, 2	; 2
     b50:	e9 ef       	ldi	r30, 0xF9	; 249
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <instruction_read+0x2c>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <instruction_read+0x32>
     b5a:	00 00       	nop
    _delay_ms(1);

    // load last 4 bits of read data into DB4-7
    // set the clock high and wait
    PORTA |= _BV(E);
     b5c:	12 9a       	sbi	0x02, 2	; 2
     b5e:	e1 ee       	ldi	r30, 0xE1	; 225
     b60:	f4 e0       	ldi	r31, 0x04	; 4
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <instruction_read+0x3a>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <instruction_read+0x40>
     b68:	00 00       	nop
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     b6a:	e2 b1       	in	r30, 0x02	; 2
    address |= value<<3;
    value = PORTA & _BV(DB6);
     b6c:	62 b1       	in	r22, 0x02	; 2
    address |= value<<2;
    value = PORTA & _BV(DB5);
     b6e:	42 b1       	in	r20, 0x02	; 2
    address |= value<<1;
    value = PORTA & _BV(DB4);
     b70:	52 b1       	in	r21, 0x02	; 2

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
     b72:	80 72       	andi	r24, 0x20	; 32
    address |= value<<6;
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	26 e0       	ldi	r18, 0x06	; 6
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	2a 95       	dec	r18
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <instruction_read+0x50>
    value = PORTA & _BV(DB5);
     b80:	c0 71       	andi	r28, 0x10	; 16
    address |= value<<5;
     b82:	d0 e0       	ldi	r29, 0x00	; 0
     b84:	35 e0       	ldi	r19, 0x05	; 5
     b86:	cc 0f       	add	r28, r28
     b88:	dd 1f       	adc	r29, r29
     b8a:	3a 95       	dec	r19
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <instruction_read+0x5e>
     b8e:	8c 2b       	or	r24, r28
     b90:	9d 2b       	or	r25, r29
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
    address |= value<<1;
    value = PORTA & _BV(DB4);
     b92:	58 70       	andi	r21, 0x08	; 8
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
    address |= value<<4;
     b94:	85 2b       	or	r24, r21
    if (value) busy = 1;
    value = PORTA & _BV(DB6);
    address |= value<<6;
    value = PORTA & _BV(DB5);
    address |= value<<5;
    value = PORTA & _BV(DB4);
     b96:	a8 70       	andi	r26, 0x08	; 8
    address |= value<<4;
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	54 e0       	ldi	r21, 0x04	; 4
     b9c:	aa 0f       	add	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	5a 95       	dec	r21
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <instruction_read+0x74>
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
     ba4:	8a 2b       	or	r24, r26
     ba6:	9b 2b       	or	r25, r27
    // set the clock high and wait
    PORTA |= _BV(E);
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
     ba8:	e0 74       	andi	r30, 0x40	; 64
    address |= value<<3;
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	73 e0       	ldi	r23, 0x03	; 3
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	7a 95       	dec	r23
     bb4:	e1 f7       	brne	.-8      	; 0xbae <instruction_read+0x86>
    value = PORTA & _BV(DB6);
    address |= value<<2;
     bb6:	8e 2b       	or	r24, r30
     bb8:	9f 2b       	or	r25, r31
    _delay_ms(5);

    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
     bba:	60 72       	andi	r22, 0x20	; 32
    address |= value<<2;
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
    value = PORTA & _BV(DB5);
    address |= value<<1;
     bc6:	86 2b       	or	r24, r22
     bc8:	97 2b       	or	r25, r23
    value = PORTA & _BV(DB4);
    address |= value<<0;

    // set the clock back to low
    PORTA &=~ _BV(E);
     bca:	12 98       	cbi	0x02, 2	; 2

    // Operation complete. Set DB4-7 pins back to outputs
    DDRA |= (_BV(DB7)|_BV(DB6)|_BV(DB5)|_BV(DB4)); 
     bcc:	51 b1       	in	r21, 0x01	; 1
     bce:	58 67       	ori	r21, 0x78	; 120
     bd0:	51 b9       	out	0x01, r21	; 1

    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
     bd2:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     bd4:	11 98       	cbi	0x02, 1	; 2
    // read data from the GPIO pins
    value = PORTA & _BV(DB7); //this or PIND
    address |= value<<3;
    value = PORTA & _BV(DB6);
    address |= value<<2;
    value = PORTA & _BV(DB5);
     bd6:	40 71       	andi	r20, 0x10	; 16
    address |= value<<1;
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	44 0f       	add	r20, r20
     bdc:	55 1f       	adc	r21, r21
    value = PORTA & _BV(DB4);
    address |= value<<0;
     bde:	84 2b       	or	r24, r20
     be0:	95 2b       	or	r25, r21
    _delay_ms(5);

    // first bit is busy flag, last 3 are most significant 3 (of 7) bits of address counter
    // read data from the gpio pins
    value = PORTA & _BV(DB7); //this or PIND
    if (value) busy = 1;
     be2:	16 fb       	bst	r17, 6
     be4:	22 27       	eor	r18, r18
     be6:	20 f9       	bld	r18, 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
    // Write LCD pins RS back to 0 and RW back to 0
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);

    // Return the address and whether or not the device is busy
    return (address | busy<<7);
     bea:	36 95       	lsr	r19
     bec:	32 2f       	mov	r19, r18
     bee:	22 27       	eor	r18, r18
     bf0:	37 95       	ror	r19
     bf2:	27 95       	ror	r18
}
     bf4:	82 2b       	or	r24, r18
     bf6:	93 2b       	or	r25, r19
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	08 95       	ret

00000c00 <get_current_address>:
    }
}

int get_current_address() {
    int address;
    address = instruction_read()&0x7F;
     c00:	0e 94 94 05 	call	0xb28	; 0xb28 <instruction_read>
     c04:	8f 77       	andi	r24, 0x7F	; 127
     c06:	99 27       	eor	r25, r25
    return address+1;
}
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	08 95       	ret

00000c0c <write_db74>:
    datarw();
}

void write_db74(int DB7_val, int DB6_val, int DB5_val, int DB4_val)
{
    if (DB7_val == 0) PORTA &=~ _BV(DB7);
     c0c:	89 2b       	or	r24, r25
     c0e:	11 f4       	brne	.+4      	; 0xc14 <write_db74+0x8>
     c10:	16 98       	cbi	0x02, 6	; 2
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <write_db74+0xa>
    else PORTA |= _BV(DB7);
     c14:	16 9a       	sbi	0x02, 6	; 2
    if (DB6_val == 0) PORTA &=~ _BV(DB6);
     c16:	67 2b       	or	r22, r23
     c18:	11 f4       	brne	.+4      	; 0xc1e <write_db74+0x12>
     c1a:	15 98       	cbi	0x02, 5	; 2
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <write_db74+0x14>
    else PORTA |= _BV(DB6);
     c1e:	15 9a       	sbi	0x02, 5	; 2
    if (DB5_val == 0) PORTA &=~ _BV(DB5);
     c20:	45 2b       	or	r20, r21
     c22:	11 f4       	brne	.+4      	; 0xc28 <write_db74+0x1c>
     c24:	14 98       	cbi	0x02, 4	; 2
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <write_db74+0x1e>
    else PORTA |= _BV(DB5);
     c28:	14 9a       	sbi	0x02, 4	; 2
    if (DB4_val == 0) PORTA &=~ _BV(DB4);
     c2a:	23 2b       	or	r18, r19
     c2c:	11 f4       	brne	.+4      	; 0xc32 <write_db74+0x26>
     c2e:	13 98       	cbi	0x02, 3	; 2
     c30:	08 95       	ret
    else PORTA |= _BV(DB4);
     c32:	13 9a       	sbi	0x02, 3	; 2
     c34:	08 95       	ret

00000c36 <set_ddram_address>:
    int address;
    address = instruction_read()&0x7F;
    return address+1;
}

void set_ddram_address(int address) {
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
    PORTA &=~ _BV(RS);
     c3c:	10 98       	cbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     c3e:	11 98       	cbi	0x02, 1	; 2
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
     c40:	28 2f       	mov	r18, r24
     c42:	22 95       	swap	r18
     c44:	21 70       	andi	r18, 0x01	; 1
     c46:	85 fb       	bst	r24, 5
     c48:	44 27       	eor	r20, r20
     c4a:	40 f9       	bld	r20, 0
     c4c:	86 fb       	bst	r24, 6
     c4e:	66 27       	eor	r22, r22
     c50:	60 f9       	bld	r22, 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 06 06 	call	0xc0c	; 0xc0c <write_db74>
    datarw();
     c60:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
     c64:	9e 01       	movw	r18, r28
     c66:	21 70       	andi	r18, 0x01	; 1
     c68:	33 27       	eor	r19, r19
     c6a:	4c 2f       	mov	r20, r28
     c6c:	46 95       	lsr	r20
     c6e:	41 70       	andi	r20, 0x01	; 1
     c70:	c2 fb       	bst	r28, 2
     c72:	66 27       	eor	r22, r22
     c74:	60 f9       	bld	r22, 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	c3 fb       	bst	r28, 3
     c7c:	88 27       	eor	r24, r24
     c7e:	80 f9       	bld	r24, 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 06 06 	call	0xc0c	; 0xc0c <write_db74>
    datarw();
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
    PORTA &=~ _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74(1,(address>>6)&1,(address>>5)&1,(address>>4)&1);
    datarw();
    write_db74((address>>3)&1,(address>>2)&1,(address>>1)&1,(address>>0)&1);
    datarw();
     c8a:	0c 94 b2 04 	jmp	0x964	; 0x964 <datarw>

00000c8e <data_write>:
        data_write((uint8_t)mychar);
    
}

void data_write(uint8_t val)
{
     c8e:	cf 93       	push	r28
     c90:	c8 2f       	mov	r28, r24

    //write data to DD RAM
    PORTA |= _BV(RS);
     c92:	10 9a       	sbi	0x02, 0	; 2
    PORTA &=~ _BV(RW);
     c94:	11 98       	cbi	0x02, 1	; 2
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
     c96:	84 fb       	bst	r24, 4
     c98:	22 27       	eor	r18, r18
     c9a:	20 f9       	bld	r18, 0
     c9c:	85 fb       	bst	r24, 5
     c9e:	44 27       	eor	r20, r20
     ca0:	40 f9       	bld	r20, 0
     ca2:	86 fb       	bst	r24, 6
     ca4:	66 27       	eor	r22, r22
     ca6:	60 f9       	bld	r22, 0
     ca8:	88 1f       	adc	r24, r24
     caa:	88 27       	eor	r24, r24
     cac:	88 1f       	adc	r24, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 06 06 	call	0xc0c	; 0xc0c <write_db74>
    datarw();
     cba:	0e 94 b2 04 	call	0x964	; 0x964 <datarw>
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
     cbe:	2c 2f       	mov	r18, r28
     cc0:	21 70       	andi	r18, 0x01	; 1
     cc2:	c1 fb       	bst	r28, 1
     cc4:	44 27       	eor	r20, r20
     cc6:	40 f9       	bld	r20, 0
     cc8:	c2 fb       	bst	r28, 2
     cca:	66 27       	eor	r22, r22
     ccc:	60 f9       	bld	r22, 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	c3 fb       	bst	r28, 3
     cd6:	88 27       	eor	r24, r24
     cd8:	80 f9       	bld	r24, 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 06 06 	call	0xc0c	; 0xc0c <write_db74>
    datarw();
}
     ce0:	cf 91       	pop	r28
    PORTA |= _BV(RS);
    PORTA &=~ _BV(RW);
    write_db74((val>>7)&1,(val>>6)&1,(val>>5)&1,(val>>4)&1);
    datarw();
    write_db74((val>>3)&1,(val>>2)&1,(val>>1)&1,(val>>0)&1);
    datarw();
     ce2:	0c 94 b2 04 	jmp	0x964	; 0x964 <datarw>

00000ce6 <char_write>:
    // Return the address and whether or not the device is busy
    return (address | busy<<7);
}

void char_write(char mychar)
{
     ce6:	cf 93       	push	r28
     ce8:	c8 2f       	mov	r28, r24
    chars_written++;
     cea:	20 91 4f 03 	lds	r18, 0x034F
     cee:	30 91 50 03 	lds	r19, 0x0350
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	30 93 50 03 	sts	0x0350, r19
     cfa:	20 93 4f 03 	sts	0x034F, r18

    if ((chars_written==17)||(mychar=='\n'))
     cfe:	21 31       	cpi	r18, 0x11	; 17
     d00:	31 05       	cpc	r19, r1
     d02:	31 f0       	breq	.+12     	; 0xd10 <char_write+0x2a>
     d04:	8a 30       	cpi	r24, 0x0A	; 10
     d06:	21 f0       	breq	.+8      	; 0xd10 <char_write+0x2a>
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     d08:	8c 2f       	mov	r24, r28
    
}
     d0a:	cf 91       	pop	r28
            lcd_init();
        }
    }

    if (mychar!='\n')
        data_write((uint8_t)mychar);
     d0c:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <data_write>
{
    chars_written++;

    if ((chars_written==17)||(mychar=='\n'))
    {
        if (line_num==1)
     d10:	20 91 02 01 	lds	r18, 0x0102
     d14:	30 91 03 01 	lds	r19, 0x0103
     d18:	21 30       	cpi	r18, 0x01	; 1
     d1a:	31 05       	cpc	r19, r1
     d1c:	79 f4       	brne	.+30     	; 0xd3c <char_write+0x56>
        {
            set_ddram_address(0x40);
     d1e:	80 e4       	ldi	r24, 0x40	; 64
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 1b 06 	call	0xc36	; 0xc36 <set_ddram_address>
            line_num = 2;
     d26:	22 e0       	ldi	r18, 0x02	; 2
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	30 93 03 01 	sts	0x0103, r19
     d2e:	20 93 02 01 	sts	0x0102, r18
            chars_written = 0;
     d32:	10 92 50 03 	sts	0x0350, r1
     d36:	10 92 4f 03 	sts	0x034F, r1
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <char_write+0x60>
        }
        else if (line_num==2)
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	11 f4       	brne	.+4      	; 0xd46 <char_write+0x60>
        {
            lcd_init();
     d42:	0e 94 bb 04 	call	0x976	; 0x976 <lcd_init>
        }
    }

    if (mychar!='\n')
     d46:	ca 30       	cpi	r28, 0x0A	; 10
     d48:	f9 f6       	brne	.-66     	; 0xd08 <char_write+0x22>
        data_write((uint8_t)mychar);
    
}
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <string_write>:
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	ec 01       	movw	r28, r24
     d58:	0e 94 00 06 	call	0xc00	; 0xc00 <get_current_address>
     d5c:	8e 01       	movw	r16, r28
     d5e:	fe 01       	movw	r30, r28
     d60:	01 90       	ld	r0, Z+
     d62:	00 20       	and	r0, r0
     d64:	e9 f7       	brne	.-6      	; 0xd60 <string_write+0x12>
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	ec 1b       	sub	r30, r28
     d6a:	fd 0b       	sbc	r31, r29
     d6c:	c8 01       	movw	r24, r16
     d6e:	8c 1b       	sub	r24, r28
     d70:	9d 0b       	sbc	r25, r29
     d72:	8e 17       	cp	r24, r30
     d74:	9f 07       	cpc	r25, r31
     d76:	40 f4       	brcc	.+16     	; 0xd88 <string_write+0x3a>
     d78:	f8 01       	movw	r30, r16
     d7a:	81 91       	ld	r24, Z+
     d7c:	8f 01       	movw	r16, r30
     d7e:	0e 94 73 06 	call	0xce6	; 0xce6 <char_write>
     d82:	0e 94 00 06 	call	0xc00	; 0xc00 <get_current_address>
     d86:	eb cf       	rjmp	.-42     	; 0xd5e <string_write+0x10>
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <main>:
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	1f 92       	push	r1
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prepare_device>
     da0:	86 e8       	ldi	r24, 0x86	; 134
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     da8:	0e 94 6f 03 	call	0x6de	; 0x6de <database_load>
     dac:	2f e3       	ldi	r18, 0x3F	; 63
     dae:	8d e0       	ldi	r24, 0x0D	; 13
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	21 50       	subi	r18, 0x01	; 1
     db4:	80 40       	sbci	r24, 0x00	; 0
     db6:	90 40       	sbci	r25, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x20>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <main+0x2a>
     dbc:	00 00       	nop
     dbe:	84 e9       	ldi	r24, 0x94	; 148
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     dc6:	00 91 b2 01 	lds	r16, 0x01B2
     dca:	10 91 b3 01 	lds	r17, 0x01B3
     dce:	01 30       	cpi	r16, 0x01	; 1
     dd0:	11 05       	cpc	r17, r1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <main+0x44>
     dd4:	64 c0       	rjmp	.+200    	; 0xe9e <main+0x10c>
     dd6:	80 91 ae 01 	lds	r24, 0x01AE
     dda:	90 91 af 01 	lds	r25, 0x01AF
     dde:	89 2b       	or	r24, r25
     de0:	61 f4       	brne	.+24     	; 0xdfa <main+0x68>
     de2:	0e 94 bb 04 	call	0x976	; 0x976 <lcd_init>
     de6:	8a e9       	ldi	r24, 0x9A	; 154
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 a7 06 	call	0xd4e	; 0xd4e <string_write>
     dee:	10 93 af 01 	sts	0x01AF, r17
     df2:	00 93 ae 01 	sts	0x01AE, r16
     df6:	0e 94 15 04 	call	0x82a	; 0x82a <database_free>
     dfa:	90 91 bc 01 	lds	r25, 0x01BC
     dfe:	80 91 bb 01 	lds	r24, 0x01BB
     e02:	98 17       	cp	r25, r24
     e04:	49 f1       	breq	.+82     	; 0xe58 <main+0xc6>
     e06:	10 92 b4 01 	sts	0x01B4, r1
     e0a:	10 92 b5 01 	sts	0x01B5, r1
     e0e:	10 92 b6 01 	sts	0x01B6, r1
     e12:	10 92 b7 01 	sts	0x01B7, r1
     e16:	0e 94 cc 00 	call	0x198	; 0x198 <getChar>
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	0e 94 46 01 	call	0x28c	; 0x28c <serialEnd>
     e20:	69 81       	ldd	r22, Y+1	; 0x01
     e22:	89 2b       	or	r24, r25
     e24:	19 f0       	breq	.+6      	; 0xe2c <main+0x9a>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	36 c0       	rjmp	.+108    	; 0xe98 <main+0x106>
     e2c:	80 91 b0 01 	lds	r24, 0x01B0
     e30:	90 91 b1 01 	lds	r25, 0x01B1
     e34:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__eewr_byte_m1284p>
     e38:	80 91 b0 01 	lds	r24, 0x01B0
     e3c:	90 91 b1 01 	lds	r25, 0x01B1
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	90 93 b1 01 	sts	0x01B1, r25
     e46:	80 93 b0 01 	sts	0x01B0, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 ad 01 	sts	0x01AD, r25
     e52:	80 93 ac 01 	sts	0x01AC, r24
     e56:	25 c0       	rjmp	.+74     	; 0xea2 <main+0x110>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	60 91 b4 01 	lds	r22, 0x01B4
     e64:	70 91 b5 01 	lds	r23, 0x01B5
     e68:	80 91 b6 01 	lds	r24, 0x01B6
     e6c:	90 91 b7 01 	lds	r25, 0x01B7
     e70:	0e 94 67 07 	call	0xece	; 0xece <__addsf3>
     e74:	60 93 b4 01 	sts	0x01B4, r22
     e78:	70 93 b5 01 	sts	0x01B5, r23
     e7c:	80 93 b6 01 	sts	0x01B6, r24
     e80:	90 93 b7 01 	sts	0x01B7, r25
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e5       	ldi	r19, 0x50	; 80
     e88:	43 e4       	ldi	r20, 0x43	; 67
     e8a:	57 e4       	ldi	r21, 0x47	; 71
     e8c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     e90:	18 16       	cp	r1, r24
     e92:	3c f4       	brge	.+14     	; 0xea2 <main+0x110>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 74 04 	call	0x8e8	; 0x8e8 <terminate_serial>
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <main+0x110>
     e9e:	0e 94 30 04 	call	0x860	; 0x860 <print_all_known_stations>
     ea2:	80 91 ac 01 	lds	r24, 0x01AC
     ea6:	90 91 ad 01 	lds	r25, 0x01AD
     eaa:	89 2b       	or	r24, r25
     eac:	09 f4       	brne	.+2      	; 0xeb0 <main+0x11e>
     eae:	8b cf       	rjmp	.-234    	; 0xdc6 <main+0x34>
     eb0:	80 91 aa 01 	lds	r24, 0x01AA
     eb4:	90 91 ab 01 	lds	r25, 0x01AB
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	90 93 ab 01 	sts	0x01AB, r25
     ebe:	80 93 aa 01 	sts	0x01AA, r24
     ec2:	10 92 ad 01 	sts	0x01AD, r1
     ec6:	10 92 ac 01 	sts	0x01AC, r1
     eca:	7d cf       	rjmp	.-262    	; 0xdc6 <main+0x34>

00000ecc <__subsf3>:
     ecc:	50 58       	subi	r21, 0x80	; 128

00000ece <__addsf3>:
     ece:	bb 27       	eor	r27, r27
     ed0:	aa 27       	eor	r26, r26
     ed2:	0e d0       	rcall	.+28     	; 0xef0 <__addsf3x>
     ed4:	21 c1       	rjmp	.+578    	; 0x1118 <__fp_round>
     ed6:	12 d1       	rcall	.+548    	; 0x10fc <__fp_pscA>
     ed8:	30 f0       	brcs	.+12     	; 0xee6 <__addsf3+0x18>
     eda:	17 d1       	rcall	.+558    	; 0x110a <__fp_pscB>
     edc:	20 f0       	brcs	.+8      	; 0xee6 <__addsf3+0x18>
     ede:	31 f4       	brne	.+12     	; 0xeec <__addsf3+0x1e>
     ee0:	9f 3f       	cpi	r25, 0xFF	; 255
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__addsf3+0x1a>
     ee4:	1e f4       	brtc	.+6      	; 0xeec <__addsf3+0x1e>
     ee6:	07 c1       	rjmp	.+526    	; 0x10f6 <__fp_nan>
     ee8:	0e f4       	brtc	.+2      	; 0xeec <__addsf3+0x1e>
     eea:	e0 95       	com	r30
     eec:	e7 fb       	bst	r30, 7
     eee:	d4 c0       	rjmp	.+424    	; 0x1098 <__fp_inf>

00000ef0 <__addsf3x>:
     ef0:	e9 2f       	mov	r30, r25
     ef2:	23 d1       	rcall	.+582    	; 0x113a <__fp_split3>
     ef4:	80 f3       	brcs	.-32     	; 0xed6 <__addsf3+0x8>
     ef6:	ba 17       	cp	r27, r26
     ef8:	62 07       	cpc	r22, r18
     efa:	73 07       	cpc	r23, r19
     efc:	84 07       	cpc	r24, r20
     efe:	95 07       	cpc	r25, r21
     f00:	18 f0       	brcs	.+6      	; 0xf08 <__addsf3x+0x18>
     f02:	71 f4       	brne	.+28     	; 0xf20 <__addsf3x+0x30>
     f04:	9e f5       	brtc	.+102    	; 0xf6c <__addsf3x+0x7c>
     f06:	52 c1       	rjmp	.+676    	; 0x11ac <__fp_zero>
     f08:	0e f4       	brtc	.+2      	; 0xf0c <__addsf3x+0x1c>
     f0a:	e0 95       	com	r30
     f0c:	0b 2e       	mov	r0, r27
     f0e:	ba 2f       	mov	r27, r26
     f10:	a0 2d       	mov	r26, r0
     f12:	0b 01       	movw	r0, r22
     f14:	b9 01       	movw	r22, r18
     f16:	90 01       	movw	r18, r0
     f18:	0c 01       	movw	r0, r24
     f1a:	ca 01       	movw	r24, r20
     f1c:	a0 01       	movw	r20, r0
     f1e:	11 24       	eor	r1, r1
     f20:	ff 27       	eor	r31, r31
     f22:	59 1b       	sub	r21, r25
     f24:	99 f0       	breq	.+38     	; 0xf4c <__addsf3x+0x5c>
     f26:	59 3f       	cpi	r21, 0xF9	; 249
     f28:	50 f4       	brcc	.+20     	; 0xf3e <__addsf3x+0x4e>
     f2a:	50 3e       	cpi	r21, 0xE0	; 224
     f2c:	68 f1       	brcs	.+90     	; 0xf88 <__addsf3x+0x98>
     f2e:	1a 16       	cp	r1, r26
     f30:	f0 40       	sbci	r31, 0x00	; 0
     f32:	a2 2f       	mov	r26, r18
     f34:	23 2f       	mov	r18, r19
     f36:	34 2f       	mov	r19, r20
     f38:	44 27       	eor	r20, r20
     f3a:	58 5f       	subi	r21, 0xF8	; 248
     f3c:	f3 cf       	rjmp	.-26     	; 0xf24 <__addsf3x+0x34>
     f3e:	46 95       	lsr	r20
     f40:	37 95       	ror	r19
     f42:	27 95       	ror	r18
     f44:	a7 95       	ror	r26
     f46:	f0 40       	sbci	r31, 0x00	; 0
     f48:	53 95       	inc	r21
     f4a:	c9 f7       	brne	.-14     	; 0xf3e <__addsf3x+0x4e>
     f4c:	7e f4       	brtc	.+30     	; 0xf6c <__addsf3x+0x7c>
     f4e:	1f 16       	cp	r1, r31
     f50:	ba 0b       	sbc	r27, r26
     f52:	62 0b       	sbc	r22, r18
     f54:	73 0b       	sbc	r23, r19
     f56:	84 0b       	sbc	r24, r20
     f58:	ba f0       	brmi	.+46     	; 0xf88 <__addsf3x+0x98>
     f5a:	91 50       	subi	r25, 0x01	; 1
     f5c:	a1 f0       	breq	.+40     	; 0xf86 <__addsf3x+0x96>
     f5e:	ff 0f       	add	r31, r31
     f60:	bb 1f       	adc	r27, r27
     f62:	66 1f       	adc	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	88 1f       	adc	r24, r24
     f68:	c2 f7       	brpl	.-16     	; 0xf5a <__addsf3x+0x6a>
     f6a:	0e c0       	rjmp	.+28     	; 0xf88 <__addsf3x+0x98>
     f6c:	ba 0f       	add	r27, r26
     f6e:	62 1f       	adc	r22, r18
     f70:	73 1f       	adc	r23, r19
     f72:	84 1f       	adc	r24, r20
     f74:	48 f4       	brcc	.+18     	; 0xf88 <__addsf3x+0x98>
     f76:	87 95       	ror	r24
     f78:	77 95       	ror	r23
     f7a:	67 95       	ror	r22
     f7c:	b7 95       	ror	r27
     f7e:	f7 95       	ror	r31
     f80:	9e 3f       	cpi	r25, 0xFE	; 254
     f82:	08 f0       	brcs	.+2      	; 0xf86 <__addsf3x+0x96>
     f84:	b3 cf       	rjmp	.-154    	; 0xeec <__addsf3+0x1e>
     f86:	93 95       	inc	r25
     f88:	88 0f       	add	r24, r24
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__addsf3x+0x9e>
     f8c:	99 27       	eor	r25, r25
     f8e:	ee 0f       	add	r30, r30
     f90:	97 95       	ror	r25
     f92:	87 95       	ror	r24
     f94:	08 95       	ret

00000f96 <__fixsfsi>:
     f96:	04 d0       	rcall	.+8      	; 0xfa0 <__fixunssfsi>
     f98:	68 94       	set
     f9a:	b1 11       	cpse	r27, r1
     f9c:	08 c1       	rjmp	.+528    	; 0x11ae <__fp_szero>
     f9e:	08 95       	ret

00000fa0 <__fixunssfsi>:
     fa0:	d4 d0       	rcall	.+424    	; 0x114a <__fp_splitA>
     fa2:	88 f0       	brcs	.+34     	; 0xfc6 <__fixunssfsi+0x26>
     fa4:	9f 57       	subi	r25, 0x7F	; 127
     fa6:	90 f0       	brcs	.+36     	; 0xfcc <__fixunssfsi+0x2c>
     fa8:	b9 2f       	mov	r27, r25
     faa:	99 27       	eor	r25, r25
     fac:	b7 51       	subi	r27, 0x17	; 23
     fae:	a0 f0       	brcs	.+40     	; 0xfd8 <__fixunssfsi+0x38>
     fb0:	d1 f0       	breq	.+52     	; 0xfe6 <__fixunssfsi+0x46>
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	1a f0       	brmi	.+6      	; 0xfc2 <__fixunssfsi+0x22>
     fbc:	ba 95       	dec	r27
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__fixunssfsi+0x12>
     fc0:	12 c0       	rjmp	.+36     	; 0xfe6 <__fixunssfsi+0x46>
     fc2:	b1 30       	cpi	r27, 0x01	; 1
     fc4:	81 f0       	breq	.+32     	; 0xfe6 <__fixunssfsi+0x46>
     fc6:	f2 d0       	rcall	.+484    	; 0x11ac <__fp_zero>
     fc8:	b1 e0       	ldi	r27, 0x01	; 1
     fca:	08 95       	ret
     fcc:	ef c0       	rjmp	.+478    	; 0x11ac <__fp_zero>
     fce:	67 2f       	mov	r22, r23
     fd0:	78 2f       	mov	r23, r24
     fd2:	88 27       	eor	r24, r24
     fd4:	b8 5f       	subi	r27, 0xF8	; 248
     fd6:	39 f0       	breq	.+14     	; 0xfe6 <__fixunssfsi+0x46>
     fd8:	b9 3f       	cpi	r27, 0xF9	; 249
     fda:	cc f3       	brlt	.-14     	; 0xfce <__fixunssfsi+0x2e>
     fdc:	86 95       	lsr	r24
     fde:	77 95       	ror	r23
     fe0:	67 95       	ror	r22
     fe2:	b3 95       	inc	r27
     fe4:	d9 f7       	brne	.-10     	; 0xfdc <__fixunssfsi+0x3c>
     fe6:	3e f4       	brtc	.+14     	; 0xff6 <__fixunssfsi+0x56>
     fe8:	90 95       	com	r25
     fea:	80 95       	com	r24
     fec:	70 95       	com	r23
     fee:	61 95       	neg	r22
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	08 95       	ret

00000ff8 <__floatunsisf>:
     ff8:	e8 94       	clt
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <__floatsisf+0x12>

00000ffc <__floatsisf>:
     ffc:	97 fb       	bst	r25, 7
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__floatsisf+0x12>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	99 23       	and	r25, r25
    1010:	a9 f0       	breq	.+42     	; 0x103c <__floatsisf+0x40>
    1012:	f9 2f       	mov	r31, r25
    1014:	96 e9       	ldi	r25, 0x96	; 150
    1016:	bb 27       	eor	r27, r27
    1018:	93 95       	inc	r25
    101a:	f6 95       	lsr	r31
    101c:	87 95       	ror	r24
    101e:	77 95       	ror	r23
    1020:	67 95       	ror	r22
    1022:	b7 95       	ror	r27
    1024:	f1 11       	cpse	r31, r1
    1026:	f8 cf       	rjmp	.-16     	; 0x1018 <__floatsisf+0x1c>
    1028:	fa f4       	brpl	.+62     	; 0x1068 <__floatsisf+0x6c>
    102a:	bb 0f       	add	r27, r27
    102c:	11 f4       	brne	.+4      	; 0x1032 <__floatsisf+0x36>
    102e:	60 ff       	sbrs	r22, 0
    1030:	1b c0       	rjmp	.+54     	; 0x1068 <__floatsisf+0x6c>
    1032:	6f 5f       	subi	r22, 0xFF	; 255
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <__floatsisf+0x6c>
    103c:	88 23       	and	r24, r24
    103e:	11 f0       	breq	.+4      	; 0x1044 <__floatsisf+0x48>
    1040:	96 e9       	ldi	r25, 0x96	; 150
    1042:	11 c0       	rjmp	.+34     	; 0x1066 <__floatsisf+0x6a>
    1044:	77 23       	and	r23, r23
    1046:	21 f0       	breq	.+8      	; 0x1050 <__floatsisf+0x54>
    1048:	9e e8       	ldi	r25, 0x8E	; 142
    104a:	87 2f       	mov	r24, r23
    104c:	76 2f       	mov	r23, r22
    104e:	05 c0       	rjmp	.+10     	; 0x105a <__floatsisf+0x5e>
    1050:	66 23       	and	r22, r22
    1052:	71 f0       	breq	.+28     	; 0x1070 <__floatsisf+0x74>
    1054:	96 e8       	ldi	r25, 0x86	; 134
    1056:	86 2f       	mov	r24, r22
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	2a f0       	brmi	.+10     	; 0x1068 <__floatsisf+0x6c>
    105e:	9a 95       	dec	r25
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	da f7       	brpl	.-10     	; 0x105e <__floatsisf+0x62>
    1068:	88 0f       	add	r24, r24
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret

00001072 <floor>:
    1072:	85 d0       	rcall	.+266    	; 0x117e <__fp_trunc>
    1074:	80 f0       	brcs	.+32     	; 0x1096 <floor+0x24>
    1076:	9f 37       	cpi	r25, 0x7F	; 127
    1078:	40 f4       	brcc	.+16     	; 0x108a <floor+0x18>
    107a:	91 11       	cpse	r25, r1
    107c:	0e f0       	brts	.+2      	; 0x1080 <floor+0xe>
    107e:	97 c0       	rjmp	.+302    	; 0x11ae <__fp_szero>
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	80 e8       	ldi	r24, 0x80	; 128
    1086:	9f eb       	ldi	r25, 0xBF	; 191
    1088:	08 95       	ret
    108a:	26 f4       	brtc	.+8      	; 0x1094 <floor+0x22>
    108c:	1b 16       	cp	r1, r27
    108e:	61 1d       	adc	r22, r1
    1090:	71 1d       	adc	r23, r1
    1092:	81 1d       	adc	r24, r1
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <__fp_mintl>
    1096:	21 c0       	rjmp	.+66     	; 0x10da <__fp_mpack>

00001098 <__fp_inf>:
    1098:	97 f9       	bld	r25, 7
    109a:	9f 67       	ori	r25, 0x7F	; 127
    109c:	80 e8       	ldi	r24, 0x80	; 128
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	08 95       	ret

000010a4 <__fp_mintl>:
    10a4:	88 23       	and	r24, r24
    10a6:	71 f4       	brne	.+28     	; 0x10c4 <__fp_mintl+0x20>
    10a8:	77 23       	and	r23, r23
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <__fp_mintl+0x10>
    10ac:	98 50       	subi	r25, 0x08	; 8
    10ae:	87 2b       	or	r24, r23
    10b0:	76 2f       	mov	r23, r22
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <__fp_mintl+0x1e>
    10b4:	66 23       	and	r22, r22
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__fp_mintl+0x18>
    10b8:	99 27       	eor	r25, r25
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <__fp_mintl+0x32>
    10bc:	90 51       	subi	r25, 0x10	; 16
    10be:	86 2b       	or	r24, r22
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	2a f0       	brmi	.+10     	; 0x10d0 <__fp_mintl+0x2c>
    10c6:	9a 95       	dec	r25
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	da f7       	brpl	.-10     	; 0x10c6 <__fp_mintl+0x22>
    10d0:	88 0f       	add	r24, r24
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret

000010da <__fp_mpack>:
    10da:	9f 3f       	cpi	r25, 0xFF	; 255
    10dc:	31 f0       	breq	.+12     	; 0x10ea <__fp_mpack_finite+0xc>

000010de <__fp_mpack_finite>:
    10de:	91 50       	subi	r25, 0x01	; 1
    10e0:	20 f4       	brcc	.+8      	; 0x10ea <__fp_mpack_finite+0xc>
    10e2:	87 95       	ror	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	b7 95       	ror	r27
    10ea:	88 0f       	add	r24, r24
    10ec:	91 1d       	adc	r25, r1
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	97 f9       	bld	r25, 7
    10f4:	08 95       	ret

000010f6 <__fp_nan>:
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	80 ec       	ldi	r24, 0xC0	; 192
    10fa:	08 95       	ret

000010fc <__fp_pscA>:
    10fc:	00 24       	eor	r0, r0
    10fe:	0a 94       	dec	r0
    1100:	16 16       	cp	r1, r22
    1102:	17 06       	cpc	r1, r23
    1104:	18 06       	cpc	r1, r24
    1106:	09 06       	cpc	r0, r25
    1108:	08 95       	ret

0000110a <__fp_pscB>:
    110a:	00 24       	eor	r0, r0
    110c:	0a 94       	dec	r0
    110e:	12 16       	cp	r1, r18
    1110:	13 06       	cpc	r1, r19
    1112:	14 06       	cpc	r1, r20
    1114:	05 06       	cpc	r0, r21
    1116:	08 95       	ret

00001118 <__fp_round>:
    1118:	09 2e       	mov	r0, r25
    111a:	03 94       	inc	r0
    111c:	00 0c       	add	r0, r0
    111e:	11 f4       	brne	.+4      	; 0x1124 <__fp_round+0xc>
    1120:	88 23       	and	r24, r24
    1122:	52 f0       	brmi	.+20     	; 0x1138 <__fp_round+0x20>
    1124:	bb 0f       	add	r27, r27
    1126:	40 f4       	brcc	.+16     	; 0x1138 <__fp_round+0x20>
    1128:	bf 2b       	or	r27, r31
    112a:	11 f4       	brne	.+4      	; 0x1130 <__fp_round+0x18>
    112c:	60 ff       	sbrs	r22, 0
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <__fp_round+0x20>
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <__fp_split3>:
    113a:	57 fd       	sbrc	r21, 7
    113c:	90 58       	subi	r25, 0x80	; 128
    113e:	44 0f       	add	r20, r20
    1140:	55 1f       	adc	r21, r21
    1142:	59 f0       	breq	.+22     	; 0x115a <__fp_splitA+0x10>
    1144:	5f 3f       	cpi	r21, 0xFF	; 255
    1146:	71 f0       	breq	.+28     	; 0x1164 <__fp_splitA+0x1a>
    1148:	47 95       	ror	r20

0000114a <__fp_splitA>:
    114a:	88 0f       	add	r24, r24
    114c:	97 fb       	bst	r25, 7
    114e:	99 1f       	adc	r25, r25
    1150:	61 f0       	breq	.+24     	; 0x116a <__fp_splitA+0x20>
    1152:	9f 3f       	cpi	r25, 0xFF	; 255
    1154:	79 f0       	breq	.+30     	; 0x1174 <__fp_splitA+0x2a>
    1156:	87 95       	ror	r24
    1158:	08 95       	ret
    115a:	12 16       	cp	r1, r18
    115c:	13 06       	cpc	r1, r19
    115e:	14 06       	cpc	r1, r20
    1160:	55 1f       	adc	r21, r21
    1162:	f2 cf       	rjmp	.-28     	; 0x1148 <__fp_split3+0xe>
    1164:	46 95       	lsr	r20
    1166:	f1 df       	rcall	.-30     	; 0x114a <__fp_splitA>
    1168:	08 c0       	rjmp	.+16     	; 0x117a <__fp_splitA+0x30>
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	18 06       	cpc	r1, r24
    1170:	99 1f       	adc	r25, r25
    1172:	f1 cf       	rjmp	.-30     	; 0x1156 <__fp_splitA+0xc>
    1174:	86 95       	lsr	r24
    1176:	71 05       	cpc	r23, r1
    1178:	61 05       	cpc	r22, r1
    117a:	08 94       	sec
    117c:	08 95       	ret

0000117e <__fp_trunc>:
    117e:	e5 df       	rcall	.-54     	; 0x114a <__fp_splitA>
    1180:	a0 f0       	brcs	.+40     	; 0x11aa <__fp_trunc+0x2c>
    1182:	be e7       	ldi	r27, 0x7E	; 126
    1184:	b9 17       	cp	r27, r25
    1186:	88 f4       	brcc	.+34     	; 0x11aa <__fp_trunc+0x2c>
    1188:	bb 27       	eor	r27, r27
    118a:	9f 38       	cpi	r25, 0x8F	; 143
    118c:	60 f4       	brcc	.+24     	; 0x11a6 <__fp_trunc+0x28>
    118e:	16 16       	cp	r1, r22
    1190:	b1 1d       	adc	r27, r1
    1192:	67 2f       	mov	r22, r23
    1194:	78 2f       	mov	r23, r24
    1196:	88 27       	eor	r24, r24
    1198:	98 5f       	subi	r25, 0xF8	; 248
    119a:	f7 cf       	rjmp	.-18     	; 0x118a <__fp_trunc+0xc>
    119c:	86 95       	lsr	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	b1 1d       	adc	r27, r1
    11a4:	93 95       	inc	r25
    11a6:	96 39       	cpi	r25, 0x96	; 150
    11a8:	c8 f3       	brcs	.-14     	; 0x119c <__fp_trunc+0x1e>
    11aa:	08 95       	ret

000011ac <__fp_zero>:
    11ac:	e8 94       	clt

000011ae <__fp_szero>:
    11ae:	bb 27       	eor	r27, r27
    11b0:	66 27       	eor	r22, r22
    11b2:	77 27       	eor	r23, r23
    11b4:	cb 01       	movw	r24, r22
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__gesf2>:
    11ba:	81 d1       	rcall	.+770    	; 0x14be <__fp_cmp>
    11bc:	08 f4       	brcc	.+2      	; 0x11c0 <__gesf2+0x6>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	08 95       	ret

000011c2 <log10>:
    11c2:	0a d0       	rcall	.+20     	; 0x11d8 <log>
    11c4:	29 ed       	ldi	r18, 0xD9	; 217
    11c6:	3b e5       	ldi	r19, 0x5B	; 91
    11c8:	4e ed       	ldi	r20, 0xDE	; 222
    11ca:	5e e3       	ldi	r21, 0x3E	; 62
    11cc:	78 c0       	rjmp	.+240    	; 0x12be <__mulsf3>
    11ce:	0e f0       	brts	.+2      	; 0x11d2 <log10+0x10>
    11d0:	84 cf       	rjmp	.-248    	; 0x10da <__fp_mpack>
    11d2:	91 cf       	rjmp	.-222    	; 0x10f6 <__fp_nan>
    11d4:	68 94       	set
    11d6:	60 cf       	rjmp	.-320    	; 0x1098 <__fp_inf>

000011d8 <log>:
    11d8:	b8 df       	rcall	.-144    	; 0x114a <__fp_splitA>
    11da:	c8 f3       	brcs	.-14     	; 0x11ce <log10+0xc>
    11dc:	99 23       	and	r25, r25
    11de:	d1 f3       	breq	.-12     	; 0x11d4 <log10+0x12>
    11e0:	c6 f3       	brts	.-16     	; 0x11d2 <log10+0x10>
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	1f 93       	push	r17
    11e8:	0f 93       	push	r16
    11ea:	ff 92       	push	r15
    11ec:	c9 2f       	mov	r28, r25
    11ee:	dd 27       	eor	r29, r29
    11f0:	88 23       	and	r24, r24
    11f2:	2a f0       	brmi	.+10     	; 0x11fe <log+0x26>
    11f4:	21 97       	sbiw	r28, 0x01	; 1
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	da f7       	brpl	.-10     	; 0x11f4 <log+0x1c>
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f eb       	ldi	r21, 0xBF	; 191
    1206:	9f e3       	ldi	r25, 0x3F	; 63
    1208:	88 39       	cpi	r24, 0x98	; 152
    120a:	20 f0       	brcs	.+8      	; 0x1214 <log+0x3c>
    120c:	80 3e       	cpi	r24, 0xE0	; 224
    120e:	30 f0       	brcs	.+12     	; 0x121c <log+0x44>
    1210:	21 96       	adiw	r28, 0x01	; 1
    1212:	8f 77       	andi	r24, 0x7F	; 127
    1214:	5c de       	rcall	.-840    	; 0xece <__addsf3>
    1216:	ec e8       	ldi	r30, 0x8C	; 140
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <log+0x4a>
    121c:	58 de       	rcall	.-848    	; 0xece <__addsf3>
    121e:	e9 eb       	ldi	r30, 0xB9	; 185
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	71 d1       	rcall	.+738    	; 0x1506 <__fp_powser>
    1224:	8b 01       	movw	r16, r22
    1226:	be 01       	movw	r22, r28
    1228:	ec 01       	movw	r28, r24
    122a:	fb 2e       	mov	r15, r27
    122c:	6f 57       	subi	r22, 0x7F	; 127
    122e:	71 09       	sbc	r23, r1
    1230:	75 95       	asr	r23
    1232:	77 1f       	adc	r23, r23
    1234:	88 0b       	sbc	r24, r24
    1236:	99 0b       	sbc	r25, r25
    1238:	e1 de       	rcall	.-574    	; 0xffc <__floatsisf>
    123a:	28 e1       	ldi	r18, 0x18	; 24
    123c:	32 e7       	ldi	r19, 0x72	; 114
    123e:	41 e3       	ldi	r20, 0x31	; 49
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	49 d0       	rcall	.+146    	; 0x12d6 <__mulsf3x>
    1244:	af 2d       	mov	r26, r15
    1246:	98 01       	movw	r18, r16
    1248:	ae 01       	movw	r20, r28
    124a:	ff 90       	pop	r15
    124c:	0f 91       	pop	r16
    124e:	1f 91       	pop	r17
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	4d de       	rcall	.-870    	; 0xef0 <__addsf3x>
    1256:	60 cf       	rjmp	.-320    	; 0x1118 <__fp_round>

00001258 <modf>:
    1258:	fa 01       	movw	r30, r20
    125a:	dc 01       	movw	r26, r24
    125c:	aa 0f       	add	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	bf 57       	subi	r27, 0x7F	; 127
    1266:	28 f4       	brcc	.+10     	; 0x1272 <modf+0x1a>
    1268:	22 27       	eor	r18, r18
    126a:	33 27       	eor	r19, r19
    126c:	44 27       	eor	r20, r20
    126e:	50 78       	andi	r21, 0x80	; 128
    1270:	1f c0       	rjmp	.+62     	; 0x12b0 <modf+0x58>
    1272:	b7 51       	subi	r27, 0x17	; 23
    1274:	88 f4       	brcc	.+34     	; 0x1298 <modf+0x40>
    1276:	ab 2f       	mov	r26, r27
    1278:	00 24       	eor	r0, r0
    127a:	46 95       	lsr	r20
    127c:	37 95       	ror	r19
    127e:	27 95       	ror	r18
    1280:	01 1c       	adc	r0, r1
    1282:	a3 95       	inc	r26
    1284:	d2 f3       	brmi	.-12     	; 0x127a <modf+0x22>
    1286:	00 20       	and	r0, r0
    1288:	69 f0       	breq	.+26     	; 0x12a4 <modf+0x4c>
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	44 1f       	adc	r20, r20
    1290:	b3 95       	inc	r27
    1292:	da f3       	brmi	.-10     	; 0x128a <modf+0x32>
    1294:	0d d0       	rcall	.+26     	; 0x12b0 <modf+0x58>
    1296:	1a ce       	rjmp	.-972    	; 0xecc <__subsf3>
    1298:	61 30       	cpi	r22, 0x01	; 1
    129a:	71 05       	cpc	r23, r1
    129c:	a0 e8       	ldi	r26, 0x80	; 128
    129e:	8a 07       	cpc	r24, r26
    12a0:	b9 46       	sbci	r27, 0x69	; 105
    12a2:	30 f4       	brcc	.+12     	; 0x12b0 <modf+0x58>
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	66 27       	eor	r22, r22
    12aa:	77 27       	eor	r23, r23
    12ac:	88 27       	eor	r24, r24
    12ae:	90 78       	andi	r25, 0x80	; 128
    12b0:	30 96       	adiw	r30, 0x00	; 0
    12b2:	21 f0       	breq	.+8      	; 0x12bc <modf+0x64>
    12b4:	20 83       	st	Z, r18
    12b6:	31 83       	std	Z+1, r19	; 0x01
    12b8:	42 83       	std	Z+2, r20	; 0x02
    12ba:	53 83       	std	Z+3, r21	; 0x03
    12bc:	08 95       	ret

000012be <__mulsf3>:
    12be:	0b d0       	rcall	.+22     	; 0x12d6 <__mulsf3x>
    12c0:	2b cf       	rjmp	.-426    	; 0x1118 <__fp_round>
    12c2:	1c df       	rcall	.-456    	; 0x10fc <__fp_pscA>
    12c4:	28 f0       	brcs	.+10     	; 0x12d0 <__mulsf3+0x12>
    12c6:	21 df       	rcall	.-446    	; 0x110a <__fp_pscB>
    12c8:	18 f0       	brcs	.+6      	; 0x12d0 <__mulsf3+0x12>
    12ca:	95 23       	and	r25, r21
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <__mulsf3+0x12>
    12ce:	e4 ce       	rjmp	.-568    	; 0x1098 <__fp_inf>
    12d0:	12 cf       	rjmp	.-476    	; 0x10f6 <__fp_nan>
    12d2:	11 24       	eor	r1, r1
    12d4:	6c cf       	rjmp	.-296    	; 0x11ae <__fp_szero>

000012d6 <__mulsf3x>:
    12d6:	31 df       	rcall	.-414    	; 0x113a <__fp_split3>
    12d8:	a0 f3       	brcs	.-24     	; 0x12c2 <__mulsf3+0x4>

000012da <__mulsf3_pse>:
    12da:	95 9f       	mul	r25, r21
    12dc:	d1 f3       	breq	.-12     	; 0x12d2 <__mulsf3+0x14>
    12de:	95 0f       	add	r25, r21
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	55 1f       	adc	r21, r21
    12e4:	62 9f       	mul	r22, r18
    12e6:	f0 01       	movw	r30, r0
    12e8:	72 9f       	mul	r23, r18
    12ea:	bb 27       	eor	r27, r27
    12ec:	f0 0d       	add	r31, r0
    12ee:	b1 1d       	adc	r27, r1
    12f0:	63 9f       	mul	r22, r19
    12f2:	aa 27       	eor	r26, r26
    12f4:	f0 0d       	add	r31, r0
    12f6:	b1 1d       	adc	r27, r1
    12f8:	aa 1f       	adc	r26, r26
    12fa:	64 9f       	mul	r22, r20
    12fc:	66 27       	eor	r22, r22
    12fe:	b0 0d       	add	r27, r0
    1300:	a1 1d       	adc	r26, r1
    1302:	66 1f       	adc	r22, r22
    1304:	82 9f       	mul	r24, r18
    1306:	22 27       	eor	r18, r18
    1308:	b0 0d       	add	r27, r0
    130a:	a1 1d       	adc	r26, r1
    130c:	62 1f       	adc	r22, r18
    130e:	73 9f       	mul	r23, r19
    1310:	b0 0d       	add	r27, r0
    1312:	a1 1d       	adc	r26, r1
    1314:	62 1f       	adc	r22, r18
    1316:	83 9f       	mul	r24, r19
    1318:	a0 0d       	add	r26, r0
    131a:	61 1d       	adc	r22, r1
    131c:	22 1f       	adc	r18, r18
    131e:	74 9f       	mul	r23, r20
    1320:	33 27       	eor	r19, r19
    1322:	a0 0d       	add	r26, r0
    1324:	61 1d       	adc	r22, r1
    1326:	23 1f       	adc	r18, r19
    1328:	84 9f       	mul	r24, r20
    132a:	60 0d       	add	r22, r0
    132c:	21 1d       	adc	r18, r1
    132e:	82 2f       	mov	r24, r18
    1330:	76 2f       	mov	r23, r22
    1332:	6a 2f       	mov	r22, r26
    1334:	11 24       	eor	r1, r1
    1336:	9f 57       	subi	r25, 0x7F	; 127
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	8a f0       	brmi	.+34     	; 0x135e <__mulsf3_pse+0x84>
    133c:	e1 f0       	breq	.+56     	; 0x1376 <__mulsf3_pse+0x9c>
    133e:	88 23       	and	r24, r24
    1340:	4a f0       	brmi	.+18     	; 0x1354 <__mulsf3_pse+0x7a>
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	bb 1f       	adc	r27, r27
    1348:	66 1f       	adc	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	a9 f7       	brne	.-22     	; 0x133e <__mulsf3_pse+0x64>
    1354:	9e 3f       	cpi	r25, 0xFE	; 254
    1356:	51 05       	cpc	r21, r1
    1358:	70 f0       	brcs	.+28     	; 0x1376 <__mulsf3_pse+0x9c>
    135a:	9e ce       	rjmp	.-708    	; 0x1098 <__fp_inf>
    135c:	28 cf       	rjmp	.-432    	; 0x11ae <__fp_szero>
    135e:	5f 3f       	cpi	r21, 0xFF	; 255
    1360:	ec f3       	brlt	.-6      	; 0x135c <__mulsf3_pse+0x82>
    1362:	98 3e       	cpi	r25, 0xE8	; 232
    1364:	dc f3       	brlt	.-10     	; 0x135c <__mulsf3_pse+0x82>
    1366:	86 95       	lsr	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	b7 95       	ror	r27
    136e:	f7 95       	ror	r31
    1370:	e7 95       	ror	r30
    1372:	9f 5f       	subi	r25, 0xFF	; 255
    1374:	c1 f7       	brne	.-16     	; 0x1366 <__mulsf3_pse+0x8c>
    1376:	fe 2b       	or	r31, r30
    1378:	88 0f       	add	r24, r24
    137a:	91 1d       	adc	r25, r1
    137c:	96 95       	lsr	r25
    137e:	87 95       	ror	r24
    1380:	97 f9       	bld	r25, 7
    1382:	08 95       	ret

00001384 <pow>:
    1384:	fa 01       	movw	r30, r20
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	30 96       	adiw	r30, 0x00	; 0
    138c:	21 05       	cpc	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	99 f1       	breq	.+102    	; 0x13f8 <pow+0x74>
    1392:	61 15       	cp	r22, r1
    1394:	71 05       	cpc	r23, r1
    1396:	61 f4       	brne	.+24     	; 0x13b0 <pow+0x2c>
    1398:	80 38       	cpi	r24, 0x80	; 128
    139a:	bf e3       	ldi	r27, 0x3F	; 63
    139c:	9b 07       	cpc	r25, r27
    139e:	49 f1       	breq	.+82     	; 0x13f2 <pow+0x6e>
    13a0:	68 94       	set
    13a2:	90 38       	cpi	r25, 0x80	; 128
    13a4:	81 05       	cpc	r24, r1
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <pow+0x3c>
    13a8:	80 38       	cpi	r24, 0x80	; 128
    13aa:	bf ef       	ldi	r27, 0xFF	; 255
    13ac:	9b 07       	cpc	r25, r27
    13ae:	41 f0       	breq	.+16     	; 0x13c0 <pow+0x3c>
    13b0:	99 23       	and	r25, r25
    13b2:	42 f5       	brpl	.+80     	; 0x1404 <pow+0x80>
    13b4:	ff 3f       	cpi	r31, 0xFF	; 255
    13b6:	e1 05       	cpc	r30, r1
    13b8:	31 05       	cpc	r19, r1
    13ba:	21 05       	cpc	r18, r1
    13bc:	11 f1       	breq	.+68     	; 0x1402 <pow+0x7e>
    13be:	e8 94       	clt
    13c0:	08 94       	sec
    13c2:	e7 95       	ror	r30
    13c4:	d9 01       	movw	r26, r18
    13c6:	aa 23       	and	r26, r26
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <pow+0x50>
    13ca:	ab 2f       	mov	r26, r27
    13cc:	be 2f       	mov	r27, r30
    13ce:	f8 5f       	subi	r31, 0xF8	; 248
    13d0:	d0 f3       	brcs	.-12     	; 0x13c6 <pow+0x42>
    13d2:	10 c0       	rjmp	.+32     	; 0x13f4 <pow+0x70>
    13d4:	ff 5f       	subi	r31, 0xFF	; 255
    13d6:	70 f4       	brcc	.+28     	; 0x13f4 <pow+0x70>
    13d8:	a6 95       	lsr	r26
    13da:	e0 f7       	brcc	.-8      	; 0x13d4 <pow+0x50>
    13dc:	f7 39       	cpi	r31, 0x97	; 151
    13de:	50 f0       	brcs	.+20     	; 0x13f4 <pow+0x70>
    13e0:	19 f0       	breq	.+6      	; 0x13e8 <pow+0x64>
    13e2:	ff 3a       	cpi	r31, 0xAF	; 175
    13e4:	38 f4       	brcc	.+14     	; 0x13f4 <pow+0x70>
    13e6:	9f 77       	andi	r25, 0x7F	; 127
    13e8:	9f 93       	push	r25
    13ea:	0c d0       	rcall	.+24     	; 0x1404 <pow+0x80>
    13ec:	0f 90       	pop	r0
    13ee:	07 fc       	sbrc	r0, 7
    13f0:	90 58       	subi	r25, 0x80	; 128
    13f2:	08 95       	ret
    13f4:	3e f0       	brts	.+14     	; 0x1404 <pow+0x80>
    13f6:	7f ce       	rjmp	.-770    	; 0x10f6 <__fp_nan>
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 e8       	ldi	r24, 0x80	; 128
    13fe:	9f e3       	ldi	r25, 0x3F	; 63
    1400:	08 95       	ret
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	9f 77       	andi	r25, 0x7F	; 127
    1406:	5f 93       	push	r21
    1408:	4f 93       	push	r20
    140a:	3f 93       	push	r19
    140c:	2f 93       	push	r18
    140e:	e4 de       	rcall	.-568    	; 0x11d8 <log>
    1410:	2f 91       	pop	r18
    1412:	3f 91       	pop	r19
    1414:	4f 91       	pop	r20
    1416:	5f 91       	pop	r21
    1418:	52 df       	rcall	.-348    	; 0x12be <__mulsf3>
    141a:	25 c0       	rjmp	.+74     	; 0x1466 <exp>

0000141c <round>:
    141c:	96 de       	rcall	.-724    	; 0x114a <__fp_splitA>
    141e:	e0 f0       	brcs	.+56     	; 0x1458 <round+0x3c>
    1420:	9e 37       	cpi	r25, 0x7E	; 126
    1422:	d8 f0       	brcs	.+54     	; 0x145a <round+0x3e>
    1424:	96 39       	cpi	r25, 0x96	; 150
    1426:	b8 f4       	brcc	.+46     	; 0x1456 <round+0x3a>
    1428:	9e 38       	cpi	r25, 0x8E	; 142
    142a:	48 f4       	brcc	.+18     	; 0x143e <round+0x22>
    142c:	67 2f       	mov	r22, r23
    142e:	78 2f       	mov	r23, r24
    1430:	88 27       	eor	r24, r24
    1432:	98 5f       	subi	r25, 0xF8	; 248
    1434:	f9 cf       	rjmp	.-14     	; 0x1428 <round+0xc>
    1436:	86 95       	lsr	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	93 95       	inc	r25
    143e:	95 39       	cpi	r25, 0x95	; 149
    1440:	d0 f3       	brcs	.-12     	; 0x1436 <round+0x1a>
    1442:	b6 2f       	mov	r27, r22
    1444:	b1 70       	andi	r27, 0x01	; 1
    1446:	6b 0f       	add	r22, r27
    1448:	71 1d       	adc	r23, r1
    144a:	81 1d       	adc	r24, r1
    144c:	20 f4       	brcc	.+8      	; 0x1456 <round+0x3a>
    144e:	87 95       	ror	r24
    1450:	77 95       	ror	r23
    1452:	67 95       	ror	r22
    1454:	93 95       	inc	r25
    1456:	26 ce       	rjmp	.-948    	; 0x10a4 <__fp_mintl>
    1458:	40 ce       	rjmp	.-896    	; 0x10da <__fp_mpack>
    145a:	a9 ce       	rjmp	.-686    	; 0x11ae <__fp_szero>
    145c:	19 f4       	brne	.+6      	; 0x1464 <round+0x48>
    145e:	0e f0       	brts	.+2      	; 0x1462 <round+0x46>
    1460:	1b ce       	rjmp	.-970    	; 0x1098 <__fp_inf>
    1462:	a4 ce       	rjmp	.-696    	; 0x11ac <__fp_zero>
    1464:	48 ce       	rjmp	.-880    	; 0x10f6 <__fp_nan>

00001466 <exp>:
    1466:	71 de       	rcall	.-798    	; 0x114a <__fp_splitA>
    1468:	c8 f3       	brcs	.-14     	; 0x145c <round+0x40>
    146a:	96 38       	cpi	r25, 0x86	; 134
    146c:	c0 f7       	brcc	.-16     	; 0x145e <round+0x42>
    146e:	07 f8       	bld	r0, 7
    1470:	0f 92       	push	r0
    1472:	e8 94       	clt
    1474:	2b e3       	ldi	r18, 0x3B	; 59
    1476:	3a ea       	ldi	r19, 0xAA	; 170
    1478:	48 eb       	ldi	r20, 0xB8	; 184
    147a:	5f e7       	ldi	r21, 0x7F	; 127
    147c:	2e df       	rcall	.-420    	; 0x12da <__mulsf3_pse>
    147e:	0f 92       	push	r0
    1480:	0f 92       	push	r0
    1482:	0f 92       	push	r0
    1484:	4d b7       	in	r20, 0x3d	; 61
    1486:	5e b7       	in	r21, 0x3e	; 62
    1488:	0f 92       	push	r0
    148a:	e6 de       	rcall	.-564    	; 0x1258 <modf>
    148c:	e6 ee       	ldi	r30, 0xE6	; 230
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	3a d0       	rcall	.+116    	; 0x1506 <__fp_powser>
    1492:	4f 91       	pop	r20
    1494:	5f 91       	pop	r21
    1496:	ef 91       	pop	r30
    1498:	ff 91       	pop	r31
    149a:	e5 95       	asr	r30
    149c:	ee 1f       	adc	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	49 f0       	breq	.+18     	; 0x14b4 <exp+0x4e>
    14a2:	fe 57       	subi	r31, 0x7E	; 126
    14a4:	e0 68       	ori	r30, 0x80	; 128
    14a6:	44 27       	eor	r20, r20
    14a8:	ee 0f       	add	r30, r30
    14aa:	44 1f       	adc	r20, r20
    14ac:	fa 95       	dec	r31
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <exp+0x42>
    14b0:	41 95       	neg	r20
    14b2:	55 0b       	sbc	r21, r21
    14b4:	56 d0       	rcall	.+172    	; 0x1562 <ldexp>
    14b6:	0f 90       	pop	r0
    14b8:	07 fe       	sbrs	r0, 7
    14ba:	4a c0       	rjmp	.+148    	; 0x1550 <inverse>
    14bc:	08 95       	ret

000014be <__fp_cmp>:
    14be:	99 0f       	add	r25, r25
    14c0:	00 08       	sbc	r0, r0
    14c2:	55 0f       	add	r21, r21
    14c4:	aa 0b       	sbc	r26, r26
    14c6:	e0 e8       	ldi	r30, 0x80	; 128
    14c8:	fe ef       	ldi	r31, 0xFE	; 254
    14ca:	16 16       	cp	r1, r22
    14cc:	17 06       	cpc	r1, r23
    14ce:	e8 07       	cpc	r30, r24
    14d0:	f9 07       	cpc	r31, r25
    14d2:	c0 f0       	brcs	.+48     	; 0x1504 <__fp_cmp+0x46>
    14d4:	12 16       	cp	r1, r18
    14d6:	13 06       	cpc	r1, r19
    14d8:	e4 07       	cpc	r30, r20
    14da:	f5 07       	cpc	r31, r21
    14dc:	98 f0       	brcs	.+38     	; 0x1504 <__fp_cmp+0x46>
    14de:	62 1b       	sub	r22, r18
    14e0:	73 0b       	sbc	r23, r19
    14e2:	84 0b       	sbc	r24, r20
    14e4:	95 0b       	sbc	r25, r21
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__fp_cmp+0x38>
    14e8:	0a 26       	eor	r0, r26
    14ea:	61 f0       	breq	.+24     	; 0x1504 <__fp_cmp+0x46>
    14ec:	23 2b       	or	r18, r19
    14ee:	24 2b       	or	r18, r20
    14f0:	25 2b       	or	r18, r21
    14f2:	21 f4       	brne	.+8      	; 0x14fc <__fp_cmp+0x3e>
    14f4:	08 95       	ret
    14f6:	0a 26       	eor	r0, r26
    14f8:	09 f4       	brne	.+2      	; 0x14fc <__fp_cmp+0x3e>
    14fa:	a1 40       	sbci	r26, 0x01	; 1
    14fc:	a6 95       	lsr	r26
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	81 1d       	adc	r24, r1
    1502:	81 1d       	adc	r24, r1
    1504:	08 95       	ret

00001506 <__fp_powser>:
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	1f 93       	push	r17
    150c:	0f 93       	push	r16
    150e:	ff 92       	push	r15
    1510:	ef 92       	push	r14
    1512:	df 92       	push	r13
    1514:	7b 01       	movw	r14, r22
    1516:	8c 01       	movw	r16, r24
    1518:	68 94       	set
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <__fp_powser+0x20>
    151c:	da 2e       	mov	r13, r26
    151e:	ef 01       	movw	r28, r30
    1520:	da de       	rcall	.-588    	; 0x12d6 <__mulsf3x>
    1522:	fe 01       	movw	r30, r28
    1524:	e8 94       	clt
    1526:	a5 91       	lpm	r26, Z+
    1528:	25 91       	lpm	r18, Z+
    152a:	35 91       	lpm	r19, Z+
    152c:	45 91       	lpm	r20, Z+
    152e:	55 91       	lpm	r21, Z+
    1530:	ae f3       	brts	.-22     	; 0x151c <__fp_powser+0x16>
    1532:	ef 01       	movw	r28, r30
    1534:	dd dc       	rcall	.-1606   	; 0xef0 <__addsf3x>
    1536:	fe 01       	movw	r30, r28
    1538:	97 01       	movw	r18, r14
    153a:	a8 01       	movw	r20, r16
    153c:	da 94       	dec	r13
    153e:	79 f7       	brne	.-34     	; 0x151e <__fp_powser+0x18>
    1540:	df 90       	pop	r13
    1542:	ef 90       	pop	r14
    1544:	ff 90       	pop	r15
    1546:	0f 91       	pop	r16
    1548:	1f 91       	pop	r17
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <inverse>:
    1550:	9b 01       	movw	r18, r22
    1552:	ac 01       	movw	r20, r24
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	80 e8       	ldi	r24, 0x80	; 128
    155a:	9f e3       	ldi	r25, 0x3F	; 63
    155c:	36 c0       	rjmp	.+108    	; 0x15ca <__divsf3>
    155e:	9c cd       	rjmp	.-1224   	; 0x1098 <__fp_inf>
    1560:	bc cd       	rjmp	.-1160   	; 0x10da <__fp_mpack>

00001562 <ldexp>:
    1562:	f3 dd       	rcall	.-1050   	; 0x114a <__fp_splitA>
    1564:	e8 f3       	brcs	.-6      	; 0x1560 <inverse+0x10>
    1566:	99 23       	and	r25, r25
    1568:	d9 f3       	breq	.-10     	; 0x1560 <inverse+0x10>
    156a:	94 0f       	add	r25, r20
    156c:	51 1d       	adc	r21, r1
    156e:	bb f3       	brvs	.-18     	; 0x155e <inverse+0xe>
    1570:	91 50       	subi	r25, 0x01	; 1
    1572:	50 40       	sbci	r21, 0x00	; 0
    1574:	94 f0       	brlt	.+36     	; 0x159a <ldexp+0x38>
    1576:	59 f0       	breq	.+22     	; 0x158e <ldexp+0x2c>
    1578:	88 23       	and	r24, r24
    157a:	32 f0       	brmi	.+12     	; 0x1588 <ldexp+0x26>
    157c:	66 0f       	add	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	91 50       	subi	r25, 0x01	; 1
    1584:	50 40       	sbci	r21, 0x00	; 0
    1586:	c1 f7       	brne	.-16     	; 0x1578 <ldexp+0x16>
    1588:	9e 3f       	cpi	r25, 0xFE	; 254
    158a:	51 05       	cpc	r21, r1
    158c:	44 f7       	brge	.-48     	; 0x155e <inverse+0xe>
    158e:	88 0f       	add	r24, r24
    1590:	91 1d       	adc	r25, r1
    1592:	96 95       	lsr	r25
    1594:	87 95       	ror	r24
    1596:	97 f9       	bld	r25, 7
    1598:	08 95       	ret
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	ac f0       	brlt	.+42     	; 0x15c8 <ldexp+0x66>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	9c f0       	brlt	.+38     	; 0x15c8 <ldexp+0x66>
    15a2:	bb 27       	eor	r27, r27
    15a4:	86 95       	lsr	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b7 95       	ror	r27
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <ldexp+0x4e>
    15ae:	b1 60       	ori	r27, 0x01	; 1
    15b0:	93 95       	inc	r25
    15b2:	c1 f7       	brne	.-16     	; 0x15a4 <ldexp+0x42>
    15b4:	bb 0f       	add	r27, r27
    15b6:	58 f7       	brcc	.-42     	; 0x158e <ldexp+0x2c>
    15b8:	11 f4       	brne	.+4      	; 0x15be <ldexp+0x5c>
    15ba:	60 ff       	sbrs	r22, 0
    15bc:	e8 cf       	rjmp	.-48     	; 0x158e <ldexp+0x2c>
    15be:	6f 5f       	subi	r22, 0xFF	; 255
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	e3 cf       	rjmp	.-58     	; 0x158e <ldexp+0x2c>
    15c8:	f2 cd       	rjmp	.-1052   	; 0x11ae <__fp_szero>

000015ca <__divsf3>:
    15ca:	0c d0       	rcall	.+24     	; 0x15e4 <__divsf3x>
    15cc:	a5 cd       	rjmp	.-1206   	; 0x1118 <__fp_round>
    15ce:	9d dd       	rcall	.-1222   	; 0x110a <__fp_pscB>
    15d0:	40 f0       	brcs	.+16     	; 0x15e2 <__divsf3+0x18>
    15d2:	94 dd       	rcall	.-1240   	; 0x10fc <__fp_pscA>
    15d4:	30 f0       	brcs	.+12     	; 0x15e2 <__divsf3+0x18>
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <__divsf3+0x16>
    15d8:	5f 3f       	cpi	r21, 0xFF	; 255
    15da:	19 f0       	breq	.+6      	; 0x15e2 <__divsf3+0x18>
    15dc:	5d cd       	rjmp	.-1350   	; 0x1098 <__fp_inf>
    15de:	51 11       	cpse	r21, r1
    15e0:	e6 cd       	rjmp	.-1076   	; 0x11ae <__fp_szero>
    15e2:	89 cd       	rjmp	.-1262   	; 0x10f6 <__fp_nan>

000015e4 <__divsf3x>:
    15e4:	aa dd       	rcall	.-1196   	; 0x113a <__fp_split3>
    15e6:	98 f3       	brcs	.-26     	; 0x15ce <__divsf3+0x4>

000015e8 <__divsf3_pse>:
    15e8:	99 23       	and	r25, r25
    15ea:	c9 f3       	breq	.-14     	; 0x15de <__divsf3+0x14>
    15ec:	55 23       	and	r21, r21
    15ee:	b1 f3       	breq	.-20     	; 0x15dc <__divsf3+0x12>
    15f0:	95 1b       	sub	r25, r21
    15f2:	55 0b       	sbc	r21, r21
    15f4:	bb 27       	eor	r27, r27
    15f6:	aa 27       	eor	r26, r26
    15f8:	62 17       	cp	r22, r18
    15fa:	73 07       	cpc	r23, r19
    15fc:	84 07       	cpc	r24, r20
    15fe:	38 f0       	brcs	.+14     	; 0x160e <__divsf3_pse+0x26>
    1600:	9f 5f       	subi	r25, 0xFF	; 255
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	44 1f       	adc	r20, r20
    160a:	aa 1f       	adc	r26, r26
    160c:	a9 f3       	breq	.-22     	; 0x15f8 <__divsf3_pse+0x10>
    160e:	33 d0       	rcall	.+102    	; 0x1676 <__divsf3_pse+0x8e>
    1610:	0e 2e       	mov	r0, r30
    1612:	3a f0       	brmi	.+14     	; 0x1622 <__divsf3_pse+0x3a>
    1614:	e0 e8       	ldi	r30, 0x80	; 128
    1616:	30 d0       	rcall	.+96     	; 0x1678 <__divsf3_pse+0x90>
    1618:	91 50       	subi	r25, 0x01	; 1
    161a:	50 40       	sbci	r21, 0x00	; 0
    161c:	e6 95       	lsr	r30
    161e:	00 1c       	adc	r0, r0
    1620:	ca f7       	brpl	.-14     	; 0x1614 <__divsf3_pse+0x2c>
    1622:	29 d0       	rcall	.+82     	; 0x1676 <__divsf3_pse+0x8e>
    1624:	fe 2f       	mov	r31, r30
    1626:	27 d0       	rcall	.+78     	; 0x1676 <__divsf3_pse+0x8e>
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	88 1f       	adc	r24, r24
    162e:	bb 1f       	adc	r27, r27
    1630:	26 17       	cp	r18, r22
    1632:	37 07       	cpc	r19, r23
    1634:	48 07       	cpc	r20, r24
    1636:	ab 07       	cpc	r26, r27
    1638:	b0 e8       	ldi	r27, 0x80	; 128
    163a:	09 f0       	breq	.+2      	; 0x163e <__divsf3_pse+0x56>
    163c:	bb 0b       	sbc	r27, r27
    163e:	80 2d       	mov	r24, r0
    1640:	bf 01       	movw	r22, r30
    1642:	ff 27       	eor	r31, r31
    1644:	93 58       	subi	r25, 0x83	; 131
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	2a f0       	brmi	.+10     	; 0x1654 <__divsf3_pse+0x6c>
    164a:	9e 3f       	cpi	r25, 0xFE	; 254
    164c:	51 05       	cpc	r21, r1
    164e:	68 f0       	brcs	.+26     	; 0x166a <__divsf3_pse+0x82>
    1650:	23 cd       	rjmp	.-1466   	; 0x1098 <__fp_inf>
    1652:	ad cd       	rjmp	.-1190   	; 0x11ae <__fp_szero>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	ec f3       	brlt	.-6      	; 0x1652 <__divsf3_pse+0x6a>
    1658:	98 3e       	cpi	r25, 0xE8	; 232
    165a:	dc f3       	brlt	.-10     	; 0x1652 <__divsf3_pse+0x6a>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f7 95       	ror	r31
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	c9 f7       	brne	.-14     	; 0x165c <__divsf3_pse+0x74>
    166a:	88 0f       	add	r24, r24
    166c:	91 1d       	adc	r25, r1
    166e:	96 95       	lsr	r25
    1670:	87 95       	ror	r24
    1672:	97 f9       	bld	r25, 7
    1674:	08 95       	ret
    1676:	e1 e0       	ldi	r30, 0x01	; 1
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	bb 1f       	adc	r27, r27
    1680:	62 17       	cp	r22, r18
    1682:	73 07       	cpc	r23, r19
    1684:	84 07       	cpc	r24, r20
    1686:	ba 07       	cpc	r27, r26
    1688:	20 f0       	brcs	.+8      	; 0x1692 <__divsf3_pse+0xaa>
    168a:	62 1b       	sub	r22, r18
    168c:	73 0b       	sbc	r23, r19
    168e:	84 0b       	sbc	r24, r20
    1690:	ba 0b       	sbc	r27, r26
    1692:	ee 1f       	adc	r30, r30
    1694:	88 f7       	brcc	.-30     	; 0x1678 <__divsf3_pse+0x90>
    1696:	e0 95       	com	r30
    1698:	08 95       	ret

0000169a <malloc>:
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	91 05       	cpc	r25, r1
    16a2:	10 f4       	brcc	.+4      	; 0x16a8 <malloc+0xe>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	e0 91 d5 03 	lds	r30, 0x03D5
    16ac:	f0 91 d6 03 	lds	r31, 0x03D6
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	30 97       	sbiw	r30, 0x00	; 0
    16ba:	39 f1       	breq	.+78     	; 0x170a <malloc+0x70>
    16bc:	40 81       	ld	r20, Z
    16be:	51 81       	ldd	r21, Z+1	; 0x01
    16c0:	48 17       	cp	r20, r24
    16c2:	59 07       	cpc	r21, r25
    16c4:	b8 f0       	brcs	.+46     	; 0x16f4 <malloc+0x5a>
    16c6:	48 17       	cp	r20, r24
    16c8:	59 07       	cpc	r21, r25
    16ca:	71 f4       	brne	.+28     	; 0x16e8 <malloc+0x4e>
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	10 97       	sbiw	r26, 0x00	; 0
    16d2:	29 f0       	breq	.+10     	; 0x16de <malloc+0x44>
    16d4:	13 96       	adiw	r26, 0x03	; 3
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
    16da:	12 97       	sbiw	r26, 0x02	; 2
    16dc:	2c c0       	rjmp	.+88     	; 0x1736 <malloc+0x9c>
    16de:	90 93 d6 03 	sts	0x03D6, r25
    16e2:	80 93 d5 03 	sts	0x03D5, r24
    16e6:	27 c0       	rjmp	.+78     	; 0x1736 <malloc+0x9c>
    16e8:	21 15       	cp	r18, r1
    16ea:	31 05       	cpc	r19, r1
    16ec:	31 f0       	breq	.+12     	; 0x16fa <malloc+0x60>
    16ee:	42 17       	cp	r20, r18
    16f0:	53 07       	cpc	r21, r19
    16f2:	18 f0       	brcs	.+6      	; 0x16fa <malloc+0x60>
    16f4:	a9 01       	movw	r20, r18
    16f6:	db 01       	movw	r26, r22
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <malloc+0x62>
    16fa:	ef 01       	movw	r28, r30
    16fc:	9a 01       	movw	r18, r20
    16fe:	bd 01       	movw	r22, r26
    1700:	df 01       	movw	r26, r30
    1702:	02 80       	ldd	r0, Z+2	; 0x02
    1704:	f3 81       	ldd	r31, Z+3	; 0x03
    1706:	e0 2d       	mov	r30, r0
    1708:	d7 cf       	rjmp	.-82     	; 0x16b8 <malloc+0x1e>
    170a:	21 15       	cp	r18, r1
    170c:	31 05       	cpc	r19, r1
    170e:	f9 f0       	breq	.+62     	; 0x174e <malloc+0xb4>
    1710:	28 1b       	sub	r18, r24
    1712:	39 0b       	sbc	r19, r25
    1714:	24 30       	cpi	r18, 0x04	; 4
    1716:	31 05       	cpc	r19, r1
    1718:	80 f4       	brcc	.+32     	; 0x173a <malloc+0xa0>
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	61 15       	cp	r22, r1
    1720:	71 05       	cpc	r23, r1
    1722:	21 f0       	breq	.+8      	; 0x172c <malloc+0x92>
    1724:	fb 01       	movw	r30, r22
    1726:	93 83       	std	Z+3, r25	; 0x03
    1728:	82 83       	std	Z+2, r24	; 0x02
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <malloc+0x9a>
    172c:	90 93 d6 03 	sts	0x03D6, r25
    1730:	80 93 d5 03 	sts	0x03D5, r24
    1734:	fe 01       	movw	r30, r28
    1736:	32 96       	adiw	r30, 0x02	; 2
    1738:	44 c0       	rjmp	.+136    	; 0x17c2 <malloc+0x128>
    173a:	fe 01       	movw	r30, r28
    173c:	e2 0f       	add	r30, r18
    173e:	f3 1f       	adc	r31, r19
    1740:	81 93       	st	Z+, r24
    1742:	91 93       	st	Z+, r25
    1744:	22 50       	subi	r18, 0x02	; 2
    1746:	31 09       	sbc	r19, r1
    1748:	39 83       	std	Y+1, r19	; 0x01
    174a:	28 83       	st	Y, r18
    174c:	3a c0       	rjmp	.+116    	; 0x17c2 <malloc+0x128>
    174e:	20 91 d3 03 	lds	r18, 0x03D3
    1752:	30 91 d4 03 	lds	r19, 0x03D4
    1756:	23 2b       	or	r18, r19
    1758:	41 f4       	brne	.+16     	; 0x176a <malloc+0xd0>
    175a:	20 91 06 01 	lds	r18, 0x0106
    175e:	30 91 07 01 	lds	r19, 0x0107
    1762:	30 93 d4 03 	sts	0x03D4, r19
    1766:	20 93 d3 03 	sts	0x03D3, r18
    176a:	20 91 04 01 	lds	r18, 0x0104
    176e:	30 91 05 01 	lds	r19, 0x0105
    1772:	21 15       	cp	r18, r1
    1774:	31 05       	cpc	r19, r1
    1776:	41 f4       	brne	.+16     	; 0x1788 <malloc+0xee>
    1778:	2d b7       	in	r18, 0x3d	; 61
    177a:	3e b7       	in	r19, 0x3e	; 62
    177c:	40 91 08 01 	lds	r20, 0x0108
    1780:	50 91 09 01 	lds	r21, 0x0109
    1784:	24 1b       	sub	r18, r20
    1786:	35 0b       	sbc	r19, r21
    1788:	e0 91 d3 03 	lds	r30, 0x03D3
    178c:	f0 91 d4 03 	lds	r31, 0x03D4
    1790:	e2 17       	cp	r30, r18
    1792:	f3 07       	cpc	r31, r19
    1794:	a0 f4       	brcc	.+40     	; 0x17be <malloc+0x124>
    1796:	2e 1b       	sub	r18, r30
    1798:	3f 0b       	sbc	r19, r31
    179a:	28 17       	cp	r18, r24
    179c:	39 07       	cpc	r19, r25
    179e:	78 f0       	brcs	.+30     	; 0x17be <malloc+0x124>
    17a0:	ac 01       	movw	r20, r24
    17a2:	4e 5f       	subi	r20, 0xFE	; 254
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	24 17       	cp	r18, r20
    17a8:	35 07       	cpc	r19, r21
    17aa:	48 f0       	brcs	.+18     	; 0x17be <malloc+0x124>
    17ac:	4e 0f       	add	r20, r30
    17ae:	5f 1f       	adc	r21, r31
    17b0:	50 93 d4 03 	sts	0x03D4, r21
    17b4:	40 93 d3 03 	sts	0x03D3, r20
    17b8:	81 93       	st	Z+, r24
    17ba:	91 93       	st	Z+, r25
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <malloc+0x128>
    17be:	e0 e0       	ldi	r30, 0x00	; 0
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	cf 01       	movw	r24, r30
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <free>:
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <free+0xa>
    17d2:	87 c0       	rjmp	.+270    	; 0x18e2 <free+0x118>
    17d4:	fc 01       	movw	r30, r24
    17d6:	32 97       	sbiw	r30, 0x02	; 2
    17d8:	13 82       	std	Z+3, r1	; 0x03
    17da:	12 82       	std	Z+2, r1	; 0x02
    17dc:	c0 91 d5 03 	lds	r28, 0x03D5
    17e0:	d0 91 d6 03 	lds	r29, 0x03D6
    17e4:	20 97       	sbiw	r28, 0x00	; 0
    17e6:	81 f4       	brne	.+32     	; 0x1808 <free+0x3e>
    17e8:	20 81       	ld	r18, Z
    17ea:	31 81       	ldd	r19, Z+1	; 0x01
    17ec:	28 0f       	add	r18, r24
    17ee:	39 1f       	adc	r19, r25
    17f0:	80 91 d3 03 	lds	r24, 0x03D3
    17f4:	90 91 d4 03 	lds	r25, 0x03D4
    17f8:	82 17       	cp	r24, r18
    17fa:	93 07       	cpc	r25, r19
    17fc:	79 f5       	brne	.+94     	; 0x185c <free+0x92>
    17fe:	f0 93 d4 03 	sts	0x03D4, r31
    1802:	e0 93 d3 03 	sts	0x03D3, r30
    1806:	6d c0       	rjmp	.+218    	; 0x18e2 <free+0x118>
    1808:	de 01       	movw	r26, r28
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	ae 17       	cp	r26, r30
    1810:	bf 07       	cpc	r27, r31
    1812:	50 f4       	brcc	.+20     	; 0x1828 <free+0x5e>
    1814:	12 96       	adiw	r26, 0x02	; 2
    1816:	4d 91       	ld	r20, X+
    1818:	5c 91       	ld	r21, X
    181a:	13 97       	sbiw	r26, 0x03	; 3
    181c:	9d 01       	movw	r18, r26
    181e:	41 15       	cp	r20, r1
    1820:	51 05       	cpc	r21, r1
    1822:	09 f1       	breq	.+66     	; 0x1866 <free+0x9c>
    1824:	da 01       	movw	r26, r20
    1826:	f3 cf       	rjmp	.-26     	; 0x180e <free+0x44>
    1828:	b3 83       	std	Z+3, r27	; 0x03
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	40 81       	ld	r20, Z
    182e:	51 81       	ldd	r21, Z+1	; 0x01
    1830:	84 0f       	add	r24, r20
    1832:	95 1f       	adc	r25, r21
    1834:	8a 17       	cp	r24, r26
    1836:	9b 07       	cpc	r25, r27
    1838:	71 f4       	brne	.+28     	; 0x1856 <free+0x8c>
    183a:	8d 91       	ld	r24, X+
    183c:	9c 91       	ld	r25, X
    183e:	11 97       	sbiw	r26, 0x01	; 1
    1840:	84 0f       	add	r24, r20
    1842:	95 1f       	adc	r25, r21
    1844:	02 96       	adiw	r24, 0x02	; 2
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	12 96       	adiw	r26, 0x02	; 2
    184c:	8d 91       	ld	r24, X+
    184e:	9c 91       	ld	r25, X
    1850:	13 97       	sbiw	r26, 0x03	; 3
    1852:	93 83       	std	Z+3, r25	; 0x03
    1854:	82 83       	std	Z+2, r24	; 0x02
    1856:	21 15       	cp	r18, r1
    1858:	31 05       	cpc	r19, r1
    185a:	29 f4       	brne	.+10     	; 0x1866 <free+0x9c>
    185c:	f0 93 d6 03 	sts	0x03D6, r31
    1860:	e0 93 d5 03 	sts	0x03D5, r30
    1864:	3e c0       	rjmp	.+124    	; 0x18e2 <free+0x118>
    1866:	d9 01       	movw	r26, r18
    1868:	13 96       	adiw	r26, 0x03	; 3
    186a:	fc 93       	st	X, r31
    186c:	ee 93       	st	-X, r30
    186e:	12 97       	sbiw	r26, 0x02	; 2
    1870:	4d 91       	ld	r20, X+
    1872:	5d 91       	ld	r21, X+
    1874:	a4 0f       	add	r26, r20
    1876:	b5 1f       	adc	r27, r21
    1878:	ea 17       	cp	r30, r26
    187a:	fb 07       	cpc	r31, r27
    187c:	79 f4       	brne	.+30     	; 0x189c <free+0xd2>
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	84 0f       	add	r24, r20
    1884:	95 1f       	adc	r25, r21
    1886:	02 96       	adiw	r24, 0x02	; 2
    1888:	d9 01       	movw	r26, r18
    188a:	11 96       	adiw	r26, 0x01	; 1
    188c:	9c 93       	st	X, r25
    188e:	8e 93       	st	-X, r24
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	13 96       	adiw	r26, 0x03	; 3
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
    189a:	12 97       	sbiw	r26, 0x02	; 2
    189c:	e0 e0       	ldi	r30, 0x00	; 0
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	19 f0       	breq	.+6      	; 0x18ae <free+0xe4>
    18a8:	fe 01       	movw	r30, r28
    18aa:	ec 01       	movw	r28, r24
    18ac:	f9 cf       	rjmp	.-14     	; 0x18a0 <free+0xd6>
    18ae:	ce 01       	movw	r24, r28
    18b0:	02 96       	adiw	r24, 0x02	; 2
    18b2:	28 81       	ld	r18, Y
    18b4:	39 81       	ldd	r19, Y+1	; 0x01
    18b6:	82 0f       	add	r24, r18
    18b8:	93 1f       	adc	r25, r19
    18ba:	20 91 d3 03 	lds	r18, 0x03D3
    18be:	30 91 d4 03 	lds	r19, 0x03D4
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	69 f4       	brne	.+26     	; 0x18e2 <free+0x118>
    18c8:	30 97       	sbiw	r30, 0x00	; 0
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <free+0x10c>
    18cc:	10 92 d6 03 	sts	0x03D6, r1
    18d0:	10 92 d5 03 	sts	0x03D5, r1
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <free+0x110>
    18d6:	13 82       	std	Z+3, r1	; 0x03
    18d8:	12 82       	std	Z+2, r1	; 0x02
    18da:	d0 93 d4 03 	sts	0x03D4, r29
    18de:	c0 93 d3 03 	sts	0x03D3, r28
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <atoi>:
    18e8:	fc 01       	movw	r30, r24
    18ea:	88 27       	eor	r24, r24
    18ec:	99 27       	eor	r25, r25
    18ee:	e8 94       	clt
    18f0:	21 91       	ld	r18, Z+
    18f2:	20 32       	cpi	r18, 0x20	; 32
    18f4:	e9 f3       	breq	.-6      	; 0x18f0 <atoi+0x8>
    18f6:	29 30       	cpi	r18, 0x09	; 9
    18f8:	10 f0       	brcs	.+4      	; 0x18fe <atoi+0x16>
    18fa:	2e 30       	cpi	r18, 0x0E	; 14
    18fc:	c8 f3       	brcs	.-14     	; 0x18f0 <atoi+0x8>
    18fe:	2b 32       	cpi	r18, 0x2B	; 43
    1900:	41 f0       	breq	.+16     	; 0x1912 <atoi+0x2a>
    1902:	2d 32       	cpi	r18, 0x2D	; 45
    1904:	39 f4       	brne	.+14     	; 0x1914 <atoi+0x2c>
    1906:	68 94       	set
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <atoi+0x2a>
    190a:	0e 94 92 0c 	call	0x1924	; 0x1924 <__mulhi_const_10>
    190e:	82 0f       	add	r24, r18
    1910:	91 1d       	adc	r25, r1
    1912:	21 91       	ld	r18, Z+
    1914:	20 53       	subi	r18, 0x30	; 48
    1916:	2a 30       	cpi	r18, 0x0A	; 10
    1918:	c0 f3       	brcs	.-16     	; 0x190a <atoi+0x22>
    191a:	1e f4       	brtc	.+6      	; 0x1922 <atoi+0x3a>
    191c:	90 95       	com	r25
    191e:	81 95       	neg	r24
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__mulhi_const_10>:
    1924:	7a e0       	ldi	r23, 0x0A	; 10
    1926:	97 9f       	mul	r25, r23
    1928:	90 2d       	mov	r25, r0
    192a:	87 9f       	mul	r24, r23
    192c:	80 2d       	mov	r24, r0
    192e:	91 0d       	add	r25, r1
    1930:	11 24       	eor	r1, r1
    1932:	08 95       	ret

00001934 <sprintf>:
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	2e 97       	sbiw	r28, 0x0e	; 14
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	0d 89       	ldd	r16, Y+21	; 0x15
    194e:	1e 89       	ldd	r17, Y+22	; 0x16
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	8c 83       	std	Y+4, r24	; 0x04
    1954:	1a 83       	std	Y+2, r17	; 0x02
    1956:	09 83       	std	Y+1, r16	; 0x01
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f e7       	ldi	r25, 0x7F	; 127
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
    1960:	ae 01       	movw	r20, r28
    1962:	47 5e       	subi	r20, 0xE7	; 231
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	6f 89       	ldd	r22, Y+23	; 0x17
    1968:	78 8d       	ldd	r23, Y+24	; 0x18
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <vfprintf>
    1972:	ef 81       	ldd	r30, Y+7	; 0x07
    1974:	f8 85       	ldd	r31, Y+8	; 0x08
    1976:	e0 0f       	add	r30, r16
    1978:	f1 1f       	adc	r31, r17
    197a:	10 82       	st	Z, r1
    197c:	2e 96       	adiw	r28, 0x0e	; 14
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <vfprintf>:
    1992:	2f 92       	push	r2
    1994:	3f 92       	push	r3
    1996:	4f 92       	push	r4
    1998:	5f 92       	push	r5
    199a:	6f 92       	push	r6
    199c:	7f 92       	push	r7
    199e:	8f 92       	push	r8
    19a0:	9f 92       	push	r9
    19a2:	af 92       	push	r10
    19a4:	bf 92       	push	r11
    19a6:	cf 92       	push	r12
    19a8:	df 92       	push	r13
    19aa:	ef 92       	push	r14
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	2c 97       	sbiw	r28, 0x0c	; 12
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	7c 01       	movw	r14, r24
    19c8:	6b 01       	movw	r12, r22
    19ca:	8a 01       	movw	r16, r20
    19cc:	fc 01       	movw	r30, r24
    19ce:	17 82       	std	Z+7, r1	; 0x07
    19d0:	16 82       	std	Z+6, r1	; 0x06
    19d2:	83 81       	ldd	r24, Z+3	; 0x03
    19d4:	81 ff       	sbrs	r24, 1
    19d6:	bd c1       	rjmp	.+890    	; 0x1d52 <vfprintf+0x3c0>
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	4c 01       	movw	r8, r24
    19de:	f7 01       	movw	r30, r14
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	f6 01       	movw	r30, r12
    19e4:	93 fd       	sbrc	r25, 3
    19e6:	85 91       	lpm	r24, Z+
    19e8:	93 ff       	sbrs	r25, 3
    19ea:	81 91       	ld	r24, Z+
    19ec:	6f 01       	movw	r12, r30
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <vfprintf+0x62>
    19f2:	ab c1       	rjmp	.+854    	; 0x1d4a <vfprintf+0x3b8>
    19f4:	85 32       	cpi	r24, 0x25	; 37
    19f6:	39 f4       	brne	.+14     	; 0x1a06 <vfprintf+0x74>
    19f8:	93 fd       	sbrc	r25, 3
    19fa:	85 91       	lpm	r24, Z+
    19fc:	93 ff       	sbrs	r25, 3
    19fe:	81 91       	ld	r24, Z+
    1a00:	6f 01       	movw	r12, r30
    1a02:	85 32       	cpi	r24, 0x25	; 37
    1a04:	29 f4       	brne	.+10     	; 0x1a10 <vfprintf+0x7e>
    1a06:	b7 01       	movw	r22, r14
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1a0e:	e7 cf       	rjmp	.-50     	; 0x19de <vfprintf+0x4c>
    1a10:	51 2c       	mov	r5, r1
    1a12:	31 2c       	mov	r3, r1
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	20 32       	cpi	r18, 0x20	; 32
    1a18:	a0 f4       	brcc	.+40     	; 0x1a42 <vfprintf+0xb0>
    1a1a:	8b 32       	cpi	r24, 0x2B	; 43
    1a1c:	69 f0       	breq	.+26     	; 0x1a38 <vfprintf+0xa6>
    1a1e:	30 f4       	brcc	.+12     	; 0x1a2c <vfprintf+0x9a>
    1a20:	80 32       	cpi	r24, 0x20	; 32
    1a22:	59 f0       	breq	.+22     	; 0x1a3a <vfprintf+0xa8>
    1a24:	83 32       	cpi	r24, 0x23	; 35
    1a26:	69 f4       	brne	.+26     	; 0x1a42 <vfprintf+0xb0>
    1a28:	20 61       	ori	r18, 0x10	; 16
    1a2a:	2c c0       	rjmp	.+88     	; 0x1a84 <vfprintf+0xf2>
    1a2c:	8d 32       	cpi	r24, 0x2D	; 45
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <vfprintf+0xac>
    1a30:	80 33       	cpi	r24, 0x30	; 48
    1a32:	39 f4       	brne	.+14     	; 0x1a42 <vfprintf+0xb0>
    1a34:	21 60       	ori	r18, 0x01	; 1
    1a36:	26 c0       	rjmp	.+76     	; 0x1a84 <vfprintf+0xf2>
    1a38:	22 60       	ori	r18, 0x02	; 2
    1a3a:	24 60       	ori	r18, 0x04	; 4
    1a3c:	23 c0       	rjmp	.+70     	; 0x1a84 <vfprintf+0xf2>
    1a3e:	28 60       	ori	r18, 0x08	; 8
    1a40:	21 c0       	rjmp	.+66     	; 0x1a84 <vfprintf+0xf2>
    1a42:	27 fd       	sbrc	r18, 7
    1a44:	27 c0       	rjmp	.+78     	; 0x1a94 <vfprintf+0x102>
    1a46:	30 ed       	ldi	r19, 0xD0	; 208
    1a48:	38 0f       	add	r19, r24
    1a4a:	3a 30       	cpi	r19, 0x0A	; 10
    1a4c:	78 f4       	brcc	.+30     	; 0x1a6c <vfprintf+0xda>
    1a4e:	26 ff       	sbrs	r18, 6
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <vfprintf+0xcc>
    1a52:	fa e0       	ldi	r31, 0x0A	; 10
    1a54:	5f 9e       	mul	r5, r31
    1a56:	30 0d       	add	r19, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	53 2e       	mov	r5, r19
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <vfprintf+0xf2>
    1a5e:	8a e0       	ldi	r24, 0x0A	; 10
    1a60:	38 9e       	mul	r3, r24
    1a62:	30 0d       	add	r19, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	33 2e       	mov	r3, r19
    1a68:	20 62       	ori	r18, 0x20	; 32
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <vfprintf+0xf2>
    1a6c:	8e 32       	cpi	r24, 0x2E	; 46
    1a6e:	21 f4       	brne	.+8      	; 0x1a78 <vfprintf+0xe6>
    1a70:	26 fd       	sbrc	r18, 6
    1a72:	6b c1       	rjmp	.+726    	; 0x1d4a <vfprintf+0x3b8>
    1a74:	20 64       	ori	r18, 0x40	; 64
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <vfprintf+0xf2>
    1a78:	8c 36       	cpi	r24, 0x6C	; 108
    1a7a:	11 f4       	brne	.+4      	; 0x1a80 <vfprintf+0xee>
    1a7c:	20 68       	ori	r18, 0x80	; 128
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <vfprintf+0xf2>
    1a80:	88 36       	cpi	r24, 0x68	; 104
    1a82:	41 f4       	brne	.+16     	; 0x1a94 <vfprintf+0x102>
    1a84:	f6 01       	movw	r30, r12
    1a86:	93 fd       	sbrc	r25, 3
    1a88:	85 91       	lpm	r24, Z+
    1a8a:	93 ff       	sbrs	r25, 3
    1a8c:	81 91       	ld	r24, Z+
    1a8e:	6f 01       	movw	r12, r30
    1a90:	81 11       	cpse	r24, r1
    1a92:	c1 cf       	rjmp	.-126    	; 0x1a16 <vfprintf+0x84>
    1a94:	98 2f       	mov	r25, r24
    1a96:	9f 7d       	andi	r25, 0xDF	; 223
    1a98:	95 54       	subi	r25, 0x45	; 69
    1a9a:	93 30       	cpi	r25, 0x03	; 3
    1a9c:	28 f4       	brcc	.+10     	; 0x1aa8 <vfprintf+0x116>
    1a9e:	0c 5f       	subi	r16, 0xFC	; 252
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	ff e3       	ldi	r31, 0x3F	; 63
    1aa4:	f9 83       	std	Y+1, r31	; 0x01
    1aa6:	0d c0       	rjmp	.+26     	; 0x1ac2 <vfprintf+0x130>
    1aa8:	83 36       	cpi	r24, 0x63	; 99
    1aaa:	31 f0       	breq	.+12     	; 0x1ab8 <vfprintf+0x126>
    1aac:	83 37       	cpi	r24, 0x73	; 115
    1aae:	71 f0       	breq	.+28     	; 0x1acc <vfprintf+0x13a>
    1ab0:	83 35       	cpi	r24, 0x53	; 83
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <vfprintf+0x124>
    1ab4:	5b c0       	rjmp	.+182    	; 0x1b6c <vfprintf+0x1da>
    1ab6:	22 c0       	rjmp	.+68     	; 0x1afc <vfprintf+0x16a>
    1ab8:	f8 01       	movw	r30, r16
    1aba:	80 81       	ld	r24, Z
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	0e 5f       	subi	r16, 0xFE	; 254
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	44 24       	eor	r4, r4
    1ac4:	43 94       	inc	r4
    1ac6:	51 2c       	mov	r5, r1
    1ac8:	54 01       	movw	r10, r8
    1aca:	15 c0       	rjmp	.+42     	; 0x1af6 <vfprintf+0x164>
    1acc:	38 01       	movw	r6, r16
    1ace:	f2 e0       	ldi	r31, 0x02	; 2
    1ad0:	6f 0e       	add	r6, r31
    1ad2:	71 1c       	adc	r7, r1
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	a0 80       	ld	r10, Z
    1ad8:	b1 80       	ldd	r11, Z+1	; 0x01
    1ada:	26 ff       	sbrs	r18, 6
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <vfprintf+0x152>
    1ade:	65 2d       	mov	r22, r5
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <vfprintf+0x156>
    1ae4:	6f ef       	ldi	r22, 0xFF	; 255
    1ae6:	7f ef       	ldi	r23, 0xFF	; 255
    1ae8:	c5 01       	movw	r24, r10
    1aea:	2c 87       	std	Y+12, r18	; 0x0c
    1aec:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <strnlen>
    1af0:	2c 01       	movw	r4, r24
    1af2:	83 01       	movw	r16, r6
    1af4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af6:	2f 77       	andi	r18, 0x7F	; 127
    1af8:	22 2e       	mov	r2, r18
    1afa:	17 c0       	rjmp	.+46     	; 0x1b2a <vfprintf+0x198>
    1afc:	38 01       	movw	r6, r16
    1afe:	f2 e0       	ldi	r31, 0x02	; 2
    1b00:	6f 0e       	add	r6, r31
    1b02:	71 1c       	adc	r7, r1
    1b04:	f8 01       	movw	r30, r16
    1b06:	a0 80       	ld	r10, Z
    1b08:	b1 80       	ldd	r11, Z+1	; 0x01
    1b0a:	26 ff       	sbrs	r18, 6
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <vfprintf+0x182>
    1b0e:	65 2d       	mov	r22, r5
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <vfprintf+0x186>
    1b14:	6f ef       	ldi	r22, 0xFF	; 255
    1b16:	7f ef       	ldi	r23, 0xFF	; 255
    1b18:	c5 01       	movw	r24, r10
    1b1a:	2c 87       	std	Y+12, r18	; 0x0c
    1b1c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <strnlen_P>
    1b20:	2c 01       	movw	r4, r24
    1b22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b24:	20 68       	ori	r18, 0x80	; 128
    1b26:	22 2e       	mov	r2, r18
    1b28:	83 01       	movw	r16, r6
    1b2a:	23 fc       	sbrc	r2, 3
    1b2c:	1b c0       	rjmp	.+54     	; 0x1b64 <vfprintf+0x1d2>
    1b2e:	83 2d       	mov	r24, r3
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	48 16       	cp	r4, r24
    1b34:	59 06       	cpc	r5, r25
    1b36:	b0 f4       	brcc	.+44     	; 0x1b64 <vfprintf+0x1d2>
    1b38:	b7 01       	movw	r22, r14
    1b3a:	80 e2       	ldi	r24, 0x20	; 32
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1b42:	3a 94       	dec	r3
    1b44:	f4 cf       	rjmp	.-24     	; 0x1b2e <vfprintf+0x19c>
    1b46:	f5 01       	movw	r30, r10
    1b48:	27 fc       	sbrc	r2, 7
    1b4a:	85 91       	lpm	r24, Z+
    1b4c:	27 fe       	sbrs	r2, 7
    1b4e:	81 91       	ld	r24, Z+
    1b50:	5f 01       	movw	r10, r30
    1b52:	b7 01       	movw	r22, r14
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1b5a:	31 10       	cpse	r3, r1
    1b5c:	3a 94       	dec	r3
    1b5e:	f1 e0       	ldi	r31, 0x01	; 1
    1b60:	4f 1a       	sub	r4, r31
    1b62:	51 08       	sbc	r5, r1
    1b64:	41 14       	cp	r4, r1
    1b66:	51 04       	cpc	r5, r1
    1b68:	71 f7       	brne	.-36     	; 0x1b46 <vfprintf+0x1b4>
    1b6a:	e5 c0       	rjmp	.+458    	; 0x1d36 <vfprintf+0x3a4>
    1b6c:	84 36       	cpi	r24, 0x64	; 100
    1b6e:	11 f0       	breq	.+4      	; 0x1b74 <vfprintf+0x1e2>
    1b70:	89 36       	cpi	r24, 0x69	; 105
    1b72:	39 f5       	brne	.+78     	; 0x1bc2 <vfprintf+0x230>
    1b74:	f8 01       	movw	r30, r16
    1b76:	27 ff       	sbrs	r18, 7
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <vfprintf+0x1f6>
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	0c 5f       	subi	r16, 0xFC	; 252
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	08 c0       	rjmp	.+16     	; 0x1b98 <vfprintf+0x206>
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	88 27       	eor	r24, r24
    1b8e:	77 fd       	sbrc	r23, 7
    1b90:	80 95       	com	r24
    1b92:	98 2f       	mov	r25, r24
    1b94:	0e 5f       	subi	r16, 0xFE	; 254
    1b96:	1f 4f       	sbci	r17, 0xFF	; 255
    1b98:	2f 76       	andi	r18, 0x6F	; 111
    1b9a:	b2 2e       	mov	r11, r18
    1b9c:	97 ff       	sbrs	r25, 7
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <vfprintf+0x220>
    1ba0:	90 95       	com	r25
    1ba2:	80 95       	com	r24
    1ba4:	70 95       	com	r23
    1ba6:	61 95       	neg	r22
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	20 68       	ori	r18, 0x80	; 128
    1bb0:	b2 2e       	mov	r11, r18
    1bb2:	2a e0       	ldi	r18, 0x0A	; 10
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	a4 01       	movw	r20, r8
    1bb8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__ultoa_invert>
    1bbc:	a8 2e       	mov	r10, r24
    1bbe:	a8 18       	sub	r10, r8
    1bc0:	44 c0       	rjmp	.+136    	; 0x1c4a <vfprintf+0x2b8>
    1bc2:	85 37       	cpi	r24, 0x75	; 117
    1bc4:	29 f4       	brne	.+10     	; 0x1bd0 <vfprintf+0x23e>
    1bc6:	2f 7e       	andi	r18, 0xEF	; 239
    1bc8:	b2 2e       	mov	r11, r18
    1bca:	2a e0       	ldi	r18, 0x0A	; 10
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	25 c0       	rjmp	.+74     	; 0x1c1a <vfprintf+0x288>
    1bd0:	f2 2f       	mov	r31, r18
    1bd2:	f9 7f       	andi	r31, 0xF9	; 249
    1bd4:	bf 2e       	mov	r11, r31
    1bd6:	8f 36       	cpi	r24, 0x6F	; 111
    1bd8:	c1 f0       	breq	.+48     	; 0x1c0a <vfprintf+0x278>
    1bda:	18 f4       	brcc	.+6      	; 0x1be2 <vfprintf+0x250>
    1bdc:	88 35       	cpi	r24, 0x58	; 88
    1bde:	79 f0       	breq	.+30     	; 0x1bfe <vfprintf+0x26c>
    1be0:	b4 c0       	rjmp	.+360    	; 0x1d4a <vfprintf+0x3b8>
    1be2:	80 37       	cpi	r24, 0x70	; 112
    1be4:	19 f0       	breq	.+6      	; 0x1bec <vfprintf+0x25a>
    1be6:	88 37       	cpi	r24, 0x78	; 120
    1be8:	21 f0       	breq	.+8      	; 0x1bf2 <vfprintf+0x260>
    1bea:	af c0       	rjmp	.+350    	; 0x1d4a <vfprintf+0x3b8>
    1bec:	2f 2f       	mov	r18, r31
    1bee:	20 61       	ori	r18, 0x10	; 16
    1bf0:	b2 2e       	mov	r11, r18
    1bf2:	b4 fe       	sbrs	r11, 4
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <vfprintf+0x27e>
    1bf6:	8b 2d       	mov	r24, r11
    1bf8:	84 60       	ori	r24, 0x04	; 4
    1bfa:	b8 2e       	mov	r11, r24
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <vfprintf+0x27e>
    1bfe:	24 ff       	sbrs	r18, 4
    1c00:	0a c0       	rjmp	.+20     	; 0x1c16 <vfprintf+0x284>
    1c02:	9f 2f       	mov	r25, r31
    1c04:	96 60       	ori	r25, 0x06	; 6
    1c06:	b9 2e       	mov	r11, r25
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <vfprintf+0x284>
    1c0a:	28 e0       	ldi	r18, 0x08	; 8
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <vfprintf+0x288>
    1c10:	20 e1       	ldi	r18, 0x10	; 16
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <vfprintf+0x288>
    1c16:	20 e1       	ldi	r18, 0x10	; 16
    1c18:	32 e0       	ldi	r19, 0x02	; 2
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	b7 fe       	sbrs	r11, 7
    1c1e:	07 c0       	rjmp	.+14     	; 0x1c2e <vfprintf+0x29c>
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0c 5f       	subi	r16, 0xFC	; 252
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	06 c0       	rjmp	.+12     	; 0x1c3a <vfprintf+0x2a8>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 5f       	subi	r16, 0xFE	; 254
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__ultoa_invert>
    1c40:	a8 2e       	mov	r10, r24
    1c42:	a8 18       	sub	r10, r8
    1c44:	fb 2d       	mov	r31, r11
    1c46:	ff 77       	andi	r31, 0x7F	; 127
    1c48:	bf 2e       	mov	r11, r31
    1c4a:	b6 fe       	sbrs	r11, 6
    1c4c:	0b c0       	rjmp	.+22     	; 0x1c64 <vfprintf+0x2d2>
    1c4e:	2b 2d       	mov	r18, r11
    1c50:	2e 7f       	andi	r18, 0xFE	; 254
    1c52:	a5 14       	cp	r10, r5
    1c54:	50 f4       	brcc	.+20     	; 0x1c6a <vfprintf+0x2d8>
    1c56:	b4 fe       	sbrs	r11, 4
    1c58:	0a c0       	rjmp	.+20     	; 0x1c6e <vfprintf+0x2dc>
    1c5a:	b2 fc       	sbrc	r11, 2
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <vfprintf+0x2dc>
    1c5e:	2b 2d       	mov	r18, r11
    1c60:	2e 7e       	andi	r18, 0xEE	; 238
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <vfprintf+0x2dc>
    1c64:	7a 2c       	mov	r7, r10
    1c66:	2b 2d       	mov	r18, r11
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <vfprintf+0x2de>
    1c6a:	7a 2c       	mov	r7, r10
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <vfprintf+0x2de>
    1c6e:	75 2c       	mov	r7, r5
    1c70:	24 ff       	sbrs	r18, 4
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <vfprintf+0x2fc>
    1c74:	fe 01       	movw	r30, r28
    1c76:	ea 0d       	add	r30, r10
    1c78:	f1 1d       	adc	r31, r1
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 33       	cpi	r24, 0x30	; 48
    1c7e:	11 f4       	brne	.+4      	; 0x1c84 <vfprintf+0x2f2>
    1c80:	29 7e       	andi	r18, 0xE9	; 233
    1c82:	09 c0       	rjmp	.+18     	; 0x1c96 <vfprintf+0x304>
    1c84:	22 ff       	sbrs	r18, 2
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <vfprintf+0x302>
    1c88:	73 94       	inc	r7
    1c8a:	73 94       	inc	r7
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <vfprintf+0x304>
    1c8e:	82 2f       	mov	r24, r18
    1c90:	86 78       	andi	r24, 0x86	; 134
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <vfprintf+0x304>
    1c94:	73 94       	inc	r7
    1c96:	23 fd       	sbrc	r18, 3
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <vfprintf+0x32e>
    1c9a:	20 ff       	sbrs	r18, 0
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <vfprintf+0x318>
    1c9e:	5a 2c       	mov	r5, r10
    1ca0:	73 14       	cp	r7, r3
    1ca2:	18 f4       	brcc	.+6      	; 0x1caa <vfprintf+0x318>
    1ca4:	53 0c       	add	r5, r3
    1ca6:	57 18       	sub	r5, r7
    1ca8:	73 2c       	mov	r7, r3
    1caa:	73 14       	cp	r7, r3
    1cac:	68 f4       	brcc	.+26     	; 0x1cc8 <vfprintf+0x336>
    1cae:	b7 01       	movw	r22, r14
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	2c 87       	std	Y+12, r18	; 0x0c
    1cb6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1cba:	73 94       	inc	r7
    1cbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cbe:	f5 cf       	rjmp	.-22     	; 0x1caa <vfprintf+0x318>
    1cc0:	73 14       	cp	r7, r3
    1cc2:	10 f4       	brcc	.+4      	; 0x1cc8 <vfprintf+0x336>
    1cc4:	37 18       	sub	r3, r7
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <vfprintf+0x338>
    1cc8:	31 2c       	mov	r3, r1
    1cca:	24 ff       	sbrs	r18, 4
    1ccc:	12 c0       	rjmp	.+36     	; 0x1cf2 <vfprintf+0x360>
    1cce:	b7 01       	movw	r22, r14
    1cd0:	80 e3       	ldi	r24, 0x30	; 48
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	2c 87       	std	Y+12, r18	; 0x0c
    1cd6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1cda:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cdc:	22 ff       	sbrs	r18, 2
    1cde:	17 c0       	rjmp	.+46     	; 0x1d0e <vfprintf+0x37c>
    1ce0:	21 ff       	sbrs	r18, 1
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <vfprintf+0x358>
    1ce4:	88 e5       	ldi	r24, 0x58	; 88
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <vfprintf+0x35c>
    1cea:	88 e7       	ldi	r24, 0x78	; 120
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b7 01       	movw	r22, r14
    1cf0:	0c c0       	rjmp	.+24     	; 0x1d0a <vfprintf+0x378>
    1cf2:	82 2f       	mov	r24, r18
    1cf4:	86 78       	andi	r24, 0x86	; 134
    1cf6:	59 f0       	breq	.+22     	; 0x1d0e <vfprintf+0x37c>
    1cf8:	21 fd       	sbrc	r18, 1
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x36e>
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <vfprintf+0x370>
    1d00:	8b e2       	ldi	r24, 0x2B	; 43
    1d02:	27 fd       	sbrc	r18, 7
    1d04:	8d e2       	ldi	r24, 0x2D	; 45
    1d06:	b7 01       	movw	r22, r14
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1d0e:	a5 14       	cp	r10, r5
    1d10:	38 f4       	brcc	.+14     	; 0x1d20 <vfprintf+0x38e>
    1d12:	b7 01       	movw	r22, r14
    1d14:	80 e3       	ldi	r24, 0x30	; 48
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1d1c:	5a 94       	dec	r5
    1d1e:	f7 cf       	rjmp	.-18     	; 0x1d0e <vfprintf+0x37c>
    1d20:	aa 94       	dec	r10
    1d22:	f4 01       	movw	r30, r8
    1d24:	ea 0d       	add	r30, r10
    1d26:	f1 1d       	adc	r31, r1
    1d28:	80 81       	ld	r24, Z
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1d32:	a1 10       	cpse	r10, r1
    1d34:	f5 cf       	rjmp	.-22     	; 0x1d20 <vfprintf+0x38e>
    1d36:	33 20       	and	r3, r3
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <vfprintf+0x3aa>
    1d3a:	51 ce       	rjmp	.-862    	; 0x19de <vfprintf+0x4c>
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	80 e2       	ldi	r24, 0x20	; 32
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fputc>
    1d46:	3a 94       	dec	r3
    1d48:	f6 cf       	rjmp	.-20     	; 0x1d36 <vfprintf+0x3a4>
    1d4a:	f7 01       	movw	r30, r14
    1d4c:	86 81       	ldd	r24, Z+6	; 0x06
    1d4e:	97 81       	ldd	r25, Z+7	; 0x07
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vfprintf+0x3c4>
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	9f ef       	ldi	r25, 0xFF	; 255
    1d56:	2c 96       	adiw	r28, 0x0c	; 12
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	bf 90       	pop	r11
    1d74:	af 90       	pop	r10
    1d76:	9f 90       	pop	r9
    1d78:	8f 90       	pop	r8
    1d7a:	7f 90       	pop	r7
    1d7c:	6f 90       	pop	r6
    1d7e:	5f 90       	pop	r5
    1d80:	4f 90       	pop	r4
    1d82:	3f 90       	pop	r3
    1d84:	2f 90       	pop	r2
    1d86:	08 95       	ret

00001d88 <__eerd_block_m1284p>:
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22

00001d8c <__eerd_blraw_m1284p>:
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	f9 99       	sbic	0x1f, 1	; 31
    1d90:	fe cf       	rjmp	.-4      	; 0x1d8e <__eerd_blraw_m1284p+0x2>
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <__eerd_blraw_m1284p+0x14>
    1d94:	f2 bd       	out	0x22, r31	; 34
    1d96:	e1 bd       	out	0x21, r30	; 33
    1d98:	f8 9a       	sbi	0x1f, 0	; 31
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	00 b4       	in	r0, 0x20	; 32
    1d9e:	0d 92       	st	X+, r0
    1da0:	41 50       	subi	r20, 0x01	; 1
    1da2:	50 40       	sbci	r21, 0x00	; 0
    1da4:	b8 f7       	brcc	.-18     	; 0x1d94 <__eerd_blraw_m1284p+0x8>
    1da6:	08 95       	ret

00001da8 <__eerd_byte_m1284p>:
    1da8:	f9 99       	sbic	0x1f, 1	; 31
    1daa:	fe cf       	rjmp	.-4      	; 0x1da8 <__eerd_byte_m1284p>
    1dac:	92 bd       	out	0x22, r25	; 34
    1dae:	81 bd       	out	0x21, r24	; 33
    1db0:	f8 9a       	sbi	0x1f, 0	; 31
    1db2:	99 27       	eor	r25, r25
    1db4:	80 b5       	in	r24, 0x20	; 32
    1db6:	08 95       	ret

00001db8 <__eerd_dword_m1284p>:
    1db8:	a6 e1       	ldi	r26, 0x16	; 22
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	44 e0       	ldi	r20, 0x04	; 4
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__eerd_blraw_m1284p>

00001dc4 <__eewr_byte_m1284p>:
    1dc4:	26 2f       	mov	r18, r22

00001dc6 <__eewr_r18_m1284p>:
    1dc6:	f9 99       	sbic	0x1f, 1	; 31
    1dc8:	fe cf       	rjmp	.-4      	; 0x1dc6 <__eewr_r18_m1284p>
    1dca:	1f ba       	out	0x1f, r1	; 31
    1dcc:	92 bd       	out	0x22, r25	; 34
    1dce:	81 bd       	out	0x21, r24	; 33
    1dd0:	20 bd       	out	0x20, r18	; 32
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	fa 9a       	sbi	0x1f, 2	; 31
    1dd8:	f9 9a       	sbi	0x1f, 1	; 31
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	08 95       	ret

00001de0 <strnlen_P>:
    1de0:	fc 01       	movw	r30, r24
    1de2:	05 90       	lpm	r0, Z+
    1de4:	61 50       	subi	r22, 0x01	; 1
    1de6:	70 40       	sbci	r23, 0x00	; 0
    1de8:	01 10       	cpse	r0, r1
    1dea:	d8 f7       	brcc	.-10     	; 0x1de2 <strnlen_P+0x2>
    1dec:	80 95       	com	r24
    1dee:	90 95       	com	r25
    1df0:	8e 0f       	add	r24, r30
    1df2:	9f 1f       	adc	r25, r31
    1df4:	08 95       	ret

00001df6 <strnlen>:
    1df6:	fc 01       	movw	r30, r24
    1df8:	61 50       	subi	r22, 0x01	; 1
    1dfa:	70 40       	sbci	r23, 0x00	; 0
    1dfc:	01 90       	ld	r0, Z+
    1dfe:	01 10       	cpse	r0, r1
    1e00:	d8 f7       	brcc	.-10     	; 0x1df8 <strnlen+0x2>
    1e02:	80 95       	com	r24
    1e04:	90 95       	com	r25
    1e06:	8e 0f       	add	r24, r30
    1e08:	9f 1f       	adc	r25, r31
    1e0a:	08 95       	ret

00001e0c <fputc>:
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	18 2f       	mov	r17, r24
    1e16:	09 2f       	mov	r16, r25
    1e18:	eb 01       	movw	r28, r22
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	81 fd       	sbrc	r24, 1
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <fputc+0x1a>
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	9f ef       	ldi	r25, 0xFF	; 255
    1e24:	20 c0       	rjmp	.+64     	; 0x1e66 <fputc+0x5a>
    1e26:	82 ff       	sbrs	r24, 2
    1e28:	10 c0       	rjmp	.+32     	; 0x1e4a <fputc+0x3e>
    1e2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e30:	3d 81       	ldd	r19, Y+5	; 0x05
    1e32:	42 17       	cp	r20, r18
    1e34:	53 07       	cpc	r21, r19
    1e36:	7c f4       	brge	.+30     	; 0x1e56 <fputc+0x4a>
    1e38:	e8 81       	ld	r30, Y
    1e3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e3c:	9f 01       	movw	r18, r30
    1e3e:	2f 5f       	subi	r18, 0xFF	; 255
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	39 83       	std	Y+1, r19	; 0x01
    1e44:	28 83       	st	Y, r18
    1e46:	10 83       	st	Z, r17
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <fputc+0x4a>
    1e4a:	e8 85       	ldd	r30, Y+8	; 0x08
    1e4c:	f9 85       	ldd	r31, Y+9	; 0x09
    1e4e:	81 2f       	mov	r24, r17
    1e50:	09 95       	icall
    1e52:	89 2b       	or	r24, r25
    1e54:	29 f7       	brne	.-54     	; 0x1e20 <fputc+0x14>
    1e56:	2e 81       	ldd	r18, Y+6	; 0x06
    1e58:	3f 81       	ldd	r19, Y+7	; 0x07
    1e5a:	2f 5f       	subi	r18, 0xFF	; 255
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	3f 83       	std	Y+7, r19	; 0x07
    1e60:	2e 83       	std	Y+6, r18	; 0x06
    1e62:	81 2f       	mov	r24, r17
    1e64:	90 2f       	mov	r25, r16
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret

00001e70 <__ultoa_invert>:
    1e70:	fa 01       	movw	r30, r20
    1e72:	aa 27       	eor	r26, r26
    1e74:	28 30       	cpi	r18, 0x08	; 8
    1e76:	51 f1       	breq	.+84     	; 0x1ecc <__ultoa_invert+0x5c>
    1e78:	20 31       	cpi	r18, 0x10	; 16
    1e7a:	81 f1       	breq	.+96     	; 0x1edc <__ultoa_invert+0x6c>
    1e7c:	e8 94       	clt
    1e7e:	6f 93       	push	r22
    1e80:	6e 7f       	andi	r22, 0xFE	; 254
    1e82:	6e 5f       	subi	r22, 0xFE	; 254
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	af 4f       	sbci	r26, 0xFF	; 255
    1e8c:	b1 e0       	ldi	r27, 0x01	; 1
    1e8e:	3e d0       	rcall	.+124    	; 0x1f0c <__ultoa_invert+0x9c>
    1e90:	b4 e0       	ldi	r27, 0x04	; 4
    1e92:	3c d0       	rcall	.+120    	; 0x1f0c <__ultoa_invert+0x9c>
    1e94:	67 0f       	add	r22, r23
    1e96:	78 1f       	adc	r23, r24
    1e98:	89 1f       	adc	r24, r25
    1e9a:	9a 1f       	adc	r25, r26
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	68 0f       	add	r22, r24
    1ea0:	79 1f       	adc	r23, r25
    1ea2:	8a 1f       	adc	r24, r26
    1ea4:	91 1d       	adc	r25, r1
    1ea6:	a1 1d       	adc	r26, r1
    1ea8:	6a 0f       	add	r22, r26
    1eaa:	71 1d       	adc	r23, r1
    1eac:	81 1d       	adc	r24, r1
    1eae:	91 1d       	adc	r25, r1
    1eb0:	a1 1d       	adc	r26, r1
    1eb2:	20 d0       	rcall	.+64     	; 0x1ef4 <__ultoa_invert+0x84>
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <__ultoa_invert+0x48>
    1eb6:	68 94       	set
    1eb8:	3f 91       	pop	r19
    1eba:	2a e0       	ldi	r18, 0x0A	; 10
    1ebc:	26 9f       	mul	r18, r22
    1ebe:	11 24       	eor	r1, r1
    1ec0:	30 19       	sub	r19, r0
    1ec2:	30 5d       	subi	r19, 0xD0	; 208
    1ec4:	31 93       	st	Z+, r19
    1ec6:	de f6       	brtc	.-74     	; 0x1e7e <__ultoa_invert+0xe>
    1ec8:	cf 01       	movw	r24, r30
    1eca:	08 95       	ret
    1ecc:	46 2f       	mov	r20, r22
    1ece:	47 70       	andi	r20, 0x07	; 7
    1ed0:	40 5d       	subi	r20, 0xD0	; 208
    1ed2:	41 93       	st	Z+, r20
    1ed4:	b3 e0       	ldi	r27, 0x03	; 3
    1ed6:	0f d0       	rcall	.+30     	; 0x1ef6 <__ultoa_invert+0x86>
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__ultoa_invert+0x5c>
    1eda:	f6 cf       	rjmp	.-20     	; 0x1ec8 <__ultoa_invert+0x58>
    1edc:	46 2f       	mov	r20, r22
    1ede:	4f 70       	andi	r20, 0x0F	; 15
    1ee0:	40 5d       	subi	r20, 0xD0	; 208
    1ee2:	4a 33       	cpi	r20, 0x3A	; 58
    1ee4:	18 f0       	brcs	.+6      	; 0x1eec <__ultoa_invert+0x7c>
    1ee6:	49 5d       	subi	r20, 0xD9	; 217
    1ee8:	31 fd       	sbrc	r19, 1
    1eea:	40 52       	subi	r20, 0x20	; 32
    1eec:	41 93       	st	Z+, r20
    1eee:	02 d0       	rcall	.+4      	; 0x1ef4 <__ultoa_invert+0x84>
    1ef0:	a9 f7       	brne	.-22     	; 0x1edc <__ultoa_invert+0x6c>
    1ef2:	ea cf       	rjmp	.-44     	; 0x1ec8 <__ultoa_invert+0x58>
    1ef4:	b4 e0       	ldi	r27, 0x04	; 4
    1ef6:	a6 95       	lsr	r26
    1ef8:	97 95       	ror	r25
    1efa:	87 95       	ror	r24
    1efc:	77 95       	ror	r23
    1efe:	67 95       	ror	r22
    1f00:	ba 95       	dec	r27
    1f02:	c9 f7       	brne	.-14     	; 0x1ef6 <__ultoa_invert+0x86>
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	61 05       	cpc	r22, r1
    1f08:	71 05       	cpc	r23, r1
    1f0a:	08 95       	ret
    1f0c:	9b 01       	movw	r18, r22
    1f0e:	ac 01       	movw	r20, r24
    1f10:	0a 2e       	mov	r0, r26
    1f12:	06 94       	lsr	r0
    1f14:	57 95       	ror	r21
    1f16:	47 95       	ror	r20
    1f18:	37 95       	ror	r19
    1f1a:	27 95       	ror	r18
    1f1c:	ba 95       	dec	r27
    1f1e:	c9 f7       	brne	.-14     	; 0x1f12 <__ultoa_invert+0xa2>
    1f20:	62 0f       	add	r22, r18
    1f22:	73 1f       	adc	r23, r19
    1f24:	84 1f       	adc	r24, r20
    1f26:	95 1f       	adc	r25, r21
    1f28:	a0 1d       	adc	r26, r0
    1f2a:	08 95       	ret

00001f2c <_exit>:
    1f2c:	f8 94       	cli

00001f2e <__stop_program>:
    1f2e:	ff cf       	rjmp	.-2      	; 0x1f2e <__stop_program>
